{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u9996\u9801","text":"<p>What's new</p> <p>\u7121\u9700\u64b0\u5beb\u7a0b\u5f0f\u78bc\u5373\u53ef\u5efa\u7acb agent\u3002\u8acb\u53c3\u8003 Agent Config \u529f\u80fd\u3002</p> Agent Development Kit"},{"location":"#agent-development-kit-adk","title":"\u4ec0\u9ebc\u662f Agent Development Kit (ADK)\uff1f","text":"<p>Agent Development Kit (ADK) \u662f\u4e00\u500b\u9748\u6d3b\u4e14\u6a21\u7d44\u5316\u7684\u6846\u67b6\uff0c\u7528\u65bc\u958b\u767c\u8207\u90e8\u7f72 AI agent\u3002\u96d6\u7136 ADK \u70ba Gemini \u8207 Google \u751f\u614b\u7cfb\u9032\u884c\u4e86\u6700\u4f73\u5316\uff0c\u4f46\u5b83\u672c\u8eab\u662f\u6a21\u578b\u7121\u95dc\u3001\u90e8\u7f72\u7121\u95dc\uff0c\u4e26\u4e14\u8a2d\u8a08\u4e0a\u53ef\u8207\u5176\u4ed6\u6846\u67b6\u76f8\u5bb9\u3002ADK \u7684\u8a2d\u8a08\u7406\u5ff5\u662f\u8b93 agent \u958b\u767c\u66f4\u50cf\u662f\u4e00\u822c\u8edf\u9ad4\u958b\u767c\uff0c\u8b93\u958b\u767c\u8005\u66f4\u5bb9\u6613\u5efa\u7acb\u3001\u90e8\u7f72\u8207\u5354\u8abf\u5f9e\u7c21\u55ae\u4efb\u52d9\u5230\u8907\u96dc\u5de5\u4f5c\u6d41\u7a0b\u7684 agent \u67b6\u69cb\u3002</p> <p>\u7acb\u5373\u958b\u59cb\uff1a</p> PythonJava <p> <p> <code>pip install google-adk</code> </p></p> pom.xml<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.google.adk&lt;/groupId&gt;\n    &lt;artifactId&gt;google-adk&lt;/artifactId&gt;\n    &lt;version&gt;0.2.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> build.gradle<pre><code>dependencies {\n    implementation 'com.google.adk:google-adk:0.2.0'\n}\n</code></pre> <p> \u5feb\u901f\u958b\u59cb \u6559\u5b78 \u7bc4\u4f8b\u4ee3\u7406 API \u53c3\u8003 \u8ca2\u737b \u2764\ufe0f </p>"},{"location":"#_1","title":"\u9032\u4e00\u6b65\u4e86\u89e3","text":"<p> \u89c0\u770b\u300cIntroducing Agent Development Kit (ADK)\u300d\uff01</p> <ul> <li> <p> \u5f48\u6027\u5354\u4f5c\u7de8\u6392</p> <p>\u4f7f\u7528 workflow agent\uff08<code>Sequential</code>\u3001<code>Parallel</code>\u3001<code>Loop</code>\uff09\u5b9a\u7fa9\u53ef\u9810\u6e2c\u7684\u5de5\u4f5c\u6d41\u7a0b\uff0c\u6216\u5229\u7528\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u9a45\u52d5\u7684\u52d5\u614b\u8def\u7531 \uff08<code>LlmAgent</code> transfer\uff09\u5be6\u73fe\u81ea\u9069\u61c9\u884c\u70ba\u3002</p> <p>\u6df1\u5165\u4e86\u89e3 agent</p> </li> <li> <p> \u591a agent \u67b6\u69cb</p> <p>\u900f\u904e\u7d44\u5408\u591a\u500b\u5c08\u696d\u5316 agent \u5f62\u6210\u968e\u5c64\u5f0f\u67b6\u69cb\uff0c\u6253\u9020\u6a21\u7d44\u5316\u4e14\u53ef\u64f4\u5c55\u7684\u61c9\u7528\u7a0b\u5f0f\u3002\u5be6\u73fe\u8907\u96dc\u7684\u5354\u540c\u8207\u59d4\u6d3e\u3002</p> <p>\u63a2\u7d22\u591a agent \u7cfb\u7d71</p> </li> <li> <p> \u8c50\u5bcc\u7684\u5de5\u5177\u751f\u614b\u7cfb</p> <p>\u70ba agent \u914d\u5099\u591a\u5143\u80fd\u529b\uff1a\u53ef\u4f7f\u7528\u9810\u5efa\u5de5\u5177\uff08Search\u3001Code Exec\uff09\u3001\u81ea\u8a02\u51fd\u5f0f\u3001\u6574\u5408\u7b2c\u4e09\u65b9\u51fd\u5f0f\u5eab\uff08\u5982 LangChain\u3001CrewAI\uff09\uff0c\u751a\u81f3\u5c07\u5176\u4ed6 agent \u4f5c\u70ba\u5de5\u5177\u4f86\u4f7f\u7528\u3002</p> <p>\u700f\u89bd\u5de5\u5177</p> </li> <li> <p> \u96a8\u6642\u53ef\u90e8\u7f72</p> <p>\u5c07 agent \u5bb9\u5668\u5316\u4e26\u90e8\u7f72\u81f3\u4efb\u4f55\u74b0\u5883\u2014\u2014\u53ef\u65bc\u672c\u5730\u57f7\u884c\u3001\u900f\u904e Vertex AI Agent Engine \u64f4\u5c55\uff0c\u6216\u7d50\u5408 Cloud Run\u3001Docker \u6574\u5408\u81f3\u81ea\u8a02\u57fa\u790e\u8a2d\u65bd\u3002</p> <p>\u90e8\u7f72 agent</p> </li> <li> <p> \u5167\u5efa\u8a55\u4f30\u6a5f\u5236</p> <p>\u7cfb\u7d71\u6027\u8a55\u4f30 agent \u7684\u6548\u80fd\uff0c\u5305\u542b\u6700\u7d42\u56de\u61c9\u54c1\u8cea\u8207\u9010\u6b65\u57f7\u884c\u904e\u7a0b\uff0c\u4e26\u8207\u9810\u5148\u5b9a\u7fa9\u7684\u6e2c\u8a66\u6848\u4f8b\u9032\u884c\u6bd4\u5c0d\u3002</p> <p>\u8a55\u4f30 agent</p> </li> <li> <p> \u6253\u9020\u5b89\u5168\u53ef\u9760\u7684 agent</p> <p>\u5b78\u7fd2\u5982\u4f55\u5c07\u5b89\u5168\u6027\u8207\u6700\u4f73\u5be6\u8e10\u878d\u5165 agent \u8a2d\u8a08\uff0c\u6253\u9020\u5f37\u5927\u4e14\u503c\u5f97\u4fe1\u8cf4\u7684 agent\u3002</p> <p>\u5b89\u5168\u8207\u9632\u8b77</p> </li> </ul>"},{"location":"community.en/","title":"Community Resources","text":"<p>Welcome! This page highlights resources maintained by the Agent Development Kit community.</p> <p>Info</p> <p>Google and the ADK team do not provide support for the content linked in these external community resources.</p>"},{"location":"community.en/#translations","title":"Translations","text":"<p>Community-provided translations of the ADK documentation.</p> <ul> <li> <p>adk.wiki - ADK Documentation (Chinese)</p> <p>adk.wiki is the Chinese version of the Agent Development Kit documentation, maintained by an individual. The documentation is continuously updated and translated to provide a localized reading experience for developers in China.</p> </li> <li> <p>ADK Documentation (Korean, \ud55c\uad6d\uc5b4)</p> <p>the Korean version of the Agent Development Kit documentation, maintained by an individual. The documentation is continuously updated and translated to provide a localized reading experience for developers in South Korea.</p> </li> <li> <p>ADK Documentation (Japanese, \u65e5\u672c\u8a9e)</p> <p>the Japanese version of the Agent Development Kit documentation, maintained by an individual. The documentation is continuously updated and translated to provide a localized reading experience for developers in Japan.</p> </li> </ul>"},{"location":"community.en/#tutorials-guides-blog-posts","title":"Tutorials, Guides &amp; Blog Posts","text":"<p>Find community-written guides covering ADK features, use cases, and integrations here.</p> <ul> <li> <p>Build an e-commerce recommendation AI agents with ADK + Vector Search</p> <p>In this tutorial, we will explore how to build a simple multi-agent system for an  e-commerce site, designed to offer the \"Generative Recommendations\" you find in the  Shopper's Concierge demo.</p> </li> <li> <p>Google ADK + Vertex AI Live API</p> <p>Going Beyond the ADK CLI by Building Streaming Experiences with the Agent Development Kit and the Vertex AI Live API.</p> </li> </ul>"},{"location":"community.en/#videos-screencasts","title":"Videos &amp; Screencasts","text":"<p>Discover video walkthroughs, talks, and demos showcasing ADK.</p> <ul> <li> <p>Agent Development Kit (ADK) Masterclass: Build AI Agents &amp; Automate Workflows (Beginner to Pro)</p> <p>A comprehensive crash course that takes you from beginner to expert in Google's Agent Development Kit.  Covers 12 hands-on examples progressing from single agent setup to advanced multi-agent workflows. Includes step-by-step code walkthroughs and downloadable source code for all examples.</p> </li> </ul>"},{"location":"community.en/#contributing-your-resource","title":"Contributing Your Resource","text":"<p>Have an ADK resource to share (tutorial, translation, tool, video, example)?</p> <p>Refer to the steps in the Contributing Guide for more information on how to get involved!</p> <p>Thank you for your contributions to Agent Development Kit! \u2764\ufe0f</p>"},{"location":"community/","title":"\u793e\u7fa4\u8cc7\u6e90","text":"<p>\u6b61\u8fce\uff01\u672c\u9801\u6574\u7406\u4e86\u7531 Agent Development Kit (ADK) \u793e\u7fa4\u7dad\u8b77\u7684\u8cc7\u6e90\u3002</p> <p>Info</p> <p>Google \u8207 Agent Development Kit (ADK) \u5718\u968a\u4e0d\u5c0d\u9019\u4e9b\u5916\u90e8\u793e\u7fa4\u8cc7\u6e90\u4e2d\u7684\u9023\u7d50\u5167\u5bb9\u63d0\u4f9b\u652f\u63f4\u3002</p>"},{"location":"community/#_2","title":"\u7ffb\u8b6f","text":"<p>\u7531\u793e\u7fa4\u63d0\u4f9b\u7684 Agent Development Kit (ADK) \u6587\u4ef6\u8aaa\u660e\u7ffb\u8b6f\u7248\u672c\u3002</p> <ul> <li> <p>adk.wiki - ADK Documentation (Chinese)</p> <p>adk.wiki \u662f Agent Development Kit (ADK) \u6587\u4ef6\u8aaa\u660e\u7684\u4e2d\u6587\u7248\u672c\uff0c\u7531\u500b\u4eba\u7dad\u8b77\u3002\u8a72\u6587\u4ef6\u6301\u7e8c\u66f4\u65b0\u8207\u7ffb\u8b6f\uff0c\u65e8\u5728\u70ba\u4e2d\u570b\u958b\u767c\u8005\u63d0\u4f9b\u5728\u5730\u5316\u7684\u95b1\u8b80\u9ad4\u9a57\u3002</p> </li> <li> <p>ADK Documentation (Korean, \ud55c\uad6d\uc5b4)</p> <p>Agent Development Kit (ADK) \u6587\u4ef6\u8aaa\u660e\u7684\u97d3\u6587\u7248\u672c\uff0c\u7531\u500b\u4eba\u7dad\u8b77\u3002\u8a72\u6587\u4ef6\u6301\u7e8c\u66f4\u65b0\u8207\u7ffb\u8b6f\uff0c\u65e8\u5728\u70ba\u5357\u97d3\u958b\u767c\u8005\u63d0\u4f9b\u5728\u5730\u5316\u7684\u95b1\u8b80\u9ad4\u9a57\u3002</p> </li> <li> <p>ADK Documentation (Japanese, \u65e5\u672c\u8a9e)</p> <p>Agent Development Kit (ADK) \u6587\u4ef6\u8aaa\u660e\u7684\u65e5\u6587\u7248\u672c\uff0c\u7531\u500b\u4eba\u7dad\u8b77\u3002\u8a72\u6587\u4ef6\u6301\u7e8c\u66f4\u65b0\u8207\u7ffb\u8b6f\uff0c\u65e8\u5728\u70ba\u65e5\u672c\u958b\u767c\u8005\u63d0\u4f9b\u5728\u5730\u5316\u7684\u95b1\u8b80\u9ad4\u9a57\u3002</p> </li> </ul>"},{"location":"community/#_3","title":"\u6559\u5b78\u3001\u6307\u5357\u8207\u90e8\u843d\u683c\u6587\u7ae0","text":"<p>\u5728\u9019\u88e1\u53ef\u4ee5\u627e\u5230\u793e\u7fa4\u64b0\u5beb\u7684\u6307\u5357\uff0c\u6db5\u84cb Agent Development Kit (ADK) \u7684\u529f\u80fd\u3001\u4f7f\u7528\u6848\u4f8b\u8207\u6574\u5408\u65b9\u5f0f\u3002</p> <ul> <li> <p>Build an e-commerce recommendation AI agents with ADK + Vector Search</p> <p>\u672c\u6559\u5b78\u5c07\u5e36\u4f60\u63a2\u7d22\u5982\u4f55\u70ba\u96fb\u5546\u7db2\u7ad9\u6253\u9020\u4e00\u500b\u7c21\u55ae\u7684\u591a agent \u7cfb\u7d71\uff0c\u5be6\u73fe Shopper's Concierge \u793a\u7bc4 (demo) \u4e2d\u7684\u300c\u751f\u6210\u5f0f\u63a8\u85a6\u300d\u529f\u80fd\u3002</p> </li> <li> <p>Google ADK + Vertex AI Live API</p> <p>\u5229\u7528 Agent Development Kit (ADK) \u8207 Vertex AI Live API\uff0c\u6253\u9020\u4e32\u6d41\u9ad4\u9a57\uff0c\u7a81\u7834 ADK CLI \u7684\u9650\u5236\u3002</p> </li> </ul>"},{"location":"community/#_4","title":"\u5f71\u7247\u8207\u87a2\u5e55\u9304\u5f71","text":"<p>\u63a2\u7d22\u5c55\u793a Agent Development Kit (ADK) \u7684\u5f71\u7247\u6559\u5b78\u3001\u6f14\u8b1b\u8207\u793a\u7bc4\u3002</p> <ul> <li> <p>Agent Development Kit (ADK) Masterclass: Build AI Agents &amp; Automate Workflows (Beginner to Pro)</p> <p>\u4e00\u5957\u5b8c\u6574\u7684\u5bc6\u96c6\u8ab2\u7a0b\uff0c\u5e36\u4f60\u5f9e\u65b0\u624b\u5230\u7cbe\u901a Google \u7684 Agent Development Kit (ADK)\u3002 \u6db5\u84cb 12 \u500b\u5be6\u4f5c\u7bc4\u4f8b\uff0c\u5f9e\u55ae\u4e00 agent \u8a2d\u5b9a\u5230\u9032\u968e\u591a agent \u5de5\u4f5c\u6d41\u7a0b\u3002 \u6240\u6709\u7bc4\u4f8b\u5747\u9644\u6709\u9010\u6b65\u7a0b\u5f0f\u78bc\u8b1b\u89e3\u8207\u53ef\u4e0b\u8f09\u7684\u539f\u59cb\u78bc\u3002</p> </li> </ul>"},{"location":"community/#_5","title":"\u8ca2\u737b\u4f60\u7684\u8cc7\u6e90","text":"<p>\u6709\u60f3\u5206\u4eab\u7684 Agent Development Kit (ADK) \u8cc7\u6e90\uff08\u6559\u5b78\u3001\u7ffb\u8b6f\u3001\u5de5\u5177\u3001\u5f71\u7247\u6216\u7bc4\u4f8b\uff09\u55ce\uff1f</p> <p>\u8acb\u53c3\u8003 \u8ca2\u737b\u6307\u5357 \u4ee5\u4e86\u89e3\u66f4\u591a\u53c3\u8207\u65b9\u5f0f\uff01</p> <p>\u611f\u8b1d\u4f60\u5c0d Agent Development Kit (ADK) \u7684\u8ca2\u737b\uff01\u2764\ufe0f</p>"},{"location":"contributing-guide.en/","title":"Contributing guide.en","text":"<p>Thank you for your interest in contributing to the Agent Development Kit (ADK)! We welcome contributions to both the core framework (Python and Java) and its documentation.</p> <p>This guide provides information on how to get involved.</p>"},{"location":"contributing-guide.en/#google-adk-python","title":"1. <code>google/adk-python</code>","text":"<p>Contains the core Python library source code.</p>"},{"location":"contributing-guide.en/#google-adk-java","title":"2. <code>google/adk-java</code>","text":"<p>Contains the core Java library source code.</p>"},{"location":"contributing-guide.en/#google-adk-docs","title":"3. <code>google/adk-docs</code>","text":"<p>Contains the source for the documentation site you are currently reading.</p>"},{"location":"contributing-guide.en/#google-adk-web","title":"4. <code>google/adk-web</code>","text":"<p>Contains the source for the <code>adk web</code> dev UI.</p>"},{"location":"contributing-guide.en/#before-you-begin","title":"Before you begin","text":""},{"location":"contributing-guide.en/#sign-our-contributor-license-agreement","title":"\u270f\ufe0f Sign our Contributor License Agreement","text":"<p>Contributions to this project must be accompanied by a Contributor License Agreement (CLA). You (or your employer) retain the copyright to your contribution; this simply gives us permission to use and redistribute your contributions as part of the project.</p> <p>If you or your current employer have already signed the Google CLA (even if it was for a different project), you probably don't need to do it again.</p> <p>Visit https://cla.developers.google.com/ to see your current agreements or to sign a new one.</p>"},{"location":"contributing-guide.en/#review-our-community-guidelines","title":"\ud83d\udcdc Review our community guidelines","text":"<p>This project follows Google's Open Source Community Guidelines.</p>"},{"location":"contributing-guide.en/#join-the-discussion","title":"\ud83d\udcac Join the Discussion!","text":"<p>Have questions, want to share ideas, or discuss how you're using the ADK? Head over to our Python or Java Discussions!</p> <p>This is the primary place for:</p> <ul> <li>Asking questions and getting help from the community and maintainers.</li> <li>Sharing your projects or use cases (<code>Show and Tell</code>).</li> <li>Discussing potential features or improvements before creating a formal issue.</li> <li>General conversation about the ADK.</li> </ul>"},{"location":"contributing-guide.en/#how-to-contribute","title":"How to Contribute","text":"<p>There are several ways you can contribute to the ADK:</p>"},{"location":"contributing-guide.en/#reporting-issues-bugs-errors","title":"1. Reporting Issues (Bugs &amp; Errors)","text":"<p>If you find a bug in the framework or an error in the documentation:</p> <ul> <li>Framework Bugs: Open an issue in <code>google/adk-python</code> or in <code>google/adk-java</code></li> <li>Documentation Errors: Open an issue in <code>google/adk-docs</code> (use bug template)</li> </ul>"},{"location":"contributing-guide.en/#suggesting-enhancements","title":"2. Suggesting Enhancements","text":"<p>Have an idea for a new feature or an improvement to an existing one?</p> <ul> <li>Framework Enhancements: Open an issue in <code>google/adk-python</code> or in <code>google/adk-java</code></li> <li>Documentation Enhancements: Open an issue in <code>google/adk-docs</code></li> </ul>"},{"location":"contributing-guide.en/#improving-documentation","title":"3. Improving Documentation","text":"<p>Found a typo, unclear explanation, or missing information? Submit your changes directly:</p> <ul> <li>How: Submit a Pull Request (PR) with your suggested improvements.</li> <li>Where: Create a Pull Request in <code>google/adk-docs</code></li> </ul>"},{"location":"contributing-guide.en/#writing-code","title":"4. Writing Code","text":"<p>Help fix bugs, implement new features or contribute code samples for the documentation:</p> <p>How: Submit a Pull Request (PR) with your code changes.</p> <ul> <li>Python Framework: Create a Pull Request in <code>google/adk-python</code></li> <li>Java Framework: Create a Pull Request in <code>google/adk-java</code></li> <li>Documentation: Create a Pull Request in <code>google/adk-docs</code></li> </ul>"},{"location":"contributing-guide.en/#code-reviews","title":"Code Reviews","text":"<ul> <li> <p>All contributions, including those from project members, undergo a review process.</p> </li> <li> <p>We use GitHub Pull Requests (PRs) for code submission and review. Please ensure your PR clearly describes the changes you are making.</p> </li> </ul>"},{"location":"contributing-guide.en/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the project's Apache 2.0 License.</p>"},{"location":"contributing-guide.en/#questions","title":"Questions?","text":"<p>If you get stuck or have questions, feel free to open an issue on the relevant repository's issue tracker.</p>"},{"location":"contributing-guide/","title":"\u8ca2\u737b\u6307\u5357","text":"<p>\u611f\u8b1d\u60a8\u6709\u8208\u8da3\u8ca2\u737b\u65bc Agent Development Kit (ADK)\uff01\u6211\u5011\u6b61\u8fce\u5c0d\u6838\u5fc3\u6846\u67b6\uff08Python \u8207 Java\uff09\u4ee5\u53ca\u5176\u6587\u4ef6\u8aaa\u660e\u7684\u5404\u7a2e\u8ca2\u737b\u3002</p> <p>\u672c\u6307\u5357\u5c07\u8aaa\u660e\u5982\u4f55\u53c3\u8207\u672c\u5c08\u6848\u3002</p>"},{"location":"contributing-guide/#google-adk-python","title":"1. <code>google/adk-python</code>","text":"<p>\u5305\u542b\u6838\u5fc3 Python \u51fd\u5f0f\u5eab\u7684\u539f\u59cb\u78bc\u3002</p>"},{"location":"contributing-guide/#google-adk-java","title":"2. <code>google/adk-java</code>","text":"<p>\u5305\u542b\u6838\u5fc3 Java \u51fd\u5f0f\u5eab\u7684\u539f\u59cb\u78bc\u3002</p>"},{"location":"contributing-guide/#google-adk-docs","title":"3. <code>google/adk-docs</code>","text":"<p>\u5305\u542b\u60a8\u76ee\u524d\u6b63\u5728\u95b1\u8b80\u7684\u6587\u4ef6\u8aaa\u660e\u7db2\u7ad9\u7684\u539f\u59cb\u78bc\u3002</p>"},{"location":"contributing-guide/#google-adk-web","title":"4. <code>google/adk-web</code>","text":"<p>\u5305\u542b <code>adk web</code> \u958b\u767c UI \u7684\u539f\u59cb\u78bc\u3002</p>"},{"location":"contributing-guide/#_1","title":"\u958b\u59cb\u4e4b\u524d","text":""},{"location":"contributing-guide/#contributor-license-agreement-cla","title":"\u270f\ufe0f \u7c3d\u7f72\u8ca2\u737b\u8005\u6388\u6b0a\u5354\u8b70\uff08Contributor License Agreement, CLA\uff09","text":"<p>\u5c0d\u672c\u5c08\u6848\u7684\u8ca2\u737b\u5fc5\u9808\u9644\u5e36 \u8ca2\u737b\u8005\u6388\u6b0a\u5354\u8b70\uff08Contributor License Agreement, CLA\uff09\u3002 \u60a8\uff08\u6216\u60a8\u7684\u96c7\u4e3b\uff09\u5c07\u4fdd\u7559\u5c0d\u60a8\u8ca2\u737b\u5167\u5bb9\u7684\u8457\u4f5c\u6b0a\uff1b\u9019\u50c5\u50c5\u662f\u6388\u6b0a\u6211\u5011\u53ef\u4ee5\u5c07\u60a8\u7684\u8ca2\u737b\u7528\u65bc\u672c\u5c08\u6848\u4e26\u91cd\u65b0\u767c\u4f48\u3002</p> <p>\u5982\u679c\u60a8\u6216\u60a8\u76ee\u524d\u7684\u96c7\u4e3b\u5df2\u7d93\u7c3d\u7f72\u904e Google CLA\uff08\u5373\u4f7f\u662f\u70ba\u5176\u4ed6\u5c08\u6848\uff09\uff0c\u901a\u5e38\u4e0d\u9700\u8981\u518d\u6b21\u7c3d\u7f72\u3002</p> <p>\u8acb\u9020\u8a2a https://cla.developers.google.com/ \u4ee5\u6aa2\u8996\u60a8\u76ee\u524d\u7684\u5354\u8b70\u6216\u7c3d\u7f72\u65b0\u7684\u5354\u8b70\u3002</p>"},{"location":"contributing-guide/#_2","title":"\ud83d\udcdc \u8acb\u95b1\u8b80\u6211\u5011\u7684\u793e\u7fa4\u6307\u5f15","text":"<p>\u672c\u5c08\u6848\u9075\u5faa Google \u958b\u6e90\u793e\u7fa4\u6307\u5f15\u3002</p>"},{"location":"contributing-guide/#_3","title":"\ud83d\udcac \u52a0\u5165\u8a0e\u8ad6\uff01","text":"<p>\u6709\u554f\u984c\u3001\u60f3\u5206\u4eab\u60f3\u6cd5\uff0c\u6216\u60f3\u8a0e\u8ad6\u60a8\u5982\u4f55\u4f7f\u7528 ADK\uff1f\u6b61\u8fce\u524d\u5f80\u6211\u5011\u7684 Python \u6216 Java \u8a0e\u8ad6\u5340\uff01</p> <p>\u9019\u88e1\u662f\u4e3b\u8981\u7684\u4ea4\u6d41\u5834\u6240\uff0c\u9069\u5408\uff1a</p> <ul> <li>\u5411\u793e\u7fa4\u8207\u7dad\u8b77\u8005\u63d0\u554f\u4e26\u7372\u5f97\u5354\u52a9\u3002</li> <li>\u5206\u4eab\u60a8\u7684\u5c08\u6848\u6216\u4f7f\u7528\u6848\u4f8b\uff08<code>Show and Tell</code>\uff09\u3002</li> <li>\u5728\u5efa\u7acb\u6b63\u5f0f\u8b70\u984c\u524d\uff0c\u8a0e\u8ad6\u6f5b\u5728\u7684\u65b0\u529f\u80fd\u6216\u6539\u9032\u5efa\u8b70\u3002</li> <li>\u95dc\u65bc ADK \u7684\u4e00\u822c\u6027\u8a0e\u8ad6\u3002</li> </ul>"},{"location":"contributing-guide/#_4","title":"\u5982\u4f55\u8ca2\u737b","text":"<p>\u60a8\u53ef\u4ee5\u900f\u904e\u4ee5\u4e0b\u5e7e\u7a2e\u65b9\u5f0f\u8ca2\u737b\u65bc ADK\uff1a</p>"},{"location":"contributing-guide/#reporting-issues-bugs-errors","title":"1. \u56de\u5831\u554f\u984c\uff08\u932f\u8aa4\u8207 Bug\uff09","text":"<p>\u5982\u679c\u60a8\u767c\u73fe\u6846\u67b6\u6709 bug \u6216\u6587\u4ef6\u8aaa\u660e\u6709\u932f\u8aa4\uff1a</p> <ul> <li>\u6846\u67b6 Bug\uff1a \u8acb\u5728 <code>google/adk-python</code> \u6216 <code>google/adk-java</code> \u4e2d\u63d0\u51fa issue</li> <li>\u6587\u4ef6\u932f\u8aa4\uff1a \u5728 <code>google/adk-docs</code> \u4e2d\u63d0\u51fa issue\uff08\u8acb\u4f7f\u7528 bug \u6a21\u677f\uff09</li> </ul>"},{"location":"contributing-guide/#suggesting-enhancements","title":"2. \u5efa\u8b70\u6539\u9032","text":"<p>\u6709\u65b0\u529f\u80fd\u7684\u60f3\u6cd5\uff0c\u6216\u60f3\u6539\u5584\u73fe\u6709\u529f\u80fd\uff1f</p> <ul> <li>\u6846\u67b6\u6539\u9032\uff1a \u8acb\u5728 <code>google/adk-python</code> \u6216 <code>google/adk-java</code> \u4e2d\u63d0\u51fa issue</li> <li>\u6587\u4ef6\u6539\u9032\uff1a \u5728 <code>google/adk-docs</code> \u4e2d\u63d0\u51fa issue</li> </ul>"},{"location":"contributing-guide/#improving-documentation","title":"3. \u6539\u5584\u6587\u4ef6\u8aaa\u660e","text":"<p>\u767c\u73fe\u6709\u932f\u5b57\u3001\u8aaa\u660e\u4e0d\u6e05\u695a\u6216\u8cc7\u8a0a\u907a\u6f0f\uff1f\u6b61\u8fce\u76f4\u63a5\u63d0\u4ea4\u60a8\u7684\u4fee\u6539\uff1a</p> <ul> <li>\u65b9\u5f0f\uff1a \u63d0\u4ea4 Pull Request (PR) \u4f86\u5efa\u8b70\u60a8\u7684\u6539\u9032\u3002</li> <li>\u4f4d\u7f6e\uff1a \u5728 <code>google/adk-docs</code> \u5efa\u7acb Pull Request</li> </ul>"},{"location":"contributing-guide/#writing-code","title":"4. \u64b0\u5beb\u7a0b\u5f0f\u78bc","text":"<p>\u5354\u52a9\u4fee\u6b63 bug\u3001\u5be6\u4f5c\u65b0\u529f\u80fd\uff0c\u6216\u70ba\u6587\u4ef6\u8aaa\u660e\u8ca2\u737b\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\uff1a</p> <p>\u65b9\u5f0f\uff1a \u63d0\u4ea4\u5305\u542b\u60a8\u7a0b\u5f0f\u78bc\u4fee\u6539\u7684 Pull Request (PR)\u3002</p> <ul> <li>Python \u6846\u67b6\uff1a \u5728 <code>google/adk-python</code> \u5efa\u7acb Pull Request</li> <li>Java \u6846\u67b6\uff1a \u5728 <code>google/adk-java</code> \u5efa\u7acb Pull Request</li> <li>\u6587\u4ef6\u8aaa\u660e\uff1a \u5728 <code>google/adk-docs</code> \u5efa\u7acb Pull Request</li> </ul>"},{"location":"contributing-guide/#_5","title":"\u7a0b\u5f0f\u78bc\u5be9\u67e5","text":"<ul> <li> <p>\u6240\u6709\u8ca2\u737b\uff08\u5305\u542b\u5c08\u6848\u6210\u54e1\u7684\u8ca2\u737b\uff09\u90fd\u9700\u7d93\u904e\u5be9\u67e5\u6d41\u7a0b\u3002</p> </li> <li> <p>\u6211\u5011\u4f7f\u7528 GitHub Pull Request (PR) \u4f86\u63d0\u4ea4\u8207\u5be9\u67e5\u7a0b\u5f0f\u78bc\u3002\u8acb\u78ba\u4fdd\u60a8\u7684 PR \u6e05\u695a\u63cf\u8ff0\u6240\u505a\u7684\u66f4\u52d5\u3002</p> </li> </ul>"},{"location":"contributing-guide/#_6","title":"\u6388\u6b0a\u689d\u6b3e","text":"<p>\u4e00\u65e6\u60a8\u8ca2\u737b\u5167\u5bb9\uff0c\u5373\u8868\u793a\u60a8\u540c\u610f\u60a8\u7684\u8ca2\u737b\u5c07\u4f9d\u672c\u5c08\u6848\u7684 Apache 2.0 \u6388\u6b0a\u689d\u6b3e \u6388\u6b0a\u3002</p>"},{"location":"contributing-guide/#_7","title":"\u6709\u554f\u984c\u55ce\uff1f","text":"<p>\u5982\u679c\u60a8\u9047\u5230\u56f0\u96e3\u6216\u6709\u4efb\u4f55\u7591\u554f\uff0c\u6b61\u8fce\u5728\u76f8\u95dc\u5132\u5b58\u5eab\u7684 issue tracker \u4e0a\u63d0\u51fa issue\u3002</p>"},{"location":"index.en/","title":"Index.en","text":"<p>What's new</p> <p>Build agents without code. Check out the Agent Config feature.</p> Agent Development Kit"},{"location":"index.en/#what-is-agent-development-kit","title":"What is Agent Development Kit?","text":"<p>Agent Development Kit (ADK) is a flexible and modular framework for developing and deploying AI agents. While optimized for Gemini and the Google ecosystem, ADK is model-agnostic, deployment-agnostic, and is built for compatibility with other frameworks. ADK was designed to make agent development feel more like software development, to make it easier for developers to create, deploy, and orchestrate agentic architectures that range from simple tasks to complex workflows.</p> <p>Get started:</p> PythonJava <p> <p> <code>pip install google-adk</code> </p></p> pom.xml<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.google.adk&lt;/groupId&gt;\n    &lt;artifactId&gt;google-adk&lt;/artifactId&gt;\n    &lt;version&gt;0.2.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> build.gradle<pre><code>dependencies {\n    implementation 'com.google.adk:google-adk:0.2.0'\n}\n</code></pre> <p> Quickstart Tutorials Sample Agents API Reference Contribute \u2764\ufe0f </p>"},{"location":"index.en/#learn-more","title":"Learn more","text":"<p> Watch \"Introducing Agent Development Kit\"!</p> <ul> <li> <p> Flexible Orchestration</p> <p>Define workflows using workflow agents (<code>Sequential</code>, <code>Parallel</code>, <code>Loop</code>) for predictable pipelines, or leverage LLM-driven dynamic routing (<code>LlmAgent</code> transfer) for adaptive behavior.</p> <p>Learn about agents</p> </li> <li> <p> Multi-Agent Architecture</p> <p>Build modular and scalable applications by composing multiple specialized agents in a hierarchy. Enable complex coordination and delegation.</p> <p>Explore multi-agent systems</p> </li> <li> <p> Rich Tool Ecosystem</p> <p>Equip agents with diverse capabilities: use pre-built tools (Search, Code Exec), create custom functions, integrate 3rd-party libraries (LangChain, CrewAI), or even use other agents as tools.</p> <p>Browse tools</p> </li> <li> <p> Deployment Ready</p> <p>Containerize and deploy your agents anywhere \u2013 run locally, scale with Vertex AI Agent Engine, or integrate into custom infrastructure using Cloud Run or Docker.</p> <p>Deploy agents</p> </li> <li> <p> Built-in Evaluation</p> <p>Systematically assess agent performance by evaluating both the final response quality and the step-by-step execution trajectory against predefined test cases.</p> <p>Evaluate agents</p> </li> <li> <p> Building Safe and Secure Agents</p> <p>Learn how to building powerful and trustworthy agents by implementing security and safety patterns and best practices into your agent's design.</p> <p>Safety and Security</p> </li> </ul>"},{"location":"a2a/","title":"Agent Development Kit (ADK) \u8207 Agent2Agent (A2A) Protocol","text":"<p>\u900f\u904e Agent Development Kit (ADK)\uff0c\u4f60\u53ef\u4ee5\u6253\u9020\u8907\u96dc\u7684\u591a agent \u7cfb\u7d71\uff0c\u8b93\u4e0d\u540c\u7684 agent \u80fd\u5920\u5229\u7528 Agent2Agent (A2A) Protocol \u9032\u884c\u5354\u4f5c\u8207\u4e92\u52d5\uff01\u672c\u7bc0\u5c07\u70ba\u4f60\u63d0\u4f9b\u5b8c\u6574\u6307\u5357\uff0c\u5354\u52a9\u4f60\u5efa\u7acb\u5f37\u5927\u4e14\u5b89\u5168\u3001\u9ad8\u6548\u6e9d\u901a\u8207\u5354\u4f5c\u7684\u591a agent \u7cfb\u7d71\u3002</p> <p>\u8acb\u53c3\u8003\u4e0b\u65b9\u6307\u5357\uff0c\u6df1\u5165\u4e86\u89e3 ADK \u7684 A2A \u80fd\u529b\uff1a</p> <p>A2A \u7c21\u4ecb</p> <p>\u5f9e\u9019\u88e1\u958b\u59cb\uff0c\u5b78\u7fd2 A2A \u7684\u57fa\u790e\u77e5\u8b58\uff0c\u4e26\u5be6\u4f5c\u4e00\u500b\u5305\u542b root agent\u3001\u672c\u5730 sub-agent \u53ca\u9060\u7aef A2A agent \u7684\u591a agent \u7cfb\u7d71\u3002</p> <p>A2A \u5feb\u901f\u958b\u59cb\uff08\u5c0d\u5916\u63d0\u4f9b\uff09</p> <p>\u672c\u5feb\u901f\u958b\u59cb\u6db5\u84cb\uff1a\u300c\u6211\u6709\u4e00\u500b agent\uff0c\u8981\u5982\u4f55\u8b93\u5176\u4ed6 agent \u80fd\u5920\u900f\u904e A2A \u4f7f\u7528\u6211\u7684 agent\uff1f\u300d\u3002</p> <p>A2A \u5feb\u901f\u958b\u59cb\uff08\u6d88\u8cbb\u7aef\uff09</p> <p>\u672c\u5feb\u901f\u958b\u59cb\u6db5\u84cb\uff1a\u300c\u6709\u4e00\u500b\u9060\u7aef agent\uff0c\u6211\u8981\u5982\u4f55\u8b93\u6211\u7684 ADK agent \u900f\u904e A2A \u4f7f\u7528\u5b83\uff1f\u300d\u3002</p> <p>Agent2Agent (A2A) Protocol \u5b98\u65b9\u7db2\u7ad9</p> <p>A2A Protocol \u7684\u5b98\u65b9\u7db2\u7ad9\u3002</p>"},{"location":"a2a/index.en/","title":"ADK with Agent2Agent (A2A) Protocol","text":"<p>With Agent Development Kit (ADK), you can build complex multi-agent systems where different agents need to collaborate and interact using Agent2Agent (A2A) Protocol! This section provides a comprehensive guide to building powerful multi-agent systems where agents can communicate and collaborate securely and efficiently.</p> <p>Navigate through the guides below to learn about ADK's A2A capabilities:</p> <p>Introduction to A2A</p> <p>Start here to learn the fundamentals of A2A by building a multi-agent system with a root agent, a local sub-agent, and a remote A2A agent.</p> <p>A2A Quickstart (Exposing)</p> <p>This quickstart covers: \"I have an agent. How do I expose it so that other agents can use my agent via A2A?\".</p> <p>A2A Quickstart (Consuming)</p> <p>This quickstart covers: \"There is a remote agent, how do I let my ADK agent use it via A2A?\".</p> <p>Official Website for Agent2Agent (A2A) Protocol</p> <p>The official website for A2A Protocol.</p>"},{"location":"a2a/intro.en/","title":"Introduction to A2A","text":"<p>As you build more complex agentic systems, you will find that a single agent is often not enough. You will want to create specialized agents that can collaborate to solve a problem. The Agent2Agent (A2A) Protocol is the standard that allows these agents to communicate with each other.</p>"},{"location":"a2a/intro.en/#when-to-use-a2a-vs-local-sub-agents","title":"When to Use A2A vs. Local Sub-Agents","text":"<ul> <li> <p>Local Sub-Agents: These are agents that run within the same application   process as your main agent. They are like internal modules or libraries, used   to organize your code into logical, reusable components. Communication between   a main agent and its local sub-agents is very fast because it happens   directly in memory, without network overhead.</p> </li> <li> <p>Remote Agents (A2A): These are independent agents that run as separate   services, communicating over a network. A2A defines the standard protocol   for this communication.</p> </li> </ul> <p>Consider using A2A when:</p> <ul> <li>The agent you need to talk to is a separate, standalone service (e.g., a   specialized financial modeling agent).</li> <li>The agent is maintained by a different team or organization.</li> <li>You need to connect agents written in different programming languages or   agent frameworks.</li> <li>You want to enforce a strong, formal contract (the A2A protocol) between   your system's components.</li> </ul>"},{"location":"a2a/intro.en/#when-to-use-a2a-concrete-examples","title":"When to Use A2A: Concrete Examples","text":"<ul> <li>Integrating with a Third-Party Service: Your main agent needs to get   real-time stock prices from an external financial data provider. This   provider exposes its data through an A2A-compatible agent.</li> <li>Microservices Architecture: You have a large system broken down into   smaller, independent services (e.g., an Order Processing Agent, an Inventory   Management Agent, a Shipping Agent). A2A is ideal for these services to   communicate with each other across network boundaries.</li> <li>Cross-Language Communication: Your core business logic is in a Python   agent, but you have a legacy system or a specialized component written in Java   that you want to integrate as an agent. A2A provides the standardized   communication layer.</li> <li>Formal API Enforcement: You are building a platform where different teams   contribute agents, and you need a strict contract for how these agents   interact to ensure compatibility and stability.</li> </ul>"},{"location":"a2a/intro.en/#when-not-to-use-a2a-concrete-examples-prefer-local-sub-agents","title":"When NOT to Use A2A: Concrete Examples (Prefer Local Sub-Agents)","text":"<ul> <li>Internal Code Organization: You are breaking down a complex task within a   single agent into smaller, manageable functions or modules (e.g., a   <code>DataValidator</code> sub-agent that cleans input data before processing). These are   best handled as local sub-agents for performance and simplicity.</li> <li>Performance-Critical Internal Operations: A sub-agent is responsible for a   high-frequency, low-latency operation that is tightly coupled with the main   agent's execution (e.g., a <code>RealTimeAnalytics</code> sub-agent that processes data   streams within the same application).</li> <li>Shared Memory/Context: When sub-agents need direct access to the main   agent's internal state or shared memory for efficiency, A2A's network   overhead and serialization/deserialization would be counterproductive.</li> <li>Simple Helper Functions: For small, reusable pieces of logic that don't   require independent deployment or complex state management, a simple function   or class within the same agent is more appropriate than a separate A2A agent.</li> </ul>"},{"location":"a2a/intro.en/#the-a2a-workflow-in-adk-a-simplified-view","title":"The A2A Workflow in ADK: A Simplified View","text":"<p>Agent Development Kit (ADK) simplifies the process of building and connecting agents using the A2A protocol. Here's a straightforward breakdown of how it works:</p> <ol> <li> <p>Making an Agent Accessible (Exposing): You start with an existing ADK     agent that you want other agents to be able to interact with. The ADK     provides a simple way to \"expose\" this agent, turning it into an     A2AServer. This server acts as a public interface, allowing other agents     to send requests to your agent over a network. Think of it like setting up a     web server for your agent.</p> </li> <li> <p>Connecting to an Accessible Agent (Consuming): In a separate agent     (which could be running on the same machine or a different one), you'll use     a special ADK component called <code>RemoteA2aAgent</code>. This <code>RemoteA2aAgent</code> acts     as a client that knows how to communicate with the A2AServer you     exposed earlier. It handles all the complexities of network communication,     authentication, and data formatting behind the scenes.</p> </li> </ol> <p>From your perspective as a developer, once you've set up this connection, interacting with the remote agent feels just like interacting with a local tool or function. The ADK abstracts away the network layer, making distributed agent systems as easy to work with as local ones.</p>"},{"location":"a2a/intro.en/#visualizing-the-a2a-workflow","title":"Visualizing the A2A Workflow","text":"<p>To further clarify the A2A workflow, let's look at the \"before and after\" for both exposing and consuming agents, and then the combined system.</p>"},{"location":"a2a/intro.en/#exposing-an-agent","title":"Exposing an Agent","text":"<p>Before Exposing: Your agent code runs as a standalone component, but in this scenario, you want to expose it so that other remote agents can interact with your agent.</p> <pre><code>+-------------------+\n| Your Agent Code   |\n|   (Standalone)    |\n+-------------------+\n</code></pre> <p>After Exposing: Your agent code is integrated with an <code>A2AServer</code> (an ADK component), making it accessible over a network to other remote agents.</p> <pre><code>+-----------------+\n|   A2A Server    |\n| (ADK Component) |&lt;--------+\n+-----------------+         |\n        |                   |\n        v                   |\n+-------------------+       |\n| Your Agent Code   |       |\n| (Now Accessible)  |       |\n+-------------------+       |\n                            |\n                            | (Network Communication)\n                            v\n+-----------------------------+\n|       Remote Agent(s)       |\n|    (Can now communicate)    |\n+-----------------------------+\n</code></pre>"},{"location":"a2a/intro.en/#consuming-an-agent","title":"Consuming an Agent","text":"<p>Before Consuming: Your agent (referred to as the \"Root Agent\" in this context) is the application you are developing that needs to interact with a remote agent. Before consuming, it lacks the direct mechanism to do so.</p> <pre><code>+----------------------+         +-------------------------------------------------------------+\n|      Root Agent      |         |                        Remote Agent                         |\n| (Your existing code) |         | (External Service that you want your Root Agent to talk to) |\n+----------------------+         +-------------------------------------------------------------+\n</code></pre> <p>After Consuming: Your Root Agent uses a <code>RemoteA2aAgent</code> (an ADK component that acts as a client-side proxy for the remote agent) to establish communication with the remote agent.</p> <pre><code>+----------------------+         +-----------------------------------+\n|      Root Agent      |         |         RemoteA2aAgent            |\n| (Your existing code) |&lt;-------&gt;|         (ADK Client Proxy)        |\n+----------------------+         |                                   |\n                                 |  +-----------------------------+  |\n                                 |  |         Remote Agent        |  |\n                                 |  |      (External Service)     |  |\n                                 |  +-----------------------------+  |\n                                 +-----------------------------------+\n      (Now talks to remote agent via RemoteA2aAgent)\n</code></pre>"},{"location":"a2a/intro.en/#final-system-combined-view","title":"Final System (Combined View)","text":"<p>This diagram shows how the consuming and exposing parts connect to form a complete A2A system.</p> <pre><code>Consuming Side:\n+----------------------+         +-----------------------------------+\n|      Root Agent      |         |         RemoteA2aAgent            |\n| (Your existing code) |&lt;-------&gt;|         (ADK Client Proxy)        |\n+----------------------+         |                                   |\n                                 |  +-----------------------------+  |\n                                 |  |         Remote Agent        |  |\n                                 |  |      (External Service)     |  |\n                                 |  +-----------------------------+  |\n                                 +-----------------------------------+\n                                                 |\n                                                 | (Network Communication)\n                                                 v\nExposing Side:\n                                               +-----------------+\n                                               |   A2A Server    |\n                                               | (ADK Component) |\n                                               +-----------------+\n                                                       |\n                                                       v\n                                               +-------------------+\n                                               | Your Agent Code   |\n                                               | (Exposed Service) |\n                                               +-------------------+\n</code></pre>"},{"location":"a2a/intro.en/#concrete-use-case-customer-service-and-product-catalog-agents","title":"Concrete Use Case: Customer Service and Product Catalog Agents","text":"<p>Let's consider a practical example: a Customer Service Agent that needs to retrieve product information from a separate Product Catalog Agent.</p>"},{"location":"a2a/intro.en/#before-a2a","title":"Before A2A","text":"<p>Initially, your Customer Service Agent might not have a direct, standardized way to query the Product Catalog Agent, especially if it's a separate service or managed by a different team.</p> <pre><code>+-------------------------+         +--------------------------+\n| Customer Service Agent  |         |  Product Catalog Agent   |\n| (Needs Product Info)    |         | (Contains Product Data)  |\n+-------------------------+         +--------------------------+\n      (No direct, standardized communication)\n</code></pre>"},{"location":"a2a/intro.en/#after-a2a","title":"After A2A","text":"<p>By using the A2A Protocol, the Product Catalog Agent can expose its functionality as an A2A service. Your Customer Service Agent can then easily consume this service using ADK's <code>RemoteA2aAgent</code>.</p> <pre><code>+-------------------------+         +-----------------------------------+\n| Customer Service Agent  |         |         RemoteA2aAgent            |\n| (Your Root Agent)       |&lt;-------&gt;|         (ADK Client Proxy)        |\n+-------------------------+         |                                   |\n                                    |  +-----------------------------+  |\n                                    |  |     Product Catalog Agent   |  |\n                                    |  |      (External Service)     |  |\n                                    |  +-----------------------------+  |\n                                    +-----------------------------------+\n                                                 |\n                                                 | (Network Communication)\n                                                 v\n                                               +-----------------+\n                                               |   A2A Server    |\n                                               | (ADK Component) |\n                                               +-----------------+\n                                                       |\n                                                       v\n                                               +------------------------+\n                                               | Product Catalog Agent  |\n                                               | (Exposed Service)      |\n                                               +------------------------+\n</code></pre> <p>In this setup, first, the Product Catalog Agent needs to be exposed via an A2A Server. Then, the Customer Service Agent can simply call methods on the <code>RemoteA2aAgent</code> as if it were a tool, and the ADK handles all the underlying communication to the Product Catalog Agent. This allows for clear separation of concerns and easy integration of specialized agents.</p>"},{"location":"a2a/intro.en/#next-steps","title":"Next Steps","text":"<p>Now that you understand the \"why\" of A2A, let's dive into the \"how.\"</p> <ul> <li>Continue to the next guide: Quickstart: Exposing Your Agent</li> </ul>"},{"location":"a2a/intro/","title":"A2A \u4ecb\u7d39","text":"<p>\u7576\u4f60\u5efa\u7acb\u66f4\u8907\u96dc\u7684 agent \u7cfb\u7d71\u6642\uff0c\u6703\u767c\u73fe\u55ae\u4e00 agent \u5f80\u5f80\u7121\u6cd5\u6eff\u8db3\u9700\u6c42\u3002\u4f60\u53ef\u80fd\u5e0c\u671b\u5efa\u7acb\u5c08\u9580\u5316\u7684 agent\uff0c\u8b93\u5b83\u5011\u80fd\u5920\u5354\u4f5c\u89e3\u6c7a\u554f\u984c\u3002Agent2Agent (A2A) Protocol \u5c31\u662f\u8b93\u9019\u4e9b agent \u5f7c\u6b64\u6e9d\u901a\u7684\u6a19\u6e96\u5354\u8b70\u3002</p>"},{"location":"a2a/intro/#a2a-agent","title":"\u4f55\u6642\u61c9\u4f7f\u7528 A2A \u8207\u672c\u5730\u5b50 agent","text":"<ul> <li> <p>\u672c\u5730\u5b50 agent\uff08Local Sub-Agents\uff09\uff1a \u9019\u4e9b agent \u5728\u540c\u4e00\u500b\u61c9\u7528\u7a0b\u5f0f\u7a0b\u5e8f \u4e2d\u57f7\u884c\uff0c\u8207\u4f60\u7684\u4e3b agent \u5171\u7528\u8a18\u61b6\u9ad4\u3002\u5b83\u5011\u5c31\u50cf\u5167\u90e8\u6a21\u7d44\u6216\u51fd\u5f0f\u5eab\uff0c\u7528\u4f86\u5c07\u7a0b\u5f0f\u78bc\u7d44\u7e54\u6210\u6709\u908f\u8f2f\u3001\u53ef\u91cd\u8907\u4f7f\u7528\u7684\u5143\u4ef6\u3002\u4e3b agent \u8207\u672c\u5730\u5b50 agent \u4e4b\u9593\u7684\u6e9d\u901a\u975e\u5e38\u5feb\u901f\uff0c\u56e0\u70ba\u662f\u76f4\u63a5\u5728\u8a18\u61b6\u9ad4\u4e2d\u50b3\u905e\uff0c\u6c92\u6709\u7db2\u8def\u5ef6\u9072\u3002</p> </li> <li> <p>\u9060\u7aef agent\uff08Remote Agents, A2A\uff09\uff1a \u9019\u4e9b\u662f\u7368\u7acb\u904b\u4f5c\u7684 agent\uff0c\u4ee5\u5206\u96e2\u7684\u670d\u52d9\u5f62\u5f0f\u57f7\u884c\uff0c\u4e26\u900f\u904e\u7db2\u8def\u9032\u884c\u6e9d\u901a\u3002A2A \u5b9a\u7fa9\u4e86\u9019\u7a2e\u6e9d\u901a\u7684\u6a19\u6e96\u5354\u8b70\u3002</p> </li> </ul> <p>\u5efa\u8b70\u5728\u4ee5\u4e0b\u60c5\u5883\u4e0b\u4f7f\u7528 A2A\uff1a</p> <ul> <li>\u4f60\u9700\u8981\u6e9d\u901a\u7684 agent \u662f\u7368\u7acb\u3001\u53ef\u55ae\u7368\u90e8\u7f72\u7684\u670d\u52d9\uff08\u4f8b\u5982\uff0c\u5c08\u9580\u7684\u8ca1\u52d9\u5efa\u6a21 agent\uff09\u3002</li> <li>\u9019\u500b agent \u7531\u4e0d\u540c\u7684\u5718\u968a\u6216\u7d44\u7e54\u7dad\u8b77\u3002</li> <li>\u4f60\u9700\u8981\u9023\u63a5\u4e0d\u540c\u7a0b\u5f0f\u8a9e\u8a00\u6216 agent \u6846\u67b6\u6240\u64b0\u5beb\u7684 agent\u3002</li> <li>\u4f60\u5e0c\u671b\u5728\u7cfb\u7d71\u5143\u4ef6\u9593\u5f37\u5236\u57f7\u884c\u56b4\u8b39\u3001\u6b63\u5f0f\u7684\u5951\u7d04\uff08\u5373 A2A \u5354\u8b70\uff09\u3002</li> </ul>"},{"location":"a2a/intro/#a2a_1","title":"\u4f55\u6642\u4f7f\u7528 A2A\uff1a\u5177\u9ad4\u7bc4\u4f8b","text":"<ul> <li>\u8207\u7b2c\u4e09\u65b9\u670d\u52d9\u6574\u5408\uff1a \u4f60\u7684\u4e3b agent \u9700\u8981\u5f9e\u5916\u90e8\u91d1\u878d\u8cc7\u6599\u63d0\u4f9b\u8005\u5373\u6642\u53d6\u5f97\u80a1\u50f9\u3002\u8a72\u63d0\u4f9b\u8005\u900f\u904e\u652f\u63f4 A2A \u5354\u8b70\u7684 agent \u63d0\u4f9b\u8cc7\u6599\u3002</li> <li>\u5fae\u670d\u52d9\u67b6\u69cb\uff1a \u4f60\u6709\u4e00\u500b\u5927\u578b\u7cfb\u7d71\uff0c\u62c6\u5206\u70ba\u591a\u500b\u5c0f\u578b\u3001\u7368\u7acb\u7684\u670d\u52d9\uff08\u4f8b\u5982\uff0c\u8a02\u55ae\u8655\u7406 agent\u3001\u5eab\u5b58\u7ba1\u7406 agent\u3001\u904b\u9001 agent\uff09\u3002A2A \u975e\u5e38\u9069\u5408\u8b93\u9019\u4e9b\u670d\u52d9\u8de8\u7db2\u8def\u908a\u754c\u76f8\u4e92\u6e9d\u901a\u3002</li> <li>\u8de8\u8a9e\u8a00\u6e9d\u901a\uff1a \u4f60\u7684\u6838\u5fc3\u5546\u696d\u908f\u8f2f\u5728 Python agent \u4e2d\uff0c\u4f46\u4f60\u6709\u4e00\u500b\u820a\u7cfb\u7d71\u6216\u5c08\u9580\u5143\u4ef6\u662f\u7528 Java \u64b0\u5beb\uff0c\u60f3\u4ee5 agent \u65b9\u5f0f\u6574\u5408\u3002A2A \u63d0\u4f9b\u6a19\u6e96\u5316\u7684\u6e9d\u901a\u5c64\u3002</li> <li>\u6b63\u5f0f API \u5951\u7d04\uff1a \u4f60\u6b63\u5728\u5efa\u69cb\u4e00\u500b\u5e73\u53f0\uff0c\u4e0d\u540c\u5718\u968a\u6703\u8ca2\u737b agent\uff0c\u4f60\u9700\u8981\u56b4\u683c\u898f\u7bc4\u9019\u4e9b agent \u5982\u4f55\u4e92\u52d5\uff0c\u4ee5\u78ba\u4fdd\u76f8\u5bb9\u6027\u8207\u7a69\u5b9a\u6027\u3002</li> </ul>"},{"location":"a2a/intro/#a2a-agent_1","title":"\u4f55\u6642\u4e0d\u8981\u4f7f\u7528 A2A\uff1a\u5177\u9ad4\u7bc4\u4f8b\uff08\u5efa\u8b70\u4f7f\u7528\u672c\u5730\u5b50 agent\uff09","text":"<ul> <li>\u5167\u90e8\u7a0b\u5f0f\u78bc\u7d44\u7e54\uff1a \u4f60\u5c07\u55ae\u4e00 agent \u5167\u7684\u8907\u96dc\u4efb\u52d9\u62c6\u5206\u70ba\u8f03\u5c0f\u3001\u6613\u7ba1\u7406\u7684\u51fd\u5f0f\u6216\u6a21\u7d44\uff08\u4f8b\u5982\uff0c<code>DataValidator</code> \u5b50 agent \u7528\u4f86\u5728\u8655\u7406\u524d\u6e05\u7406\u8f38\u5165\u8cc7\u6599\uff09\u3002\u9019\u985e\u60c5\u5883\u5efa\u8b70\u4f7f\u7528\u672c\u5730\u5b50 agent\uff0c\u6548\u80fd\u8207\u7c21\u6f54\u6027\u8f03\u4f73\u3002</li> <li>\u6548\u80fd\u95dc\u9375\u7684\u5167\u90e8\u64cd\u4f5c\uff1a \u67d0\u500b\u5b50 agent \u8ca0\u8cac\u9ad8\u983b\u7387\u3001\u4f4e\u5ef6\u9072\u4e14\u8207\u4e3b agent \u57f7\u884c\u7dca\u5bc6\u8026\u5408\u7684\u64cd\u4f5c\uff08\u4f8b\u5982\uff0c<code>RealTimeAnalytics</code> \u5b50 agent \u5728\u540c\u4e00\u61c9\u7528\u7a0b\u5f0f\u4e2d\u8655\u7406\u8cc7\u6599\u4e32\u6d41\uff09\u3002\u9019\u4e9b\u64cd\u4f5c\u9069\u5408\u4ee5\u672c\u5730\u5b50 agent \u8655\u7406\u3002</li> <li>\u5171\u7528\u8a18\u61b6\u9ad4\uff0f\u4e0a\u4e0b\u6587\uff1a \u7576\u5b50 agent \u9700\u8981\u76f4\u63a5\u5b58\u53d6\u4e3b agent \u7684\u5167\u90e8\u72c0\u614b\u6216\u5171\u7528\u8a18\u61b6\u9ad4\u4ee5\u63d0\u5347\u6548\u7387\u6642\uff0cA2A \u7684\u7db2\u8def\u5ef6\u9072\u8207\u5e8f\u5217\u5316\uff0f\u53cd\u5e8f\u5217\u5316\u53cd\u800c\u6703\u9020\u6210\u53cd\u6548\u679c\u3002</li> <li>\u7c21\u55ae\u8f14\u52a9\u51fd\u5f0f\uff1a \u5c0d\u65bc\u4e0d\u9700\u7368\u7acb\u90e8\u7f72\u6216\u8907\u96dc\u72c0\u614b\u7ba1\u7406\u7684\u5c0f\u578b\u3001\u53ef\u91cd\u8907\u4f7f\u7528\u7684\u908f\u8f2f\u7247\u6bb5\uff0c\u76f4\u63a5\u5728\u540c\u4e00 agent \u5167\u4ee5\u51fd\u5f0f\u6216\u985e\u5225\u5be6\u4f5c\uff0c\u6bd4\u5efa\u7acb\u7368\u7acb\u7684 A2A agent \u66f4\u5408\u9069\u3002</li> </ul>"},{"location":"a2a/intro/#agent-development-kit-adk-a2a","title":"Agent Development Kit (ADK) \u4e2d\u7684 A2A \u5de5\u4f5c\u6d41\u7a0b\uff1a\u7c21\u5316\u8aaa\u660e","text":"<p>Agent Development Kit (ADK) \u8b93\u4f60\u80fd\u66f4\u7c21\u55ae\u5730\u4f7f\u7528 A2A \u5354\u8b70\u4f86\u5efa\u69cb\u8207\u9023\u63a5 agent\u3002\u4ee5\u4e0b\u662f\u5176\u904b\u4f5c\u65b9\u5f0f\u7684\u7c21\u8981\u8aaa\u660e\uff1a</p> <ol> <li> <p>\u8b93 agent \u53ef\u88ab\u5b58\u53d6\uff08Exposing\uff09\uff1a \u4f60\u6709\u4e00\u500b\u73fe\u6709\u7684 ADK agent\uff0c\u5e0c\u671b\u5176\u4ed6 agent \u80fd\u8207\u4e4b\u4e92\u52d5\u3002ADK \u63d0\u4f9b\u7c21\u55ae\u7684\u65b9\u6cd5\u4f86\u300c\u66b4\u9732\u300d\u9019\u500b agent\uff0c\u5c07\u5176\u8f49\u63db\u70ba A2AServer\u3002\u9019\u500b server \u5c31\u50cf\u516c\u958b\u4ecb\u9762\uff0c\u5141\u8a31\u5176\u4ed6 agent \u900f\u904e\u7db2\u8def\u5411\u4f60\u7684 agent \u767c\u9001\u8acb\u6c42\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u60f3\u50cf\u6210\u70ba agent \u67b6\u8a2d\u4e00\u500b web server\u3002</p> </li> <li> <p>\u9023\u63a5\u5230\u53ef\u5b58\u53d6\u7684 agent\uff08Consuming\uff09\uff1a \u5728\u53e6\u4e00\u500b agent\uff08\u53ef\u4ee5\u5728\u540c\u4e00\u53f0\u6a5f\u5668\u6216\u4e0d\u540c\u6a5f\u5668\u4e0a\u904b\u884c\uff09\u4e2d\uff0c\u4f60\u6703\u4f7f\u7528\u4e00\u500b\u7279\u6b8a\u7684 ADK \u5143\u4ef6 <code>RemoteA2aAgent</code>\u3002\u9019\u500b <code>RemoteA2aAgent</code> \u6703\u4f5c\u70ba client\uff0c\u77e5\u9053\u5982\u4f55\u8207\u4f60\u5148\u524d\u66b4\u9732\u7684 A2AServer \u6e9d\u901a\u3002\u5b83\u6703\u5728\u80cc\u5f8c\u8655\u7406\u6240\u6709\u7db2\u8def\u901a\u8a0a\u3001\u8a8d\u8b49\u8207\u8cc7\u6599\u683c\u5f0f\u5316\u7684\u8907\u96dc\u7d30\u7bc0\u3002</p> </li> </ol> <p>\u5c0d\u958b\u767c\u8005\u4f86\u8aaa\uff0c\u7576\u4f60\u5b8c\u6210\u9019\u4e9b\u8a2d\u5b9a\u5f8c\uff0c\u8207\u9060\u7aef agent \u4e92\u52d5\u7684\u9ad4\u9a57\u5c31\u50cf\u64cd\u4f5c\u672c\u5730\u5de5\u5177\u6216\u51fd\u5f0f\u4e00\u6a23\u3002ADK \u5e6b\u4f60\u62bd\u8c61\u6389\u7db2\u8def\u5c64\uff0c\u4f7f\u5206\u6563\u5f0f agent \u7cfb\u7d71\u7684\u958b\u767c\u8207\u672c\u5730\u7cfb\u7d71\u4e00\u6a23\u5bb9\u6613\u3002</p>"},{"location":"a2a/intro/#a2a_2","title":"A2A \u5de5\u4f5c\u6d41\u7a0b\u8996\u89ba\u5316","text":"<p>\u70ba\u4e86\u9032\u4e00\u6b65\u8aaa\u660e A2A \u7684\u5de5\u4f5c\u6d41\u7a0b\uff0c\u8b93\u6211\u5011\u770b\u770b\u300c\u66b4\u9732\u300d\u8207\u300c\u6d88\u8cbb\u300d agent \u524d\u5f8c\u7684\u72c0\u614b\uff0c\u4ee5\u53ca\u5b83\u5011\u7d44\u5408\u6210\u7684\u6574\u9ad4\u7cfb\u7d71\u3002</p>"},{"location":"a2a/intro/#agent","title":"\u66b4\u9732\u4e00\u500b agent","text":"<p>\u66b4\u9732\u524d\uff1a \u4f60\u7684 agent \u7a0b\u5f0f\u78bc\u4f5c\u70ba\u7368\u7acb\u5143\u4ef6\u904b\u884c\uff0c\u4f46\u5728\u9019\u500b\u60c5\u5883\u4e0b\uff0c\u4f60\u5e0c\u671b\u5c07\u5b83\u66b4\u9732\u51fa\u53bb\uff0c\u8b93\u5176\u4ed6\u9060\u7aef agent \u80fd\u5920\u8207\u4f60\u7684 agent \u4e92\u52d5\u3002</p> <pre><code>+-------------------+\n| Your Agent Code   |\n|   (Standalone)    |\n+-------------------+\n</code></pre> <p>\u516c\u958b\u5f8c\uff1a \u60a8\u7684 agent \u7a0b\u5f0f\u78bc\u5df2\u8207 <code>A2AServer</code>\uff08\u4e00\u500b Agent Development Kit (ADK) \u5143\u4ef6\uff09\u6574\u5408\uff0c\u4f7f\u5176\u80fd\u5920\u900f\u904e\u7db2\u8def\u88ab\u5176\u4ed6\u9060\u7aef agent \u5b58\u53d6\u3002</p> <pre><code>+-----------------+\n|   A2A Server    |\n| (ADK Component) |&lt;--------+\n+-----------------+         |\n        |                   |\n        v                   |\n+-------------------+       |\n| Your Agent Code   |       |\n| (Now Accessible)  |       |\n+-------------------+       |\n                            |\n                            | (Network Communication)\n                            v\n+-----------------------------+\n|       Remote Agent(s)       |\n|    (Can now communicate)    |\n+-----------------------------+\n</code></pre>"},{"location":"a2a/intro/#agent_1","title":"\u4f7f\u7528 agent","text":"<p>\u958b\u59cb\u4f7f\u7528\u524d\uff1a \u4f60\u7684 agent\uff08\u5728\u6b64\u60c5\u5883\u4e0b\u7a31\u70ba\u300cRoot Agent\u300d\uff09\u662f\u4f60\u6b63\u5728\u958b\u767c\u3001\u9700\u8981\u8207\u9060\u7aef agent \u4e92\u52d5\u7684\u61c9\u7528\u7a0b\u5f0f\u3002\u5728\u958b\u59cb\u4f7f\u7528\u524d\uff0c\u5b83\u5c1a\u672a\u5177\u5099\u76f4\u63a5\u9032\u884c\u4e92\u52d5\u7684\u6a5f\u5236\u3002</p> <pre><code>+----------------------+         +-------------------------------------------------------------+\n|      Root Agent      |         |                        Remote Agent                         |\n| (Your existing code) |         | (External Service that you want your Root Agent to talk to) |\n+----------------------+         +-------------------------------------------------------------+\n</code></pre> <p>\u6d88\u8cbb\u5f8c\uff1a \u60a8\u7684 Root Agent \u6703\u4f7f\u7528 <code>RemoteA2aAgent</code>\uff08\u9019\u662f\u4e00\u500b Agent Development Kit (ADK) \u5143\u4ef6\uff0c\u4f5c\u70ba\u9060\u7aef agent \u7684\u7528\u6236\u7aef\u4ee3\u7406\uff09\u4f86\u8207\u9060\u7aef agent \u5efa\u7acb\u901a\u8a0a\u3002</p> <pre><code>+----------------------+         +-----------------------------------+\n|      Root Agent      |         |         RemoteA2aAgent            |\n| (Your existing code) |&lt;-------&gt;|         (ADK Client Proxy)        |\n+----------------------+         |                                   |\n                                 |  +-----------------------------+  |\n                                 |  |         Remote Agent        |  |\n                                 |  |      (External Service)     |  |\n                                 |  +-----------------------------+  |\n                                 +-----------------------------------+\n      (Now talks to remote agent via RemoteA2aAgent)\n</code></pre>"},{"location":"a2a/intro/#_1","title":"\u6700\u7d42\u7cfb\u7d71\uff08\u6574\u5408\u8996\u5716\uff09","text":"<p>\u6b64\u5716\u8aaa\u660e\u4e86\u6d88\u8cbb\u7aef\u8207\u63d0\u4f9b\u7aef\u5982\u4f55\u9023\u63a5\uff0c\u7d44\u6210\u4e00\u500b\u5b8c\u6574\u7684 A2A \u7cfb\u7d71\u3002</p> <pre><code>Consuming Side:\n+----------------------+         +-----------------------------------+\n|      Root Agent      |         |         RemoteA2aAgent            |\n| (Your existing code) |&lt;-------&gt;|         (ADK Client Proxy)        |\n+----------------------+         |                                   |\n                                 |  +-----------------------------+  |\n                                 |  |         Remote Agent        |  |\n                                 |  |      (External Service)     |  |\n                                 |  +-----------------------------+  |\n                                 +-----------------------------------+\n                                                 |\n                                                 | (Network Communication)\n                                                 v\nExposing Side:\n                                               +-----------------+\n                                               |   A2A Server    |\n                                               | (ADK Component) |\n                                               +-----------------+\n                                                       |\n                                                       v\n                                               +-------------------+\n                                               | Your Agent Code   |\n                                               | (Exposed Service) |\n                                               +-------------------+\n</code></pre>"},{"location":"a2a/intro/#agent-agent","title":"\u5177\u9ad4\u4f7f\u7528\u6848\u4f8b\uff1a\u5ba2\u670d agent \u8207\u7522\u54c1\u76ee\u9304 agent","text":"<p>\u8b93\u6211\u5011\u4f86\u770b\u4e00\u500b\u5be6\u969b\u7bc4\u4f8b\uff1a\u4e00\u500b\u5ba2\u670d agent\uff08Customer Service Agent\uff09\u9700\u8981\u5f9e\u53e6\u4e00\u500b\u7522\u54c1\u76ee\u9304 agent\uff08Product Catalog Agent\uff09\u64f7\u53d6\u7522\u54c1\u8cc7\u8a0a\u3002</p>"},{"location":"a2a/intro/#a2a_3","title":"\u5728 A2A \u4e4b\u524d","text":"<p>\u6700\u521d\uff0c\u60a8\u7684\u5ba2\u670d agent \u53ef\u80fd\u6c92\u6709\u76f4\u63a5\u4e14\u6a19\u6e96\u5316\u7684\u65b9\u5f0f\u4f86\u67e5\u8a62\u7522\u54c1\u76ee\u9304 agent\uff0c\u7279\u5225\u662f\u7576\u5b83\u662f\u4e00\u500b\u7368\u7acb\u670d\u52d9\u6216\u7531\u4e0d\u540c\u5718\u968a\u7ba1\u7406\u6642\u3002</p> <pre><code>+-------------------------+         +--------------------------+\n| Customer Service Agent  |         |  Product Catalog Agent   |\n| (Needs Product Info)    |         | (Contains Product Data)  |\n+-------------------------+         +--------------------------+\n      (No direct, standardized communication)\n</code></pre>"},{"location":"a2a/intro/#a2a_4","title":"A2A \u4e4b\u5f8c","text":"<p>\u900f\u904e\u4f7f\u7528 A2A Protocol\uff0cProduct Catalog Agent \u53ef\u4ee5\u5c07\u5176\u529f\u80fd\u4f5c\u70ba A2A \u670d\u52d9\u5c0d\u5916\u63d0\u4f9b\u3002\u60a8\u7684 Customer Service Agent \u96a8\u5f8c\u53ef\u4ee5\u8f15\u9b06\u5730\u5229\u7528 Agent Development Kit (ADK) \u7684 <code>RemoteA2aAgent</code> \u4f86\u5b58\u53d6\u6b64\u670d\u52d9\u3002</p> <pre><code>+-------------------------+         +-----------------------------------+\n| Customer Service Agent  |         |         RemoteA2aAgent            |\n| (Your Root Agent)       |&lt;-------&gt;|         (ADK Client Proxy)        |\n+-------------------------+         |                                   |\n                                    |  +-----------------------------+  |\n                                    |  |     Product Catalog Agent   |  |\n                                    |  |      (External Service)     |  |\n                                    |  +-----------------------------+  |\n                                    +-----------------------------------+\n                                                 |\n                                                 | (Network Communication)\n                                                 v\n                                               +-----------------+\n                                               |   A2A Server    |\n                                               | (ADK Component) |\n                                               +-----------------+\n                                                       |\n                                                       v\n                                               +------------------------+\n                                               | Product Catalog Agent  |\n                                               | (Exposed Service)      |\n                                               +------------------------+\n</code></pre> <p>\u5728\u9019\u500b\u8a2d\u5b9a\u4e2d\uff0c\u9996\u5148\u9700\u8981\u900f\u904e A2A Server \u5c07 Product Catalog Agent \u5c0d\u5916\u516c\u958b\u3002\u63a5\u8457\uff0cCustomer Service Agent \u5c31\u53ef\u4ee5\u50cf\u4f7f\u7528\u5de5\u5177\u4e00\u6a23\uff0c\u76f4\u63a5\u547c\u53eb <code>RemoteA2aAgent</code> \u4e0a\u7684\u65b9\u6cd5\uff0c\u800c\u6240\u6709\u8207 Product Catalog Agent \u4e4b\u9593\u7684\u5e95\u5c64\u901a\u8a0a\u90fd\u6703\u7531 Agent Development Kit (ADK) \u8655\u7406\u3002\u9019\u6a23\u53ef\u4ee5\u660e\u78ba\u5340\u5206\u5404\u81ea\u7684\u8077\u8cac\uff0c\u4e26\u4e14\u8f15\u9b06\u6574\u5408\u5c08\u696d\u5316\u7684 agent\u3002</p>"},{"location":"a2a/intro/#_2","title":"\u4e0b\u4e00\u6b65","text":"<p>\u73fe\u5728\u4f60\u5df2\u7d93\u4e86\u89e3 A2A \u7684\u300c\u70ba\u4ec0\u9ebc\u300d\uff0c\u63a5\u4e0b\u4f86\u8b93\u6211\u5011\u6df1\u5165\u300c\u5982\u4f55\u505a\u300d\u3002</p> <ul> <li>\u7e7c\u7e8c\u95b1\u8b80\u4e0b\u4e00\u4efd\u6307\u5357\uff1a \u5feb\u901f\u958b\u59cb\uff1a\u516c\u958b\u4f60\u7684 agent</li> </ul>"},{"location":"a2a/quickstart-consuming.en/","title":"Quickstart: Consuming a remote agent via A2A","text":"<p>This quickstart covers the most common starting point for any developer: \"There is a remote agent, how do I let my ADK agent use it via A2A?\". This is crucial for building complex multi-agent systems where different agents need to collaborate and interact.</p>"},{"location":"a2a/quickstart-consuming.en/#overview","title":"Overview","text":"<p>This sample demonstrates the Agent-to-Agent (A2A) architecture in the Agent Development Kit (ADK), showcasing how multiple agents can work together to handle complex tasks. The sample implements an agent that can roll dice and check if numbers are prime.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Root Agent    \u2502\u2500\u2500\u2500\u25b6\u2502   Roll Agent     \u2502    \u2502   Remote Prime     \u2502\n\u2502  (Local)        \u2502    \u2502   (Local)        \u2502    \u2502   Agent            \u2502\n\u2502                 \u2502    \u2502                  \u2502    \u2502  (localhost:8001)  \u2502\n\u2502                 \u2502\u2500\u2500\u2500\u25b6\u2502                  \u2502\u25c0\u2500\u2500\u2500\u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The A2A Basic sample consists of:</p> <ul> <li>Root Agent (<code>root_agent</code>): The main orchestrator that delegates tasks to specialized sub-agents</li> <li>Roll Agent (<code>roll_agent</code>): A local sub-agent that handles dice rolling operations</li> <li>Prime Agent (<code>prime_agent</code>): A remote A2A agent that checks if numbers are prime, this agent is running on a separate A2A server</li> </ul>"},{"location":"a2a/quickstart-consuming.en/#exposing-your-agent-with-the-adk-server","title":"Exposing Your Agent with the ADK Server","text":"<p>The ADK comes with a built-in CLI command, <code>adk api_server --a2a</code> to expose your agent using the A2A protocol.</p> <p>In the <code>a2a_basic</code> example, you will first need to expose the <code>check_prime_agent</code> via an A2A server, so that the local root agent can use it.</p>"},{"location":"a2a/quickstart-consuming.en/#getting-the-sample-code","title":"1. Getting the Sample Code","text":"<p>First, make sure you have the necessary dependencies installed:</p> <pre><code>pip install google-adk[a2a]\n</code></pre> <p>You can clone and navigate to the <code>a2a_basic</code> sample here:</p> <pre><code>git clone https://github.com/google/adk-python.git\n</code></pre> <p>As you'll see, the folder structure is as follows:</p> <pre><code>a2a_basic/\n\u251c\u2500\u2500 remote_a2a/\n\u2502   \u2514\u2500\u2500 check_prime_agent/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 agent.json\n\u2502       \u2514\u2500\u2500 agent.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 agent.py # local root agent\n</code></pre>"},{"location":"a2a/quickstart-consuming.en/#main-agent-a2a_basicagentpy","title":"Main Agent (<code>a2a_basic/agent.py</code>)","text":"<ul> <li><code>roll_die(sides: int)</code>: Function tool for rolling dice</li> <li><code>roll_agent</code>: Local agent specialized in dice rolling</li> <li><code>prime_agent</code>: Remote A2A agent configuration</li> <li><code>root_agent</code>: Main orchestrator with delegation logic</li> </ul>"},{"location":"a2a/quickstart-consuming.en/#remote-prime-agent-a2a_basicremote_a2acheck_prime_agent","title":"Remote Prime Agent (<code>a2a_basic/remote_a2a/check_prime_agent/</code>)","text":"<ul> <li><code>agent.py</code>: Implementation of the prime checking service</li> <li><code>agent.json</code>: Agent card of the A2A agent</li> <li><code>check_prime(nums: list[int])</code>: Prime number checking algorithm</li> </ul>"},{"location":"a2a/quickstart-consuming.en/#start-the-remote-prime-agent-server","title":"2. Start the Remote Prime Agent server","text":"<p>To show how your ADK agent can consume a remote agent via A2A, you'll first need to start a remote agent server, which will host the prime agent (under <code>check_prime_agent</code>).</p> <pre><code># Start the remote a2a server that serves the check_prime_agent on port 8001\nadk api_server --a2a --port 8001 contributing/samples/a2a_basic/remote_a2a\n</code></pre> Adding logging for debugging with <code>--log_level debug</code> <p>To enable debug-level logging, you can add <code>--log_level debug</code> to your <code>adk api_server</code>, as in: <pre><code>adk api_server --a2a --port 8001 contributing/samples/a2a_basic/remote_a2a --log_level debug\n</code></pre> This will give richer logs for you to inspect when testing your agents.</p> Why use port 8001? <p>In this quickstart, when testing locally, your agents will be using localhost, so the <code>port</code> for the A2A server for the exposed agent (the remote, prime agent) must be different from the consuming agent's port. The default port for <code>adk web</code> where you will interact with the consuming agent is <code>8000</code>, which is why the A2A server is created using a separate port, <code>8001</code>.</p> <p>Once executed, you should see something like:</p> <pre><code>INFO:     Started server process [56558]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)\n</code></pre>"},{"location":"a2a/quickstart-consuming.en/#look-out-for-the-required-agent-card-agent-json-of-the-remote-agent","title":"3. Look out for the required agent card (<code>agent-card.json</code>) of the remote agent","text":"<p>A2A Protocol requires that each agent must have an agent card that describes what it does.</p> <p>If someone else has already built the remote A2A agent that you are looking to consume in your agent, then you should confirm that they have an agent card (<code>agent-card.json</code>).</p> <p>In the sample, the <code>check_prime_agent</code> already has an agent card provided:</p> a2a_basic/remote_a2a/check_prime_agent/agent-card.json<pre><code>{\n  \"capabilities\": {},\n  \"defaultInputModes\": [\"text/plain\"],\n  \"defaultOutputModes\": [\"application/json\"],\n  \"description\": \"An agent specialized in checking whether numbers are prime. It can efficiently determine the primality of individual numbers or lists of numbers.\",\n  \"name\": \"check_prime_agent\",\n  \"skills\": [\n    {\n      \"id\": \"prime_checking\",\n      \"name\": \"Prime Number Checking\",\n      \"description\": \"Check if numbers in a list are prime using efficient mathematical algorithms\",\n      \"tags\": [\"mathematical\", \"computation\", \"prime\", \"numbers\"]\n    }\n  ],\n  \"url\": \"http://localhost:8001/a2a/check_prime_agent\",\n  \"version\": \"1.0.0\"\n}\n</code></pre> More info on agent cards in ADK <p>In ADK, you can use a <code>to_a2a(root_agent)</code> wrapper which automatically generates an agent card for you. If you're interested in learning more about how to expose your existing agent so others can use it, then please look at the A2A Quickstart (Exposing) tutorial. </p>"},{"location":"a2a/quickstart-consuming.en/#run-the-main-consuming-agent","title":"4. Run the Main (Consuming) Agent","text":"<pre><code># In a separate terminal, run the adk web server\nadk web contributing/samples/\n</code></pre>"},{"location":"a2a/quickstart-consuming.en/#how-it-works","title":"How it works","text":"<p>The main agent uses the <code>RemoteA2aAgent()</code> function to consume the remote agent (<code>prime_agent</code> in our example). As you can see below, <code>RemoteA2aAgent()</code> requires the <code>name</code>, <code>description</code>, and the URL of the <code>agent_card</code>.</p> a2a_basic/agent.py<pre><code>&lt;...code truncated...&gt;\n\nfrom google.adk.agents.remote_a2a_agent import AGENT_CARD_WELL_KNOWN_PATH\nfrom google.adk.agents.remote_a2a_agent import RemoteA2aAgent\n\nprime_agent = RemoteA2aAgent(\n    name=\"prime_agent\",\n    description=\"Agent that handles checking if numbers are prime.\",\n    agent_card=(\n        f\"http://localhost:8001/a2a/check_prime_agent{AGENT_CARD_WELL_KNOWN_PATH}\"\n    ),\n)\n\n&lt;...code truncated&gt;\n</code></pre> <p>Then, you can simply use the <code>RemoteA2aAgent</code> in your agent. In this case, <code>prime_agent</code> is used as one of the sub-agents in the <code>root_agent</code> below:</p> a2a_basic/agent.py<pre><code>from google.adk.agents.llm_agent import Agent\nfrom google.genai import types\n\nroot_agent = Agent(\n    model=\"gemini-2.0-flash\",\n    name=\"root_agent\",\n    instruction=\"\"\"\n      &lt;You are a helpful assistant that can roll dice and check if numbers are prime.\n      You delegate rolling dice tasks to the roll_agent and prime checking tasks to the prime_agent.\n      Follow these steps:\n      1. If the user asks to roll a die, delegate to the roll_agent.\n      2. If the user asks to check primes, delegate to the prime_agent.\n      3. If the user asks to roll a die and then check if the result is prime, call roll_agent first, then pass the result to prime_agent.\n      Always clarify the results before proceeding.&gt;\n    \"\"\",\n    global_instruction=(\n        \"You are DicePrimeBot, ready to roll dice and check prime numbers.\"\n    ),\n    sub_agents=[roll_agent, prime_agent],\n    tools=[example_tool],\n    generate_content_config=types.GenerateContentConfig(\n        safety_settings=[\n            types.SafetySetting(  # avoid false alarm about rolling dice.\n                category=types.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n                threshold=types.HarmBlockThreshold.OFF,\n            ),\n        ]\n    ),\n)\n</code></pre>"},{"location":"a2a/quickstart-consuming.en/#example-interactions","title":"Example Interactions","text":"<p>Once both your main and remote agents are running, you can interact with the root agent to see how it calls the remote agent via A2A:</p> <p>Simple Dice Rolling: This interaction uses a local agent, the Roll Agent:</p> <pre><code>User: Roll a 6-sided die\nBot: I rolled a 4 for you.\n</code></pre> <p>Prime Number Checking:</p> <p>This interaction uses a remote agent via A2A, the Prime Agent:</p> <pre><code>User: Is 7 a prime number?\nBot: Yes, 7 is a prime number.\n</code></pre> <p>Combined Operations:</p> <p>This interaction uses both the local Roll Agent and the remote Prime Agent:</p> <pre><code>User: Roll a 10-sided die and check if it's prime\nBot: I rolled an 8 for you.\nBot: 8 is not a prime number.\n</code></pre>"},{"location":"a2a/quickstart-consuming.en/#next-steps","title":"Next Steps","text":"<p>Now that you have created an agent that's using a remote agent via an A2A server, the next step is to learn how to connect to it from another agent.</p> <ul> <li>A2A Quickstart (Exposing): Learn how to expose your existing agent so that other agents can use it via the A2A Protocol.</li> </ul>"},{"location":"a2a/quickstart-consuming/","title":"\u5feb\u901f\u958b\u59cb\uff1a\u900f\u904e A2A \u4f7f\u7528\u9060\u7aef agent","text":"<p>\u672c\u5feb\u901f\u958b\u59cb\u6db5\u84cb\u4e86\u6bcf\u4f4d\u958b\u767c\u8005\u6700\u5e38\u898b\u7684\u8d77\u9ede\uff1a\u300c\u6709\u4e00\u500b\u9060\u7aef agent\uff0c\u6211\u8981\u5982\u4f55\u8b93\u6211\u7684 Agent Development Kit (ADK) agent \u900f\u904e A2A \u4f7f\u7528\u5b83\uff1f\u300d\u3002\u9019\u5c0d\u65bc\u5efa\u69cb\u8907\u96dc\u7684\u591a agent \u7cfb\u7d71\u3001\u8b93\u4e0d\u540c agent \u80fd\u5920\u5354\u4f5c\u8207\u4e92\u52d5\u81f3\u95dc\u91cd\u8981\u3002</p>"},{"location":"a2a/quickstart-consuming/#_1","title":"\u6982\u8ff0","text":"<p>\u672c\u7bc4\u4f8b\u5c55\u793a\u4e86 Agent Development Kit (ADK) \u4e2d\u7684 Agent-to-Agent (A2A) \u67b6\u69cb\uff0c\u8aaa\u660e\u591a\u500b agent \u5982\u4f55\u5354\u540c\u8655\u7406\u8907\u96dc\u4efb\u52d9\u3002\u7bc4\u4f8b\u5be6\u4f5c\u4e86\u4e00\u500b\u80fd\u64f2\u9ab0\u5b50\u4e26\u6aa2\u67e5\u6578\u5b57\u662f\u5426\u70ba\u8cea\u6578\u7684 agent\u3002</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Root Agent    \u2502\u2500\u2500\u2500\u25b6\u2502   Roll Agent     \u2502    \u2502   Remote Prime     \u2502\n\u2502  (Local)        \u2502    \u2502   (Local)        \u2502    \u2502   Agent            \u2502\n\u2502                 \u2502    \u2502                  \u2502    \u2502  (localhost:8001)  \u2502\n\u2502                 \u2502\u2500\u2500\u2500\u25b6\u2502                  \u2502\u25c0\u2500\u2500\u2500\u2502                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>A2A Basic \u7bc4\u4f8b\u5305\u542b\u4ee5\u4e0b\u7d44\u4ef6\uff1a</p> <ul> <li>Root Agent\uff08<code>root_agent</code>\uff09\uff1a\u4e3b\u8981\u7684\u5354\u8abf\u8005\uff0c\u8ca0\u8cac\u5c07\u4efb\u52d9\u5206\u6d3e\u7d66\u5c08\u9580\u7684\u5b50 agent</li> <li>Roll Agent\uff08<code>roll_agent</code>\uff09\uff1a\u672c\u6a5f\u5b50 agent\uff0c\u8ca0\u8cac\u64f2\u9ab0\u5b50\u7684\u64cd\u4f5c</li> <li>Prime Agent\uff08<code>prime_agent</code>\uff09\uff1a\u9060\u7aef\u7684 A2A agent\uff0c\u8ca0\u8cac\u5224\u65b7\u6578\u5b57\u662f\u5426\u70ba\u8cea\u6578\uff0c\u6b64 agent \u57f7\u884c\u65bc\u53e6\u4e00\u500b\u7368\u7acb\u7684 A2A \u4f3a\u670d\u5668\u4e0a</li> </ul>"},{"location":"a2a/quickstart-consuming/#adk-agent","title":"\u4f7f\u7528 ADK \u4f3a\u670d\u5668\u516c\u958b\u4f60\u7684 agent","text":"<p>Agent Development Kit (ADK) \u63d0\u4f9b\u4e86\u5167\u5efa\u7684\u547d\u4ee4\u5217\u4ecb\u9762 (Command Line Interface) \u6307\u4ee4 <code>adk api_server --a2a</code>\uff0c\u53ef\u7528\u65bc\u900f\u904e A2A \u5354\u5b9a\u516c\u958b\u4f60\u7684 agent\u3002</p> <p>\u5728 <code>a2a_basic</code> \u7bc4\u4f8b\u4e2d\uff0c\u4f60\u9700\u8981\u5148\u900f\u904e A2A \u4f3a\u670d\u5668\u516c\u958b <code>check_prime_agent</code>\uff0c\u4ee5\u4fbf\u672c\u6a5f\u7684 Root Agent \u80fd\u5920\u4f7f\u7528\u5b83\u3002</p>"},{"location":"a2a/quickstart-consuming/#getting-the-sample-code","title":"1. \u53d6\u5f97\u7bc4\u4f8b\u7a0b\u5f0f\u78bc","text":"<p>\u9996\u5148\uff0c\u8acb\u78ba\u8a8d\u4f60\u5df2\u5b89\u88dd\u6240\u6709\u5fc5\u8981\u7684\u76f8\u4f9d\u5957\u4ef6\uff1a</p> <pre><code>pip install google-adk[a2a]\n</code></pre> <p>\u4f60\u53ef\u4ee5\u5728\u9019\u88e1\u8907\u88fd\u4e26\u524d\u5f80 <code>a2a_basic</code> \u7bc4\u4f8b\uff1a</p> <pre><code>git clone https://github.com/google/adk-python.git\n</code></pre> <p>\u5982\u60a8\u6240\u898b\uff0c\u8cc7\u6599\u593e\u7d50\u69cb\u5982\u4e0b\uff1a</p> <pre><code>a2a_basic/\n\u251c\u2500\u2500 remote_a2a/\n\u2502   \u2514\u2500\u2500 check_prime_agent/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 agent.json\n\u2502       \u2514\u2500\u2500 agent.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 agent.py # local root agent\n</code></pre>"},{"location":"a2a/quickstart-consuming/#agent-a2a_basicagentpy","title":"\u4e3b Agent (<code>a2a_basic/agent.py</code>)","text":"<ul> <li><code>roll_die(sides: int)</code>\uff1a\u64f2\u9ab0\u5b50\u529f\u80fd\u5de5\u5177\u51fd\u5f0f</li> <li><code>roll_agent</code>\uff1a\u5c08\u9580\u8655\u7406\u64f2\u9ab0\u5b50\u7684\u672c\u5730 agent</li> <li><code>prime_agent</code>\uff1a\u9060\u7aef A2A agent \u8a2d\u5b9a</li> <li><code>root_agent</code>\uff1a\u5177\u5099\u59d4\u6d3e\u908f\u8f2f\u7684\u4e3b\u5354\u8abf\u8005</li> </ul>"},{"location":"a2a/quickstart-consuming/#agent-a2a_basicremote_a2acheck_prime_agent","title":"\u9060\u7aef\u8cea\u6578 Agent (<code>a2a_basic/remote_a2a/check_prime_agent/</code>)","text":"<ul> <li><code>agent.py</code>\uff1a\u8cea\u6578\u6aa2\u67e5\u670d\u52d9\u7684\u5be6\u4f5c</li> <li><code>agent.json</code>\uff1aA2A agent \u7684 agent card</li> <li><code>check_prime(nums: list[int])</code>\uff1a\u8cea\u6578\u6aa2\u67e5\u6f14\u7b97\u6cd5</li> </ul>"},{"location":"a2a/quickstart-consuming/#start-the-remote-prime-agent-server","title":"2. \u555f\u52d5\u9060\u7aef\u8cea\u6578 Agent \u4f3a\u670d\u5668","text":"<p>\u70ba\u4e86\u5c55\u793a\u4f60\u7684 Agent Development Kit (ADK) agent \u5982\u4f55\u900f\u904e A2A \u6d88\u8cbb\u9060\u7aef agent\uff0c\u4f60\u9700\u8981\u5148\u555f\u52d5\u4e00\u500b\u9060\u7aef agent \u4f3a\u670d\u5668\uff0c\u8a72\u4f3a\u670d\u5668\u5c07\u8a17\u7ba1\u8cea\u6578 agent\uff08\u4f4d\u65bc <code>check_prime_agent</code>\uff09\u3002</p> <pre><code># Start the remote a2a server that serves the check_prime_agent on port 8001\nadk api_server --a2a --port 8001 contributing/samples/a2a_basic/remote_a2a\n</code></pre> \u70ba <code>--log_level debug</code> \u65b0\u589e\u9664\u932f\u7528\u7684\u65e5\u8a8c\u7d00\u9304 <p>\u82e5\u8981\u555f\u7528 debug \u7b49\u7d1a\u7684\u65e5\u8a8c\u7d00\u9304\uff0c\u60a8\u53ef\u4ee5\u5728 <code>adk api_server</code> \u4e2d\u52a0\u5165 <code>--log_level debug</code>\uff0c\u4f8b\u5982\uff1a <pre><code>adk api_server --a2a --port 8001 contributing/samples/a2a_basic/remote_a2a --log_level debug\n</code></pre> \u9019\u5c07\u70ba\u4f60\u5728\u6e2c\u8a66 agent \u6642\uff0c\u63d0\u4f9b\u66f4\u8c50\u5bcc\u7684\u65e5\u8a8c\u4ee5\u4fbf\u6aa2\u67e5\u3002</p> \u70ba\u4ec0\u9ebc\u8981\u4f7f\u7528 8001 \u57e0\u53e3\uff1f <p>\u5728\u672c\u6b21\u5feb\u901f\u958b\u59cb\uff08Quickstart\uff09\u4e2d\uff0c\u7576\u4f60\u5728\u672c\u6a5f\u6e2c\u8a66\u6642\uff0cagent \u6703\u4f7f\u7528 localhost\uff0c\u56e0\u6b64\u5c0d\u65bc\u516c\u958b\u7684 agent\uff08\u9060\u7aef\u7684 prime agent\uff09\u6240\u4f7f\u7528\u7684 A2A \u4f3a\u670d\u5668\u7684 <code>port</code> \u5fc5\u9808\u8207\u6d88\u8cbb\u7aef agent \u7684\u57e0\u53e3\u4e0d\u540c\u3002\u4f60\u5c07\u8207\u6d88\u8cbb\u7aef agent \u4e92\u52d5\u7684 <code>adk web</code> \u9810\u8a2d\u57e0\u53e3\u662f <code>8000</code>\uff0c\u9019\u4e5f\u662f\u70ba\u4ec0\u9ebc A2A \u4f3a\u670d\u5668\u6703\u4f7f\u7528\u53e6\u4e00\u500b\u7368\u7acb\u7684\u57e0\u53e3 <code>8001</code> \u4f86\u5efa\u7acb\u3002</p> <p>\u57f7\u884c\u5f8c\uff0c\u4f60\u61c9\u8a72\u6703\u770b\u5230\u985e\u4f3c\u4ee5\u4e0b\u7684\u5167\u5bb9\uff1a</p> <pre><code>INFO:     Started server process [56558]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)\n</code></pre>"},{"location":"a2a/quickstart-consuming/#look-out-for-the-required-agent-card-agent-json-of-the-remote-agent","title":"3. \u7559\u610f\u9060\u7aef agent \u6240\u9700\u7684 agent card\uff08<code>agent-card.json</code>\uff09","text":"<p>A2A Protocol \u8981\u6c42\u6bcf\u500b agent \u90fd\u5fc5\u9808\u6709\u4e00\u500b agent card\uff0c\u7528\u4f86\u63cf\u8ff0\u5176\u529f\u80fd\u3002</p> <p>\u5982\u679c\u4f60\u8981\u5728\u81ea\u5df1\u7684 agent \u4e2d\u4e32\u63a5\u4ed6\u4eba\u5df2\u7d93\u5efa\u7f6e\u597d\u7684\u9060\u7aef A2A agent\uff0c\u8acb\u78ba\u8a8d\u5c0d\u65b9\u662f\u5426\u6709\u63d0\u4f9b agent card\uff08<code>agent-card.json</code>\uff09\u3002</p> <p>\u5728\u6b64\u7bc4\u4f8b\u4e2d\uff0c<code>check_prime_agent</code> \u5df2\u7d93\u6709\u63d0\u4f9b agent card\uff1a</p> a2a_basic/remote_a2a/check_prime_agent/agent-card.json<pre><code>{\n  \"capabilities\": {},\n  \"defaultInputModes\": [\"text/plain\"],\n  \"defaultOutputModes\": [\"application/json\"],\n  \"description\": \"An agent specialized in checking whether numbers are prime. It can efficiently determine the primality of individual numbers or lists of numbers.\",\n  \"name\": \"check_prime_agent\",\n  \"skills\": [\n    {\n      \"id\": \"prime_checking\",\n      \"name\": \"Prime Number Checking\",\n      \"description\": \"Check if numbers in a list are prime using efficient mathematical algorithms\",\n      \"tags\": [\"mathematical\", \"computation\", \"prime\", \"numbers\"]\n    }\n  ],\n  \"url\": \"http://localhost:8001/a2a/check_prime_agent\",\n  \"version\": \"1.0.0\"\n}\n</code></pre> \u66f4\u591a\u6709\u95dc Agent Development Kit (ADK) \u4e2d agent \u5361\u7247\u7684\u8cc7\u8a0a <p>In ADK, you can use a <code>to_a2a(root_agent)</code> wrapper which automatically generates an agent card for you. If you're interested in learning more about how to expose your existing agent so others can use it, then please look at the A2A Quickstart (Exposing) tutorial. </p>"},{"location":"a2a/quickstart-consuming/#run-the-main-consuming-agent","title":"4. \u57f7\u884c\u4e3b\uff08\u6d88\u8cbb\uff09agent","text":"<pre><code># In a separate terminal, run the adk web server\nadk web contributing/samples/\n</code></pre>"},{"location":"a2a/quickstart-consuming/#_2","title":"\u904b\u4f5c\u539f\u7406","text":"<p>\u4e3b\u8981\u7684 agent \u6703\u4f7f\u7528 <code>RemoteA2aAgent()</code> \u51fd\u5f0f\u4f86\u6d88\u8cbb\u9060\u7aef agent\uff08\u5728\u672c\u7bc4\u4f8b\u4e2d\u70ba <code>prime_agent</code>\uff09\u3002\u5982\u4e0b\u9762\u6240\u793a\uff0c<code>RemoteA2aAgent()</code> \u9700\u8981 <code>name</code>\u3001<code>description</code>\uff0c\u4ee5\u53ca <code>agent_card</code> \u7684 URL\u3002</p> a2a_basic/agent.py<pre><code>&lt;...code truncated...&gt;\n\nfrom google.adk.agents.remote_a2a_agent import AGENT_CARD_WELL_KNOWN_PATH\nfrom google.adk.agents.remote_a2a_agent import RemoteA2aAgent\n\nprime_agent = RemoteA2aAgent(\n    name=\"prime_agent\",\n    description=\"Agent that handles checking if numbers are prime.\",\n    agent_card=(\n        f\"http://localhost:8001/a2a/check_prime_agent{AGENT_CARD_WELL_KNOWN_PATH}\"\n    ),\n)\n\n&lt;...code truncated&gt;\n</code></pre> <p>\u7136\u5f8c\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728\u4f60\u7684 agent \u4e2d\u76f4\u63a5\u4f7f\u7528 <code>RemoteA2aAgent</code>\u3002\u5728\u6b64\u7bc4\u4f8b\u4e2d\uff0c<code>prime_agent</code> \u4f5c\u70ba <code>root_agent</code> \u4e2d\u7684\u4e00\u500b\u5b50 agent \u88ab\u4f7f\u7528\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> a2a_basic/agent.py<pre><code>from google.adk.agents.llm_agent import Agent\nfrom google.genai import types\n\nroot_agent = Agent(\n    model=\"gemini-2.0-flash\",\n    name=\"root_agent\",\n    instruction=\"\"\"\n      &lt;You are a helpful assistant that can roll dice and check if numbers are prime.\n      You delegate rolling dice tasks to the roll_agent and prime checking tasks to the prime_agent.\n      Follow these steps:\n      1. If the user asks to roll a die, delegate to the roll_agent.\n      2. If the user asks to check primes, delegate to the prime_agent.\n      3. If the user asks to roll a die and then check if the result is prime, call roll_agent first, then pass the result to prime_agent.\n      Always clarify the results before proceeding.&gt;\n    \"\"\",\n    global_instruction=(\n        \"You are DicePrimeBot, ready to roll dice and check prime numbers.\"\n    ),\n    sub_agents=[roll_agent, prime_agent],\n    tools=[example_tool],\n    generate_content_config=types.GenerateContentConfig(\n        safety_settings=[\n            types.SafetySetting(  # avoid false alarm about rolling dice.\n                category=types.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n                threshold=types.HarmBlockThreshold.OFF,\n            ),\n        ]\n    ),\n)\n</code></pre>"},{"location":"a2a/quickstart-consuming/#_3","title":"\u7bc4\u4f8b\u4e92\u52d5","text":"<p>\u7576\u4f60\u7684\u4e3b agent \u548c\u9060\u7aef agent \u90fd\u5df2\u7d93\u904b\u884c\u5f8c\uff0c\u4f60\u53ef\u4ee5\u8207 root agent \u4e92\u52d5\uff0c\u89c0\u5bdf\u5b83\u5982\u4f55\u900f\u904e A2A \u547c\u53eb\u9060\u7aef agent\uff1a</p> <p>\u7c21\u55ae\u64f2\u9ab0\u5b50\uff1a \u9019\u500b\u4e92\u52d5\u6703\u4f7f\u7528\u672c\u6a5f agent\uff0c\u4e5f\u5c31\u662f Roll Agent\uff1a</p> <pre><code>User: Roll a 6-sided die\nBot: I rolled a 4 for you.\n</code></pre> <p>\u8cea\u6578\u6aa2\u67e5\uff1a</p> <p>\u6b64\u4e92\u52d5\u6703\u900f\u904e A2A \u4f7f\u7528\u9060\u7aef agent\u2014\u2014Prime Agent\uff1a</p> <pre><code>User: Is 7 a prime number?\nBot: Yes, 7 is a prime number.\n</code></pre> <p>\u7d9c\u5408\u64cd\u4f5c\uff1a</p> <p>\u6b64\u4e92\u52d5\u540c\u6642\u4f7f\u7528\u672c\u6a5f\u7684 Roll Agent \u4ee5\u53ca\u9060\u7aef\u7684 Prime Agent\uff1a</p> <pre><code>User: Roll a 10-sided die and check if it's prime\nBot: I rolled an 8 for you.\nBot: 8 is not a prime number.\n</code></pre>"},{"location":"a2a/quickstart-consuming/#_4","title":"\u4e0b\u4e00\u6b65","text":"<p>\u73fe\u5728\u4f60\u5df2\u7d93\u5efa\u7acb\u4e86\u4e00\u500b\u900f\u904e A2A \u4f3a\u670d\u5668\u4f7f\u7528\u9060\u7aef agent \u7684 agent\uff0c\u63a5\u4e0b\u4f86\u7684\u6b65\u9a5f\u662f\u5b78\u7fd2\u5982\u4f55\u5f9e\u53e6\u4e00\u500b agent \u9023\u63a5\u5230\u5b83\u3002</p> <ul> <li>A2A \u5feb\u901f\u958b\u59cb\uff08\u516c\u958b\uff09\uff1a\u5b78\u7fd2\u5982\u4f55\u5c07\u4f60\u73fe\u6709\u7684 agent \u900f\u904e A2A Protocol \u516c\u958b\uff0c\u8b93\u5176\u4ed6 agent \u53ef\u4ee5\u4f7f\u7528\u3002</li> </ul>"},{"location":"a2a/quickstart-exposing.en/","title":"Quickstart: Exposing a remote agent via A2A","text":"<p>This quickstart covers the most common starting point for any developer: \"I have an agent. How do I expose it so that other agents can use my agent via A2A?\". This is crucial for building complex multi-agent systems where different agents need to collaborate and interact.</p>"},{"location":"a2a/quickstart-exposing.en/#overview","title":"Overview","text":"<p>This sample demonstrates how you can easily expose an ADK agent so that it can be then consumed by another agent using the A2A Protocol.</p> <p>There are two main ways to expose an ADK agent via A2A.</p> <ul> <li>by using the <code>to_a2a(root_agent)</code> function: use this function if you just want to convert an existing agent to work with A2A, and be able to expose it via a server through <code>uvicorn</code>, instead of <code>adk deploy api_server</code>. This means that you have tighter control over what you want to expose via <code>uvicorn</code> when you want to productionize your agent. Furthermore, the <code>to_a2a()</code> function auto-generates an agent card based on your agent code.</li> <li>by creating your own agent card (<code>agent.json</code>) and hosting it using <code>adk api_server --a2a</code>: There are two main benefits of using this approach. First, <code>adk api_server --a2a</code> works with <code>adk web</code>, making it easy to use, debug, and test your agent. Second, with <code>adk api_server</code>, you can specify a parent folder with multiple, separate agents. Those agents that have an agent card (<code>agent.json</code>), will automatically be usable via A2A by other agents through the same server. However, you will need to create your own agent cards. To create an agent card, you can follow the A2A Python tutorial.</li> </ul> <p>This quickstart will focus on <code>to_a2a()</code>, as it is the easiest way to expose your agent and will also autogenerate the agent card behind-the-scenes. If you'd like to use the <code>adk api_server</code> approach, you can see it being used in the A2A Quickstart (Consuming) documentation.</p> <pre><code>Before:\n                                                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                                \u2502 Hello World Agent  \u2502\n                                                \u2502  (Python Object)   \u2502\n                                                | without agent card \u2502\n                                                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n                                                          \u2502\n                                                          \u2502 to_a2a()\n                                                          \u25bc\n\nAfter:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Root Agent   \u2502       A2A Protocol          \u2502 A2A-Exposed Hello World Agent \u2502\n\u2502(RemoteA2aAgent)\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502      (localhost: 8001)         \u2502\n\u2502(localhost:8000)\u2502                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The sample consists of :</p> <ul> <li>Remote Hello World Agent (<code>remote_a2a/hello_world/agent.py</code>): This is the agent that you want to expose so that other agents can use it via A2A. It is an agent that handles dice rolling and prime number checking. It becomes exposed using the <code>to_a2a()</code> function and is served using <code>uvicorn</code>.</li> <li>Root Agent (<code>agent.py</code>): A simple agent that is just calling the remote Hello World agent.</li> </ul>"},{"location":"a2a/quickstart-exposing.en/#exposing-the-remote-agent-with-the-to_a2aroot_agent-function","title":"Exposing the Remote Agent with the <code>to_a2a(root_agent)</code> function","text":"<p>You can take an existing agent built using ADK and make it A2A-compatible by simply wrapping it using the <code>to_a2a()</code> function. For example, if you have an agent like the following defined in <code>root_agent</code>:</p> <pre><code># Your agent code here\nroot_agent = Agent(\n    model='gemini-2.0-flash',\n    name='hello_world_agent',\n\n    &lt;...your agent code...&gt;\n)\n</code></pre> <p>Then you can make it A2A-compatible simply by using <code>to_a2a(root_agent)</code>:</p> <pre><code>from google.adk.a2a.utils.agent_to_a2a import to_a2a\n\n# Make your agent A2A-compatible\na2a_app = to_a2a(root_agent, port=8001)\n</code></pre> <p>The <code>to_a2a()</code> function will even auto-generate an agent card in-memory behind-the-scenes by extracting skills, capabilities, and metadata from the ADK agent, so that the well-known agent card is made available when the agent endpoint is served using <code>uvicorn</code>.</p> <p>Now let's dive into the sample code.</p>"},{"location":"a2a/quickstart-exposing.en/#getting-the-sample-code","title":"1. Getting the Sample Code","text":"<p>First, make sure you have the necessary dependencies installed:</p> <pre><code>pip install google-adk[a2a]\n</code></pre> <p>You can clone and navigate to the a2a_root sample here:</p> <pre><code>git clone https://github.com/google/adk-python.git\n</code></pre> <p>As you'll see, the folder structure is as follows:</p> <pre><code>a2a_root/\n\u251c\u2500\u2500 remote_a2a/\n\u2502   \u2514\u2500\u2500 hello_world/    \n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 agent.py    # Remote Hello World Agent\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 agent.py            # Root agent\n</code></pre>"},{"location":"a2a/quickstart-exposing.en/#root-agent-a2a_rootagentpy","title":"Root Agent (<code>a2a_root/agent.py</code>)","text":"<ul> <li><code>root_agent</code>: A <code>RemoteA2aAgent</code> that connects to the remote A2A service</li> <li>Agent Card URL: Points to the well-known agent card endpoint on the remote server</li> </ul>"},{"location":"a2a/quickstart-exposing.en/#remote-hello-world-agent-a2a_rootremote_a2ahello_worldagentpy","title":"Remote Hello World Agent (<code>a2a_root/remote_a2a/hello_world/agent.py</code>)","text":"<ul> <li><code>roll_die(sides: int)</code>: Function tool for rolling dice with state management</li> <li><code>check_prime(nums: list[int])</code>: Async function for prime number checking</li> <li><code>root_agent</code>: The main agent with comprehensive instructions</li> <li><code>a2a_app</code>: The A2A application created using <code>to_a2a()</code> utility</li> </ul>"},{"location":"a2a/quickstart-exposing.en/#start-the-remote-a2a-agent-server","title":"2. Start the Remote A2A Agent server","text":"<p>You can now start the remote agent server, which will host the <code>a2a_app</code> within the hello_world agent:</p> <pre><code># Ensure current working directory is adk-python/\n# Start the remote agent using uvicorn\nuvicorn contributing.samples.a2a_root.remote_a2a.hello_world.agent:a2a_app --host localhost --port 8001\n</code></pre> Why use port 8001? <p>In this quickstart, when testing locally, your agents will be using localhost, so the <code>port</code> for the A2A server for the exposed agent (the remote, prime agent) must be different from the consuming agent's port. The default port for <code>adk web</code> where you will interact with the consuming agent is <code>8000</code>, which is why the A2A server is created using a separate port, <code>8001</code>.</p> <p>Once executed, you should see something like:</p> <pre><code>INFO:     Started server process [10615]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://localhost:8001 (Press CTRL+C to quit)\n</code></pre>"},{"location":"a2a/quickstart-exposing.en/#check-that-your-remote-agent-is-running","title":"3. Check that your remote agent is running","text":"<p>You can check that your agent is up and running by visiting the agent card that was auto-generated earlier as part of your <code>to_a2a()</code> function in <code>a2a_root/remote_a2a/hello_world/agent.py</code>:</p> <p>http://localhost:8001/.well-known/agent-card.json</p> <p>You should see the contents of the agent card, which should look like:</p> <pre><code>{\"capabilities\":{},\"defaultInputModes\":[\"text/plain\"],\"defaultOutputModes\":[\"text/plain\"],\"description\":\"hello world agent that can roll a dice of 8 sides and check prime numbers.\",\"name\":\"hello_world_agent\",\"protocolVersion\":\"0.2.6\",\"skills\":[{\"description\":\"hello world agent that can roll a dice of 8 sides and check prime numbers. \\n      I roll dice and answer questions about the outcome of the dice rolls.\\n      I can roll dice of different sizes.\\n      I can use multiple tools in parallel by calling functions in parallel(in one request and in one round).\\n      It is ok to discuss previous dice roles, and comment on the dice rolls.\\n      When I are asked to roll a die, I must call the roll_die tool with the number of sides. Be sure to pass in an integer. Do not pass in a string.\\n      I should never roll a die on my own.\\n      When checking prime numbers, call the check_prime tool with a list of integers. Be sure to pass in a list of integers. I should never pass in a string.\\n      I should not check prime numbers before calling the tool.\\n      When I are asked to roll a die and check prime numbers, I should always make the following two function calls:\\n      1. I should first call the roll_die tool to get a roll. Wait for the function response before calling the check_prime tool.\\n      2. After I get the function response from roll_die tool, I should call the check_prime tool with the roll_die result.\\n        2.1 If user asks I to check primes based on previous rolls, make sure I include the previous rolls in the list.\\n      3. When I respond, I must include the roll_die result from step 1.\\n      I should always perform the previous 3 steps when asking for a roll and checking prime numbers.\\n      I should not rely on the previous history on prime results.\\n    \",\"id\":\"hello_world_agent\",\"name\":\"model\",\"tags\":[\"llm\"]},{\"description\":\"Roll a die and return the rolled result.\\n\\nArgs:\\n  sides: The integer number of sides the die has.\\n  tool_context: the tool context\\nReturns:\\n  An integer of the result of rolling the die.\",\"id\":\"hello_world_agent-roll_die\",\"name\":\"roll_die\",\"tags\":[\"llm\",\"tools\"]},{\"description\":\"Check if a given list of numbers are prime.\\n\\nArgs:\\n  nums: The list of numbers to check.\\n\\nReturns:\\n  A str indicating which number is prime.\",\"id\":\"hello_world_agent-check_prime\",\"name\":\"check_prime\",\"tags\":[\"llm\",\"tools\"]}],\"supportsAuthenticatedExtendedCard\":false,\"url\":\"http://localhost:8001\",\"version\":\"0.0.1\"}\n</code></pre>"},{"location":"a2a/quickstart-exposing.en/#run-the-main-consuming-agent","title":"4. Run the Main (Consuming) Agent","text":"<p>Now that your remote agent is running, you can launch the dev UI and select \"a2a_root\" as your agent.</p> <pre><code># In a separate terminal, run the adk web server\nadk web contributing/samples/\n</code></pre> <p>To open the adk web server, go to: http://localhost:8000.</p>"},{"location":"a2a/quickstart-exposing.en/#example-interactions","title":"Example Interactions","text":"<p>Once both services are running, you can interact with the root agent to see how it calls the remote agent via A2A:</p> <p>Simple Dice Rolling: This interaction uses a local agent, the Roll Agent:</p> <pre><code>User: Roll a 6-sided die\nBot: I rolled a 4 for you.\n</code></pre> <p>Prime Number Checking:</p> <p>This interaction uses a remote agent via A2A, the Prime Agent:</p> <pre><code>User: Is 7 a prime number?\nBot: Yes, 7 is a prime number.\n</code></pre> <p>Combined Operations:</p> <p>This interaction uses both the local Roll Agent and the remote Prime Agent:</p> <pre><code>User: Roll a 10-sided die and check if it's prime\nBot: I rolled an 8 for you.\nBot: 8 is not a prime number.\n</code></pre>"},{"location":"a2a/quickstart-exposing.en/#next-steps","title":"Next Steps","text":"<p>Now that you have created an agent that's exposing a remote agent via an A2A server, the next step is to learn how to consume it from another agent.</p> <ul> <li>A2A Quickstart (Consuming): Learn how your agent can use other agents using the A2A Protocol.</li> </ul>"},{"location":"a2a/quickstart-exposing/","title":"\u5feb\u901f\u958b\u59cb\uff1a\u900f\u904e A2A \u5c07\u9060\u7aef agent \u5c0d\u5916\u516c\u958b","text":"<p>\u672c\u5feb\u901f\u958b\u59cb\u6db5\u84cb\u4e86\u6bcf\u4f4d\u958b\u767c\u8005\u6700\u5e38\u898b\u7684\u8d77\u9ede\uff1a\u300c\u6211\u5df2\u7d93\u6709\u4e00\u500b agent\u3002\u6211\u8981\u5982\u4f55\u5c07\u5b83\u5c0d\u5916\u516c\u958b\uff0c\u8b93\u5176\u4ed6 agent \u80fd\u5920\u900f\u904e A2A \u4f7f\u7528\u6211\u7684 agent\uff1f\u300d\u9019\u5c0d\u65bc\u5efa\u69cb\u8907\u96dc\u7684\u591a agent \u7cfb\u7d71\uff08multi-agent systems\uff09\uff0c\u8b93\u4e0d\u540c agent \u80fd\u5920\u5354\u4f5c\u8207\u4e92\u52d5\u81f3\u95dc\u91cd\u8981\u3002</p>"},{"location":"a2a/quickstart-exposing/#_1","title":"\u6982\u89bd","text":"<p>\u672c\u7bc4\u4f8b\u8aaa\u660e\u5982\u4f55\u8f15\u9b06\u5c07\u4e00\u500b Agent Development Kit (ADK) agent \u5c0d\u5916\u516c\u958b\uff0c\u8b93\u5176\u4ed6 agent \u53ef\u4ee5\u900f\u904e A2A Protocol \u4f86\u5b58\u53d6\u3002</p> <p>\u6709\u5169\u7a2e\u4e3b\u8981\u65b9\u5f0f\u53ef\u4ee5\u900f\u904e A2A \u5c07 ADK agent \u5c0d\u5916\u516c\u958b\uff1a</p> <ul> <li>\u4f7f\u7528 <code>to_a2a(root_agent)</code> \u51fd\u5f0f\uff1a\u5982\u679c\u4f60\u53ea\u60f3\u5c07\u73fe\u6709\u7684 agent \u8f49\u63db\u70ba\u652f\u63f4 A2A\uff0c\u4e26\u4e14\u5e0c\u671b\u900f\u904e <code>uvicorn</code> \u4ee5\u4f3a\u670d\u5668\u65b9\u5f0f\u5c0d\u5916\u516c\u958b\uff08\u800c\u975e <code>adk deploy api_server</code>\uff09\uff0c\u53ef\u4ee5\u9078\u64c7\u9019\u500b\u65b9\u6cd5\u3002\u9019\u4ee3\u8868\u4f60\u53ef\u4ee5\u66f4\u7cbe\u7d30\u5730\u63a7\u5236\u8981\u900f\u904e <code>uvicorn</code> \u5c0d\u5916\u516c\u958b\u54ea\u4e9b\u529f\u80fd\uff0c\u7279\u5225\u662f\u5728\u5c07 agent \u90e8\u7f72\u5230\u6b63\u5f0f\u74b0\u5883\u6642\u3002\u6b64\u5916\uff0c<code>to_a2a()</code> \u51fd\u5f0f\u6703\u6839\u64da\u4f60\u7684 agent \u7a0b\u5f0f\u78bc\u81ea\u52d5\u7522\u751f agent card\u3002</li> <li>\u81ea\u884c\u5efa\u7acb agent card\uff08<code>agent.json</code>\uff09\u4e26\u4f7f\u7528 <code>adk api_server --a2a</code> \u4f86\u8a17\u7ba1\uff1a\u9019\u7a2e\u65b9\u5f0f\u6709\u5169\u5927\u512a\u9ede\u3002\u9996\u5148\uff0c<code>adk api_server --a2a</code> \u53ef\u8207 <code>adk web</code> \u642d\u914d\u904b\u4f5c\uff0c\u4f7f\u4f60\u80fd\u66f4\u8f15\u9b06\u5730\u4f7f\u7528\u3001\u9664\u932f\u8207\u6e2c\u8a66 agent\u3002\u5176\u6b21\uff0c\u900f\u904e <code>adk api_server</code>\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u500b\u7236\u8cc7\u6599\u593e\uff0c\u88e1\u9762\u5305\u542b\u591a\u500b\u7368\u7acb\u7684 agent\u3002\u53ea\u8981\u9019\u4e9b agent \u6709 agent card\uff08<code>agent.json</code>\uff09\uff0c\u5176\u4ed6 agent \u5c31\u80fd\u900f\u904e\u540c\u4e00\u500b\u4f3a\u670d\u5668\u81ea\u52d5\u4ee5 A2A \u65b9\u5f0f\u5b58\u53d6\u3002\u4e0d\u904e\uff0c\u4f60\u9700\u8981\u81ea\u884c\u5efa\u7acb agent card\u3002\u95dc\u65bc\u5982\u4f55\u5efa\u7acb agent card\uff0c\u53ef\u4ee5\u53c3\u8003 A2A Python \u6559\u5b78\u3002</li> </ul> <p>\u672c\u5feb\u901f\u958b\u59cb\u5c07\u8457\u91cd\u65bc <code>to_a2a()</code>\uff0c\u56e0\u70ba\u9019\u662f\u6700\u7c21\u55ae\u7684 agent \u5c0d\u5916\u516c\u958b\u65b9\u5f0f\uff0c\u4e14\u6703\u5728\u80cc\u666f\u81ea\u52d5\u7522\u751f agent card\u3002\u5982\u679c\u4f60\u60f3\u63a1\u7528 <code>adk api_server</code> \u65b9\u5f0f\uff0c\u53ef\u4ee5\u53c3\u8003 A2A \u5feb\u901f\u958b\u59cb\uff08\u6d88\u8cbb\u7aef\uff09\u6587\u4ef6\u3002</p> <pre><code>Before:\n                                                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                                \u2502 Hello World Agent  \u2502\n                                                \u2502  (Python Object)   \u2502\n                                                | without agent card \u2502\n                                                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n                                                          \u2502\n                                                          \u2502 to_a2a()\n                                                          \u25bc\n\nAfter:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Root Agent   \u2502       A2A Protocol          \u2502 A2A-Exposed Hello World Agent \u2502\n\u2502(RemoteA2aAgent)\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502      (localhost: 8001)         \u2502\n\u2502(localhost:8000)\u2502                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u672c\u7bc4\u4f8b\u5305\u542b\uff1a</p> <ul> <li>Remote Hello World Agent\uff08<code>remote_a2a/hello_world/agent.py</code>\uff09\uff1a\u9019\u662f\u4f60\u5e0c\u671b\u900f\u904e A2A \u5c0d\u5916\u516c\u958b\uff0c\u8b93\u5176\u4ed6 agent \u53ef\u4ee5\u4f7f\u7528\u7684 agent\u3002\u5b83\u662f\u4e00\u500b\u8ca0\u8cac\u64f2\u9ab0\u5b50\u8207\u8cea\u6578\u6aa2\u67e5\u7684 agent\u3002\u900f\u904e <code>to_a2a()</code> \u51fd\u5f0f\u9032\u884c\u516c\u958b\uff0c\u4e26\u4ee5 <code>uvicorn</code> \u4f86\u670d\u52d9\u3002</li> <li>Root Agent\uff08<code>agent.py</code>\uff09\uff1a\u9019\u662f\u4e00\u500b\u7c21\u55ae\u7684 agent\uff0c\u50c5\u7528\u4f86\u547c\u53eb\u9060\u7aef\u7684 Hello World agent\u3002</li> </ul>"},{"location":"a2a/quickstart-exposing/#to_a2aroot_agent-agent","title":"\u4f7f\u7528 <code>to_a2a(root_agent)</code> \u51fd\u5f0f\u516c\u958b\u9060\u7aef agent","text":"<p>\u4f60\u53ef\u4ee5\u5c07\u65e2\u6709\u3001\u4f7f\u7528 Agent Development Kit (ADK) \u5efa\u7acb\u7684 agent\uff0c\u900f\u904e\u7c21\u55ae\u5730\u7528 <code>to_a2a()</code> \u51fd\u5f0f\u5305\u88dd\uff0c\u4f7f\u5176\u652f\u63f4 A2A\u3002\u4f8b\u5982\uff0c\u5047\u8a2d\u4f60\u6709\u4e00\u500b\u5982\u4e0b\u6240\u793a\u3001\u5b9a\u7fa9\u5728 <code>root_agent</code> \u7684 agent\uff1a</p> <pre><code># Your agent code here\nroot_agent = Agent(\n    model='gemini-2.0-flash',\n    name='hello_world_agent',\n\n    &lt;...your agent code...&gt;\n)\n</code></pre> <p>\u7136\u5f8c\uff0c\u4f60\u53ea\u9700\u8981\u4f7f\u7528 <code>to_a2a(root_agent)</code>\uff0c\u5373\u53ef\u8b93\u5b83\u76f8\u5bb9\u65bc A2A\uff1a</p> <pre><code>from google.adk.a2a.utils.agent_to_a2a import to_a2a\n\n# Make your agent A2A-compatible\na2a_app = to_a2a(root_agent, port=8001)\n</code></pre> <p><code>to_a2a()</code> \u51fd\u5f0f\u751a\u81f3\u6703\u5728\u5e55\u5f8c\u81ea\u52d5\u65bc\u8a18\u61b6\u9ad4\u4e2d\u7522\u751f\u4e00\u5f35 agent \u5361\u7247\uff0c\u65b9\u6cd5\u662f\u5f9e Agent Development Kit (ADK) agent \u4e2d\u64f7\u53d6\u6280\u80fd\u3001\u80fd\u529b\u8207\u4e2d\u7e7c\u8cc7\u6599\uff0c\u56e0\u6b64\u7576\u4f7f\u7528 <code>uvicorn</code> \u63d0\u4f9b agent \u7aef\u9ede\u6642\uff0c\u6703\u81ea\u52d5\u63d0\u4f9b well-known agent \u5361\u7247\u3002</p> <p>\u73fe\u5728\u8b93\u6211\u5011\u6df1\u5165\u4e86\u89e3\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u3002</p>"},{"location":"a2a/quickstart-exposing/#getting-the-sample-code","title":"1. \u53d6\u5f97\u7bc4\u4f8b\u7a0b\u5f0f\u78bc","text":"<p>\u9996\u5148\uff0c\u8acb\u78ba\u4fdd\u4f60\u5df2\u5b89\u88dd\u5fc5\u8981\u7684\u76f8\u4f9d\u5957\u4ef6\uff1a</p> <pre><code>pip install google-adk[a2a]\n</code></pre> <p>\u4f60\u53ef\u4ee5\u5728\u9019\u88e1\u8907\u88fd\uff08clone\uff09\u4e26\u524d\u5f80 a2a_root \u7bc4\u4f8b\uff1a</p> <pre><code>git clone https://github.com/google/adk-python.git\n</code></pre> <p>\u5982\u4f60\u6240\u898b\uff0c\u8cc7\u6599\u593e\u7d50\u69cb\u5982\u4e0b\uff1a</p> <pre><code>a2a_root/\n\u251c\u2500\u2500 remote_a2a/\n\u2502   \u2514\u2500\u2500 hello_world/    \n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 agent.py    # Remote Hello World Agent\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 agent.py            # Root agent\n</code></pre>"},{"location":"a2a/quickstart-exposing/#root-agent-a2a_rootagentpy","title":"Root Agent (<code>a2a_root/agent.py</code>)","text":"<ul> <li><code>root_agent</code>\uff1a\u4e00\u500b<code>RemoteA2aAgent</code>\uff0c\u7528\u65bc\u9023\u63a5\u5230\u9060\u7aef\u7684 A2A \u670d\u52d9</li> <li>Agent Card URL\uff1a\u6307\u5411\u9060\u7aef\u4f3a\u670d\u5668\u4e0a\u7684 well-known agent card endpoint</li> </ul>"},{"location":"a2a/quickstart-exposing/#hello-world-agent-a2a_rootremote_a2ahello_worldagentpy","title":"\u9060\u7aef Hello World Agent (<code>a2a_root/remote_a2a/hello_world/agent.py</code>)","text":"<ul> <li><code>roll_die(sides: int)</code>\uff1a\u5177\u5099\u72c0\u614b\u7ba1\u7406\u7684\u64f2\u9ab0\u5b50\u5de5\u5177\u51fd\u5f0f</li> <li><code>check_prime(nums: list[int])</code>\uff1a\u7528\u65bc\u8cea\u6578\u5224\u65b7\u7684 async \u51fd\u5f0f</li> <li><code>root_agent</code>\uff1a\u5177\u5099\u5b8c\u6574\u6307\u4ee4\u7684\u4e3b\u8981 agent</li> <li><code>a2a_app</code>\uff1a\u4f7f\u7528<code>to_a2a()</code>\u5de5\u5177\u5efa\u7acb\u7684 A2A \u61c9\u7528\u7a0b\u5f0f</li> </ul>"},{"location":"a2a/quickstart-exposing/#start-the-remote-a2a-agent-server","title":"2. \u555f\u52d5\u9060\u7aef A2A Agent \u4f3a\u670d\u5668","text":"<p>\u60a8\u73fe\u5728\u53ef\u4ee5\u555f\u52d5\u9060\u7aef agent \u4f3a\u670d\u5668\uff0c\u8a72\u4f3a\u670d\u5668\u5c07\u5728 hello_world agent \u4e2d\u8a17\u7ba1<code>a2a_app</code>\uff1a</p> <pre><code># Ensure current working directory is adk-python/\n# Start the remote agent using uvicorn\nuvicorn contributing.samples.a2a_root.remote_a2a.hello_world.agent:a2a_app --host localhost --port 8001\n</code></pre> \u70ba\u4ec0\u9ebc\u4f7f\u7528 8001 \u57e0\u865f\uff1f <p>\u5728\u672c\u5feb\u901f\u958b\u59cb\u4e2d\uff0c\u7576\u4f60\u5728\u672c\u6a5f\u6e2c\u8a66\u6642\uff0c\u4f60\u7684 agent \u6703\u4f7f\u7528 localhost\uff0c\u56e0\u6b64\u7528\u65bc exposed agent\uff08\u9060\u7aef\u3001prime agent\uff09\u7684 A2A \u4f3a\u670d\u5668\u7684 <code>port</code> \u5fc5\u9808\u8207 consuming agent \u7684\u57e0\u865f\u4e0d\u540c\u3002\u4f60\u5c07\u8207 consuming agent \u4e92\u52d5\u7684 <code>adk web</code> \u9810\u8a2d\u57e0\u865f\u70ba <code>8000</code>\uff0c\u9019\u4e5f\u662f\u70ba\u4ec0\u9ebc A2A \u4f3a\u670d\u5668\u6703\u4f7f\u7528\u53e6\u4e00\u500b\u7368\u7acb\u7684\u57e0\u865f <code>8001</code> \u4f86\u5efa\u7acb\u3002</p> <p>\u57f7\u884c\u5f8c\uff0c\u4f60\u61c9\u8a72\u6703\u770b\u5230\u985e\u4f3c\u4ee5\u4e0b\u7684\u5167\u5bb9\uff1a</p> <pre><code>INFO:     Started server process [10615]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://localhost:8001 (Press CTRL+C to quit)\n</code></pre>"},{"location":"a2a/quickstart-exposing/#check-that-your-remote-agent-is-running","title":"3. \u6aa2\u67e5\u4f60\u7684\u9060\u7aef agent \u662f\u5426\u6b63\u5728\u904b\u884c","text":"<p>\u4f60\u53ef\u4ee5\u900f\u904e\u9020\u8a2a\u5728 <code>a2a_root/remote_a2a/hello_world/agent.py</code> \u4e2d\uff0c\u4f5c\u70ba <code>to_a2a()</code> \u51fd\u5f0f\u7684\u4e00\u90e8\u5206\u81ea\u52d5\u7522\u751f\u7684 agent \u5361\u7247\uff0c\u4f86\u78ba\u8a8d\u4f60\u7684 agent \u662f\u5426\u5df2\u7d93\u555f\u52d5\u4e26\u904b\u884c\uff1a</p> <p>http://localhost:8001/.well-known/agent-card.json</p> <p>\u4f60\u61c9\u8a72\u6703\u770b\u5230 agent \u5361\u7247\u7684\u5167\u5bb9\uff0c\u756b\u9762\u61c9\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>{\"capabilities\":{},\"defaultInputModes\":[\"text/plain\"],\"defaultOutputModes\":[\"text/plain\"],\"description\":\"hello world agent that can roll a dice of 8 sides and check prime numbers.\",\"name\":\"hello_world_agent\",\"protocolVersion\":\"0.2.6\",\"skills\":[{\"description\":\"hello world agent that can roll a dice of 8 sides and check prime numbers. \\n      I roll dice and answer questions about the outcome of the dice rolls.\\n      I can roll dice of different sizes.\\n      I can use multiple tools in parallel by calling functions in parallel(in one request and in one round).\\n      It is ok to discuss previous dice roles, and comment on the dice rolls.\\n      When I are asked to roll a die, I must call the roll_die tool with the number of sides. Be sure to pass in an integer. Do not pass in a string.\\n      I should never roll a die on my own.\\n      When checking prime numbers, call the check_prime tool with a list of integers. Be sure to pass in a list of integers. I should never pass in a string.\\n      I should not check prime numbers before calling the tool.\\n      When I are asked to roll a die and check prime numbers, I should always make the following two function calls:\\n      1. I should first call the roll_die tool to get a roll. Wait for the function response before calling the check_prime tool.\\n      2. After I get the function response from roll_die tool, I should call the check_prime tool with the roll_die result.\\n        2.1 If user asks I to check primes based on previous rolls, make sure I include the previous rolls in the list.\\n      3. When I respond, I must include the roll_die result from step 1.\\n      I should always perform the previous 3 steps when asking for a roll and checking prime numbers.\\n      I should not rely on the previous history on prime results.\\n    \",\"id\":\"hello_world_agent\",\"name\":\"model\",\"tags\":[\"llm\"]},{\"description\":\"Roll a die and return the rolled result.\\n\\nArgs:\\n  sides: The integer number of sides the die has.\\n  tool_context: the tool context\\nReturns:\\n  An integer of the result of rolling the die.\",\"id\":\"hello_world_agent-roll_die\",\"name\":\"roll_die\",\"tags\":[\"llm\",\"tools\"]},{\"description\":\"Check if a given list of numbers are prime.\\n\\nArgs:\\n  nums: The list of numbers to check.\\n\\nReturns:\\n  A str indicating which number is prime.\",\"id\":\"hello_world_agent-check_prime\",\"name\":\"check_prime\",\"tags\":[\"llm\",\"tools\"]}],\"supportsAuthenticatedExtendedCard\":false,\"url\":\"http://localhost:8001\",\"version\":\"0.0.1\"}\n</code></pre>"},{"location":"a2a/quickstart-exposing/#run-the-main-consuming-agent","title":"4. \u57f7\u884c\u4e3b\uff08\u6d88\u8cbb\u7aef\uff09agent","text":"<p>\u73fe\u5728\u4f60\u7684\u9060\u7aef agent \u5df2\u7d93\u5728\u904b\u884c\uff0c\u4f60\u53ef\u4ee5\u555f\u52d5\u958b\u767c UI\uff0c\u4e26\u9078\u64c7 \"a2a_root\" \u4f5c\u70ba\u4f60\u7684 agent\u3002</p> <pre><code># In a separate terminal, run the adk web server\nadk web contributing/samples/\n</code></pre> <p>\u8981\u958b\u555f adk web \u4f3a\u670d\u5668\uff0c\u8acb\u524d\u5f80\uff1ahttp://localhost:8000\u3002</p>"},{"location":"a2a/quickstart-exposing/#_2","title":"\u7bc4\u4f8b\u4e92\u52d5","text":"<p>\u7576\u5169\u500b\u670d\u52d9\u90fd\u5728\u57f7\u884c\u6642\uff0c\u4f60\u53ef\u4ee5\u8207 root agent \u4e92\u52d5\uff0c\u89c0\u5bdf\u5b83\u5982\u4f55\u900f\u904e A2A \u547c\u53eb\u9060\u7aef agent\uff1a</p> <p>\u7c21\u55ae\u64f2\u9ab0\u5b50\uff1a \u9019\u500b\u4e92\u52d5\u6703\u4f7f\u7528\u672c\u6a5f agent\uff0c\u4e5f\u5c31\u662f Roll Agent\uff1a</p> <pre><code>User: Roll a 6-sided die\nBot: I rolled a 4 for you.\n</code></pre> <p>\u8cea\u6578\u6aa2\u67e5\uff1a</p> <p>\u6b64\u4e92\u52d5\u6703\u900f\u904e A2A \u4f7f\u7528\u9060\u7aef agent\u2014\u2014Prime Agent\uff1a</p> <pre><code>User: Is 7 a prime number?\nBot: Yes, 7 is a prime number.\n</code></pre> <p>\u7d9c\u5408\u64cd\u4f5c\uff1a</p> <p>\u6b64\u4e92\u52d5\u540c\u6642\u4f7f\u7528\u672c\u6a5f Roll Agent \u8207\u9060\u7aef Prime Agent\uff1a</p> <pre><code>User: Roll a 10-sided die and check if it's prime\nBot: I rolled an 8 for you.\nBot: 8 is not a prime number.\n</code></pre>"},{"location":"a2a/quickstart-exposing/#_3","title":"\u4e0b\u4e00\u6b65","text":"<p>\u73fe\u5728\u4f60\u5df2\u7d93\u5efa\u7acb\u4e86\u4e00\u500b\u900f\u904e A2A \u4f3a\u670d\u5668\u516c\u958b\u9060\u7aef agent \u7684 agent\uff0c\u4e0b\u4e00\u6b65\u662f\u5b78\u7fd2\u5982\u4f55\u5f9e\u53e6\u4e00\u500b agent \u4f86\u5b58\u53d6\u5b83\u3002</p> <ul> <li>A2A \u5feb\u901f\u958b\u59cb\uff08\u6d88\u8cbb\u7aef\uff09\uff1a\u4e86\u89e3\u4f60\u7684 agent \u5982\u4f55\u4f7f\u7528 A2A Protocol \u4f86\u5b58\u53d6\u5176\u4ed6 agent\u3002</li> </ul>"},{"location":"agents/","title":"Agents","text":"<p>\u5728 Agent Development Kit (ADK) \u4e2d\uff0cAgent\uff08\u4ee3\u7406\uff09\u662f\u4e00\u500b\u81ea\u5305\u542b\u7684\u57f7\u884c\u55ae\u5143\uff0c\u8a2d\u8a08\u7528\u65bc\u81ea\u4e3b\u884c\u52d5\u4ee5\u9054\u6210\u7279\u5b9a\u76ee\u6a19\u3002Agent \u53ef\u4ee5\u57f7\u884c\u4efb\u52d9\u3001\u8207\u4f7f\u7528\u8005\u4e92\u52d5\u3001\u904b\u7528\u5916\u90e8\u5de5\u5177\uff0c\u4e26\u8207\u5176\u4ed6 agent \u5354\u4f5c\u3002</p> <p>\u6240\u6709 ADK \u4e2d agent \u7684\u57fa\u790e\u662f <code>BaseAgent</code> \u985e\u5225\u3002\u5b83\u4f5c\u70ba\u6700\u57fa\u672c\u7684\u85cd\u5716\u3002\u8981\u5efa\u7acb\u53ef\u904b\u4f5c\u7684 agent\uff0c\u901a\u5e38\u6703\u4ee5\u4e09\u7a2e\u4e3b\u8981\u65b9\u5f0f\u4e4b\u4e00\u64f4\u5145 <code>BaseAgent</code>\uff0c\u4ee5\u6eff\u8db3\u4e0d\u540c\u9700\u6c42\u2014\u2014\u5f9e\u667a\u6167\u63a8\u7406\u5230\u7d50\u69cb\u5316\u6d41\u7a0b\u63a7\u5236\u3002</p> <p></p>"},{"location":"agents/#agent","title":"\u6838\u5fc3 Agent \u5206\u985e","text":"<p>ADK \u63d0\u4f9b\u591a\u7a2e\u660e\u78ba\u7684 agent \u5206\u985e\uff0c\u5354\u52a9\u4f60\u6253\u9020\u8907\u96dc\u7684\u61c9\u7528\uff1a</p> <ol> <li> <p>LLM Agents\uff08<code>LlmAgent</code>\u3001<code>Agent</code>\uff09\uff1a\u9019\u4e9b agent \u4ee5\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u4f5c\u70ba\u6838\u5fc3\u5f15\u64ce\uff0c\u80fd\u7406\u89e3\u81ea\u7136\u8a9e\u8a00\u3001\u63a8\u7406\u3001\u898f\u5283\u3001\u751f\u6210\u56de\u61c9\uff0c\u4e26\u52d5\u614b\u6c7a\u5b9a\u5f8c\u7e8c\u6b65\u9a5f\u6216\u9078\u64c7\u4f7f\u7528\u54ea\u4e9b\u5de5\u5177\uff0c\u975e\u5e38\u9069\u5408\u5f48\u6027\u4e14\u4ee5\u8a9e\u8a00\u70ba\u4e2d\u5fc3\u7684\u4efb\u52d9\u3002\u6df1\u5165\u4e86\u89e3 LLM Agents...</p> </li> <li> <p>Workflow Agents\uff08<code>SequentialAgent</code>\u3001<code>ParallelAgent</code>\u3001<code>LoopAgent</code>\uff09\uff1a\u9019\u985e\u5c08\u7528 agent \u4ee5\u9810\u5148\u5b9a\u7fa9\u3001\u53ef\u9810\u6e2c\u7684\u6a21\u5f0f\uff08\u5e8f\u5217\u3001\u5e73\u884c\u6216\u8ff4\u5708\uff09\u4f86\u63a7\u5236\u5176\u4ed6 agent \u7684\u57f7\u884c\u6d41\u7a0b\uff0c\u672c\u8eab\u4e0d\u4f7f\u7528 LLM \u9032\u884c\u6d41\u7a0b\u63a7\u5236\uff0c\u7279\u5225\u9069\u7528\u65bc\u9700\u8981\u53ef\u9810\u671f\u57f7\u884c\u7684\u7d50\u69cb\u5316\u6d41\u7a0b\u3002\u63a2\u7d22 Workflow Agents...</p> </li> <li> <p>Custom Agents\uff1a\u76f4\u63a5\u7e7c\u627f <code>BaseAgent</code> \u6240\u5efa\u7acb\u7684 agent\uff0c\u8b93\u4f60\u80fd\u5be6\u4f5c\u7368\u7279\u7684\u64cd\u4f5c\u908f\u8f2f\u3001\u7279\u5b9a\u63a7\u5236\u6d41\u7a0b\uff0c\u6216\u9032\u884c\u6a19\u6e96\u985e\u578b\u672a\u6db5\u84cb\u7684\u7279\u6b8a\u6574\u5408\uff0c\u6eff\u8db3\u9ad8\u5ea6\u5ba2\u88fd\u5316\u7684\u61c9\u7528\u9700\u6c42\u3002\u4e86\u89e3\u5982\u4f55\u6253\u9020 Custom Agents...</p> </li> </ol>"},{"location":"agents/#agent_1","title":"\u5982\u4f55\u9078\u64c7\u5408\u9069\u7684 Agent \u985e\u578b","text":"<p>\u4e0b\u8868\u63d0\u4f9b\u4e86\u9ad8\u5c64\u6b21\u7684\u6bd4\u8f03\uff0c\u5354\u52a9\u4f60\u5340\u5206\u5404\u7a2e agent \u985e\u578b\u3002\u96a8\u8457\u4f60\u5728\u5f8c\u7e8c\u7ae0\u7bc0\u6df1\u5165\u63a2\u7d22\u6bcf\u7a2e\u985e\u578b\uff0c\u9019\u4e9b\u5dee\u7570\u6703\u66f4\u52a0\u660e\u78ba\u3002</p> \u529f\u80fd LLM Agent (<code>LlmAgent</code>) Workflow Agent Custom Agent (<code>BaseAgent</code> \u5b50\u985e\u5225) \u4e3b\u8981\u529f\u80fd \u63a8\u7406\u3001\u751f\u6210\u3001\u5de5\u5177\u904b\u7528 \u63a7\u5236 agent \u57f7\u884c\u6d41\u7a0b \u5be6\u4f5c\u7368\u7279\u908f\u8f2f\uff0f\u6574\u5408 \u6838\u5fc3\u5f15\u64ce \u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u9810\u8a2d\u908f\u8f2f\uff08\u5e8f\u5217\u3001\u5e73\u884c\u3001\u8ff4\u5708\uff09 \u81ea\u8a02\u7a0b\u5f0f\u78bc \u6c7a\u5b9a\u6027 \u975e\u6c7a\u5b9a\u6027\uff08\u5f48\u6027\uff09 \u6c7a\u5b9a\u6027\uff08\u53ef\u9810\u6e2c\uff09 \u4f9d\u5be6\u4f5c\u800c\u5b9a\uff0c\u7686\u53ef \u4e3b\u8981\u7528\u9014 \u8a9e\u8a00\u4efb\u52d9\u3001\u52d5\u614b\u6c7a\u7b56 \u7d50\u69cb\u5316\u6d41\u7a0b\u3001\u5354\u8abf\u57f7\u884c \u5ba2\u88fd\u5316\u9700\u6c42\u3001\u7279\u5b9a\u5de5\u4f5c\u6d41\u7a0b"},{"location":"agents/#agents-agent","title":"Agents \u5354\u4f5c\uff1a\u591a Agent \u7cfb\u7d71","text":"<p>\u96d6\u7136\u6bcf\u7a2e agent \u985e\u578b\u5404\u6709\u5176\u7528\u9014\uff0c\u771f\u6b63\u7684\u5f37\u5927\u4e4b\u8655\u5f80\u5f80\u4f86\u81ea\u65bc\u5b83\u5011\u7684\u7d44\u5408\u3002\u8907\u96dc\u7684\u61c9\u7528\u7d93\u5e38\u63a1\u7528\u591a agent \u67b6\u69cb\uff0c\u5176\u4e2d\uff1a</p> <ul> <li>LLM Agents \u8ca0\u8cac\u667a\u6167\u3001\u8a9e\u8a00\u76f8\u95dc\u7684\u4efb\u52d9\u57f7\u884c\u3002</li> <li>Workflow Agents \u4ee5\u6a19\u6e96\u6a21\u5f0f\u7ba1\u7406\u6574\u9ad4\u6d41\u7a0b\u3002</li> <li>Custom Agents \u63d0\u4f9b\u7279\u6b8a\u80fd\u529b\u6216\u898f\u5247\uff0c\u6eff\u8db3\u7368\u7279\u6574\u5408\u9700\u6c42\u3002</li> </ul> <p>\u7406\u89e3\u9019\u4e9b\u6838\u5fc3\u985e\u578b\uff0c\u662f\u4f60\u4f7f\u7528 ADK \u6253\u9020\u9ad8\u968e\u3001\u5f37\u5927 AI \u61c9\u7528\u7684\u7b2c\u4e00\u6b65\u3002</p>"},{"location":"agents/#_1","title":"\u4e0b\u4e00\u6b65\uff1f","text":"<p>\u73fe\u5728\u4f60\u5df2\u7d93\u4e86\u89e3 ADK \u63d0\u4f9b\u7684\u5404\u7a2e agent \u985e\u578b\uff0c\u63a5\u4e0b\u4f86\u53ef\u4ee5\u6df1\u5165\u5b78\u7fd2\u5b83\u5011\u7684\u904b\u4f5c\u65b9\u5f0f\u53ca\u6709\u6548\u4f7f\u7528\u65b9\u6cd5\uff1a</p> <ul> <li>LLM Agents\uff1a \u63a2\u7d22\u5982\u4f55\u8a2d\u5b9a\u4ee5\u5927\u578b\u8a9e\u8a00\u6a21\u578b\u70ba\u6838\u5fc3\u7684 agent\uff0c\u5305\u62ec\u6307\u4ee4\u8a2d\u7f6e\u3001\u5de5\u5177\u63d0\u4f9b\uff0c\u4ee5\u53ca\u555f\u7528\u9032\u968e\u529f\u80fd\u5982\u898f\u5283\u8207\u7a0b\u5f0f\u78bc\u57f7\u884c\u3002</li> <li>Workflow Agents\uff1a \u5b78\u7fd2\u5982\u4f55\u5229\u7528 <code>SequentialAgent</code>\u3001<code>ParallelAgent</code> \u548c <code>LoopAgent</code> \u4f86\u5354\u8abf\u7d50\u69cb\u5316\u4e14\u53ef\u9810\u6e2c\u7684\u6d41\u7a0b\u3002</li> <li>Custom Agents\uff1a \u4e86\u89e3\u5982\u4f55\u64f4\u5145 <code>BaseAgent</code>\uff0c\u6253\u9020\u5177\u5099\u7368\u7279\u908f\u8f2f\u8207\u6574\u5408\u80fd\u529b\u7684 agent\uff0c\u6eff\u8db3\u4f60\u7684\u5c08\u5c6c\u9700\u6c42\u3002</li> <li>Multi-Agents\uff1a \u7406\u89e3\u5982\u4f55\u7d44\u5408\u4e0d\u540c agent \u985e\u578b\uff0c\u5efa\u7acb\u80fd\u5354\u540c\u89e3\u6c7a\u8907\u96dc\u554f\u984c\u7684\u9ad8\u968e\u7cfb\u7d71\u3002</li> <li>Models\uff1a \u8a8d\u8b58\u5404\u7a2e LLM \u6574\u5408\u65b9\u5f0f\uff0c\u4e26\u5b78\u6703\u5982\u4f55\u70ba\u4f60\u7684 agent \u9078\u64c7\u5408\u9069\u7684\u6a21\u578b\u3002</li> </ul>"},{"location":"agents/config.en/","title":"Build agents with Agent Config","text":"<p>The ADK Agent Config feature lets you build an ADK workflow without writing code. An Agent Config uses a YAML format text file with a brief description of the agent, allowing just about anyone to assemble and run an ADK agent. The following is a simple example of an basic Agent Config definition:</p> <pre><code>name: assistant_agent\nmodel: gemini-2.5-flash\ndescription: A helper agent that can answer users' questions.\ninstruction: You are an agent to help answer users' various questions.\n</code></pre> <p>You can use Agent Config files to build more complex agents which can incorporate Functions, Tools, Sub-Agents, and more. This page describes how to build and run ADK workflows with the Agent Config feature. For detailed information on the syntax and settings supported by the Agent Config format, see the Agent Config syntax reference.</p> <p>Experimental</p> <p>The Agent Config feature is experimental and has some known limitations. We welcome your feedback!</p>"},{"location":"agents/config.en/#get-started","title":"Get started","text":"<p>This section describes how to set up and start building agents with the ADK and the Agent Config feature, including installation setup, building an agent, and running your agent.</p>"},{"location":"agents/config.en/#setup","title":"Setup","text":"<p>You need to install the Google Agent Development Kit libraries, and provide an access key for a generative AI model such as Gemini API. This section provides details on what you must install and configure before you can run agents with the Agent Config files.</p> <p>Note</p> <p>The Agent Config feature currently only supports Gemini models. For more information about additional; functional restrictions, see Known limitations.</p> <p>To setup ADK for use with Agent Config:</p> <ol> <li>Install the ADK Python libraries by following the     Installation     instructions. Python is currently required. For more information, see the     Known limitations.</li> <li> <p>Verify that ADK is installed by running the following command in your     terminal:</p> <pre><code>adk --version\n</code></pre> <p>This command should show the ADK version you have installed.</p> </li> </ol> <p>Tip</p> <p>If the <code>adk</code> command fails to run and the version is not listed in step 2, make sure your Python environment is active. Execute <code>source .venv/bin/activate</code> in your terminal on Mac and Linux. For other platform commands, see the Installation page.</p>"},{"location":"agents/config.en/#build-an-agent","title":"Build an agent","text":"<p>You build an agent with Agent Config using the <code>adk create</code> command to create the project files for an agent, and then editing the <code>root_agent.yaml</code> file it generates for you.</p> <p>To create an ADK project for use with Agent Config:</p> <ol> <li> <p>In your terminal window, run the following command to create a     config-based agent:</p> <pre><code>adk create --type=config my_agent\n</code></pre> <p>This command generates a <code>my_agent/</code> folder, containing a <code>root_agent.yaml</code> file and an <code>.env</code> file.</p> </li> <li> <p>In the <code>my_agent/.env</code> file, set environment variables for your agent to     access generative AI models and other services:</p> <ol> <li> <p>For Gemini model access through Google API, add a line to the     file with your API key:</p> <pre><code>GOOGLE_GENAI_USE_VERTEXAI=0\nGOOGLE_API_KEY=&lt;your-Google-Gemini-API-key&gt;\n</code></pre> <p>You can get an API key from the Google AI Studio  API Keys page.</p> </li> <li> <p>For Gemini model access through Google Cloud, add these lines to the file:</p> <pre><code>GOOGLE_GENAI_USE_VERTEXAI=1\nGOOGLE_CLOUD_PROJECT=&lt;your_gcp_project&gt;\nGOOGLE_CLOUD_LOCATION=us-central1\n</code></pre> <p>For information on creating a Cloud Project, see the Google Cloud docs for Creating and managing projects.</p> </li> </ol> </li> <li> <p>Using text editor, edit the Agent Config file     <code>my_agent/root_agent.yaml</code>, as shown below:</p> </li> </ol> <pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/google/adk-python/refs/heads/main/src/google/adk/agents/config_schemas/AgentConfig.json\nname: assistant_agent\nmodel: gemini-2.5-flash\ndescription: A helper agent that can answer users' questions.\ninstruction: You are an agent to help answer users' various questions.\n</code></pre> <p>You can discover more configuration options for your <code>root_agent.yaml</code> agent configuration file by referring to the ADK samples repository or the Agent Config syntax reference.</p>"},{"location":"agents/config.en/#run-the-agent","title":"Run the agent","text":"<p>Once you have completed editing your Agent Config, you can run your agent using the web interface, command line terminal execution, or API server mode.</p> <p>To run your Agent Config-defined agent:</p> <ol> <li>In your terminal, navigate to the <code>my_agent/</code> directory containing the      <code>root_agent.yaml</code> file.</li> <li>Type one of the following commands to run your agent:<ul> <li><code>adk web</code> - Run web UI interface for your agent.</li> <li><code>adk run</code> - Run your agent in the terminal without a user     interface.</li> <li><code>adk api_server</code> - Run your agent as a service that can be     used by other applications.</li> </ul> </li> </ol> <p>For more information on the ways to run your agent, see the Run Your Agent topic in the Quickstart. For more information about the ADK command line options, see the  ADK CLI reference.</p>"},{"location":"agents/config.en/#example-configs","title":"Example configs","text":"<p>This section shows examples of Agent Config files to get you started building agents. For additional and more complete examples, see the ADK samples repository.</p>"},{"location":"agents/config.en/#built-in-tool-example","title":"Built-in tool example","text":"<p>The following example uses a built-in ADK tool function for using google search to provide functionality to the agent. This agent automatically uses the search tool to reply to user requests.</p> <pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/google/adk-python/refs/heads/main/src/google/adk/agents/config_schemas/AgentConfig.json\nname: search_agent\nmodel: gemini-2.0-flash\ndescription: 'an agent whose job it is to perform Google search queries and answer questions about the results.'\ninstruction: You are an agent whose job is to perform Google search queries and answer questions about the results.\ntools:\n  - name: google_search\n</code></pre> <p>For more details, see the full code for this sample in the ADK sample repository.</p>"},{"location":"agents/config.en/#custom-tool-example","title":"Custom tool example","text":"<p>The following example uses a custom tool built with Python code and listed in the <code>tools:</code> section of the config file. The agent uses this tool to check if a list of numbers provided by the user are prime numbers.</p> <pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/google/adk-python/refs/heads/main/src/google/adk/agents/config_schemas/AgentConfig.json\nagent_class: LlmAgent\nmodel: gemini-2.5-flash\nname: prime_agent\ndescription: Handles checking if numbers are prime.\ninstruction: |\n  You are responsible for checking whether numbers are prime.\n  When asked to check primes, you must call the check_prime tool with a list of integers.\n  Never attempt to determine prime numbers manually.\n  Return the prime number results to the root agent.\ntools:\n  - name: ma_llm.check_prime\n</code></pre> <p>For more details, see the full code for this sample in the ADK sample repository.</p>"},{"location":"agents/config.en/#sub-agents-example","title":"Sub-agents example","text":"<p>The following example shows an agent defined with two sub-agents in the <code>sub_agents:</code> section, and an example tool in the <code>tools:</code> section of the config file. This agent determines what the user wants, and delegates to one of the sub-agents to resolve the request. The sub-agents are defined using Agent Config YAML files.</p> <pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/google/adk-python/refs/heads/main/src/google/adk/agents/config_schemas/AgentConfig.json\nagent_class: LlmAgent\nmodel: gemini-2.5-flash\nname: root_agent\ndescription: Learning assistant that provides tutoring in code and math.\ninstruction: |\n  You are a learning assistant that helps students with coding and math questions.\n\n  You delegate coding questions to the code_tutor_agent and math questions to the math_tutor_agent.\n\n  Follow these steps:\n  1. If the user asks about programming or coding, delegate to the code_tutor_agent.\n  2. If the user asks about math concepts or problems, delegate to the math_tutor_agent.\n  3. Always provide clear explanations and encourage learning.\nsub_agents:\n  - config_path: code_tutor_agent.yaml\n  - config_path: math_tutor_agent.yaml\n</code></pre> <p>For more details, see the full code for this sample in the ADK sample repository.</p>"},{"location":"agents/config.en/#deploy-agent-configs","title":"Deploy agent configs","text":"<p>You can deploy Agent Config agents with  Cloud Run and  Agent Engine,  using the same procedure as code-based agents. For more information on how  to prepare and deploy Agent Config-based agents, see the  Cloud Run and  Agent Engine deployment guides.</p>"},{"location":"agents/config.en/#known-limitations","title":"Known limitations","text":"<p>The Agent Config feature is experimental and includes the following limitations:</p> <ul> <li>Model support: Only Gemini models are currently supported.     Integration with third-party models is in progress.</li> <li>Programming language: The Agent Config feature currently supports     only Python code for tools and other functionality requiring programming code.</li> <li>ADK Tool support: The following ADK tools are supported by the Agent     Config feature, but not all tools are fully supported:<ul> <li><code>google_search</code></li> <li><code>load_artifacts</code></li> <li><code>url_context</code></li> <li><code>exit_loop</code></li> <li><code>preload_memory</code></li> <li><code>get_user_choice</code></li> <li><code>enterprise_web_search</code></li> <li><code>load_web_page</code>: Requires a fully-qualified path to access web     pages.</li> </ul> </li> <li>Agent Type Support: The <code>LangGraphAgent</code> and <code>A2aAgent</code> types are      not yet supported.<ul> <li><code>AgentTool</code></li> <li><code>LongRunningFunctionTool</code></li> <li><code>VertexAiSearchTool</code></li> <li><code>MCPToolset</code></li> <li><code>CrewaiTool</code></li> <li><code>LangchainTool</code></li> <li><code>ExampleTool</code></li> </ul> </li> </ul>"},{"location":"agents/config.en/#next-steps","title":"Next steps","text":"<p>For ideas on how and what to build with ADK Agent Configs, see the yaml-based agent definitions in the ADK adk-samples repository. For detailed information on the syntax and settings supported by  the Agent Config format, see the Agent Config syntax reference.</p>"},{"location":"agents/config/","title":"\u4f7f\u7528 Agent Config \u5efa\u7acb agent","text":"<p>Agent Development Kit (ADK) \u7684 Agent Config \u529f\u80fd\uff0c\u8b93\u4f60\u53ef\u4ee5\u5728\u4e0d\u64b0\u5beb\u7a0b\u5f0f\u78bc\u7684\u60c5\u6cc1\u4e0b\u5efa\u7acb ADK \u5de5\u4f5c\u6d41\u7a0b\u3002Agent Config \u63a1\u7528 YAML \u683c\u5f0f\u7684\u6587\u5b57\u6a94\uff0c\u4e26\u5305\u542b\u5c0d agent \u7684\u7c21\u8981\u63cf\u8ff0\uff0c\u4f7f\u5e7e\u4e4e\u4efb\u4f55\u4eba\u90fd\u80fd\u5920\u7d44\u88dd\u4e26\u57f7\u884c ADK agent\u3002\u4ee5\u4e0b\u662f\u4e00\u500b\u57fa\u672c\u7684 Agent Config \u5b9a\u7fa9\u7bc4\u4f8b\uff1a</p> <pre><code>name: assistant_agent\nmodel: gemini-2.5-flash\ndescription: A helper agent that can answer users' questions.\ninstruction: You are an agent to help answer users' various questions.\n</code></pre> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528 Agent Config \u6a94\u6848\u4f86\u5efa\u7acb\u66f4\u8907\u96dc\u7684 agent\uff0c\u9019\u4e9b agent \u53ef\u4ee5\u6574\u5408 Functions\u3001Tools\u3001Sub-Agents \u7b49\u529f\u80fd\u3002\u672c\u9801\u5c07\u8aaa\u660e\u5982\u4f55\u5229\u7528 Agent Config \u529f\u80fd\u4f86\u5efa\u69cb\u8207\u57f7\u884c Agent Development Kit (ADK) \u5de5\u4f5c\u6d41\u7a0b\u3002\u95dc\u65bc Agent Config \u683c\u5f0f\u6240\u652f\u63f4\u7684\u8a9e\u6cd5\u8207\u8a2d\u5b9a\u7684\u8a73\u7d30\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 Agent Config syntax reference\u3002</p> <p>Experimental</p> <p>Agent Config \u529f\u80fd\u76ee\u524d\u70ba\u5be6\u9a57\u6027\u529f\u80fd\uff0c\u4e14\u5b58\u5728\u4e00\u4e9b \u5df2\u77e5\u9650\u5236\u3002\u6211\u5011\u975e\u5e38\u6b61\u8fce\u60a8\u7684 \u56de\u994b\u610f\u898b\uff01</p>"},{"location":"agents/config/#_1","title":"\u5feb\u901f\u958b\u59cb","text":"<p>\u672c\u7bc0\u8aaa\u660e\u5982\u4f55\u4f7f\u7528 Agent Development Kit (ADK) \u53ca Agent Config \u529f\u80fd\u4f86\u8a2d\u5b9a\u4e26\u958b\u59cb\u5efa\u7f6e agent\uff0c\u5305\u62ec\u5b89\u88dd\u8a2d\u5b9a\u3001\u5efa\u7f6e agent\uff0c\u4ee5\u53ca\u57f7\u884c\u60a8\u7684 agent\u3002</p>"},{"location":"agents/config/#_2","title":"\u5b89\u88dd\u8a2d\u5b9a","text":"<p>\u60a8\u9700\u8981\u5b89\u88dd Google Agent Development Kit (ADK) \u51fd\u5f0f\u5eab\uff0c\u4e26\u63d0\u4f9b\u5982 Gemini API \u7b49\u751f\u6210\u5f0f AI \u6a21\u578b\u7684 access key\u3002\u672c\u7bc0\u5c07\u8a73\u7d30\u8aaa\u660e\u5728\u60a8\u80fd\u5920\u4f7f\u7528 Agent Config \u6a94\u6848\u57f7\u884c agent \u524d\uff0c\u5fc5\u9808\u5b89\u88dd\u8207\u8a2d\u5b9a\u7684\u9805\u76ee\u3002</p> <p>Note</p> <p>Agent Config \u529f\u80fd\u76ee\u524d\u50c5\u652f\u63f4 Gemini \u6a21\u578b\u3002  </p> <p>\u5982\u9700\u66f4\u591a\u6709\u95dc\u5176\u4ed6\u529f\u80fd\u9650\u5236\u7684\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 Known limitations\u3002</p> <p>\u8981\u5c07 Agent Development Kit (ADK) \u8a2d\u5b9a\u70ba\u642d\u914d Agent Config \u4f7f\u7528\uff0c\u8acb\u4f9d\u4e0b\u5217\u6b65\u9a5f\u64cd\u4f5c\uff1a</p> <ol> <li>\u4f9d\u7167 Installation \u6307\u5357\u5b89\u88dd Agent Development Kit (ADK) \u7684 Python \u51fd\u5f0f\u5eab\u3002\u76ee\u524d\u5fc5\u9808\u4f7f\u7528 Python\u3002     \u5982\u9700\u8a73\u7d30\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 Known limitations\u3002</li> <li> <p>\u5728\u7d42\u7aef\u6a5f\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\uff0c\u78ba\u8a8d\u5df2\u5b89\u88dd Agent Development Kit (ADK)\uff1a</p> <pre><code>adk --version\n</code></pre> <p>\u6b64\u6307\u4ee4\u6703\u986f\u793a\u4f60\u6240\u5b89\u88dd\u7684 ADK \u7248\u672c\u3002</p> </li> </ol> <p>Tip</p> <p>\u5982\u679c\u57f7\u884c <code>adk</code> \u6307\u4ee4\u5931\u6557\uff0c\u4e14\u5728\u6b65\u9a5f 2 \u4e2d\u672a\u5217\u51fa\u8a72\u7248\u672c\uff0c\u8acb\u78ba\u8a8d\u4f60\u7684 Python \u865b\u64ec\u74b0\u5883\u5df2\u555f\u7528\u3002\u5728 macOS \u8207 Linux \u7d42\u7aef\u6a5f\u4e2d\u57f7\u884c <code>source .venv/bin/activate</code>\u3002\u5176\u4ed6\u5e73\u53f0\u7684\u6307\u4ee4\u8acb\u53c3\u8003 Installation \u9801\u9762\u3002</p>"},{"location":"agents/config/#agent","title":"\u5efa\u7acb agent","text":"<p>\u4f60\u53ef\u4ee5\u4f7f\u7528 Agent Config \u900f\u904e <code>adk create</code> \u6307\u4ee4\u4f86\u5efa\u7acb agent \u7684\u5c08\u6848\u6a94\u6848\uff0c\u7136\u5f8c\u7de8\u8f2f\u5b83\u81ea\u52d5\u7522\u751f\u7684 <code>root_agent.yaml</code> \u6a94\u6848\u3002</p> <p>\u8981\u5efa\u7acb\u53ef\u642d\u914d Agent Config \u4f7f\u7528\u7684 Agent Development Kit (ADK) \u5c08\u6848\uff1a</p> <ol> <li> <p>\u5728\u7d42\u7aef\u6a5f\u8996\u7a97\u4e2d\uff0c\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u4ee5\u5efa\u7acb\u57fa\u65bc config \u7684 agent\uff1a</p> <pre><code>adk create --type=config my_agent\n</code></pre> <p>\u6b64\u6307\u4ee4\u6703\u7522\u751f\u4e00\u500b <code>my_agent/</code> \u8cc7\u6599\u593e\uff0c\u88e1\u9762\u5305\u542b <code>root_agent.yaml</code> \u6a94\u6848\u8207 <code>.env</code> \u6a94\u6848\u3002</p> </li> <li> <p>\u5728 <code>my_agent/.env</code> \u6a94\u6848\u4e2d\uff0c\u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578\uff0c\u8b93\u4f60\u7684 agent \u80fd\u5b58\u53d6\u751f\u6210\u5f0f AI \u6a21\u578b\u53ca\u5176\u4ed6\u670d\u52d9\uff1a</p> <ol> <li> <p>\u82e5\u8981\u900f\u904e Google API \u5b58\u53d6 Gemini \u6a21\u578b\uff0c\u8acb\u5728\u6a94\u6848\u4e2d\u52a0\u5165\u4f60\u7684 API \u91d1\u9470\uff1a</p> <pre><code>GOOGLE_GENAI_USE_VERTEXAI=0\nGOOGLE_API_KEY=&lt;your-Google-Gemini-API-key&gt;\n</code></pre> <p>\u4f60\u53ef\u4ee5\u5728 Google AI Studio \u7684 API Keys \u9801\u9762\u53d6\u5f97 API \u91d1\u9470\u3002</p> </li> <li> <p>\u82e5\u8981\u900f\u904e Google Cloud \u5b58\u53d6 Gemini \u6a21\u578b\uff0c\u8acb\u5728\u6a94\u6848\u4e2d\u52a0\u5165\u4ee5\u4e0b\u5167\u5bb9\uff1a</p> <pre><code>GOOGLE_GENAI_USE_VERTEXAI=1\nGOOGLE_CLOUD_PROJECT=&lt;your_gcp_project&gt;\nGOOGLE_CLOUD_LOCATION=us-central1\n</code></pre> <p>\u95dc\u65bc\u5982\u4f55\u5efa\u7acb Cloud Project\uff0c\u8acb\u53c3\u8003 Google Cloud \u6587\u4ef6\u7684 Creating and managing projects\u3002</p> </li> </ol> </li> <li> <p>\u4f7f\u7528\u6587\u5b57\u7de8\u8f2f\u5668\u7de8\u8f2f Agent Config \u6a94\u6848 <code>my_agent/root_agent.yaml</code>\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> </li> </ol> <pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/google/adk-python/refs/heads/main/src/google/adk/agents/config_schemas/AgentConfig.json\nname: assistant_agent\nmodel: gemini-2.5-flash\ndescription: A helper agent that can answer users' questions.\ninstruction: You are an agent to help answer users' various questions.\n</code></pre> <p>\u4f60\u53ef\u4ee5\u53c3\u8003 Agent Development Kit (ADK) \u7bc4\u4f8b\u7a0b\u5f0f\u5eab \u6216 Agent Config \u8a9e\u6cd5 \u8aaa\u660e\uff0c\u4f86\u63a2\u7d22\u66f4\u591a <code>root_agent.yaml</code> agent \u8a2d\u5b9a\u6a94\u7684\u5176\u4ed6\u8a2d\u5b9a\u9078\u9805\u3002</p>"},{"location":"agents/config/#agent_1","title":"\u57f7\u884c agent","text":"<p>\u5b8c\u6210\u7de8\u8f2f Agent Config \u5f8c\uff0c\u4f60\u53ef\u4ee5\u900f\u904e\u7db2\u9801 UI\u3001\u547d\u4ee4\u5217\u7d42\u7aef\u6a5f\u57f7\u884c\uff0c\u6216\u4ee5 API \u4f3a\u670d\u5668\u6a21\u5f0f\u4f86\u57f7\u884c\u4f60\u7684 agent\u3002</p> <p>\u8981\u57f7\u884c\u4f60\u4ee5 Agent Config \u5b9a\u7fa9\u7684 agent\uff0c\u8acb\u4f9d\u4e0b\u5217\u6b65\u9a5f\u64cd\u4f5c\uff1a</p> <ol> <li>\u5728\u7d42\u7aef\u6a5f\u4e2d\uff0c\u5207\u63db\u5230\u5305\u542b <code>root_agent.yaml</code> \u6a94\u6848\u7684 <code>my_agent/</code> \u76ee\u9304\u3002</li> <li>\u8f38\u5165\u4e0b\u5217\u5176\u4e2d\u4e00\u500b\u6307\u4ee4\u4f86\u57f7\u884c\u4f60\u7684 agent\uff1a<ul> <li><code>adk web</code> - \u555f\u52d5 agent \u7684\u7db2\u9801 UI \u4ecb\u9762\u3002</li> <li><code>adk run</code> - \u5728\u7d42\u7aef\u6a5f\u4e2d\u57f7\u884c agent\uff0c\u4e0d\u555f\u7528\u4f7f\u7528\u8005\u4ecb\u9762\u3002</li> <li><code>adk api_server</code> - \u4ee5\u670d\u52d9\u6a21\u5f0f\u57f7\u884c agent\uff0c\u4f9b\u5176\u4ed6\u61c9\u7528\u7a0b\u5f0f\u4f7f\u7528\u3002</li> </ul> </li> </ol> <p>\u5982\u9700\u66f4\u591a\u6709\u95dc\u57f7\u884c agent \u65b9\u5f0f\u7684\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 \u5feb\u901f\u958b\u59cb \u4e2d\u7684 Run Your Agent \u4e3b\u984c\u3002 \u5982\u9700\u66f4\u591a\u6709\u95dc ADK \u547d\u4ee4\u5217\u9078\u9805\u7684\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 ADK CLI \u53c3\u8003\u3002</p>"},{"location":"agents/config/#_3","title":"\u8a2d\u5b9a\u7bc4\u4f8b","text":"<p>\u672c\u7bc0\u63d0\u4f9b Agent Config \u8a2d\u5b9a\u6a94\u7684\u7bc4\u4f8b\uff0c\u5354\u52a9\u4f60\u958b\u59cb\u5efa\u7acb agent\u3002\u5982\u9700\u66f4\u591a\u5b8c\u6574\u7bc4\u4f8b\uff0c\u8acb\u53c3\u8003 ADK \u7bc4\u4f8b\u7a0b\u5f0f\u5eab\u3002</p>"},{"location":"agents/config/#_4","title":"\u5167\u5efa\u5de5\u5177\u7bc4\u4f8b","text":"<p>\u4e0b\u5217\u7bc4\u4f8b\u4f7f\u7528 ADK \u5167\u5efa\u7684\u5de5\u5177\u51fd\u5f0f\uff0c\u900f\u904e Google Search \u70ba agent \u63d0\u4f9b\u641c\u5c0b\u529f\u80fd\u3002\u6b64 agent \u6703\u81ea\u52d5\u4f7f\u7528\u641c\u5c0b\u5de5\u5177\u4f86\u56de\u61c9\u4f7f\u7528\u8005\u7684\u8acb\u6c42\u3002</p> <pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/google/adk-python/refs/heads/main/src/google/adk/agents/config_schemas/AgentConfig.json\nname: search_agent\nmodel: gemini-2.0-flash\ndescription: 'an agent whose job it is to perform Google search queries and answer questions about the results.'\ninstruction: You are an agent whose job is to perform Google search queries and answer questions about the results.\ntools:\n  - name: google_search\n</code></pre> <p>\u5982\u9700\u66f4\u591a\u8a73\u7d30\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 ADK sample repository \u4e2d\u672c\u7bc4\u4f8b\u7684\u5b8c\u6574\u7a0b\u5f0f\u78bc\u3002</p>"},{"location":"agents/config/#_5","title":"\u81ea\u8a02\u5de5\u5177\u7bc4\u4f8b","text":"<p>\u4ee5\u4e0b\u7bc4\u4f8b\u4f7f\u7528\u4ee5 Python \u7a0b\u5f0f\u78bc\u5efa\u7acb\u7684\u81ea\u8a02\u5de5\u5177\uff0c\u4e26\u5728 config \u6a94\u6848\u7684 <code>tools:</code> \u5340\u6bb5\u4e2d\u5217\u51fa\u3002agent \u6703\u4f7f\u7528\u6b64\u5de5\u5177\u4f86\u6aa2\u67e5\u4f7f\u7528\u8005\u63d0\u4f9b\u7684\u4e00\u4e32\u6578\u5b57\u662f\u5426\u70ba\u8cea\u6578\u3002</p> <pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/google/adk-python/refs/heads/main/src/google/adk/agents/config_schemas/AgentConfig.json\nagent_class: LlmAgent\nmodel: gemini-2.5-flash\nname: prime_agent\ndescription: Handles checking if numbers are prime.\ninstruction: |\n  You are responsible for checking whether numbers are prime.\n  When asked to check primes, you must call the check_prime tool with a list of integers.\n  Never attempt to determine prime numbers manually.\n  Return the prime number results to the root agent.\ntools:\n  - name: ma_llm.check_prime\n</code></pre> <p>\u5982\u9700\u66f4\u591a\u7d30\u7bc0\uff0c\u8acb\u53c3\u95b1 ADK \u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u5eab \u4e2d\u672c\u7bc4\u4f8b\u7684\u5b8c\u6574\u7a0b\u5f0f\u78bc\u3002</p>"},{"location":"agents/config/#agent_2","title":"\u5b50 agent \u7bc4\u4f8b","text":"<p>\u4ee5\u4e0b\u7bc4\u4f8b\u5c55\u793a\u4e86\u4e00\u500b\u5728\u8a2d\u5b9a\u6a94\u7684 <code>sub_agents:</code> \u5340\u6bb5\u4e2d\u5b9a\u7fa9\u4e86\u5169\u500b\u5b50 agent\uff0c\u4ee5\u53ca\u5728 <code>tools:</code> \u5340\u6bb5\u4e2d\u5b9a\u7fa9\u4e86\u4e00\u500b\u5de5\u5177\u7684 agent\u3002\u9019\u500b agent \u6703\u5224\u65b7\u4f7f\u7528\u8005\u7684\u9700\u6c42\uff0c\u4e26\u59d4\u6d3e\u7d66\u5176\u4e2d\u4e00\u500b\u5b50 agent \u4f86\u8655\u7406\u8acb\u6c42\u3002\u5b50 agent \u662f\u900f\u904e Agent Config YAML \u6a94\u6848\u4f86\u5b9a\u7fa9\u7684\u3002</p> <pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/google/adk-python/refs/heads/main/src/google/adk/agents/config_schemas/AgentConfig.json\nagent_class: LlmAgent\nmodel: gemini-2.5-flash\nname: root_agent\ndescription: Learning assistant that provides tutoring in code and math.\ninstruction: |\n  You are a learning assistant that helps students with coding and math questions.\n\n  You delegate coding questions to the code_tutor_agent and math questions to the math_tutor_agent.\n\n  Follow these steps:\n  1. If the user asks about programming or coding, delegate to the code_tutor_agent.\n  2. If the user asks about math concepts or problems, delegate to the math_tutor_agent.\n  3. Always provide clear explanations and encourage learning.\nsub_agents:\n  - config_path: code_tutor_agent.yaml\n  - config_path: math_tutor_agent.yaml\n</code></pre> <p>\u5982\u9700\u66f4\u591a\u7d30\u7bc0\uff0c\u8acb\u53c3\u95b1 ADK \u7bc4\u4f8b\u7a0b\u5f0f\u5eab \u4e2d\u7684\u5b8c\u6574\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u3002</p>"},{"location":"agents/config/#agent-config","title":"\u90e8\u7f72 Agent Config","text":"<p>\u4f60\u53ef\u4ee5\u4f7f\u7528 Cloud Run \u548c Agent Engine \u4f86\u90e8\u7f72 Agent Config agent\uff0c\u90e8\u7f72\u6d41\u7a0b\u8207\u4ee5\u7a0b\u5f0f\u78bc\u70ba\u57fa\u790e\u7684 agent \u76f8\u540c\u3002\u95dc\u65bc\u5982\u4f55\u6e96\u5099\u8207\u90e8\u7f72\u57fa\u65bc Agent Config \u7684 agent\uff0c\u8acb\u53c3\u95b1 Cloud Run \u548c Agent Engine \u7684\u90e8\u7f72\u6307\u5357\u3002</p>"},{"location":"agents/config/#known-limitations","title":"\u5df2\u77e5\u9650\u5236","text":"<p>Agent Config \u5c6c\u65bc\u5be6\u9a57\u6027\u529f\u80fd\uff08experimental feature\uff09\uff0c\u76ee\u524d\u6709\u4ee5\u4e0b\u9650\u5236\uff1a</p> <ul> <li>\u6a21\u578b\u652f\u63f4\uff1a \u76ee\u524d\u50c5\u652f\u63f4 Gemini \u6a21\u578b\uff0c\u8207\u7b2c\u4e09\u65b9\u6a21\u578b\u7684\u6574\u5408\u5c1a\u5728\u9032\u884c\u4e2d\u3002</li> <li>\u7a0b\u5f0f\u8a9e\u8a00\uff1a Agent Config \u76ee\u524d\u50c5\u652f\u63f4 Python \u7a0b\u5f0f\u78bc\uff0c\u7528\u65bc tools \u53ca\u5176\u4ed6\u9700\u8981\u64b0\u5beb\u7a0b\u5f0f\u78bc\u7684\u529f\u80fd\u3002</li> <li>ADK \u5de5\u5177\u652f\u63f4\uff1a Agent Config \u529f\u80fd\u652f\u63f4\u4e0b\u5217 ADK \u5de5\u5177\uff0c\u4f46\u4e26\u975e\u6240\u6709\u5de5\u5177\u90fd\u7372\u5f97\u5b8c\u6574\u652f\u63f4\uff1a<ul> <li><code>google_search</code></li> <li><code>load_artifacts</code></li> <li><code>url_context</code></li> <li><code>exit_loop</code></li> <li><code>preload_memory</code></li> <li><code>get_user_choice</code></li> <li><code>enterprise_web_search</code></li> <li><code>load_web_page</code>\uff1a\u9700\u63d0\u4f9b\u5b8c\u6574\u8def\u5f91\u624d\u80fd\u5b58\u53d6\u7db2\u9801\u3002</li> </ul> </li> <li>Agent \u985e\u578b\u652f\u63f4\uff1a \u5c1a\u672a\u652f\u63f4 <code>LangGraphAgent</code> \u8207 <code>A2aAgent</code> \u985e\u578b\u3002<ul> <li><code>AgentTool</code></li> <li><code>LongRunningFunctionTool</code></li> <li><code>VertexAiSearchTool</code></li> <li><code>MCPToolset</code></li> <li><code>CrewaiTool</code></li> <li><code>LangchainTool</code></li> <li><code>ExampleTool</code></li> </ul> </li> </ul>"},{"location":"agents/config/#_6","title":"\u4e0b\u4e00\u6b65","text":"<p>\u5982\u9700\u95dc\u65bc\u5982\u4f55\u5229\u7528 Agent Development Kit (ADK) \u7684 Agent Config \u5efa\u7acb agent \u7684\u9748\u611f\uff0c\u8acb\u53c3\u8003 ADK adk-samples \u7a0b\u5f0f\u5eab\u4e2d\u7684 yaml \u683c\u5f0f agent \u5b9a\u7fa9\u3002\u82e5\u9700\u8a73\u7d30\u4e86\u89e3 Agent Config \u683c\u5f0f\u6240\u652f\u63f4\u7684\u8a9e\u6cd5\u8207\u8a2d\u5b9a\uff0c\u8acb\u53c3\u95b1 Agent Config \u8a9e\u6cd5\u53c3\u8003\u3002</p>"},{"location":"agents/custom-agents.en/","title":"Custom agents.en","text":"<p>Advanced Concept</p> <p>Building custom agents by directly implementing <code>_run_async_impl</code> (or its equivalent in other languages) provides powerful control but is more complex than using the predefined <code>LlmAgent</code> or standard <code>WorkflowAgent</code> types. We recommend understanding those foundational agent types first before tackling custom orchestration logic.</p>"},{"location":"agents/custom-agents.en/#custom-agents","title":"Custom agents","text":"<p>Custom agents provide the ultimate flexibility in ADK, allowing you to define arbitrary orchestration logic by inheriting directly from <code>BaseAgent</code> and implementing your own control flow. This goes beyond the predefined patterns of <code>SequentialAgent</code>, <code>LoopAgent</code>, and <code>ParallelAgent</code>, enabling you to build highly specific and complex agentic workflows.</p>"},{"location":"agents/custom-agents.en/#introduction-beyond-predefined-workflows","title":"Introduction: Beyond Predefined Workflows","text":""},{"location":"agents/custom-agents.en/#what-is-a-custom-agent","title":"What is a Custom Agent?","text":"<p>A Custom Agent is essentially any class you create that inherits from <code>google.adk.agents.BaseAgent</code> and implements its core execution logic within the <code>_run_async_impl</code> asynchronous method. You have complete control over how this method calls other agents (sub-agents), manages state, and handles events. </p> <p>Note</p> <p>The specific method name for implementing an agent's core asynchronous logic may vary slightly by SDK language (e.g., <code>runAsyncImpl</code> in Java, <code>_run_async_impl</code> in Python). Refer to the language-specific API documentation for details.</p>"},{"location":"agents/custom-agents.en/#why-use-them","title":"Why Use Them?","text":"<p>While the standard Workflow Agents (<code>SequentialAgent</code>, <code>LoopAgent</code>, <code>ParallelAgent</code>) cover common orchestration patterns, you'll need a Custom agent when your requirements include:</p> <ul> <li>Conditional Logic: Executing different sub-agents or taking different paths based on runtime conditions or the results of previous steps.</li> <li>Complex State Management: Implementing intricate logic for maintaining and updating state throughout the workflow beyond simple sequential passing.</li> <li>External Integrations: Incorporating calls to external APIs, databases, or custom libraries directly within the orchestration flow control.</li> <li>Dynamic Agent Selection: Choosing which sub-agent(s) to run next based on dynamic evaluation of the situation or input.</li> <li>Unique Workflow Patterns: Implementing orchestration logic that doesn't fit the standard sequential, parallel, or loop structures.</li> </ul> <p></p>"},{"location":"agents/custom-agents.en/#implementing-custom-logic","title":"Implementing Custom Logic:","text":"<p>The core of any custom agent is the method where you define its unique asynchronous behavior. This method allows you to orchestrate sub-agents and manage the flow of execution.</p> PythonJava <p>The heart of any custom agent is the <code>_run_async_impl</code> method. This is where you define its unique behavior.</p> <ul> <li>Signature: <code>async def _run_async_impl(self, ctx: InvocationContext) -&gt; AsyncGenerator[Event, None]:</code></li> <li>Asynchronous Generator: It must be an <code>async def</code> function and return an <code>AsyncGenerator</code>. This allows it to <code>yield</code> events produced by sub-agents or its own logic back to the runner.</li> <li><code>ctx</code> (InvocationContext): Provides access to crucial runtime information, most importantly <code>ctx.session.state</code>, which is the primary way to share data between steps orchestrated by your custom agent.</li> </ul> <p>The heart of any custom agent is the <code>runAsyncImpl</code> method, which you override from <code>BaseAgent</code>.</p> <ul> <li>Signature: <code>protected Flowable&lt;Event&gt; runAsyncImpl(InvocationContext ctx)</code></li> <li>Reactive Stream (<code>Flowable</code>): It must return an <code>io.reactivex.rxjava3.core.Flowable&lt;Event&gt;</code>. This <code>Flowable</code> represents a stream of events that will be produced by the custom agent's logic, often by combining or transforming multiple <code>Flowable</code> from sub-agents.</li> <li><code>ctx</code> (InvocationContext): Provides access to crucial runtime information, most importantly <code>ctx.session().state()</code>, which is a <code>java.util.concurrent.ConcurrentMap&lt;String, Object&gt;</code>. This is the primary way to share data between steps orchestrated by your custom agent.</li> </ul> <p>Key Capabilities within the Core Asynchronous Method:</p> PythonJava <ol> <li> <p>Calling Sub-Agents: You invoke sub-agents (which are typically stored as instance attributes like <code>self.my_llm_agent</code>) using their <code>run_async</code> method and yield their events:</p> <pre><code>async for event in self.some_sub_agent.run_async(ctx):\n    # Optionally inspect or log the event\n    yield event # Pass the event up\n</code></pre> </li> <li> <p>Managing State: Read from and write to the session state dictionary (<code>ctx.session.state</code>) to pass data between sub-agent calls or make decisions:       <pre><code># Read data set by a previous agent\nprevious_result = ctx.session.state.get(\"some_key\")\n\n# Make a decision based on state\nif previous_result == \"some_value\":\n    # ... call a specific sub-agent ...\nelse:\n    # ... call another sub-agent ...\n\n# Store a result for a later step (often done via a sub-agent's output_key)\n# ctx.session.state[\"my_custom_result\"] = \"calculated_value\"\n</code></pre></p> </li> <li> <p>Implementing Control Flow: Use standard Python constructs (<code>if</code>/<code>elif</code>/<code>else</code>, <code>for</code>/<code>while</code> loops, <code>try</code>/<code>except</code>) to create sophisticated, conditional, or iterative workflows involving your sub-agents.</p> </li> </ol> <ol> <li> <p>Calling Sub-Agents: You invoke sub-agents (which are typically stored as instance attributes or objects) using their asynchronous run method and return their event streams:</p> <p>You typically chain <code>Flowable</code>s from sub-agents using RxJava operators like <code>concatWith</code>, <code>flatMapPublisher</code>, or <code>concatArray</code>.</p> <p><pre><code>// Example: Running one sub-agent\n// return someSubAgent.runAsync(ctx);\n\n// Example: Running sub-agents sequentially\nFlowable&lt;Event&gt; firstAgentEvents = someSubAgent1.runAsync(ctx)\n    .doOnNext(event -&gt; System.out.println(\"Event from agent 1: \" + event.id()));\n\nFlowable&lt;Event&gt; secondAgentEvents = Flowable.defer(() -&gt;\n    someSubAgent2.runAsync(ctx)\n        .doOnNext(event -&gt; System.out.println(\"Event from agent 2: \" + event.id()))\n);\n\nreturn firstAgentEvents.concatWith(secondAgentEvents);\n</code></pre>    The <code>Flowable.defer()</code> is often used for subsequent stages if their execution depends on the completion or state after prior stages.</p> </li> <li> <p>Managing State: Read from and write to the session state to pass data between sub-agent calls or make decisions. The session state is a <code>java.util.concurrent.ConcurrentMap&lt;String, Object&gt;</code> obtained via <code>ctx.session().state()</code>.</p> <pre><code>// Read data set by a previous agent\nObject previousResult = ctx.session().state().get(\"some_key\");\n\n// Make a decision based on state\nif (\"some_value\".equals(previousResult)) {\n    // ... logic to include a specific sub-agent's Flowable ...\n} else {\n    // ... logic to include another sub-agent's Flowable ...\n}\n\n// Store a result for a later step (often done via a sub-agent's output_key)\n// ctx.session().state().put(\"my_custom_result\", \"calculated_value\");\n</code></pre> </li> <li> <p>Implementing Control Flow: Use standard language constructs (<code>if</code>/<code>else</code>, loops, <code>try</code>/<code>catch</code>) combined with reactive operators (RxJava) to create sophisticated workflows.</p> <ul> <li>Conditional: <code>Flowable.defer()</code> to choose which <code>Flowable</code> to subscribe to based on a condition, or <code>filter()</code> if you're filtering events within a stream.</li> <li>Iterative: Operators like <code>repeat()</code>, <code>retry()</code>, or by structuring your <code>Flowable</code> chain to recursively call parts of itself based on conditions (often managed with <code>flatMapPublisher</code> or <code>concatMap</code>).</li> </ul> </li> </ol>"},{"location":"agents/custom-agents.en/#managing-sub-agents-and-state","title":"Managing Sub-Agents and State","text":"<p>Typically, a custom agent orchestrates other agents (like <code>LlmAgent</code>, <code>LoopAgent</code>, etc.).</p> <ul> <li>Initialization: You usually pass instances of these sub-agents into your custom agent's constructor and store them as instance fields/attributes (e.g., <code>this.story_generator = story_generator_instance</code> or <code>self.story_generator = story_generator_instance</code>). This makes them accessible within the custom agent's core asynchronous execution logic (such as: <code>_run_async_impl</code> method).</li> <li>Sub Agents List: When initializing the <code>BaseAgent</code> using it's <code>super()</code> constructor, you should pass a <code>sub agents</code> list. This list tells the ADK framework about the agents that are part of this custom agent's immediate hierarchy. It's important for framework features like lifecycle management, introspection, and potentially future routing capabilities, even if your core execution logic (<code>_run_async_impl</code>) calls the agents directly via <code>self.xxx_agent</code>. Include the agents that your custom logic directly invokes at the top level.</li> <li>State: As mentioned, <code>ctx.session.state</code> is the standard way sub-agents (especially <code>LlmAgent</code>s using <code>output key</code>) communicate results back to the orchestrator and how the orchestrator passes necessary inputs down.</li> </ul>"},{"location":"agents/custom-agents.en/#design-pattern-example-storyflowagent","title":"Design Pattern Example: <code>StoryFlowAgent</code>","text":"<p>Let's illustrate the power of custom agents with an example pattern: a multi-stage content generation workflow with conditional logic.</p> <p>Goal: Create a system that generates a story, iteratively refines it through critique and revision, performs final checks, and crucially, regenerates the story if the final tone check fails.</p> <p>Why Custom? The core requirement driving the need for a custom agent here is the conditional regeneration based on the tone check. Standard workflow agents don't have built-in conditional branching based on the outcome of a sub-agent's task. We need custom logic (<code>if tone == \"negative\": ...</code>) within the orchestrator.</p>"},{"location":"agents/custom-agents.en/#part-1-simplified-custom-agent-initialization","title":"Part 1: Simplified custom agent Initialization","text":"PythonJava <p>We define the <code>StoryFlowAgent</code> inheriting from <code>BaseAgent</code>. In <code>__init__</code>, we store the necessary sub-agents (passed in) as instance attributes and tell the <code>BaseAgent</code> framework about the top-level agents this custom agent will directly orchestrate.</p> <pre><code>class StoryFlowAgent(BaseAgent):\n    \"\"\"\n    Custom agent for a story generation and refinement workflow.\n\n    This agent orchestrates a sequence of LLM agents to generate a story,\n    critique it, revise it, check grammar and tone, and potentially\n    regenerate the story if the tone is negative.\n    \"\"\"\n\n    # --- Field Declarations for Pydantic ---\n    # Declare the agents passed during initialization as class attributes with type hints\n    story_generator: LlmAgent\n    critic: LlmAgent\n    reviser: LlmAgent\n    grammar_check: LlmAgent\n    tone_check: LlmAgent\n\n    loop_agent: LoopAgent\n    sequential_agent: SequentialAgent\n\n    # model_config allows setting Pydantic configurations if needed, e.g., arbitrary_types_allowed\n    model_config = {\"arbitrary_types_allowed\": True}\n\n    def __init__(\n        self,\n        name: str,\n        story_generator: LlmAgent,\n        critic: LlmAgent,\n        reviser: LlmAgent,\n        grammar_check: LlmAgent,\n        tone_check: LlmAgent,\n    ):\n        \"\"\"\n        Initializes the StoryFlowAgent.\n\n        Args:\n            name: The name of the agent.\n            story_generator: An LlmAgent to generate the initial story.\n            critic: An LlmAgent to critique the story.\n            reviser: An LlmAgent to revise the story based on criticism.\n            grammar_check: An LlmAgent to check the grammar.\n            tone_check: An LlmAgent to analyze the tone.\n        \"\"\"\n        # Create internal agents *before* calling super().__init__\n        loop_agent = LoopAgent(\n            name=\"CriticReviserLoop\", sub_agents=[critic, reviser], max_iterations=2\n        )\n        sequential_agent = SequentialAgent(\n            name=\"PostProcessing\", sub_agents=[grammar_check, tone_check]\n        )\n\n        # Define the sub_agents list for the framework\n        sub_agents_list = [\n            story_generator,\n            loop_agent,\n            sequential_agent,\n        ]\n\n        # Pydantic will validate and assign them based on the class annotations.\n        super().__init__(\n            name=name,\n            story_generator=story_generator,\n            critic=critic,\n            reviser=reviser,\n            grammar_check=grammar_check,\n            tone_check=tone_check,\n            loop_agent=loop_agent,\n            sequential_agent=sequential_agent,\n            sub_agents=sub_agents_list, # Pass the sub_agents list directly\n        )\n</code></pre> <p>We define the <code>StoryFlowAgentExample</code> by extending <code>BaseAgent</code>. In its constructor, we store the necessary sub-agent instances (passed as parameters) as instance fields. These top-level sub-agents, which this custom agent will directly orchestrate, are also passed to the <code>super</code> constructor of <code>BaseAgent</code> as a list.</p> <pre><code>private final LlmAgent storyGenerator;\nprivate final LoopAgent loopAgent;\nprivate final SequentialAgent sequentialAgent;\n\npublic StoryFlowAgentExample(\n    String name, LlmAgent storyGenerator, LoopAgent loopAgent, SequentialAgent sequentialAgent) {\n  super(\n      name,\n      \"Orchestrates story generation, critique, revision, and checks.\",\n      List.of(storyGenerator, loopAgent, sequentialAgent),\n      null,\n      null);\n\n  this.storyGenerator = storyGenerator;\n  this.loopAgent = loopAgent;\n  this.sequentialAgent = sequentialAgent;\n}\n</code></pre>"},{"location":"agents/custom-agents.en/#part-2-defining-the-custom-execution-logic","title":"Part 2: Defining the Custom Execution Logic","text":"PythonJava <p>This method orchestrates the sub-agents using standard Python async/await and control flow.</p> <p><pre><code>@override\nasync def _run_async_impl(\n    self, ctx: InvocationContext\n) -&gt; AsyncGenerator[Event, None]:\n    \"\"\"\n    Implements the custom orchestration logic for the story workflow.\n    Uses the instance attributes assigned by Pydantic (e.g., self.story_generator).\n    \"\"\"\n    logger.info(f\"[{self.name}] Starting story generation workflow.\")\n\n    # 1. Initial Story Generation\n    logger.info(f\"[{self.name}] Running StoryGenerator...\")\n    async for event in self.story_generator.run_async(ctx):\n        logger.info(f\"[{self.name}] Event from StoryGenerator: {event.model_dump_json(indent=2, exclude_none=True)}\")\n        yield event\n\n    # Check if story was generated before proceeding\n    if \"current_story\" not in ctx.session.state or not ctx.session.state[\"current_story\"]:\n         logger.error(f\"[{self.name}] Failed to generate initial story. Aborting workflow.\")\n         return # Stop processing if initial story failed\n\n    logger.info(f\"[{self.name}] Story state after generator: {ctx.session.state.get('current_story')}\")\n\n\n    # 2. Critic-Reviser Loop\n    logger.info(f\"[{self.name}] Running CriticReviserLoop...\")\n    # Use the loop_agent instance attribute assigned during init\n    async for event in self.loop_agent.run_async(ctx):\n        logger.info(f\"[{self.name}] Event from CriticReviserLoop: {event.model_dump_json(indent=2, exclude_none=True)}\")\n        yield event\n\n    logger.info(f\"[{self.name}] Story state after loop: {ctx.session.state.get('current_story')}\")\n\n    # 3. Sequential Post-Processing (Grammar and Tone Check)\n    logger.info(f\"[{self.name}] Running PostProcessing...\")\n    # Use the sequential_agent instance attribute assigned during init\n    async for event in self.sequential_agent.run_async(ctx):\n        logger.info(f\"[{self.name}] Event from PostProcessing: {event.model_dump_json(indent=2, exclude_none=True)}\")\n        yield event\n\n    # 4. Tone-Based Conditional Logic\n    tone_check_result = ctx.session.state.get(\"tone_check_result\")\n    logger.info(f\"[{self.name}] Tone check result: {tone_check_result}\")\n\n    if tone_check_result == \"negative\":\n        logger.info(f\"[{self.name}] Tone is negative. Regenerating story...\")\n        async for event in self.story_generator.run_async(ctx):\n            logger.info(f\"[{self.name}] Event from StoryGenerator (Regen): {event.model_dump_json(indent=2, exclude_none=True)}\")\n            yield event\n    else:\n        logger.info(f\"[{self.name}] Tone is not negative. Keeping current story.\")\n        pass\n\n    logger.info(f\"[{self.name}] Workflow finished.\")\n</code></pre> Explanation of Logic:</p> <ol> <li>The initial <code>story_generator</code> runs. Its output is expected to be in <code>ctx.session.state[\"current_story\"]</code>.</li> <li>The <code>loop_agent</code> runs, which internally calls the <code>critic</code> and <code>reviser</code> sequentially for <code>max_iterations</code> times. They read/write <code>current_story</code> and <code>criticism</code> from/to the state.</li> <li>The <code>sequential_agent</code> runs, calling <code>grammar_check</code> then <code>tone_check</code>, reading <code>current_story</code> and writing <code>grammar_suggestions</code> and <code>tone_check_result</code> to the state.</li> <li>Custom Part: The <code>if</code> statement checks the <code>tone_check_result</code> from the state. If it's \"negative\", the <code>story_generator</code> is called again, overwriting the <code>current_story</code> in the state. Otherwise, the flow ends.</li> </ol> <p>The <code>runAsyncImpl</code> method orchestrates the sub-agents using RxJava's Flowable streams and operators for asynchronous control flow.</p> <p><pre><code>@Override\nprotected Flowable&lt;Event&gt; runAsyncImpl(InvocationContext invocationContext) {\n  // Implements the custom orchestration logic for the story workflow.\n  // Uses the instance attributes assigned by Pydantic (e.g., self.story_generator).\n  logger.log(Level.INFO, () -&gt; String.format(\"[%s] Starting story generation workflow.\", name()));\n\n  // Stage 1. Initial Story Generation\n  Flowable&lt;Event&gt; storyGenFlow = runStage(storyGenerator, invocationContext, \"StoryGenerator\");\n\n  // Stage 2: Critic-Reviser Loop (runs after story generation completes)\n  Flowable&lt;Event&gt; criticReviserFlow = Flowable.defer(() -&gt; {\n    if (!isStoryGenerated(invocationContext)) {\n      logger.log(Level.SEVERE,() -&gt;\n          String.format(\"[%s] Failed to generate initial story. Aborting after StoryGenerator.\",\n              name()));\n      return Flowable.empty(); // Stop further processing if no story\n    }\n      logger.log(Level.INFO, () -&gt;\n          String.format(\"[%s] Story state after generator: %s\",\n              name(), invocationContext.session().state().get(\"current_story\")));\n      return runStage(loopAgent, invocationContext, \"CriticReviserLoop\");\n  });\n\n  // Stage 3: Post-Processing (runs after critic-reviser loop completes)\n  Flowable&lt;Event&gt; postProcessingFlow = Flowable.defer(() -&gt; {\n    logger.log(Level.INFO, () -&gt;\n        String.format(\"[%s] Story state after loop: %s\",\n            name(), invocationContext.session().state().get(\"current_story\")));\n    return runStage(sequentialAgent, invocationContext, \"PostProcessing\");\n  });\n\n  // Stage 4: Conditional Regeneration (runs after post-processing completes)\n  Flowable&lt;Event&gt; conditionalRegenFlow = Flowable.defer(() -&gt; {\n    String toneCheckResult = (String) invocationContext.session().state().get(\"tone_check_result\");\n    logger.log(Level.INFO, () -&gt; String.format(\"[%s] Tone check result: %s\", name(), toneCheckResult));\n\n    if (\"negative\".equalsIgnoreCase(toneCheckResult)) {\n      logger.log(Level.INFO, () -&gt;\n          String.format(\"[%s] Tone is negative. Regenerating story...\", name()));\n      return runStage(storyGenerator, invocationContext, \"StoryGenerator (Regen)\");\n    } else {\n      logger.log(Level.INFO, () -&gt;\n          String.format(\"[%s] Tone is not negative. Keeping current story.\", name()));\n      return Flowable.empty(); // No regeneration needed\n    }\n  });\n\n  return Flowable.concatArray(storyGenFlow, criticReviserFlow, postProcessingFlow, conditionalRegenFlow)\n      .doOnComplete(() -&gt; logger.log(Level.INFO, () -&gt; String.format(\"[%s] Workflow finished.\", name())));\n}\n\n// Helper method for a single agent run stage with logging\nprivate Flowable&lt;Event&gt; runStage(BaseAgent agentToRun, InvocationContext ctx, String stageName) {\n  logger.log(Level.INFO, () -&gt; String.format(\"[%s] Running %s...\", name(), stageName));\n  return agentToRun\n      .runAsync(ctx)\n      .doOnNext(event -&gt;\n          logger.log(Level.INFO,() -&gt;\n              String.format(\"[%s] Event from %s: %s\", name(), stageName, event.toJson())))\n      .doOnError(err -&gt;\n          logger.log(Level.SEVERE,\n              String.format(\"[%s] Error in %s\", name(), stageName), err))\n      .doOnComplete(() -&gt;\n          logger.log(Level.INFO, () -&gt;\n              String.format(\"[%s] %s finished.\", name(), stageName)));\n}\n</code></pre> Explanation of Logic:</p> <ol> <li>The initial <code>storyGenerator.runAsync(invocationContext)</code> Flowable is executed. Its output is expected to be in <code>invocationContext.session().state().get(\"current_story\")</code>.</li> <li>The <code>loopAgent's</code> Flowable runs next (due to <code>Flowable.concatArray</code> and <code>Flowable.defer</code>). The LoopAgent internally calls the <code>critic</code> and <code>reviser</code> sub-agents sequentially for up to <code>maxIterations</code>. They read/write <code>current_story</code> and <code>criticism</code> from/to the state.</li> <li>Then, the <code>sequentialAgent's</code> Flowable executes. It calls the <code>grammar_check</code> then <code>tone_check</code>, reading <code>current_story</code> and writing <code>grammar_suggestions</code> and <code>tone_check_result</code> to the state.</li> <li>Custom Part: After the sequentialAgent completes, logic within a <code>Flowable.defer</code> checks the \"tone_check_result\" from <code>invocationContext.session().state()</code>. If it's \"negative\", the <code>storyGenerator</code> Flowable is conditionally concatenated and executed again, overwriting \"current_story\". Otherwise, an empty Flowable is used, and the overall workflow proceeds to completion.</li> </ol>"},{"location":"agents/custom-agents.en/#part-3-defining-the-llm-sub-agents","title":"Part 3: Defining the LLM Sub-Agents","text":"<p>These are standard <code>LlmAgent</code> definitions, responsible for specific tasks. Their <code>output key</code> parameter is crucial for placing results into the <code>session.state</code> where other agents or the custom orchestrator can access them.</p> <p>Direct State Injection in Instructions</p> <p>Notice the <code>story_generator</code>'s instruction. The <code>{var}</code> syntax is a placeholder. Before the instruction is sent to the LLM, the ADK framework automatically replaces (Example:<code>{topic}</code>) with the value of <code>session.state['topic']</code>. This is the recommended way to provide context to an agent, using templating in the instructions. For more details, see the State documentation.</p> PythonJava <pre><code>GEMINI_2_FLASH = \"gemini-2.0-flash\" # Define model constant\n# --- Define the individual LLM agents ---\nstory_generator = LlmAgent(\n    name=\"StoryGenerator\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a story writer. Write a short story (around 100 words), on the following topic: {topic}\"\"\",\n    input_schema=None,\n    output_key=\"current_story\",  # Key for storing output in session state\n)\n\ncritic = LlmAgent(\n    name=\"Critic\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a story critic. Review the story provided: {{current_story}}. Provide 1-2 sentences of constructive criticism\non how to improve it. Focus on plot or character.\"\"\",\n    input_schema=None,\n    output_key=\"criticism\",  # Key for storing criticism in session state\n)\n\nreviser = LlmAgent(\n    name=\"Reviser\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a story reviser. Revise the story provided: {{current_story}}, based on the criticism in\n{{criticism}}. Output only the revised story.\"\"\",\n    input_schema=None,\n    output_key=\"current_story\",  # Overwrites the original story\n)\n\ngrammar_check = LlmAgent(\n    name=\"GrammarCheck\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a grammar checker. Check the grammar of the story provided: {current_story}. Output only the suggested\ncorrections as a list, or output 'Grammar is good!' if there are no errors.\"\"\",\n    input_schema=None,\n    output_key=\"grammar_suggestions\",\n)\n\ntone_check = LlmAgent(\n    name=\"ToneCheck\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a tone analyzer. Analyze the tone of the story provided: {current_story}. Output only one word: 'positive' if\nthe tone is generally positive, 'negative' if the tone is generally negative, or 'neutral'\notherwise.\"\"\",\n    input_schema=None,\n    output_key=\"tone_check_result\", # This agent's output determines the conditional flow\n)\n</code></pre> <pre><code>// --- Define the individual LLM agents ---\nLlmAgent storyGenerator =\n    LlmAgent.builder()\n        .name(\"StoryGenerator\")\n        .model(MODEL_NAME)\n        .description(\"Generates the initial story.\")\n        .instruction(\n            \"\"\"\n          You are a story writer. Write a short story (around 100 words) about a cat,\n          based on the topic: {topic}\n          \"\"\")\n        .inputSchema(null)\n        .outputKey(\"current_story\") // Key for storing output in session state\n        .build();\n\nLlmAgent critic =\n    LlmAgent.builder()\n        .name(\"Critic\")\n        .model(MODEL_NAME)\n        .description(\"Critiques the story.\")\n        .instruction(\n            \"\"\"\n          You are a story critic. Review the story: {current_story}. Provide 1-2 sentences of constructive criticism\n          on how to improve it. Focus on plot or character.\n          \"\"\")\n        .inputSchema(null)\n        .outputKey(\"criticism\") // Key for storing criticism in session state\n        .build();\n\nLlmAgent reviser =\n    LlmAgent.builder()\n        .name(\"Reviser\")\n        .model(MODEL_NAME)\n        .description(\"Revises the story based on criticism.\")\n        .instruction(\n            \"\"\"\n          You are a story reviser. Revise the story: {current_story}, based on the criticism: {criticism}. Output only the revised story.\n          \"\"\")\n        .inputSchema(null)\n        .outputKey(\"current_story\") // Overwrites the original story\n        .build();\n\nLlmAgent grammarCheck =\n    LlmAgent.builder()\n        .name(\"GrammarCheck\")\n        .model(MODEL_NAME)\n        .description(\"Checks grammar and suggests corrections.\")\n        .instruction(\n            \"\"\"\n           You are a grammar checker. Check the grammar of the story: {current_story}. Output only the suggested\n           corrections as a list, or output 'Grammar is good!' if there are no errors.\n           \"\"\")\n        .outputKey(\"grammar_suggestions\")\n        .build();\n\nLlmAgent toneCheck =\n    LlmAgent.builder()\n        .name(\"ToneCheck\")\n        .model(MODEL_NAME)\n        .description(\"Analyzes the tone of the story.\")\n        .instruction(\n            \"\"\"\n          You are a tone analyzer. Analyze the tone of the story: {current_story}. Output only one word: 'positive' if\n          the tone is generally positive, 'negative' if the tone is generally negative, or 'neutral'\n          otherwise.\n          \"\"\")\n        .outputKey(\"tone_check_result\") // This agent's output determines the conditional flow\n        .build();\n\nLoopAgent loopAgent =\n    LoopAgent.builder()\n        .name(\"CriticReviserLoop\")\n        .description(\"Iteratively critiques and revises the story.\")\n        .subAgents(critic, reviser)\n        .maxIterations(2)\n        .build();\n\nSequentialAgent sequentialAgent =\n    SequentialAgent.builder()\n        .name(\"PostProcessing\")\n        .description(\"Performs grammar and tone checks sequentially.\")\n        .subAgents(grammarCheck, toneCheck)\n        .build();\n</code></pre>"},{"location":"agents/custom-agents.en/#part-4-instantiating-and-running-the-custom-agent","title":"Part 4: Instantiating and Running the custom agent","text":"<p>Finally, you instantiate your <code>StoryFlowAgent</code> and use the <code>Runner</code> as usual.</p> PythonJava <pre><code># --- Create the custom agent instance ---\nstory_flow_agent = StoryFlowAgent(\n    name=\"StoryFlowAgent\",\n    story_generator=story_generator,\n    critic=critic,\n    reviser=reviser,\n    grammar_check=grammar_check,\n    tone_check=tone_check,\n)\n\nINITIAL_STATE = {\"topic\": \"a brave kitten exploring a haunted house\"}\n\n# --- Setup Runner and Session ---\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID, state=INITIAL_STATE)\n    logger.info(f\"Initial session state: {session.state}\")\n    runner = Runner(\n        agent=story_flow_agent, # Pass the custom orchestrator agent\n        app_name=APP_NAME,\n        session_service=session_service\n    )\n    return session_service, runner\n\n# --- Function to Interact with the Agent ---\nasync def call_agent_async(user_input_topic: str):\n    \"\"\"\n    Sends a new topic to the agent (overwriting the initial one if needed)\n    and runs the workflow.\n    \"\"\"\n\n    session_service, runner = await setup_session_and_runner()\n\n    current_session = await session_service.get_session(app_name=APP_NAME, \n                                                  user_id=USER_ID, \n                                                  session_id=SESSION_ID)\n    if not current_session:\n        logger.error(\"Session not found!\")\n        return\n\n    current_session.state[\"topic\"] = user_input_topic\n    logger.info(f\"Updated session state topic to: {user_input_topic}\")\n\n    content = types.Content(role='user', parts=[types.Part(text=f\"Generate a story about: {user_input_topic}\")])\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    final_response = \"No final response captured.\"\n    async for event in events:\n        if event.is_final_response() and event.content and event.content.parts:\n            logger.info(f\"Potential final response from [{event.author}]: {event.content.parts[0].text}\")\n            final_response = event.content.parts[0].text\n\n    print(\"\\n--- Agent Interaction Result ---\")\n    print(\"Agent Final Response: \", final_response)\n\n    final_session = await session_service.get_session(app_name=APP_NAME, \n                                                user_id=USER_ID, \n                                                session_id=SESSION_ID)\n    print(\"Final Session State:\")\n    import json\n    print(json.dumps(final_session.state, indent=2))\n    print(\"-------------------------------\\n\")\n\n# --- Run the Agent ---\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"a lonely robot finding a friend in a junkyard\")\n</code></pre> <pre><code>// --- Function to Interact with the Agent ---\n// Sends a new topic to the agent (overwriting the initial one if needed)\n// and runs the workflow.\npublic static void runAgent(StoryFlowAgentExample agent, String userTopic) {\n  // --- Setup Runner and Session ---\n  InMemoryRunner runner = new InMemoryRunner(agent);\n\n  Map&lt;String, Object&gt; initialState = new HashMap&lt;&gt;();\n  initialState.put(\"topic\", \"a brave kitten exploring a haunted house\");\n\n  Session session =\n      runner\n          .sessionService()\n          .createSession(APP_NAME, USER_ID, new ConcurrentHashMap&lt;&gt;(initialState), SESSION_ID)\n          .blockingGet();\n  logger.log(Level.INFO, () -&gt; String.format(\"Initial session state: %s\", session.state()));\n\n  session.state().put(\"topic\", userTopic); // Update the state in the retrieved session\n  logger.log(Level.INFO, () -&gt; String.format(\"Updated session state topic to: %s\", userTopic));\n\n  Content userMessage = Content.fromParts(Part.fromText(\"Generate a story about: \" + userTopic));\n  // Use the modified session object for the run\n  Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n  final String[] finalResponse = {\"No final response captured.\"};\n  eventStream.blockingForEach(\n      event -&gt; {\n        if (event.finalResponse() &amp;&amp; event.content().isPresent()) {\n          String author = event.author() != null ? event.author() : \"UNKNOWN_AUTHOR\";\n          Optional&lt;String&gt; textOpt =\n              event\n                  .content()\n                  .flatMap(Content::parts)\n                  .filter(parts -&gt; !parts.isEmpty())\n                  .map(parts -&gt; parts.get(0).text().orElse(\"\"));\n\n          logger.log(Level.INFO, () -&gt;\n              String.format(\"Potential final response from [%s]: %s\", author, textOpt.orElse(\"N/A\")));\n          textOpt.ifPresent(text -&gt; finalResponse[0] = text);\n        }\n      });\n\n  System.out.println(\"\\n--- Agent Interaction Result ---\");\n  System.out.println(\"Agent Final Response: \" + finalResponse[0]);\n\n  // Retrieve session again to see the final state after the run\n  Session finalSession =\n      runner\n          .sessionService()\n          .getSession(APP_NAME, USER_ID, SESSION_ID, Optional.empty())\n          .blockingGet();\n\n  assert finalSession != null;\n  System.out.println(\"Final Session State:\" + finalSession.state());\n  System.out.println(\"-------------------------------\\n\");\n}\n</code></pre> <p>(Note: The full runnable code, including imports and execution logic, can be found linked below.)</p>"},{"location":"agents/custom-agents.en/#full-code-example","title":"Full Code Example","text":"Storyflow Agent PythonJava <pre><code># Full runnable code for the StoryFlowAgent example\n# Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport logging\nfrom typing import AsyncGenerator\nfrom typing_extensions import override\n\nfrom google.adk.agents import LlmAgent, BaseAgent, LoopAgent, SequentialAgent\nfrom google.adk.agents.invocation_context import InvocationContext\nfrom google.genai import types\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.runners import Runner\nfrom google.adk.events import Event\nfrom pydantic import BaseModel, Field\n\n# --- Constants ---\nAPP_NAME = \"story_app\"\nUSER_ID = \"12345\"\nSESSION_ID = \"123344\"\nGEMINI_2_FLASH = \"gemini-2.0-flash\"\n\n# --- Configure Logging ---\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\n# --- Custom Orchestrator Agent ---\nclass StoryFlowAgent(BaseAgent):\n    \"\"\"\n    Custom agent for a story generation and refinement workflow.\n\n    This agent orchestrates a sequence of LLM agents to generate a story,\n    critique it, revise it, check grammar and tone, and potentially\n    regenerate the story if the tone is negative.\n    \"\"\"\n\n    # --- Field Declarations for Pydantic ---\n    # Declare the agents passed during initialization as class attributes with type hints\n    story_generator: LlmAgent\n    critic: LlmAgent\n    reviser: LlmAgent\n    grammar_check: LlmAgent\n    tone_check: LlmAgent\n\n    loop_agent: LoopAgent\n    sequential_agent: SequentialAgent\n\n    # model_config allows setting Pydantic configurations if needed, e.g., arbitrary_types_allowed\n    model_config = {\"arbitrary_types_allowed\": True}\n\n    def __init__(\n        self,\n        name: str,\n        story_generator: LlmAgent,\n        critic: LlmAgent,\n        reviser: LlmAgent,\n        grammar_check: LlmAgent,\n        tone_check: LlmAgent,\n    ):\n        \"\"\"\n        Initializes the StoryFlowAgent.\n\n        Args:\n            name: The name of the agent.\n            story_generator: An LlmAgent to generate the initial story.\n            critic: An LlmAgent to critique the story.\n            reviser: An LlmAgent to revise the story based on criticism.\n            grammar_check: An LlmAgent to check the grammar.\n            tone_check: An LlmAgent to analyze the tone.\n        \"\"\"\n        # Create internal agents *before* calling super().__init__\n        loop_agent = LoopAgent(\n            name=\"CriticReviserLoop\", sub_agents=[critic, reviser], max_iterations=2\n        )\n        sequential_agent = SequentialAgent(\n            name=\"PostProcessing\", sub_agents=[grammar_check, tone_check]\n        )\n\n        # Define the sub_agents list for the framework\n        sub_agents_list = [\n            story_generator,\n            loop_agent,\n            sequential_agent,\n        ]\n\n        # Pydantic will validate and assign them based on the class annotations.\n        super().__init__(\n            name=name,\n            story_generator=story_generator,\n            critic=critic,\n            reviser=reviser,\n            grammar_check=grammar_check,\n            tone_check=tone_check,\n            loop_agent=loop_agent,\n            sequential_agent=sequential_agent,\n            sub_agents=sub_agents_list, # Pass the sub_agents list directly\n        )\n\n    @override\n    async def _run_async_impl(\n        self, ctx: InvocationContext\n    ) -&gt; AsyncGenerator[Event, None]:\n        \"\"\"\n        Implements the custom orchestration logic for the story workflow.\n        Uses the instance attributes assigned by Pydantic (e.g., self.story_generator).\n        \"\"\"\n        logger.info(f\"[{self.name}] Starting story generation workflow.\")\n\n        # 1. Initial Story Generation\n        logger.info(f\"[{self.name}] Running StoryGenerator...\")\n        async for event in self.story_generator.run_async(ctx):\n            logger.info(f\"[{self.name}] Event from StoryGenerator: {event.model_dump_json(indent=2, exclude_none=True)}\")\n            yield event\n\n        # Check if story was generated before proceeding\n        if \"current_story\" not in ctx.session.state or not ctx.session.state[\"current_story\"]:\n             logger.error(f\"[{self.name}] Failed to generate initial story. Aborting workflow.\")\n             return # Stop processing if initial story failed\n\n        logger.info(f\"[{self.name}] Story state after generator: {ctx.session.state.get('current_story')}\")\n\n\n        # 2. Critic-Reviser Loop\n        logger.info(f\"[{self.name}] Running CriticReviserLoop...\")\n        # Use the loop_agent instance attribute assigned during init\n        async for event in self.loop_agent.run_async(ctx):\n            logger.info(f\"[{self.name}] Event from CriticReviserLoop: {event.model_dump_json(indent=2, exclude_none=True)}\")\n            yield event\n\n        logger.info(f\"[{self.name}] Story state after loop: {ctx.session.state.get('current_story')}\")\n\n        # 3. Sequential Post-Processing (Grammar and Tone Check)\n        logger.info(f\"[{self.name}] Running PostProcessing...\")\n        # Use the sequential_agent instance attribute assigned during init\n        async for event in self.sequential_agent.run_async(ctx):\n            logger.info(f\"[{self.name}] Event from PostProcessing: {event.model_dump_json(indent=2, exclude_none=True)}\")\n            yield event\n\n        # 4. Tone-Based Conditional Logic\n        tone_check_result = ctx.session.state.get(\"tone_check_result\")\n        logger.info(f\"[{self.name}] Tone check result: {tone_check_result}\")\n\n        if tone_check_result == \"negative\":\n            logger.info(f\"[{self.name}] Tone is negative. Regenerating story...\")\n            async for event in self.story_generator.run_async(ctx):\n                logger.info(f\"[{self.name}] Event from StoryGenerator (Regen): {event.model_dump_json(indent=2, exclude_none=True)}\")\n                yield event\n        else:\n            logger.info(f\"[{self.name}] Tone is not negative. Keeping current story.\")\n            pass\n\n        logger.info(f\"[{self.name}] Workflow finished.\")\n\n# --- Define the individual LLM agents ---\nstory_generator = LlmAgent(\n    name=\"StoryGenerator\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a story writer. Write a short story (around 100 words), on the following topic: {topic}\"\"\",\n    input_schema=None,\n    output_key=\"current_story\",  # Key for storing output in session state\n)\n\ncritic = LlmAgent(\n    name=\"Critic\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a story critic. Review the story provided: {{current_story}}. Provide 1-2 sentences of constructive criticism\non how to improve it. Focus on plot or character.\"\"\",\n    input_schema=None,\n    output_key=\"criticism\",  # Key for storing criticism in session state\n)\n\nreviser = LlmAgent(\n    name=\"Reviser\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a story reviser. Revise the story provided: {{current_story}}, based on the criticism in\n{{criticism}}. Output only the revised story.\"\"\",\n    input_schema=None,\n    output_key=\"current_story\",  # Overwrites the original story\n)\n\ngrammar_check = LlmAgent(\n    name=\"GrammarCheck\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a grammar checker. Check the grammar of the story provided: {current_story}. Output only the suggested\ncorrections as a list, or output 'Grammar is good!' if there are no errors.\"\"\",\n    input_schema=None,\n    output_key=\"grammar_suggestions\",\n)\n\ntone_check = LlmAgent(\n    name=\"ToneCheck\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a tone analyzer. Analyze the tone of the story provided: {current_story}. Output only one word: 'positive' if\nthe tone is generally positive, 'negative' if the tone is generally negative, or 'neutral'\notherwise.\"\"\",\n    input_schema=None,\n    output_key=\"tone_check_result\", # This agent's output determines the conditional flow\n)\n\n# --- Create the custom agent instance ---\nstory_flow_agent = StoryFlowAgent(\n    name=\"StoryFlowAgent\",\n    story_generator=story_generator,\n    critic=critic,\n    reviser=reviser,\n    grammar_check=grammar_check,\n    tone_check=tone_check,\n)\n\nINITIAL_STATE = {\"topic\": \"a brave kitten exploring a haunted house\"}\n\n# --- Setup Runner and Session ---\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID, state=INITIAL_STATE)\n    logger.info(f\"Initial session state: {session.state}\")\n    runner = Runner(\n        agent=story_flow_agent, # Pass the custom orchestrator agent\n        app_name=APP_NAME,\n        session_service=session_service\n    )\n    return session_service, runner\n\n# --- Function to Interact with the Agent ---\nasync def call_agent_async(user_input_topic: str):\n    \"\"\"\n    Sends a new topic to the agent (overwriting the initial one if needed)\n    and runs the workflow.\n    \"\"\"\n\n    session_service, runner = await setup_session_and_runner()\n\n    current_session = await session_service.get_session(app_name=APP_NAME, \n                                                  user_id=USER_ID, \n                                                  session_id=SESSION_ID)\n    if not current_session:\n        logger.error(\"Session not found!\")\n        return\n\n    current_session.state[\"topic\"] = user_input_topic\n    logger.info(f\"Updated session state topic to: {user_input_topic}\")\n\n    content = types.Content(role='user', parts=[types.Part(text=f\"Generate a story about: {user_input_topic}\")])\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    final_response = \"No final response captured.\"\n    async for event in events:\n        if event.is_final_response() and event.content and event.content.parts:\n            logger.info(f\"Potential final response from [{event.author}]: {event.content.parts[0].text}\")\n            final_response = event.content.parts[0].text\n\n    print(\"\\n--- Agent Interaction Result ---\")\n    print(\"Agent Final Response: \", final_response)\n\n    final_session = await session_service.get_session(app_name=APP_NAME, \n                                                user_id=USER_ID, \n                                                session_id=SESSION_ID)\n    print(\"Final Session State:\")\n    import json\n    print(json.dumps(final_session.state, indent=2))\n    print(\"-------------------------------\\n\")\n\n# --- Run the Agent ---\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"a lonely robot finding a friend in a junkyard\")\n</code></pre> <pre><code># Full runnable code for the StoryFlowAgent example\n\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.InvocationContext;\nimport com.google.adk.agents.LoopAgent;\nimport com.google.adk.agents.SequentialAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class StoryFlowAgentExample extends BaseAgent {\n\n  // --- Constants ---\n  private static final String APP_NAME = \"story_app\";\n  private static final String USER_ID = \"user_12345\";\n  private static final String SESSION_ID = \"session_123344\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\"; // Ensure this model is available\n\n  private static final Logger logger = Logger.getLogger(StoryFlowAgentExample.class.getName());\n\n  private final LlmAgent storyGenerator;\n  private final LoopAgent loopAgent;\n  private final SequentialAgent sequentialAgent;\n\n  public StoryFlowAgentExample(\n      String name, LlmAgent storyGenerator, LoopAgent loopAgent, SequentialAgent sequentialAgent) {\n    super(\n        name,\n        \"Orchestrates story generation, critique, revision, and checks.\",\n        List.of(storyGenerator, loopAgent, sequentialAgent),\n        null,\n        null);\n\n    this.storyGenerator = storyGenerator;\n    this.loopAgent = loopAgent;\n    this.sequentialAgent = sequentialAgent;\n  }\n\n  public static void main(String[] args) {\n\n    // --- Define the individual LLM agents ---\n    LlmAgent storyGenerator =\n        LlmAgent.builder()\n            .name(\"StoryGenerator\")\n            .model(MODEL_NAME)\n            .description(\"Generates the initial story.\")\n            .instruction(\n                \"\"\"\n              You are a story writer. Write a short story (around 100 words) about a cat,\n              based on the topic: {topic}\n              \"\"\")\n            .inputSchema(null)\n            .outputKey(\"current_story\") // Key for storing output in session state\n            .build();\n\n    LlmAgent critic =\n        LlmAgent.builder()\n            .name(\"Critic\")\n            .model(MODEL_NAME)\n            .description(\"Critiques the story.\")\n            .instruction(\n                \"\"\"\n              You are a story critic. Review the story: {current_story}. Provide 1-2 sentences of constructive criticism\n              on how to improve it. Focus on plot or character.\n              \"\"\")\n            .inputSchema(null)\n            .outputKey(\"criticism\") // Key for storing criticism in session state\n            .build();\n\n    LlmAgent reviser =\n        LlmAgent.builder()\n            .name(\"Reviser\")\n            .model(MODEL_NAME)\n            .description(\"Revises the story based on criticism.\")\n            .instruction(\n                \"\"\"\n              You are a story reviser. Revise the story: {current_story}, based on the criticism: {criticism}. Output only the revised story.\n              \"\"\")\n            .inputSchema(null)\n            .outputKey(\"current_story\") // Overwrites the original story\n            .build();\n\n    LlmAgent grammarCheck =\n        LlmAgent.builder()\n            .name(\"GrammarCheck\")\n            .model(MODEL_NAME)\n            .description(\"Checks grammar and suggests corrections.\")\n            .instruction(\n                \"\"\"\n               You are a grammar checker. Check the grammar of the story: {current_story}. Output only the suggested\n               corrections as a list, or output 'Grammar is good!' if there are no errors.\n               \"\"\")\n            .outputKey(\"grammar_suggestions\")\n            .build();\n\n    LlmAgent toneCheck =\n        LlmAgent.builder()\n            .name(\"ToneCheck\")\n            .model(MODEL_NAME)\n            .description(\"Analyzes the tone of the story.\")\n            .instruction(\n                \"\"\"\n              You are a tone analyzer. Analyze the tone of the story: {current_story}. Output only one word: 'positive' if\n              the tone is generally positive, 'negative' if the tone is generally negative, or 'neutral'\n              otherwise.\n              \"\"\")\n            .outputKey(\"tone_check_result\") // This agent's output determines the conditional flow\n            .build();\n\n    LoopAgent loopAgent =\n        LoopAgent.builder()\n            .name(\"CriticReviserLoop\")\n            .description(\"Iteratively critiques and revises the story.\")\n            .subAgents(critic, reviser)\n            .maxIterations(2)\n            .build();\n\n    SequentialAgent sequentialAgent =\n        SequentialAgent.builder()\n            .name(\"PostProcessing\")\n            .description(\"Performs grammar and tone checks sequentially.\")\n            .subAgents(grammarCheck, toneCheck)\n            .build();\n\n\n    StoryFlowAgentExample storyFlowAgentExample =\n        new StoryFlowAgentExample(APP_NAME, storyGenerator, loopAgent, sequentialAgent);\n\n    // --- Run the Agent ---\n    runAgent(storyFlowAgentExample, \"a lonely robot finding a friend in a junkyard\");\n  }\n\n  // --- Function to Interact with the Agent ---\n  // Sends a new topic to the agent (overwriting the initial one if needed)\n  // and runs the workflow.\n  public static void runAgent(StoryFlowAgentExample agent, String userTopic) {\n    // --- Setup Runner and Session ---\n    InMemoryRunner runner = new InMemoryRunner(agent);\n\n    Map&lt;String, Object&gt; initialState = new HashMap&lt;&gt;();\n    initialState.put(\"topic\", \"a brave kitten exploring a haunted house\");\n\n    Session session =\n        runner\n            .sessionService()\n            .createSession(APP_NAME, USER_ID, new ConcurrentHashMap&lt;&gt;(initialState), SESSION_ID)\n            .blockingGet();\n    logger.log(Level.INFO, () -&gt; String.format(\"Initial session state: %s\", session.state()));\n\n    session.state().put(\"topic\", userTopic); // Update the state in the retrieved session\n    logger.log(Level.INFO, () -&gt; String.format(\"Updated session state topic to: %s\", userTopic));\n\n    Content userMessage = Content.fromParts(Part.fromText(\"Generate a story about: \" + userTopic));\n    // Use the modified session object for the run\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    final String[] finalResponse = {\"No final response captured.\"};\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse() &amp;&amp; event.content().isPresent()) {\n            String author = event.author() != null ? event.author() : \"UNKNOWN_AUTHOR\";\n            Optional&lt;String&gt; textOpt =\n                event\n                    .content()\n                    .flatMap(Content::parts)\n                    .filter(parts -&gt; !parts.isEmpty())\n                    .map(parts -&gt; parts.get(0).text().orElse(\"\"));\n\n            logger.log(Level.INFO, () -&gt;\n                String.format(\"Potential final response from [%s]: %s\", author, textOpt.orElse(\"N/A\")));\n            textOpt.ifPresent(text -&gt; finalResponse[0] = text);\n          }\n        });\n\n    System.out.println(\"\\n--- Agent Interaction Result ---\");\n    System.out.println(\"Agent Final Response: \" + finalResponse[0]);\n\n    // Retrieve session again to see the final state after the run\n    Session finalSession =\n        runner\n            .sessionService()\n            .getSession(APP_NAME, USER_ID, SESSION_ID, Optional.empty())\n            .blockingGet();\n\n    assert finalSession != null;\n    System.out.println(\"Final Session State:\" + finalSession.state());\n    System.out.println(\"-------------------------------\\n\");\n  }\n\n  private boolean isStoryGenerated(InvocationContext ctx) {\n    Object currentStoryObj = ctx.session().state().get(\"current_story\");\n    return currentStoryObj != null &amp;&amp; !String.valueOf(currentStoryObj).isEmpty();\n  }\n\n  @Override\n  protected Flowable&lt;Event&gt; runAsyncImpl(InvocationContext invocationContext) {\n    // Implements the custom orchestration logic for the story workflow.\n    // Uses the instance attributes assigned by Pydantic (e.g., self.story_generator).\n    logger.log(Level.INFO, () -&gt; String.format(\"[%s] Starting story generation workflow.\", name()));\n\n    // Stage 1. Initial Story Generation\n    Flowable&lt;Event&gt; storyGenFlow = runStage(storyGenerator, invocationContext, \"StoryGenerator\");\n\n    // Stage 2: Critic-Reviser Loop (runs after story generation completes)\n    Flowable&lt;Event&gt; criticReviserFlow = Flowable.defer(() -&gt; {\n      if (!isStoryGenerated(invocationContext)) {\n        logger.log(Level.SEVERE,() -&gt;\n            String.format(\"[%s] Failed to generate initial story. Aborting after StoryGenerator.\",\n                name()));\n        return Flowable.empty(); // Stop further processing if no story\n      }\n        logger.log(Level.INFO, () -&gt;\n            String.format(\"[%s] Story state after generator: %s\",\n                name(), invocationContext.session().state().get(\"current_story\")));\n        return runStage(loopAgent, invocationContext, \"CriticReviserLoop\");\n    });\n\n    // Stage 3: Post-Processing (runs after critic-reviser loop completes)\n    Flowable&lt;Event&gt; postProcessingFlow = Flowable.defer(() -&gt; {\n      logger.log(Level.INFO, () -&gt;\n          String.format(\"[%s] Story state after loop: %s\",\n              name(), invocationContext.session().state().get(\"current_story\")));\n      return runStage(sequentialAgent, invocationContext, \"PostProcessing\");\n    });\n\n    // Stage 4: Conditional Regeneration (runs after post-processing completes)\n    Flowable&lt;Event&gt; conditionalRegenFlow = Flowable.defer(() -&gt; {\n      String toneCheckResult = (String) invocationContext.session().state().get(\"tone_check_result\");\n      logger.log(Level.INFO, () -&gt; String.format(\"[%s] Tone check result: %s\", name(), toneCheckResult));\n\n      if (\"negative\".equalsIgnoreCase(toneCheckResult)) {\n        logger.log(Level.INFO, () -&gt;\n            String.format(\"[%s] Tone is negative. Regenerating story...\", name()));\n        return runStage(storyGenerator, invocationContext, \"StoryGenerator (Regen)\");\n      } else {\n        logger.log(Level.INFO, () -&gt;\n            String.format(\"[%s] Tone is not negative. Keeping current story.\", name()));\n        return Flowable.empty(); // No regeneration needed\n      }\n    });\n\n    return Flowable.concatArray(storyGenFlow, criticReviserFlow, postProcessingFlow, conditionalRegenFlow)\n        .doOnComplete(() -&gt; logger.log(Level.INFO, () -&gt; String.format(\"[%s] Workflow finished.\", name())));\n  }\n\n  // Helper method for a single agent run stage with logging\n  private Flowable&lt;Event&gt; runStage(BaseAgent agentToRun, InvocationContext ctx, String stageName) {\n    logger.log(Level.INFO, () -&gt; String.format(\"[%s] Running %s...\", name(), stageName));\n    return agentToRun\n        .runAsync(ctx)\n        .doOnNext(event -&gt;\n            logger.log(Level.INFO,() -&gt;\n                String.format(\"[%s] Event from %s: %s\", name(), stageName, event.toJson())))\n        .doOnError(err -&gt;\n            logger.log(Level.SEVERE,\n                String.format(\"[%s] Error in %s\", name(), stageName), err))\n        .doOnComplete(() -&gt;\n            logger.log(Level.INFO, () -&gt;\n                String.format(\"[%s] %s finished.\", name(), stageName)));\n  }\n\n  @Override\n  protected Flowable&lt;Event&gt; runLiveImpl(InvocationContext invocationContext) {\n    return Flowable.error(new UnsupportedOperationException(\"runLive not implemented.\"));\n  }\n}\n</code></pre>"},{"location":"agents/custom-agents/","title":"\u81ea\u8a02\u4ee3\u7406","text":"<p>Advanced Concept</p> <p>\u76f4\u63a5\u5be6\u4f5c <code>_run_async_impl</code>\uff08\u6216\u5176\u4ed6\u8a9e\u8a00\u4e2d\u7684\u5c0d\u61c9\u985e\u5225\uff09\u4f86\u5efa\u7acb\u81ea\u8a02 agent\uff0c\u96d6\u7136\u80fd\u63d0\u4f9b\u5f37\u5927\u7684\u63a7\u5236\u80fd\u529b\uff0c\u4f46\u76f8\u8f03\u65bc\u4f7f\u7528\u9810\u5148\u5b9a\u7fa9\u7684 <code>LlmAgent</code> \u6216\u6a19\u6e96\u7684 <code>WorkflowAgent</code> \u985e\u578b\u4f86\u8aaa\uff0c\u5be6\u4f5c\u4e0a\u6703\u66f4\u70ba\u8907\u96dc\u3002\u6211\u5011\u5efa\u8b70\u5728\u6311\u6230\u81ea\u8a02\u5354\u4f5c\u908f\u8f2f\u4e4b\u524d\uff0c\u5148\u5145\u5206\u7406\u89e3\u9019\u4e9b\u57fa\u790e\u7684 agent \u985e\u578b\u3002</p>"},{"location":"agents/custom-agents/#agent","title":"\u81ea\u8a02 agent","text":"<p>\u81ea\u8a02 agent \u63d0\u4f9b\u4e86 Agent Development Kit (ADK) \u4e2d\u6700\u9ad8\u7684\u5f48\u6027\uff0c\u8b93\u4f60\u53ef\u4ee5\u76f4\u63a5\u7e7c\u627f\u81ea <code>BaseAgent</code>\uff0c\u4e26\u5be6\u4f5c\u81ea\u5df1\u7684\u63a7\u5236\u6d41\u7a0b\uff0c\u5f9e\u800c\u5b9a\u7fa9\u4efb\u610f\u7684\u5354\u4f5c\u908f\u8f2f\u3002\u9019\u7a2e\u65b9\u5f0f\u8d85\u8d8a\u4e86 <code>SequentialAgent</code>\u3001<code>LoopAgent</code> \u548c <code>ParallelAgent</code> \u7b49\u9810\u5148\u5b9a\u7fa9\u7684\u6a21\u5f0f\uff0c\u4f7f\u4f60\u80fd\u5920\u5efa\u7acb\u9ad8\u5ea6\u7279\u5b9a\u4e14\u8907\u96dc\u7684 agent \u5de5\u4f5c\u6d41\u7a0b\u3002</p>"},{"location":"agents/custom-agents/#_1","title":"\u4ecb\u7d39\uff1a\u8d85\u8d8a\u9810\u8a2d\u5de5\u4f5c\u6d41\u7a0b","text":""},{"location":"agents/custom-agents/#agent_1","title":"\u4ec0\u9ebc\u662f\u81ea\u8a02 Agent\uff1f","text":"<p>\u81ea\u8a02 Agent \u57fa\u672c\u4e0a\u662f\u4f60\u6240\u5efa\u7acb\u3001\u7e7c\u627f\u81ea <code>google.adk.agents.BaseAgent</code> \u7684\u4efb\u4f55\u985e\u5225\uff0c\u4e26\u5728 <code>_run_async_impl</code> \u975e\u540c\u6b65\u65b9\u6cd5\u4e2d\u5be6\u4f5c\u5176\u6838\u5fc3\u57f7\u884c\u908f\u8f2f\u3002\u4f60\u53ef\u4ee5\u5b8c\u5168\u638c\u63a7\u9019\u500b\u65b9\u6cd5\u5982\u4f55\u547c\u53eb\u5176\u4ed6 agent\uff08\u5b50 agent\uff09\u3001\u7ba1\u7406\u72c0\u614b\uff0c\u4ee5\u53ca\u8655\u7406\u4e8b\u4ef6\u3002 </p> <p>Note</p> <p>\u5be6\u4f5c agent \u6838\u5fc3\u975e\u540c\u6b65\u908f\u8f2f\u7684\u65b9\u6cd5\u540d\u7a31\uff0c\u6703\u4f9d\u4e0d\u540c SDK \u8a9e\u8a00\u7565\u6709\u5dee\u7570\uff08\u4f8b\u5982\uff1aJava \u4e2d\u70ba <code>runAsyncImpl</code>\uff0cPython \u4e2d\u70ba <code>_run_async_impl</code>\uff09\u3002\u8a73\u7d30\u8cc7\u8a0a\u8acb\u53c3\u95b1\u5404\u8a9e\u8a00\u7684 API \u6587\u4ef6\u8aaa\u660e\u3002</p>"},{"location":"agents/custom-agents/#agent_2","title":"\u70ba\u4ec0\u9ebc\u8981\u4f7f\u7528\u81ea\u8a02 agent\uff1f","text":"<p>\u96d6\u7136\u6a19\u6e96\u7684 Workflow Agents\uff08<code>SequentialAgent</code>\u3001<code>LoopAgent</code>\u3001<code>ParallelAgent</code>\uff09\u5df2\u6db5\u84cb\u5e38\u898b\u7684\u5354\u4f5c\u6d41\u7a0b\u6a21\u5f0f\uff0c\u4f46\u7576\u4f60\u7684\u9700\u6c42\u5305\u542b\u4ee5\u4e0b\u60c5\u5883\u6642\uff0c\u5c31\u9700\u8981\u4f7f\u7528\u81ea\u8a02 agent\uff1a</p> <ul> <li>\u689d\u4ef6\u908f\u8f2f\uff08Conditional Logic\uff09\uff1a \u6839\u64da\u57f7\u884c\u6642\u689d\u4ef6\u6216\u524d\u4e00\u6b65\u9a5f\u7684\u7d50\u679c\uff0c\u57f7\u884c\u4e0d\u540c\u7684\u5b50 agent \u6216\u63a1\u53d6\u4e0d\u540c\u7684\u6d41\u7a0b\u5206\u652f\u3002</li> <li>\u8907\u96dc\u72c0\u614b\u7ba1\u7406\uff08Complex State Management\uff09\uff1a \u5728\u5de5\u4f5c\u6d41\u7a0b\u4e2d\uff0c\u5be6\u4f5c\u8d85\u8d8a\u55ae\u7d14\u9806\u5e8f\u50b3\u905e\u7684\u8907\u96dc\u72c0\u614b\u7dad\u8b77\u8207\u66f4\u65b0\u908f\u8f2f\u3002</li> <li>\u5916\u90e8\u6574\u5408\uff08External Integrations\uff09\uff1a \u5728\u5354\u4f5c\u6d41\u7a0b\u63a7\u5236\u4e2d\uff0c\u76f4\u63a5\u6574\u5408\u5c0d\u5916\u90e8 API\u3001\u8cc7\u6599\u5eab\u6216\u81ea\u8a02\u51fd\u5f0f\u5eab\u7684\u547c\u53eb\u3002</li> <li>\u52d5\u614b agent \u9078\u64c7\uff08Dynamic Agent Selection\uff09\uff1a \u6839\u64da\u60c5\u5883\u6216\u8f38\u5165\u7684\u52d5\u614b\u8a55\u4f30\uff0c\u6c7a\u5b9a\u63a5\u4e0b\u4f86\u8981\u57f7\u884c\u54ea\u500b\u5b50 agent\uff08\u6216\u591a\u500b\uff09\u3002</li> <li>\u7368\u7279\u7684\u5de5\u4f5c\u6d41\u7a0b\u6a21\u5f0f\uff08Unique Workflow Patterns\uff09\uff1a \u5be6\u4f5c\u4e0d\u5c6c\u65bc\u6a19\u6e96\u9806\u5e8f\u3001\u5e73\u884c\u6216\u8ff4\u5708\u7d50\u69cb\u7684\u5354\u4f5c\u908f\u8f2f\u3002</li> </ul> <p></p>"},{"location":"agents/custom-agents/#_2","title":"\u5be6\u4f5c\u81ea\u8a02\u908f\u8f2f\uff1a","text":"<p>\u4efb\u4f55\u81ea\u8a02 agent \u7684\u6838\u5fc3\uff0c\u5c31\u662f\u4f60\u5b9a\u7fa9\u5176\u7368\u7279\u975e\u540c\u6b65\u884c\u70ba\u7684\u65b9\u6cd5\u3002\u9019\u500b\u65b9\u6cd5\u8b93\u4f60\u80fd\u5354\u8abf\u5b50 agent\uff0c\u4e26\u7ba1\u7406\u57f7\u884c\u6d41\u7a0b\u3002</p> PythonJava <p>The heart of any custom agent is the <code>_run_async_impl</code> method. This is where you define its unique behavior.</p> <ul> <li>Signature: <code>async def _run_async_impl(self, ctx: InvocationContext) -&gt; AsyncGenerator[Event, None]:</code></li> <li>Asynchronous Generator: It must be an <code>async def</code> function and return an <code>AsyncGenerator</code>. This allows it to <code>yield</code> events produced by sub-agents or its own logic back to the runner.</li> <li><code>ctx</code> (InvocationContext): Provides access to crucial runtime information, most importantly <code>ctx.session.state</code>, which is the primary way to share data between steps orchestrated by your custom agent.</li> </ul> <p>The heart of any custom agent is the <code>runAsyncImpl</code> method, which you override from <code>BaseAgent</code>.</p> <ul> <li>Signature: <code>protected Flowable&lt;Event&gt; runAsyncImpl(InvocationContext ctx)</code></li> <li>Reactive Stream (<code>Flowable</code>): It must return an <code>io.reactivex.rxjava3.core.Flowable&lt;Event&gt;</code>. This <code>Flowable</code> represents a stream of events that will be produced by the custom agent's logic, often by combining or transforming multiple <code>Flowable</code> from sub-agents.</li> <li><code>ctx</code> (InvocationContext): Provides access to crucial runtime information, most importantly <code>ctx.session().state()</code>, which is a <code>java.util.concurrent.ConcurrentMap&lt;String, Object&gt;</code>. This is the primary way to share data between steps orchestrated by your custom agent.</li> </ul> <p>\u6838\u5fc3\u975e\u540c\u6b65\u65b9\u6cd5\u4e2d\u7684\u4e3b\u8981\u529f\u80fd\uff1a</p> PythonJava <ol> <li> <p>\u547c\u53eb\u5b50 agent\uff1a \u4f60\u53ef\u4ee5\u900f\u904e\u547c\u53eb\u5b50 agent\uff08\u901a\u5e38\u6703\u4ee5\u5be6\u4f8b\u5c6c\u6027\u5982 <code>self.my_llm_agent</code> \u5132\u5b58\uff09\uff0c\u4f7f\u7528\u5b83\u5011\u7684 <code>run_async</code> \u65b9\u6cd5\u4e26\u8b93\u6e21\uff08yield\uff09\u5b83\u5011\u7684\u4e8b\u4ef6\uff1a</p> <pre><code>async for event in self.some_sub_agent.run_async(ctx):\n    # Optionally inspect or log the event\n    yield event # Pass the event up\n</code></pre> </li> <li> <p>\u7ba1\u7406\u72c0\u614b\uff1a \u900f\u904e\u8b80\u53d6\u8207\u5beb\u5165 session state \u5b57\u5178\uff08<code>ctx.session.state</code>\uff09\uff0c\u53ef\u5728\u5b50 agent \u547c\u53eb\u4e4b\u9593\u50b3\u905e\u8cc7\u6599\u6216\u9032\u884c\u6c7a\u7b56\uff1a       <pre><code># Read data set by a previous agent\nprevious_result = ctx.session.state.get(\"some_key\")\n\n# Make a decision based on state\nif previous_result == \"some_value\":\n    # ... call a specific sub-agent ...\nelse:\n    # ... call another sub-agent ...\n\n# Store a result for a later step (often done via a sub-agent's output_key)\n# ctx.session.state[\"my_custom_result\"] = \"calculated_value\"\n</code></pre></p> </li> <li> <p>\u5be6\u4f5c\u63a7\u5236\u6d41\u7a0b\uff1a \u4f7f\u7528\u6a19\u6e96\u7684 Python \u7d50\u69cb\uff08<code>if</code>/<code>elif</code>/<code>else</code>\u3001<code>for</code>/<code>while</code> \u8ff4\u5708\u3001<code>try</code>/<code>except</code>\uff09\u4f86\u5efa\u7acb\u8907\u96dc\u3001\u6709\u689d\u4ef6\u6216\u5177\u8fed\u4ee3\u6027\u7684\u5de5\u4f5c\u6d41\u7a0b\uff0c\u4e26\u6574\u5408\u4f60\u7684\u5b50 agent\u3002</p> </li> </ol> <ol> <li> <p>\u547c\u53eb\u5b50 agent\uff1a \u4f60\u53ef\u4ee5\u900f\u904e\u547c\u53eb\u5b50 agent\uff08\u901a\u5e38\u4ee5\u5be6\u4f8b\u5c6c\u6027\u6216\u7269\u4ef6\u5f62\u5f0f\u5132\u5b58\uff09\u7684\u975e\u540c\u6b65 run \u65b9\u6cd5\uff0c\u4e26\u56de\u50b3\u5b83\u5011\u7684\u4e8b\u4ef6\u4e32\u6d41\uff1a</p> <p>\u901a\u5e38\u4f60\u6703\u4f7f\u7528 RxJava \u7684\u904b\u7b97\u5b50\uff08\u5982 <code>concatWith</code>\u3001<code>flatMapPublisher</code> \u6216 <code>concatArray</code>\uff09\u4f86\u4e32\u63a5\u4f86\u81ea\u5b50 agent \u7684 <code>Flowable</code>\u3002</p> <p><pre><code>// Example: Running one sub-agent\n// return someSubAgent.runAsync(ctx);\n\n// Example: Running sub-agents sequentially\nFlowable&lt;Event&gt; firstAgentEvents = someSubAgent1.runAsync(ctx)\n    .doOnNext(event -&gt; System.out.println(\"Event from agent 1: \" + event.id()));\n\nFlowable&lt;Event&gt; secondAgentEvents = Flowable.defer(() -&gt;\n    someSubAgent2.runAsync(ctx)\n        .doOnNext(event -&gt; System.out.println(\"Event from agent 2: \" + event.id()))\n);\n\nreturn firstAgentEvents.concatWith(secondAgentEvents);\n</code></pre> <code>Flowable.defer()</code> \u901a\u5e38\u7528\u65bc\u5f8c\u7e8c\u968e\u6bb5\uff0c\u5982\u679c\u9019\u4e9b\u968e\u6bb5\u7684\u57f7\u884c\u4f9d\u8cf4\u65bc\u524d\u4e00\u968e\u6bb5\u7684\u5b8c\u6210\u6216\u72c0\u614b\u6642\u3002</p> </li> <li> <p>\u7ba1\u7406\u72c0\u614b\uff1a \u900f\u904e\u8b80\u53d6\u548c\u5beb\u5165 session state\uff0c\u5728\u5b50 agent \u547c\u53eb\u4e4b\u9593\u50b3\u905e\u8cc7\u6599\u6216\u9032\u884c\u6c7a\u7b56\u3002session state \u662f\u900f\u904e <code>ctx.session().state()</code> \u53d6\u5f97\u7684 <code>java.util.concurrent.ConcurrentMap&lt;String, Object&gt;</code>\u3002</p> <pre><code>// Read data set by a previous agent\nObject previousResult = ctx.session().state().get(\"some_key\");\n\n// Make a decision based on state\nif (\"some_value\".equals(previousResult)) {\n    // ... logic to include a specific sub-agent's Flowable ...\n} else {\n    // ... logic to include another sub-agent's Flowable ...\n}\n\n// Store a result for a later step (often done via a sub-agent's output_key)\n// ctx.session().state().put(\"my_custom_result\", \"calculated_value\");\n</code></pre> </li> <li> <p>\u5be6\u4f5c\u63a7\u5236\u6d41\u7a0b\uff1a \u4f7f\u7528\u6a19\u6e96\u8a9e\u8a00\u7d50\u69cb\uff08<code>if</code>/<code>else</code>\u3001\u8ff4\u5708\u3001<code>try</code>/<code>catch</code>\uff09\u7d50\u5408 reactive operators\uff08\u5982 RxJava\uff09\uff0c\u53ef\u4ee5\u5efa\u7acb\u8907\u96dc\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002</p> <ul> <li>\u689d\u4ef6\u5224\u65b7\uff1a \u4f7f\u7528 <code>Flowable.defer()</code> \u4f86\u6839\u64da\u689d\u4ef6\u9078\u64c7\u8981\u8a02\u95b1\u54ea\u500b <code>Flowable</code>\uff0c\u6216\u5728\u4e32\u6d41\u4e2d\u904e\u6ffe\u4e8b\u4ef6\u6642\u4f7f\u7528 <code>filter()</code>\u3002</li> <li>\u8fed\u4ee3\u8655\u7406\uff1a \u53ef\u4ee5\u4f7f\u7528\u50cf\u662f <code>repeat()</code>\u3001<code>retry()</code> \u7684\u904b\u7b97\u5b50\uff0c\u6216\u900f\u904e\u8a2d\u8a08 <code>Flowable</code> \u93c8\uff0c\u5728\u689d\u4ef6\u4e0b\u905e\u8ff4\u547c\u53eb\u81ea\u8eab\u7684\u90e8\u5206\uff08\u901a\u5e38\u6703\u7528 <code>flatMapPublisher</code> \u6216 <code>concatMap</code> \u4f86\u7ba1\u7406\uff09\u3002</li> </ul> </li> </ol>"},{"location":"agents/custom-agents/#agent_3","title":"\u7ba1\u7406\u5b50 agent \u8207\u72c0\u614b","text":"<p>\u901a\u5e38\uff0c\u81ea\u8a02 agent \u6703\u5354\u8abf\u5176\u4ed6 agent\uff08\u5982 <code>LlmAgent</code>\u3001<code>LoopAgent</code> \u7b49\uff09\u3002</p> <ul> <li>\u521d\u59cb\u5316\uff1a \u901a\u5e38\u6703\u5c07\u9019\u4e9b\u5b50 agent \u7684\u5be6\u4f8b\u50b3\u5165\u81ea\u8a02 agent \u7684\u5efa\u69cb\u5b50\uff0c\u4e26\u5c07\u5176\u5132\u5b58\u70ba\u5be6\u4f8b\u6b04\u4f4d/\u5c6c\u6027\uff08\u4f8b\u5982\uff1a<code>this.story_generator = story_generator_instance</code> \u6216 <code>self.story_generator = story_generator_instance</code>\uff09\u3002\u9019\u6a23\u53ef\u4ee5\u5728\u81ea\u8a02 agent \u7684\u6838\u5fc3\u975e\u540c\u6b65\u57f7\u884c\u908f\u8f2f\u4e2d\uff08\u5982\uff1a<code>_run_async_impl</code> \u65b9\u6cd5\uff09\u5b58\u53d6\u9019\u4e9b\u5b50 agent\u3002</li> <li>\u5b50 agent \u6e05\u55ae\uff1a \u521d\u59cb\u5316 <code>BaseAgent</code> \u6642\uff0c\u4f7f\u7528\u5176 <code>super()</code> \u5efa\u69cb\u5b50\uff0c\u61c9\u50b3\u5165 <code>sub agents</code> \u6e05\u55ae\u3002\u9019\u500b\u6e05\u55ae\u6703\u544a\u8a34 Agent Development Kit (ADK) \u6846\u67b6\uff0c\u54ea\u4e9b agent \u5c6c\u65bc\u9019\u500b\u81ea\u8a02 agent \u7684\u76f4\u63a5\u968e\u5c64\u3002\u9019\u5c0d\u65bc\u6846\u67b6\u7684\u751f\u547d\u9031\u671f\u7ba1\u7406\u3001\u5167\u7701\uff08introspection\uff09\uff0c\u4ee5\u53ca\u672a\u4f86\u53ef\u80fd\u7684\u8def\u7531\u529f\u80fd\u90fd\u5f88\u91cd\u8981\uff0c\u5373\u4f7f\u4f60\u7684\u6838\u5fc3\u57f7\u884c\u908f\u8f2f\uff08<code>_run_async_impl</code>\uff09\u662f\u76f4\u63a5\u900f\u904e <code>self.xxx_agent</code> \u547c\u53eb\u9019\u4e9b agent\u3002\u8acb\u5c07\u81ea\u8a02\u908f\u8f2f\u4e2d\u6703\u5728\u9802\u5c64\u76f4\u63a5\u547c\u53eb\u7684 agent \u90fd\u5305\u542b\u9032\u4f86\u3002</li> <li>\u72c0\u614b\uff1a \u5982\u524d\u6240\u8ff0\uff0c<code>ctx.session.state</code> \u662f\u5b50 agent\uff08\u7279\u5225\u662f\u4f7f\u7528 <code>output key</code> \u7684 <code>LlmAgent</code>\uff09\u5c07\u7d50\u679c\u56de\u50b3\u7d66\u5354\u8abf\u8005\uff0c\u4ee5\u53ca\u5354\u8abf\u8005\u5c07\u5fc5\u8981\u8f38\u5165\u4e0b\u50b3\u7684\u6a19\u6e96\u65b9\u5f0f\u3002</li> </ul>"},{"location":"agents/custom-agents/#storyflowagent","title":"\u8a2d\u8a08\u6a21\u5f0f\u7bc4\u4f8b\uff1a<code>StoryFlowAgent</code>","text":"<p>\u4ee5\u4e0b\u7528\u4e00\u500b\u8a2d\u8a08\u6a21\u5f0f\u7bc4\u4f8b\u4f86\u8aaa\u660e\u81ea\u8a02 agent \u7684\u5f37\u5927\u529f\u80fd\uff1a\u4e00\u500b\u5177\u5099\u689d\u4ef6\u908f\u8f2f\u7684\u591a\u968e\u6bb5\u5167\u5bb9\u751f\u6210\u5de5\u4f5c\u6d41\u7a0b\u3002</p> <p>\u76ee\u6a19\uff1a \u5efa\u7acb\u4e00\u500b\u7cfb\u7d71\uff0c\u80fd\u5920\u7522\u751f\u6545\u4e8b\uff0c\u4e26\u900f\u904e\u6279\u8a55\u8207\u4fee\u8a02\u53cd\u8986\u512a\u5316\uff0c\u9032\u884c\u6700\u7d42\u6aa2\u67e5\uff0c\u4e14\u6700\u95dc\u9375\u7684\u662f\uff0c\u5982\u679c\u6700\u7d42\u8a9e\u6c23\u6aa2\u67e5\u672a\u901a\u904e\uff0c\u5247\u91cd\u65b0\u751f\u6210\u6545\u4e8b\u3002</p> <p>\u70ba\u4ec0\u9ebc\u8981\u81ea\u8a02\uff1f \u9019\u88e1\u9700\u8981\u81ea\u8a02 agent \u7684\u6838\u5fc3\u539f\u56e0\u662f\u6839\u64da\u8a9e\u6c23\u6aa2\u67e5\u7d50\u679c\u9032\u884c\u689d\u4ef6\u5f0f\u7684\u91cd\u65b0\u751f\u6210\u3002\u6a19\u6e96\u5de5\u4f5c\u6d41\u7a0b agent \u4e26\u672a\u5167\u5efa\u6839\u64da\u5b50 agent \u4efb\u52d9\u7d50\u679c\u9032\u884c\u689d\u4ef6\u5206\u652f\u7684\u80fd\u529b\u3002\u6211\u5011\u9700\u8981\u5728\u5354\u8abf\u8005\u4e2d\u52a0\u5165\u81ea\u8a02\u908f\u8f2f\uff08<code>if tone == \"negative\": ...</code>\uff09\u3002</p>"},{"location":"agents/custom-agents/#part-1-simplified-custom-agent-initialization","title":"\u7b2c\u4e00\u90e8\u5206\uff1a\u7c21\u5316\u7248\u81ea\u8a02 agent \u521d\u59cb\u5316","text":"PythonJava <p>We define the <code>StoryFlowAgent</code> inheriting from <code>BaseAgent</code>. In <code>__init__</code>, we store the necessary sub-agents (passed in) as instance attributes and tell the <code>BaseAgent</code> framework about the top-level agents this custom agent will directly orchestrate.</p> <pre><code>class StoryFlowAgent(BaseAgent):\n    \"\"\"\n    Custom agent for a story generation and refinement workflow.\n\n    This agent orchestrates a sequence of LLM agents to generate a story,\n    critique it, revise it, check grammar and tone, and potentially\n    regenerate the story if the tone is negative.\n    \"\"\"\n\n    # --- Field Declarations for Pydantic ---\n    # Declare the agents passed during initialization as class attributes with type hints\n    story_generator: LlmAgent\n    critic: LlmAgent\n    reviser: LlmAgent\n    grammar_check: LlmAgent\n    tone_check: LlmAgent\n\n    loop_agent: LoopAgent\n    sequential_agent: SequentialAgent\n\n    # model_config allows setting Pydantic configurations if needed, e.g., arbitrary_types_allowed\n    model_config = {\"arbitrary_types_allowed\": True}\n\n    def __init__(\n        self,\n        name: str,\n        story_generator: LlmAgent,\n        critic: LlmAgent,\n        reviser: LlmAgent,\n        grammar_check: LlmAgent,\n        tone_check: LlmAgent,\n    ):\n        \"\"\"\n        Initializes the StoryFlowAgent.\n\n        Args:\n            name: The name of the agent.\n            story_generator: An LlmAgent to generate the initial story.\n            critic: An LlmAgent to critique the story.\n            reviser: An LlmAgent to revise the story based on criticism.\n            grammar_check: An LlmAgent to check the grammar.\n            tone_check: An LlmAgent to analyze the tone.\n        \"\"\"\n        # Create internal agents *before* calling super().__init__\n        loop_agent = LoopAgent(\n            name=\"CriticReviserLoop\", sub_agents=[critic, reviser], max_iterations=2\n        )\n        sequential_agent = SequentialAgent(\n            name=\"PostProcessing\", sub_agents=[grammar_check, tone_check]\n        )\n\n        # Define the sub_agents list for the framework\n        sub_agents_list = [\n            story_generator,\n            loop_agent,\n            sequential_agent,\n        ]\n\n        # Pydantic will validate and assign them based on the class annotations.\n        super().__init__(\n            name=name,\n            story_generator=story_generator,\n            critic=critic,\n            reviser=reviser,\n            grammar_check=grammar_check,\n            tone_check=tone_check,\n            loop_agent=loop_agent,\n            sequential_agent=sequential_agent,\n            sub_agents=sub_agents_list, # Pass the sub_agents list directly\n        )\n</code></pre> <p>We define the <code>StoryFlowAgentExample</code> by extending <code>BaseAgent</code>. In its constructor, we store the necessary sub-agent instances (passed as parameters) as instance fields. These top-level sub-agents, which this custom agent will directly orchestrate, are also passed to the <code>super</code> constructor of <code>BaseAgent</code> as a list.</p> <pre><code>private final LlmAgent storyGenerator;\nprivate final LoopAgent loopAgent;\nprivate final SequentialAgent sequentialAgent;\n\npublic StoryFlowAgentExample(\n    String name, LlmAgent storyGenerator, LoopAgent loopAgent, SequentialAgent sequentialAgent) {\n  super(\n      name,\n      \"Orchestrates story generation, critique, revision, and checks.\",\n      List.of(storyGenerator, loopAgent, sequentialAgent),\n      null,\n      null);\n\n  this.storyGenerator = storyGenerator;\n  this.loopAgent = loopAgent;\n  this.sequentialAgent = sequentialAgent;\n}\n</code></pre>"},{"location":"agents/custom-agents/#part-2-defining-the-custom-execution-logic","title":"\u7b2c 2 \u90e8\u5206\uff1a\u5b9a\u7fa9\u81ea\u8a02\u57f7\u884c\u908f\u8f2f","text":"PythonJava <p>This method orchestrates the sub-agents using standard Python async/await and control flow.</p> <p><pre><code>@override\nasync def _run_async_impl(\n    self, ctx: InvocationContext\n) -&gt; AsyncGenerator[Event, None]:\n    \"\"\"\n    Implements the custom orchestration logic for the story workflow.\n    Uses the instance attributes assigned by Pydantic (e.g., self.story_generator).\n    \"\"\"\n    logger.info(f\"[{self.name}] Starting story generation workflow.\")\n\n    # 1. Initial Story Generation\n    logger.info(f\"[{self.name}] Running StoryGenerator...\")\n    async for event in self.story_generator.run_async(ctx):\n        logger.info(f\"[{self.name}] Event from StoryGenerator: {event.model_dump_json(indent=2, exclude_none=True)}\")\n        yield event\n\n    # Check if story was generated before proceeding\n    if \"current_story\" not in ctx.session.state or not ctx.session.state[\"current_story\"]:\n         logger.error(f\"[{self.name}] Failed to generate initial story. Aborting workflow.\")\n         return # Stop processing if initial story failed\n\n    logger.info(f\"[{self.name}] Story state after generator: {ctx.session.state.get('current_story')}\")\n\n\n    # 2. Critic-Reviser Loop\n    logger.info(f\"[{self.name}] Running CriticReviserLoop...\")\n    # Use the loop_agent instance attribute assigned during init\n    async for event in self.loop_agent.run_async(ctx):\n        logger.info(f\"[{self.name}] Event from CriticReviserLoop: {event.model_dump_json(indent=2, exclude_none=True)}\")\n        yield event\n\n    logger.info(f\"[{self.name}] Story state after loop: {ctx.session.state.get('current_story')}\")\n\n    # 3. Sequential Post-Processing (Grammar and Tone Check)\n    logger.info(f\"[{self.name}] Running PostProcessing...\")\n    # Use the sequential_agent instance attribute assigned during init\n    async for event in self.sequential_agent.run_async(ctx):\n        logger.info(f\"[{self.name}] Event from PostProcessing: {event.model_dump_json(indent=2, exclude_none=True)}\")\n        yield event\n\n    # 4. Tone-Based Conditional Logic\n    tone_check_result = ctx.session.state.get(\"tone_check_result\")\n    logger.info(f\"[{self.name}] Tone check result: {tone_check_result}\")\n\n    if tone_check_result == \"negative\":\n        logger.info(f\"[{self.name}] Tone is negative. Regenerating story...\")\n        async for event in self.story_generator.run_async(ctx):\n            logger.info(f\"[{self.name}] Event from StoryGenerator (Regen): {event.model_dump_json(indent=2, exclude_none=True)}\")\n            yield event\n    else:\n        logger.info(f\"[{self.name}] Tone is not negative. Keeping current story.\")\n        pass\n\n    logger.info(f\"[{self.name}] Workflow finished.\")\n</code></pre> Explanation of Logic:</p> <ol> <li>The initial <code>story_generator</code> runs. Its output is expected to be in <code>ctx.session.state[\"current_story\"]</code>.</li> <li>The <code>loop_agent</code> runs, which internally calls the <code>critic</code> and <code>reviser</code> sequentially for <code>max_iterations</code> times. They read/write <code>current_story</code> and <code>criticism</code> from/to the state.</li> <li>The <code>sequential_agent</code> runs, calling <code>grammar_check</code> then <code>tone_check</code>, reading <code>current_story</code> and writing <code>grammar_suggestions</code> and <code>tone_check_result</code> to the state.</li> <li>Custom Part: The <code>if</code> statement checks the <code>tone_check_result</code> from the state. If it's \"negative\", the <code>story_generator</code> is called again, overwriting the <code>current_story</code> in the state. Otherwise, the flow ends.</li> </ol> <p>The <code>runAsyncImpl</code> method orchestrates the sub-agents using RxJava's Flowable streams and operators for asynchronous control flow.</p> <p><pre><code>@Override\nprotected Flowable&lt;Event&gt; runAsyncImpl(InvocationContext invocationContext) {\n  // Implements the custom orchestration logic for the story workflow.\n  // Uses the instance attributes assigned by Pydantic (e.g., self.story_generator).\n  logger.log(Level.INFO, () -&gt; String.format(\"[%s] Starting story generation workflow.\", name()));\n\n  // Stage 1. Initial Story Generation\n  Flowable&lt;Event&gt; storyGenFlow = runStage(storyGenerator, invocationContext, \"StoryGenerator\");\n\n  // Stage 2: Critic-Reviser Loop (runs after story generation completes)\n  Flowable&lt;Event&gt; criticReviserFlow = Flowable.defer(() -&gt; {\n    if (!isStoryGenerated(invocationContext)) {\n      logger.log(Level.SEVERE,() -&gt;\n          String.format(\"[%s] Failed to generate initial story. Aborting after StoryGenerator.\",\n              name()));\n      return Flowable.empty(); // Stop further processing if no story\n    }\n      logger.log(Level.INFO, () -&gt;\n          String.format(\"[%s] Story state after generator: %s\",\n              name(), invocationContext.session().state().get(\"current_story\")));\n      return runStage(loopAgent, invocationContext, \"CriticReviserLoop\");\n  });\n\n  // Stage 3: Post-Processing (runs after critic-reviser loop completes)\n  Flowable&lt;Event&gt; postProcessingFlow = Flowable.defer(() -&gt; {\n    logger.log(Level.INFO, () -&gt;\n        String.format(\"[%s] Story state after loop: %s\",\n            name(), invocationContext.session().state().get(\"current_story\")));\n    return runStage(sequentialAgent, invocationContext, \"PostProcessing\");\n  });\n\n  // Stage 4: Conditional Regeneration (runs after post-processing completes)\n  Flowable&lt;Event&gt; conditionalRegenFlow = Flowable.defer(() -&gt; {\n    String toneCheckResult = (String) invocationContext.session().state().get(\"tone_check_result\");\n    logger.log(Level.INFO, () -&gt; String.format(\"[%s] Tone check result: %s\", name(), toneCheckResult));\n\n    if (\"negative\".equalsIgnoreCase(toneCheckResult)) {\n      logger.log(Level.INFO, () -&gt;\n          String.format(\"[%s] Tone is negative. Regenerating story...\", name()));\n      return runStage(storyGenerator, invocationContext, \"StoryGenerator (Regen)\");\n    } else {\n      logger.log(Level.INFO, () -&gt;\n          String.format(\"[%s] Tone is not negative. Keeping current story.\", name()));\n      return Flowable.empty(); // No regeneration needed\n    }\n  });\n\n  return Flowable.concatArray(storyGenFlow, criticReviserFlow, postProcessingFlow, conditionalRegenFlow)\n      .doOnComplete(() -&gt; logger.log(Level.INFO, () -&gt; String.format(\"[%s] Workflow finished.\", name())));\n}\n\n// Helper method for a single agent run stage with logging\nprivate Flowable&lt;Event&gt; runStage(BaseAgent agentToRun, InvocationContext ctx, String stageName) {\n  logger.log(Level.INFO, () -&gt; String.format(\"[%s] Running %s...\", name(), stageName));\n  return agentToRun\n      .runAsync(ctx)\n      .doOnNext(event -&gt;\n          logger.log(Level.INFO,() -&gt;\n              String.format(\"[%s] Event from %s: %s\", name(), stageName, event.toJson())))\n      .doOnError(err -&gt;\n          logger.log(Level.SEVERE,\n              String.format(\"[%s] Error in %s\", name(), stageName), err))\n      .doOnComplete(() -&gt;\n          logger.log(Level.INFO, () -&gt;\n              String.format(\"[%s] %s finished.\", name(), stageName)));\n}\n</code></pre> Explanation of Logic:</p> <ol> <li>The initial <code>storyGenerator.runAsync(invocationContext)</code> Flowable is executed. Its output is expected to be in <code>invocationContext.session().state().get(\"current_story\")</code>.</li> <li>The <code>loopAgent's</code> Flowable runs next (due to <code>Flowable.concatArray</code> and <code>Flowable.defer</code>). The LoopAgent internally calls the <code>critic</code> and <code>reviser</code> sub-agents sequentially for up to <code>maxIterations</code>. They read/write <code>current_story</code> and <code>criticism</code> from/to the state.</li> <li>Then, the <code>sequentialAgent's</code> Flowable executes. It calls the <code>grammar_check</code> then <code>tone_check</code>, reading <code>current_story</code> and writing <code>grammar_suggestions</code> and <code>tone_check_result</code> to the state.</li> <li>Custom Part: After the sequentialAgent completes, logic within a <code>Flowable.defer</code> checks the \"tone_check_result\" from <code>invocationContext.session().state()</code>. If it's \"negative\", the <code>storyGenerator</code> Flowable is conditionally concatenated and executed again, overwriting \"current_story\". Otherwise, an empty Flowable is used, and the overall workflow proceeds to completion.</li> </ol>"},{"location":"agents/custom-agents/#part-3-defining-the-llm-sub-agents","title":"\u7b2c 3 \u90e8\u5206\uff1a\u5b9a\u7fa9\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5b50\u4ee3\u7406","text":"<p>\u9019\u4e9b\u662f\u6a19\u6e96\u7684 <code>LlmAgent</code> \u5b9a\u7fa9\uff0c\u8ca0\u8cac\u7279\u5b9a\u4efb\u52d9\u3002\u5b83\u5011\u7684 <code>output key</code> \u53c3\u6578\u5c0d\u65bc\u5c07\u7d50\u679c\u653e\u5165 <code>session.state</code> \u4e2d\u81f3\u95dc\u91cd\u8981\uff0c\u5176\u4ed6 agent \u6216\u81ea\u8a02\u5354\u8abf\u5668\u53ef\u4ee5\u5b58\u53d6\u9019\u4e9b\u7d50\u679c\u3002</p> <p>Direct State Injection in Instructions</p> <p>\u8acb\u6ce8\u610f <code>story_generator</code> \u7684\u6307\u4ee4\u3002<code>{var}</code> \u8a9e\u6cd5\u662f\u4e00\u500b\u5360\u4f4d\u7b26\u3002\u5728\u6307\u4ee4\u50b3\u9001\u7d66\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u4e4b\u524d\uff0cAgent Development Kit (ADK) \u6846\u67b6\u6703\u81ea\u52d5\u5c07 (\u4f8b\u5982\uff1a<code>{topic}</code>) \u66ff\u63db\u70ba <code>session.state['topic']</code> \u7684\u503c\u3002\u9019\u662f\u5efa\u8b70\u70ba agent \u63d0\u4f9b\u60c5\u5883\u8cc7\u8a0a\u7684\u65b9\u5f0f\uff0c\u4e5f\u5c31\u662f\u5728\u6307\u4ee4\u4e2d\u4f7f\u7528\u6a23\u677f\uff08templating\uff09\u3002\u5982\u9700\u66f4\u591a\u7d30\u7bc0\uff0c\u8acb\u53c3\u95b1 State documentation\u3002</p> PythonJava <pre><code>GEMINI_2_FLASH = \"gemini-2.0-flash\" # Define model constant\n# --- Define the individual LLM agents ---\nstory_generator = LlmAgent(\n    name=\"StoryGenerator\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a story writer. Write a short story (around 100 words), on the following topic: {topic}\"\"\",\n    input_schema=None,\n    output_key=\"current_story\",  # Key for storing output in session state\n)\n\ncritic = LlmAgent(\n    name=\"Critic\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a story critic. Review the story provided: {{current_story}}. Provide 1-2 sentences of constructive criticism\non how to improve it. Focus on plot or character.\"\"\",\n    input_schema=None,\n    output_key=\"criticism\",  # Key for storing criticism in session state\n)\n\nreviser = LlmAgent(\n    name=\"Reviser\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a story reviser. Revise the story provided: {{current_story}}, based on the criticism in\n{{criticism}}. Output only the revised story.\"\"\",\n    input_schema=None,\n    output_key=\"current_story\",  # Overwrites the original story\n)\n\ngrammar_check = LlmAgent(\n    name=\"GrammarCheck\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a grammar checker. Check the grammar of the story provided: {current_story}. Output only the suggested\ncorrections as a list, or output 'Grammar is good!' if there are no errors.\"\"\",\n    input_schema=None,\n    output_key=\"grammar_suggestions\",\n)\n\ntone_check = LlmAgent(\n    name=\"ToneCheck\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a tone analyzer. Analyze the tone of the story provided: {current_story}. Output only one word: 'positive' if\nthe tone is generally positive, 'negative' if the tone is generally negative, or 'neutral'\notherwise.\"\"\",\n    input_schema=None,\n    output_key=\"tone_check_result\", # This agent's output determines the conditional flow\n)\n</code></pre> <pre><code>// --- Define the individual LLM agents ---\nLlmAgent storyGenerator =\n    LlmAgent.builder()\n        .name(\"StoryGenerator\")\n        .model(MODEL_NAME)\n        .description(\"Generates the initial story.\")\n        .instruction(\n            \"\"\"\n          You are a story writer. Write a short story (around 100 words) about a cat,\n          based on the topic: {topic}\n          \"\"\")\n        .inputSchema(null)\n        .outputKey(\"current_story\") // Key for storing output in session state\n        .build();\n\nLlmAgent critic =\n    LlmAgent.builder()\n        .name(\"Critic\")\n        .model(MODEL_NAME)\n        .description(\"Critiques the story.\")\n        .instruction(\n            \"\"\"\n          You are a story critic. Review the story: {current_story}. Provide 1-2 sentences of constructive criticism\n          on how to improve it. Focus on plot or character.\n          \"\"\")\n        .inputSchema(null)\n        .outputKey(\"criticism\") // Key for storing criticism in session state\n        .build();\n\nLlmAgent reviser =\n    LlmAgent.builder()\n        .name(\"Reviser\")\n        .model(MODEL_NAME)\n        .description(\"Revises the story based on criticism.\")\n        .instruction(\n            \"\"\"\n          You are a story reviser. Revise the story: {current_story}, based on the criticism: {criticism}. Output only the revised story.\n          \"\"\")\n        .inputSchema(null)\n        .outputKey(\"current_story\") // Overwrites the original story\n        .build();\n\nLlmAgent grammarCheck =\n    LlmAgent.builder()\n        .name(\"GrammarCheck\")\n        .model(MODEL_NAME)\n        .description(\"Checks grammar and suggests corrections.\")\n        .instruction(\n            \"\"\"\n           You are a grammar checker. Check the grammar of the story: {current_story}. Output only the suggested\n           corrections as a list, or output 'Grammar is good!' if there are no errors.\n           \"\"\")\n        .outputKey(\"grammar_suggestions\")\n        .build();\n\nLlmAgent toneCheck =\n    LlmAgent.builder()\n        .name(\"ToneCheck\")\n        .model(MODEL_NAME)\n        .description(\"Analyzes the tone of the story.\")\n        .instruction(\n            \"\"\"\n          You are a tone analyzer. Analyze the tone of the story: {current_story}. Output only one word: 'positive' if\n          the tone is generally positive, 'negative' if the tone is generally negative, or 'neutral'\n          otherwise.\n          \"\"\")\n        .outputKey(\"tone_check_result\") // This agent's output determines the conditional flow\n        .build();\n\nLoopAgent loopAgent =\n    LoopAgent.builder()\n        .name(\"CriticReviserLoop\")\n        .description(\"Iteratively critiques and revises the story.\")\n        .subAgents(critic, reviser)\n        .maxIterations(2)\n        .build();\n\nSequentialAgent sequentialAgent =\n    SequentialAgent.builder()\n        .name(\"PostProcessing\")\n        .description(\"Performs grammar and tone checks sequentially.\")\n        .subAgents(grammarCheck, toneCheck)\n        .build();\n</code></pre>"},{"location":"agents/custom-agents/#part-4-instantiating-and-running-the-custom-agent","title":"\u7b2c 4 \u90e8\u5206\uff1a\u5be6\u4f8b\u5316\u4e26\u57f7\u884c\u81ea\u8a02 agent","text":"<p>\u6700\u5f8c\uff0c\u60a8\u53ef\u4ee5\u5be6\u4f8b\u5316\u60a8\u7684 <code>StoryFlowAgent</code>\uff0c\u4e26\u50cf\u5e73\u5e38\u4e00\u6a23\u4f7f\u7528 <code>Runner</code>\u3002</p> PythonJava <pre><code># --- Create the custom agent instance ---\nstory_flow_agent = StoryFlowAgent(\n    name=\"StoryFlowAgent\",\n    story_generator=story_generator,\n    critic=critic,\n    reviser=reviser,\n    grammar_check=grammar_check,\n    tone_check=tone_check,\n)\n\nINITIAL_STATE = {\"topic\": \"a brave kitten exploring a haunted house\"}\n\n# --- Setup Runner and Session ---\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID, state=INITIAL_STATE)\n    logger.info(f\"Initial session state: {session.state}\")\n    runner = Runner(\n        agent=story_flow_agent, # Pass the custom orchestrator agent\n        app_name=APP_NAME,\n        session_service=session_service\n    )\n    return session_service, runner\n\n# --- Function to Interact with the Agent ---\nasync def call_agent_async(user_input_topic: str):\n    \"\"\"\n    Sends a new topic to the agent (overwriting the initial one if needed)\n    and runs the workflow.\n    \"\"\"\n\n    session_service, runner = await setup_session_and_runner()\n\n    current_session = await session_service.get_session(app_name=APP_NAME, \n                                                  user_id=USER_ID, \n                                                  session_id=SESSION_ID)\n    if not current_session:\n        logger.error(\"Session not found!\")\n        return\n\n    current_session.state[\"topic\"] = user_input_topic\n    logger.info(f\"Updated session state topic to: {user_input_topic}\")\n\n    content = types.Content(role='user', parts=[types.Part(text=f\"Generate a story about: {user_input_topic}\")])\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    final_response = \"No final response captured.\"\n    async for event in events:\n        if event.is_final_response() and event.content and event.content.parts:\n            logger.info(f\"Potential final response from [{event.author}]: {event.content.parts[0].text}\")\n            final_response = event.content.parts[0].text\n\n    print(\"\\n--- Agent Interaction Result ---\")\n    print(\"Agent Final Response: \", final_response)\n\n    final_session = await session_service.get_session(app_name=APP_NAME, \n                                                user_id=USER_ID, \n                                                session_id=SESSION_ID)\n    print(\"Final Session State:\")\n    import json\n    print(json.dumps(final_session.state, indent=2))\n    print(\"-------------------------------\\n\")\n\n# --- Run the Agent ---\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"a lonely robot finding a friend in a junkyard\")\n</code></pre> <pre><code>// --- Function to Interact with the Agent ---\n// Sends a new topic to the agent (overwriting the initial one if needed)\n// and runs the workflow.\npublic static void runAgent(StoryFlowAgentExample agent, String userTopic) {\n  // --- Setup Runner and Session ---\n  InMemoryRunner runner = new InMemoryRunner(agent);\n\n  Map&lt;String, Object&gt; initialState = new HashMap&lt;&gt;();\n  initialState.put(\"topic\", \"a brave kitten exploring a haunted house\");\n\n  Session session =\n      runner\n          .sessionService()\n          .createSession(APP_NAME, USER_ID, new ConcurrentHashMap&lt;&gt;(initialState), SESSION_ID)\n          .blockingGet();\n  logger.log(Level.INFO, () -&gt; String.format(\"Initial session state: %s\", session.state()));\n\n  session.state().put(\"topic\", userTopic); // Update the state in the retrieved session\n  logger.log(Level.INFO, () -&gt; String.format(\"Updated session state topic to: %s\", userTopic));\n\n  Content userMessage = Content.fromParts(Part.fromText(\"Generate a story about: \" + userTopic));\n  // Use the modified session object for the run\n  Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n  final String[] finalResponse = {\"No final response captured.\"};\n  eventStream.blockingForEach(\n      event -&gt; {\n        if (event.finalResponse() &amp;&amp; event.content().isPresent()) {\n          String author = event.author() != null ? event.author() : \"UNKNOWN_AUTHOR\";\n          Optional&lt;String&gt; textOpt =\n              event\n                  .content()\n                  .flatMap(Content::parts)\n                  .filter(parts -&gt; !parts.isEmpty())\n                  .map(parts -&gt; parts.get(0).text().orElse(\"\"));\n\n          logger.log(Level.INFO, () -&gt;\n              String.format(\"Potential final response from [%s]: %s\", author, textOpt.orElse(\"N/A\")));\n          textOpt.ifPresent(text -&gt; finalResponse[0] = text);\n        }\n      });\n\n  System.out.println(\"\\n--- Agent Interaction Result ---\");\n  System.out.println(\"Agent Final Response: \" + finalResponse[0]);\n\n  // Retrieve session again to see the final state after the run\n  Session finalSession =\n      runner\n          .sessionService()\n          .getSession(APP_NAME, USER_ID, SESSION_ID, Optional.empty())\n          .blockingGet();\n\n  assert finalSession != null;\n  System.out.println(\"Final Session State:\" + finalSession.state());\n  System.out.println(\"-------------------------------\\n\");\n}\n</code></pre> <p>(\u6ce8\u610f\uff1a\u5b8c\u6574\u53ef\u57f7\u884c\u7a0b\u5f0f\u78bc\uff08\u5305\u542b import \u8207\u57f7\u884c\u908f\u8f2f\uff09\u8acb\u53c3\u898b\u4e0b\u65b9\u9023\u7d50\u3002)</p>"},{"location":"agents/custom-agents/#_3","title":"\u5b8c\u6574\u7a0b\u5f0f\u78bc\u7bc4\u4f8b","text":"Storyflow Agent PythonJava <pre><code># Full runnable code for the StoryFlowAgent example\n# Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport logging\nfrom typing import AsyncGenerator\nfrom typing_extensions import override\n\nfrom google.adk.agents import LlmAgent, BaseAgent, LoopAgent, SequentialAgent\nfrom google.adk.agents.invocation_context import InvocationContext\nfrom google.genai import types\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.runners import Runner\nfrom google.adk.events import Event\nfrom pydantic import BaseModel, Field\n\n# --- Constants ---\nAPP_NAME = \"story_app\"\nUSER_ID = \"12345\"\nSESSION_ID = \"123344\"\nGEMINI_2_FLASH = \"gemini-2.0-flash\"\n\n# --- Configure Logging ---\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\n# --- Custom Orchestrator Agent ---\nclass StoryFlowAgent(BaseAgent):\n    \"\"\"\n    Custom agent for a story generation and refinement workflow.\n\n    This agent orchestrates a sequence of LLM agents to generate a story,\n    critique it, revise it, check grammar and tone, and potentially\n    regenerate the story if the tone is negative.\n    \"\"\"\n\n    # --- Field Declarations for Pydantic ---\n    # Declare the agents passed during initialization as class attributes with type hints\n    story_generator: LlmAgent\n    critic: LlmAgent\n    reviser: LlmAgent\n    grammar_check: LlmAgent\n    tone_check: LlmAgent\n\n    loop_agent: LoopAgent\n    sequential_agent: SequentialAgent\n\n    # model_config allows setting Pydantic configurations if needed, e.g., arbitrary_types_allowed\n    model_config = {\"arbitrary_types_allowed\": True}\n\n    def __init__(\n        self,\n        name: str,\n        story_generator: LlmAgent,\n        critic: LlmAgent,\n        reviser: LlmAgent,\n        grammar_check: LlmAgent,\n        tone_check: LlmAgent,\n    ):\n        \"\"\"\n        Initializes the StoryFlowAgent.\n\n        Args:\n            name: The name of the agent.\n            story_generator: An LlmAgent to generate the initial story.\n            critic: An LlmAgent to critique the story.\n            reviser: An LlmAgent to revise the story based on criticism.\n            grammar_check: An LlmAgent to check the grammar.\n            tone_check: An LlmAgent to analyze the tone.\n        \"\"\"\n        # Create internal agents *before* calling super().__init__\n        loop_agent = LoopAgent(\n            name=\"CriticReviserLoop\", sub_agents=[critic, reviser], max_iterations=2\n        )\n        sequential_agent = SequentialAgent(\n            name=\"PostProcessing\", sub_agents=[grammar_check, tone_check]\n        )\n\n        # Define the sub_agents list for the framework\n        sub_agents_list = [\n            story_generator,\n            loop_agent,\n            sequential_agent,\n        ]\n\n        # Pydantic will validate and assign them based on the class annotations.\n        super().__init__(\n            name=name,\n            story_generator=story_generator,\n            critic=critic,\n            reviser=reviser,\n            grammar_check=grammar_check,\n            tone_check=tone_check,\n            loop_agent=loop_agent,\n            sequential_agent=sequential_agent,\n            sub_agents=sub_agents_list, # Pass the sub_agents list directly\n        )\n\n    @override\n    async def _run_async_impl(\n        self, ctx: InvocationContext\n    ) -&gt; AsyncGenerator[Event, None]:\n        \"\"\"\n        Implements the custom orchestration logic for the story workflow.\n        Uses the instance attributes assigned by Pydantic (e.g., self.story_generator).\n        \"\"\"\n        logger.info(f\"[{self.name}] Starting story generation workflow.\")\n\n        # 1. Initial Story Generation\n        logger.info(f\"[{self.name}] Running StoryGenerator...\")\n        async for event in self.story_generator.run_async(ctx):\n            logger.info(f\"[{self.name}] Event from StoryGenerator: {event.model_dump_json(indent=2, exclude_none=True)}\")\n            yield event\n\n        # Check if story was generated before proceeding\n        if \"current_story\" not in ctx.session.state or not ctx.session.state[\"current_story\"]:\n             logger.error(f\"[{self.name}] Failed to generate initial story. Aborting workflow.\")\n             return # Stop processing if initial story failed\n\n        logger.info(f\"[{self.name}] Story state after generator: {ctx.session.state.get('current_story')}\")\n\n\n        # 2. Critic-Reviser Loop\n        logger.info(f\"[{self.name}] Running CriticReviserLoop...\")\n        # Use the loop_agent instance attribute assigned during init\n        async for event in self.loop_agent.run_async(ctx):\n            logger.info(f\"[{self.name}] Event from CriticReviserLoop: {event.model_dump_json(indent=2, exclude_none=True)}\")\n            yield event\n\n        logger.info(f\"[{self.name}] Story state after loop: {ctx.session.state.get('current_story')}\")\n\n        # 3. Sequential Post-Processing (Grammar and Tone Check)\n        logger.info(f\"[{self.name}] Running PostProcessing...\")\n        # Use the sequential_agent instance attribute assigned during init\n        async for event in self.sequential_agent.run_async(ctx):\n            logger.info(f\"[{self.name}] Event from PostProcessing: {event.model_dump_json(indent=2, exclude_none=True)}\")\n            yield event\n\n        # 4. Tone-Based Conditional Logic\n        tone_check_result = ctx.session.state.get(\"tone_check_result\")\n        logger.info(f\"[{self.name}] Tone check result: {tone_check_result}\")\n\n        if tone_check_result == \"negative\":\n            logger.info(f\"[{self.name}] Tone is negative. Regenerating story...\")\n            async for event in self.story_generator.run_async(ctx):\n                logger.info(f\"[{self.name}] Event from StoryGenerator (Regen): {event.model_dump_json(indent=2, exclude_none=True)}\")\n                yield event\n        else:\n            logger.info(f\"[{self.name}] Tone is not negative. Keeping current story.\")\n            pass\n\n        logger.info(f\"[{self.name}] Workflow finished.\")\n\n# --- Define the individual LLM agents ---\nstory_generator = LlmAgent(\n    name=\"StoryGenerator\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a story writer. Write a short story (around 100 words), on the following topic: {topic}\"\"\",\n    input_schema=None,\n    output_key=\"current_story\",  # Key for storing output in session state\n)\n\ncritic = LlmAgent(\n    name=\"Critic\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a story critic. Review the story provided: {{current_story}}. Provide 1-2 sentences of constructive criticism\non how to improve it. Focus on plot or character.\"\"\",\n    input_schema=None,\n    output_key=\"criticism\",  # Key for storing criticism in session state\n)\n\nreviser = LlmAgent(\n    name=\"Reviser\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a story reviser. Revise the story provided: {{current_story}}, based on the criticism in\n{{criticism}}. Output only the revised story.\"\"\",\n    input_schema=None,\n    output_key=\"current_story\",  # Overwrites the original story\n)\n\ngrammar_check = LlmAgent(\n    name=\"GrammarCheck\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a grammar checker. Check the grammar of the story provided: {current_story}. Output only the suggested\ncorrections as a list, or output 'Grammar is good!' if there are no errors.\"\"\",\n    input_schema=None,\n    output_key=\"grammar_suggestions\",\n)\n\ntone_check = LlmAgent(\n    name=\"ToneCheck\",\n    model=GEMINI_2_FLASH,\n    instruction=\"\"\"You are a tone analyzer. Analyze the tone of the story provided: {current_story}. Output only one word: 'positive' if\nthe tone is generally positive, 'negative' if the tone is generally negative, or 'neutral'\notherwise.\"\"\",\n    input_schema=None,\n    output_key=\"tone_check_result\", # This agent's output determines the conditional flow\n)\n\n# --- Create the custom agent instance ---\nstory_flow_agent = StoryFlowAgent(\n    name=\"StoryFlowAgent\",\n    story_generator=story_generator,\n    critic=critic,\n    reviser=reviser,\n    grammar_check=grammar_check,\n    tone_check=tone_check,\n)\n\nINITIAL_STATE = {\"topic\": \"a brave kitten exploring a haunted house\"}\n\n# --- Setup Runner and Session ---\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID, state=INITIAL_STATE)\n    logger.info(f\"Initial session state: {session.state}\")\n    runner = Runner(\n        agent=story_flow_agent, # Pass the custom orchestrator agent\n        app_name=APP_NAME,\n        session_service=session_service\n    )\n    return session_service, runner\n\n# --- Function to Interact with the Agent ---\nasync def call_agent_async(user_input_topic: str):\n    \"\"\"\n    Sends a new topic to the agent (overwriting the initial one if needed)\n    and runs the workflow.\n    \"\"\"\n\n    session_service, runner = await setup_session_and_runner()\n\n    current_session = await session_service.get_session(app_name=APP_NAME, \n                                                  user_id=USER_ID, \n                                                  session_id=SESSION_ID)\n    if not current_session:\n        logger.error(\"Session not found!\")\n        return\n\n    current_session.state[\"topic\"] = user_input_topic\n    logger.info(f\"Updated session state topic to: {user_input_topic}\")\n\n    content = types.Content(role='user', parts=[types.Part(text=f\"Generate a story about: {user_input_topic}\")])\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    final_response = \"No final response captured.\"\n    async for event in events:\n        if event.is_final_response() and event.content and event.content.parts:\n            logger.info(f\"Potential final response from [{event.author}]: {event.content.parts[0].text}\")\n            final_response = event.content.parts[0].text\n\n    print(\"\\n--- Agent Interaction Result ---\")\n    print(\"Agent Final Response: \", final_response)\n\n    final_session = await session_service.get_session(app_name=APP_NAME, \n                                                user_id=USER_ID, \n                                                session_id=SESSION_ID)\n    print(\"Final Session State:\")\n    import json\n    print(json.dumps(final_session.state, indent=2))\n    print(\"-------------------------------\\n\")\n\n# --- Run the Agent ---\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"a lonely robot finding a friend in a junkyard\")\n</code></pre> <pre><code># Full runnable code for the StoryFlowAgent example\n\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.InvocationContext;\nimport com.google.adk.agents.LoopAgent;\nimport com.google.adk.agents.SequentialAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class StoryFlowAgentExample extends BaseAgent {\n\n  // --- Constants ---\n  private static final String APP_NAME = \"story_app\";\n  private static final String USER_ID = \"user_12345\";\n  private static final String SESSION_ID = \"session_123344\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\"; // Ensure this model is available\n\n  private static final Logger logger = Logger.getLogger(StoryFlowAgentExample.class.getName());\n\n  private final LlmAgent storyGenerator;\n  private final LoopAgent loopAgent;\n  private final SequentialAgent sequentialAgent;\n\n  public StoryFlowAgentExample(\n      String name, LlmAgent storyGenerator, LoopAgent loopAgent, SequentialAgent sequentialAgent) {\n    super(\n        name,\n        \"Orchestrates story generation, critique, revision, and checks.\",\n        List.of(storyGenerator, loopAgent, sequentialAgent),\n        null,\n        null);\n\n    this.storyGenerator = storyGenerator;\n    this.loopAgent = loopAgent;\n    this.sequentialAgent = sequentialAgent;\n  }\n\n  public static void main(String[] args) {\n\n    // --- Define the individual LLM agents ---\n    LlmAgent storyGenerator =\n        LlmAgent.builder()\n            .name(\"StoryGenerator\")\n            .model(MODEL_NAME)\n            .description(\"Generates the initial story.\")\n            .instruction(\n                \"\"\"\n              You are a story writer. Write a short story (around 100 words) about a cat,\n              based on the topic: {topic}\n              \"\"\")\n            .inputSchema(null)\n            .outputKey(\"current_story\") // Key for storing output in session state\n            .build();\n\n    LlmAgent critic =\n        LlmAgent.builder()\n            .name(\"Critic\")\n            .model(MODEL_NAME)\n            .description(\"Critiques the story.\")\n            .instruction(\n                \"\"\"\n              You are a story critic. Review the story: {current_story}. Provide 1-2 sentences of constructive criticism\n              on how to improve it. Focus on plot or character.\n              \"\"\")\n            .inputSchema(null)\n            .outputKey(\"criticism\") // Key for storing criticism in session state\n            .build();\n\n    LlmAgent reviser =\n        LlmAgent.builder()\n            .name(\"Reviser\")\n            .model(MODEL_NAME)\n            .description(\"Revises the story based on criticism.\")\n            .instruction(\n                \"\"\"\n              You are a story reviser. Revise the story: {current_story}, based on the criticism: {criticism}. Output only the revised story.\n              \"\"\")\n            .inputSchema(null)\n            .outputKey(\"current_story\") // Overwrites the original story\n            .build();\n\n    LlmAgent grammarCheck =\n        LlmAgent.builder()\n            .name(\"GrammarCheck\")\n            .model(MODEL_NAME)\n            .description(\"Checks grammar and suggests corrections.\")\n            .instruction(\n                \"\"\"\n               You are a grammar checker. Check the grammar of the story: {current_story}. Output only the suggested\n               corrections as a list, or output 'Grammar is good!' if there are no errors.\n               \"\"\")\n            .outputKey(\"grammar_suggestions\")\n            .build();\n\n    LlmAgent toneCheck =\n        LlmAgent.builder()\n            .name(\"ToneCheck\")\n            .model(MODEL_NAME)\n            .description(\"Analyzes the tone of the story.\")\n            .instruction(\n                \"\"\"\n              You are a tone analyzer. Analyze the tone of the story: {current_story}. Output only one word: 'positive' if\n              the tone is generally positive, 'negative' if the tone is generally negative, or 'neutral'\n              otherwise.\n              \"\"\")\n            .outputKey(\"tone_check_result\") // This agent's output determines the conditional flow\n            .build();\n\n    LoopAgent loopAgent =\n        LoopAgent.builder()\n            .name(\"CriticReviserLoop\")\n            .description(\"Iteratively critiques and revises the story.\")\n            .subAgents(critic, reviser)\n            .maxIterations(2)\n            .build();\n\n    SequentialAgent sequentialAgent =\n        SequentialAgent.builder()\n            .name(\"PostProcessing\")\n            .description(\"Performs grammar and tone checks sequentially.\")\n            .subAgents(grammarCheck, toneCheck)\n            .build();\n\n\n    StoryFlowAgentExample storyFlowAgentExample =\n        new StoryFlowAgentExample(APP_NAME, storyGenerator, loopAgent, sequentialAgent);\n\n    // --- Run the Agent ---\n    runAgent(storyFlowAgentExample, \"a lonely robot finding a friend in a junkyard\");\n  }\n\n  // --- Function to Interact with the Agent ---\n  // Sends a new topic to the agent (overwriting the initial one if needed)\n  // and runs the workflow.\n  public static void runAgent(StoryFlowAgentExample agent, String userTopic) {\n    // --- Setup Runner and Session ---\n    InMemoryRunner runner = new InMemoryRunner(agent);\n\n    Map&lt;String, Object&gt; initialState = new HashMap&lt;&gt;();\n    initialState.put(\"topic\", \"a brave kitten exploring a haunted house\");\n\n    Session session =\n        runner\n            .sessionService()\n            .createSession(APP_NAME, USER_ID, new ConcurrentHashMap&lt;&gt;(initialState), SESSION_ID)\n            .blockingGet();\n    logger.log(Level.INFO, () -&gt; String.format(\"Initial session state: %s\", session.state()));\n\n    session.state().put(\"topic\", userTopic); // Update the state in the retrieved session\n    logger.log(Level.INFO, () -&gt; String.format(\"Updated session state topic to: %s\", userTopic));\n\n    Content userMessage = Content.fromParts(Part.fromText(\"Generate a story about: \" + userTopic));\n    // Use the modified session object for the run\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    final String[] finalResponse = {\"No final response captured.\"};\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse() &amp;&amp; event.content().isPresent()) {\n            String author = event.author() != null ? event.author() : \"UNKNOWN_AUTHOR\";\n            Optional&lt;String&gt; textOpt =\n                event\n                    .content()\n                    .flatMap(Content::parts)\n                    .filter(parts -&gt; !parts.isEmpty())\n                    .map(parts -&gt; parts.get(0).text().orElse(\"\"));\n\n            logger.log(Level.INFO, () -&gt;\n                String.format(\"Potential final response from [%s]: %s\", author, textOpt.orElse(\"N/A\")));\n            textOpt.ifPresent(text -&gt; finalResponse[0] = text);\n          }\n        });\n\n    System.out.println(\"\\n--- Agent Interaction Result ---\");\n    System.out.println(\"Agent Final Response: \" + finalResponse[0]);\n\n    // Retrieve session again to see the final state after the run\n    Session finalSession =\n        runner\n            .sessionService()\n            .getSession(APP_NAME, USER_ID, SESSION_ID, Optional.empty())\n            .blockingGet();\n\n    assert finalSession != null;\n    System.out.println(\"Final Session State:\" + finalSession.state());\n    System.out.println(\"-------------------------------\\n\");\n  }\n\n  private boolean isStoryGenerated(InvocationContext ctx) {\n    Object currentStoryObj = ctx.session().state().get(\"current_story\");\n    return currentStoryObj != null &amp;&amp; !String.valueOf(currentStoryObj).isEmpty();\n  }\n\n  @Override\n  protected Flowable&lt;Event&gt; runAsyncImpl(InvocationContext invocationContext) {\n    // Implements the custom orchestration logic for the story workflow.\n    // Uses the instance attributes assigned by Pydantic (e.g., self.story_generator).\n    logger.log(Level.INFO, () -&gt; String.format(\"[%s] Starting story generation workflow.\", name()));\n\n    // Stage 1. Initial Story Generation\n    Flowable&lt;Event&gt; storyGenFlow = runStage(storyGenerator, invocationContext, \"StoryGenerator\");\n\n    // Stage 2: Critic-Reviser Loop (runs after story generation completes)\n    Flowable&lt;Event&gt; criticReviserFlow = Flowable.defer(() -&gt; {\n      if (!isStoryGenerated(invocationContext)) {\n        logger.log(Level.SEVERE,() -&gt;\n            String.format(\"[%s] Failed to generate initial story. Aborting after StoryGenerator.\",\n                name()));\n        return Flowable.empty(); // Stop further processing if no story\n      }\n        logger.log(Level.INFO, () -&gt;\n            String.format(\"[%s] Story state after generator: %s\",\n                name(), invocationContext.session().state().get(\"current_story\")));\n        return runStage(loopAgent, invocationContext, \"CriticReviserLoop\");\n    });\n\n    // Stage 3: Post-Processing (runs after critic-reviser loop completes)\n    Flowable&lt;Event&gt; postProcessingFlow = Flowable.defer(() -&gt; {\n      logger.log(Level.INFO, () -&gt;\n          String.format(\"[%s] Story state after loop: %s\",\n              name(), invocationContext.session().state().get(\"current_story\")));\n      return runStage(sequentialAgent, invocationContext, \"PostProcessing\");\n    });\n\n    // Stage 4: Conditional Regeneration (runs after post-processing completes)\n    Flowable&lt;Event&gt; conditionalRegenFlow = Flowable.defer(() -&gt; {\n      String toneCheckResult = (String) invocationContext.session().state().get(\"tone_check_result\");\n      logger.log(Level.INFO, () -&gt; String.format(\"[%s] Tone check result: %s\", name(), toneCheckResult));\n\n      if (\"negative\".equalsIgnoreCase(toneCheckResult)) {\n        logger.log(Level.INFO, () -&gt;\n            String.format(\"[%s] Tone is negative. Regenerating story...\", name()));\n        return runStage(storyGenerator, invocationContext, \"StoryGenerator (Regen)\");\n      } else {\n        logger.log(Level.INFO, () -&gt;\n            String.format(\"[%s] Tone is not negative. Keeping current story.\", name()));\n        return Flowable.empty(); // No regeneration needed\n      }\n    });\n\n    return Flowable.concatArray(storyGenFlow, criticReviserFlow, postProcessingFlow, conditionalRegenFlow)\n        .doOnComplete(() -&gt; logger.log(Level.INFO, () -&gt; String.format(\"[%s] Workflow finished.\", name())));\n  }\n\n  // Helper method for a single agent run stage with logging\n  private Flowable&lt;Event&gt; runStage(BaseAgent agentToRun, InvocationContext ctx, String stageName) {\n    logger.log(Level.INFO, () -&gt; String.format(\"[%s] Running %s...\", name(), stageName));\n    return agentToRun\n        .runAsync(ctx)\n        .doOnNext(event -&gt;\n            logger.log(Level.INFO,() -&gt;\n                String.format(\"[%s] Event from %s: %s\", name(), stageName, event.toJson())))\n        .doOnError(err -&gt;\n            logger.log(Level.SEVERE,\n                String.format(\"[%s] Error in %s\", name(), stageName), err))\n        .doOnComplete(() -&gt;\n            logger.log(Level.INFO, () -&gt;\n                String.format(\"[%s] %s finished.\", name(), stageName)));\n  }\n\n  @Override\n  protected Flowable&lt;Event&gt; runLiveImpl(InvocationContext invocationContext) {\n    return Flowable.error(new UnsupportedOperationException(\"runLive not implemented.\"));\n  }\n}\n</code></pre>"},{"location":"agents/index.en/","title":"Agents","text":"<p>In the Agent Development Kit (ADK), an Agent is a self-contained execution unit designed to act autonomously to achieve specific goals. Agents can perform tasks, interact with users, utilize external tools, and coordinate with other agents.</p> <p>The foundation for all agents in ADK is the <code>BaseAgent</code> class. It serves as the fundamental blueprint. To create functional agents, you typically extend <code>BaseAgent</code> in one of three main ways, catering to different needs \u2013 from intelligent reasoning to structured process control.</p> <p></p>"},{"location":"agents/index.en/#core-agent-categories","title":"Core Agent Categories","text":"<p>ADK provides distinct agent categories to build sophisticated applications:</p> <ol> <li> <p>LLM Agents (<code>LlmAgent</code>, <code>Agent</code>): These agents utilize Large Language Models (LLMs) as their core engine to understand natural language, reason, plan, generate responses, and dynamically decide how to proceed or which tools to use, making them ideal for flexible, language-centric tasks. Learn more about LLM Agents...</p> </li> <li> <p>Workflow Agents (<code>SequentialAgent</code>, <code>ParallelAgent</code>, <code>LoopAgent</code>): These specialized agents control the execution flow of other agents in predefined, deterministic patterns (sequence, parallel, or loop) without using an LLM for the flow control itself, perfect for structured processes needing predictable execution. Explore Workflow Agents...</p> </li> <li> <p>Custom Agents: Created by extending <code>BaseAgent</code> directly, these agents allow you to implement unique operational logic, specific control flows, or specialized integrations not covered by the standard types, catering to highly tailored application requirements. Discover how to build Custom Agents...</p> </li> </ol>"},{"location":"agents/index.en/#choosing-the-right-agent-type","title":"Choosing the Right Agent Type","text":"<p>The following table provides a high-level comparison to help distinguish between the agent types. As you explore each type in more detail in the subsequent sections, these distinctions will become clearer.</p> Feature LLM Agent (<code>LlmAgent</code>) Workflow Agent Custom Agent (<code>BaseAgent</code> subclass) Primary Function Reasoning, Generation, Tool Use Controlling Agent Execution Flow Implementing Unique Logic/Integrations Core Engine Large Language Model (LLM) Predefined Logic (Sequence, Parallel, Loop) Custom Code Determinism Non-deterministic (Flexible) Deterministic (Predictable) Can be either, based on implementation Primary Use Language tasks, Dynamic decisions Structured processes, Orchestration Tailored requirements, Specific workflows"},{"location":"agents/index.en/#agents-working-together-multi-agent-systems","title":"Agents Working Together: Multi-Agent Systems","text":"<p>While each agent type serves a distinct purpose, the true power often comes from combining them. Complex applications frequently employ multi-agent architectures where:</p> <ul> <li>LLM Agents handle intelligent, language-based task execution.</li> <li>Workflow Agents manage the overall process flow using standard patterns.</li> <li>Custom Agents provide specialized capabilities or rules needed for unique integrations.</li> </ul> <p>Understanding these core types is the first step toward building sophisticated, capable AI applications with ADK.</p>"},{"location":"agents/index.en/#whats-next","title":"What's Next?","text":"<p>Now that you have an overview of the different agent types available in ADK, dive deeper into how they work and how to use them effectively:</p> <ul> <li>LLM Agents: Explore how to configure agents powered by large language models, including setting instructions, providing tools, and enabling advanced features like planning and code execution.</li> <li>Workflow Agents: Learn how to orchestrate tasks using <code>SequentialAgent</code>, <code>ParallelAgent</code>, and <code>LoopAgent</code> for structured and predictable processes.</li> <li>Custom Agents: Discover the principles of extending <code>BaseAgent</code> to build agents with unique logic and integrations tailored to your specific needs.</li> <li>Multi-Agents: Understand how to combine different agent types to create sophisticated, collaborative systems capable of tackling complex problems.</li> <li>Models: Learn about the different LLM integrations available and how to select the right model for your agents.</li> </ul>"},{"location":"agents/llm-agents.en/","title":"LLM Agent","text":"<p>The <code>LlmAgent</code> (often aliased simply as <code>Agent</code>) is a core component in ADK, acting as the \"thinking\" part of your application. It leverages the power of a Large Language Model (LLM) for reasoning, understanding natural language, making decisions, generating responses, and interacting with tools.</p> <p>Unlike deterministic Workflow Agents that follow predefined execution paths, <code>LlmAgent</code> behavior is non-deterministic. It uses the LLM to interpret instructions and context, deciding dynamically how to proceed, which tools to use (if any), or whether to transfer control to another agent.</p> <p>Building an effective <code>LlmAgent</code> involves defining its identity, clearly guiding its behavior through instructions, and equipping it with the necessary tools and capabilities.</p>"},{"location":"agents/llm-agents.en/#defining-the-agents-identity-and-purpose","title":"Defining the Agent's Identity and Purpose","text":"<p>First, you need to establish what the agent is and what it's for.</p> <ul> <li> <p><code>name</code> (Required): Every agent needs a unique string identifier. This   <code>name</code> is crucial for internal operations, especially in multi-agent systems   where agents need to refer to or delegate tasks to each other. Choose a   descriptive name that reflects the agent's function (e.g.,   <code>customer_support_router</code>, <code>billing_inquiry_agent</code>). Avoid reserved names like   <code>user</code>.</p> </li> <li> <p><code>description</code> (Optional, Recommended for Multi-Agent): Provide a concise   summary of the agent's capabilities. This description is primarily used by   other LLM agents to determine if they should route a task to this agent.   Make it specific enough to differentiate it from peers (e.g., \"Handles   inquiries about current billing statements,\" not just \"Billing agent\").</p> </li> <li> <p><code>model</code> (Required): Specify the underlying LLM that will power this   agent's reasoning. This is a string identifier like <code>\"gemini-2.0-flash\"</code>. The   choice of model impacts the agent's capabilities, cost, and performance. See   the Models page for available options and considerations.</p> </li> </ul> PythonJava <pre><code># Example: Defining the basic identity\ncapital_agent = LlmAgent(\n    model=\"gemini-2.0-flash\",\n    name=\"capital_agent\",\n    description=\"Answers user questions about the capital city of a given country.\"\n    # instruction and tools will be added next\n)\n</code></pre> <pre><code>// Example: Defining the basic identity\nLlmAgent capitalAgent =\n    LlmAgent.builder()\n        .model(\"gemini-2.0-flash\")\n        .name(\"capital_agent\")\n        .description(\"Answers user questions about the capital city of a given country.\")\n        // instruction and tools will be added next\n        .build();\n</code></pre>"},{"location":"agents/llm-agents.en/#guiding-the-agent-instructions-instruction","title":"Guiding the Agent: Instructions (<code>instruction</code>)","text":"<p>The <code>instruction</code> parameter is arguably the most critical for shaping an <code>LlmAgent</code>'s behavior. It's a string (or a function returning a string) that tells the agent:</p> <ul> <li>Its core task or goal.</li> <li>Its personality or persona (e.g., \"You are a helpful assistant,\" \"You are a witty pirate\").</li> <li>Constraints on its behavior (e.g., \"Only answer questions about X,\" \"Never reveal Y\").</li> <li>How and when to use its <code>tools</code>. You should explain the purpose of each tool and the circumstances under which it should be called, supplementing any descriptions within the tool itself.</li> <li>The desired format for its output (e.g., \"Respond in JSON,\" \"Provide a bulleted list\").</li> </ul> <p>Tips for Effective Instructions:</p> <ul> <li>Be Clear and Specific: Avoid ambiguity. Clearly state the desired actions and outcomes.</li> <li>Use Markdown: Improve readability for complex instructions using headings, lists, etc.</li> <li>Provide Examples (Few-Shot): For complex tasks or specific output formats, include examples directly in the instruction.</li> <li>Guide Tool Use: Don't just list tools; explain when and why the agent should use them.</li> </ul> <p>State:</p> <ul> <li>The instruction is a string template, you can use the <code>{var}</code> syntax to insert dynamic values into the instruction.</li> <li><code>{var}</code> is used to insert the value of the state variable named var.</li> <li><code>{artifact.var}</code> is used to insert the text content of the artifact named var.</li> <li>If the state variable or artifact does not exist, the agent will raise an error. If you want to ignore the error, you can append a <code>?</code> to the variable name as in <code>{var?}</code>.</li> </ul> PythonJava <pre><code># Example: Adding instructions\ncapital_agent = LlmAgent(\n    model=\"gemini-2.0-flash\",\n    name=\"capital_agent\",\n    description=\"Answers user questions about the capital city of a given country.\",\n    instruction=\"\"\"You are an agent that provides the capital city of a country.\nWhen a user asks for the capital of a country:\n1. Identify the country name from the user's query.\n2. Use the `get_capital_city` tool to find the capital.\n3. Respond clearly to the user, stating the capital city.\nExample Query: \"What's the capital of {country}?\"\nExample Response: \"The capital of France is Paris.\"\n\"\"\",\n    # tools will be added next\n)\n</code></pre> <pre><code>// Example: Adding instructions\nLlmAgent capitalAgent =\n    LlmAgent.builder()\n        .model(\"gemini-2.0-flash\")\n        .name(\"capital_agent\")\n        .description(\"Answers user questions about the capital city of a given country.\")\n        .instruction(\n            \"\"\"\n            You are an agent that provides the capital city of a country.\n            When a user asks for the capital of a country:\n            1. Identify the country name from the user's query.\n            2. Use the `get_capital_city` tool to find the capital.\n            3. Respond clearly to the user, stating the capital city.\n            Example Query: \"What's the capital of {country}?\"\n            Example Response: \"The capital of France is Paris.\"\n            \"\"\")\n        // tools will be added next\n        .build();\n</code></pre> <p>(Note: For instructions that apply to all agents in a system, consider using <code>global_instruction</code> on the root agent, detailed further in the Multi-Agents section.)</p>"},{"location":"agents/llm-agents.en/#equipping-the-agent-tools-tools","title":"Equipping the Agent: Tools (<code>tools</code>)","text":"<p>Tools give your <code>LlmAgent</code> capabilities beyond the LLM's built-in knowledge or reasoning. They allow the agent to interact with the outside world, perform calculations, fetch real-time data, or execute specific actions.</p> <ul> <li><code>tools</code> (Optional): Provide a list of tools the agent can use. Each item in the list can be:<ul> <li>A native function or method (wrapped as a <code>FunctionTool</code>). Python ADK automatically wraps the native function into a <code>FuntionTool</code> whereas, you must explicitly wrap your Java methods using <code>FunctionTool.create(...)</code></li> <li>An instance of a class inheriting from <code>BaseTool</code>.</li> <li>An instance of another agent (<code>AgentTool</code>, enabling agent-to-agent delegation - see Multi-Agents).</li> </ul> </li> </ul> <p>The LLM uses the function/tool names, descriptions (from docstrings or the <code>description</code> field), and parameter schemas to decide which tool to call based on the conversation and its instructions.</p> PythonJava <pre><code># Define a tool function\ndef get_capital_city(country: str) -&gt; str:\n  \"\"\"Retrieves the capital city for a given country.\"\"\"\n  # Replace with actual logic (e.g., API call, database lookup)\n  capitals = {\"france\": \"Paris\", \"japan\": \"Tokyo\", \"canada\": \"Ottawa\"}\n  return capitals.get(country.lower(), f\"Sorry, I don't know the capital of {country}.\")\n\n# Add the tool to the agent\ncapital_agent = LlmAgent(\n    model=\"gemini-2.0-flash\",\n    name=\"capital_agent\",\n    description=\"Answers user questions about the capital city of a given country.\",\n    instruction=\"\"\"You are an agent that provides the capital city of a country... (previous instruction text)\"\"\",\n    tools=[get_capital_city] # Provide the function directly\n)\n</code></pre> <pre><code>// Define a tool function\n// Retrieves the capital city of a given country.\npublic static Map&lt;String, Object&gt; getCapitalCity(\n        @Schema(name = \"country\", description = \"The country to get capital for\")\n        String country) {\n  // Replace with actual logic (e.g., API call, database lookup)\n  Map&lt;String, String&gt; countryCapitals = new HashMap&lt;&gt;();\n  countryCapitals.put(\"canada\", \"Ottawa\");\n  countryCapitals.put(\"france\", \"Paris\");\n  countryCapitals.put(\"japan\", \"Tokyo\");\n\n  String result =\n          countryCapitals.getOrDefault(\n                  country.toLowerCase(), \"Sorry, I couldn't find the capital for \" + country + \".\");\n  return Map.of(\"result\", result); // Tools must return a Map\n}\n\n// Add the tool to the agent\nFunctionTool capitalTool = FunctionTool.create(experiment.getClass(), \"getCapitalCity\");\nLlmAgent capitalAgent =\n    LlmAgent.builder()\n        .model(\"gemini-2.0-flash\")\n        .name(\"capital_agent\")\n        .description(\"Answers user questions about the capital city of a given country.\")\n        .instruction(\"You are an agent that provides the capital city of a country... (previous instruction text)\")\n        .tools(capitalTool) // Provide the function wrapped as a FunctionTool\n        .build();\n</code></pre> <p>Learn more about Tools in the Tools section.</p>"},{"location":"agents/llm-agents.en/#advanced-configuration-control","title":"Advanced Configuration &amp; Control","text":"<p>Beyond the core parameters, <code>LlmAgent</code> offers several options for finer control:</p>"},{"location":"agents/llm-agents.en/#fine-tuning-llm-generation-generate_content_config","title":"Configuring LLM Generation (<code>generate_content_config</code>)","text":"<p>You can adjust how the underlying LLM generates responses using <code>generate_content_config</code>.</p> <ul> <li><code>generate_content_config</code> (Optional): Pass an instance of <code>google.genai.types.GenerateContentConfig</code> to control parameters like <code>temperature</code> (randomness), <code>max_output_tokens</code> (response length), <code>top_p</code>, <code>top_k</code>, and safety settings.</li> </ul> PythonJava <pre><code>from google.genai import types\n\nagent = LlmAgent(\n    # ... other params\n    generate_content_config=types.GenerateContentConfig(\n        temperature=0.2, # More deterministic output\n        max_output_tokens=250,\n        safety_settings=[\n            types.SafetySetting(\n                category=types.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n                threshold=types.HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,\n            )\n        ]\n    )\n)\n</code></pre> <pre><code>import com.google.genai.types.GenerateContentConfig;\n\nLlmAgent agent =\n    LlmAgent.builder()\n        // ... other params\n        .generateContentConfig(GenerateContentConfig.builder()\n            .temperature(0.2F) // More deterministic output\n            .maxOutputTokens(250)\n            .build())\n        .build();\n</code></pre>"},{"location":"agents/llm-agents.en/#structuring-data-input_schema-output_schema-output_key","title":"Structuring Data (<code>input_schema</code>, <code>output_schema</code>, <code>output_key</code>)","text":"<p>For scenarios requiring structured data exchange with an <code>LLM Agent</code>, the ADK provides mechanisms to define expected input and desired output formats using schema definitions.</p> <ul> <li> <p><code>input_schema</code> (Optional): Define a schema representing the expected input structure. If set, the user message content passed to this agent must be a JSON string conforming to this schema. Your instructions should guide the user or preceding agent accordingly.</p> </li> <li> <p><code>output_schema</code> (Optional): Define a schema representing the desired output structure. If set, the agent's final response must be a JSON string conforming to this schema.</p> </li> <li> <p><code>output_key</code> (Optional): Provide a string key. If set, the text content of the agent's final response will be automatically saved to the session's state dictionary under this key. This is useful for passing results between agents or steps in a workflow.</p> <ul> <li>In Python, this might look like: <code>session.state[output_key] = agent_response_text</code></li> <li>In Java: <code>session.state().put(outputKey, agentResponseText)</code></li> </ul> </li> </ul> PythonJava <p>The input and output schema is typically a <code>Pydantic</code> BaseModel.</p> <pre><code>from pydantic import BaseModel, Field\n\nclass CapitalOutput(BaseModel):\n    capital: str = Field(description=\"The capital of the country.\")\n\nstructured_capital_agent = LlmAgent(\n    # ... name, model, description\n    instruction=\"\"\"You are a Capital Information Agent. Given a country, respond ONLY with a JSON object containing the capital. Format: {\"capital\": \"capital_name\"}\"\"\",\n    output_schema=CapitalOutput, # Enforce JSON output\n    output_key=\"found_capital\"  # Store result in state['found_capital']\n    # Cannot use tools=[get_capital_city] effectively here\n)\n</code></pre> <p>The input and output schema is a <code>google.genai.types.Schema</code> object.</p> <pre><code>private static final Schema CAPITAL_OUTPUT =\n    Schema.builder()\n        .type(\"OBJECT\")\n        .description(\"Schema for capital city information.\")\n        .properties(\n            Map.of(\n                \"capital\",\n                Schema.builder()\n                    .type(\"STRING\")\n                    .description(\"The capital city of the country.\")\n                    .build()))\n        .build();\n\nLlmAgent structuredCapitalAgent =\n    LlmAgent.builder()\n        // ... name, model, description\n        .instruction(\n                \"You are a Capital Information Agent. Given a country, respond ONLY with a JSON object containing the capital. Format: {\\\"capital\\\": \\\"capital_name\\\"}\")\n        .outputSchema(capitalOutput) // Enforce JSON output\n        .outputKey(\"found_capital\") // Store result in state.get(\"found_capital\")\n        // Cannot use tools(getCapitalCity) effectively here\n        .build();\n</code></pre>"},{"location":"agents/llm-agents.en/#managing-context-include_contents","title":"Managing Context (<code>include_contents</code>)","text":"<p>Control whether the agent receives the prior conversation history.</p> <ul> <li><code>include_contents</code> (Optional, Default: <code>'default'</code>): Determines if the <code>contents</code> (history) are sent to the LLM.<ul> <li><code>'default'</code>: The agent receives the relevant conversation history.</li> <li><code>'none'</code>: The agent receives no prior <code>contents</code>. It operates based solely on its current instruction and any input provided in the current turn (useful for stateless tasks or enforcing specific contexts).</li> </ul> </li> </ul> PythonJava <pre><code>stateless_agent = LlmAgent(\n    # ... other params\n    include_contents='none'\n)\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent.IncludeContents;\n\nLlmAgent statelessAgent =\n    LlmAgent.builder()\n        // ... other params\n        .includeContents(IncludeContents.NONE)\n        .build();\n</code></pre>"},{"location":"agents/llm-agents.en/#planner","title":"Planner","text":"<p><code>planner</code> (Optional): Assign a <code>BasePlanner</code> instance to enable multi-step reasoning and planning before execution. There are two main planners:</p> <ul> <li> <p><code>BuiltInPlanner</code>: Leverages the model's built-in planning capabilities (e.g., Gemini's thinking feature). See Gemini Thinking for details and examples.</p> <p>Here, the <code>thinking_budget</code> parameter guides the model on the number of thinking tokens to use when generating a response. The <code>include_thoughts</code> parameter controls whether the model should include its raw thoughts and internal reasoning process in the response.</p> <pre><code>from google.adk import Agent\nfrom google.adk.planners import BuiltInPlanner\nfrom google.genai import types\n\nmy_agent = Agent(\n    model=\"gemini-2.5-flash\",\n    planner=BuiltInPlanner(\n        thinking_config=types.ThinkingConfig(\n            include_thoughts=True,\n            thinking_budget=1024,\n        )\n    ),\n    # ... your tools here\n)\n</code></pre> </li> <li> <p><code>PlanReActPlanner</code>: This planner instructs the model to follow a specific structure in its output: first create a plan, then execute actions (like calling tools), and provide reasoning for its steps. It's particularly useful for models that don't have a built-in \"thinking\" feature.</p> <pre><code>from google.adk import Agent\nfrom google.adk.planners import PlanReActPlanner\n\nmy_agent = Agent(\n    model=\"gemini-2.0-flash\",\n    planner=PlanReActPlanner(),\n    # ... your tools here\n)\n</code></pre> <p>The agent's response will follow a structured format:</p> <pre><code>[user]: ai news\n[google_search_agent]: /*PLANNING*/\n1. Perform a Google search for \"latest AI news\" to get current updates and headlines related to artificial intelligence.\n2. Synthesize the information from the search results to provide a summary of recent AI news.\n\n/*ACTION*/\n/*REASONING*/\nThe search results provide a comprehensive overview of recent AI news, covering various aspects like company developments, research breakthroughs, and applications. I have enough information to answer the user's request.\n\n/*FINAL_ANSWER*/\nHere's a summary of recent AI news:\n....\n</code></pre> </li> </ul>"},{"location":"agents/llm-agents.en/#code-execution","title":"Code Execution","text":"<ul> <li><code>code_executor</code> (Optional): Provide a <code>BaseCodeExecutor</code> instance to allow the agent to execute code blocks found in the LLM's response. (See Tools/Built-in tools).</li> </ul> <p>Example for using built-in-planner: <pre><code>from dotenv import load_dotenv\n\n\nimport asyncio\nimport os\n\nfrom google.genai import types\nfrom google.adk.agents.llm_agent import LlmAgent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.artifacts.in_memory_artifact_service import InMemoryArtifactService # Optional\nfrom google.adk.planners import BasePlanner, BuiltInPlanner, PlanReActPlanner\nfrom google.adk.models import LlmRequest\n\nfrom google.genai.types import ThinkingConfig\nfrom google.genai.types import GenerateContentConfig\n\nimport datetime\nfrom zoneinfo import ZoneInfo\n\nAPP_NAME = \"weather_app\"\nUSER_ID = \"1234\"\nSESSION_ID = \"session1234\"\n\ndef get_weather(city: str) -&gt; dict:\n    \"\"\"Retrieves the current weather report for a specified city.\n\n    Args:\n        city (str): The name of the city for which to retrieve the weather report.\n\n    Returns:\n        dict: status and result or error msg.\n    \"\"\"\n    if city.lower() == \"new york\":\n        return {\n            \"status\": \"success\",\n            \"report\": (\n                \"The weather in New York is sunny with a temperature of 25 degrees\"\n                \" Celsius (77 degrees Fahrenheit).\"\n            ),\n        }\n    else:\n        return {\n            \"status\": \"error\",\n            \"error_message\": f\"Weather information for '{city}' is not available.\",\n        }\n\n\ndef get_current_time(city: str) -&gt; dict:\n    \"\"\"Returns the current time in a specified city.\n\n    Args:\n        city (str): The name of the city for which to retrieve the current time.\n\n    Returns:\n        dict: status and result or error msg.\n    \"\"\"\n\n    if city.lower() == \"new york\":\n        tz_identifier = \"America/New_York\"\n    else:\n        return {\n            \"status\": \"error\",\n            \"error_message\": (\n                f\"Sorry, I don't have timezone information for {city}.\"\n            ),\n        }\n\n    tz = ZoneInfo(tz_identifier)\n    now = datetime.datetime.now(tz)\n    report = (\n        f'The current time in {city} is {now.strftime(\"%Y-%m-%d %H:%M:%S %Z%z\")}'\n    )\n    return {\"status\": \"success\", \"report\": report}\n\n# Step 1: Create a ThinkingConfig\nthinking_config = ThinkingConfig(\n    include_thoughts=True,   # Ask the model to include its thoughts in the response\n    thinking_budget=256      # Limit the 'thinking' to 256 tokens (adjust as needed)\n)\nprint(\"ThinkingConfig:\", thinking_config)\n\n# Step 2: Instantiate BuiltInPlanner\nplanner = BuiltInPlanner(\n    thinking_config=thinking_config\n)\nprint(\"BuiltInPlanner created.\")\n\n# Step 3: Wrap the planner in an LlmAgent\nagent = LlmAgent(\n    model=\"gemini-2.5-pro-preview-03-25\",  # Set your model name\n    name=\"weather_and_time_agent\",\n    instruction=\"You are an agent that returns time and weather\",\n    planner=planner,\n    tools=[get_weather, get_current_time]\n)\n\n# Session and Runner\nsession_service = InMemorySessionService()\nsession = session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\nrunner = Runner(agent=agent, app_name=APP_NAME, session_service=session_service)\n\n# Agent Interaction\ndef call_agent(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    events = runner.run(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    for event in events:\n        print(f\"\\nDEBUG EVENT: {event}\\n\")\n        if event.is_final_response() and event.content:\n            final_answer = event.content.parts[0].text.strip()\n            print(\"\\n\ud83d\udfe2 FINAL ANSWER\\n\", final_answer, \"\\n\")\n\ncall_agent(\"If it's raining in New York right now, what is the current temperature?\")\n</code></pre></p>"},{"location":"agents/llm-agents.en/#putting-it-together-example","title":"Putting It Together: Example","text":"Code <p>Here's the complete basic <code>capital_agent</code>:</p> PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# --- Full example code demonstrating LlmAgent with Tools vs. Output Schema ---\nimport json # Needed for pretty printing dicts\nimport asyncio \n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.genai import types\nfrom pydantic import BaseModel, Field\n\n# --- 1. Define Constants ---\nAPP_NAME = \"agent_comparison_app\"\nUSER_ID = \"test_user_456\"\nSESSION_ID_TOOL_AGENT = \"session_tool_agent_xyz\"\nSESSION_ID_SCHEMA_AGENT = \"session_schema_agent_xyz\"\nMODEL_NAME = \"gemini-2.0-flash\"\n\n# --- 2. Define Schemas ---\n\n# Input schema used by both agents\nclass CountryInput(BaseModel):\n    country: str = Field(description=\"The country to get information about.\")\n\n# Output schema ONLY for the second agent\nclass CapitalInfoOutput(BaseModel):\n    capital: str = Field(description=\"The capital city of the country.\")\n    # Note: Population is illustrative; the LLM will infer or estimate this\n    # as it cannot use tools when output_schema is set.\n    population_estimate: str = Field(description=\"An estimated population of the capital city.\")\n\n# --- 3. Define the Tool (Only for the first agent) ---\ndef get_capital_city(country: str) -&gt; str:\n    \"\"\"Retrieves the capital city of a given country.\"\"\"\n    print(f\"\\n-- Tool Call: get_capital_city(country='{country}') --\")\n    country_capitals = {\n        \"united states\": \"Washington, D.C.\",\n        \"canada\": \"Ottawa\",\n        \"france\": \"Paris\",\n        \"japan\": \"Tokyo\",\n    }\n    result = country_capitals.get(country.lower(), f\"Sorry, I couldn't find the capital for {country}.\")\n    print(f\"-- Tool Result: '{result}' --\")\n    return result\n\n# --- 4. Configure Agents ---\n\n# Agent 1: Uses a tool and output_key\ncapital_agent_with_tool = LlmAgent(\n    model=MODEL_NAME,\n    name=\"capital_agent_tool\",\n    description=\"Retrieves the capital city using a specific tool.\",\n    instruction=\"\"\"You are a helpful agent that provides the capital city of a country using a tool.\nThe user will provide the country name in a JSON format like {\"country\": \"country_name\"}.\n1. Extract the country name.\n2. Use the `get_capital_city` tool to find the capital.\n3. Respond clearly to the user, stating the capital city found by the tool.\n\"\"\",\n    tools=[get_capital_city],\n    input_schema=CountryInput,\n    output_key=\"capital_tool_result\", # Store final text response\n)\n\n# Agent 2: Uses output_schema (NO tools possible)\nstructured_info_agent_schema = LlmAgent(\n    model=MODEL_NAME,\n    name=\"structured_info_agent_schema\",\n    description=\"Provides capital and estimated population in a specific JSON format.\",\n    instruction=f\"\"\"You are an agent that provides country information.\nThe user will provide the country name in a JSON format like {{\"country\": \"country_name\"}}.\nRespond ONLY with a JSON object matching this exact schema:\n{json.dumps(CapitalInfoOutput.model_json_schema(), indent=2)}\nUse your knowledge to determine the capital and estimate the population. Do not use any tools.\n\"\"\",\n    # *** NO tools parameter here - using output_schema prevents tool use ***\n    input_schema=CountryInput,\n    output_schema=CapitalInfoOutput, # Enforce JSON output structure\n    output_key=\"structured_info_result\", # Store final JSON response\n)\n\n# --- 5. Set up Session Management and Runners ---\nsession_service = InMemorySessionService()\n\n# Create a runner for EACH agent\ncapital_runner = Runner(\n    agent=capital_agent_with_tool,\n    app_name=APP_NAME,\n    session_service=session_service\n)\nstructured_runner = Runner(\n    agent=structured_info_agent_schema,\n    app_name=APP_NAME,\n    session_service=session_service\n)\n\n# --- 6. Define Agent Interaction Logic ---\nasync def call_agent_and_print(\n    runner_instance: Runner,\n    agent_instance: LlmAgent,\n    session_id: str,\n    query_json: str\n):\n    \"\"\"Sends a query to the specified agent/runner and prints results.\"\"\"\n    print(f\"\\n&gt;&gt;&gt; Calling Agent: '{agent_instance.name}' | Query: {query_json}\")\n\n    user_content = types.Content(role='user', parts=[types.Part(text=query_json)])\n\n    final_response_content = \"No final response received.\"\n    async for event in runner_instance.run_async(user_id=USER_ID, session_id=session_id, new_message=user_content):\n        # print(f\"Event: {event.type}, Author: {event.author}\") # Uncomment for detailed logging\n        if event.is_final_response() and event.content and event.content.parts:\n            # For output_schema, the content is the JSON string itself\n            final_response_content = event.content.parts[0].text\n\n    print(f\"&lt;&lt;&lt; Agent '{agent_instance.name}' Response: {final_response_content}\")\n\n    current_session = await session_service.get_session(app_name=APP_NAME,\n                                                  user_id=USER_ID,\n                                                  session_id=session_id)\n    stored_output = current_session.state.get(agent_instance.output_key)\n\n    # Pretty print if the stored output looks like JSON (likely from output_schema)\n    print(f\"--- Session State ['{agent_instance.output_key}']: \", end=\"\")\n    try:\n        # Attempt to parse and pretty print if it's JSON\n        parsed_output = json.loads(stored_output)\n        print(json.dumps(parsed_output, indent=2))\n    except (json.JSONDecodeError, TypeError):\n         # Otherwise, print as string\n        print(stored_output)\n    print(\"-\" * 30)\n\n\n# --- 7. Run Interactions ---\nasync def main():\n    # Create separate sessions for clarity, though not strictly necessary if context is managed\n    print(\"--- Creating Sessions ---\")\n    await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID_TOOL_AGENT)\n    await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID_SCHEMA_AGENT)\n\n    print(\"--- Testing Agent with Tool ---\")\n    await call_agent_and_print(capital_runner, capital_agent_with_tool, SESSION_ID_TOOL_AGENT, '{\"country\": \"France\"}')\n    await call_agent_and_print(capital_runner, capital_agent_with_tool, SESSION_ID_TOOL_AGENT, '{\"country\": \"Canada\"}')\n\n    print(\"\\n\\n--- Testing Agent with Output Schema (No Tool Use) ---\")\n    await call_agent_and_print(structured_runner, structured_info_agent_schema, SESSION_ID_SCHEMA_AGENT, '{\"country\": \"France\"}')\n    await call_agent_and_print(structured_runner, structured_info_agent_schema, SESSION_ID_SCHEMA_AGENT, '{\"country\": \"Japan\"}')\n\n# --- Run the Agent ---\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nif __name__ == \"__main__\":\n    asyncio.run(main())    \n</code></pre> <pre><code>// --- Full example code demonstrating LlmAgent with Tools vs. Output Schema ---\n\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport com.google.genai.types.Schema;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\npublic class LlmAgentExample {\n\n  // --- 1. Define Constants ---\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n  private static final String APP_NAME = \"capital_agent_tool\";\n  private static final String USER_ID = \"test_user_456\";\n  private static final String SESSION_ID_TOOL_AGENT = \"session_tool_agent_xyz\";\n  private static final String SESSION_ID_SCHEMA_AGENT = \"session_schema_agent_xyz\";\n\n  // --- 2. Define Schemas ---\n\n  // Input schema used by both agents\n  private static final Schema COUNTRY_INPUT_SCHEMA =\n      Schema.builder()\n          .type(\"OBJECT\")\n          .description(\"Input for specifying a country.\")\n          .properties(\n              Map.of(\n                  \"country\",\n                  Schema.builder()\n                      .type(\"STRING\")\n                      .description(\"The country to get information about.\")\n                      .build()))\n          .required(List.of(\"country\"))\n          .build();\n\n  // Output schema ONLY for the second agent\n  private static final Schema CAPITAL_INFO_OUTPUT_SCHEMA =\n      Schema.builder()\n          .type(\"OBJECT\")\n          .description(\"Schema for capital city information.\")\n          .properties(\n              Map.of(\n                  \"capital\",\n                  Schema.builder()\n                      .type(\"STRING\")\n                      .description(\"The capital city of the country.\")\n                      .build(),\n                  \"population_estimate\",\n                  Schema.builder()\n                      .type(\"STRING\")\n                      .description(\"An estimated population of the capital city.\")\n                      .build()))\n          .required(List.of(\"capital\", \"population_estimate\"))\n          .build();\n\n  // --- 3. Define the Tool (Only for the first agent) ---\n  // Retrieves the capital city of a given country.\n  public static Map&lt;String, Object&gt; getCapitalCity(\n      @Annotations.Schema(name = \"country\", description = \"The country to get capital for\")\n      String country) {\n    System.out.printf(\"%n-- Tool Call: getCapitalCity(country='%s') --%n\", country);\n    Map&lt;String, String&gt; countryCapitals = new HashMap&lt;&gt;();\n    countryCapitals.put(\"united states\", \"Washington, D.C.\");\n    countryCapitals.put(\"canada\", \"Ottawa\");\n    countryCapitals.put(\"france\", \"Paris\");\n    countryCapitals.put(\"japan\", \"Tokyo\");\n\n    String result =\n        countryCapitals.getOrDefault(\n            country.toLowerCase(), \"Sorry, I couldn't find the capital for \" + country + \".\");\n    System.out.printf(\"-- Tool Result: '%s' --%n\", result);\n    return Map.of(\"result\", result); // Tools must return a Map\n  }\n\n  public static void main(String[] args){\n    LlmAgentExample agentExample = new LlmAgentExample();\n    FunctionTool capitalTool = FunctionTool.create(agentExample.getClass(), \"getCapitalCity\");\n\n    // --- 4. Configure Agents ---\n\n    // Agent 1: Uses a tool and output_key\n    LlmAgent capitalAgentWithTool =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"capital_agent_tool\")\n            .description(\"Retrieves the capital city using a specific tool.\")\n            .instruction(\n              \"\"\"\n              You are a helpful agent that provides the capital city of a country using a tool.\n              1. Extract the country name.\n              2. Use the `get_capital_city` tool to find the capital.\n              3. Respond clearly to the user, stating the capital city found by the tool.\n              \"\"\")\n            .tools(capitalTool)\n            .inputSchema(COUNTRY_INPUT_SCHEMA)\n            .outputKey(\"capital_tool_result\") // Store final text response\n            .build();\n\n    // Agent 2: Uses an output schema\n    LlmAgent structuredInfoAgentSchema =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"structured_info_agent_schema\")\n            .description(\"Provides capital and estimated population in a specific JSON format.\")\n            .instruction(\n                String.format(\"\"\"\n                You are an agent that provides country information.\n                Respond ONLY with a JSON object matching this exact schema: %s\n                Use your knowledge to determine the capital and estimate the population. Do not use any tools.\n                \"\"\", CAPITAL_INFO_OUTPUT_SCHEMA.toJson()))\n            // *** NO tools parameter here - using output_schema prevents tool use ***\n            .inputSchema(COUNTRY_INPUT_SCHEMA)\n            .outputSchema(CAPITAL_INFO_OUTPUT_SCHEMA) // Enforce JSON output structure\n            .outputKey(\"structured_info_result\") // Store final JSON response\n            .build();\n\n    // --- 5. Set up Session Management and Runners ---\n    InMemorySessionService sessionService = new InMemorySessionService();\n\n    sessionService.createSession(APP_NAME, USER_ID, null, SESSION_ID_TOOL_AGENT).blockingGet();\n    sessionService.createSession(APP_NAME, USER_ID, null, SESSION_ID_SCHEMA_AGENT).blockingGet();\n\n    Runner capitalRunner = new Runner(capitalAgentWithTool, APP_NAME, null, sessionService);\n    Runner structuredRunner = new Runner(structuredInfoAgentSchema, APP_NAME, null, sessionService);\n\n    // --- 6. Run Interactions ---\n    System.out.println(\"--- Testing Agent with Tool ---\");\n    agentExample.callAgentAndPrint(\n        capitalRunner, capitalAgentWithTool, SESSION_ID_TOOL_AGENT, \"{\\\"country\\\": \\\"France\\\"}\");\n    agentExample.callAgentAndPrint(\n        capitalRunner, capitalAgentWithTool, SESSION_ID_TOOL_AGENT, \"{\\\"country\\\": \\\"Canada\\\"}\");\n\n    System.out.println(\"\\n\\n--- Testing Agent with Output Schema (No Tool Use) ---\");\n    agentExample.callAgentAndPrint(\n        structuredRunner,\n        structuredInfoAgentSchema,\n        SESSION_ID_SCHEMA_AGENT,\n        \"{\\\"country\\\": \\\"France\\\"}\");\n    agentExample.callAgentAndPrint(\n        structuredRunner,\n        structuredInfoAgentSchema,\n        SESSION_ID_SCHEMA_AGENT,\n        \"{\\\"country\\\": \\\"Japan\\\"}\");\n  }\n\n  // --- 7. Define Agent Interaction Logic ---\n  public void callAgentAndPrint(Runner runner, LlmAgent agent, String sessionId, String queryJson) {\n    System.out.printf(\n        \"%n&gt;&gt;&gt; Calling Agent: '%s' | Session: '%s' | Query: %s%n\",\n        agent.name(), sessionId, queryJson);\n\n    Content userContent = Content.fromParts(Part.fromText(queryJson));\n    final String[] finalResponseContent = {\"No final response received.\"};\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, sessionId, userContent);\n\n    // Stream event response\n    eventStream.blockingForEach(event -&gt; {\n          if (event.finalResponse() &amp;&amp; event.content().isPresent()) {\n            event\n                .content()\n                .get()\n                .parts()\n                .flatMap(parts -&gt; parts.isEmpty() ? Optional.empty() : Optional.of(parts.get(0)))\n                .flatMap(Part::text)\n                .ifPresent(text -&gt; finalResponseContent[0] = text);\n          }\n        });\n\n    System.out.printf(\"&lt;&lt;&lt; Agent '%s' Response: %s%n\", agent.name(), finalResponseContent[0]);\n\n    // Retrieve the session again to get the updated state\n    Session updatedSession =\n        runner\n            .sessionService()\n            .getSession(APP_NAME, USER_ID, sessionId, Optional.empty())\n            .blockingGet();\n\n    if (updatedSession != null &amp;&amp; agent.outputKey().isPresent()) {\n      // Print to verify if the stored output looks like JSON (likely from output_schema)\n      System.out.printf(\"--- Session State ['%s']: \", agent.outputKey().get());\n      }\n  }\n}\n</code></pre> <p>(This example demonstrates the core concepts. More complex agents might incorporate schemas, context control, planning, etc.)</p>"},{"location":"agents/llm-agents.en/#related-concepts-deferred-topics","title":"Related Concepts (Deferred Topics)","text":"<p>While this page covers the core configuration of <code>LlmAgent</code>, several related concepts provide more advanced control and are detailed elsewhere:</p> <ul> <li>Callbacks: Intercepting execution points (before/after model calls, before/after tool calls) using <code>before_model_callback</code>, <code>after_model_callback</code>, etc. See Callbacks.</li> <li>Multi-Agent Control: Advanced strategies for agent interaction, including planning (<code>planner</code>), controlling agent transfer (<code>disallow_transfer_to_parent</code>, <code>disallow_transfer_to_peers</code>), and system-wide instructions (<code>global_instruction</code>). See Multi-Agents.</li> </ul>"},{"location":"agents/llm-agents/","title":"LLM Agent","text":"<p><code>LlmAgent</code>\uff08\u901a\u5e38\u7c21\u7a31\u70ba <code>Agent</code>\uff09\u662f Agent Development Kit (ADK) \u7684\u6838\u5fc3\u5143\u4ef6\u4e4b\u4e00\uff0c\u8ca0\u8cac\u64d4\u4efb\u61c9\u7528\u7a0b\u5f0f\u4e2d\u7684\u300c\u601d\u8003\u300d\u90e8\u5206\u3002\u5b83\u904b\u7528\u5927\u578b\u8a9e\u8a00\u6a21\u578b (Large Language Model, LLM) \u7684\u5f37\u5927\u80fd\u529b\uff0c\u9032\u884c\u63a8\u7406\u3001\u7406\u89e3\u81ea\u7136\u8a9e\u8a00\u3001\u505a\u51fa\u6c7a\u7b56\u3001\u7522\u751f\u56de\u61c9\uff0c\u4ee5\u53ca\u8207\u5de5\u5177\uff08tools\uff09\u4e92\u52d5\u3002</p> <p>\u8207\u9075\u5faa\u9810\u5148\u5b9a\u7fa9\u57f7\u884c\u8def\u5f91\u7684Workflow Agents\u4e0d\u540c\uff0c<code>LlmAgent</code>\u7684\u884c\u70ba\u662f\u975e\u6c7a\u5b9a\u6027\u7684\u3002\u5b83\u6703\u5229\u7528 LLM \u4f86\u89e3\u8b80\u6307\u4ee4\u8207\u4e0a\u4e0b\u6587\uff0c\u52d5\u614b\u6c7a\u5b9a\u5982\u4f55\u57f7\u884c\u3001\u8981\u4f7f\u7528\u54ea\u4e9b\u5de5\u5177\uff08\u5982\u6709\u9700\u8981\uff09\uff0c\u6216\u662f\u5426\u8981\u5c07\u63a7\u5236\u6b0a\u8f49\u4ea4\u7d66\u5176\u4ed6 agent\u3002</p> <p>\u8981\u6253\u9020\u4e00\u500b\u9ad8\u6548\u7684<code>LlmAgent</code>\uff0c\u9700\u8981\u660e\u78ba\u5b9a\u7fa9\u5176\u8eab\u5206\u3001\u900f\u904e\u6307\u4ee4\u6e05\u695a\u5f15\u5c0e\u5176\u884c\u70ba\uff0c\u4e26\u8ce6\u4e88\u6240\u9700\u7684\u5de5\u5177\u8207\u80fd\u529b\u3002</p>"},{"location":"agents/llm-agents/#agent","title":"\u5b9a\u7fa9 agent \u7684\u8eab\u5206\u8207\u76ee\u7684","text":"<p>\u9996\u5148\uff0c\u4f60\u9700\u8981\u78ba\u7acb\u9019\u500b agent \u662f\u4ec0\u9ebc \u4ee5\u53ca \u7528\u9014\u70ba\u4f55\u3002</p> <ul> <li> <p><code>name</code>\uff08\u5fc5\u586b\uff09\uff1a \u6bcf\u500b agent \u90fd\u9700\u8981\u4e00\u500b\u552f\u4e00\u7684\u5b57\u4e32\u8b58\u5225\u78bc\u3002\u9019\u500b<code>name</code>\u5c0d\u65bc\u5167\u90e8\u904b\u4f5c\u81f3\u95dc\u91cd\u8981\uff0c\u5c24\u5176\u662f\u5728\u591a agent \u7cfb\u7d71\u4e2d\uff0cagent \u4e4b\u9593\u9700\u8981\u4e92\u76f8\u6307\u6d3e\u6216\u59d4\u6d3e\u4efb\u52d9\u3002\u8acb\u9078\u64c7\u80fd\u53cd\u6620 agent \u529f\u80fd\u7684\u63cf\u8ff0\u6027\u540d\u7a31\uff08\u4f8b\u5982\uff1a<code>customer_support_router</code>\u3001<code>billing_inquiry_agent</code>\uff09\u3002\u907f\u514d\u4f7f\u7528\u50cf<code>user</code>\u9019\u985e\u4fdd\u7559\u540d\u7a31\u3002</p> </li> <li> <p><code>description</code>\uff08\u9078\u586b\uff0c\u5efa\u8b70\u591a agent \u7cfb\u7d71\u63d0\u4f9b\uff09\uff1a \u8acb\u63d0\u4f9b\u7c21\u660e\u627c\u8981\u7684 agent \u80fd\u529b\u63cf\u8ff0\u3002\u9019\u500b\u8aaa\u660e\u4e3b\u8981\u4f9b\u5176\u4ed6 LLM agent \u5224\u65b7\u662f\u5426\u61c9\u5c07\u4efb\u52d9\u8def\u7531\u7d66\u6b64 agent\u3002\u8acb\u5177\u9ad4\u63cf\u8ff0\u4ee5\u5340\u5206\u65bc\u5176\u4ed6 agent\uff08\u4f8b\u5982\uff1a\u300c\u8655\u7406\u76ee\u524d\u5e33\u55ae\u660e\u7d30\u76f8\u95dc\u8a62\u554f\u300d\uff0c\u800c\u975e\u50c5\u5beb\u300c\u5e33\u55ae agent\u300d\uff09\u3002</p> </li> <li> <p><code>model</code>\uff08\u5fc5\u586b\uff09\uff1a \u6307\u5b9a\u652f\u63f4\u6b64 agent \u63a8\u7406\u80fd\u529b\u7684\u5e95\u5c64 LLM\u3002\u9019\u662f\u4e00\u500b\u50cf <code>\"gemini-2.0-flash\"</code> \u7684\u5b57\u4e32\u8b58\u5225\u78bc\u3002\u6a21\u578b\u7684\u9078\u64c7\u6703\u5f71\u97ff agent \u7684\u80fd\u529b\u3001\u6210\u672c\u8207\u6548\u80fd\u3002\u53ef\u53c3\u8003 Models \u9801\u9762\u4ee5\u4e86\u89e3\u53ef\u7528\u9078\u9805\u8207\u76f8\u95dc\u8003\u91cf\u3002</p> </li> </ul> PythonJava <pre><code># Example: Defining the basic identity\ncapital_agent = LlmAgent(\n    model=\"gemini-2.0-flash\",\n    name=\"capital_agent\",\n    description=\"Answers user questions about the capital city of a given country.\"\n    # instruction and tools will be added next\n)\n</code></pre> <pre><code>// Example: Defining the basic identity\nLlmAgent capitalAgent =\n    LlmAgent.builder()\n        .model(\"gemini-2.0-flash\")\n        .name(\"capital_agent\")\n        .description(\"Answers user questions about the capital city of a given country.\")\n        // instruction and tools will be added next\n        .build();\n</code></pre>"},{"location":"agents/llm-agents/#agentinstructionsinstruction","title":"\u6307\u5c0e agent\uff1aInstructions\uff08<code>instruction</code>\uff09","text":"<p><code>instruction</code> \u53c3\u6578\u53ef\u4ee5\u8aaa\u662f\u6c7a\u5b9a <code>LlmAgent</code> \u884c\u70ba\u6700\u95dc\u9375\u7684\u8a2d\u5b9a\u3002\u5b83\u662f\u4e00\u500b\u5b57\u4e32\uff08\u6216\u56de\u50b3\u5b57\u4e32\u7684\u51fd\u5f0f\uff09\uff0c\u7528\u4f86\u544a\u8a34 agent\uff1a</p> <ul> <li>\u5176\u6838\u5fc3\u4efb\u52d9\u6216\u76ee\u6a19\u3002</li> <li>\u5176\u500b\u6027\u6216\u89d2\u8272\u8a2d\u5b9a\uff08\u4f8b\u5982\uff1a\u300c\u4f60\u662f\u4e00\u4f4d\u6a02\u65bc\u52a9\u4eba\u7684\u52a9\u7406\u300d\u3001\u300c\u4f60\u662f\u4e00\u4f4d\u98a8\u8da3\u7684\u6d77\u76dc\u300d\uff09\u3002</li> <li>\u5c0d\u5176\u884c\u70ba\u7684\u9650\u5236\uff08\u4f8b\u5982\uff1a\u300c\u53ea\u56de\u7b54\u95dc\u65bc X \u7684\u554f\u984c\u300d\u3001\u300c\u7d55\u4e0d\u900f\u9732 Y\u300d\uff09\u3002</li> <li>\u5982\u4f55\u4ee5\u53ca\u4f55\u6642\u4f7f\u7528\u5176 <code>tools</code>\u3002\u4f60\u61c9\u8a72\u8aaa\u660e\u6bcf\u500b\u5de5\u5177\u7684\u7528\u9014\uff0c\u4ee5\u53ca\u61c9\u5728\u4ec0\u9ebc\u60c5\u5883\u4e0b\u547c\u53eb\u5b83\uff0c\u88dc\u5145\u5de5\u5177\u672c\u8eab\u7684\u63cf\u8ff0\u3002</li> <li>\u8f38\u51fa\u7d50\u679c\u7684\u671f\u671b\u683c\u5f0f\uff08\u4f8b\u5982\uff1a\u300c\u4ee5 JSON \u56de\u61c9\u300d\u3001\u300c\u8acb\u63d0\u4f9b\u689d\u5217\u6e05\u55ae\u300d\uff09\u3002</li> </ul> <p>\u64b0\u5beb\u6709\u6548 Instructions \u7684\u5efa\u8b70\uff1a</p> <ul> <li>\u6e05\u695a\u4e14\u5177\u9ad4\uff1a \u907f\u514d\u6a21\u7a1c\u5169\u53ef\u3002\u660e\u78ba\u8aaa\u660e\u671f\u671b\u7684\u52d5\u4f5c\u8207\u7d50\u679c\u3002</li> <li>\u5584\u7528 Markdown\uff1a \u5c0d\u65bc\u8907\u96dc\u7684\u6307\u793a\uff0c\u53ef\u5229\u7528\u6a19\u984c\u3001\u6e05\u55ae\u7b49 Markdown \u683c\u5f0f\u63d0\u5347\u53ef\u8b80\u6027\u3002</li> <li>\u63d0\u4f9b\u7bc4\u4f8b\uff08Few-Shot\uff09\uff1a \u82e5\u4efb\u52d9\u8907\u96dc\u6216\u6709\u7279\u5b9a\u8f38\u51fa\u683c\u5f0f\uff0c\u8acb\u76f4\u63a5\u5728\u6307\u793a\u4e2d\u52a0\u5165\u7bc4\u4f8b\u3002</li> <li>\u5f15\u5c0e\u5de5\u5177\u4f7f\u7528\uff1a \u4e0d\u50c5\u50c5\u5217\u51fa\u5de5\u5177\uff0c\u9084\u8981\u8aaa\u660e agent \u61c9\u8a72\u300c\u4f55\u6642\u300d\u53ca\u300c\u70ba\u4ec0\u9ebc\u300d\u4f7f\u7528\u9019\u4e9b\u5de5\u5177\u3002</li> </ul> <p>State\uff1a</p> <ul> <li>\u6307\u4ee4\u662f\u4e00\u500b\u5b57\u4e32\u6a21\u677f\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>{var}</code> \u8a9e\u6cd5\u5c07\u52d5\u614b\u503c\u63d2\u5165\u6307\u4ee4\u4e2d\u3002</li> <li><code>{var}</code> \u7528\u65bc\u63d2\u5165\u540d\u7a31\u70ba var \u7684 state \u8b8a\u6578\u503c\u3002</li> <li><code>{artifact.var}</code> \u7528\u65bc\u63d2\u5165\u540d\u7a31\u70ba var \u7684 artifact \u7684\u6587\u5b57\u5167\u5bb9\u3002</li> <li>\u82e5 state \u8b8a\u6578\u6216 artifact \u4e0d\u5b58\u5728\uff0cagent \u6703\u62cb\u51fa\u932f\u8aa4\u3002\u5982\u679c\u4f60\u60f3\u5ffd\u7565\u8a72\u932f\u8aa4\uff0c\u53ef\u4ee5\u5728\u8b8a\u6578\u540d\u7a31\u5f8c\u52a0\u4e0a <code>?</code>\uff0c\u5982 <code>{var?}</code>\u3002</li> </ul> PythonJava <pre><code># Example: Adding instructions\ncapital_agent = LlmAgent(\n    model=\"gemini-2.0-flash\",\n    name=\"capital_agent\",\n    description=\"Answers user questions about the capital city of a given country.\",\n    instruction=\"\"\"You are an agent that provides the capital city of a country.\nWhen a user asks for the capital of a country:\n1. Identify the country name from the user's query.\n2. Use the `get_capital_city` tool to find the capital.\n3. Respond clearly to the user, stating the capital city.\nExample Query: \"What's the capital of {country}?\"\nExample Response: \"The capital of France is Paris.\"\n\"\"\",\n    # tools will be added next\n)\n</code></pre> <pre><code>// Example: Adding instructions\nLlmAgent capitalAgent =\n    LlmAgent.builder()\n        .model(\"gemini-2.0-flash\")\n        .name(\"capital_agent\")\n        .description(\"Answers user questions about the capital city of a given country.\")\n        .instruction(\n            \"\"\"\n            You are an agent that provides the capital city of a country.\n            When a user asks for the capital of a country:\n            1. Identify the country name from the user's query.\n            2. Use the `get_capital_city` tool to find the capital.\n            3. Respond clearly to the user, stating the capital city.\n            Example Query: \"What's the capital of {country}?\"\n            Example Response: \"The capital of France is Paris.\"\n            \"\"\")\n        // tools will be added next\n        .build();\n</code></pre> <p>(\u6ce8\u610f\uff1a\u82e5\u8981\u5c0d\u7cfb\u7d71\u4e2d\u6240\u6709 agent \u5957\u7528\u6307\u4ee4\uff0c\u5efa\u8b70\u5728 root agent \u4e0a\u4f7f\u7528 <code>global_instruction</code>\uff0c\u8a73\u7d30\u8aaa\u660e\u8acb\u53c3\u898b Multi-Agents \u7ae0\u7bc0\u3002)</p>"},{"location":"agents/llm-agents/#agenttoolstools","title":"\u88dd\u5099 agent\uff1atools\uff08<code>tools</code>\uff09","text":"<p>tools \u80fd\u8b93\u4f60\u7684 <code>LlmAgent</code> \u64c1\u6709\u8d85\u8d8a\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5167\u5efa\u77e5\u8b58\u6216\u63a8\u7406\u7684\u80fd\u529b\u3002\u5b83\u5011\u5141\u8a31 agent \u8207\u5916\u90e8\u4e16\u754c\u4e92\u52d5\u3001\u57f7\u884c\u904b\u7b97\u3001\u53d6\u5f97\u5373\u6642\u8cc7\u6599\uff0c\u6216\u57f7\u884c\u7279\u5b9a\u52d5\u4f5c\u3002</p> <ul> <li><code>tools</code>\uff08\u53ef\u9078\uff09\uff1a \u63d0\u4f9b agent \u53ef\u4f7f\u7528\u7684 tools \u6e05\u55ae\u3002\u6e05\u55ae\u4e2d\u7684\u6bcf\u500b\u9805\u76ee\u53ef\u4ee5\u662f\uff1a<ul> <li>\u539f\u751f\u51fd\u5f0f\u6216\u65b9\u6cd5\uff08\u5305\u88dd\u70ba <code>FunctionTool</code>\uff09\u3002Python Agent Development Kit (ADK) \u6703\u81ea\u52d5\u5c07\u539f\u751f\u51fd\u5f0f\u5305\u88dd\u6210 <code>FuntionTool</code>\uff0c\u800c\u5728 Java \u4e2d\u5247\u9700\u4f60\u81ea\u884c\u4f7f\u7528 <code>FunctionTool.create(...)</code> \u9032\u884c\u5305\u88dd\u3002</li> <li>\u7e7c\u627f\u81ea <code>BaseTool</code> \u7684\u985e\u5225\u5be6\u4f8b\u3002</li> <li>\u53e6\u4e00\u500b agent \u7684\u5be6\u4f8b\uff08<code>AgentTool</code>\uff0c\u53ef\u5be6\u73fe agent \u4e4b\u9593\u7684\u59d4\u6d3e\u2014\u8a73\u898b Multi-Agents\uff09\u3002</li> </ul> </li> </ul> <p>\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6703\u6839\u64da\u5de5\u5177/\u51fd\u5f0f\u540d\u7a31\u3001\u63cf\u8ff0\uff08\u4f86\u81ea docstring \u6216 <code>description</code> \u6b04\u4f4d\uff09\u4ee5\u53ca\u53c3\u6578 schema\uff0c\u4f9d\u64da\u5c0d\u8a71\u5167\u5bb9\u8207\u6307\u4ee4\u6c7a\u5b9a\u8981\u547c\u53eb\u54ea\u500b tool\u3002</p> PythonJava <pre><code># Define a tool function\ndef get_capital_city(country: str) -&gt; str:\n  \"\"\"Retrieves the capital city for a given country.\"\"\"\n  # Replace with actual logic (e.g., API call, database lookup)\n  capitals = {\"france\": \"Paris\", \"japan\": \"Tokyo\", \"canada\": \"Ottawa\"}\n  return capitals.get(country.lower(), f\"Sorry, I don't know the capital of {country}.\")\n\n# Add the tool to the agent\ncapital_agent = LlmAgent(\n    model=\"gemini-2.0-flash\",\n    name=\"capital_agent\",\n    description=\"Answers user questions about the capital city of a given country.\",\n    instruction=\"\"\"You are an agent that provides the capital city of a country... (previous instruction text)\"\"\",\n    tools=[get_capital_city] # Provide the function directly\n)\n</code></pre> <pre><code>// Define a tool function\n// Retrieves the capital city of a given country.\npublic static Map&lt;String, Object&gt; getCapitalCity(\n        @Schema(name = \"country\", description = \"The country to get capital for\")\n        String country) {\n  // Replace with actual logic (e.g., API call, database lookup)\n  Map&lt;String, String&gt; countryCapitals = new HashMap&lt;&gt;();\n  countryCapitals.put(\"canada\", \"Ottawa\");\n  countryCapitals.put(\"france\", \"Paris\");\n  countryCapitals.put(\"japan\", \"Tokyo\");\n\n  String result =\n          countryCapitals.getOrDefault(\n                  country.toLowerCase(), \"Sorry, I couldn't find the capital for \" + country + \".\");\n  return Map.of(\"result\", result); // Tools must return a Map\n}\n\n// Add the tool to the agent\nFunctionTool capitalTool = FunctionTool.create(experiment.getClass(), \"getCapitalCity\");\nLlmAgent capitalAgent =\n    LlmAgent.builder()\n        .model(\"gemini-2.0-flash\")\n        .name(\"capital_agent\")\n        .description(\"Answers user questions about the capital city of a given country.\")\n        .instruction(\"You are an agent that provides the capital city of a country... (previous instruction text)\")\n        .tools(capitalTool) // Provide the function wrapped as a FunctionTool\n        .build();\n</code></pre> <p>\u60f3\u9032\u4e00\u6b65\u4e86\u89e3\u5de5\u5177\uff08Tools\uff09\uff0c\u8acb\u53c3\u898b Tools \u7ae0\u7bc0\u3002</p>"},{"location":"agents/llm-agents/#_1","title":"\u9032\u968e\u8a2d\u5b9a\u8207\u63a7\u5236","text":"<p>\u9664\u4e86\u6838\u5fc3\u53c3\u6578\u5916\uff0c<code>LlmAgent</code> \u9084\u63d0\u4f9b\u591a\u7a2e\u9078\u9805\uff0c\u8b93\u4f60\u80fd\u66f4\u7d30\u7dfb\u5730\u9032\u884c\u63a7\u5236\uff1a</p>"},{"location":"agents/llm-agents/#fine-tuning-llm-generation-generate_content_config","title":"\u8a2d\u5b9a\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u751f\u6210\u884c\u70ba\uff08<code>generate_content_config</code>\uff09","text":"<p>\u4f60\u53ef\u4ee5\u900f\u904e <code>generate_content_config</code>\uff0c\u8abf\u6574\u5e95\u5c64\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7684\u56de\u61c9\u751f\u6210\u65b9\u5f0f\u3002</p> <ul> <li><code>generate_content_config</code>\uff08\u53ef\u9078\uff09\uff1a \u50b3\u5165 <code>google.genai.types.GenerateContentConfig</code> \u7684\u5be6\u4f8b\uff0c\u4ee5\u63a7\u5236\u50cf\u662f <code>temperature</code>\uff08\u96a8\u6a5f\u6027\uff09\u3001<code>max_output_tokens</code>\uff08\u56de\u61c9\u9577\u5ea6\uff09\u3001<code>top_p</code>\u3001<code>top_k</code> \u4ee5\u53ca\u5b89\u5168\u6027\u8a2d\u5b9a\u7b49\u53c3\u6578\u3002</li> </ul> PythonJava <pre><code>from google.genai import types\n\nagent = LlmAgent(\n    # ... other params\n    generate_content_config=types.GenerateContentConfig(\n        temperature=0.2, # More deterministic output\n        max_output_tokens=250,\n        safety_settings=[\n            types.SafetySetting(\n                category=types.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n                threshold=types.HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,\n            )\n        ]\n    )\n)\n</code></pre> <pre><code>import com.google.genai.types.GenerateContentConfig;\n\nLlmAgent agent =\n    LlmAgent.builder()\n        // ... other params\n        .generateContentConfig(GenerateContentConfig.builder()\n            .temperature(0.2F) // More deterministic output\n            .maxOutputTokens(250)\n            .build())\n        .build();\n</code></pre>"},{"location":"agents/llm-agents/#input_schemaoutput_schemaoutput_key","title":"\u7d50\u69cb\u5316\u8cc7\u6599\uff08<code>input_schema</code>\u3001<code>output_schema</code>\u3001<code>output_key</code>\uff09","text":"<p>\u91dd\u5c0d\u9700\u8981\u8207<code>LLM Agent</code>\u9032\u884c\u7d50\u69cb\u5316\u8cc7\u6599\u4ea4\u63db\u7684\u60c5\u5883\uff0cAgent Development Kit (ADK) \u63d0\u4f9b\u4e86\u6a5f\u5236\uff0c\u8b93\u4f60\u53ef\u4ee5\u900f\u904e schema \u5b9a\u7fa9\u9810\u671f\u7684\u8f38\u5165\u8207\u8f38\u51fa\u683c\u5f0f\u3002</p> <ul> <li> <p><code>input_schema</code>\uff08\u9078\u586b\uff09\uff1a \u5b9a\u7fa9\u4e00\u500b schema\uff0c\u63cf\u8ff0\u9810\u671f\u7684\u8f38\u5165\u7d50\u69cb\u3002\u5982\u679c\u8a2d\u7f6e\u6b64\u9805\uff0c\u50b3\u905e\u7d66\u6b64 agent \u7684\u4f7f\u7528\u8005\u8a0a\u606f\u5167\u5bb9 \u5fc5\u9808 \u662f\u7b26\u5408\u8a72 schema \u7684 JSON \u5b57\u4e32\u3002\u4f60\u7684\u6307\u4ee4\u61c9\u5f15\u5c0e\u4f7f\u7528\u8005\u6216\u524d\u4e00\u500b agent \u6309\u6b64\u683c\u5f0f\u63d0\u4f9b\u8cc7\u6599\u3002</p> </li> <li> <p><code>output_schema</code>\uff08\u9078\u586b\uff09\uff1a \u5b9a\u7fa9\u4e00\u500b schema\uff0c\u63cf\u8ff0\u671f\u671b\u7684\u8f38\u51fa\u7d50\u69cb\u3002\u5982\u679c\u8a2d\u7f6e\u6b64\u9805\uff0cagent \u7684\u6700\u7d42\u56de\u61c9 \u5fc5\u9808 \u662f\u7b26\u5408\u8a72 schema \u7684 JSON \u5b57\u4e32\u3002</p> </li> <li> <p><code>output_key</code>\uff08\u9078\u586b\uff09\uff1a \u63d0\u4f9b\u4e00\u500b\u5b57\u4e32\u9375\u503c\u3002\u5982\u679c\u8a2d\u7f6e\u6b64\u9805\uff0cagent \u6700\u7d42 \u56de\u61c9\u7684\u6587\u5b57\u5167\u5bb9\u5c07\u81ea\u52d5\u5132\u5b58\u5230 session state \u5b57\u5178\u4e2d\u5c0d\u61c9\u7684\u9375\u503c\u4e0b\u3002\u9019\u5c0d\u65bc\u5728\u591a\u500b agent \u6216\u5de5\u4f5c\u6d41\u7a0b\u6b65\u9a5f\u9593\u50b3\u905e\u7d50\u679c\u975e\u5e38\u6709\u7528\u3002</p> <ul> <li>\u5728 Python \u4e2d\uff0c\u9019\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a<code>session.state[output_key] = agent_response_text</code></li> <li>\u5728 Java \u4e2d\uff1a<code>session.state().put(outputKey, agentResponseText)</code></li> </ul> </li> </ul> PythonJava <p>The input and output schema is typically a <code>Pydantic</code> BaseModel.</p> <pre><code>from pydantic import BaseModel, Field\n\nclass CapitalOutput(BaseModel):\n    capital: str = Field(description=\"The capital of the country.\")\n\nstructured_capital_agent = LlmAgent(\n    # ... name, model, description\n    instruction=\"\"\"You are a Capital Information Agent. Given a country, respond ONLY with a JSON object containing the capital. Format: {\"capital\": \"capital_name\"}\"\"\",\n    output_schema=CapitalOutput, # Enforce JSON output\n    output_key=\"found_capital\"  # Store result in state['found_capital']\n    # Cannot use tools=[get_capital_city] effectively here\n)\n</code></pre> <p>The input and output schema is a <code>google.genai.types.Schema</code> object.</p> <pre><code>private static final Schema CAPITAL_OUTPUT =\n    Schema.builder()\n        .type(\"OBJECT\")\n        .description(\"Schema for capital city information.\")\n        .properties(\n            Map.of(\n                \"capital\",\n                Schema.builder()\n                    .type(\"STRING\")\n                    .description(\"The capital city of the country.\")\n                    .build()))\n        .build();\n\nLlmAgent structuredCapitalAgent =\n    LlmAgent.builder()\n        // ... name, model, description\n        .instruction(\n                \"You are a Capital Information Agent. Given a country, respond ONLY with a JSON object containing the capital. Format: {\\\"capital\\\": \\\"capital_name\\\"}\")\n        .outputSchema(capitalOutput) // Enforce JSON output\n        .outputKey(\"found_capital\") // Store result in state.get(\"found_capital\")\n        // Cannot use tools(getCapitalCity) effectively here\n        .build();\n</code></pre>"},{"location":"agents/llm-agents/#include_contents","title":"\u7ba1\u7406\u4e0a\u4e0b\u6587\uff08<code>include_contents</code>\uff09","text":"<p>\u63a7\u5236 agent \u662f\u5426\u63a5\u6536\u5148\u524d\u7684\u5c0d\u8a71\u6b77\u53f2\u7d00\u9304\u3002</p> <ul> <li><code>include_contents</code>\uff08\u9078\u586b\uff0c\u9810\u8a2d\u503c\uff1a<code>'default'</code>\uff09\uff1a \u6c7a\u5b9a\u662f\u5426\u5c07 <code>contents</code>\uff08\u6b77\u53f2\u7d00\u9304\uff09\u50b3\u9001\u7d66\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\u3002<ul> <li><code>'default'</code>\uff1aagent \u6703\u63a5\u6536\u76f8\u95dc\u7684\u5c0d\u8a71\u6b77\u53f2\u7d00\u9304\u3002</li> <li><code>'none'</code>\uff1aagent \u4e0d\u6703\u63a5\u6536\u4efb\u4f55\u5148\u524d\u7684 <code>contents</code>\u3002\u5b83\u50c5\u6839\u64da\u76ee\u524d\u7684\u6307\u4ee4\u4ee5\u53ca\u672c\u6b21\u56de\u5408\u6240\u63d0\u4f9b\u7684\u8f38\u5165\u9032\u884c\u64cd\u4f5c\uff08\u9069\u7528\u65bc\u7121\u72c0\u614b\u4efb\u52d9\u6216\u9700\u5f37\u5236\u6307\u5b9a\u4e0a\u4e0b\u6587\u6642\uff09\u3002</li> </ul> </li> </ul> PythonJava <pre><code>stateless_agent = LlmAgent(\n    # ... other params\n    include_contents='none'\n)\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent.IncludeContents;\n\nLlmAgent statelessAgent =\n    LlmAgent.builder()\n        // ... other params\n        .includeContents(IncludeContents.NONE)\n        .build();\n</code></pre>"},{"location":"agents/llm-agents/#planner","title":"\u898f\u5283\u5668\uff08Planner\uff09","text":"<p><code>planner</code>\uff08\u9078\u7528\uff09\uff1a \u6307\u5b9a\u4e00\u500b <code>BasePlanner</code> \u5be6\u4f8b\uff0c\u53ef\u5728\u57f7\u884c\u524d\u555f\u7528\u591a\u6b65\u63a8\u7406\u8207\u898f\u5283\u3002\u76ee\u524d\u6709\u5169\u7a2e\u4e3b\u8981\u7684\u898f\u5283\u5668\uff1a</p> <ul> <li> <p><code>BuiltInPlanner</code>\uff1a \u5229\u7528\u6a21\u578b\u5167\u5efa\u7684\u898f\u5283\u80fd\u529b\uff08\u4f8b\u5982 Gemini \u7684\u601d\u8003\u529f\u80fd\uff09\u3002\u8a73\u60c5\u8207\u7bc4\u4f8b\u8acb\u53c3\u898b Gemini Thinking\u3002</p> <p>\u5728\u6b64\uff0c<code>thinking_budget</code> \u53c3\u6578\u7528\u65bc\u5f15\u5c0e\u6a21\u578b\u5728\u751f\u6210\u56de\u61c9\u6642\u61c9\u4f7f\u7528\u591a\u5c11\u601d\u8003 token\u3002<code>include_thoughts</code> \u53c3\u6578\u5247\u63a7\u5236\u6a21\u578b\u662f\u5426\u61c9\u5728\u56de\u61c9\u4e2d\u5305\u542b\u5176\u539f\u59cb\u601d\u8003\u5167\u5bb9\u8207\u5167\u90e8\u63a8\u7406\u904e\u7a0b\u3002</p> <pre><code>from google.adk import Agent\nfrom google.adk.planners import BuiltInPlanner\nfrom google.genai import types\n\nmy_agent = Agent(\n    model=\"gemini-2.5-flash\",\n    planner=BuiltInPlanner(\n        thinking_config=types.ThinkingConfig(\n            include_thoughts=True,\n            thinking_budget=1024,\n        )\n    ),\n    # ... your tools here\n)\n</code></pre> </li> <li> <p><code>PlanReActPlanner</code>\uff1a \u6b64\u898f\u5283\u5668\u6703\u6307\u793a\u6a21\u578b\u5728\u8f38\u51fa\u6642\u9075\u5faa\u7279\u5b9a\u7d50\u69cb\uff1a\u9996\u5148\u5efa\u7acb\u8a08\u5283\uff0c\u7136\u5f8c\u57f7\u884c\u52d5\u4f5c\uff08\u4f8b\u5982\u547c\u53eb tools\uff09\uff0c\u4e26\u70ba\u6bcf\u500b\u6b65\u9a5f\u63d0\u4f9b\u63a8\u7406\u8aaa\u660e\u3002\u9019\u5c0d\u65bc\u6c92\u6709\u5167\u5efa\u300c\u601d\u8003\u300d\u529f\u80fd\u7684\u6a21\u578b\u7279\u5225\u6709\u7528\u3002</p> <pre><code>from google.adk import Agent\nfrom google.adk.planners import PlanReActPlanner\n\nmy_agent = Agent(\n    model=\"gemini-2.0-flash\",\n    planner=PlanReActPlanner(),\n    # ... your tools here\n)\n</code></pre> <p>\u4ee3\u7406\uff08agent\uff09\u7684\u56de\u61c9\u5c07\u9075\u5faa\u7d50\u69cb\u5316\u683c\u5f0f\uff1a</p> <pre><code>[user]: ai news\n[google_search_agent]: /*PLANNING*/\n1. Perform a Google search for \"latest AI news\" to get current updates and headlines related to artificial intelligence.\n2. Synthesize the information from the search results to provide a summary of recent AI news.\n\n/*ACTION*/\n/*REASONING*/\nThe search results provide a comprehensive overview of recent AI news, covering various aspects like company developments, research breakthroughs, and applications. I have enough information to answer the user's request.\n\n/*FINAL_ANSWER*/\nHere's a summary of recent AI news:\n....\n</code></pre> </li> </ul>"},{"location":"agents/llm-agents/#_2","title":"\u7a0b\u5f0f\u78bc\u57f7\u884c","text":"<ul> <li><code>code_executor</code>\uff08\u53ef\u9078\uff09\uff1a \u63d0\u4f9b<code>BaseCodeExecutor</code>\u5be6\u4f8b\uff0c\u8b93 agent \u80fd\u5920\u57f7\u884c\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u56de\u61c9\u4e2d\u7684\u7a0b\u5f0f\u78bc\u5340\u584a\u3002\uff08\u8acb\u53c3\u95b1 Tools/Built-in tools\uff09</li> </ul> <p>\u4f7f\u7528 built-in-planner \u7684\u7bc4\u4f8b\uff1a <pre><code>from dotenv import load_dotenv\n\n\nimport asyncio\nimport os\n\nfrom google.genai import types\nfrom google.adk.agents.llm_agent import LlmAgent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.artifacts.in_memory_artifact_service import InMemoryArtifactService # Optional\nfrom google.adk.planners import BasePlanner, BuiltInPlanner, PlanReActPlanner\nfrom google.adk.models import LlmRequest\n\nfrom google.genai.types import ThinkingConfig\nfrom google.genai.types import GenerateContentConfig\n\nimport datetime\nfrom zoneinfo import ZoneInfo\n\nAPP_NAME = \"weather_app\"\nUSER_ID = \"1234\"\nSESSION_ID = \"session1234\"\n\ndef get_weather(city: str) -&gt; dict:\n    \"\"\"Retrieves the current weather report for a specified city.\n\n    Args:\n        city (str): The name of the city for which to retrieve the weather report.\n\n    Returns:\n        dict: status and result or error msg.\n    \"\"\"\n    if city.lower() == \"new york\":\n        return {\n            \"status\": \"success\",\n            \"report\": (\n                \"The weather in New York is sunny with a temperature of 25 degrees\"\n                \" Celsius (77 degrees Fahrenheit).\"\n            ),\n        }\n    else:\n        return {\n            \"status\": \"error\",\n            \"error_message\": f\"Weather information for '{city}' is not available.\",\n        }\n\n\ndef get_current_time(city: str) -&gt; dict:\n    \"\"\"Returns the current time in a specified city.\n\n    Args:\n        city (str): The name of the city for which to retrieve the current time.\n\n    Returns:\n        dict: status and result or error msg.\n    \"\"\"\n\n    if city.lower() == \"new york\":\n        tz_identifier = \"America/New_York\"\n    else:\n        return {\n            \"status\": \"error\",\n            \"error_message\": (\n                f\"Sorry, I don't have timezone information for {city}.\"\n            ),\n        }\n\n    tz = ZoneInfo(tz_identifier)\n    now = datetime.datetime.now(tz)\n    report = (\n        f'The current time in {city} is {now.strftime(\"%Y-%m-%d %H:%M:%S %Z%z\")}'\n    )\n    return {\"status\": \"success\", \"report\": report}\n\n# Step 1: Create a ThinkingConfig\nthinking_config = ThinkingConfig(\n    include_thoughts=True,   # Ask the model to include its thoughts in the response\n    thinking_budget=256      # Limit the 'thinking' to 256 tokens (adjust as needed)\n)\nprint(\"ThinkingConfig:\", thinking_config)\n\n# Step 2: Instantiate BuiltInPlanner\nplanner = BuiltInPlanner(\n    thinking_config=thinking_config\n)\nprint(\"BuiltInPlanner created.\")\n\n# Step 3: Wrap the planner in an LlmAgent\nagent = LlmAgent(\n    model=\"gemini-2.5-pro-preview-03-25\",  # Set your model name\n    name=\"weather_and_time_agent\",\n    instruction=\"You are an agent that returns time and weather\",\n    planner=planner,\n    tools=[get_weather, get_current_time]\n)\n\n# Session and Runner\nsession_service = InMemorySessionService()\nsession = session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\nrunner = Runner(agent=agent, app_name=APP_NAME, session_service=session_service)\n\n# Agent Interaction\ndef call_agent(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    events = runner.run(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    for event in events:\n        print(f\"\\nDEBUG EVENT: {event}\\n\")\n        if event.is_final_response() and event.content:\n            final_answer = event.content.parts[0].text.strip()\n            print(\"\\n\ud83d\udfe2 FINAL ANSWER\\n\", final_answer, \"\\n\")\n\ncall_agent(\"If it's raining in New York right now, what is the current temperature?\")\n</code></pre></p>"},{"location":"agents/llm-agents/#_3","title":"\u7d9c\u5408\u61c9\u7528\uff1a\u7bc4\u4f8b","text":"\u7a0b\u5f0f\u78bc <p>\u4ee5\u4e0b\u662f\u5b8c\u6574\u7684\u57fa\u672c <code>capital_agent</code>\uff1a</p> PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# --- Full example code demonstrating LlmAgent with Tools vs. Output Schema ---\nimport json # Needed for pretty printing dicts\nimport asyncio \n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.genai import types\nfrom pydantic import BaseModel, Field\n\n# --- 1. Define Constants ---\nAPP_NAME = \"agent_comparison_app\"\nUSER_ID = \"test_user_456\"\nSESSION_ID_TOOL_AGENT = \"session_tool_agent_xyz\"\nSESSION_ID_SCHEMA_AGENT = \"session_schema_agent_xyz\"\nMODEL_NAME = \"gemini-2.0-flash\"\n\n# --- 2. Define Schemas ---\n\n# Input schema used by both agents\nclass CountryInput(BaseModel):\n    country: str = Field(description=\"The country to get information about.\")\n\n# Output schema ONLY for the second agent\nclass CapitalInfoOutput(BaseModel):\n    capital: str = Field(description=\"The capital city of the country.\")\n    # Note: Population is illustrative; the LLM will infer or estimate this\n    # as it cannot use tools when output_schema is set.\n    population_estimate: str = Field(description=\"An estimated population of the capital city.\")\n\n# --- 3. Define the Tool (Only for the first agent) ---\ndef get_capital_city(country: str) -&gt; str:\n    \"\"\"Retrieves the capital city of a given country.\"\"\"\n    print(f\"\\n-- Tool Call: get_capital_city(country='{country}') --\")\n    country_capitals = {\n        \"united states\": \"Washington, D.C.\",\n        \"canada\": \"Ottawa\",\n        \"france\": \"Paris\",\n        \"japan\": \"Tokyo\",\n    }\n    result = country_capitals.get(country.lower(), f\"Sorry, I couldn't find the capital for {country}.\")\n    print(f\"-- Tool Result: '{result}' --\")\n    return result\n\n# --- 4. Configure Agents ---\n\n# Agent 1: Uses a tool and output_key\ncapital_agent_with_tool = LlmAgent(\n    model=MODEL_NAME,\n    name=\"capital_agent_tool\",\n    description=\"Retrieves the capital city using a specific tool.\",\n    instruction=\"\"\"You are a helpful agent that provides the capital city of a country using a tool.\nThe user will provide the country name in a JSON format like {\"country\": \"country_name\"}.\n1. Extract the country name.\n2. Use the `get_capital_city` tool to find the capital.\n3. Respond clearly to the user, stating the capital city found by the tool.\n\"\"\",\n    tools=[get_capital_city],\n    input_schema=CountryInput,\n    output_key=\"capital_tool_result\", # Store final text response\n)\n\n# Agent 2: Uses output_schema (NO tools possible)\nstructured_info_agent_schema = LlmAgent(\n    model=MODEL_NAME,\n    name=\"structured_info_agent_schema\",\n    description=\"Provides capital and estimated population in a specific JSON format.\",\n    instruction=f\"\"\"You are an agent that provides country information.\nThe user will provide the country name in a JSON format like {{\"country\": \"country_name\"}}.\nRespond ONLY with a JSON object matching this exact schema:\n{json.dumps(CapitalInfoOutput.model_json_schema(), indent=2)}\nUse your knowledge to determine the capital and estimate the population. Do not use any tools.\n\"\"\",\n    # *** NO tools parameter here - using output_schema prevents tool use ***\n    input_schema=CountryInput,\n    output_schema=CapitalInfoOutput, # Enforce JSON output structure\n    output_key=\"structured_info_result\", # Store final JSON response\n)\n\n# --- 5. Set up Session Management and Runners ---\nsession_service = InMemorySessionService()\n\n# Create a runner for EACH agent\ncapital_runner = Runner(\n    agent=capital_agent_with_tool,\n    app_name=APP_NAME,\n    session_service=session_service\n)\nstructured_runner = Runner(\n    agent=structured_info_agent_schema,\n    app_name=APP_NAME,\n    session_service=session_service\n)\n\n# --- 6. Define Agent Interaction Logic ---\nasync def call_agent_and_print(\n    runner_instance: Runner,\n    agent_instance: LlmAgent,\n    session_id: str,\n    query_json: str\n):\n    \"\"\"Sends a query to the specified agent/runner and prints results.\"\"\"\n    print(f\"\\n&gt;&gt;&gt; Calling Agent: '{agent_instance.name}' | Query: {query_json}\")\n\n    user_content = types.Content(role='user', parts=[types.Part(text=query_json)])\n\n    final_response_content = \"No final response received.\"\n    async for event in runner_instance.run_async(user_id=USER_ID, session_id=session_id, new_message=user_content):\n        # print(f\"Event: {event.type}, Author: {event.author}\") # Uncomment for detailed logging\n        if event.is_final_response() and event.content and event.content.parts:\n            # For output_schema, the content is the JSON string itself\n            final_response_content = event.content.parts[0].text\n\n    print(f\"&lt;&lt;&lt; Agent '{agent_instance.name}' Response: {final_response_content}\")\n\n    current_session = await session_service.get_session(app_name=APP_NAME,\n                                                  user_id=USER_ID,\n                                                  session_id=session_id)\n    stored_output = current_session.state.get(agent_instance.output_key)\n\n    # Pretty print if the stored output looks like JSON (likely from output_schema)\n    print(f\"--- Session State ['{agent_instance.output_key}']: \", end=\"\")\n    try:\n        # Attempt to parse and pretty print if it's JSON\n        parsed_output = json.loads(stored_output)\n        print(json.dumps(parsed_output, indent=2))\n    except (json.JSONDecodeError, TypeError):\n         # Otherwise, print as string\n        print(stored_output)\n    print(\"-\" * 30)\n\n\n# --- 7. Run Interactions ---\nasync def main():\n    # Create separate sessions for clarity, though not strictly necessary if context is managed\n    print(\"--- Creating Sessions ---\")\n    await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID_TOOL_AGENT)\n    await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID_SCHEMA_AGENT)\n\n    print(\"--- Testing Agent with Tool ---\")\n    await call_agent_and_print(capital_runner, capital_agent_with_tool, SESSION_ID_TOOL_AGENT, '{\"country\": \"France\"}')\n    await call_agent_and_print(capital_runner, capital_agent_with_tool, SESSION_ID_TOOL_AGENT, '{\"country\": \"Canada\"}')\n\n    print(\"\\n\\n--- Testing Agent with Output Schema (No Tool Use) ---\")\n    await call_agent_and_print(structured_runner, structured_info_agent_schema, SESSION_ID_SCHEMA_AGENT, '{\"country\": \"France\"}')\n    await call_agent_and_print(structured_runner, structured_info_agent_schema, SESSION_ID_SCHEMA_AGENT, '{\"country\": \"Japan\"}')\n\n# --- Run the Agent ---\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nif __name__ == \"__main__\":\n    asyncio.run(main())    \n</code></pre> <pre><code>// --- Full example code demonstrating LlmAgent with Tools vs. Output Schema ---\n\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport com.google.genai.types.Schema;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\npublic class LlmAgentExample {\n\n  // --- 1. Define Constants ---\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n  private static final String APP_NAME = \"capital_agent_tool\";\n  private static final String USER_ID = \"test_user_456\";\n  private static final String SESSION_ID_TOOL_AGENT = \"session_tool_agent_xyz\";\n  private static final String SESSION_ID_SCHEMA_AGENT = \"session_schema_agent_xyz\";\n\n  // --- 2. Define Schemas ---\n\n  // Input schema used by both agents\n  private static final Schema COUNTRY_INPUT_SCHEMA =\n      Schema.builder()\n          .type(\"OBJECT\")\n          .description(\"Input for specifying a country.\")\n          .properties(\n              Map.of(\n                  \"country\",\n                  Schema.builder()\n                      .type(\"STRING\")\n                      .description(\"The country to get information about.\")\n                      .build()))\n          .required(List.of(\"country\"))\n          .build();\n\n  // Output schema ONLY for the second agent\n  private static final Schema CAPITAL_INFO_OUTPUT_SCHEMA =\n      Schema.builder()\n          .type(\"OBJECT\")\n          .description(\"Schema for capital city information.\")\n          .properties(\n              Map.of(\n                  \"capital\",\n                  Schema.builder()\n                      .type(\"STRING\")\n                      .description(\"The capital city of the country.\")\n                      .build(),\n                  \"population_estimate\",\n                  Schema.builder()\n                      .type(\"STRING\")\n                      .description(\"An estimated population of the capital city.\")\n                      .build()))\n          .required(List.of(\"capital\", \"population_estimate\"))\n          .build();\n\n  // --- 3. Define the Tool (Only for the first agent) ---\n  // Retrieves the capital city of a given country.\n  public static Map&lt;String, Object&gt; getCapitalCity(\n      @Annotations.Schema(name = \"country\", description = \"The country to get capital for\")\n      String country) {\n    System.out.printf(\"%n-- Tool Call: getCapitalCity(country='%s') --%n\", country);\n    Map&lt;String, String&gt; countryCapitals = new HashMap&lt;&gt;();\n    countryCapitals.put(\"united states\", \"Washington, D.C.\");\n    countryCapitals.put(\"canada\", \"Ottawa\");\n    countryCapitals.put(\"france\", \"Paris\");\n    countryCapitals.put(\"japan\", \"Tokyo\");\n\n    String result =\n        countryCapitals.getOrDefault(\n            country.toLowerCase(), \"Sorry, I couldn't find the capital for \" + country + \".\");\n    System.out.printf(\"-- Tool Result: '%s' --%n\", result);\n    return Map.of(\"result\", result); // Tools must return a Map\n  }\n\n  public static void main(String[] args){\n    LlmAgentExample agentExample = new LlmAgentExample();\n    FunctionTool capitalTool = FunctionTool.create(agentExample.getClass(), \"getCapitalCity\");\n\n    // --- 4. Configure Agents ---\n\n    // Agent 1: Uses a tool and output_key\n    LlmAgent capitalAgentWithTool =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"capital_agent_tool\")\n            .description(\"Retrieves the capital city using a specific tool.\")\n            .instruction(\n              \"\"\"\n              You are a helpful agent that provides the capital city of a country using a tool.\n              1. Extract the country name.\n              2. Use the `get_capital_city` tool to find the capital.\n              3. Respond clearly to the user, stating the capital city found by the tool.\n              \"\"\")\n            .tools(capitalTool)\n            .inputSchema(COUNTRY_INPUT_SCHEMA)\n            .outputKey(\"capital_tool_result\") // Store final text response\n            .build();\n\n    // Agent 2: Uses an output schema\n    LlmAgent structuredInfoAgentSchema =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"structured_info_agent_schema\")\n            .description(\"Provides capital and estimated population in a specific JSON format.\")\n            .instruction(\n                String.format(\"\"\"\n                You are an agent that provides country information.\n                Respond ONLY with a JSON object matching this exact schema: %s\n                Use your knowledge to determine the capital and estimate the population. Do not use any tools.\n                \"\"\", CAPITAL_INFO_OUTPUT_SCHEMA.toJson()))\n            // *** NO tools parameter here - using output_schema prevents tool use ***\n            .inputSchema(COUNTRY_INPUT_SCHEMA)\n            .outputSchema(CAPITAL_INFO_OUTPUT_SCHEMA) // Enforce JSON output structure\n            .outputKey(\"structured_info_result\") // Store final JSON response\n            .build();\n\n    // --- 5. Set up Session Management and Runners ---\n    InMemorySessionService sessionService = new InMemorySessionService();\n\n    sessionService.createSession(APP_NAME, USER_ID, null, SESSION_ID_TOOL_AGENT).blockingGet();\n    sessionService.createSession(APP_NAME, USER_ID, null, SESSION_ID_SCHEMA_AGENT).blockingGet();\n\n    Runner capitalRunner = new Runner(capitalAgentWithTool, APP_NAME, null, sessionService);\n    Runner structuredRunner = new Runner(structuredInfoAgentSchema, APP_NAME, null, sessionService);\n\n    // --- 6. Run Interactions ---\n    System.out.println(\"--- Testing Agent with Tool ---\");\n    agentExample.callAgentAndPrint(\n        capitalRunner, capitalAgentWithTool, SESSION_ID_TOOL_AGENT, \"{\\\"country\\\": \\\"France\\\"}\");\n    agentExample.callAgentAndPrint(\n        capitalRunner, capitalAgentWithTool, SESSION_ID_TOOL_AGENT, \"{\\\"country\\\": \\\"Canada\\\"}\");\n\n    System.out.println(\"\\n\\n--- Testing Agent with Output Schema (No Tool Use) ---\");\n    agentExample.callAgentAndPrint(\n        structuredRunner,\n        structuredInfoAgentSchema,\n        SESSION_ID_SCHEMA_AGENT,\n        \"{\\\"country\\\": \\\"France\\\"}\");\n    agentExample.callAgentAndPrint(\n        structuredRunner,\n        structuredInfoAgentSchema,\n        SESSION_ID_SCHEMA_AGENT,\n        \"{\\\"country\\\": \\\"Japan\\\"}\");\n  }\n\n  // --- 7. Define Agent Interaction Logic ---\n  public void callAgentAndPrint(Runner runner, LlmAgent agent, String sessionId, String queryJson) {\n    System.out.printf(\n        \"%n&gt;&gt;&gt; Calling Agent: '%s' | Session: '%s' | Query: %s%n\",\n        agent.name(), sessionId, queryJson);\n\n    Content userContent = Content.fromParts(Part.fromText(queryJson));\n    final String[] finalResponseContent = {\"No final response received.\"};\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, sessionId, userContent);\n\n    // Stream event response\n    eventStream.blockingForEach(event -&gt; {\n          if (event.finalResponse() &amp;&amp; event.content().isPresent()) {\n            event\n                .content()\n                .get()\n                .parts()\n                .flatMap(parts -&gt; parts.isEmpty() ? Optional.empty() : Optional.of(parts.get(0)))\n                .flatMap(Part::text)\n                .ifPresent(text -&gt; finalResponseContent[0] = text);\n          }\n        });\n\n    System.out.printf(\"&lt;&lt;&lt; Agent '%s' Response: %s%n\", agent.name(), finalResponseContent[0]);\n\n    // Retrieve the session again to get the updated state\n    Session updatedSession =\n        runner\n            .sessionService()\n            .getSession(APP_NAME, USER_ID, sessionId, Optional.empty())\n            .blockingGet();\n\n    if (updatedSession != null &amp;&amp; agent.outputKey().isPresent()) {\n      // Print to verify if the stored output looks like JSON (likely from output_schema)\n      System.out.printf(\"--- Session State ['%s']: \", agent.outputKey().get());\n      }\n  }\n}\n</code></pre> <p>\uff08\u672c\u7bc4\u4f8b\u5c55\u793a\u4e86\u6838\u5fc3\u6982\u5ff5\u3002\u66f4\u8907\u96dc\u7684 agent \u53ef\u80fd\u6703\u7d50\u5408 schema\u3001\u5167\u5bb9\u63a7\u5236\u3001\u898f\u5283\u7b49\u529f\u80fd\u3002\uff09</p>"},{"location":"agents/llm-agents/#_4","title":"\u76f8\u95dc\u6982\u5ff5\uff08\u5ef6\u4f38\u4e3b\u984c\uff09","text":"<p>\u672c\u9801\u8aaa\u660e\u4e86 <code>LlmAgent</code> \u7684\u6838\u5fc3\u8a2d\u5b9a\uff0c\u5176\u4ed6\u76f8\u95dc\u6982\u5ff5\u5247\u80fd\u63d0\u4f9b\u66f4\u9032\u968e\u7684\u63a7\u5236\uff0c\u4e26\u65bc\u5176\u4ed6\u9801\u9762\u8a73\u7d30\u4ecb\u7d39\uff1a</p> <ul> <li>Callbacks\uff1a \u900f\u904e <code>before_model_callback</code>\u3001<code>after_model_callback</code> \u7b49\u65b9\u5f0f\u6514\u622a\u57f7\u884c\u9ede\uff08\u6a21\u578b\u547c\u53eb\u524d/\u5f8c\u3001\u5de5\u5177\u547c\u53eb\u524d/\u5f8c\uff09\u3002\u8acb\u53c3\u95b1 Callbacks\u3002</li> <li>\u591a agent \u63a7\u5236\uff08Multi-Agent Control\uff09\uff1a \u9032\u968e\u7684 agent \u4e92\u52d5\u7b56\u7565\uff0c\u5305\u62ec\u898f\u5283\uff08<code>planner</code>\uff09\u3001agent \u8f49\u79fb\u63a7\u5236\uff08<code>disallow_transfer_to_parent</code>\u3001<code>disallow_transfer_to_peers</code>\uff09\u3001\u4ee5\u53ca\u7cfb\u7d71\u5c64\u7d1a\u6307\u4ee4\uff08<code>global_instruction</code>\uff09\u3002\u8acb\u53c3\u95b1 Multi-Agents\u3002</li> </ul>"},{"location":"agents/models.en/","title":"Using Different Models with ADK","text":"<p>Note</p> <p>Java ADK currently supports Gemini and Anthropic models. More model support coming soon.</p> <p>The Agent Development Kit (ADK) is designed for flexibility, allowing you to integrate various Large Language Models (LLMs) into your agents. While the setup for Google Gemini models is covered in the Setup Foundation Models guide, this page details how to leverage Gemini effectively and integrate other popular models, including those hosted externally or running locally.</p> <p>ADK primarily uses two mechanisms for model integration:</p> <ol> <li>Direct String / Registry: For models tightly integrated with Google Cloud    (like Gemini models accessed via Google AI Studio or Vertex AI) or models    hosted on Vertex AI endpoints. You typically provide the model name or    endpoint resource string directly to the <code>LlmAgent</code>. ADK's internal registry    resolves this string to the appropriate backend client, often utilizing the    <code>google-genai</code> library.</li> <li>Wrapper Classes: For broader compatibility, especially with models    outside the Google ecosystem or those requiring specific client    configurations (like models accessed via LiteLLM). You instantiate a specific    wrapper class (e.g., <code>LiteLlm</code>) and pass this object as the <code>model</code> parameter    to your <code>LlmAgent</code>.</li> </ol> <p>The following sections guide you through using these methods based on your needs.</p>"},{"location":"agents/models.en/#using-google-gemini-models","title":"Using Google Gemini Models","text":"<p>This section covers authenticating with Google's Gemini models, either through Google AI Studio for rapid development or Google Cloud Vertex AI for enterprise applications. This is the most direct way to use Google's flagship models within ADK.</p> <p>Integration Method: Once you are authenticated using one of the below methods, you can pass the model's identifier string directly to the <code>model</code> parameter of <code>LlmAgent</code>.</p> <p>Tip</p> <p>The <code>google-genai</code> library, used internally by ADK for Gemini models, can connect through either Google AI Studio or Vertex AI.</p> <p>Model support for voice/video streaming</p> <p>In order to use voice/video streaming in ADK, you will need to use Gemini models that support the Live API. You can find the model ID(s) that support the Gemini Live API in the documentation:</p> <ul> <li>Google AI Studio: Gemini Live API</li> <li>Vertex AI: Gemini Live API</li> </ul>"},{"location":"agents/models.en/#google-ai-studio","title":"Google AI Studio","text":"<p>This is the simplest method and is recommended for getting started quickly.</p> <ul> <li>Authentication Method: API Key</li> <li> <p>Setup:</p> <ol> <li>Get an API key: Obtain your key from Google AI Studio.</li> <li> <p>Set environment variables: Create a <code>.env</code> file (Python) or <code>.properties</code> (Java) in your project's root directory and add the following lines. ADK will automatically load this file.</p> <pre><code>export GOOGLE_API_KEY=\"YOUR_GOOGLE_API_KEY\"\nexport GOOGLE_GENAI_USE_VERTEXAI=FALSE\n</code></pre> <p>(or)</p> <p>Pass these variables during the model initialization via the <code>Client</code> (see example below).</p> </li> </ol> </li> <li> <p>Models: Find all available models on the   Google AI for Developers site.</p> </li> </ul>"},{"location":"agents/models.en/#google-cloud-vertex-ai","title":"Google Cloud Vertex AI","text":"<p>For scalable and production-oriented use cases, Vertex AI is the recommended platform. Gemini on Vertex AI supports enterprise-grade features, security, and compliance controls. Based on your development environment and usecase, choose one of the below methods to authenticate.</p> <p>Pre-requisites: A Google Cloud Project with Vertex AI enabled.</p>"},{"location":"agents/models.en/#method-a-user-credentials-for-local-development","title":"Method A: User Credentials (for Local Development)","text":"<ol> <li>Install the gcloud CLI: Follow the official installation instructions.</li> <li>Log in using ADC: This command opens a browser to authenticate your user account for local development.     <pre><code>gcloud auth application-default login\n</code></pre></li> <li> <p>Set environment variables: <pre><code>export GOOGLE_CLOUD_PROJECT=\"YOUR_PROJECT_ID\"\nexport GOOGLE_CLOUD_LOCATION=\"YOUR_VERTEX_AI_LOCATION\" # e.g., us-central1\n</code></pre></p> <p>Explicitly tell the library to use Vertex AI:</p> <pre><code>export GOOGLE_GENAI_USE_VERTEXAI=TRUE\n</code></pre> </li> <li> <p>Models: Find available model IDs in the   Vertex AI documentation.</p> </li> </ol>"},{"location":"agents/models.en/#method-b-vertex-ai-express-mode","title":"Method B: Vertex AI Express Mode","text":"<p>Vertex AI Express Mode offers a simplified, API-key-based setup for rapid prototyping.</p> <ol> <li>Sign up for Express Mode to get your API key.</li> <li>Set environment variables: <pre><code>export GOOGLE_API_KEY=\"PASTE_YOUR_EXPRESS_MODE_API_KEY_HERE\"\nexport GOOGLE_GENAI_USE_VERTEXAI=TRUE\n</code></pre></li> </ol>"},{"location":"agents/models.en/#method-c-service-account-for-production-automation","title":"Method C: Service Account (for Production &amp; Automation)","text":"<p>For deployed applications, a service account is the standard method.</p> <ol> <li>Create a Service Account and grant it the <code>Vertex AI User</code> role.</li> <li>Provide credentials to your application:<ul> <li>On Google Cloud: If you are running the agent in Cloud Run, GKE, VM or other Google Cloud services, the environment can automatically provide the service account credentials. You don't have to create a key file.</li> <li>Elsewhere: Create a service account key file and point to it with an environment variable:     <pre><code>export GOOGLE_APPLICATION_CREDENTIALS=\"/path/to/your/keyfile.json\"\n</code></pre> Instead of the key file, you can also authenticate the service account using Workload Identity. But this is outside the scope of this guide.</li> </ul> </li> </ol> <p>Example:</p> PythonJava <pre><code>from google.adk.agents import LlmAgent\n\n# --- Example using a stable Gemini Flash model ---\nagent_gemini_flash = LlmAgent(\n    # Use the latest stable Flash model identifier\n    model=\"gemini-2.0-flash\",\n    name=\"gemini_flash_agent\",\n    instruction=\"You are a fast and helpful Gemini assistant.\",\n    # ... other agent parameters\n)\n\n# --- Example using a powerful Gemini Pro model ---\n# Note: Always check the official Gemini documentation for the latest model names,\n# including specific preview versions if needed. Preview models might have\n# different availability or quota limitations.\nagent_gemini_pro = LlmAgent(\n    # Use the latest generally available Pro model identifier\n    model=\"gemini-2.5-pro-preview-03-25\",\n    name=\"gemini_pro_agent\",\n    instruction=\"You are a powerful and knowledgeable Gemini assistant.\",\n    # ... other agent parameters\n)\n</code></pre> <pre><code>// --- Example #1: using a stable Gemini Flash model with ENV variables---\nLlmAgent agentGeminiFlash =\n    LlmAgent.builder()\n        // Use the latest stable Flash model identifier\n        .model(\"gemini-2.0-flash\") // Set ENV variables to use this model\n        .name(\"gemini_flash_agent\")\n        .instruction(\"You are a fast and helpful Gemini assistant.\")\n        // ... other agent parameters\n        .build();\n\n// --- Example #2: using a powerful Gemini Pro model with API Key in model ---\nLlmAgent agentGeminiPro =\n    LlmAgent.builder()\n        // Use the latest generally available Pro model identifier\n        .model(new Gemini(\"gemini-2.5-pro-preview-03-25\",\n            Client.builder()\n                .vertexAI(false)\n                .apiKey(\"API_KEY\") // Set the API Key (or) project/ location\n                .build()))\n        // Or, you can also directly pass the API_KEY\n        // .model(new Gemini(\"gemini-2.5-pro-preview-03-25\", \"API_KEY\"))\n        .name(\"gemini_pro_agent\")\n        .instruction(\"You are a powerful and knowledgeable Gemini assistant.\")\n        // ... other agent parameters\n        .build();\n\n// Note: Always check the official Gemini documentation for the latest model names,\n// including specific preview versions if needed. Preview models might have\n// different availability or quota limitations.\n</code></pre> <p>Secure Your Credentials</p> <p>Service account credentials or API keys are powerful credentials. Never expose them publicly. Use a secret manager like Google Secret Manager to store and access them securely in production.</p>"},{"location":"agents/models.en/#using-anthropic-models","title":"Using Anthropic models","text":"<p>You can integrate Anthropic's Claude models directly using their API key or from a Vertex AI backend into your Java ADK applications by using the ADK's <code>Claude</code> wrapper class.</p> <p>For Vertex AI backend, see the Third-Party Models on Vertex AI section.</p> <p>Prerequisites:</p> <ol> <li> <p>Dependencies:</p> <ul> <li>Anthropic SDK Classes (Transitive): The Java ADK's <code>com.google.adk.models.Claude</code> wrapper relies on classes from Anthropic's official Java SDK. These are typically included as transitive dependencies.</li> </ul> </li> <li> <p>Anthropic API Key:</p> <ul> <li>Obtain an API key from Anthropic. Securely manage this key using a secret manager.</li> </ul> </li> </ol> <p>Integration:</p> <p>Instantiate <code>com.google.adk.models.Claude</code>, providing the desired Claude model name and an <code>AnthropicOkHttpClient</code> configured with your API key. Then, pass this <code>Claude</code> instance to your <code>LlmAgent</code>.</p> <p>Example:</p> <pre><code>import com.anthropic.client.AnthropicClient;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.models.Claude;\nimport com.anthropic.client.okhttp.AnthropicOkHttpClient; // From Anthropic's SDK\n\npublic class DirectAnthropicAgent {\n\n  private static final String CLAUDE_MODEL_ID = \"claude-3-7-sonnet-latest\"; // Or your preferred Claude model\n\n  public static LlmAgent createAgent() {\n\n    // It's recommended to load sensitive keys from a secure config\n    AnthropicClient anthropicClient = AnthropicOkHttpClient.builder()\n        .apiKey(\"ANTHROPIC_API_KEY\")\n        .build();\n\n    Claude claudeModel = new Claude(\n        CLAUDE_MODEL_ID,\n        anthropicClient\n    );\n\n    return LlmAgent.builder()\n        .name(\"claude_direct_agent\")\n        .model(claudeModel)\n        .instruction(\"You are a helpful AI assistant powered by Anthropic Claude.\")\n        // ... other LlmAgent configurations\n        .build();\n  }\n\n  public static void main(String[] args) {\n    try {\n      LlmAgent agent = createAgent();\n      System.out.println(\"Successfully created direct Anthropic agent: \" + agent.name());\n    } catch (IllegalStateException e) {\n      System.err.println(\"Error creating agent: \" + e.getMessage());\n    }\n  }\n}\n</code></pre>"},{"location":"agents/models.en/#using-cloud-proprietary-models-via-litellm","title":"Using Cloud &amp; Proprietary Models via LiteLLM","text":"<p>To access a vast range of LLMs from providers like OpenAI, Anthropic (non-Vertex AI), Cohere, and many others, ADK offers integration through the LiteLLM library.</p> <p>Integration Method: Instantiate the <code>LiteLlm</code> wrapper class and pass it to the <code>model</code> parameter of <code>LlmAgent</code>.</p> <p>LiteLLM Overview: LiteLLM acts as a translation layer, providing a standardized, OpenAI-compatible interface to over 100+ LLMs.</p> <p>Setup:</p> <ol> <li>Install LiteLLM: <pre><code>pip install litellm\n</code></pre></li> <li> <p>Set Provider API Keys: Configure API keys as environment variables for    the specific providers you intend to use.</p> <ul> <li> <p>Example for OpenAI:</p> <pre><code>export OPENAI_API_KEY=\"YOUR_OPENAI_API_KEY\"\n</code></pre> </li> <li> <p>Example for Anthropic (non-Vertex AI):</p> <pre><code>export ANTHROPIC_API_KEY=\"YOUR_ANTHROPIC_API_KEY\"\n</code></pre> </li> <li> <p>Consult the   LiteLLM Providers Documentation   for the correct environment variable names for other providers.</p> <p>Example:</p> <pre><code>from google.adk.agents import LlmAgent\nfrom google.adk.models.lite_llm import LiteLlm\n\n# --- Example Agent using OpenAI's GPT-4o ---\n# (Requires OPENAI_API_KEY)\nagent_openai = LlmAgent(\n    model=LiteLlm(model=\"openai/gpt-4o\"), # LiteLLM model string format\n    name=\"openai_agent\",\n    instruction=\"You are a helpful assistant powered by GPT-4o.\",\n    # ... other agent parameters\n)\n\n# --- Example Agent using Anthropic's Claude Haiku (non-Vertex) ---\n# (Requires ANTHROPIC_API_KEY)\nagent_claude_direct = LlmAgent(\n    model=LiteLlm(model=\"anthropic/claude-3-haiku-20240307\"),\n    name=\"claude_direct_agent\",\n    instruction=\"You are an assistant powered by Claude Haiku.\",\n    # ... other agent parameters\n)\n</code></pre> </li> </ul> </li> </ol> <p>Windows Encoding Note for LiteLLM</p> <p>When using ADK agents with LiteLLM on Windows, you might encounter a <code>UnicodeDecodeError</code>. This error occurs because LiteLLM may attempt to read cached files using the default Windows encoding (<code>cp1252</code>) instead of UTF-8.</p> <p>To prevent this, we recommend setting the <code>PYTHONUTF8</code> environment variable to <code>1</code>. This forces Python to use UTF-8 for all file I/O.</p> <p>Example (PowerShell): <pre><code># Set for the current session\n$env:PYTHONUTF8 = \"1\"\n\n# Set persistently for the user\n[System.Environment]::SetEnvironmentVariable('PYTHONUTF8', '1', [System.EnvironmentVariableTarget]::User)\n</code></pre></p>"},{"location":"agents/models.en/#using-open-local-models-via-litellm","title":"Using Open &amp; Local Models via LiteLLM","text":"<p>For maximum control, cost savings, privacy, or offline use cases, you can run open-source models locally or self-host them and integrate them using LiteLLM.</p> <p>Integration Method: Instantiate the <code>LiteLlm</code> wrapper class, configured to point to your local model server.</p>"},{"location":"agents/models.en/#ollama-integration","title":"Ollama Integration","text":"<p>Ollama allows you to easily run open-source models locally.</p>"},{"location":"agents/models.en/#model-choice","title":"Model choice","text":"<p>If your agent is relying on tools, please make sure that you select a model with tool support from Ollama website.</p> <p>For reliable results, we recommend using a decent-sized model with tool support.</p> <p>The tool support for the model can be checked with the following command:</p> <pre><code>ollama show mistral-small3.1\n  Model\n    architecture        mistral3\n    parameters          24.0B\n    context length      131072\n    embedding length    5120\n    quantization        Q4_K_M\n\n  Capabilities\n    completion\n    vision\n    tools\n</code></pre> <p>You are supposed to see <code>tools</code> listed under capabilities.</p> <p>You can also look at the template the model is using and tweak it based on your needs.</p> <pre><code>ollama show --modelfile llama3.2 &gt; model_file_to_modify\n</code></pre> <p>For instance, the default template for the above model inherently suggests that the model shall call a function all the time. This may result in an infinite loop of function calls.</p> <pre><code>Given the following functions, please respond with a JSON for a function call\nwith its proper arguments that best answers the given prompt.\n\nRespond in the format {\"name\": function name, \"parameters\": dictionary of\nargument name and its value}. Do not use variables.\n</code></pre> <p>You can swap such prompts with a more descriptive one to prevent infinite tool call loops.</p> <p>For instance:</p> <pre><code>Review the user's prompt and the available functions listed below.\nFirst, determine if calling one of these functions is the most appropriate way to respond. A function call is likely needed if the prompt asks for a specific action, requires external data lookup, or involves calculations handled by the functions. If the prompt is a general question or can be answered directly, a function call is likely NOT needed.\n\nIf you determine a function call IS required: Respond ONLY with a JSON object in the format {\"name\": \"function_name\", \"parameters\": {\"argument_name\": \"value\"}}. Ensure parameter values are concrete, not variables.\n\nIf you determine a function call IS NOT required: Respond directly to the user's prompt in plain text, providing the answer or information requested. Do not output any JSON.\n</code></pre> <p>Then you can create a new model with the following command:</p> <pre><code>ollama create llama3.2-modified -f model_file_to_modify\n</code></pre>"},{"location":"agents/models.en/#using-ollama_chat-provider","title":"Using ollama_chat provider","text":"<p>Our LiteLLM wrapper can be used to create agents with Ollama models.</p> <pre><code>root_agent = Agent(\n    model=LiteLlm(model=\"ollama_chat/mistral-small3.1\"),\n    name=\"dice_agent\",\n    description=(\n        \"hello world agent that can roll a dice of 8 sides and check prime\"\n        \" numbers.\"\n    ),\n    instruction=\"\"\"\n      You roll dice and answer questions about the outcome of the dice rolls.\n    \"\"\",\n    tools=[\n        roll_die,\n        check_prime,\n    ],\n)\n</code></pre> <p>It is important to set the provider <code>ollama_chat</code> instead of <code>ollama</code>. Using <code>ollama</code> will result in unexpected behaviors such as infinite tool call loops and ignoring previous context.</p> <p>While <code>api_base</code> can be provided inside LiteLLM for generation, LiteLLM library is calling other APIs relying on the env variable instead as of v1.65.5 after completion. So at this time, we recommend setting the env variable <code>OLLAMA_API_BASE</code> to point to the ollama server.</p> <pre><code>export OLLAMA_API_BASE=\"http://localhost:11434\"\nadk web\n</code></pre>"},{"location":"agents/models.en/#using-openai-provider","title":"Using openai provider","text":"<p>Alternatively, <code>openai</code> can be used as the provider name. But this will also require setting the <code>OPENAI_API_BASE=http://localhost:11434/v1</code> and <code>OPENAI_API_KEY=anything</code> env variables instead of <code>OLLAMA_API_BASE</code>. Please note that api base now has <code>/v1</code> at the end.</p> <pre><code>root_agent = Agent(\n    model=LiteLlm(model=\"openai/mistral-small3.1\"),\n    name=\"dice_agent\",\n    description=(\n        \"hello world agent that can roll a dice of 8 sides and check prime\"\n        \" numbers.\"\n    ),\n    instruction=\"\"\"\n      You roll dice and answer questions about the outcome of the dice rolls.\n    \"\"\",\n    tools=[\n        roll_die,\n        check_prime,\n    ],\n)\n</code></pre> <pre><code>export OPENAI_API_BASE=http://localhost:11434/v1\nexport OPENAI_API_KEY=anything\nadk web\n</code></pre>"},{"location":"agents/models.en/#debugging","title":"Debugging","text":"<p>You can see the request sent to the Ollama server by adding the following in your agent code just after imports.</p> <pre><code>import litellm\nlitellm._turn_on_debug()\n</code></pre> <p>Look for a line like the following:</p> <pre><code>Request Sent from LiteLLM:\ncurl -X POST \\\nhttp://localhost:11434/api/chat \\\n-d '{'model': 'mistral-small3.1', 'messages': [{'role': 'system', 'content': ...\n</code></pre>"},{"location":"agents/models.en/#self-hosted-endpoint-eg-vllm","title":"Self-Hosted Endpoint (e.g., vLLM)","text":"<p>Tools such as vLLM allow you to host models efficiently and often expose an OpenAI-compatible API endpoint.</p> <p>Setup:</p> <ol> <li>Deploy Model: Deploy your chosen model using vLLM (or a similar tool).    Note the API base URL (e.g., <code>https://your-vllm-endpoint.run.app/v1</code>).<ul> <li>Important for ADK Tools: When deploying, ensure the serving tool   supports and enables OpenAI-compatible tool/function calling. For vLLM,   this might involve flags like <code>--enable-auto-tool-choice</code> and potentially   a specific <code>--tool-call-parser</code>, depending on the model. Refer to the vLLM   documentation on Tool Use.</li> </ul> </li> <li> <p>Authentication: Determine how your endpoint handles authentication (e.g.,    API key, bearer token).</p> <p>Integration Example:</p> <pre><code>import subprocess\nfrom google.adk.agents import LlmAgent\nfrom google.adk.models.lite_llm import LiteLlm\n\n# --- Example Agent using a model hosted on a vLLM endpoint ---\n\n# Endpoint URL provided by your vLLM deployment\napi_base_url = \"https://your-vllm-endpoint.run.app/v1\"\n\n# Model name as recognized by *your* vLLM endpoint configuration\nmodel_name_at_endpoint = \"hosted_vllm/google/gemma-3-4b-it\" # Example from vllm_test.py\n\n# Authentication (Example: using gcloud identity token for a Cloud Run deployment)\n# Adapt this based on your endpoint's security\ntry:\n    gcloud_token = subprocess.check_output(\n        [\"gcloud\", \"auth\", \"print-identity-token\", \"-q\"]\n    ).decode().strip()\n    auth_headers = {\"Authorization\": f\"Bearer {gcloud_token}\"}\nexcept Exception as e:\n    print(f\"Warning: Could not get gcloud token - {e}. Endpoint might be unsecured or require different auth.\")\n    auth_headers = None # Or handle error appropriately\n\nagent_vllm = LlmAgent(\n    model=LiteLlm(\n        model=model_name_at_endpoint,\n        api_base=api_base_url,\n        # Pass authentication headers if needed\n        extra_headers=auth_headers\n        # Alternatively, if endpoint uses an API key:\n        # api_key=\"YOUR_ENDPOINT_API_KEY\"\n    ),\n    name=\"vllm_agent\",\n    instruction=\"You are a helpful assistant running on a self-hosted vLLM endpoint.\",\n    # ... other agent parameters\n)\n</code></pre> </li> </ol>"},{"location":"agents/models.en/#using-hosted-tuned-models-on-vertex-ai","title":"Using Hosted &amp; Tuned Models on Vertex AI","text":"<p>For enterprise-grade scalability, reliability, and integration with Google Cloud's MLOps ecosystem, you can use models deployed to Vertex AI Endpoints. This includes models from Model Garden or your own fine-tuned models.</p> <p>Integration Method: Pass the full Vertex AI Endpoint resource string (<code>projects/PROJECT_ID/locations/LOCATION/endpoints/ENDPOINT_ID</code>) directly to the <code>model</code> parameter of <code>LlmAgent</code>.</p> <p>Vertex AI Setup (Consolidated):</p> <p>Ensure your environment is configured for Vertex AI:</p> <ol> <li> <p>Authentication: Use Application Default Credentials (ADC):</p> <pre><code>gcloud auth application-default login\n</code></pre> </li> <li> <p>Environment Variables: Set your project and location:</p> <pre><code>export GOOGLE_CLOUD_PROJECT=\"YOUR_PROJECT_ID\"\nexport GOOGLE_CLOUD_LOCATION=\"YOUR_VERTEX_AI_LOCATION\" # e.g., us-central1\n</code></pre> </li> <li> <p>Enable Vertex Backend: Crucially, ensure the <code>google-genai</code> library    targets Vertex AI:</p> <pre><code>export GOOGLE_GENAI_USE_VERTEXAI=TRUE\n</code></pre> </li> </ol>"},{"location":"agents/models.en/#model-garden-deployments","title":"Model Garden Deployments","text":"<p>You can deploy various open and proprietary models from the Vertex AI Model Garden to an endpoint.</p> <p>Example:</p> <pre><code>from google.adk.agents import LlmAgent\nfrom google.genai import types # For config objects\n\n# --- Example Agent using a Llama 3 model deployed from Model Garden ---\n\n# Replace with your actual Vertex AI Endpoint resource name\nllama3_endpoint = \"projects/YOUR_PROJECT_ID/locations/us-central1/endpoints/YOUR_LLAMA3_ENDPOINT_ID\"\n\nagent_llama3_vertex = LlmAgent(\n    model=llama3_endpoint,\n    name=\"llama3_vertex_agent\",\n    instruction=\"You are a helpful assistant based on Llama 3, hosted on Vertex AI.\",\n    generate_content_config=types.GenerateContentConfig(max_output_tokens=2048),\n    # ... other agent parameters\n)\n</code></pre>"},{"location":"agents/models.en/#fine-tuned-model-endpoints","title":"Fine-tuned Model Endpoints","text":"<p>Deploying your fine-tuned models (whether based on Gemini or other architectures supported by Vertex AI) results in an endpoint that can be used directly.</p> <p>Example:</p> <pre><code>from google.adk.agents import LlmAgent\n\n# --- Example Agent using a fine-tuned Gemini model endpoint ---\n\n# Replace with your fine-tuned model's endpoint resource name\nfinetuned_gemini_endpoint = \"projects/YOUR_PROJECT_ID/locations/us-central1/endpoints/YOUR_FINETUNED_ENDPOINT_ID\"\n\nagent_finetuned_gemini = LlmAgent(\n    model=finetuned_gemini_endpoint,\n    name=\"finetuned_gemini_agent\",\n    instruction=\"You are a specialized assistant trained on specific data.\",\n    # ... other agent parameters\n)\n</code></pre>"},{"location":"agents/models.en/#third-party-models-on-vertex-ai-eg-anthropic-claude","title":"Third-Party Models on Vertex AI (e.g., Anthropic Claude)","text":"<p>Some providers, like Anthropic, make their models available directly through Vertex AI.</p> PythonJava <p>Integration Method: Uses the direct model string (e.g., <code>\"claude-3-sonnet@20240229\"</code>), but requires manual registration within ADK.</p> <p>Why Registration? ADK's registry automatically recognizes <code>gemini-*</code> strings and standard Vertex AI endpoint strings (<code>projects/.../endpoints/...</code>) and routes them via the <code>google-genai</code> library. For other model types used directly via Vertex AI (like Claude), you must explicitly tell the ADK registry which specific wrapper class (<code>Claude</code> in this case) knows how to handle that model identifier string with the Vertex AI backend.</p> <p>Setup:</p> <ol> <li> <p>Vertex AI Environment: Ensure the consolidated Vertex AI setup (ADC, Env    Vars, <code>GOOGLE_GENAI_USE_VERTEXAI=TRUE</code>) is complete.</p> </li> <li> <p>Install Provider Library: Install the necessary client library configured    for Vertex AI.</p> <pre><code>pip install \"anthropic[vertex]\"\n</code></pre> </li> <li> <p>Register Model Class: Add this code near the start of your application,    before creating an agent using the Claude model string:</p> <pre><code># Required for using Claude model strings directly via Vertex AI with LlmAgent\nfrom google.adk.models.anthropic_llm import Claude\nfrom google.adk.models.registry import LLMRegistry\n\nLLMRegistry.register(Claude)\n</code></pre> </li> </ol> <p>Example:</p> <pre><code>from google.adk.agents import LlmAgent\nfrom google.adk.models.anthropic_llm import Claude # Import needed for registration\nfrom google.adk.models.registry import LLMRegistry # Import needed for registration\nfrom google.genai import types\n\n# --- Register Claude class (do this once at startup) ---\nLLMRegistry.register(Claude)\n\n# --- Example Agent using Claude 3 Sonnet on Vertex AI ---\n\n# Standard model name for Claude 3 Sonnet on Vertex AI\nclaude_model_vertexai = \"claude-3-sonnet@20240229\"\n\nagent_claude_vertexai = LlmAgent(\n    model=claude_model_vertexai, # Pass the direct string after registration\n    name=\"claude_vertexai_agent\",\n    instruction=\"You are an assistant powered by Claude 3 Sonnet on Vertex AI.\",\n    generate_content_config=types.GenerateContentConfig(max_output_tokens=4096),\n    # ... other agent parameters\n)\n</code></pre> <p>Integration Method: Directly instantiate the provider-specific model class (e.g., <code>com.google.adk.models.Claude</code>) and configure it with a Vertex AI backend.</p> <p>Why Direct Instantiation? The Java ADK's <code>LlmRegistry</code> primarily handles Gemini models by default. For third-party models like Claude on Vertex AI, you directly provide an instance of the ADK's wrapper class (e.g., <code>Claude</code>) to the <code>LlmAgent</code>. This wrapper class is responsible for interacting with the model via its specific client library, configured for Vertex AI.</p> <p>Setup:</p> <ol> <li> <p>Vertex AI Environment:</p> <ul> <li>Ensure your Google Cloud project and region are correctly set up.</li> <li>Application Default Credentials (ADC): Make sure ADC is configured correctly in your environment. This is typically done by running <code>gcloud auth application-default login</code>. The Java client libraries will use these credentials to authenticate with Vertex AI. Follow the Google Cloud Java documentation on ADC for detailed setup.</li> </ul> </li> <li> <p>Provider Library Dependencies:</p> <ul> <li>Third-Party Client Libraries (Often Transitive): The ADK core library often includes the necessary client libraries for common third-party models on Vertex AI (like Anthropic's required classes) as transitive dependencies. This means you might not need to explicitly add a separate dependency for the Anthropic Vertex SDK in your <code>pom.xml</code> or <code>build.gradle</code>.</li> </ul> </li> <li> <p>Instantiate and Configure the Model:     When creating your <code>LlmAgent</code>, instantiate the <code>Claude</code> class (or the equivalent for another provider) and configure its <code>VertexBackend</code>.</p> </li> </ol> <p>Example:</p> <pre><code>import com.anthropic.client.AnthropicClient;\nimport com.anthropic.client.okhttp.AnthropicOkHttpClient;\nimport com.anthropic.vertex.backends.VertexBackend;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.models.Claude; // ADK's wrapper for Claude\nimport com.google.auth.oauth2.GoogleCredentials;\nimport java.io.IOException;\n\n// ... other imports\n\npublic class ClaudeVertexAiAgent {\n\n    public static LlmAgent createAgent() throws IOException {\n        // Model name for Claude 3 Sonnet on Vertex AI (or other versions)\n        String claudeModelVertexAi = \"claude-3-7-sonnet\"; // Or any other Claude model\n\n        // Configure the AnthropicOkHttpClient with the VertexBackend\n        AnthropicClient anthropicClient = AnthropicOkHttpClient.builder()\n            .backend(\n                VertexBackend.builder()\n                    .region(\"us-east5\") // Specify your Vertex AI region\n                    .project(\"your-gcp-project-id\") // Specify your GCP Project ID\n                    .googleCredentials(GoogleCredentials.getApplicationDefault())\n                    .build())\n            .build();\n\n        // Instantiate LlmAgent with the ADK Claude wrapper\n        LlmAgent agentClaudeVertexAi = LlmAgent.builder()\n            .model(new Claude(claudeModelVertexAi, anthropicClient)) // Pass the Claude instance\n            .name(\"claude_vertexai_agent\")\n            .instruction(\"You are an assistant powered by Claude 3 Sonnet on Vertex AI.\")\n            // .generateContentConfig(...) // Optional: Add generation config if needed\n            // ... other agent parameters\n            .build();\n\n        return agentClaudeVertexAi;\n    }\n\n    public static void main(String[] args) {\n        try {\n            LlmAgent agent = createAgent();\n            System.out.println(\"Successfully created agent: \" + agent.name());\n            // Here you would typically set up a Runner and Session to interact with the agent\n        } catch (IOException e) {\n            System.err.println(\"Failed to create agent: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>"},{"location":"agents/models/","title":"\u5728 ADK \u4e2d\u4f7f\u7528\u4e0d\u540c\u7684\u6a21\u578b","text":"<p>Note</p> <p>Java Agent Development Kit (ADK) \u76ee\u524d\u652f\u63f4 Gemini \u8207 Anthropic \u6a21\u578b\u3002\u66f4\u591a\u6a21\u578b\u652f\u63f4\u5373\u5c07\u63a8\u51fa\u3002</p> <p>Agent Development Kit (ADK) \u5177\u5099\u9ad8\u5ea6\u5f48\u6027\uff0c\u8b93\u4f60\u80fd\u5920\u5c07\u5404\u7a2e\u5927\u578b\u8a9e\u8a00\u6a21\u578b (Large Language Model, LLM) \u6574\u5408\u81f3\u4f60\u7684 agent\u3002\u96d6\u7136 Google Gemini \u6a21\u578b\u7684\u8a2d\u5b9a\u5df2\u5728 Setup Foundation Models \u6307\u5357\u4e2d\u8aaa\u660e\uff0c\u672c\u9801\u5c07\u9032\u4e00\u6b65\u4ecb\u7d39\u5982\u4f55\u6709\u6548\u904b\u7528 Gemini\uff0c\u4e26\u6574\u5408\u5176\u4ed6\u71b1\u9580\u6a21\u578b\uff0c\u5305\u62ec\u5916\u90e8\u8a17\u7ba1\u6216\u5728\u672c\u5730\u7aef\u57f7\u884c\u7684\u6a21\u578b\u3002</p> <p>ADK \u4e3b\u8981\u900f\u904e\u5169\u7a2e\u6a5f\u5236\u4f86\u6574\u5408\u6a21\u578b\uff1a</p> <ol> <li>\u76f4\u63a5\u5b57\u4e32\uff0f\u8a3b\u518a\u8868\uff08Registry\uff09\uff1a \u9069\u7528\u65bc\u8207 Google Cloud \u6df1\u5ea6\u6574\u5408\u7684\u6a21\u578b\uff08\u4f8b\u5982\u900f\u904e Google AI Studio \u6216 Vertex AI \u5b58\u53d6\u7684 Gemini \u6a21\u578b\uff09\uff0c\u6216\u662f\u90e8\u7f72\u65bc Vertex AI \u7aef\u9ede\u7684\u6a21\u578b\u3002\u4f60\u901a\u5e38\u53ea\u9700\u5c07\u6a21\u578b\u540d\u7a31\u6216\u7aef\u9ede\u8cc7\u6e90\u5b57\u4e32\u76f4\u63a5\u63d0\u4f9b\u7d66 <code>LlmAgent</code>\u3002ADK \u5167\u90e8\u7684\u8a3b\u518a\u8868\u6703\u5c07\u6b64\u5b57\u4e32\u89e3\u6790\u70ba\u5c0d\u61c9\u7684\u5f8c\u7aef client\uff0c\u4e26\u5e38\u5229\u7528 <code>google-genai</code> \u51fd\u5f0f\u5eab\u3002</li> <li>\u5305\u88dd\u985e\u5225\uff08Wrapper Classes\uff09\uff1a \u70ba\u4e86\u66f4\u5ee3\u6cdb\u7684\u76f8\u5bb9\u6027\uff0c\u7279\u5225\u662f\u5c0d\u65bc\u4e0d\u5c6c\u65bc Google \u751f\u614b\u7cfb\u7684\u6a21\u578b\uff0c\u6216\u9700\u8981\u7279\u6b8a client \u8a2d\u5b9a\u7684\u6a21\u578b\uff08\u5982\u900f\u904e LiteLLM \u5b58\u53d6\u7684\u6a21\u578b\uff09\uff0c\u4f60\u53ef\u4ee5\u5be6\u4f8b\u5316\u7279\u5b9a\u7684\u5305\u88dd\u985e\u5225\uff08\u4f8b\u5982 <code>LiteLlm</code>\uff09\uff0c\u4e26\u5c07\u8a72\u7269\u4ef6\u4f5c\u70ba <code>model</code> \u53c3\u6578\u50b3\u905e\u7d66\u4f60\u7684 <code>LlmAgent</code>\u3002</li> </ol> <p>\u4ee5\u4e0b\u7ae0\u7bc0\u5c07\u4f9d\u7167\u4f60\u7684\u9700\u6c42\uff0c\u6307\u5f15\u4f60\u5982\u4f55\u4f7f\u7528\u9019\u4e9b\u65b9\u6cd5\u3002</p>"},{"location":"agents/models/#google-gemini","title":"\u4f7f\u7528 Google Gemini \u6a21\u578b","text":"<p>\u672c\u7bc0\u8aaa\u660e\u5982\u4f55\u8207 Google \u7684 Gemini \u6a21\u578b\u9032\u884c\u9a57\u8b49\uff0c\u53ef\u9078\u64c7\u900f\u904e Google AI Studio \u9032\u884c\u5feb\u901f\u958b\u767c\uff0c\u6216\u4f7f\u7528 Google Cloud Vertex AI \u6eff\u8db3\u4f01\u696d\u7d1a\u61c9\u7528\u9700\u6c42\u3002\u9019\u662f\u65bc ADK \u4e2d\u4f7f\u7528 Google \u65d7\u8266\u6a21\u578b\u6700\u76f4\u63a5\u7684\u65b9\u5f0f\u3002</p> <p>\u6574\u5408\u65b9\u5f0f\uff1a \u7576\u4f60\u5b8c\u6210\u4e0b\u8ff0\u4efb\u4e00\u9a57\u8b49\u65b9\u5f0f\u5f8c\uff0c\u5373\u53ef\u5c07\u6a21\u578b\u7684\u8b58\u5225\u5b57\u4e32\u76f4\u63a5\u50b3\u5165 <code>LlmAgent</code> \u7684 <code>model</code> \u53c3\u6578\u3002</p> <p>Tip</p> <p>The <code>google-genai</code> library, used internally by ADK for Gemini models, can connect through either Google AI Studio or Vertex AI.</p> <p>Model support for voice/video streaming</p> <p>In order to use voice/video streaming in ADK, you will need to use Gemini models that support the Live API. You can find the model ID(s) that support the Gemini Live API in the documentation:</p> <ul> <li>Google AI Studio: Gemini Live API</li> <li>Vertex AI: Gemini Live API</li> </ul>"},{"location":"agents/models/#google-ai-studio","title":"Google AI Studio","text":"<p>\u9019\u662f\u6700\u7c21\u55ae\u7684\u65b9\u6cd5\uff0c\u5efa\u8b70\u7528\u65bc\u5feb\u901f\u958b\u59cb\u3002</p> <ul> <li>\u9a57\u8b49\u65b9\u5f0f\uff1a API Key</li> <li> <p>\u8a2d\u5b9a\u6b65\u9a5f\uff1a</p> <ol> <li>\u53d6\u5f97 API key\uff1a \u5f9e Google AI Studio \u53d6\u5f97\u60a8\u7684\u91d1\u9470\u3002</li> <li> <p>\u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578\uff1a \u5728\u60a8\u7684\u5c08\u6848\u6839\u76ee\u9304\u4e0b\u5efa\u7acb <code>.env</code> \u6a94\u6848\uff08Python\uff09\u6216 <code>.properties</code>\uff08Java\uff09\uff0c\u4e26\u52a0\u5165\u4ee5\u4e0b\u5167\u5bb9\u3002Agent Development Kit (ADK) \u6703\u81ea\u52d5\u8f09\u5165\u6b64\u6a94\u6848\u3002</p> <pre><code>export GOOGLE_API_KEY=\"YOUR_GOOGLE_API_KEY\"\nexport GOOGLE_GENAI_USE_VERTEXAI=FALSE\n</code></pre> <p>\uff08\u6216\uff09</p> <p>\u5728\u6a21\u578b\u521d\u59cb\u5316\u6642\uff0c\u900f\u904e <code>Client</code> \u50b3\u905e\u9019\u4e9b\u8b8a\u6578\uff08\u8acb\u53c3\u8003\u4e0b\u65b9\u7bc4\u4f8b\uff09\u3002</p> </li> </ol> </li> <li> <p>\u6a21\u578b\uff1a \u53ef\u5728   Google AI for Developers site \u4e0a\u67e5\u8a62\u6240\u6709\u53ef\u7528\u6a21\u578b\u3002</p> </li> </ul>"},{"location":"agents/models/#google-cloud-vertex-ai","title":"Google Cloud Vertex AI","text":"<p>\u82e5\u9700\u5177\u5099\u53ef\u64f4\u5c55\u6027\u53ca\u751f\u7522\u74b0\u5883\u5c0e\u5411\u7684\u61c9\u7528\u5834\u666f\uff0c\u5efa\u8b70\u4f7f\u7528 Vertex AI \u5e73\u53f0\u3002Vertex AI \u4e0a\u7684 Gemini \u652f\u63f4\u4f01\u696d\u7d1a\u529f\u80fd\u3001\u5b89\u5168\u6027\u8207\u5408\u898f\u6027\u63a7\u7ba1\u3002\u8acb\u6839\u64da\u60a8\u7684\u958b\u767c\u74b0\u5883\u8207\u4f7f\u7528\u60c5\u5883\uff0c\u9078\u64c7\u4e0b\u5217\u5176\u4e2d\u4e00\u7a2e\u9a57\u8b49\u65b9\u5f0f\u3002</p> <p>\u524d\u7f6e\u4f5c\u696d\uff1a \u9700\u6709\u5df2\u555f\u7528 Vertex AI \u7684 Google Cloud \u5c08\u6848\u3002</p>"},{"location":"agents/models/#a","title":"\u65b9\u6cd5 A\uff1a\u4f7f\u7528\u8005\u6191\u8b49\uff08\u9069\u7528\u65bc\u672c\u6a5f\u958b\u767c\uff09","text":"<ol> <li>\u5b89\u88dd gcloud \u547d\u4ee4\u5217\u4ecb\u9762 (Command Line Interface)\uff1a \u8acb\u4f9d\u7167\u5b98\u65b9\u5b89\u88dd\u8aaa\u660e\u64cd\u4f5c\u3002</li> <li>\u4f7f\u7528 ADC \u767b\u5165\uff1a \u6b64\u6307\u4ee4\u6703\u958b\u555f\u700f\u89bd\u5668\uff0c\u8b93\u60a8\u9a57\u8b49\u672c\u6a5f\u958b\u767c\u6240\u9700\u7684\u4f7f\u7528\u8005\u5e33\u6236\u3002     <pre><code>gcloud auth application-default login\n</code></pre></li> <li> <p>\u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578\uff1a <pre><code>export GOOGLE_CLOUD_PROJECT=\"YOUR_PROJECT_ID\"\nexport GOOGLE_CLOUD_LOCATION=\"YOUR_VERTEX_AI_LOCATION\" # e.g., us-central1\n</code></pre></p> <p>\u660e\u78ba\u544a\u77e5\u7a0b\u5f0f\u5eab\u4f7f\u7528 Vertex AI\uff1a</p> <pre><code>export GOOGLE_GENAI_USE_VERTEXAI=TRUE\n</code></pre> </li> <li> <p>Models\uff1a \u8acb\u53c3\u95b1 Vertex AI documentation \u4ee5\u67e5\u8a62\u53ef\u7528\u7684\u6a21\u578b ID\u3002</p> </li> </ol>"},{"location":"agents/models/#bvertex-ai-express","title":"\u65b9\u6cd5 B\uff1aVertex AI Express \u6a21\u5f0f","text":"<p>Vertex AI Express \u6a21\u5f0f \u63d0\u4f9b\u7c21\u5316\u7684\u3001\u4ee5 API KEY \u70ba\u57fa\u790e\u7684\u8a2d\u5b9a\uff0c\u9069\u5408\u5feb\u901f\u539f\u578b\u958b\u767c\u3002</p> <ol> <li>\u8a3b\u518a Express \u6a21\u5f0f \u4ee5\u53d6\u5f97\u60a8\u7684 API KEY\u3002</li> <li>\u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578\uff1a <pre><code>export GOOGLE_API_KEY=\"PASTE_YOUR_EXPRESS_MODE_API_KEY_HERE\"\nexport GOOGLE_GENAI_USE_VERTEXAI=TRUE\n</code></pre></li> </ol>"},{"location":"agents/models/#c","title":"\u65b9\u6cd5 C\uff1a\u670d\u52d9\u5e33\u6236\uff08\u9069\u7528\u65bc\u6b63\u5f0f\u74b0\u5883\u8207\u81ea\u52d5\u5316\uff09","text":"<p>\u5c0d\u65bc\u5df2\u90e8\u7f72\u7684\u61c9\u7528\u7a0b\u5f0f\uff0c\u670d\u52d9\u5e33\u6236\u662f\u6a19\u6e96\u505a\u6cd5\u3002</p> <ol> <li>\u5efa\u7acb\u670d\u52d9\u5e33\u6236 \u4e26\u8ce6\u4e88\u5176 <code>Vertex AI User</code> \u89d2\u8272\u3002</li> <li>\u5c07\u8a8d\u8b49\u8cc7\u8a0a\u63d0\u4f9b\u7d66\u60a8\u7684\u61c9\u7528\u7a0b\u5f0f\uff1a<ul> <li>\u5728 Google Cloud \u4e0a\uff1a \u5982\u679c\u60a8\u5728 Cloud Run\u3001GKE\u3001VM \u6216\u5176\u4ed6 Google Cloud \u670d\u52d9\u4e2d\u57f7\u884c agent\uff0c\u74b0\u5883\u6703\u81ea\u52d5\u63d0\u4f9b\u670d\u52d9\u5e33\u6236\u8a8d\u8b49\u3002\u60a8\u4e0d\u9700\u8981\u5efa\u7acb\u91d1\u9470\u6a94\u6848\u3002</li> <li>\u5728\u5176\u4ed6\u74b0\u5883\uff1a \u5efa\u7acb \u670d\u52d9\u5e33\u6236\u91d1\u9470\u6a94\u6848\uff0c\u4e26\u900f\u904e\u74b0\u5883\u8b8a\u6578\u6307\u5b9a\u8a72\u6a94\u6848\u4f4d\u7f6e\uff1a     <pre><code>export GOOGLE_APPLICATION_CREDENTIALS=\"/path/to/your/keyfile.json\"\n</code></pre> \u9664\u4e86\u4f7f\u7528\u91d1\u9470\u6a94\u6848\u4e4b\u5916\uff0c\u4f60\u4e5f\u53ef\u4ee5\u900f\u904e Workload Identity \u4f86\u9a57\u8b49\u670d\u52d9\u5e33\u6236\uff08Service Account\uff09\u3002\u4f46\u9019\u8d85\u51fa\u4e86\u672c\u6307\u5357\u7684\u7bc4\u570d\u3002</li> </ul> </li> </ol> <p>\u7bc4\u4f8b\uff1a</p> PythonJava <pre><code>from google.adk.agents import LlmAgent\n\n# --- Example using a stable Gemini Flash model ---\nagent_gemini_flash = LlmAgent(\n    # Use the latest stable Flash model identifier\n    model=\"gemini-2.0-flash\",\n    name=\"gemini_flash_agent\",\n    instruction=\"You are a fast and helpful Gemini assistant.\",\n    # ... other agent parameters\n)\n\n# --- Example using a powerful Gemini Pro model ---\n# Note: Always check the official Gemini documentation for the latest model names,\n# including specific preview versions if needed. Preview models might have\n# different availability or quota limitations.\nagent_gemini_pro = LlmAgent(\n    # Use the latest generally available Pro model identifier\n    model=\"gemini-2.5-pro-preview-03-25\",\n    name=\"gemini_pro_agent\",\n    instruction=\"You are a powerful and knowledgeable Gemini assistant.\",\n    # ... other agent parameters\n)\n</code></pre> <pre><code>// --- Example #1: using a stable Gemini Flash model with ENV variables---\nLlmAgent agentGeminiFlash =\n    LlmAgent.builder()\n        // Use the latest stable Flash model identifier\n        .model(\"gemini-2.0-flash\") // Set ENV variables to use this model\n        .name(\"gemini_flash_agent\")\n        .instruction(\"You are a fast and helpful Gemini assistant.\")\n        // ... other agent parameters\n        .build();\n\n// --- Example #2: using a powerful Gemini Pro model with API Key in model ---\nLlmAgent agentGeminiPro =\n    LlmAgent.builder()\n        // Use the latest generally available Pro model identifier\n        .model(new Gemini(\"gemini-2.5-pro-preview-03-25\",\n            Client.builder()\n                .vertexAI(false)\n                .apiKey(\"API_KEY\") // Set the API Key (or) project/ location\n                .build()))\n        // Or, you can also directly pass the API_KEY\n        // .model(new Gemini(\"gemini-2.5-pro-preview-03-25\", \"API_KEY\"))\n        .name(\"gemini_pro_agent\")\n        .instruction(\"You are a powerful and knowledgeable Gemini assistant.\")\n        // ... other agent parameters\n        .build();\n\n// Note: Always check the official Gemini documentation for the latest model names,\n// including specific preview versions if needed. Preview models might have\n// different availability or quota limitations.\n</code></pre> <p>\u4fdd\u8b77\u60a8\u7684\u6191\u8b49</p> <p>\u670d\u52d9\u5e33\u6236\u6191\u8b49\u6216 API \u91d1\u9470\u662f\u975e\u5e38\u5f37\u5927\u7684\u6191\u8b49\u3002\u5207\u52ff\u5c07\u5b83\u5011\u516c\u958b\u66b4\u9732\u3002\u8acb\u4f7f\u7528\u50cf\u662f Google Secret Manager \u9019\u985e\u7684\u79d8\u5bc6\u7ba1\u7406\u5de5\u5177\uff0c\u5728\u6b63\u5f0f\u74b0\u5883\u4e2d\u5b89\u5168\u5730\u5132\u5b58\u8207\u5b58\u53d6\u9019\u4e9b\u6191\u8b49\u3002</p>"},{"location":"agents/models/#anthropic","title":"\u4f7f\u7528 Anthropic \u6a21\u578b","text":"<p>\u60a8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Anthropic \u7684 API \u91d1\u9470\uff0c\u6216\u900f\u904e Vertex AI \u5f8c\u7aef\uff0c\u5c07 Anthropic \u7684 Claude \u6a21\u578b\u6574\u5408\u5230\u60a8\u7684 Java Agent Development Kit (ADK) \u61c9\u7528\u7a0b\u5f0f\u4e2d\uff0c\u65b9\u6cd5\u662f\u4f7f\u7528 ADK \u7684 <code>Claude</code> \u5305\u88dd\u985e\u5225\u3002</p> <p>\u82e5\u8981\u4f7f\u7528 Vertex AI \u5f8c\u7aef\uff0c\u8acb\u53c3\u95b1 Third-Party Models on Vertex AI \u7ae0\u7bc0\u3002</p> <p>\u524d\u7f6e\u4f5c\u696d\uff1a</p> <ol> <li> <p>\u76f8\u4f9d\u5957\u4ef6\uff1a</p> <ul> <li>Anthropic SDK \u985e\u5225\uff08\u8f49\u79fb\u76f8\u4f9d\uff09\uff1a Java Agent Development Kit (ADK) \u7684 <code>com.google.adk.models.Claude</code> \u5305\u88dd\u985e\u5225\u6703\u4f9d\u8cf4 Anthropic \u5b98\u65b9 Java SDK \u7684\u985e\u5225\u3002\u9019\u4e9b\u901a\u5e38\u6703\u4f5c\u70ba\u8f49\u79fb\u76f8\u4f9d\u5957\u4ef6\u81ea\u52d5\u7d0d\u5165\u3002</li> </ul> </li> <li> <p>Anthropic API \u91d1\u9470\uff1a</p> <ul> <li>\u5411 Anthropic \u53d6\u5f97 API \u91d1\u9470\u3002\u8acb\u4f7f\u7528\u79d8\u5bc6\u7ba1\u7406\u5de5\u5177\u5b89\u5168\u7ba1\u7406\u6b64\u91d1\u9470\u3002</li> </ul> </li> </ol> <p>\u6574\u5408\u65b9\u5f0f\uff1a</p> <p>\u5efa\u7acb <code>com.google.adk.models.Claude</code> \u5be6\u4f8b\uff0c\u50b3\u5165\u60a8\u60f3\u8981\u7684 Claude \u6a21\u578b\u540d\u7a31\uff0c\u4ee5\u53ca\u5df2\u7528\u60a8\u7684 API \u91d1\u9470\u8a2d\u5b9a\u597d\u7684 <code>AnthropicOkHttpClient</code>\u3002\u7136\u5f8c\uff0c\u5c07\u9019\u500b <code>Claude</code> \u5be6\u4f8b\u50b3\u905e\u7d66\u60a8\u7684 <code>LlmAgent</code>\u3002</p> <p>\u7bc4\u4f8b\uff1a</p> <pre><code>import com.anthropic.client.AnthropicClient;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.models.Claude;\nimport com.anthropic.client.okhttp.AnthropicOkHttpClient; // From Anthropic's SDK\n\npublic class DirectAnthropicAgent {\n\n  private static final String CLAUDE_MODEL_ID = \"claude-3-7-sonnet-latest\"; // Or your preferred Claude model\n\n  public static LlmAgent createAgent() {\n\n    // It's recommended to load sensitive keys from a secure config\n    AnthropicClient anthropicClient = AnthropicOkHttpClient.builder()\n        .apiKey(\"ANTHROPIC_API_KEY\")\n        .build();\n\n    Claude claudeModel = new Claude(\n        CLAUDE_MODEL_ID,\n        anthropicClient\n    );\n\n    return LlmAgent.builder()\n        .name(\"claude_direct_agent\")\n        .model(claudeModel)\n        .instruction(\"You are a helpful AI assistant powered by Anthropic Claude.\")\n        // ... other LlmAgent configurations\n        .build();\n  }\n\n  public static void main(String[] args) {\n    try {\n      LlmAgent agent = createAgent();\n      System.out.println(\"Successfully created direct Anthropic agent: \" + agent.name());\n    } catch (IllegalStateException e) {\n      System.err.println(\"Error creating agent: \" + e.getMessage());\n    }\n  }\n}\n</code></pre>"},{"location":"agents/models/#litellm","title":"\u900f\u904e LiteLLM \u4f7f\u7528\u96f2\u7aef\u8207\u5c08\u6709\u6a21\u578b","text":"<p>\u70ba\u4e86\u5b58\u53d6\u4f86\u81ea OpenAI\u3001Anthropic\uff08\u975e Vertex AI\uff09\u3001Cohere \u53ca\u5176\u4ed6\u773e\u591a\u4f9b\u61c9\u5546\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\uff0cAgent Development Kit (ADK) \u63d0\u4f9b\u4e86\u8207 LiteLLM \u51fd\u5f0f\u5eab\u7684\u6574\u5408\u3002</p> <p>\u6574\u5408\u65b9\u5f0f\uff1a \u5be6\u4f8b\u5316 <code>LiteLlm</code> \u5305\u88dd\u985e\u5225\uff0c\u4e26\u5c07\u5176\u50b3\u905e\u7d66 <code>LlmAgent</code> \u7684 <code>model</code> \u53c3\u6578\u3002</p> <p>LiteLLM \u7c21\u4ecb\uff1a LiteLLM \u4f5c\u70ba\u4e00\u500b\u8f49\u8b6f\u5c64\uff0c\u70ba\u8d85\u904e 100 \u7a2e\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u63d0\u4f9b\u6a19\u6e96\u5316\u3001\u76f8\u5bb9 OpenAI \u7684\u4ecb\u9762\u3002</p> <p>\u8a2d\u5b9a\u6b65\u9a5f\uff1a</p> <ol> <li>\u5b89\u88dd LiteLLM\uff1a <pre><code>pip install litellm\n</code></pre></li> <li> <p>\u8a2d\u5b9a\u63d0\u4f9b\u8005 API \u91d1\u9470\uff1a \u5c07 API \u91d1\u9470\u8a2d\u5b9a\u70ba\u74b0\u5883\u8b8a\u6578\uff0c\u4ee5\u4fbf\u7528\u65bc\u4f60\u6253\u7b97\u4f7f\u7528\u7684\u7279\u5b9a\u63d0\u4f9b\u8005\u3002</p> <ul> <li> <p>OpenAI \u7bc4\u4f8b\uff1a</p> <pre><code>export OPENAI_API_KEY=\"YOUR_OPENAI_API_KEY\"\n</code></pre> </li> <li> <p>Anthropic\uff08\u975e Vertex AI\uff09\u7bc4\u4f8b\uff1a</p> <pre><code>export ANTHROPIC_API_KEY=\"YOUR_ANTHROPIC_API_KEY\"\n</code></pre> </li> <li> <p>\u8acb\u53c3\u95b1   LiteLLM Providers Documentation   \u4ee5\u53d6\u5f97\u5176\u4ed6\u63d0\u4f9b\u8005\u6b63\u78ba\u7684\u74b0\u5883\u8b8a\u6578\u540d\u7a31\u3002</p> <p>\u7bc4\u4f8b\uff1a</p> <pre><code>from google.adk.agents import LlmAgent\nfrom google.adk.models.lite_llm import LiteLlm\n\n# --- Example Agent using OpenAI's GPT-4o ---\n# (Requires OPENAI_API_KEY)\nagent_openai = LlmAgent(\n    model=LiteLlm(model=\"openai/gpt-4o\"), # LiteLLM model string format\n    name=\"openai_agent\",\n    instruction=\"You are a helpful assistant powered by GPT-4o.\",\n    # ... other agent parameters\n)\n\n# --- Example Agent using Anthropic's Claude Haiku (non-Vertex) ---\n# (Requires ANTHROPIC_API_KEY)\nagent_claude_direct = LlmAgent(\n    model=LiteLlm(model=\"anthropic/claude-3-haiku-20240307\"),\n    name=\"claude_direct_agent\",\n    instruction=\"You are an assistant powered by Claude Haiku.\",\n    # ... other agent parameters\n)\n</code></pre> </li> </ul> </li> </ol> <p>LiteLLM \u7684 Windows \u7de8\u78bc\u6ce8\u610f\u4e8b\u9805</p> <p>When using ADK agents with LiteLLM on Windows, you might encounter a <code>UnicodeDecodeError</code>. This error occurs because LiteLLM may attempt to read cached files using the default Windows encoding (<code>cp1252</code>) instead of UTF-8.</p> <p>To prevent this, we recommend setting the <code>PYTHONUTF8</code> environment variable to <code>1</code>. This forces Python to use UTF-8 for all file I/O.</p> <p>Example (PowerShell): <pre><code># Set for the current session\n$env:PYTHONUTF8 = \"1\"\n\n# Set persistently for the user\n[System.Environment]::SetEnvironmentVariable('PYTHONUTF8', '1', [System.EnvironmentVariableTarget]::User)\n</code></pre></p>"},{"location":"agents/models/#litellm_1","title":"\u900f\u904e LiteLLM \u4f7f\u7528\u958b\u653e\u8207\u672c\u5730\u6a21\u578b","text":"<p>\u70ba\u4e86\u7372\u5f97\u6700\u5927\u7684\u63a7\u5236\u6b0a\u3001\u7bc0\u7701\u6210\u672c\u3001\u63d0\u5347\u96b1\u79c1\uff0c\u6216\u96e2\u7dda\u4f7f\u7528\u7b49\u60c5\u5883\uff0c\u60a8\u53ef\u4ee5\u5728\u672c\u5730\u904b\u884c\u958b\u6e90\u6a21\u578b\uff0c\u6216\u81ea\u884c\u67b6\u8a2d\u6a21\u578b\u4f3a\u670d\u5668\uff0c\u4e26\u900f\u904e LiteLLM \u9032\u884c\u6574\u5408\u3002</p> <p>\u6574\u5408\u65b9\u5f0f\uff1a \u5be6\u4f8b\u5316 <code>LiteLlm</code> \u5305\u88dd\u985e\u5225\uff0c\u4e26\u8a2d\u5b9a\u6307\u5411\u60a8\u7684\u672c\u5730\u6a21\u578b\u4f3a\u670d\u5668\u3002</p>"},{"location":"agents/models/#ollama","title":"Ollama \u6574\u5408","text":"<p>Ollama \u53ef\u8b93\u60a8\u8f15\u9b06\u5728\u672c\u5730\u904b\u884c\u958b\u6e90\u6a21\u578b\u3002</p>"},{"location":"agents/models/#_1","title":"\u6a21\u578b\u9078\u64c7","text":"<p>\u5982\u679c\u60a8\u7684 agent \u4f9d\u8cf4\u65bc tools\uff0c\u8acb\u52d9\u5fc5\u5f9e Ollama \u7db2\u7ad9 \u9078\u64c7\u652f\u63f4\u5de5\u5177\uff08tool support\uff09\u7684\u6a21\u578b\u3002</p> <p>\u70ba\u4e86\u7372\u5f97\u53ef\u9760\u7684\u7d50\u679c\uff0c\u6211\u5011\u5efa\u8b70\u9078\u64c7\u5177\u6709\u5de5\u5177\u652f\u63f4\u4e14\u898f\u6a21\u9069\u4e2d\u7684\u6a21\u578b\u3002</p> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u6aa2\u67e5\u6a21\u578b\u662f\u5426\u652f\u63f4\u5de5\u5177\u529f\u80fd\uff1a</p> <pre><code>ollama show mistral-small3.1\n  Model\n    architecture        mistral3\n    parameters          24.0B\n    context length      131072\n    embedding length    5120\n    quantization        Q4_K_M\n\n  Capabilities\n    completion\n    vision\n    tools\n</code></pre> <p>\u4f60\u61c9\u8a72\u6703\u5728 capabilities\uff08\u529f\u80fd\uff09\u4e2d\u770b\u5230 <code>tools</code> \u88ab\u5217\u51fa\u3002</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u67e5\u770b\u8a72\u6a21\u578b\u6b63\u5728\u4f7f\u7528\u7684 template\uff08\u7bc4\u672c\uff09\uff0c\u4e26\u6839\u64da\u4f60\u7684\u9700\u6c42\u9032\u884c\u8abf\u6574\u3002</p> <pre><code>ollama show --modelfile llama3.2 &gt; model_file_to_modify\n</code></pre> <p>\u4f8b\u5982\uff0c\u4e0a\u8ff0\u6a21\u578b\u7684\u9810\u8a2d\u7bc4\u672c\u672c\u8eab\u5c31\u6697\u793a\u8a72\u6a21\u578b\u6703\u4e00\u76f4\u547c\u53eb\u67d0\u500b\u51fd\u5f0f\u3002\u9019\u53ef\u80fd\u5c0e\u81f4\u51fd\u5f0f\u547c\u53eb\u9032\u5165\u7121\u9650\u8ff4\u5708\u3002</p> <pre><code>Given the following functions, please respond with a JSON for a function call\nwith its proper arguments that best answers the given prompt.\n\nRespond in the format {\"name\": function name, \"parameters\": dictionary of\nargument name and its value}. Do not use variables.\n</code></pre> <p>\u4f60\u53ef\u4ee5\u5c07\u9019\u985e\u63d0\u793a\u8a5e\u66ff\u63db\u70ba\u66f4\u5177\u63cf\u8ff0\u6027\u7684\u5167\u5bb9\uff0c\u4ee5\u9632\u6b62\u51fa\u73fe\u7121\u9650\u7684\u5de5\u5177\u547c\u53eb (tool calls) \u8ff4\u5708\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>Review the user's prompt and the available functions listed below.\nFirst, determine if calling one of these functions is the most appropriate way to respond. A function call is likely needed if the prompt asks for a specific action, requires external data lookup, or involves calculations handled by the functions. If the prompt is a general question or can be answered directly, a function call is likely NOT needed.\n\nIf you determine a function call IS required: Respond ONLY with a JSON object in the format {\"name\": \"function_name\", \"parameters\": {\"argument_name\": \"value\"}}. Ensure parameter values are concrete, not variables.\n\nIf you determine a function call IS NOT required: Respond directly to the user's prompt in plain text, providing the answer or information requested. Do not output any JSON.\n</code></pre> <p>\u7136\u5f8c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u4f86\u5efa\u7acb\u4e00\u500b\u65b0\u6a21\u578b\uff1a</p> <pre><code>ollama create llama3.2-modified -f model_file_to_modify\n</code></pre>"},{"location":"agents/models/#ollama_chat-provider","title":"\u4f7f\u7528 ollama_chat provider","text":"<p>\u6211\u5011\u7684 LiteLLM \u5305\u88dd\u5668\u53ef\u7528\u65bc\u642d\u914d Ollama \u6a21\u578b\u5efa\u7acb agent\u3002</p> <pre><code>root_agent = Agent(\n    model=LiteLlm(model=\"ollama_chat/mistral-small3.1\"),\n    name=\"dice_agent\",\n    description=(\n        \"hello world agent that can roll a dice of 8 sides and check prime\"\n        \" numbers.\"\n    ),\n    instruction=\"\"\"\n      You roll dice and answer questions about the outcome of the dice rolls.\n    \"\"\",\n    tools=[\n        roll_die,\n        check_prime,\n    ],\n)\n</code></pre> <p>\u8acb\u52d9\u5fc5\u8a2d\u5b9a provider \u70ba <code>ollama_chat</code>\uff0c\u800c\u4e0d\u662f <code>ollama</code>\u3002\u82e5\u4f7f\u7528 <code>ollama</code>\uff0c\u5c07\u6703\u5c0e\u81f4\u975e\u9810\u671f\u7684\u884c\u70ba\uff0c\u4f8b\u5982\u7121\u9650\u7684\u5de5\u5177\u547c\u53eb (tool calls) \u8ff4\u5708\uff0c\u4ee5\u53ca\u5ffd\u7565\u5148\u524d\u7684 context\u3002</p> <p>\u96d6\u7136\u53ef\u4ee5\u5728 LiteLLM \u5167\u90e8\u63d0\u4f9b <code>api_base</code> \u4f86\u9032\u884c\u751f\u6210\uff0c\u4f46\u81ea v1.65.5 \u7248\u8d77\uff0cLiteLLM \u51fd\u5f0f\u5eab\u5728\u5b8c\u6210\u5f8c\u6703\u4f9d\u8cf4\u74b0\u5883\u8b8a\u6578\u4f86\u547c\u53eb\u5176\u4ed6 API\u3002\u56e0\u6b64\uff0c\u76ee\u524d\u5efa\u8b70\u5c07\u74b0\u5883\u8b8a\u6578 <code>OLLAMA_API_BASE</code> \u8a2d\u5b9a\u70ba\u6307\u5411 ollama server\u3002</p> <pre><code>export OLLAMA_API_BASE=\"http://localhost:11434\"\nadk web\n</code></pre>"},{"location":"agents/models/#openai-provider","title":"\u4f7f\u7528 openai provider","text":"<p>\u53e6\u5916\uff0c\u4e5f\u53ef\u4ee5\u5c07 <code>openai</code> \u4f5c\u70ba provider \u540d\u7a31\u3002\u4e0d\u904e\uff0c\u9019\u540c\u6642\u9700\u8981\u8a2d\u5b9a <code>OPENAI_API_BASE=http://localhost:11434/v1</code> \u548c <code>OPENAI_API_KEY=anything</code> \u9019\u5169\u500b\u74b0\u5883\u8b8a\u6578\uff0c\u800c\u4e0d\u662f <code>OLLAMA_API_BASE</code>\u3002\u8acb\u6ce8\u610f\uff0capi base \u73fe\u5728\u7684\u7d50\u5c3e\u5305\u542b <code>/v1</code>\u3002</p> <pre><code>root_agent = Agent(\n    model=LiteLlm(model=\"openai/mistral-small3.1\"),\n    name=\"dice_agent\",\n    description=(\n        \"hello world agent that can roll a dice of 8 sides and check prime\"\n        \" numbers.\"\n    ),\n    instruction=\"\"\"\n      You roll dice and answer questions about the outcome of the dice rolls.\n    \"\"\",\n    tools=[\n        roll_die,\n        check_prime,\n    ],\n)\n</code></pre> <pre><code>export OPENAI_API_BASE=http://localhost:11434/v1\nexport OPENAI_API_KEY=anything\nadk web\n</code></pre>"},{"location":"agents/models/#_2","title":"\u9664\u932f","text":"<p>\u4f60\u53ef\u4ee5\u5728 agent \u7a0b\u5f0f\u78bc\u4e2d\uff0c\u65bc import \u4e4b\u5f8c\u52a0\u5165\u4ee5\u4e0b\u5167\u5bb9\uff0c\u5373\u53ef\u67e5\u770b\u767c\u9001\u5230 Ollama \u4f3a\u670d\u5668\u7684\u8acb\u6c42\u3002</p> <pre><code>import litellm\nlitellm._turn_on_debug()\n</code></pre> <p>\u5c0b\u627e\u985e\u4f3c\u4ee5\u4e0b\u7684\u884c\uff1a</p> <pre><code>Request Sent from LiteLLM:\ncurl -X POST \\\nhttp://localhost:11434/api/chat \\\n-d '{'model': 'mistral-small3.1', 'messages': [{'role': 'system', 'content': ...\n</code></pre>"},{"location":"agents/models/#api-vllm","title":"\u81ea\u884c\u67b6\u8a2d\u7684 API \u7aef\u9ede\uff08\u4f8b\u5982 vLLM\uff09","text":"<p>\u50cf\u662f vLLM \u9019\u985e\u5de5\u5177\u53ef\u4ee5\u8b93\u4f60\u9ad8\u6548\u5730\u81ea\u884c\u67b6\u8a2d\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\uff0c\u4e26\u4e14\u901a\u5e38\u6703\u63d0\u4f9b\u4e00\u500b\u76f8\u5bb9\u65bc OpenAI \u7684 API \u7aef\u9ede\u3002</p> <p>\u8a2d\u5b9a\u6b65\u9a5f\uff1a</p> <ol> <li>\u90e8\u7f72\u6a21\u578b\uff1a \u4f7f\u7528 vLLM\uff08\u6216\u985e\u4f3c\u5de5\u5177\uff09\u90e8\u7f72\u4f60\u9078\u64c7\u7684\u6a21\u578b\u3002\u8acb\u8a18\u4e0b API base URL\uff08\u4f8b\u5982\uff1a<code>https://your-vllm-endpoint.run.app/v1</code>\uff09\u3002<ul> <li>\u91dd\u5c0d Agent Development Kit (ADK) \u5de5\u5177\u7684\u91cd\u8981\u63d0\u9192\uff1a \u90e8\u7f72\u6642\uff0c\u8acb\u78ba\u8a8d\u4f60\u7684\u670d\u52d9\u5de5\u5177\u652f\u63f4\u4e26\u555f\u7528\u4e86\u76f8\u5bb9 OpenAI \u7684\u5de5\u5177\uff0f\u51fd\u5f0f\u547c\u53eb\u529f\u80fd\u3002\u5c0d\u65bc vLLM\uff0c\u9019\u53ef\u80fd\u9700\u8981\u8a2d\u5b9a\u50cf\u662f <code>--enable-auto-tool-choice</code> \u7684\u65d7\u6a19\uff0c\u4e26\u4e14\u8996\u6a21\u578b\u800c\u5b9a\uff0c\u53ef\u80fd\u9084\u9700\u8981\u6307\u5b9a <code>--tool-call-parser</code>\u3002\u8a73\u7d30\u8cc7\u8a0a\u8acb\u53c3\u8003 vLLM \u5b98\u65b9\u6587\u4ef6\u4e2d\u7684 Tool Use \u7ae0\u7bc0\u3002</li> </ul> </li> <li> <p>\u9a57\u8b49\u6a5f\u5236\uff1a \u78ba\u8a8d\u4f60\u7684 API \u7aef\u9ede\u5982\u4f55\u9032\u884c\u9a57\u8b49\uff08\u4f8b\u5982\uff1aAPI key\u3001bearer token\uff09\u3002</p> <p>\u6574\u5408\u7bc4\u4f8b\uff1a</p> <pre><code>import subprocess\nfrom google.adk.agents import LlmAgent\nfrom google.adk.models.lite_llm import LiteLlm\n\n# --- Example Agent using a model hosted on a vLLM endpoint ---\n\n# Endpoint URL provided by your vLLM deployment\napi_base_url = \"https://your-vllm-endpoint.run.app/v1\"\n\n# Model name as recognized by *your* vLLM endpoint configuration\nmodel_name_at_endpoint = \"hosted_vllm/google/gemma-3-4b-it\" # Example from vllm_test.py\n\n# Authentication (Example: using gcloud identity token for a Cloud Run deployment)\n# Adapt this based on your endpoint's security\ntry:\n    gcloud_token = subprocess.check_output(\n        [\"gcloud\", \"auth\", \"print-identity-token\", \"-q\"]\n    ).decode().strip()\n    auth_headers = {\"Authorization\": f\"Bearer {gcloud_token}\"}\nexcept Exception as e:\n    print(f\"Warning: Could not get gcloud token - {e}. Endpoint might be unsecured or require different auth.\")\n    auth_headers = None # Or handle error appropriately\n\nagent_vllm = LlmAgent(\n    model=LiteLlm(\n        model=model_name_at_endpoint,\n        api_base=api_base_url,\n        # Pass authentication headers if needed\n        extra_headers=auth_headers\n        # Alternatively, if endpoint uses an API key:\n        # api_key=\"YOUR_ENDPOINT_API_KEY\"\n    ),\n    name=\"vllm_agent\",\n    instruction=\"You are a helpful assistant running on a self-hosted vLLM endpoint.\",\n    # ... other agent parameters\n)\n</code></pre> </li> </ol>"},{"location":"agents/models/#vertex-ai","title":"\u5728 Vertex AI \u4e0a\u4f7f\u7528\u8a17\u7ba1\u8207\u5fae\u8abf\u6a21\u578b","text":"<p>\u82e5\u9700\u4f01\u696d\u7d1a\u7684\u64f4\u5c55\u6027\u3001\u53ef\u9760\u6027\uff0c\u4ee5\u53ca\u8207 Google Cloud MLOps \u751f\u614b\u7cfb\u7d71\u7684\u6574\u5408\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u90e8\u7f72\u5230 Vertex AI \u7aef\u9ede\uff08Endpoint\uff09\u7684\u6a21\u578b\u3002\u9019\u5305\u62ec Model Garden \u4e2d\u7684\u6a21\u578b\uff0c\u6216\u60a8\u81ea\u884c\u5fae\u8abf\u7684\u6a21\u578b\u3002</p> <p>\u6574\u5408\u65b9\u5f0f\uff1a \u5c07\u5b8c\u6574\u7684 Vertex AI Endpoint \u8cc7\u6e90\u5b57\u4e32\uff08<code>projects/PROJECT_ID/locations/LOCATION/endpoints/ENDPOINT_ID</code>\uff09\u76f4\u63a5\u50b3\u905e\u7d66 <code>LlmAgent</code> \u7684 <code>model</code> \u53c3\u6578\u3002</p> <p>Vertex AI \u8a2d\u5b9a\uff08\u5f59\u6574\uff09\uff1a</p> <p>\u8acb\u78ba\u4fdd\u60a8\u7684\u74b0\u5883\u5df2\u6b63\u78ba\u8a2d\u5b9a\u4ee5\u4f7f\u7528 Vertex AI\uff1a</p> <ol> <li> <p>\u9a57\u8b49\uff1a \u4f7f\u7528 Application Default Credentials (ADC)\uff1a</p> <pre><code>gcloud auth application-default login\n</code></pre> </li> <li> <p>\u74b0\u5883\u8b8a\u6578\uff1a\u8acb\u8a2d\u5b9a\u60a8\u7684\u5c08\u6848\u8207\u4f4d\u7f6e\u3002</p> <pre><code>export GOOGLE_CLOUD_PROJECT=\"YOUR_PROJECT_ID\"\nexport GOOGLE_CLOUD_LOCATION=\"YOUR_VERTEX_AI_LOCATION\" # e.g., us-central1\n</code></pre> </li> <li> <p>\u555f\u7528 Vertex \u5f8c\u7aef\uff1a \u95dc\u9375\u7684\u662f\uff0c\u8acb\u78ba\u4fdd <code>google-genai</code> \u51fd\u5f0f\u5eab    \u4ee5 Vertex AI \u70ba\u76ee\u6a19\uff1a</p> <pre><code>export GOOGLE_GENAI_USE_VERTEXAI=TRUE\n</code></pre> </li> </ol>"},{"location":"agents/models/#model-garden","title":"Model Garden \u90e8\u7f72","text":"<p>\u4f60\u53ef\u4ee5\u5c07\u5404\u7a2e\u958b\u653e\u5f0f\u8207\u5c08\u6709\u6a21\u578b\uff0c\u5f9e Vertex AI Model Garden \u90e8\u7f72\u5230\u4e00\u500b\u7aef\u9ede\uff08endpoint\uff09\u3002</p> <p>\u7bc4\u4f8b\uff1a</p> <pre><code>from google.adk.agents import LlmAgent\nfrom google.genai import types # For config objects\n\n# --- Example Agent using a Llama 3 model deployed from Model Garden ---\n\n# Replace with your actual Vertex AI Endpoint resource name\nllama3_endpoint = \"projects/YOUR_PROJECT_ID/locations/us-central1/endpoints/YOUR_LLAMA3_ENDPOINT_ID\"\n\nagent_llama3_vertex = LlmAgent(\n    model=llama3_endpoint,\n    name=\"llama3_vertex_agent\",\n    instruction=\"You are a helpful assistant based on Llama 3, hosted on Vertex AI.\",\n    generate_content_config=types.GenerateContentConfig(max_output_tokens=2048),\n    # ... other agent parameters\n)\n</code></pre>"},{"location":"agents/models/#_3","title":"\u5fae\u8abf\u6a21\u578b\u7aef\u9ede","text":"<p>\u90e8\u7f72\u60a8\u7d93\u904e\u5fae\u8abf\u7684\u6a21\u578b\uff08\u7121\u8ad6\u662f\u57fa\u65bc Gemini \u6216\u5176\u4ed6 Vertex AI \u652f\u63f4\u7684\u67b6\u69cb\uff09\uff0c\u90fd\u6703\u7522\u751f\u4e00\u500b\u53ef\u76f4\u63a5\u4f7f\u7528\u7684\u7aef\u9ede\u3002</p> <p>\u7bc4\u4f8b\uff1a</p> <pre><code>from google.adk.agents import LlmAgent\n\n# --- Example Agent using a fine-tuned Gemini model endpoint ---\n\n# Replace with your fine-tuned model's endpoint resource name\nfinetuned_gemini_endpoint = \"projects/YOUR_PROJECT_ID/locations/us-central1/endpoints/YOUR_FINETUNED_ENDPOINT_ID\"\n\nagent_finetuned_gemini = LlmAgent(\n    model=finetuned_gemini_endpoint,\n    name=\"finetuned_gemini_agent\",\n    instruction=\"You are a specialized assistant trained on specific data.\",\n    # ... other agent parameters\n)\n</code></pre>"},{"location":"agents/models/#vertex-ai-anthropic-claude","title":"\u7b2c\u4e09\u65b9\u6a21\u578b\u65bc Vertex AI \u4e0a\uff08\u4f8b\u5982 Anthropic Claude\uff09","text":"<p>\u90e8\u5206\u4f9b\u61c9\u5546\uff08\u5982 Anthropic\uff09\u6703\u76f4\u63a5\u900f\u904e Vertex AI \u63d0\u4f9b\u5176\u6a21\u578b\u3002</p> PythonJava <p>Integration Method: Uses the direct model string (e.g., <code>\"claude-3-sonnet@20240229\"</code>), but requires manual registration within ADK.</p> <p>Why Registration? ADK's registry automatically recognizes <code>gemini-*</code> strings and standard Vertex AI endpoint strings (<code>projects/.../endpoints/...</code>) and routes them via the <code>google-genai</code> library. For other model types used directly via Vertex AI (like Claude), you must explicitly tell the ADK registry which specific wrapper class (<code>Claude</code> in this case) knows how to handle that model identifier string with the Vertex AI backend.</p> <p>Setup:</p> <ol> <li> <p>Vertex AI Environment: Ensure the consolidated Vertex AI setup (ADC, Env    Vars, <code>GOOGLE_GENAI_USE_VERTEXAI=TRUE</code>) is complete.</p> </li> <li> <p>Install Provider Library: Install the necessary client library configured    for Vertex AI.</p> <pre><code>pip install \"anthropic[vertex]\"\n</code></pre> </li> <li> <p>Register Model Class: Add this code near the start of your application,    before creating an agent using the Claude model string:</p> <pre><code># Required for using Claude model strings directly via Vertex AI with LlmAgent\nfrom google.adk.models.anthropic_llm import Claude\nfrom google.adk.models.registry import LLMRegistry\n\nLLMRegistry.register(Claude)\n</code></pre> </li> </ol> <p>Example:</p> <pre><code>from google.adk.agents import LlmAgent\nfrom google.adk.models.anthropic_llm import Claude # Import needed for registration\nfrom google.adk.models.registry import LLMRegistry # Import needed for registration\nfrom google.genai import types\n\n# --- Register Claude class (do this once at startup) ---\nLLMRegistry.register(Claude)\n\n# --- Example Agent using Claude 3 Sonnet on Vertex AI ---\n\n# Standard model name for Claude 3 Sonnet on Vertex AI\nclaude_model_vertexai = \"claude-3-sonnet@20240229\"\n\nagent_claude_vertexai = LlmAgent(\n    model=claude_model_vertexai, # Pass the direct string after registration\n    name=\"claude_vertexai_agent\",\n    instruction=\"You are an assistant powered by Claude 3 Sonnet on Vertex AI.\",\n    generate_content_config=types.GenerateContentConfig(max_output_tokens=4096),\n    # ... other agent parameters\n)\n</code></pre> <p>Integration Method: Directly instantiate the provider-specific model class (e.g., <code>com.google.adk.models.Claude</code>) and configure it with a Vertex AI backend.</p> <p>Why Direct Instantiation? The Java ADK's <code>LlmRegistry</code> primarily handles Gemini models by default. For third-party models like Claude on Vertex AI, you directly provide an instance of the ADK's wrapper class (e.g., <code>Claude</code>) to the <code>LlmAgent</code>. This wrapper class is responsible for interacting with the model via its specific client library, configured for Vertex AI.</p> <p>Setup:</p> <ol> <li> <p>Vertex AI Environment:</p> <ul> <li>Ensure your Google Cloud project and region are correctly set up.</li> <li>Application Default Credentials (ADC): Make sure ADC is configured correctly in your environment. This is typically done by running <code>gcloud auth application-default login</code>. The Java client libraries will use these credentials to authenticate with Vertex AI. Follow the Google Cloud Java documentation on ADC for detailed setup.</li> </ul> </li> <li> <p>Provider Library Dependencies:</p> <ul> <li>Third-Party Client Libraries (Often Transitive): The ADK core library often includes the necessary client libraries for common third-party models on Vertex AI (like Anthropic's required classes) as transitive dependencies. This means you might not need to explicitly add a separate dependency for the Anthropic Vertex SDK in your <code>pom.xml</code> or <code>build.gradle</code>.</li> </ul> </li> <li> <p>Instantiate and Configure the Model:     When creating your <code>LlmAgent</code>, instantiate the <code>Claude</code> class (or the equivalent for another provider) and configure its <code>VertexBackend</code>.</p> </li> </ol> <p>Example:</p> <pre><code>import com.anthropic.client.AnthropicClient;\nimport com.anthropic.client.okhttp.AnthropicOkHttpClient;\nimport com.anthropic.vertex.backends.VertexBackend;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.models.Claude; // ADK's wrapper for Claude\nimport com.google.auth.oauth2.GoogleCredentials;\nimport java.io.IOException;\n\n// ... other imports\n\npublic class ClaudeVertexAiAgent {\n\n    public static LlmAgent createAgent() throws IOException {\n        // Model name for Claude 3 Sonnet on Vertex AI (or other versions)\n        String claudeModelVertexAi = \"claude-3-7-sonnet\"; // Or any other Claude model\n\n        // Configure the AnthropicOkHttpClient with the VertexBackend\n        AnthropicClient anthropicClient = AnthropicOkHttpClient.builder()\n            .backend(\n                VertexBackend.builder()\n                    .region(\"us-east5\") // Specify your Vertex AI region\n                    .project(\"your-gcp-project-id\") // Specify your GCP Project ID\n                    .googleCredentials(GoogleCredentials.getApplicationDefault())\n                    .build())\n            .build();\n\n        // Instantiate LlmAgent with the ADK Claude wrapper\n        LlmAgent agentClaudeVertexAi = LlmAgent.builder()\n            .model(new Claude(claudeModelVertexAi, anthropicClient)) // Pass the Claude instance\n            .name(\"claude_vertexai_agent\")\n            .instruction(\"You are an assistant powered by Claude 3 Sonnet on Vertex AI.\")\n            // .generateContentConfig(...) // Optional: Add generation config if needed\n            // ... other agent parameters\n            .build();\n\n        return agentClaudeVertexAi;\n    }\n\n    public static void main(String[] args) {\n        try {\n            LlmAgent agent = createAgent();\n            System.out.println(\"Successfully created agent: \" + agent.name());\n            // Here you would typically set up a Runner and Session to interact with the agent\n        } catch (IOException e) {\n            System.err.println(\"Failed to create agent: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>"},{"location":"agents/multi-agents.en/","title":"Multi-Agent Systems in ADK","text":"<p>As agentic applications grow in complexity, structuring them as a single, monolithic agent can become challenging to develop, maintain, and reason about. The Agent Development Kit (ADK) supports building sophisticated applications by composing multiple, distinct <code>BaseAgent</code> instances into a Multi-Agent System (MAS).</p> <p>In ADK, a multi-agent system is an application where different agents, often forming a hierarchy, collaborate or coordinate to achieve a larger goal. Structuring your application this way offers significant advantages, including enhanced modularity, specialization, reusability, maintainability, and the ability to define structured control flows using dedicated workflow agents.</p> <p>You can compose various types of agents derived from <code>BaseAgent</code> to build these systems:</p> <ul> <li>LLM Agents: Agents powered by large language models. (See LLM Agents)</li> <li>Workflow Agents: Specialized agents (<code>SequentialAgent</code>, <code>ParallelAgent</code>, <code>LoopAgent</code>) designed to manage the execution flow of their sub-agents. (See Workflow Agents)</li> <li>Custom agents: Your own agents inheriting from <code>BaseAgent</code> with specialized, non-LLM logic. (See Custom Agents)</li> </ul> <p>The following sections detail the core ADK primitives\u2014such as agent hierarchy, workflow agents, and interaction mechanisms\u2014that enable you to construct and manage these multi-agent systems effectively.</p>"},{"location":"agents/multi-agents.en/#adk-primitives-for-agent-composition","title":"1. ADK Primitives for Agent Composition","text":"<p>ADK provides core building blocks\u2014primitives\u2014that enable you to structure and manage interactions within your multi-agent system.</p> <p>Note</p> <p>The specific parameters or method names for the primitives may vary slightly by SDK language (e.g., <code>sub_agents</code> in Python, <code>subAgents</code> in Java). Refer to the language-specific API documentation for details.</p>"},{"location":"agents/multi-agents.en/#agent-hierarchy-parent-agent-sub-agents","title":"1.1. Agent Hierarchy (Parent agent, Sub Agents)","text":"<p>The foundation for structuring multi-agent systems is the parent-child relationship defined in <code>BaseAgent</code>.</p> <ul> <li>Establishing Hierarchy: You create a tree structure by passing a list of agent instances to the <code>sub_agents</code> argument when initializing a parent agent. ADK automatically sets the <code>parent_agent</code> attribute on each child agent during initialization.</li> <li>Single Parent Rule: An agent instance can only be added as a sub-agent once. Attempting to assign a second parent will result in a <code>ValueError</code>.</li> <li>Importance: This hierarchy defines the scope for Workflow Agents and influences the potential targets for LLM-Driven Delegation. You can navigate the hierarchy using <code>agent.parent_agent</code> or find descendants using <code>agent.find_agent(name)</code>.</li> </ul> PythonJava <pre><code># Conceptual Example: Defining Hierarchy\nfrom google.adk.agents import LlmAgent, BaseAgent\n\n# Define individual agents\ngreeter = LlmAgent(name=\"Greeter\", model=\"gemini-2.0-flash\")\ntask_doer = BaseAgent(name=\"TaskExecutor\") # Custom non-LLM agent\n\n# Create parent agent and assign children via sub_agents\ncoordinator = LlmAgent(\n    name=\"Coordinator\",\n    model=\"gemini-2.0-flash\",\n    description=\"I coordinate greetings and tasks.\",\n    sub_agents=[ # Assign sub_agents here\n        greeter,\n        task_doer\n    ]\n)\n\n# Framework automatically sets:\n# assert greeter.parent_agent == coordinator\n# assert task_doer.parent_agent == coordinator\n</code></pre> <pre><code>// Conceptual Example: Defining Hierarchy\nimport com.google.adk.agents.SequentialAgent;\nimport com.google.adk.agents.LlmAgent;\n\n// Define individual agents\nLlmAgent greeter = LlmAgent.builder().name(\"Greeter\").model(\"gemini-2.0-flash\").build();\nSequentialAgent taskDoer = SequentialAgent.builder().name(\"TaskExecutor\").subAgents(...).build(); // Sequential Agent\n\n// Create parent agent and assign sub_agents\nLlmAgent coordinator = LlmAgent.builder()\n    .name(\"Coordinator\")\n    .model(\"gemini-2.0-flash\")\n    .description(\"I coordinate greetings and tasks\")\n    .subAgents(greeter, taskDoer) // Assign sub_agents here\n    .build();\n\n// Framework automatically sets:\n// assert greeter.parentAgent().equals(coordinator);\n// assert taskDoer.parentAgent().equals(coordinator);\n</code></pre>"},{"location":"agents/multi-agents.en/#workflow-agents-as-orchestrators","title":"1.2. Workflow Agents as Orchestrators","text":"<p>ADK includes specialized agents derived from <code>BaseAgent</code> that don't perform tasks themselves but orchestrate the execution flow of their <code>sub_agents</code>.</p> <ul> <li><code>SequentialAgent</code>: Executes its <code>sub_agents</code> one after another in the order they are listed.<ul> <li>Context: Passes the same <code>InvocationContext</code> sequentially, allowing agents to easily pass results via shared state.</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Example: Sequential Pipeline\nfrom google.adk.agents import SequentialAgent, LlmAgent\n\nstep1 = LlmAgent(name=\"Step1_Fetch\", output_key=\"data\") # Saves output to state['data']\nstep2 = LlmAgent(name=\"Step2_Process\", instruction=\"Process data from {data}.\")\n\npipeline = SequentialAgent(name=\"MyPipeline\", sub_agents=[step1, step2])\n# When pipeline runs, Step2 can access the state['data'] set by Step1.\n</code></pre> <pre><code>// Conceptual Example: Sequential Pipeline\nimport com.google.adk.agents.SequentialAgent;\nimport com.google.adk.agents.LlmAgent;\n\nLlmAgent step1 = LlmAgent.builder().name(\"Step1_Fetch\").outputKey(\"data\").build(); // Saves output to state.get(\"data\")\nLlmAgent step2 = LlmAgent.builder().name(\"Step2_Process\").instruction(\"Process data from {data}.\").build();\n\nSequentialAgent pipeline = SequentialAgent.builder().name(\"MyPipeline\").subAgents(step1, step2).build();\n// When pipeline runs, Step2 can access the state.get(\"data\") set by Step1.\n</code></pre> <ul> <li><code>ParallelAgent</code>: Executes its <code>sub_agents</code> in parallel. Events from sub-agents may be interleaved.<ul> <li>Context: Modifies the <code>InvocationContext.branch</code> for each child agent (e.g., <code>ParentBranch.ChildName</code>), providing a distinct contextual path which can be useful for isolating history in some memory implementations.</li> <li>State: Despite different branches, all parallel children access the same shared <code>session.state</code>, enabling them to read initial state and write results (use distinct keys to avoid race conditions).</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Example: Parallel Execution\nfrom google.adk.agents import ParallelAgent, LlmAgent\n\nfetch_weather = LlmAgent(name=\"WeatherFetcher\", output_key=\"weather\")\nfetch_news = LlmAgent(name=\"NewsFetcher\", output_key=\"news\")\n\ngatherer = ParallelAgent(name=\"InfoGatherer\", sub_agents=[fetch_weather, fetch_news])\n# When gatherer runs, WeatherFetcher and NewsFetcher run concurrently.\n# A subsequent agent could read state['weather'] and state['news'].\n</code></pre> <pre><code>// Conceptual Example: Parallel Execution\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.ParallelAgent;\n\nLlmAgent fetchWeather = LlmAgent.builder()\n    .name(\"WeatherFetcher\")\n    .outputKey(\"weather\")\n    .build();\n\nLlmAgent fetchNews = LlmAgent.builder()\n    .name(\"NewsFetcher\")\n    .instruction(\"news\")\n    .build();\n\nParallelAgent gatherer = ParallelAgent.builder()\n    .name(\"InfoGatherer\")\n    .subAgents(fetchWeather, fetchNews)\n    .build();\n\n// When gatherer runs, WeatherFetcher and NewsFetcher run concurrently.\n// A subsequent agent could read state['weather'] and state['news'].\n</code></pre> <ul> <li><code>LoopAgent</code>: Executes its <code>sub_agents</code> sequentially in a loop.<ul> <li>Termination: The loop stops if the optional <code>max_iterations</code> is reached, or if any sub-agent returns an <code>Event</code> with <code>escalate=True</code> in it's Event Actions.</li> <li>Context &amp; State: Passes the same <code>InvocationContext</code> in each iteration, allowing state changes (e.g., counters, flags) to persist across loops.</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Example: Loop with Condition\nfrom google.adk.agents import LoopAgent, LlmAgent, BaseAgent\nfrom google.adk.events import Event, EventActions\nfrom google.adk.agents.invocation_context import InvocationContext\nfrom typing import AsyncGenerator\n\nclass CheckCondition(BaseAgent): # Custom agent to check state\n    async def _run_async_impl(self, ctx: InvocationContext) -&gt; AsyncGenerator[Event, None]:\n        status = ctx.session.state.get(\"status\", \"pending\")\n        is_done = (status == \"completed\")\n        yield Event(author=self.name, actions=EventActions(escalate=is_done)) # Escalate if done\n\nprocess_step = LlmAgent(name=\"ProcessingStep\") # Agent that might update state['status']\n\npoller = LoopAgent(\n    name=\"StatusPoller\",\n    max_iterations=10,\n    sub_agents=[process_step, CheckCondition(name=\"Checker\")]\n)\n# When poller runs, it executes process_step then Checker repeatedly\n# until Checker escalates (state['status'] == 'completed') or 10 iterations pass.\n</code></pre> <pre><code>// Conceptual Example: Loop with Condition\n// Custom agent to check state and potentially escalate\npublic static class CheckConditionAgent extends BaseAgent {\n  public CheckConditionAgent(String name, String description) {\n    super(name, description, List.of(), null, null);\n  }\n\n  @Override\n  protected Flowable&lt;Event&gt; runAsyncImpl(InvocationContext ctx) {\n    String status = (String) ctx.session().state().getOrDefault(\"status\", \"pending\");\n    boolean isDone = \"completed\".equalsIgnoreCase(status);\n\n    // Emit an event that signals to escalate (exit the loop) if the condition is met.\n    // If not done, the escalate flag will be false or absent, and the loop continues.\n    Event checkEvent = Event.builder()\n            .author(name())\n            .id(Event.generateEventId()) // Important to give events unique IDs\n            .actions(EventActions.builder().escalate(isDone).build()) // Escalate if done\n            .build();\n    return Flowable.just(checkEvent);\n  }\n}\n\n// Agent that might update state.put(\"status\")\nLlmAgent processingStepAgent = LlmAgent.builder().name(\"ProcessingStep\").build();\n// Custom agent instance for checking the condition\nCheckConditionAgent conditionCheckerAgent = new CheckConditionAgent(\n    \"ConditionChecker\",\n    \"Checks if the status is 'completed'.\"\n);\nLoopAgent poller = LoopAgent.builder().name(\"StatusPoller\").maxIterations(10).subAgents(processingStepAgent, conditionCheckerAgent).build();\n// When poller runs, it executes processingStepAgent then conditionCheckerAgent repeatedly\n// until Checker escalates (state.get(\"status\") == \"completed\") or 10 iterations pass.\n</code></pre>"},{"location":"agents/multi-agents.en/#interaction-communication-mechanisms","title":"1.3. Interaction &amp; Communication Mechanisms","text":"<p>Agents within a system often need to exchange data or trigger actions in one another. ADK facilitates this through:</p>"},{"location":"agents/multi-agents.en/#a-shared-session-state-sessionstate","title":"a) Shared Session State (<code>session.state</code>)","text":"<p>The most fundamental way for agents operating within the same invocation (and thus sharing the same <code>Session</code> object via the <code>InvocationContext</code>) to communicate passively.</p> <ul> <li>Mechanism: One agent (or its tool/callback) writes a value (<code>context.state['data_key'] = processed_data</code>), and a subsequent agent reads it (<code>data = context.state.get('data_key')</code>). State changes are tracked via <code>CallbackContext</code>.</li> <li>Convenience: The <code>output_key</code> property on <code>LlmAgent</code> automatically saves the agent's final response text (or structured output) to the specified state key.</li> <li>Nature: Asynchronous, passive communication. Ideal for pipelines orchestrated by <code>SequentialAgent</code> or passing data across <code>LoopAgent</code> iterations.</li> <li>See Also: State Management</li> </ul> <p>Invocation Context and <code>temp:</code> State</p> <p>When a parent agent invokes a sub-agent, it passes the same <code>InvocationContext</code>. This means they share the same temporary (<code>temp:</code>) state, which is ideal for passing data that is only relevant for the current turn.</p> PythonJava <pre><code># Conceptual Example: Using output_key and reading state\nfrom google.adk.agents import LlmAgent, SequentialAgent\n\nagent_A = LlmAgent(name=\"AgentA\", instruction=\"Find the capital of France.\", output_key=\"capital_city\")\nagent_B = LlmAgent(name=\"AgentB\", instruction=\"Tell me about the city stored in {capital_city}.\")\n\npipeline = SequentialAgent(name=\"CityInfo\", sub_agents=[agent_A, agent_B])\n# AgentA runs, saves \"Paris\" to state['capital_city'].\n# AgentB runs, its instruction processor reads state['capital_city'] to get \"Paris\".\n</code></pre> <pre><code>// Conceptual Example: Using outputKey and reading state\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.SequentialAgent;\n\nLlmAgent agentA = LlmAgent.builder()\n    .name(\"AgentA\")\n    .instruction(\"Find the capital of France.\")\n    .outputKey(\"capital_city\")\n    .build();\n\nLlmAgent agentB = LlmAgent.builder()\n    .name(\"AgentB\")\n    .instruction(\"Tell me about the city stored in {capital_city}.\")\n    .outputKey(\"capital_city\")\n    .build();\n\nSequentialAgent pipeline = SequentialAgent.builder().name(\"CityInfo\").subAgents(agentA, agentB).build();\n// AgentA runs, saves \"Paris\" to state('capital_city').\n// AgentB runs, its instruction processor reads state.get(\"capital_city\") to get \"Paris\".\n</code></pre>"},{"location":"agents/multi-agents.en/#b-llm-driven-delegation-agent-transfer","title":"b) LLM-Driven Delegation (Agent Transfer)","text":"<p>Leverages an <code>LlmAgent</code>'s understanding to dynamically route tasks to other suitable agents within the hierarchy.</p> <ul> <li>Mechanism: The agent's LLM generates a specific function call: <code>transfer_to_agent(agent_name='target_agent_name')</code>.</li> <li>Handling: The <code>AutoFlow</code>, used by default when sub-agents are present or transfer isn't disallowed, intercepts this call. It identifies the target agent using <code>root_agent.find_agent()</code> and updates the <code>InvocationContext</code> to switch execution focus.</li> <li>Requires: The calling <code>LlmAgent</code> needs clear <code>instructions</code> on when to transfer, and potential target agents need distinct <code>description</code>s for the LLM to make informed decisions. Transfer scope (parent, sub-agent, siblings) can be configured on the <code>LlmAgent</code>.</li> <li>Nature: Dynamic, flexible routing based on LLM interpretation.</li> </ul> PythonJava <pre><code># Conceptual Setup: LLM Transfer\nfrom google.adk.agents import LlmAgent\n\nbooking_agent = LlmAgent(name=\"Booker\", description=\"Handles flight and hotel bookings.\")\ninfo_agent = LlmAgent(name=\"Info\", description=\"Provides general information and answers questions.\")\n\ncoordinator = LlmAgent(\n    name=\"Coordinator\",\n    model=\"gemini-2.0-flash\",\n    instruction=\"You are an assistant. Delegate booking tasks to Booker and info requests to Info.\",\n    description=\"Main coordinator.\",\n    # AutoFlow is typically used implicitly here\n    sub_agents=[booking_agent, info_agent]\n)\n# If coordinator receives \"Book a flight\", its LLM should generate:\n# FunctionCall(name='transfer_to_agent', args={'agent_name': 'Booker'})\n# ADK framework then routes execution to booking_agent.\n</code></pre> <pre><code>// Conceptual Setup: LLM Transfer\nimport com.google.adk.agents.LlmAgent;\n\nLlmAgent bookingAgent = LlmAgent.builder()\n    .name(\"Booker\")\n    .description(\"Handles flight and hotel bookings.\")\n    .build();\n\nLlmAgent infoAgent = LlmAgent.builder()\n    .name(\"Info\")\n    .description(\"Provides general information and answers questions.\")\n    .build();\n\n// Define the coordinator agent\nLlmAgent coordinator = LlmAgent.builder()\n    .name(\"Coordinator\")\n    .model(\"gemini-2.0-flash\") // Or your desired model\n    .instruction(\"You are an assistant. Delegate booking tasks to Booker and info requests to Info.\")\n    .description(\"Main coordinator.\")\n    // AutoFlow will be used by default (implicitly) because subAgents are present\n    // and transfer is not disallowed.\n    .subAgents(bookingAgent, infoAgent)\n    .build();\n\n// If coordinator receives \"Book a flight\", its LLM should generate:\n// FunctionCall.builder.name(\"transferToAgent\").args(ImmutableMap.of(\"agent_name\", \"Booker\")).build()\n// ADK framework then routes execution to bookingAgent.\n</code></pre>"},{"location":"agents/multi-agents.en/#c-explicit-invocation-agenttool","title":"c) Explicit Invocation (<code>AgentTool</code>)","text":"<p>Allows an <code>LlmAgent</code> to treat another <code>BaseAgent</code> instance as a callable function or Tool.</p> <ul> <li>Mechanism: Wrap the target agent instance in <code>AgentTool</code> and include it in the parent <code>LlmAgent</code>'s <code>tools</code> list. <code>AgentTool</code> generates a corresponding function declaration for the LLM.</li> <li>Handling: When the parent LLM generates a function call targeting the <code>AgentTool</code>, the framework executes <code>AgentTool.run_async</code>. This method runs the target agent, captures its final response, forwards any state/artifact changes back to the parent's context, and returns the response as the tool's result.</li> <li>Nature: Synchronous (within the parent's flow), explicit, controlled invocation like any other tool.</li> <li>(Note: <code>AgentTool</code> needs to be imported and used explicitly).</li> </ul> PythonJava <pre><code># Conceptual Setup: Agent as a Tool\nfrom google.adk.agents import LlmAgent, BaseAgent\nfrom google.adk.tools import agent_tool\nfrom pydantic import BaseModel\n\n# Define a target agent (could be LlmAgent or custom BaseAgent)\nclass ImageGeneratorAgent(BaseAgent): # Example custom agent\n    name: str = \"ImageGen\"\n    description: str = \"Generates an image based on a prompt.\"\n    # ... internal logic ...\n    async def _run_async_impl(self, ctx): # Simplified run logic\n        prompt = ctx.session.state.get(\"image_prompt\", \"default prompt\")\n        # ... generate image bytes ...\n        image_bytes = b\"...\"\n        yield Event(author=self.name, content=types.Content(parts=[types.Part.from_bytes(image_bytes, \"image/png\")]))\n\nimage_agent = ImageGeneratorAgent()\nimage_tool = agent_tool.AgentTool(agent=image_agent) # Wrap the agent\n\n# Parent agent uses the AgentTool\nartist_agent = LlmAgent(\n    name=\"Artist\",\n    model=\"gemini-2.0-flash\",\n    instruction=\"Create a prompt and use the ImageGen tool to generate the image.\",\n    tools=[image_tool] # Include the AgentTool\n)\n# Artist LLM generates a prompt, then calls:\n# FunctionCall(name='ImageGen', args={'image_prompt': 'a cat wearing a hat'})\n# Framework calls image_tool.run_async(...), which runs ImageGeneratorAgent.\n# The resulting image Part is returned to the Artist agent as the tool result.\n</code></pre> <pre><code>// Conceptual Setup: Agent as a Tool\nimport com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.tools.AgentTool;\n\n// Example custom agent (could be LlmAgent or custom BaseAgent)\npublic class ImageGeneratorAgent extends BaseAgent  {\n\n  public ImageGeneratorAgent(String name, String description) {\n    super(name, description, List.of(), null, null);\n  }\n\n  // ... internal logic ...\n  @Override\n  protected Flowable&lt;Event&gt; runAsyncImpl(InvocationContext invocationContext) { // Simplified run logic\n    invocationContext.session().state().get(\"image_prompt\");\n    // Generate image bytes\n    // ...\n\n    Event responseEvent = Event.builder()\n        .author(this.name())\n        .content(Content.fromParts(Part.fromText(\"\\b...\")))\n        .build();\n\n    return Flowable.just(responseEvent);\n  }\n\n  @Override\n  protected Flowable&lt;Event&gt; runLiveImpl(InvocationContext invocationContext) {\n    return null;\n  }\n}\n\n// Wrap the agent using AgentTool\nImageGeneratorAgent imageAgent = new ImageGeneratorAgent(\"image_agent\", \"generates images\");\nAgentTool imageTool = AgentTool.create(imageAgent);\n\n// Parent agent uses the AgentTool\nLlmAgent artistAgent = LlmAgent.builder()\n        .name(\"Artist\")\n        .model(\"gemini-2.0-flash\")\n        .instruction(\n                \"You are an artist. Create a detailed prompt for an image and then \" +\n                        \"use the 'ImageGen' tool to generate the image. \" +\n                        \"The 'ImageGen' tool expects a single string argument named 'request' \" +\n                        \"containing the image prompt. The tool will return a JSON string in its \" +\n                        \"'result' field, containing 'image_base64', 'mime_type', and 'status'.\"\n        )\n        .description(\"An agent that can create images using a generation tool.\")\n        .tools(imageTool) // Include the AgentTool\n        .build();\n\n// Artist LLM generates a prompt, then calls:\n// FunctionCall(name='ImageGen', args={'imagePrompt': 'a cat wearing a hat'})\n// Framework calls imageTool.runAsync(...), which runs ImageGeneratorAgent.\n// The resulting image Part is returned to the Artist agent as the tool result.\n</code></pre> <p>These primitives provide the flexibility to design multi-agent interactions ranging from tightly coupled sequential workflows to dynamic, LLM-driven delegation networks.</p>"},{"location":"agents/multi-agents.en/#common-multi-agent-patterns-using-adk-primitives","title":"2. Common Multi-Agent Patterns using ADK Primitives","text":"<p>By combining ADK's composition primitives, you can implement various established patterns for multi-agent collaboration.</p>"},{"location":"agents/multi-agents.en/#coordinatordispatcher-pattern","title":"Coordinator/Dispatcher Pattern","text":"<ul> <li>Structure: A central <code>LlmAgent</code> (Coordinator) manages several specialized <code>sub_agents</code>.</li> <li>Goal: Route incoming requests to the appropriate specialist agent.</li> <li>ADK Primitives Used:<ul> <li>Hierarchy: Coordinator has specialists listed in <code>sub_agents</code>.</li> <li>Interaction: Primarily uses LLM-Driven Delegation (requires clear <code>description</code>s on sub-agents and appropriate <code>instruction</code> on Coordinator) or Explicit Invocation (<code>AgentTool</code>) (Coordinator includes <code>AgentTool</code>-wrapped specialists in its <code>tools</code>).</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Code: Coordinator using LLM Transfer\nfrom google.adk.agents import LlmAgent\n\nbilling_agent = LlmAgent(name=\"Billing\", description=\"Handles billing inquiries.\")\nsupport_agent = LlmAgent(name=\"Support\", description=\"Handles technical support requests.\")\n\ncoordinator = LlmAgent(\n    name=\"HelpDeskCoordinator\",\n    model=\"gemini-2.0-flash\",\n    instruction=\"Route user requests: Use Billing agent for payment issues, Support agent for technical problems.\",\n    description=\"Main help desk router.\",\n    # allow_transfer=True is often implicit with sub_agents in AutoFlow\n    sub_agents=[billing_agent, support_agent]\n)\n# User asks \"My payment failed\" -&gt; Coordinator's LLM should call transfer_to_agent(agent_name='Billing')\n# User asks \"I can't log in\" -&gt; Coordinator's LLM should call transfer_to_agent(agent_name='Support')\n</code></pre> <pre><code>// Conceptual Code: Coordinator using LLM Transfer\nimport com.google.adk.agents.LlmAgent;\n\nLlmAgent billingAgent = LlmAgent.builder()\n    .name(\"Billing\")\n    .description(\"Handles billing inquiries and payment issues.\")\n    .build();\n\nLlmAgent supportAgent = LlmAgent.builder()\n    .name(\"Support\")\n    .description(\"Handles technical support requests and login problems.\")\n    .build();\n\nLlmAgent coordinator = LlmAgent.builder()\n    .name(\"HelpDeskCoordinator\")\n    .model(\"gemini-2.0-flash\")\n    .instruction(\"Route user requests: Use Billing agent for payment issues, Support agent for technical problems.\")\n    .description(\"Main help desk router.\")\n    .subAgents(billingAgent, supportAgent)\n    // Agent transfer is implicit with sub agents in the Autoflow, unless specified\n    // using .disallowTransferToParent or disallowTransferToPeers\n    .build();\n\n// User asks \"My payment failed\" -&gt; Coordinator's LLM should call\n// transferToAgent(agentName='Billing')\n// User asks \"I can't log in\" -&gt; Coordinator's LLM should call\n// transferToAgent(agentName='Support')\n</code></pre>"},{"location":"agents/multi-agents.en/#sequential-pipeline-pattern","title":"Sequential Pipeline Pattern","text":"<ul> <li>Structure: A <code>SequentialAgent</code> contains <code>sub_agents</code> executed in a fixed order.</li> <li>Goal: Implement a multi-step process where the output of one step feeds into the next.</li> <li>ADK Primitives Used:<ul> <li>Workflow: <code>SequentialAgent</code> defines the order.</li> <li>Communication: Primarily uses Shared Session State. Earlier agents write results (often via <code>output_key</code>), later agents read those results from <code>context.state</code>.</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Code: Sequential Data Pipeline\nfrom google.adk.agents import SequentialAgent, LlmAgent\n\nvalidator = LlmAgent(name=\"ValidateInput\", instruction=\"Validate the input.\", output_key=\"validation_status\")\nprocessor = LlmAgent(name=\"ProcessData\", instruction=\"Process data if {validation_status} is 'valid'.\", output_key=\"result\")\nreporter = LlmAgent(name=\"ReportResult\", instruction=\"Report the result from {result}.\")\n\ndata_pipeline = SequentialAgent(\n    name=\"DataPipeline\",\n    sub_agents=[validator, processor, reporter]\n)\n# validator runs -&gt; saves to state['validation_status']\n# processor runs -&gt; reads state['validation_status'], saves to state['result']\n# reporter runs -&gt; reads state['result']\n</code></pre> <pre><code>// Conceptual Code: Sequential Data Pipeline\nimport com.google.adk.agents.SequentialAgent;\n\nLlmAgent validator = LlmAgent.builder()\n    .name(\"ValidateInput\")\n    .instruction(\"Validate the input\")\n    .outputKey(\"validation_status\") // Saves its main text output to session.state[\"validation_status\"]\n    .build();\n\nLlmAgent processor = LlmAgent.builder()\n    .name(\"ProcessData\")\n    .instruction(\"Process data if {validation_status} is 'valid'\")\n    .outputKey(\"result\") // Saves its main text output to session.state[\"result\"]\n    .build();\n\nLlmAgent reporter = LlmAgent.builder()\n    .name(\"ReportResult\")\n    .instruction(\"Report the result from {result}\")\n    .build();\n\nSequentialAgent dataPipeline = SequentialAgent.builder()\n    .name(\"DataPipeline\")\n    .subAgents(validator, processor, reporter)\n    .build();\n\n// validator runs -&gt; saves to state['validation_status']\n// processor runs -&gt; reads state['validation_status'], saves to state['result']\n// reporter runs -&gt; reads state['result']\n</code></pre>"},{"location":"agents/multi-agents.en/#parallel-fan-outgather-pattern","title":"Parallel Fan-Out/Gather Pattern","text":"<ul> <li>Structure: A <code>ParallelAgent</code> runs multiple <code>sub_agents</code> concurrently, often followed by a later agent (in a <code>SequentialAgent</code>) that aggregates results.</li> <li>Goal: Execute independent tasks simultaneously to reduce latency, then combine their outputs.</li> <li>ADK Primitives Used:<ul> <li>Workflow: <code>ParallelAgent</code> for concurrent execution (Fan-Out). Often nested within a <code>SequentialAgent</code> to handle the subsequent aggregation step (Gather).</li> <li>Communication: Sub-agents write results to distinct keys in Shared Session State. The subsequent \"Gather\" agent reads multiple state keys.</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Code: Parallel Information Gathering\nfrom google.adk.agents import SequentialAgent, ParallelAgent, LlmAgent\n\nfetch_api1 = LlmAgent(name=\"API1Fetcher\", instruction=\"Fetch data from API 1.\", output_key=\"api1_data\")\nfetch_api2 = LlmAgent(name=\"API2Fetcher\", instruction=\"Fetch data from API 2.\", output_key=\"api2_data\")\n\ngather_concurrently = ParallelAgent(\n    name=\"ConcurrentFetch\",\n    sub_agents=[fetch_api1, fetch_api2]\n)\n\nsynthesizer = LlmAgent(\n    name=\"Synthesizer\",\n    instruction=\"Combine results from {api1_data} and {api2_data}.\"\n)\n\noverall_workflow = SequentialAgent(\n    name=\"FetchAndSynthesize\",\n    sub_agents=[gather_concurrently, synthesizer] # Run parallel fetch, then synthesize\n)\n# fetch_api1 and fetch_api2 run concurrently, saving to state.\n# synthesizer runs afterwards, reading state['api1_data'] and state['api2_data'].\n</code></pre> <pre><code>// Conceptual Code: Parallel Information Gathering\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.ParallelAgent;\nimport com.google.adk.agents.SequentialAgent;\n\nLlmAgent fetchApi1 = LlmAgent.builder()\n    .name(\"API1Fetcher\")\n    .instruction(\"Fetch data from API 1.\")\n    .outputKey(\"api1_data\")\n    .build();\n\nLlmAgent fetchApi2 = LlmAgent.builder()\n    .name(\"API2Fetcher\")\n    .instruction(\"Fetch data from API 2.\")\n    .outputKey(\"api2_data\")\n    .build();\n\nParallelAgent gatherConcurrently = ParallelAgent.builder()\n    .name(\"ConcurrentFetcher\")\n    .subAgents(fetchApi2, fetchApi1)\n    .build();\n\nLlmAgent synthesizer = LlmAgent.builder()\n    .name(\"Synthesizer\")\n    .instruction(\"Combine results from {api1_data} and {api2_data}.\")\n    .build();\n\nSequentialAgent overallWorfklow = SequentialAgent.builder()\n    .name(\"FetchAndSynthesize\") // Run parallel fetch, then synthesize\n    .subAgents(gatherConcurrently, synthesizer)\n    .build();\n\n// fetch_api1 and fetch_api2 run concurrently, saving to state.\n// synthesizer runs afterwards, reading state['api1_data'] and state['api2_data'].\n</code></pre>"},{"location":"agents/multi-agents.en/#hierarchical-task-decomposition","title":"Hierarchical Task Decomposition","text":"<ul> <li>Structure: A multi-level tree of agents where higher-level agents break down complex goals and delegate sub-tasks to lower-level agents.</li> <li>Goal: Solve complex problems by recursively breaking them down into simpler, executable steps.</li> <li>ADK Primitives Used:<ul> <li>Hierarchy: Multi-level <code>parent_agent</code>/<code>sub_agents</code> structure.</li> <li>Interaction: Primarily LLM-Driven Delegation or Explicit Invocation (<code>AgentTool</code>) used by parent agents to assign tasks to subagents. Results are returned up the hierarchy (via tool responses or state).</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Code: Hierarchical Research Task\nfrom google.adk.agents import LlmAgent\nfrom google.adk.tools import agent_tool\n\n# Low-level tool-like agents\nweb_searcher = LlmAgent(name=\"WebSearch\", description=\"Performs web searches for facts.\")\nsummarizer = LlmAgent(name=\"Summarizer\", description=\"Summarizes text.\")\n\n# Mid-level agent combining tools\nresearch_assistant = LlmAgent(\n    name=\"ResearchAssistant\",\n    model=\"gemini-2.0-flash\",\n    description=\"Finds and summarizes information on a topic.\",\n    tools=[agent_tool.AgentTool(agent=web_searcher), agent_tool.AgentTool(agent=summarizer)]\n)\n\n# High-level agent delegating research\nreport_writer = LlmAgent(\n    name=\"ReportWriter\",\n    model=\"gemini-2.0-flash\",\n    instruction=\"Write a report on topic X. Use the ResearchAssistant to gather information.\",\n    tools=[agent_tool.AgentTool(agent=research_assistant)]\n    # Alternatively, could use LLM Transfer if research_assistant is a sub_agent\n)\n# User interacts with ReportWriter.\n# ReportWriter calls ResearchAssistant tool.\n# ResearchAssistant calls WebSearch and Summarizer tools.\n# Results flow back up.\n</code></pre> <pre><code>// Conceptual Code: Hierarchical Research Task\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.tools.AgentTool;\n\n// Low-level tool-like agents\nLlmAgent webSearcher = LlmAgent.builder()\n    .name(\"WebSearch\")\n    .description(\"Performs web searches for facts.\")\n    .build();\n\nLlmAgent summarizer = LlmAgent.builder()\n    .name(\"Summarizer\")\n    .description(\"Summarizes text.\")\n    .build();\n\n// Mid-level agent combining tools\nLlmAgent researchAssistant = LlmAgent.builder()\n    .name(\"ResearchAssistant\")\n    .model(\"gemini-2.0-flash\")\n    .description(\"Finds and summarizes information on a topic.\")\n    .tools(AgentTool.create(webSearcher), AgentTool.create(summarizer))\n    .build();\n\n// High-level agent delegating research\nLlmAgent reportWriter = LlmAgent.builder()\n    .name(\"ReportWriter\")\n    .model(\"gemini-2.0-flash\")\n    .instruction(\"Write a report on topic X. Use the ResearchAssistant to gather information.\")\n    .tools(AgentTool.create(researchAssistant))\n    // Alternatively, could use LLM Transfer if research_assistant is a subAgent\n    .build();\n\n// User interacts with ReportWriter.\n// ReportWriter calls ResearchAssistant tool.\n// ResearchAssistant calls WebSearch and Summarizer tools.\n// Results flow back up.\n</code></pre>"},{"location":"agents/multi-agents.en/#reviewcritique-pattern-generator-critic","title":"Review/Critique Pattern (Generator-Critic)","text":"<ul> <li>Structure: Typically involves two agents within a <code>SequentialAgent</code>: a Generator and a Critic/Reviewer.</li> <li>Goal: Improve the quality or validity of generated output by having a dedicated agent review it.</li> <li>ADK Primitives Used:<ul> <li>Workflow: <code>SequentialAgent</code> ensures generation happens before review.</li> <li>Communication: Shared Session State (Generator uses <code>output_key</code> to save output; Reviewer reads that state key). The Reviewer might save its feedback to another state key for subsequent steps.</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Code: Generator-Critic\nfrom google.adk.agents import SequentialAgent, LlmAgent\n\ngenerator = LlmAgent(\n    name=\"DraftWriter\",\n    instruction=\"Write a short paragraph about subject X.\",\n    output_key=\"draft_text\"\n)\n\nreviewer = LlmAgent(\n    name=\"FactChecker\",\n    instruction=\"Review the text in {draft_text} for factual accuracy. Output 'valid' or 'invalid' with reasons.\",\n    output_key=\"review_status\"\n)\n\n# Optional: Further steps based on review_status\n\nreview_pipeline = SequentialAgent(\n    name=\"WriteAndReview\",\n    sub_agents=[generator, reviewer]\n)\n# generator runs -&gt; saves draft to state['draft_text']\n# reviewer runs -&gt; reads state['draft_text'], saves status to state['review_status']\n</code></pre> <pre><code>// Conceptual Code: Generator-Critic\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.SequentialAgent;\n\nLlmAgent generator = LlmAgent.builder()\n    .name(\"DraftWriter\")\n    .instruction(\"Write a short paragraph about subject X.\")\n    .outputKey(\"draft_text\")\n    .build();\n\nLlmAgent reviewer = LlmAgent.builder()\n    .name(\"FactChecker\")\n    .instruction(\"Review the text in {draft_text} for factual accuracy. Output 'valid' or 'invalid' with reasons.\")\n    .outputKey(\"review_status\")\n    .build();\n\n// Optional: Further steps based on review_status\n\nSequentialAgent reviewPipeline = SequentialAgent.builder()\n    .name(\"WriteAndReview\")\n    .subAgents(generator, reviewer)\n    .build();\n\n// generator runs -&gt; saves draft to state['draft_text']\n// reviewer runs -&gt; reads state['draft_text'], saves status to state['review_status']\n</code></pre>"},{"location":"agents/multi-agents.en/#iterative-refinement-pattern","title":"Iterative Refinement Pattern","text":"<ul> <li>Structure: Uses a <code>LoopAgent</code> containing one or more agents that work on a task over multiple iterations.</li> <li>Goal: Progressively improve a result (e.g., code, text, plan) stored in the session state until a quality threshold is met or a maximum number of iterations is reached.</li> <li>ADK Primitives Used:<ul> <li>Workflow: <code>LoopAgent</code> manages the repetition.</li> <li>Communication: Shared Session State is essential for agents to read the previous iteration's output and save the refined version.</li> <li>Termination: The loop typically ends based on <code>max_iterations</code> or a dedicated checking agent setting <code>escalate=True</code> in the <code>Event Actions</code> when the result is satisfactory.</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Code: Iterative Code Refinement\nfrom google.adk.agents import LoopAgent, LlmAgent, BaseAgent\nfrom google.adk.events import Event, EventActions\nfrom google.adk.agents.invocation_context import InvocationContext\nfrom typing import AsyncGenerator\n\n# Agent to generate/refine code based on state['current_code'] and state['requirements']\ncode_refiner = LlmAgent(\n    name=\"CodeRefiner\",\n    instruction=\"Read state['current_code'] (if exists) and state['requirements']. Generate/refine Python code to meet requirements. Save to state['current_code'].\",\n    output_key=\"current_code\" # Overwrites previous code in state\n)\n\n# Agent to check if the code meets quality standards\nquality_checker = LlmAgent(\n    name=\"QualityChecker\",\n    instruction=\"Evaluate the code in state['current_code'] against state['requirements']. Output 'pass' or 'fail'.\",\n    output_key=\"quality_status\"\n)\n\n# Custom agent to check the status and escalate if 'pass'\nclass CheckStatusAndEscalate(BaseAgent):\n    async def _run_async_impl(self, ctx: InvocationContext) -&gt; AsyncGenerator[Event, None]:\n        status = ctx.session.state.get(\"quality_status\", \"fail\")\n        should_stop = (status == \"pass\")\n        yield Event(author=self.name, actions=EventActions(escalate=should_stop))\n\nrefinement_loop = LoopAgent(\n    name=\"CodeRefinementLoop\",\n    max_iterations=5,\n    sub_agents=[code_refiner, quality_checker, CheckStatusAndEscalate(name=\"StopChecker\")]\n)\n# Loop runs: Refiner -&gt; Checker -&gt; StopChecker\n# State['current_code'] is updated each iteration.\n# Loop stops if QualityChecker outputs 'pass' (leading to StopChecker escalating) or after 5 iterations.\n</code></pre> <pre><code>// Conceptual Code: Iterative Code Refinement\nimport com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.LoopAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.events.EventActions;\nimport com.google.adk.agents.InvocationContext;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.util.List;\n\n// Agent to generate/refine code based on state['current_code'] and state['requirements']\nLlmAgent codeRefiner = LlmAgent.builder()\n    .name(\"CodeRefiner\")\n    .instruction(\"Read state['current_code'] (if exists) and state['requirements']. Generate/refine Java code to meet requirements. Save to state['current_code'].\")\n    .outputKey(\"current_code\") // Overwrites previous code in state\n    .build();\n\n// Agent to check if the code meets quality standards\nLlmAgent qualityChecker = LlmAgent.builder()\n    .name(\"QualityChecker\")\n    .instruction(\"Evaluate the code in state['current_code'] against state['requirements']. Output 'pass' or 'fail'.\")\n    .outputKey(\"quality_status\")\n    .build();\n\nBaseAgent checkStatusAndEscalate = new BaseAgent(\n    \"StopChecker\",\"Checks quality_status and escalates if 'pass'.\", List.of(), null, null) {\n\n  @Override\n  protected Flowable&lt;Event&gt; runAsyncImpl(InvocationContext invocationContext) {\n    String status = (String) invocationContext.session().state().getOrDefault(\"quality_status\", \"fail\");\n    boolean shouldStop = \"pass\".equals(status);\n\n    EventActions actions = EventActions.builder().escalate(shouldStop).build();\n    Event event = Event.builder()\n        .author(this.name())\n        .actions(actions)\n        .build();\n    return Flowable.just(event);\n  }\n};\n\nLoopAgent refinementLoop = LoopAgent.builder()\n    .name(\"CodeRefinementLoop\")\n    .maxIterations(5)\n    .subAgents(codeRefiner, qualityChecker, checkStatusAndEscalate)\n    .build();\n\n// Loop runs: Refiner -&gt; Checker -&gt; StopChecker\n// State['current_code'] is updated each iteration.\n// Loop stops if QualityChecker outputs 'pass' (leading to StopChecker escalating) or after 5\n// iterations.\n</code></pre>"},{"location":"agents/multi-agents.en/#human-in-the-loop-pattern","title":"Human-in-the-Loop Pattern","text":"<ul> <li>Structure: Integrates human intervention points within an agent workflow.</li> <li>Goal: Allow for human oversight, approval, correction, or tasks that AI cannot perform.</li> <li>ADK Primitives Used (Conceptual):<ul> <li>Interaction: Can be implemented using a custom Tool that pauses execution and sends a request to an external system (e.g., a UI, ticketing system) waiting for human input. The tool then returns the human's response to the agent.</li> <li>Workflow: Could use LLM-Driven Delegation (<code>transfer_to_agent</code>) targeting a conceptual \"Human Agent\" that triggers the external workflow, or use the custom tool within an <code>LlmAgent</code>.</li> <li>State/Callbacks: State can hold task details for the human; callbacks can manage the interaction flow.</li> <li>Note: ADK doesn't have a built-in \"Human Agent\" type, so this requires custom integration.</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Code: Using a Tool for Human Approval\nfrom google.adk.agents import LlmAgent, SequentialAgent\nfrom google.adk.tools import FunctionTool\n\n# --- Assume external_approval_tool exists ---\n# This tool would:\n# 1. Take details (e.g., request_id, amount, reason).\n# 2. Send these details to a human review system (e.g., via API).\n# 3. Poll or wait for the human response (approved/rejected).\n# 4. Return the human's decision.\n# async def external_approval_tool(amount: float, reason: str) -&gt; str: ...\napproval_tool = FunctionTool(func=external_approval_tool)\n\n# Agent that prepares the request\nprepare_request = LlmAgent(\n    name=\"PrepareApproval\",\n    instruction=\"Prepare the approval request details based on user input. Store amount and reason in state.\",\n    # ... likely sets state['approval_amount'] and state['approval_reason'] ...\n)\n\n# Agent that calls the human approval tool\nrequest_approval = LlmAgent(\n    name=\"RequestHumanApproval\",\n    instruction=\"Use the external_approval_tool with amount from state['approval_amount'] and reason from state['approval_reason'].\",\n    tools=[approval_tool],\n    output_key=\"human_decision\"\n)\n\n# Agent that proceeds based on human decision\nprocess_decision = LlmAgent(\n    name=\"ProcessDecision\",\n    instruction=\"Check {human_decision}. If 'approved', proceed. If 'rejected', inform user.\"\n)\n\napproval_workflow = SequentialAgent(\n    name=\"HumanApprovalWorkflow\",\n    sub_agents=[prepare_request, request_approval, process_decision]\n)\n</code></pre> <pre><code>// Conceptual Code: Using a Tool for Human Approval\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.SequentialAgent;\nimport com.google.adk.tools.FunctionTool;\n\n// --- Assume external_approval_tool exists ---\n// This tool would:\n// 1. Take details (e.g., request_id, amount, reason).\n// 2. Send these details to a human review system (e.g., via API).\n// 3. Poll or wait for the human response (approved/rejected).\n// 4. Return the human's decision.\n// public boolean externalApprovalTool(float amount, String reason) { ... }\nFunctionTool approvalTool = FunctionTool.create(externalApprovalTool);\n\n// Agent that prepares the request\nLlmAgent prepareRequest = LlmAgent.builder()\n    .name(\"PrepareApproval\")\n    .instruction(\"Prepare the approval request details based on user input. Store amount and reason in state.\")\n    // ... likely sets state['approval_amount'] and state['approval_reason'] ...\n    .build();\n\n// Agent that calls the human approval tool\nLlmAgent requestApproval = LlmAgent.builder()\n    .name(\"RequestHumanApproval\")\n    .instruction(\"Use the external_approval_tool with amount from state['approval_amount'] and reason from state['approval_reason'].\")\n    .tools(approvalTool)\n    .outputKey(\"human_decision\")\n    .build();\n\n// Agent that proceeds based on human decision\nLlmAgent processDecision = LlmAgent.builder()\n    .name(\"ProcessDecision\")\n    .instruction(\"Check {human_decision}. If 'approved', proceed. If 'rejected', inform user.\")\n    .build();\n\nSequentialAgent approvalWorkflow = SequentialAgent.builder()\n    .name(\"HumanApprovalWorkflow\")\n    .subAgents(prepareRequest, requestApproval, processDecision)\n    .build();\n</code></pre> <p>These patterns provide starting points for structuring your multi-agent systems. You can mix and match them as needed to create the most effective architecture for your specific application.</p>"},{"location":"agents/multi-agents/","title":"Agent Development Kit (ADK) \u7684\u591a\u4ee3\u7406\u7cfb\u7d71","text":"<p>\u96a8\u8457 agent \u61c9\u7528\u7a0b\u5f0f\u7684\u8907\u96dc\u5ea6\u63d0\u5347\uff0c\u5c07\u5176\u8a2d\u8a08\u70ba\u55ae\u4e00\u3001\u9f90\u5927\u7684 agent \u6703\u8b8a\u5f97\u96e3\u4ee5\u958b\u767c\u3001\u7dad\u8b77\u8207\u7406\u89e3\u3002Agent Development Kit (ADK) \u652f\u63f4\u900f\u904e\u7d44\u5408\u591a\u500b\u4e0d\u540c\u7684 <code>BaseAgent</code> \u5be6\u4f8b\uff0c\u4f86\u5efa\u69cb\u9032\u968e\u7684\u61c9\u7528\u7a0b\u5f0f\uff0c\u5f62\u6210\u591a\u4ee3\u7406\u7cfb\u7d71\uff08Multi-Agent System, MAS\uff09\u3002</p> <p>\u5728 ADK \u4e2d\uff0c\u591a\u4ee3\u7406\u7cfb\u7d71\u662f\u4e00\u7a2e\u61c9\u7528\u7a0b\u5f0f\u67b6\u69cb\uff0c\u4e0d\u540c\u7684 agent\uff08\u901a\u5e38\u5f62\u6210\u968e\u5c64\u7d50\u69cb\uff09\u5f7c\u6b64\u5354\u4f5c\u6216\u5354\u540c\u904b\u4f5c\uff0c\u4ee5\u9054\u6210\u66f4\u5927\u7684\u76ee\u6a19\u3002\u9019\u7a2e\u67b6\u69cb\u65b9\u5f0f\u5e36\u4f86\u986f\u8457\u512a\u52e2\uff0c\u5305\u62ec\u66f4\u9ad8\u7684\u6a21\u7d44\u5316\u3001\u5c08\u696d\u5316\u3001\u53ef\u91cd\u7528\u6027\u3001\u53ef\u7dad\u8b77\u6027\uff0c\u4ee5\u53ca\u80fd\u5920\u900f\u904e\u5c08\u7528\u7684 workflow agent \u5b9a\u7fa9\u7d50\u69cb\u5316\u63a7\u5236\u6d41\u7a0b\u3002</p> <p>\u4f60\u53ef\u4ee5\u7d44\u5408\u591a\u7a2e\u5f9e <code>BaseAgent</code> \u884d\u751f\u7684 agent \u4f86\u5efa\u69cb\u9019\u4e9b\u7cfb\u7d71\uff1a</p> <ul> <li>\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) agent\uff1a \u7531\u5927\u578b\u8a9e\u8a00\u6a21\u578b (Large Language Model, LLM) \u9a45\u52d5\u7684 agent\u3002\uff08\u53c3\u898b LLM Agents\uff09</li> <li>Workflow agent\uff1a \u5c08\u9580\u8a2d\u8a08\u7528\u4f86\u7ba1\u7406\u5176\u5b50 agent \u57f7\u884c\u6d41\u7a0b\u7684 agent\uff08<code>SequentialAgent</code>\u3001<code>ParallelAgent</code>\u3001<code>LoopAgent</code>\uff09\u3002\uff08\u53c3\u898b Workflow Agents\uff09</li> <li>\u81ea\u8a02 agent\uff1a \u4f60\u81ea\u884c\u7e7c\u627f\u81ea <code>BaseAgent</code>\uff0c\u4e26\u5be6\u4f5c\u5c08\u5c6c\u975e LLM \u908f\u8f2f\u7684 agent\u3002\uff08\u53c3\u898b Custom Agents\uff09</li> </ul> <p>\u4ee5\u4e0b\u7ae0\u7bc0\u5c07\u8a73\u7d30\u4ecb\u7d39 ADK \u7684\u6838\u5fc3\u539f\u8a9e\uff08primitives\uff09\uff0c\u5982 agent \u968e\u5c64\u3001workflow agent\uff0c\u4ee5\u53ca\u4e92\u52d5\u6a5f\u5236\uff0c\u5354\u52a9\u4f60\u6709\u6548\u5efa\u69cb\u8207\u7ba1\u7406\u591a\u4ee3\u7406\u7cfb\u7d71\u3002</p>"},{"location":"agents/multi-agents/#adk-primitives-for-agent-composition","title":"1. ADK \u7684 agent \u7d44\u5408\u539f\u8a9e","text":"<p>ADK \u63d0\u4f9b\u4e86\u6838\u5fc3\u7684\u5efa\u69cb\u57fa\u790e\u2014\u2014\u539f\u8a9e\uff08primitives\uff09\uff0c\u8b93\u4f60\u80fd\u5920\u5728\u591a\u4ee3\u7406\u7cfb\u7d71\u4e2d\u9032\u884c\u7d50\u69cb\u8a2d\u8a08\u8207\u4e92\u52d5\u7ba1\u7406\u3002</p> <p>Note</p> <p>\u9019\u4e9b\u57fa\u790e\u5143\u4ef6\u7684\u5177\u9ad4\u53c3\u6578\u6216\u65b9\u6cd5\u540d\u7a31\uff0c\u53ef\u80fd\u6703\u4f9d\u64da SDK \u8a9e\u8a00\u7565\u6709\u4e0d\u540c\uff08\u4f8b\u5982\uff0cPython \u4e2d\u70ba <code>sub_agents</code>\uff0cJava \u4e2d\u70ba <code>subAgents</code>\uff09\u3002\u8a73\u7d30\u8cc7\u8a0a\u8acb\u53c3\u95b1\u5404\u8a9e\u8a00\u7684 API \u6587\u4ef6\u8aaa\u660e\u3002</p>"},{"location":"agents/multi-agents/#agent-hierarchy-parent-agent-sub-agents","title":"1.1. Agent \u968e\u5c64\u7d50\u69cb\uff08\u7236 agent\u3001\u5b50 agent\uff09","text":"<p>\u5efa\u7acb\u591a agent \u7cfb\u7d71\u7d50\u69cb\u7684\u57fa\u790e\uff0c\u662f\u5728 <code>BaseAgent</code> \u4e2d\u5b9a\u7fa9\u7684\u7236\u5b50\u95dc\u4fc2\u3002</p> <ul> <li>\u5efa\u7acb\u968e\u5c64\u7d50\u69cb\uff1a \u7576\u521d\u59cb\u5316\u7236 agent \u6642\uff0c\u5c07\u4e00\u7d44 agent \u5be6\u4f8b\u50b3\u905e\u7d66 <code>sub_agents</code> \u53c3\u6578\uff0c\u5373\u53ef\u5efa\u7acb\u6a39\u72c0\u7d50\u69cb\u3002Agent Development Kit (ADK) \u6703\u5728\u521d\u59cb\u5316\u6642\u81ea\u52d5\u70ba\u6bcf\u500b\u5b50 agent \u8a2d\u5b9a <code>parent_agent</code> \u5c6c\u6027\u3002</li> <li>\u55ae\u4e00\u7236\u5c64\u898f\u5247\uff1a \u4e00\u500b agent \u5be6\u4f8b\u53ea\u80fd\u88ab\u52a0\u5165\u70ba\u5b50 agent \u4e00\u6b21\u3002\u82e5\u5617\u8a66\u6307\u5b9a\u7b2c\u4e8c\u500b\u7236\u5c64\uff0c\u5c07\u6703\u7522\u751f <code>ValueError</code>\u3002</li> <li>\u91cd\u8981\u6027\uff1a \u6b64\u968e\u5c64\u7d50\u69cb\u6c7a\u5b9a\u4e86 Workflow Agents \u7684\u4f5c\u7528\u7bc4\u570d\uff0c\u4e26\u5f71\u97ff\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u9a45\u52d5\u59d4\u6d3e\uff08LLM-Driven Delegation\uff09\u7684\u6f5b\u5728\u76ee\u6a19\u3002\u4f60\u53ef\u4ee5\u900f\u904e <code>agent.parent_agent</code> \u5c0e\u89bd\u968e\u5c64\u7d50\u69cb\uff0c\u6216\u4f7f\u7528 <code>agent.find_agent(name)</code> \u67e5\u627e\u6240\u6709\u5f8c\u4ee3 agent\u3002</li> </ul> PythonJava <pre><code># Conceptual Example: Defining Hierarchy\nfrom google.adk.agents import LlmAgent, BaseAgent\n\n# Define individual agents\ngreeter = LlmAgent(name=\"Greeter\", model=\"gemini-2.0-flash\")\ntask_doer = BaseAgent(name=\"TaskExecutor\") # Custom non-LLM agent\n\n# Create parent agent and assign children via sub_agents\ncoordinator = LlmAgent(\n    name=\"Coordinator\",\n    model=\"gemini-2.0-flash\",\n    description=\"I coordinate greetings and tasks.\",\n    sub_agents=[ # Assign sub_agents here\n        greeter,\n        task_doer\n    ]\n)\n\n# Framework automatically sets:\n# assert greeter.parent_agent == coordinator\n# assert task_doer.parent_agent == coordinator\n</code></pre> <pre><code>// Conceptual Example: Defining Hierarchy\nimport com.google.adk.agents.SequentialAgent;\nimport com.google.adk.agents.LlmAgent;\n\n// Define individual agents\nLlmAgent greeter = LlmAgent.builder().name(\"Greeter\").model(\"gemini-2.0-flash\").build();\nSequentialAgent taskDoer = SequentialAgent.builder().name(\"TaskExecutor\").subAgents(...).build(); // Sequential Agent\n\n// Create parent agent and assign sub_agents\nLlmAgent coordinator = LlmAgent.builder()\n    .name(\"Coordinator\")\n    .model(\"gemini-2.0-flash\")\n    .description(\"I coordinate greetings and tasks\")\n    .subAgents(greeter, taskDoer) // Assign sub_agents here\n    .build();\n\n// Framework automatically sets:\n// assert greeter.parentAgent().equals(coordinator);\n// assert taskDoer.parentAgent().equals(coordinator);\n</code></pre>"},{"location":"agents/multi-agents/#workflow-agents-as-orchestrators","title":"1.2. Workflow Agents as Orchestrators","text":"<p>Agent Development Kit (ADK) \u5305\u542b\u5f9e <code>BaseAgent</code> \u884d\u751f\u51fa\u7684\u5c08\u7528 agent\uff0c\u9019\u4e9b agent \u672c\u8eab\u4e0d\u57f7\u884c\u4efb\u52d9\uff0c\u800c\u662f\u5354\u8abf\u5176 <code>sub_agents</code> \u7684\u57f7\u884c\u6d41\u7a0b\u3002</p> <ul> <li><code>SequentialAgent</code>\uff1a \u4f9d\u7167\u5217\u8868\u9806\u5e8f\uff0c\u4f9d\u6b21\u57f7\u884c\u5176 <code>sub_agents</code>\u3002<ul> <li>Context\uff1a \u6703\u4f9d\u5e8f\u50b3\u905e\u76f8\u540c\u7684 <code>InvocationContext</code>\uff0c\u8b93 agent \u80fd\u5920\u900f\u904e\u5171\u4eab state \u8f15\u9b06\u50b3\u905e\u7d50\u679c\u3002</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Example: Sequential Pipeline\nfrom google.adk.agents import SequentialAgent, LlmAgent\n\nstep1 = LlmAgent(name=\"Step1_Fetch\", output_key=\"data\") # Saves output to state['data']\nstep2 = LlmAgent(name=\"Step2_Process\", instruction=\"Process data from {data}.\")\n\npipeline = SequentialAgent(name=\"MyPipeline\", sub_agents=[step1, step2])\n# When pipeline runs, Step2 can access the state['data'] set by Step1.\n</code></pre> <pre><code>// Conceptual Example: Sequential Pipeline\nimport com.google.adk.agents.SequentialAgent;\nimport com.google.adk.agents.LlmAgent;\n\nLlmAgent step1 = LlmAgent.builder().name(\"Step1_Fetch\").outputKey(\"data\").build(); // Saves output to state.get(\"data\")\nLlmAgent step2 = LlmAgent.builder().name(\"Step2_Process\").instruction(\"Process data from {data}.\").build();\n\nSequentialAgent pipeline = SequentialAgent.builder().name(\"MyPipeline\").subAgents(step1, step2).build();\n// When pipeline runs, Step2 can access the state.get(\"data\") set by Step1.\n</code></pre> <ul> <li><code>ParallelAgent</code>\uff1a \u6703\u5e73\u884c\u57f7\u884c\u5176 <code>sub_agents</code>\u3002\u4f86\u81ea\u5b50 agent \u7684\u4e8b\u4ef6\u53ef\u80fd\u6703\u4ea4\u932f\u767c\u751f\u3002<ul> <li>Context\uff1a \u6703\u91dd\u5c0d\u6bcf\u500b\u5b50 agent\uff08\u4f8b\u5982 <code>ParentBranch.ChildName</code>\uff09\u4fee\u6539 <code>InvocationContext.branch</code>\uff0c\u63d0\u4f9b\u7368\u7acb\u7684\u60c5\u5883\u8def\u5f91\uff0c\u9019\u5728\u67d0\u4e9b\u8a18\u61b6\u9ad4\u5be6\u4f5c\u4e2d\u6709\u52a9\u65bc\u9694\u96e2\u6b77\u53f2\u7d00\u9304\u3002</li> <li>State\uff1a \u5118\u7ba1\u6709\u4e0d\u540c\u5206\u652f\uff0c\u6240\u6709\u5e73\u884c\u7684\u5b50 agent \u90fd\u5b58\u53d6\u76f8\u540c\u7684\u5171\u4eab <code>session.state</code>\uff0c\u8b93\u5b83\u5011\u80fd\u8b80\u53d6\u521d\u59cb\u72c0\u614b\u4e26\u5beb\u5165\u7d50\u679c\uff08\u8acb\u4f7f\u7528\u4e0d\u540c\u7684 key \u4ee5\u907f\u514d\u7af6\u722d\u689d\u4ef6\uff09\u3002</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Example: Parallel Execution\nfrom google.adk.agents import ParallelAgent, LlmAgent\n\nfetch_weather = LlmAgent(name=\"WeatherFetcher\", output_key=\"weather\")\nfetch_news = LlmAgent(name=\"NewsFetcher\", output_key=\"news\")\n\ngatherer = ParallelAgent(name=\"InfoGatherer\", sub_agents=[fetch_weather, fetch_news])\n# When gatherer runs, WeatherFetcher and NewsFetcher run concurrently.\n# A subsequent agent could read state['weather'] and state['news'].\n</code></pre> <pre><code>// Conceptual Example: Parallel Execution\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.ParallelAgent;\n\nLlmAgent fetchWeather = LlmAgent.builder()\n    .name(\"WeatherFetcher\")\n    .outputKey(\"weather\")\n    .build();\n\nLlmAgent fetchNews = LlmAgent.builder()\n    .name(\"NewsFetcher\")\n    .instruction(\"news\")\n    .build();\n\nParallelAgent gatherer = ParallelAgent.builder()\n    .name(\"InfoGatherer\")\n    .subAgents(fetchWeather, fetchNews)\n    .build();\n\n// When gatherer runs, WeatherFetcher and NewsFetcher run concurrently.\n// A subsequent agent could read state['weather'] and state['news'].\n</code></pre> <ul> <li><code>LoopAgent</code>\uff1a \u6703\u5728\u8ff4\u5708\u4e2d\u4f9d\u5e8f\u57f7\u884c\u5176 <code>sub_agents</code>\u3002<ul> <li>\u7d42\u6b62\u689d\u4ef6\uff1a \u5982\u679c\u9054\u5230\u53ef\u9078\u7684 <code>max_iterations</code>\uff0c\u6216\u4efb\u4f55\u5b50 agent \u5728\u5176 Event Actions \u4e2d\u56de\u50b3 <code>Event</code> \u4e14\u5305\u542b <code>escalate=True</code>\uff0c\u5247\u8ff4\u5708\u6703\u505c\u6b62\u3002</li> <li>Context \u8207 State\uff1a \u6bcf\u6b21\u8fed\u4ee3\u90fd\u50b3\u905e\u76f8\u540c\u7684 <code>InvocationContext</code>\uff0c\u8b93\u72c0\u614b\u8b8a\u5316\uff08\u4f8b\u5982\uff1a\u8a08\u6578\u5668\u3001\u65d7\u6a19\uff09\u80fd\u5920\u5728\u591a\u6b21\u8ff4\u5708\u4e2d\u6301\u7e8c\u4fdd\u7559\u3002</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Example: Loop with Condition\nfrom google.adk.agents import LoopAgent, LlmAgent, BaseAgent\nfrom google.adk.events import Event, EventActions\nfrom google.adk.agents.invocation_context import InvocationContext\nfrom typing import AsyncGenerator\n\nclass CheckCondition(BaseAgent): # Custom agent to check state\n    async def _run_async_impl(self, ctx: InvocationContext) -&gt; AsyncGenerator[Event, None]:\n        status = ctx.session.state.get(\"status\", \"pending\")\n        is_done = (status == \"completed\")\n        yield Event(author=self.name, actions=EventActions(escalate=is_done)) # Escalate if done\n\nprocess_step = LlmAgent(name=\"ProcessingStep\") # Agent that might update state['status']\n\npoller = LoopAgent(\n    name=\"StatusPoller\",\n    max_iterations=10,\n    sub_agents=[process_step, CheckCondition(name=\"Checker\")]\n)\n# When poller runs, it executes process_step then Checker repeatedly\n# until Checker escalates (state['status'] == 'completed') or 10 iterations pass.\n</code></pre> <pre><code>// Conceptual Example: Loop with Condition\n// Custom agent to check state and potentially escalate\npublic static class CheckConditionAgent extends BaseAgent {\n  public CheckConditionAgent(String name, String description) {\n    super(name, description, List.of(), null, null);\n  }\n\n  @Override\n  protected Flowable&lt;Event&gt; runAsyncImpl(InvocationContext ctx) {\n    String status = (String) ctx.session().state().getOrDefault(\"status\", \"pending\");\n    boolean isDone = \"completed\".equalsIgnoreCase(status);\n\n    // Emit an event that signals to escalate (exit the loop) if the condition is met.\n    // If not done, the escalate flag will be false or absent, and the loop continues.\n    Event checkEvent = Event.builder()\n            .author(name())\n            .id(Event.generateEventId()) // Important to give events unique IDs\n            .actions(EventActions.builder().escalate(isDone).build()) // Escalate if done\n            .build();\n    return Flowable.just(checkEvent);\n  }\n}\n\n// Agent that might update state.put(\"status\")\nLlmAgent processingStepAgent = LlmAgent.builder().name(\"ProcessingStep\").build();\n// Custom agent instance for checking the condition\nCheckConditionAgent conditionCheckerAgent = new CheckConditionAgent(\n    \"ConditionChecker\",\n    \"Checks if the status is 'completed'.\"\n);\nLoopAgent poller = LoopAgent.builder().name(\"StatusPoller\").maxIterations(10).subAgents(processingStepAgent, conditionCheckerAgent).build();\n// When poller runs, it executes processingStepAgent then conditionCheckerAgent repeatedly\n// until Checker escalates (state.get(\"status\") == \"completed\") or 10 iterations pass.\n</code></pre>"},{"location":"agents/multi-agents/#interaction-communication-mechanisms","title":"1.3. \u4e92\u52d5\u8207\u901a\u8a0a\u6a5f\u5236","text":"<p>\u5728\u4e00\u500b\u7cfb\u7d71\u4e2d\uff0cagents \u7d93\u5e38\u9700\u8981\u5f7c\u6b64\u4ea4\u63db\u8cc7\u6599\u6216\u89f8\u767c\u5c0d\u65b9\u7684\u52d5\u4f5c\u3002Agent Development Kit (ADK) \u900f\u904e\u4ee5\u4e0b\u65b9\u5f0f\u5354\u52a9\u5be6\u73fe\uff1a</p>"},{"location":"agents/multi-agents/#a-session-state-sessionstate","title":"a) \u5171\u7528 Session State (<code>session.state</code>)","text":"<p>\u5c0d\u65bc\u5728\u540c\u4e00\u6b21\u547c\u53eb\u4e2d\u904b\u4f5c\uff08\u56e0\u6b64\u900f\u904e <code>InvocationContext</code> \u5171\u4eab\u540c\u4e00\u500b <code>Session</code> \u7269\u4ef6\uff09\u7684 agents\uff0c\u9019\u662f\u6700\u57fa\u672c\u7684\u88ab\u52d5\u901a\u8a0a\u65b9\u5f0f\u3002</p> <ul> <li>\u6a5f\u5236\uff1a \u4e00\u500b agent\uff08\u6216\u5176\u5de5\u5177/Callback\uff09\u5beb\u5165\u4e00\u500b\u503c\uff08<code>context.state['data_key'] = processed_data</code>\uff09\uff0c\u96a8\u5f8c\u7684\u53e6\u4e00\u500b agent \u8b80\u53d6\u8a72\u503c\uff08<code>data = context.state.get('data_key')</code>\uff09\u3002\u72c0\u614b\u8b8a\u5316\u6703\u900f\u904e <code>CallbackContext</code> \u9032\u884c\u8ffd\u8e64\u3002</li> <li>\u4fbf\u5229\u6027\uff1a <code>LlmAgent</code> \u4e0a\u7684 <code>output_key</code> \u5c6c\u6027\u6703\u81ea\u52d5\u5c07 agent \u7684\u6700\u7d42\u56de\u61c9\u6587\u5b57\uff08\u6216\u7d50\u69cb\u5316\u8f38\u51fa\uff09\u5132\u5b58\u5230\u6307\u5b9a\u7684 state key\u3002</li> <li>\u7279\u6027\uff1a \u975e\u540c\u6b65\u3001\u88ab\u52d5\u5f0f\u901a\u8a0a\u3002\u975e\u5e38\u9069\u5408\u7531 <code>SequentialAgent</code> \u5354\u8abf\u7684\u8655\u7406\u6d41\u7a0b\uff08pipeline\uff09\uff0c\u6216\u5728 <code>LoopAgent</code> \u591a\u6b21\u8fed\u4ee3\u9593\u50b3\u905e\u8cc7\u6599\u3002</li> <li>\u5ef6\u4f38\u95b1\u8b80\uff1a State Management</li> </ul> <p>Invocation Context and <code>temp:</code> State</p> <p>\u7576\u7236 agent \u547c\u53eb\u5b50 agent \u6642\uff0c\u6703\u50b3\u905e\u76f8\u540c\u7684 <code>InvocationContext</code>\u3002\u9019\u8868\u793a\u5b83\u5011\u5171\u7528\u76f8\u540c\u7684\u66ab\u5b58\uff08<code>temp:</code>\uff09state\uff0c\u975e\u5e38\u9069\u5408\u7528\u4f86\u50b3\u905e\u53ea\u5728\u7576\u524d agent \u56de\u5408\u76f8\u95dc\u7684\u8cc7\u6599\u3002</p> PythonJava <pre><code># Conceptual Example: Using output_key and reading state\nfrom google.adk.agents import LlmAgent, SequentialAgent\n\nagent_A = LlmAgent(name=\"AgentA\", instruction=\"Find the capital of France.\", output_key=\"capital_city\")\nagent_B = LlmAgent(name=\"AgentB\", instruction=\"Tell me about the city stored in {capital_city}.\")\n\npipeline = SequentialAgent(name=\"CityInfo\", sub_agents=[agent_A, agent_B])\n# AgentA runs, saves \"Paris\" to state['capital_city'].\n# AgentB runs, its instruction processor reads state['capital_city'] to get \"Paris\".\n</code></pre> <pre><code>// Conceptual Example: Using outputKey and reading state\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.SequentialAgent;\n\nLlmAgent agentA = LlmAgent.builder()\n    .name(\"AgentA\")\n    .instruction(\"Find the capital of France.\")\n    .outputKey(\"capital_city\")\n    .build();\n\nLlmAgent agentB = LlmAgent.builder()\n    .name(\"AgentB\")\n    .instruction(\"Tell me about the city stored in {capital_city}.\")\n    .outputKey(\"capital_city\")\n    .build();\n\nSequentialAgent pipeline = SequentialAgent.builder().name(\"CityInfo\").subAgents(agentA, agentB).build();\n// AgentA runs, saves \"Paris\" to state('capital_city').\n// AgentB runs, its instruction processor reads state.get(\"capital_city\") to get \"Paris\".\n</code></pre>"},{"location":"agents/multi-agents/#b-llm-agent-transfer","title":"b) LLM \u9a45\u52d5\u7684\u59d4\u6d3e\uff08Agent Transfer\uff09","text":"<p>\u5229\u7528 <code>LlmAgent</code> \u7684\u7406\u89e3\u80fd\u529b\uff0c\u52d5\u614b\u5730\u5c07\u4efb\u52d9\u8def\u7531\u81f3\u968e\u5c64\u4e2d\u5176\u4ed6\u5408\u9069\u7684 agent\u3002</p> <ul> <li>\u6a5f\u5236\uff1a agent \u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6703\u7522\u751f\u7279\u5b9a\u7684 function call\uff1a<code>transfer_to_agent(agent_name='target_agent_name')</code>\u3002</li> <li>\u8655\u7406\u65b9\u5f0f\uff1a \u7576\u5b58\u5728\u5b50 agent \u6216\u672a\u7981\u6b62\u8f49\u79fb\u6642\uff0c\u9810\u8a2d\u6703\u7531 <code>AutoFlow</code> \u622a\u7372\u6b64\u547c\u53eb\u3002\u5b83\u6703\u4f7f\u7528 <code>root_agent.find_agent()</code> \u8fa8\u8b58\u76ee\u6a19 agent\uff0c\u4e26\u66f4\u65b0 <code>InvocationContext</code>\uff0c\u4ee5\u5207\u63db\u57f7\u884c\u7126\u9ede\u3002</li> <li>\u9700\u6c42\uff1a \u547c\u53eb\u65b9 <code>LlmAgent</code> \u9700\u660e\u78ba\u5b9a\u7fa9\u4f55\u6642\u9032\u884c\u8f49\u79fb\uff08<code>instructions</code>\uff09\uff0c\u800c\u6f5b\u5728\u76ee\u6a19 agent \u9700\u6709\u660e\u78ba\u7684 <code>description</code>\uff0c\u4ee5\u4fbf LLM \u505a\u51fa\u660e\u667a\u6c7a\u7b56\u3002\u8f49\u79fb\u7bc4\u570d\uff08\u7236\u5c64\u3001\u5b50 agent\u3001\u540c\u5c64\uff09\u53ef\u65bc <code>LlmAgent</code> \u4e0a\u8a2d\u5b9a\u3002</li> <li>\u7279\u6027\uff1a \u6839\u64da LLM \u89e3\u8b80\uff0c\u5177\u5099\u52d5\u614b\u4e14\u5f48\u6027\u7684\u8def\u7531\u80fd\u529b\u3002</li> </ul> PythonJava <pre><code># Conceptual Setup: LLM Transfer\nfrom google.adk.agents import LlmAgent\n\nbooking_agent = LlmAgent(name=\"Booker\", description=\"Handles flight and hotel bookings.\")\ninfo_agent = LlmAgent(name=\"Info\", description=\"Provides general information and answers questions.\")\n\ncoordinator = LlmAgent(\n    name=\"Coordinator\",\n    model=\"gemini-2.0-flash\",\n    instruction=\"You are an assistant. Delegate booking tasks to Booker and info requests to Info.\",\n    description=\"Main coordinator.\",\n    # AutoFlow is typically used implicitly here\n    sub_agents=[booking_agent, info_agent]\n)\n# If coordinator receives \"Book a flight\", its LLM should generate:\n# FunctionCall(name='transfer_to_agent', args={'agent_name': 'Booker'})\n# ADK framework then routes execution to booking_agent.\n</code></pre> <pre><code>// Conceptual Setup: LLM Transfer\nimport com.google.adk.agents.LlmAgent;\n\nLlmAgent bookingAgent = LlmAgent.builder()\n    .name(\"Booker\")\n    .description(\"Handles flight and hotel bookings.\")\n    .build();\n\nLlmAgent infoAgent = LlmAgent.builder()\n    .name(\"Info\")\n    .description(\"Provides general information and answers questions.\")\n    .build();\n\n// Define the coordinator agent\nLlmAgent coordinator = LlmAgent.builder()\n    .name(\"Coordinator\")\n    .model(\"gemini-2.0-flash\") // Or your desired model\n    .instruction(\"You are an assistant. Delegate booking tasks to Booker and info requests to Info.\")\n    .description(\"Main coordinator.\")\n    // AutoFlow will be used by default (implicitly) because subAgents are present\n    // and transfer is not disallowed.\n    .subAgents(bookingAgent, infoAgent)\n    .build();\n\n// If coordinator receives \"Book a flight\", its LLM should generate:\n// FunctionCall.builder.name(\"transferToAgent\").args(ImmutableMap.of(\"agent_name\", \"Booker\")).build()\n// ADK framework then routes execution to bookingAgent.\n</code></pre>"},{"location":"agents/multi-agents/#c-agenttool","title":"c) \u660e\u78ba\u547c\u53eb\uff08<code>AgentTool</code>\uff09","text":"<p>\u5141\u8a31\u4e00\u500b <code>LlmAgent</code> \u5c07\u53e6\u4e00\u500b <code>BaseAgent</code> \u5be6\u4f8b\u8996\u70ba\u53ef\u547c\u53eb\u7684\u51fd\u5f0f\u6216 Tool\u3002</p> <ul> <li>\u6a5f\u5236\uff1a \u5c07\u76ee\u6a19 agent \u5be6\u4f8b\u5305\u88dd\u5728 <code>AgentTool</code> \u4e2d\uff0c\u4e26\u5c07\u5176\u52a0\u5165\u7236\u5c64 <code>LlmAgent</code> \u7684 <code>tools</code> \u6e05\u55ae\u3002<code>AgentTool</code> \u6703\u70ba\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7522\u751f\u5c0d\u61c9\u7684\u51fd\u5f0f\u5ba3\u544a\u3002</li> <li>\u8655\u7406\u65b9\u5f0f\uff1a \u7576\u7236\u5c64\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7522\u751f\u91dd\u5c0d <code>AgentTool</code> \u7684\u51fd\u5f0f\u547c\u53eb\u6642\uff0c\u6846\u67b6\u6703\u57f7\u884c <code>AgentTool.run_async</code>\u3002\u6b64\u65b9\u6cd5\u6703\u57f7\u884c\u76ee\u6a19 agent\uff0c\u64f7\u53d6\u5176\u6700\u7d42\u56de\u61c9\uff0c\u4e26\u5c07\u4efb\u4f55\u72c0\u614b\uff0f\u7522\u7269\u8b8a\u66f4\u56de\u50b3\u81f3\u7236\u5c64\u7684 context\uff0c\u6700\u5f8c\u5c07\u56de\u61c9\u4f5c\u70ba\u5de5\u5177\u7684\u7d50\u679c\u8fd4\u56de\u3002</li> <li>\u7279\u6027\uff1a \u540c\u6b65\uff08\u65bc\u7236\u5c64\u6d41\u7a0b\u5167\uff09\u3001\u660e\u78ba\u4e14\u53ef\u63a7\u7684\u547c\u53eb\uff0c\u985e\u4f3c\u65bc\u5176\u4ed6\u5de5\u5177\u3002</li> <li>\uff08\u6ce8\u610f\uff1a \u9700\u660e\u78ba\u532f\u5165\u4e26\u4f7f\u7528 <code>AgentTool</code>\uff09\u3002</li> </ul> PythonJava <pre><code># Conceptual Setup: Agent as a Tool\nfrom google.adk.agents import LlmAgent, BaseAgent\nfrom google.adk.tools import agent_tool\nfrom pydantic import BaseModel\n\n# Define a target agent (could be LlmAgent or custom BaseAgent)\nclass ImageGeneratorAgent(BaseAgent): # Example custom agent\n    name: str = \"ImageGen\"\n    description: str = \"Generates an image based on a prompt.\"\n    # ... internal logic ...\n    async def _run_async_impl(self, ctx): # Simplified run logic\n        prompt = ctx.session.state.get(\"image_prompt\", \"default prompt\")\n        # ... generate image bytes ...\n        image_bytes = b\"...\"\n        yield Event(author=self.name, content=types.Content(parts=[types.Part.from_bytes(image_bytes, \"image/png\")]))\n\nimage_agent = ImageGeneratorAgent()\nimage_tool = agent_tool.AgentTool(agent=image_agent) # Wrap the agent\n\n# Parent agent uses the AgentTool\nartist_agent = LlmAgent(\n    name=\"Artist\",\n    model=\"gemini-2.0-flash\",\n    instruction=\"Create a prompt and use the ImageGen tool to generate the image.\",\n    tools=[image_tool] # Include the AgentTool\n)\n# Artist LLM generates a prompt, then calls:\n# FunctionCall(name='ImageGen', args={'image_prompt': 'a cat wearing a hat'})\n# Framework calls image_tool.run_async(...), which runs ImageGeneratorAgent.\n# The resulting image Part is returned to the Artist agent as the tool result.\n</code></pre> <pre><code>// Conceptual Setup: Agent as a Tool\nimport com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.tools.AgentTool;\n\n// Example custom agent (could be LlmAgent or custom BaseAgent)\npublic class ImageGeneratorAgent extends BaseAgent  {\n\n  public ImageGeneratorAgent(String name, String description) {\n    super(name, description, List.of(), null, null);\n  }\n\n  // ... internal logic ...\n  @Override\n  protected Flowable&lt;Event&gt; runAsyncImpl(InvocationContext invocationContext) { // Simplified run logic\n    invocationContext.session().state().get(\"image_prompt\");\n    // Generate image bytes\n    // ...\n\n    Event responseEvent = Event.builder()\n        .author(this.name())\n        .content(Content.fromParts(Part.fromText(\"\\b...\")))\n        .build();\n\n    return Flowable.just(responseEvent);\n  }\n\n  @Override\n  protected Flowable&lt;Event&gt; runLiveImpl(InvocationContext invocationContext) {\n    return null;\n  }\n}\n\n// Wrap the agent using AgentTool\nImageGeneratorAgent imageAgent = new ImageGeneratorAgent(\"image_agent\", \"generates images\");\nAgentTool imageTool = AgentTool.create(imageAgent);\n\n// Parent agent uses the AgentTool\nLlmAgent artistAgent = LlmAgent.builder()\n        .name(\"Artist\")\n        .model(\"gemini-2.0-flash\")\n        .instruction(\n                \"You are an artist. Create a detailed prompt for an image and then \" +\n                        \"use the 'ImageGen' tool to generate the image. \" +\n                        \"The 'ImageGen' tool expects a single string argument named 'request' \" +\n                        \"containing the image prompt. The tool will return a JSON string in its \" +\n                        \"'result' field, containing 'image_base64', 'mime_type', and 'status'.\"\n        )\n        .description(\"An agent that can create images using a generation tool.\")\n        .tools(imageTool) // Include the AgentTool\n        .build();\n\n// Artist LLM generates a prompt, then calls:\n// FunctionCall(name='ImageGen', args={'imagePrompt': 'a cat wearing a hat'})\n// Framework calls imageTool.runAsync(...), which runs ImageGeneratorAgent.\n// The resulting image Part is returned to the Artist agent as the tool result.\n</code></pre> <p>\u9019\u4e9b\u57fa\u790e\u5143\u4ef6\u63d0\u4f9b\u4e86\u9ad8\u5ea6\u5f48\u6027\uff0c\u8b93\u4f60\u53ef\u4ee5\u8a2d\u8a08\u591a agent \u4e92\u52d5\uff0c\u5f9e\u7dca\u5bc6\u8026\u5408\u7684\u5e8f\u5217\u5f0f\u5de5\u4f5c\u6d41\u7a0b\uff0c\u5230\u52d5\u614b\u3001\u7531\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u9a45\u52d5\u7684\u59d4\u6d3e\u7db2\u8def\u7686\u53ef\u6db5\u84cb\u3002</p>"},{"location":"agents/multi-agents/#common-multi-agent-patterns-using-adk-primitives","title":"2. \u4f7f\u7528 Agent Development Kit (ADK) \u57fa\u790e\u5143\u4ef6\u7684\u5e38\u898b\u591a agent \u6a21\u5f0f","text":"<p>\u900f\u904e\u7d44\u5408 ADK \u7684\u7d44\u6210\u57fa\u790e\u5143\u4ef6\uff0c\u4f60\u53ef\u4ee5\u5be6\u4f5c\u591a\u7a2e\u65e2\u6709\u7684\u591a agent \u5354\u4f5c\u6a21\u5f0f\u3002</p>"},{"location":"agents/multi-agents/#coordinatordispatcher","title":"\u5354\u8abf\u8005\uff0f\u5206\u6d3e\u8005\uff08Coordinator/Dispatcher\uff09\u6a21\u5f0f","text":"<ul> <li>\u7d50\u69cb\uff1a \u4e00\u500b\u4e2d\u592e <code>LlmAgent</code>\uff08\u5354\u8abf\u8005\uff0cCoordinator\uff09\u8ca0\u8cac\u7ba1\u7406\u591a\u500b\u5c08\u9580\u7684 <code>sub_agents</code>\u3002</li> <li>\u76ee\u6a19\uff1a \u5c07\u9032\u4f86\u7684\u8acb\u6c42\u5c0e\u5411\u9069\u5408\u7684\u5c08\u5bb6 agent\u3002</li> <li>\u4f7f\u7528\u7684 ADK \u57fa\u790e\u5143\u4ef6\uff1a<ul> <li>\u968e\u5c64\u7d50\u69cb\uff08Hierarchy\uff09\uff1a \u5354\u8abf\u8005\u6703\u5728 <code>sub_agents</code> \u4e2d\u5217\u51fa\u5c08\u5bb6\u3002</li> <li>\u4e92\u52d5\u65b9\u5f0f\uff08Interaction\uff09\uff1a \u4e3b\u8981\u4f7f\u7528 \u7531\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u9a45\u52d5\u7684\u59d4\u6d3e\uff08LLM-Driven Delegation\uff09\uff08\u9700\u5728\u5b50 agent \u4e0a\u660e\u78ba\u8a2d\u5b9a <code>description</code>\uff0c\u4e26\u5728\u5354\u8abf\u8005\u4e0a\u8a2d\u7f6e\u9069\u7576\u7684 <code>instruction</code>\uff09\uff0c\u6216 \u660e\u78ba\u547c\u53eb\uff08Explicit Invocation, <code>AgentTool</code>\uff09\uff08\u5354\u8abf\u8005\u6703\u5728\u5176 <code>tools</code> \u4e2d\u5305\u542b\u4ee5 <code>AgentTool</code> \u5305\u88dd\u7684\u5c08\u5bb6\uff09\u3002</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Code: Coordinator using LLM Transfer\nfrom google.adk.agents import LlmAgent\n\nbilling_agent = LlmAgent(name=\"Billing\", description=\"Handles billing inquiries.\")\nsupport_agent = LlmAgent(name=\"Support\", description=\"Handles technical support requests.\")\n\ncoordinator = LlmAgent(\n    name=\"HelpDeskCoordinator\",\n    model=\"gemini-2.0-flash\",\n    instruction=\"Route user requests: Use Billing agent for payment issues, Support agent for technical problems.\",\n    description=\"Main help desk router.\",\n    # allow_transfer=True is often implicit with sub_agents in AutoFlow\n    sub_agents=[billing_agent, support_agent]\n)\n# User asks \"My payment failed\" -&gt; Coordinator's LLM should call transfer_to_agent(agent_name='Billing')\n# User asks \"I can't log in\" -&gt; Coordinator's LLM should call transfer_to_agent(agent_name='Support')\n</code></pre> <pre><code>// Conceptual Code: Coordinator using LLM Transfer\nimport com.google.adk.agents.LlmAgent;\n\nLlmAgent billingAgent = LlmAgent.builder()\n    .name(\"Billing\")\n    .description(\"Handles billing inquiries and payment issues.\")\n    .build();\n\nLlmAgent supportAgent = LlmAgent.builder()\n    .name(\"Support\")\n    .description(\"Handles technical support requests and login problems.\")\n    .build();\n\nLlmAgent coordinator = LlmAgent.builder()\n    .name(\"HelpDeskCoordinator\")\n    .model(\"gemini-2.0-flash\")\n    .instruction(\"Route user requests: Use Billing agent for payment issues, Support agent for technical problems.\")\n    .description(\"Main help desk router.\")\n    .subAgents(billingAgent, supportAgent)\n    // Agent transfer is implicit with sub agents in the Autoflow, unless specified\n    // using .disallowTransferToParent or disallowTransferToPeers\n    .build();\n\n// User asks \"My payment failed\" -&gt; Coordinator's LLM should call\n// transferToAgent(agentName='Billing')\n// User asks \"I can't log in\" -&gt; Coordinator's LLM should call\n// transferToAgent(agentName='Support')\n</code></pre>"},{"location":"agents/multi-agents/#sequential-pipeline-pattern","title":"\u9806\u5e8f\u7ba1\u7dda\u6a21\u5f0f\uff08Sequential Pipeline Pattern\uff09","text":"<ul> <li>\u7d50\u69cb\uff1a\u4e00\u500b <code>SequentialAgent</code> \u5305\u542b\u4f9d\u56fa\u5b9a\u9806\u5e8f\u57f7\u884c\u7684 <code>sub_agents</code>\u3002</li> <li>\u76ee\u6a19\uff1a\u5be6\u73fe\u591a\u6b65\u9a5f\u6d41\u7a0b\uff0c\u4f7f\u6bcf\u500b\u6b65\u9a5f\u7684\u8f38\u51fa\u4f5c\u70ba\u4e0b\u4e00\u6b65\u7684\u8f38\u5165\u3002</li> <li>\u4f7f\u7528\u7684 Agent Development Kit (ADK) \u539f\u8a9e\uff1a<ul> <li>Workflow\uff1a<code>SequentialAgent</code> \u5b9a\u7fa9\u57f7\u884c\u9806\u5e8f\u3002</li> <li>Communication\uff1a\u4e3b\u8981\u4f7f\u7528 Shared Session State\u3002\u524d\u9762\u7684 agent \u6703\u5beb\u5165\u7d50\u679c\uff08\u901a\u5e38\u900f\u904e <code>output_key</code>\uff09\uff0c\u5f8c\u7e8c\u7684 agent \u5247\u5f9e <code>context.state</code> \u8b80\u53d6\u9019\u4e9b\u7d50\u679c\u3002</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Code: Sequential Data Pipeline\nfrom google.adk.agents import SequentialAgent, LlmAgent\n\nvalidator = LlmAgent(name=\"ValidateInput\", instruction=\"Validate the input.\", output_key=\"validation_status\")\nprocessor = LlmAgent(name=\"ProcessData\", instruction=\"Process data if {validation_status} is 'valid'.\", output_key=\"result\")\nreporter = LlmAgent(name=\"ReportResult\", instruction=\"Report the result from {result}.\")\n\ndata_pipeline = SequentialAgent(\n    name=\"DataPipeline\",\n    sub_agents=[validator, processor, reporter]\n)\n# validator runs -&gt; saves to state['validation_status']\n# processor runs -&gt; reads state['validation_status'], saves to state['result']\n# reporter runs -&gt; reads state['result']\n</code></pre> <pre><code>// Conceptual Code: Sequential Data Pipeline\nimport com.google.adk.agents.SequentialAgent;\n\nLlmAgent validator = LlmAgent.builder()\n    .name(\"ValidateInput\")\n    .instruction(\"Validate the input\")\n    .outputKey(\"validation_status\") // Saves its main text output to session.state[\"validation_status\"]\n    .build();\n\nLlmAgent processor = LlmAgent.builder()\n    .name(\"ProcessData\")\n    .instruction(\"Process data if {validation_status} is 'valid'\")\n    .outputKey(\"result\") // Saves its main text output to session.state[\"result\"]\n    .build();\n\nLlmAgent reporter = LlmAgent.builder()\n    .name(\"ReportResult\")\n    .instruction(\"Report the result from {result}\")\n    .build();\n\nSequentialAgent dataPipeline = SequentialAgent.builder()\n    .name(\"DataPipeline\")\n    .subAgents(validator, processor, reporter)\n    .build();\n\n// validator runs -&gt; saves to state['validation_status']\n// processor runs -&gt; reads state['validation_status'], saves to state['result']\n// reporter runs -&gt; reads state['result']\n</code></pre>"},{"location":"agents/multi-agents/#fan-outgather","title":"\u5e73\u884c\u6247\u51fa\uff0f\u5f59\u7e3d\uff08Fan-Out/Gather\uff09\u6a21\u5f0f","text":"<ul> <li>\u7d50\u69cb\uff1a \u4e00\u500b <code>ParallelAgent</code> \u6703\u540c\u6642\u57f7\u884c\u591a\u500b <code>sub_agents</code>\uff0c\u901a\u5e38\u5f8c\u7e8c\u6703\u6709\u53e6\u4e00\u500b agent\uff08\u5728 <code>SequentialAgent</code> \u4e2d\uff09\u8ca0\u8cac\u5f59\u7e3d\u7d50\u679c\u3002</li> <li>\u76ee\u6a19\uff1a \u540c\u6b65\u57f7\u884c\u5f7c\u6b64\u7368\u7acb\u7684\u4efb\u52d9\u4ee5\u964d\u4f4e\u5ef6\u9072\uff0c\u7136\u5f8c\u5c07\u5b83\u5011\u7684\u8f38\u51fa\u5408\u4f75\u3002</li> <li>\u4f7f\u7528\u7684 Agent Development Kit (ADK) \u539f\u8a9e\uff1a<ul> <li>Workflow\uff1a <code>ParallelAgent</code> \u7528\u65bc\u5e73\u884c\u57f7\u884c\uff08Fan-Out\uff09\u3002\u901a\u5e38\u6703\u5de2\u72c0\u5728 <code>SequentialAgent</code> \u5167\uff0c\u4ee5\u8655\u7406\u5f8c\u7e8c\u7684\u5f59\u7e3d\u6b65\u9a5f\uff08Gather\uff09\u3002</li> <li>\u901a\u8a0a\uff1a \u5b50 agent \u6703\u5c07\u7d50\u679c\u5beb\u5165 Shared Session State \u7684\u4e0d\u540c key\u3002\u5f8c\u7e8c\u7684\u300cGather\u300dagent \u6703\u8b80\u53d6\u591a\u500b state key\u3002</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Code: Parallel Information Gathering\nfrom google.adk.agents import SequentialAgent, ParallelAgent, LlmAgent\n\nfetch_api1 = LlmAgent(name=\"API1Fetcher\", instruction=\"Fetch data from API 1.\", output_key=\"api1_data\")\nfetch_api2 = LlmAgent(name=\"API2Fetcher\", instruction=\"Fetch data from API 2.\", output_key=\"api2_data\")\n\ngather_concurrently = ParallelAgent(\n    name=\"ConcurrentFetch\",\n    sub_agents=[fetch_api1, fetch_api2]\n)\n\nsynthesizer = LlmAgent(\n    name=\"Synthesizer\",\n    instruction=\"Combine results from {api1_data} and {api2_data}.\"\n)\n\noverall_workflow = SequentialAgent(\n    name=\"FetchAndSynthesize\",\n    sub_agents=[gather_concurrently, synthesizer] # Run parallel fetch, then synthesize\n)\n# fetch_api1 and fetch_api2 run concurrently, saving to state.\n# synthesizer runs afterwards, reading state['api1_data'] and state['api2_data'].\n</code></pre> <pre><code>// Conceptual Code: Parallel Information Gathering\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.ParallelAgent;\nimport com.google.adk.agents.SequentialAgent;\n\nLlmAgent fetchApi1 = LlmAgent.builder()\n    .name(\"API1Fetcher\")\n    .instruction(\"Fetch data from API 1.\")\n    .outputKey(\"api1_data\")\n    .build();\n\nLlmAgent fetchApi2 = LlmAgent.builder()\n    .name(\"API2Fetcher\")\n    .instruction(\"Fetch data from API 2.\")\n    .outputKey(\"api2_data\")\n    .build();\n\nParallelAgent gatherConcurrently = ParallelAgent.builder()\n    .name(\"ConcurrentFetcher\")\n    .subAgents(fetchApi2, fetchApi1)\n    .build();\n\nLlmAgent synthesizer = LlmAgent.builder()\n    .name(\"Synthesizer\")\n    .instruction(\"Combine results from {api1_data} and {api2_data}.\")\n    .build();\n\nSequentialAgent overallWorfklow = SequentialAgent.builder()\n    .name(\"FetchAndSynthesize\") // Run parallel fetch, then synthesize\n    .subAgents(gatherConcurrently, synthesizer)\n    .build();\n\n// fetch_api1 and fetch_api2 run concurrently, saving to state.\n// synthesizer runs afterwards, reading state['api1_data'] and state['api2_data'].\n</code></pre>"},{"location":"agents/multi-agents/#_1","title":"\u968e\u5c64\u5f0f\u4efb\u52d9\u5206\u89e3","text":"<ul> <li>\u7d50\u69cb\uff1a \u7531\u591a\u5c64 agent \u7d44\u6210\u7684\u6a39\u72c0\u7d50\u69cb\uff0c\u9ad8\u968e agent \u5c07\u8907\u96dc\u76ee\u6a19\u62c6\u89e3\u4e26\u5c07\u5b50\u4efb\u52d9\u59d4\u6d3e\u7d66\u4f4e\u968e agent\u3002</li> <li>\u76ee\u6a19\uff1a \u900f\u904e\u905e\u8ff4\u5730\u5c07\u8907\u96dc\u554f\u984c\u5206\u89e3\u70ba\u66f4\u7c21\u55ae\u3001\u53ef\u57f7\u884c\u7684\u6b65\u9a5f\u4f86\u89e3\u6c7a\u554f\u984c\u3002</li> <li>\u4f7f\u7528\u7684 Agent Development Kit (ADK) \u539f\u8a9e\uff1a<ul> <li>\u968e\u5c64\u7d50\u69cb\uff1a \u591a\u5c64 <code>parent_agent</code>/<code>sub_agents</code> \u7d50\u69cb\u3002</li> <li>\u4e92\u52d5\u65b9\u5f0f\uff1a \u4e3b\u8981\u7531\u7236\u5c64 agent \u63a1\u7528\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u9a45\u52d5\u59d4\u6d3e\u6216\u660e\u78ba\u547c\u53eb\uff08<code>AgentTool</code>\uff09\u4f86\u5206\u6d3e\u4efb\u52d9\u7d66\u5b50 agent\u3002\u7d50\u679c\u6703\u900f\u904e\u5de5\u5177\u56de\u61c9\u6216\u72c0\u614b\u81ea\u4e0b\u800c\u4e0a\u56de\u50b3\u81f3\u968e\u5c64\u4e0a\u5c64\u3002</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Code: Hierarchical Research Task\nfrom google.adk.agents import LlmAgent\nfrom google.adk.tools import agent_tool\n\n# Low-level tool-like agents\nweb_searcher = LlmAgent(name=\"WebSearch\", description=\"Performs web searches for facts.\")\nsummarizer = LlmAgent(name=\"Summarizer\", description=\"Summarizes text.\")\n\n# Mid-level agent combining tools\nresearch_assistant = LlmAgent(\n    name=\"ResearchAssistant\",\n    model=\"gemini-2.0-flash\",\n    description=\"Finds and summarizes information on a topic.\",\n    tools=[agent_tool.AgentTool(agent=web_searcher), agent_tool.AgentTool(agent=summarizer)]\n)\n\n# High-level agent delegating research\nreport_writer = LlmAgent(\n    name=\"ReportWriter\",\n    model=\"gemini-2.0-flash\",\n    instruction=\"Write a report on topic X. Use the ResearchAssistant to gather information.\",\n    tools=[agent_tool.AgentTool(agent=research_assistant)]\n    # Alternatively, could use LLM Transfer if research_assistant is a sub_agent\n)\n# User interacts with ReportWriter.\n# ReportWriter calls ResearchAssistant tool.\n# ResearchAssistant calls WebSearch and Summarizer tools.\n# Results flow back up.\n</code></pre> <pre><code>// Conceptual Code: Hierarchical Research Task\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.tools.AgentTool;\n\n// Low-level tool-like agents\nLlmAgent webSearcher = LlmAgent.builder()\n    .name(\"WebSearch\")\n    .description(\"Performs web searches for facts.\")\n    .build();\n\nLlmAgent summarizer = LlmAgent.builder()\n    .name(\"Summarizer\")\n    .description(\"Summarizes text.\")\n    .build();\n\n// Mid-level agent combining tools\nLlmAgent researchAssistant = LlmAgent.builder()\n    .name(\"ResearchAssistant\")\n    .model(\"gemini-2.0-flash\")\n    .description(\"Finds and summarizes information on a topic.\")\n    .tools(AgentTool.create(webSearcher), AgentTool.create(summarizer))\n    .build();\n\n// High-level agent delegating research\nLlmAgent reportWriter = LlmAgent.builder()\n    .name(\"ReportWriter\")\n    .model(\"gemini-2.0-flash\")\n    .instruction(\"Write a report on topic X. Use the ResearchAssistant to gather information.\")\n    .tools(AgentTool.create(researchAssistant))\n    // Alternatively, could use LLM Transfer if research_assistant is a subAgent\n    .build();\n\n// User interacts with ReportWriter.\n// ReportWriter calls ResearchAssistant tool.\n// ResearchAssistant calls WebSearch and Summarizer tools.\n// Results flow back up.\n</code></pre>"},{"location":"agents/multi-agents/#reviewcritique-pattern-","title":"Review/Critique Pattern\uff08\u751f\u6210\u8005-\u8a55\u8ad6\u8005\uff09","text":"<ul> <li>\u7d50\u69cb\uff1a \u901a\u5e38\u5728<code>SequentialAgent</code>\u4e2d\u5305\u542b\u5169\u500b agent\uff1a\u4e00\u500b Generator\uff08\u751f\u6210\u8005\uff09\u548c\u4e00\u500b Critic/Reviewer\uff08\u8a55\u8ad6\u8005\uff0f\u5be9\u67e5\u8005\uff09\u3002</li> <li>\u76ee\u6a19\uff1a \u900f\u904e\u5c08\u9580\u7684 agent \u9032\u884c\u5be9\u67e5\uff0c\u4ee5\u63d0\u5347\u751f\u6210\u5167\u5bb9\u7684\u54c1\u8cea\u6216\u6709\u6548\u6027\u3002</li> <li>\u6240\u4f7f\u7528\u7684 Agent Development Kit (ADK) \u539f\u8a9e\uff1a<ul> <li>Workflow\uff1a <code>SequentialAgent</code> \u78ba\u4fdd\u751f\u6210\u6b65\u9a5f\u5148\u65bc\u5be9\u67e5\u6b65\u9a5f\u57f7\u884c\u3002</li> <li>Communication\uff1a Shared Session State\uff08Generator \u4f7f\u7528 <code>output_key</code> \u5132\u5b58\u8f38\u51fa\uff1bReviewer \u8b80\u53d6\u8a72 state key\uff09\u3002Reviewer \u4e5f\u53ef\u80fd\u5c07\u5176\u56de\u994b\u5132\u5b58\u5230\u53e6\u4e00\u500b state key\uff0c\u4f9b\u5f8c\u7e8c\u6b65\u9a5f\u4f7f\u7528\u3002</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Code: Generator-Critic\nfrom google.adk.agents import SequentialAgent, LlmAgent\n\ngenerator = LlmAgent(\n    name=\"DraftWriter\",\n    instruction=\"Write a short paragraph about subject X.\",\n    output_key=\"draft_text\"\n)\n\nreviewer = LlmAgent(\n    name=\"FactChecker\",\n    instruction=\"Review the text in {draft_text} for factual accuracy. Output 'valid' or 'invalid' with reasons.\",\n    output_key=\"review_status\"\n)\n\n# Optional: Further steps based on review_status\n\nreview_pipeline = SequentialAgent(\n    name=\"WriteAndReview\",\n    sub_agents=[generator, reviewer]\n)\n# generator runs -&gt; saves draft to state['draft_text']\n# reviewer runs -&gt; reads state['draft_text'], saves status to state['review_status']\n</code></pre> <pre><code>// Conceptual Code: Generator-Critic\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.SequentialAgent;\n\nLlmAgent generator = LlmAgent.builder()\n    .name(\"DraftWriter\")\n    .instruction(\"Write a short paragraph about subject X.\")\n    .outputKey(\"draft_text\")\n    .build();\n\nLlmAgent reviewer = LlmAgent.builder()\n    .name(\"FactChecker\")\n    .instruction(\"Review the text in {draft_text} for factual accuracy. Output 'valid' or 'invalid' with reasons.\")\n    .outputKey(\"review_status\")\n    .build();\n\n// Optional: Further steps based on review_status\n\nSequentialAgent reviewPipeline = SequentialAgent.builder()\n    .name(\"WriteAndReview\")\n    .subAgents(generator, reviewer)\n    .build();\n\n// generator runs -&gt; saves draft to state['draft_text']\n// reviewer runs -&gt; reads state['draft_text'], saves status to state['review_status']\n</code></pre>"},{"location":"agents/multi-agents/#iterative-refinement-pattern","title":"\u53cd\u8986\u7cbe\u7149\u6a21\u5f0f\uff08Iterative Refinement Pattern\uff09","text":"<ul> <li>\u7d50\u69cb\uff1a \u4f7f\u7528\u4e00\u500b <code>LoopAgent</code>\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u500b\u6216\u591a\u500b agent\uff0c\u9019\u4e9b agent \u6703\u5728\u591a\u6b21\u8fed\u4ee3\u4e2d\u8655\u7406\u4efb\u52d9\u3002</li> <li>\u76ee\u6a19\uff1a \u6301\u7e8c\u512a\u5316\u5132\u5b58\u5728 session state \u4e2d\u7684\u7d50\u679c\uff08\u4f8b\u5982\uff1a\u7a0b\u5f0f\u78bc\u3001\u6587\u5b57\u3001\u8a08\u756b\uff09\uff0c\u76f4\u5230\u9054\u5230\u54c1\u8cea\u9580\u6abb\u6216\u9054\u5230\u6700\u5927\u8fed\u4ee3\u6b21\u6578\u70ba\u6b62\u3002</li> <li>\u4f7f\u7528\u7684 Agent Development Kit (ADK) \u539f\u8a9e\uff1a<ul> <li>\u5de5\u4f5c\u6d41\u7a0b\uff08Workflow\uff09\uff1a <code>LoopAgent</code> \u8ca0\u8cac\u7ba1\u7406\u91cd\u8907\u57f7\u884c\u3002</li> <li>\u901a\u8a0a\uff08Communication\uff09\uff1a \u5171\u7528 session state \u5c0d\u65bc agent \u4f86\u8aaa\u81f3\u95dc\u91cd\u8981\uff0c\u56e0\u70ba agent \u9700\u8981\u8b80\u53d6\u524d\u4e00\u6b21\u8fed\u4ee3\u7684\u8f38\u51fa\u4e26\u5132\u5b58\u7cbe\u7149\u5f8c\u7684\u7248\u672c\u3002</li> <li>\u7d42\u6b62\u689d\u4ef6\uff08Termination\uff09\uff1a \u9019\u500b\u8ff4\u5708\u901a\u5e38\u6703\u6839\u64da <code>max_iterations</code>\uff0c\u6216\u7531\u5c08\u9580\u7684\u6aa2\u67e5 agent \u5728 <code>Event Actions</code> \u4e2d\u8a2d\u5b9a <code>escalate=True</code> \u7576\u7d50\u679c\u4ee4\u4eba\u6eff\u610f\u6642\u7d50\u675f\u3002</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Code: Iterative Code Refinement\nfrom google.adk.agents import LoopAgent, LlmAgent, BaseAgent\nfrom google.adk.events import Event, EventActions\nfrom google.adk.agents.invocation_context import InvocationContext\nfrom typing import AsyncGenerator\n\n# Agent to generate/refine code based on state['current_code'] and state['requirements']\ncode_refiner = LlmAgent(\n    name=\"CodeRefiner\",\n    instruction=\"Read state['current_code'] (if exists) and state['requirements']. Generate/refine Python code to meet requirements. Save to state['current_code'].\",\n    output_key=\"current_code\" # Overwrites previous code in state\n)\n\n# Agent to check if the code meets quality standards\nquality_checker = LlmAgent(\n    name=\"QualityChecker\",\n    instruction=\"Evaluate the code in state['current_code'] against state['requirements']. Output 'pass' or 'fail'.\",\n    output_key=\"quality_status\"\n)\n\n# Custom agent to check the status and escalate if 'pass'\nclass CheckStatusAndEscalate(BaseAgent):\n    async def _run_async_impl(self, ctx: InvocationContext) -&gt; AsyncGenerator[Event, None]:\n        status = ctx.session.state.get(\"quality_status\", \"fail\")\n        should_stop = (status == \"pass\")\n        yield Event(author=self.name, actions=EventActions(escalate=should_stop))\n\nrefinement_loop = LoopAgent(\n    name=\"CodeRefinementLoop\",\n    max_iterations=5,\n    sub_agents=[code_refiner, quality_checker, CheckStatusAndEscalate(name=\"StopChecker\")]\n)\n# Loop runs: Refiner -&gt; Checker -&gt; StopChecker\n# State['current_code'] is updated each iteration.\n# Loop stops if QualityChecker outputs 'pass' (leading to StopChecker escalating) or after 5 iterations.\n</code></pre> <p>\uff08Java \u5167\u5bb9\uff09</p> <pre><code>```java\n// Conceptual Code: Iterative Code Refinement\nimport com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.LoopAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.events.EventActions;\nimport com.google.adk.agents.InvocationContext;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.util.List;\n\n// Agent to generate/refine code based on state['current_code'] and state['requirements']\nLlmAgent codeRefiner = LlmAgent.builder()\n    .name(\"CodeRefiner\")\n    .instruction(\"Read state['current_code'] (if exists) and state['requirements']. Generate/refine Java code to meet requirements. Save to state['current_code'].\")\n    .outputKey(\"current_code\") // Overwrites previous code in state\n    .build();\n\n// Agent to check if the code meets quality standards\nLlmAgent qualityChecker = LlmAgent.builder()\n    .name(\"QualityChecker\")\n    .instruction(\"Evaluate the code in state['current_code'] against state['requirements']. Output 'pass' or 'fail'.\")\n    .outputKey(\"quality_status\")\n    .build();\n\nBaseAgent checkStatusAndEscalate = new BaseAgent(\n    \"StopChecker\",\"Checks quality_status and escalates if 'pass'.\", List.of(), null, null) {\n\n  @Override\n  protected Flowable&lt;Event&gt; runAsyncImpl(InvocationContext invocationContext) {\n    String status = (String) invocationContext.session().state().getOrDefault(\"quality_status\", \"fail\");\n    boolean shouldStop = \"pass\".equals(status);\n\n    EventActions actions = EventActions.builder().escalate(shouldStop).build();\n    Event event = Event.builder()\n        .author(this.name())\n        .actions(actions)\n        .build();\n    return Flowable.just(event);\n  }\n};\n\nLoopAgent refinementLoop = LoopAgent.builder()\n    .name(\"CodeRefinementLoop\")\n    .maxIterations(5)\n    .subAgents(codeRefiner, qualityChecker, checkStatusAndEscalate)\n    .build();\n\n// Loop runs: Refiner -&gt; Checker -&gt; StopChecker\n// State['current_code'] is updated each iteration.\n// Loop stops if QualityChecker outputs 'pass' (leading to StopChecker escalating) or after 5\n// iterations.\n```\n</code></pre>"},{"location":"agents/multi-agents/#human-in-the-loop","title":"Human-in-the-Loop \u6a21\u5f0f","text":"<ul> <li>\u7d50\u69cb\uff08Structure\uff09\uff1a \u5728 agent \u5de5\u4f5c\u6d41\u7a0b\u4e2d\u6574\u5408\u4eba\u5de5\u4ecb\u5165\u9ede\u3002</li> <li>\u76ee\u6a19\uff08Goal\uff09\uff1a \u5141\u8a31\u4eba\u5de5\u76e3\u7763\u3001\u5be9\u6838\u3001\u4fee\u6b63\uff0c\u6216\u8655\u7406 AI \u7121\u6cd5\u57f7\u884c\u7684\u4efb\u52d9\u3002</li> <li>\u6240\u7528\u7684 Agent Development Kit (ADK) \u539f\u8a9e\uff08\u6982\u5ff5\u6027\uff09\uff1a<ul> <li>\u4e92\u52d5\uff08Interaction\uff09\uff1a \u53ef\u900f\u904e\u81ea\u8a02\u7684 Tool \u5be6\u4f5c\uff0c\u8a72\u5de5\u5177\u6703\u66ab\u505c\u57f7\u884c\uff0c\u4e26\u5411\u5916\u90e8\u7cfb\u7d71\uff08\u4f8b\u5982 UI\u3001\u5de5\u55ae\u7cfb\u7d71\uff09\u767c\u9001\u8acb\u6c42\uff0c\u7b49\u5f85\u4eba\u5de5\u8f38\u5165\u3002\u8a72\u5de5\u5177\u518d\u5c07\u4eba\u5de5\u56de\u61c9\u50b3\u56de agent\u3002</li> <li>\u5de5\u4f5c\u6d41\u7a0b\uff08Workflow\uff09\uff1a \u53ef\u4ee5\u4f7f\u7528 LLM-Driven Delegation\uff08<code>transfer_to_agent</code>\uff09\uff0c\u76ee\u6a19\u70ba\u6982\u5ff5\u4e0a\u7684\u300cHuman Agent\u300d\uff0c\u4ee5\u89f8\u767c\u5916\u90e8\u5de5\u4f5c\u6d41\u7a0b\uff0c\u6216\u5728 <code>LlmAgent</code> \u4e2d\u4f7f\u7528\u81ea\u8a02\u5de5\u5177\u3002</li> <li>\u72c0\u614b\uff0fCallbacks\uff1a \u72c0\u614b\u53ef\u4fdd\u5b58\u7d66\u4eba\u5de5\u8655\u7406\u7684\u4efb\u52d9\u7d30\u7bc0\uff1bCallbacks \u53ef\u7ba1\u7406\u4e92\u52d5\u6d41\u7a0b\u3002</li> <li>\u6ce8\u610f\uff1a Agent Development Kit (ADK) \u6c92\u6709\u5167\u5efa\u7684\u300cHuman Agent\u300d\u578b\u5225\uff0c\u56e0\u6b64\u9700\u8981\u81ea\u8a02\u6574\u5408\u3002</li> </ul> </li> </ul> PythonJava <pre><code># Conceptual Code: Using a Tool for Human Approval\nfrom google.adk.agents import LlmAgent, SequentialAgent\nfrom google.adk.tools import FunctionTool\n\n# --- Assume external_approval_tool exists ---\n# This tool would:\n# 1. Take details (e.g., request_id, amount, reason).\n# 2. Send these details to a human review system (e.g., via API).\n# 3. Poll or wait for the human response (approved/rejected).\n# 4. Return the human's decision.\n# async def external_approval_tool(amount: float, reason: str) -&gt; str: ...\napproval_tool = FunctionTool(func=external_approval_tool)\n\n# Agent that prepares the request\nprepare_request = LlmAgent(\n    name=\"PrepareApproval\",\n    instruction=\"Prepare the approval request details based on user input. Store amount and reason in state.\",\n    # ... likely sets state['approval_amount'] and state['approval_reason'] ...\n)\n\n# Agent that calls the human approval tool\nrequest_approval = LlmAgent(\n    name=\"RequestHumanApproval\",\n    instruction=\"Use the external_approval_tool with amount from state['approval_amount'] and reason from state['approval_reason'].\",\n    tools=[approval_tool],\n    output_key=\"human_decision\"\n)\n\n# Agent that proceeds based on human decision\nprocess_decision = LlmAgent(\n    name=\"ProcessDecision\",\n    instruction=\"Check {human_decision}. If 'approved', proceed. If 'rejected', inform user.\"\n)\n\napproval_workflow = SequentialAgent(\n    name=\"HumanApprovalWorkflow\",\n    sub_agents=[prepare_request, request_approval, process_decision]\n)\n</code></pre> <pre><code>// Conceptual Code: Using a Tool for Human Approval\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.SequentialAgent;\nimport com.google.adk.tools.FunctionTool;\n\n// --- Assume external_approval_tool exists ---\n// This tool would:\n// 1. Take details (e.g., request_id, amount, reason).\n// 2. Send these details to a human review system (e.g., via API).\n// 3. Poll or wait for the human response (approved/rejected).\n// 4. Return the human's decision.\n// public boolean externalApprovalTool(float amount, String reason) { ... }\nFunctionTool approvalTool = FunctionTool.create(externalApprovalTool);\n\n// Agent that prepares the request\nLlmAgent prepareRequest = LlmAgent.builder()\n    .name(\"PrepareApproval\")\n    .instruction(\"Prepare the approval request details based on user input. Store amount and reason in state.\")\n    // ... likely sets state['approval_amount'] and state['approval_reason'] ...\n    .build();\n\n// Agent that calls the human approval tool\nLlmAgent requestApproval = LlmAgent.builder()\n    .name(\"RequestHumanApproval\")\n    .instruction(\"Use the external_approval_tool with amount from state['approval_amount'] and reason from state['approval_reason'].\")\n    .tools(approvalTool)\n    .outputKey(\"human_decision\")\n    .build();\n\n// Agent that proceeds based on human decision\nLlmAgent processDecision = LlmAgent.builder()\n    .name(\"ProcessDecision\")\n    .instruction(\"Check {human_decision}. If 'approved', proceed. If 'rejected', inform user.\")\n    .build();\n\nSequentialAgent approvalWorkflow = SequentialAgent.builder()\n    .name(\"HumanApprovalWorkflow\")\n    .subAgents(prepareRequest, requestApproval, processDecision)\n    .build();\n</code></pre> <p>\u9019\u4e9b\u6a21\u5f0f\u70ba\u4f60\u67b6\u69cb\u591a agent \u7cfb\u7d71\u63d0\u4f9b\u4e86\u8d77\u9ede\u3002\u4f60\u53ef\u4ee5\u6839\u64da\u9700\u6c42\u81ea\u7531\u7d44\u5408\u9019\u4e9b\u6a21\u5f0f\uff0c\u4ee5\u6253\u9020\u6700\u9069\u5408\u4f60\u7279\u5b9a\u61c9\u7528\u7684\u67b6\u69cb\u3002</p>"},{"location":"agents/workflow-agents/","title":"Workflow Agents","text":"<p>\u672c\u7bc0\u4ecb\u7d39\u300cworkflow agents\uff08\u5de5\u4f5c\u6d41\u7a0b agent\uff09\u300d\u2014\u2014\u5c08\u9580\u7528\u65bc\u63a7\u5236\u5176\u5b50 agent \u57f7\u884c\u6d41\u7a0b\u7684\u7279\u6b8a agent\u3002</p> <p>Workflow agents\uff08\u5de5\u4f5c\u6d41\u7a0b agent\uff09\u662f Agent Development Kit (ADK) \u4e2d\u5c08\u70ba\u5354\u8abf\u5b50 agent \u57f7\u884c\u6d41\u7a0b\u800c\u8a2d\u8a08\u7684\u5c08\u7528\u5143\u4ef6\u3002\u5b83\u5011\u7684\u4e3b\u8981\u8077\u8cac\u662f\u7ba1\u7406\u5176\u4ed6 agent \u7684\u57f7\u884c\u6642\u6a5f\u8207\u65b9\u5f0f\uff0c\u4e5f\u5c31\u662f\u5b9a\u7fa9\u4e00\u500b\u6d41\u7a0b\u7684\u63a7\u5236\u6d41\u3002</p> <p>\u8207LLM Agents\uff08\u5229\u7528\u5927\u578b\u8a9e\u8a00\u6a21\u578b (Large Language Model, LLM) \u9032\u884c\u52d5\u614b\u63a8\u7406\u8207\u6c7a\u7b56\uff09\u4e0d\u540c\uff0cWorkflow Agents\uff08\u5de5\u4f5c\u6d41\u7a0b agent\uff09\u662f\u6839\u64da\u9810\u5148\u5b9a\u7fa9\u7684\u908f\u8f2f\u904b\u4f5c\u3002\u5b83\u5011\u6703\u4f9d\u64da\u81ea\u8eab\u7684\u985e\u578b\uff08\u4f8b\u5982\uff1a\u9806\u5e8f\u3001\u8ff4\u5708\u3001\u5e73\u884c\uff09\u4f86\u6c7a\u5b9a\u57f7\u884c\u9806\u5e8f\uff0c\u800c\u4e0d\u6703\u5728\u5354\u8abf\u904e\u7a0b\u4e2d\u8aee\u8a62 LLM\u3002\u56e0\u6b64\uff0cWorkflow Agents \u80fd\u5920\u5be6\u73fe\u53ef\u9810\u671f\u4e14\u5177\u6c7a\u5b9a\u6027\u7684\u57f7\u884c\u6a21\u5f0f\u3002</p> <p>ADK \u63d0\u4f9b\u4e86\u4e09\u7a2e\u6838\u5fc3\u7684 workflow agent\uff08\u5de5\u4f5c\u6d41\u7a0b agent\uff09\u985e\u578b\uff0c\u6bcf\u4e00\u7a2e\u90fd\u5be6\u73fe\u4e86\u4e0d\u540c\u7684\u57f7\u884c\u6a21\u5f0f\uff1a</p> <ul> <li> <p> Sequential Agents\uff08\u9806\u5e8f agent\uff09</p> <p>\u4f9d\u9806\u5e8f\u9010\u4e00\u57f7\u884c\u5b50 agent\u3002</p> <p> \u9032\u4e00\u6b65\u4e86\u89e3</p> </li> <li> <p> Loop Agents\uff08\u8ff4\u5708 agent\uff09</p> <p>\u91cd\u8907\u57f7\u884c\u5176\u5b50 agent\uff0c\u76f4\u5230\u7b26\u5408\u7279\u5b9a\u7d42\u6b62\u689d\u4ef6\u70ba\u6b62\u3002</p> <p> \u9032\u4e00\u6b65\u4e86\u89e3</p> </li> <li> <p> Parallel Agents\uff08\u5e73\u884c agent\uff09</p> <p>\u540c\u6642\u5e73\u884c\u57f7\u884c\u591a\u500b\u5b50 agent\u3002</p> <p> \u9032\u4e00\u6b65\u4e86\u89e3</p> </li> </ul>"},{"location":"agents/workflow-agents/#workflow-agents_1","title":"\u70ba\u4ec0\u9ebc\u8981\u4f7f\u7528 Workflow Agents\uff1f","text":"<p>\u7576\u4f60\u9700\u8981\u660e\u78ba\u63a7\u5236\u4e00\u7cfb\u5217\u4efb\u52d9\u6216 agent \u7684\u57f7\u884c\u65b9\u5f0f\u6642\uff0cWorkflow agents\uff08\u5de5\u4f5c\u6d41\u7a0b agent\uff09\u5c31\u986f\u5f97\u4e0d\u53ef\u6216\u7f3a\u3002\u5b83\u5011\u5e36\u4f86\uff1a</p> <ul> <li>\u53ef\u9810\u671f\u6027\uff1a \u6839\u64da agent \u985e\u578b\u8207\u8a2d\u5b9a\uff0c\u57f7\u884c\u6d41\u7a0b\u6709\u660e\u78ba\u4fdd\u8b49\u3002</li> <li>\u53ef\u9760\u6027\uff1a \u78ba\u4fdd\u4efb\u52d9\u59cb\u7d42\u4ee5\u6240\u9700\u7684\u9806\u5e8f\u6216\u6a21\u5f0f\u57f7\u884c\u3002</li> <li>\u7d50\u69cb\u6027\uff1a \u900f\u904e\u6e05\u6670\u7684\u63a7\u5236\u7d50\u69cb\u7d44\u5408 agent\uff0c\u8b93\u4f60\u80fd\u5920\u69cb\u5efa\u8907\u96dc\u7684\u6d41\u7a0b\u3002</li> </ul> <p>\u96d6\u7136 workflow agent\uff08\u5de5\u4f5c\u6d41\u7a0b agent\uff09\u4ee5\u6c7a\u5b9a\u6027\u65b9\u5f0f\u7ba1\u7406\u63a7\u5236\u6d41\uff0c\u4f46\u5176\u6240\u5354\u8abf\u7684\u5b50 agent \u53ef\u4ee5\u662f\u4efb\u4f55\u985e\u578b\u7684 agent\uff0c\u5305\u62ec\u667a\u6167\u578b\u7684 LLM Agent \u5be6\u4f8b\u3002\u9019\u8b93\u4f60\u80fd\u5c07\u7d50\u69cb\u5316\u7684\u6d41\u7a0b\u63a7\u5236\u8207\u5f48\u6027\u7684 LLM \u4efb\u52d9\u57f7\u884c\u9748\u6d3b\u7d50\u5408\u3002</p>"},{"location":"agents/workflow-agents/index.en/","title":"Workflow Agents","text":"<p>This section introduces \"workflow agents\" - specialized agents that control the execution flow of its sub-agents.  </p> <p>Workflow agents are specialized components in ADK designed purely for orchestrating the execution flow of sub-agents. Their primary role is to manage how and when other agents run, defining the control flow of a process.</p> <p>Unlike LLM Agents, which use Large Language Models for dynamic reasoning and decision-making, Workflow Agents operate based on predefined logic. They determine the execution sequence according to their type (e.g., sequential, parallel, loop) without consulting an LLM for the orchestration itself. This results in deterministic and predictable execution patterns.</p> <p>ADK provides three core workflow agent types, each implementing a distinct execution pattern:</p> <ul> <li> <p> Sequential Agents</p> <p>Executes sub-agents one after another, in sequence.</p> <p> Learn more</p> </li> <li> <p> Loop Agents</p> <p>Repeatedly executes its sub-agents until a specific termination condition is met.</p> <p> Learn more</p> </li> <li> <p> Parallel Agents</p> <p>Executes multiple sub-agents in parallel.</p> <p> Learn more</p> </li> </ul>"},{"location":"agents/workflow-agents/index.en/#why-use-workflow-agents","title":"Why Use Workflow Agents?","text":"<p>Workflow agents are essential when you need explicit control over how a series of tasks or agents are executed. They provide:</p> <ul> <li>Predictability: The flow of execution is guaranteed based on the agent type and configuration.</li> <li>Reliability: Ensures tasks run in the required order or pattern consistently.</li> <li>Structure: Allows you to build complex processes by composing agents within clear control structures.</li> </ul> <p>While the workflow agent manages the control flow deterministically, the sub-agents it orchestrates can themselves be any type of agent, including intelligent LLM Agent instances. This allows you to combine structured process control with flexible, LLM-powered task execution.</p>"},{"location":"agents/workflow-agents/loop-agents.en/","title":"Loop agents","text":""},{"location":"agents/workflow-agents/loop-agents.en/#the-loopagent","title":"The <code>LoopAgent</code>","text":"<p>The <code>LoopAgent</code> is a workflow agent that executes its sub-agents in a loop (i.e. iteratively). It repeatedly runs a sequence of agents for a specified number of iterations or until a termination condition is met.</p> <p>Use the <code>LoopAgent</code> when your workflow involves repetition or iterative refinement, such as revising code.</p>"},{"location":"agents/workflow-agents/loop-agents.en/#example","title":"Example","text":"<ul> <li>You want to build an agent that can generate images of food, but sometimes when you want to generate a specific number of items (e.g. 5 bananas), it generates a different number of those items in the image (e.g. an image of 7 bananas). You have two tools: <code>Generate Image</code>, <code>Count Food Items</code>. Because you want to keep generating images until it either correctly generates the specified number of items, or after a certain number of iterations, you should build your agent using a <code>LoopAgent</code>.</li> </ul> <p>As with other workflow agents, the <code>LoopAgent</code> is not powered by an LLM, and is thus deterministic in how it executes. That being said, workflow agents are only concerned only with their execution (i.e. in a loop), and not their internal logic; the tools or sub-agents of a workflow agent may or may not utilize LLMs.</p>"},{"location":"agents/workflow-agents/loop-agents.en/#how-it-works","title":"How it Works","text":"<p>When the <code>LoopAgent</code>'s <code>Run Async</code> method is called, it performs the following actions:</p> <ol> <li>Sub-Agent Execution:  It iterates through the Sub Agents list in order. For each sub-agent, it calls the agent's <code>Run Async</code> method.</li> <li> <p>Termination Check:</p> <p>Crucially, the <code>LoopAgent</code> itself does not inherently decide when to stop looping. You must implement a termination mechanism to prevent infinite loops.  Common strategies include:</p> <ul> <li>Max Iterations: Set a maximum number of iterations in the <code>LoopAgent</code>. The loop will terminate after that many iterations.</li> <li>Escalation from sub-agent: Design one or more sub-agents to evaluate a condition (e.g., \"Is the document quality good enough?\", \"Has a consensus been reached?\").  If the condition is met, the sub-agent can signal termination (e.g., by raising a custom event, setting a flag in a shared context, or returning a specific value).</li> </ul> </li> </ol> <p></p>"},{"location":"agents/workflow-agents/loop-agents.en/#full-example-iterative-document-improvement","title":"Full Example: Iterative Document Improvement","text":"<p>Imagine a scenario where you want to iteratively improve a document:</p> <ul> <li>Writer Agent: An <code>LlmAgent</code> that generates or refines a draft on a topic.</li> <li> <p>Critic Agent: An <code>LlmAgent</code> that critiques the draft, identifying areas for improvement.</p> <pre><code>LoopAgent(sub_agents=[WriterAgent, CriticAgent], max_iterations=5)\n</code></pre> </li> </ul> <p>In this setup, the <code>LoopAgent</code> would manage the iterative process.  The <code>CriticAgent</code> could be designed to return a \"STOP\" signal when the document reaches a satisfactory quality level, preventing further iterations. Alternatively, the <code>max iterations</code> parameter could be used to limit the process to a fixed number of cycles, or external logic could be implemented to make stop decisions. The loop would run at most five times, ensuring the iterative refinement doesn't continue indefinitely.</p> Full Code PythonJava <pre><code># Part of agent.py --&gt; Follow https://google.github.io/adk-docs/get-started/quickstart/ to learn the setup\n\nimport asyncio\nimport os\nfrom google.adk.agents import LoopAgent, LlmAgent, BaseAgent, SequentialAgent\nfrom google.genai import types\nfrom google.adk.runners import InMemoryRunner\nfrom google.adk.agents.invocation_context import InvocationContext\nfrom google.adk.tools.tool_context import ToolContext\nfrom typing import AsyncGenerator, Optional\nfrom google.adk.events import Event, EventActions\n\n# --- Constants ---\nAPP_NAME = \"doc_writing_app_v3\" # New App Name\nUSER_ID = \"dev_user_01\"\nSESSION_ID_BASE = \"loop_exit_tool_session\" # New Base Session ID\nGEMINI_MODEL = \"gemini-2.0-flash\"\nSTATE_INITIAL_TOPIC = \"initial_topic\"\n\n# --- State Keys ---\nSTATE_CURRENT_DOC = \"current_document\"\nSTATE_CRITICISM = \"criticism\"\n# Define the exact phrase the Critic should use to signal completion\nCOMPLETION_PHRASE = \"No major issues found.\"\n\n# --- Tool Definition ---\ndef exit_loop(tool_context: ToolContext):\n  \"\"\"Call this function ONLY when the critique indicates no further changes are needed, signaling the iterative process should end.\"\"\"\n  print(f\"  [Tool Call] exit_loop triggered by {tool_context.agent_name}\")\n  tool_context.actions.escalate = True\n  # Return empty dict as tools should typically return JSON-serializable output\n  return {}\n\n# --- Agent Definitions ---\n\n# STEP 1: Initial Writer Agent (Runs ONCE at the beginning)\ninitial_writer_agent = LlmAgent(\n    name=\"InitialWriterAgent\",\n    model=GEMINI_MODEL,\n    include_contents='none',\n    # MODIFIED Instruction: Ask for a slightly more developed start\n    instruction=f\"\"\"You are a Creative Writing Assistant tasked with starting a story.\n    Write the *first draft* of a short story (aim for 2-4 sentences).\n    Base the content *only* on the topic provided below. Try to introduce a specific element (like a character, a setting detail, or a starting action) to make it engaging.\n    Topic: {{initial_topic}}\n\n    Output *only* the story/document text. Do not add introductions or explanations.\n\"\"\",\n    description=\"Writes the initial document draft based on the topic, aiming for some initial substance.\",\n    output_key=STATE_CURRENT_DOC\n)\n\n# STEP 2a: Critic Agent (Inside the Refinement Loop)\ncritic_agent_in_loop = LlmAgent(\n    name=\"CriticAgent\",\n    model=GEMINI_MODEL,\n    include_contents='none',\n    # MODIFIED Instruction: More nuanced completion criteria, look for clear improvement paths.\n    instruction=f\"\"\"You are a Constructive Critic AI reviewing a short document draft (typically 2-6 sentences). Your goal is balanced feedback.\n\n    **Document to Review:**\n    ```\n    {{current_document}}\n    ```\n\n    **Task:**\n    Review the document for clarity, engagement, and basic coherence according to the initial topic (if known).\n\n    IF you identify 1-2 *clear and actionable* ways the document could be improved to better capture the topic or enhance reader engagement (e.g., \"Needs a stronger opening sentence\", \"Clarify the character's goal\"):\n    Provide these specific suggestions concisely. Output *only* the critique text.\n\n    ELSE IF the document is coherent, addresses the topic adequately for its length, and has no glaring errors or obvious omissions:\n    Respond *exactly* with the phrase \"{COMPLETION_PHRASE}\" and nothing else. It doesn't need to be perfect, just functionally complete for this stage. Avoid suggesting purely subjective stylistic preferences if the core is sound.\n\n    Do not add explanations. Output only the critique OR the exact completion phrase.\n\"\"\",\n    description=\"Reviews the current draft, providing critique if clear improvements are needed, otherwise signals completion.\",\n    output_key=STATE_CRITICISM\n)\n\n\n# STEP 2b: Refiner/Exiter Agent (Inside the Refinement Loop)\nrefiner_agent_in_loop = LlmAgent(\n    name=\"RefinerAgent\",\n    model=GEMINI_MODEL,\n    # Relies solely on state via placeholders\n    include_contents='none',\n    instruction=f\"\"\"You are a Creative Writing Assistant refining a document based on feedback OR exiting the process.\n    **Current Document:**\n    ```\n    {{current_document}}\n    ```\n    **Critique/Suggestions:**\n    {{criticism}}\n\n    **Task:**\n    Analyze the 'Critique/Suggestions'.\n    IF the critique is *exactly* \"{COMPLETION_PHRASE}\":\n    You MUST call the 'exit_loop' function. Do not output any text.\n    ELSE (the critique contains actionable feedback):\n    Carefully apply the suggestions to improve the 'Current Document'. Output *only* the refined document text.\n\n    Do not add explanations. Either output the refined document OR call the exit_loop function.\n\"\"\",\n    description=\"Refines the document based on critique, or calls exit_loop if critique indicates completion.\",\n    tools=[exit_loop], # Provide the exit_loop tool\n    output_key=STATE_CURRENT_DOC # Overwrites state['current_document'] with the refined version\n)\n\n\n# STEP 2: Refinement Loop Agent\nrefinement_loop = LoopAgent(\n    name=\"RefinementLoop\",\n    # Agent order is crucial: Critique first, then Refine/Exit\n    sub_agents=[\n        critic_agent_in_loop,\n        refiner_agent_in_loop,\n    ],\n    max_iterations=5 # Limit loops\n)\n\n# STEP 3: Overall Sequential Pipeline\n# For ADK tools compatibility, the root agent must be named `root_agent`\nroot_agent = SequentialAgent(\n    name=\"IterativeWritingPipeline\",\n    sub_agents=[\n        initial_writer_agent, # Run first to create initial doc\n        refinement_loop       # Then run the critique/refine loop\n    ],\n    description=\"Writes an initial document and then iteratively refines it with critique using an exit tool.\"\n)\n</code></pre> <pre><code>import static com.google.adk.agents.LlmAgent.IncludeContents.NONE;\n\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.LoopAgent;\nimport com.google.adk.agents.SequentialAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.adk.tools.ToolContext;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.util.Map;\n\npublic class LoopAgentExample {\n\n  // --- Constants ---\n  private static final String APP_NAME = \"IterativeWritingPipeline\";\n  private static final String USER_ID = \"test_user_456\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n\n  // --- State Keys ---\n  private static final String STATE_CURRENT_DOC = \"current_document\";\n  private static final String STATE_CRITICISM = \"criticism\";\n\n  public static void main(String[] args) {\n    LoopAgentExample loopAgentExample = new LoopAgentExample();\n    loopAgentExample.runAgent(\"Write a document about a cat\");\n  }\n\n  // --- Tool Definition ---\n  @Schema(\n      description =\n          \"Call this function ONLY when the critique indicates no further changes are needed,\"\n              + \" signaling the iterative process should end.\")\n  public static Map&lt;String, Object&gt; exitLoop(@Schema(name = \"toolContext\") ToolContext toolContext) {\n    System.out.printf(\"[Tool Call] exitLoop triggered by %s \\n\", toolContext.agentName());\n    toolContext.actions().setEscalate(true);\n    //  Return empty dict as tools should typically return JSON-serializable output\n    return Map.of();\n  }\n\n  // --- Agent Definitions ---\n  public void runAgent(String prompt) {\n    // STEP 1: Initial Writer Agent (Runs ONCE at the beginning)\n    LlmAgent initialWriterAgent =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"InitialWriterAgent\")\n            .description(\n                \"Writes the initial document draft based on the topic, aiming for some initial\"\n                    + \" substance.\")\n            .instruction(\n                \"\"\"\n                    You are a Creative Writing Assistant tasked with starting a story.\n                    Write the *first draft* of a short story (aim for 2-4 sentences).\n                    Base the content *only* on the topic provided below. Try to introduce a specific element (like a character, a setting detail, or a starting action) to make it engaging.\n\n                    Output *only* the story/document text. Do not add introductions or explanations.\n                \"\"\")\n            .outputKey(STATE_CURRENT_DOC)\n            .includeContents(NONE)\n            .build();\n\n    // STEP 2a: Critic Agent (Inside the Refinement Loop)\n    LlmAgent criticAgentInLoop =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"CriticAgent\")\n            .description(\n                \"Reviews the current draft, providing critique if clear improvements are needed,\"\n                    + \" otherwise signals completion.\")\n            .instruction(\n                \"\"\"\n                    You are a Constructive Critic AI reviewing a short document draft (typically 2-6 sentences). Your goal is balanced feedback.\n\n                    **Document to Review:**\n                    ```\n                    {{current_document}}\n                    ```\n\n                    **Task:**\n                    Review the document for clarity, engagement, and basic coherence according to the initial topic (if known).\n\n                    IF you identify 1-2 *clear and actionable* ways the document could be improved to better capture the topic or enhance reader engagement (e.g., \"Needs a stronger opening sentence\", \"Clarify the character's goal\"):\n                    Provide these specific suggestions concisely. Output *only* the critique text.\n\n                    ELSE IF the document is coherent, addresses the topic adequately for its length, and has no glaring errors or obvious omissions:\n                    Respond *exactly* with the phrase \"No major issues found.\" and nothing else. It doesn't need to be perfect, just functionally complete for this stage. Avoid suggesting purely subjective stylistic preferences if the core is sound.\n\n                    Do not add explanations. Output only the critique OR the exact completion phrase.\n                    \"\"\")\n            .outputKey(STATE_CRITICISM)\n            .includeContents(NONE)\n            .build();\n\n    // STEP 2b: Refiner/Exiter Agent (Inside the Refinement Loop)\n    LlmAgent refinerAgentInLoop =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"RefinerAgent\")\n            .description(\n                \"Refines the document based on critique, or calls exitLoop if critique indicates\"\n                    + \" completion.\")\n            .instruction(\n                \"\"\"\n                    You are a Creative Writing Assistant refining a document based on feedback OR exiting the process.\n                    **Current Document:**\n                    ```\n                    {{current_document}}\n                    ```\n                    **Critique/Suggestions:**\n                    {{criticism}}\n\n                    **Task:**\n                    Analyze the 'Critique/Suggestions'.\n                    IF the critique is *exactly* \"No major issues found.\":\n                    You MUST call the 'exitLoop' function. Do not output any text.\n                    ELSE (the critique contains actionable feedback):\n                    Carefully apply the suggestions to improve the 'Current Document'. Output *only* the refined document text.\n\n                    Do not add explanations. Either output the refined document OR call the exitLoop function.\n                \"\"\")\n            .outputKey(STATE_CURRENT_DOC)\n            .includeContents(NONE)\n            .tools(FunctionTool.create(LoopAgentExample.class, \"exitLoop\"))\n            .build();\n\n    // STEP 2: Refinement Loop Agent\n    LoopAgent refinementLoop =\n        LoopAgent.builder()\n            .name(\"RefinementLoop\")\n            .description(\"Repeatedly refines the document with critique and then exits.\")\n            .subAgents(criticAgentInLoop, refinerAgentInLoop)\n            .maxIterations(5)\n            .build();\n\n    // STEP 3: Overall Sequential Pipeline\n    SequentialAgent iterativeWriterAgent =\n        SequentialAgent.builder()\n            .name(APP_NAME)\n            .description(\n                \"Writes an initial document and then iteratively refines it with critique using an\"\n                    + \" exit tool.\")\n            .subAgents(initialWriterAgent, refinementLoop)\n            .build();\n\n    // Create an InMemoryRunner\n    InMemoryRunner runner = new InMemoryRunner(iterativeWriterAgent, APP_NAME);\n    // InMemoryRunner automatically creates a session service. Create a session using the service\n    Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n    Content userMessage = Content.fromParts(Part.fromText(prompt));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre>"},{"location":"agents/workflow-agents/loop-agents/","title":"Loop agents","text":""},{"location":"agents/workflow-agents/loop-agents/#loopagent","title":"<code>LoopAgent</code>","text":"<p><code>LoopAgent</code> \u662f\u4e00\u7a2e workflow agent\uff08\u5de5\u4f5c\u6d41\u7a0b agent\uff09\uff0c\u80fd\u5920\u4ee5\u8ff4\u5708\uff08\u5373\u53cd\u8986\u57f7\u884c\uff09\u7684\u65b9\u5f0f\u57f7\u884c\u5176\u5b50 agent\u3002\u5b83\u6703\u91cd\u8907\u57f7\u884c \u4e00\u9023\u4e32\u7684 agent\uff0c\u76f4\u5230\u9054\u5230\u6307\u5b9a\u7684\u8fed\u4ee3\u6b21\u6578\uff0c\u6216\u6eff\u8db3\u7d42\u6b62\u689d\u4ef6\u70ba\u6b62\u3002</p> <p>\u7576\u4f60\u7684\u5de5\u4f5c\u6d41\u7a0b\u9700\u8981\u91cd\u8907\u57f7\u884c\u6216\u9010\u6b65\u512a\u5316\uff08\u4f8b\u5982\u53cd\u8986\u4fee\u8a02\u7a0b\u5f0f\u78bc\uff09\u6642\uff0c\u8acb\u4f7f\u7528 <code>LoopAgent</code>\u3002</p>"},{"location":"agents/workflow-agents/loop-agents/#_1","title":"\u7bc4\u4f8b","text":"<ul> <li>\u5047\u8a2d\u4f60\u60f3\u5efa\u7acb\u4e00\u500b\u80fd\u5920\u7522\u751f\u98df\u7269\u5716\u7247\u7684 agent\uff0c\u4f46\u6709\u6642\u7576\u4f60\u5e0c\u671b\u7522\u751f\u7279\u5b9a\u6578\u91cf\u7684\u7269\u54c1\uff08\u4f8b\u5982 5 \u6839\u9999\u8549\uff09\u6642\uff0c\u7522\u751f\u7684\u5716\u7247\u537b\u51fa\u73fe\u4e0d\u540c\u6578\u91cf\u7684\u7269\u54c1\uff08\u4f8b\u5982\u51fa\u73fe 7 \u6839\u9999\u8549\uff09\u3002\u4f60\u6709\u5169\u500b\u5de5\u5177\uff1a<code>Generate Image</code>\u3001<code>Count Food Items</code>\u3002\u7531\u65bc\u4f60\u5e0c\u671b\u6301\u7e8c\u7522\u751f\u5716\u7247\uff0c\u76f4\u5230\u6b63\u78ba\u7522\u751f\u6307\u5b9a\u6578\u91cf\u7684\u7269\u54c1\uff0c\u6216\u9054\u5230\u4e00\u5b9a\u7684\u8fed\u4ee3\u6b21\u6578\u70ba\u6b62\uff0c\u56e0\u6b64\u4f60\u61c9\u8a72\u4f7f\u7528 <code>LoopAgent</code> \u4f86\u5efa\u69cb\u4f60\u7684 agent\u3002</li> </ul> <p>\u5982\u540c\u5176\u4ed6workflow agent\uff0c<code>LoopAgent</code> \u4e26\u975e\u7531\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u9a45\u52d5\uff0c\u56e0\u6b64\u5176\u57f7\u884c\u65b9\u5f0f\u662f\u53ef\u9810\u671f\u4e14\u5177\u6c7a\u5b9a\u6027\u7684\u3002\u4e0d\u904e\uff0cworkflow agent \u53ea\u8ca0\u8cac\u57f7\u884c\u6d41\u7a0b\uff08\u4f8b\u5982\u5728\u8ff4\u5708\u4e2d\uff09\uff0c\u800c\u4e0d\u6d89\u53ca\u5167\u90e8\u908f\u8f2f\uff1bworkflow agent \u7684\u5de5\u5177\u6216\u5b50 agent \u53ef\u4ee5\u9078\u64c7\u662f\u5426\u4f7f\u7528\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\u3002</p>"},{"location":"agents/workflow-agents/loop-agents/#_2","title":"\u904b\u4f5c\u65b9\u5f0f","text":"<p>\u7576\u547c\u53eb <code>LoopAgent</code> \u7684 <code>Run Async</code> \u65b9\u6cd5\u6642\uff0c\u6703\u57f7\u884c\u4ee5\u4e0b\u52d5\u4f5c\uff1a</p> <ol> <li>\u5b50 agent \u57f7\u884c\uff1a \u4f9d\u5e8f\u904d\u6b77\u5b50 agent \u6e05\u55ae\u3002\u5c0d\u65bc_\u6bcf\u4e00\u500b_\u5b50 agent\uff0c\u6703\u547c\u53eb\u8a72 agent \u7684 <code>Run Async</code> \u65b9\u6cd5\u3002</li> <li> <p>\u7d42\u6b62\u689d\u4ef6\u6aa2\u67e5\uff1a</p> <p>\u95dc\u9375\u5728\u65bc\uff0c<code>LoopAgent</code> \u672c\u8eab_\u4e0d\u6703_\u81ea\u52d5\u6c7a\u5b9a\u4f55\u6642\u505c\u6b62\u8ff4\u5708\u3002\u4f60_\u5fc5\u9808_\u5be6\u4f5c\u7d42\u6b62\u6a5f\u5236\uff0c\u4ee5\u907f\u514d\u7121\u9650\u8ff4\u5708\u3002\u5e38\u898b\u7b56\u7565\u5305\u62ec\uff1a</p> <ul> <li>\u6700\u5927\u8fed\u4ee3\u6b21\u6578\uff1a \u5728 <code>LoopAgent</code> \u4e2d\u8a2d\u5b9a\u6700\u5927\u8fed\u4ee3\u6b21\u6578\u3002\u7576\u9054\u5230\u8a72\u6b21\u6578\u6642\uff0c\u8ff4\u5708\u6703\u81ea\u52d5\u7d42\u6b62\u3002</li> <li>\u7531\u5b50 agent \u5347\u7d1a\u7d42\u6b62\uff1a \u8a2d\u8a08\u4e00\u500b\u6216\u591a\u500b\u5b50 agent \u4f86\u5224\u65b7\u689d\u4ef6\uff08\u4f8b\u5982\uff1a\u300c\u6587\u4ef6\u54c1\u8cea\u662f\u5426\u8db3\u5920\u597d\uff1f\u300d\u300c\u662f\u5426\u5df2\u9054\u6210\u5171\u8b58\uff1f\u300d\uff09\u3002\u5982\u679c\u689d\u4ef6\u9054\u6210\uff0c\u5b50 agent \u53ef\u4ee5\u767c\u51fa\u7d42\u6b62\u8a0a\u865f\uff08\u4f8b\u5982\u900f\u904e\u89f8\u767c\u81ea\u8a02\u4e8b\u4ef6\u3001\u5728\u5171\u7528 context \u8a2d\u5b9a\u65d7\u6a19\uff0c\u6216\u56de\u50b3\u7279\u5b9a\u503c\uff09\u3002</li> </ul> </li> </ol> <p></p>"},{"location":"agents/workflow-agents/loop-agents/#_3","title":"\u5b8c\u6574\u7bc4\u4f8b\uff1a\u6587\u4ef6\u9010\u6b65\u512a\u5316","text":"<p>\u60f3\u50cf\u4e00\u500b\u4f60\u5e0c\u671b\u53cd\u8986\u512a\u5316\u6587\u4ef6\u7684\u60c5\u5883\uff1a</p> <ul> <li>Writer Agent\uff1a <code>LlmAgent</code>\uff0c\u8ca0\u8cac\u7522\u751f\u6216\u4fee\u8a02\u4e3b\u984c\u8349\u7a3f\u3002</li> <li> <p>Critic Agent\uff1a <code>LlmAgent</code>\uff0c\u8ca0\u8cac\u8a55\u8ad6\u8349\u7a3f\u4e26\u6307\u51fa\u53ef\u6539\u9032\u4e4b\u8655\u3002</p> <pre><code>LoopAgent(sub_agents=[WriterAgent, CriticAgent], max_iterations=5)\n</code></pre> </li> </ul> <p>\u5728\u9019\u500b\u8a2d\u5b9a\u4e2d\uff0c<code>LoopAgent</code> \u6703\u8ca0\u8cac\u7ba1\u7406\u6574\u500b\u53cd\u8986\u57f7\u884c\uff08\u8fed\u4ee3\uff09\u7684\u6d41\u7a0b\u3002<code>CriticAgent</code> \u53ef\u4ee5\u8a2d\u8a08\u70ba\u7576\u6587\u4ef6\u9054\u5230\u6eff\u610f\u7684\u54c1\u8cea\u6c34\u6e96\u6642\u56de\u50b3 \"STOP\" \u8a0a\u865f\uff0c\u4ee5\u907f\u514d\u9032\u884c\u66f4\u591a\u6b21\u7684\u8fed\u4ee3\u3002\u6216\u8005\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528 <code>max iterations</code> \u53c3\u6578\u4f86\u9650\u5236\u6d41\u7a0b\u6700\u591a\u57f7\u884c\u56fa\u5b9a\u6b21\u6578\uff0c\u6216\u662f\u5be6\u4f5c\u5916\u90e8\u908f\u8f2f\u4f86\u6c7a\u5b9a\u4f55\u6642\u505c\u6b62\u3002\u6b64\u8ff4\u5708\u6700\u591a\u6703\u57f7\u884c\u4e94\u6b21\uff0c\u78ba\u4fdd\u53cd\u8986\u512a\u5316\u4e0d\u6703\u7121\u9650\u6301\u7e8c\u4e0b\u53bb\u3002</p> \u5b8c\u6574\u7a0b\u5f0f\u78bc PythonJava <pre><code># Part of agent.py --&gt; Follow https://google.github.io/adk-docs/get-started/quickstart/ to learn the setup\n\nimport asyncio\nimport os\nfrom google.adk.agents import LoopAgent, LlmAgent, BaseAgent, SequentialAgent\nfrom google.genai import types\nfrom google.adk.runners import InMemoryRunner\nfrom google.adk.agents.invocation_context import InvocationContext\nfrom google.adk.tools.tool_context import ToolContext\nfrom typing import AsyncGenerator, Optional\nfrom google.adk.events import Event, EventActions\n\n# --- Constants ---\nAPP_NAME = \"doc_writing_app_v3\" # New App Name\nUSER_ID = \"dev_user_01\"\nSESSION_ID_BASE = \"loop_exit_tool_session\" # New Base Session ID\nGEMINI_MODEL = \"gemini-2.0-flash\"\nSTATE_INITIAL_TOPIC = \"initial_topic\"\n\n# --- State Keys ---\nSTATE_CURRENT_DOC = \"current_document\"\nSTATE_CRITICISM = \"criticism\"\n# Define the exact phrase the Critic should use to signal completion\nCOMPLETION_PHRASE = \"No major issues found.\"\n\n# --- Tool Definition ---\ndef exit_loop(tool_context: ToolContext):\n  \"\"\"Call this function ONLY when the critique indicates no further changes are needed, signaling the iterative process should end.\"\"\"\n  print(f\"  [Tool Call] exit_loop triggered by {tool_context.agent_name}\")\n  tool_context.actions.escalate = True\n  # Return empty dict as tools should typically return JSON-serializable output\n  return {}\n\n# --- Agent Definitions ---\n\n# STEP 1: Initial Writer Agent (Runs ONCE at the beginning)\ninitial_writer_agent = LlmAgent(\n    name=\"InitialWriterAgent\",\n    model=GEMINI_MODEL,\n    include_contents='none',\n    # MODIFIED Instruction: Ask for a slightly more developed start\n    instruction=f\"\"\"You are a Creative Writing Assistant tasked with starting a story.\n    Write the *first draft* of a short story (aim for 2-4 sentences).\n    Base the content *only* on the topic provided below. Try to introduce a specific element (like a character, a setting detail, or a starting action) to make it engaging.\n    Topic: {{initial_topic}}\n\n    Output *only* the story/document text. Do not add introductions or explanations.\n\"\"\",\n    description=\"Writes the initial document draft based on the topic, aiming for some initial substance.\",\n    output_key=STATE_CURRENT_DOC\n)\n\n# STEP 2a: Critic Agent (Inside the Refinement Loop)\ncritic_agent_in_loop = LlmAgent(\n    name=\"CriticAgent\",\n    model=GEMINI_MODEL,\n    include_contents='none',\n    # MODIFIED Instruction: More nuanced completion criteria, look for clear improvement paths.\n    instruction=f\"\"\"You are a Constructive Critic AI reviewing a short document draft (typically 2-6 sentences). Your goal is balanced feedback.\n\n    **Document to Review:**\n    ```\n    {{current_document}}\n    ```\n\n    **Task:**\n    Review the document for clarity, engagement, and basic coherence according to the initial topic (if known).\n\n    IF you identify 1-2 *clear and actionable* ways the document could be improved to better capture the topic or enhance reader engagement (e.g., \"Needs a stronger opening sentence\", \"Clarify the character's goal\"):\n    Provide these specific suggestions concisely. Output *only* the critique text.\n\n    ELSE IF the document is coherent, addresses the topic adequately for its length, and has no glaring errors or obvious omissions:\n    Respond *exactly* with the phrase \"{COMPLETION_PHRASE}\" and nothing else. It doesn't need to be perfect, just functionally complete for this stage. Avoid suggesting purely subjective stylistic preferences if the core is sound.\n\n    Do not add explanations. Output only the critique OR the exact completion phrase.\n\"\"\",\n    description=\"Reviews the current draft, providing critique if clear improvements are needed, otherwise signals completion.\",\n    output_key=STATE_CRITICISM\n)\n\n\n# STEP 2b: Refiner/Exiter Agent (Inside the Refinement Loop)\nrefiner_agent_in_loop = LlmAgent(\n    name=\"RefinerAgent\",\n    model=GEMINI_MODEL,\n    # Relies solely on state via placeholders\n    include_contents='none',\n    instruction=f\"\"\"You are a Creative Writing Assistant refining a document based on feedback OR exiting the process.\n    **Current Document:**\n    ```\n    {{current_document}}\n    ```\n    **Critique/Suggestions:**\n    {{criticism}}\n\n    **Task:**\n    Analyze the 'Critique/Suggestions'.\n    IF the critique is *exactly* \"{COMPLETION_PHRASE}\":\n    You MUST call the 'exit_loop' function. Do not output any text.\n    ELSE (the critique contains actionable feedback):\n    Carefully apply the suggestions to improve the 'Current Document'. Output *only* the refined document text.\n\n    Do not add explanations. Either output the refined document OR call the exit_loop function.\n\"\"\",\n    description=\"Refines the document based on critique, or calls exit_loop if critique indicates completion.\",\n    tools=[exit_loop], # Provide the exit_loop tool\n    output_key=STATE_CURRENT_DOC # Overwrites state['current_document'] with the refined version\n)\n\n\n# STEP 2: Refinement Loop Agent\nrefinement_loop = LoopAgent(\n    name=\"RefinementLoop\",\n    # Agent order is crucial: Critique first, then Refine/Exit\n    sub_agents=[\n        critic_agent_in_loop,\n        refiner_agent_in_loop,\n    ],\n    max_iterations=5 # Limit loops\n)\n\n# STEP 3: Overall Sequential Pipeline\n# For ADK tools compatibility, the root agent must be named `root_agent`\nroot_agent = SequentialAgent(\n    name=\"IterativeWritingPipeline\",\n    sub_agents=[\n        initial_writer_agent, # Run first to create initial doc\n        refinement_loop       # Then run the critique/refine loop\n    ],\n    description=\"Writes an initial document and then iteratively refines it with critique using an exit tool.\"\n)\n</code></pre> <pre><code>import static com.google.adk.agents.LlmAgent.IncludeContents.NONE;\n\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.LoopAgent;\nimport com.google.adk.agents.SequentialAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.adk.tools.ToolContext;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.util.Map;\n\npublic class LoopAgentExample {\n\n  // --- Constants ---\n  private static final String APP_NAME = \"IterativeWritingPipeline\";\n  private static final String USER_ID = \"test_user_456\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n\n  // --- State Keys ---\n  private static final String STATE_CURRENT_DOC = \"current_document\";\n  private static final String STATE_CRITICISM = \"criticism\";\n\n  public static void main(String[] args) {\n    LoopAgentExample loopAgentExample = new LoopAgentExample();\n    loopAgentExample.runAgent(\"Write a document about a cat\");\n  }\n\n  // --- Tool Definition ---\n  @Schema(\n      description =\n          \"Call this function ONLY when the critique indicates no further changes are needed,\"\n              + \" signaling the iterative process should end.\")\n  public static Map&lt;String, Object&gt; exitLoop(@Schema(name = \"toolContext\") ToolContext toolContext) {\n    System.out.printf(\"[Tool Call] exitLoop triggered by %s \\n\", toolContext.agentName());\n    toolContext.actions().setEscalate(true);\n    //  Return empty dict as tools should typically return JSON-serializable output\n    return Map.of();\n  }\n\n  // --- Agent Definitions ---\n  public void runAgent(String prompt) {\n    // STEP 1: Initial Writer Agent (Runs ONCE at the beginning)\n    LlmAgent initialWriterAgent =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"InitialWriterAgent\")\n            .description(\n                \"Writes the initial document draft based on the topic, aiming for some initial\"\n                    + \" substance.\")\n            .instruction(\n                \"\"\"\n                    You are a Creative Writing Assistant tasked with starting a story.\n                    Write the *first draft* of a short story (aim for 2-4 sentences).\n                    Base the content *only* on the topic provided below. Try to introduce a specific element (like a character, a setting detail, or a starting action) to make it engaging.\n\n                    Output *only* the story/document text. Do not add introductions or explanations.\n                \"\"\")\n            .outputKey(STATE_CURRENT_DOC)\n            .includeContents(NONE)\n            .build();\n\n    // STEP 2a: Critic Agent (Inside the Refinement Loop)\n    LlmAgent criticAgentInLoop =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"CriticAgent\")\n            .description(\n                \"Reviews the current draft, providing critique if clear improvements are needed,\"\n                    + \" otherwise signals completion.\")\n            .instruction(\n                \"\"\"\n                    You are a Constructive Critic AI reviewing a short document draft (typically 2-6 sentences). Your goal is balanced feedback.\n\n                    **Document to Review:**\n                    ```\n                    {{current_document}}\n                    ```\n\n                    **Task:**\n                    Review the document for clarity, engagement, and basic coherence according to the initial topic (if known).\n\n                    IF you identify 1-2 *clear and actionable* ways the document could be improved to better capture the topic or enhance reader engagement (e.g., \"Needs a stronger opening sentence\", \"Clarify the character's goal\"):\n                    Provide these specific suggestions concisely. Output *only* the critique text.\n\n                    ELSE IF the document is coherent, addresses the topic adequately for its length, and has no glaring errors or obvious omissions:\n                    Respond *exactly* with the phrase \"No major issues found.\" and nothing else. It doesn't need to be perfect, just functionally complete for this stage. Avoid suggesting purely subjective stylistic preferences if the core is sound.\n\n                    Do not add explanations. Output only the critique OR the exact completion phrase.\n                    \"\"\")\n            .outputKey(STATE_CRITICISM)\n            .includeContents(NONE)\n            .build();\n\n    // STEP 2b: Refiner/Exiter Agent (Inside the Refinement Loop)\n    LlmAgent refinerAgentInLoop =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"RefinerAgent\")\n            .description(\n                \"Refines the document based on critique, or calls exitLoop if critique indicates\"\n                    + \" completion.\")\n            .instruction(\n                \"\"\"\n                    You are a Creative Writing Assistant refining a document based on feedback OR exiting the process.\n                    **Current Document:**\n                    ```\n                    {{current_document}}\n                    ```\n                    **Critique/Suggestions:**\n                    {{criticism}}\n\n                    **Task:**\n                    Analyze the 'Critique/Suggestions'.\n                    IF the critique is *exactly* \"No major issues found.\":\n                    You MUST call the 'exitLoop' function. Do not output any text.\n                    ELSE (the critique contains actionable feedback):\n                    Carefully apply the suggestions to improve the 'Current Document'. Output *only* the refined document text.\n\n                    Do not add explanations. Either output the refined document OR call the exitLoop function.\n                \"\"\")\n            .outputKey(STATE_CURRENT_DOC)\n            .includeContents(NONE)\n            .tools(FunctionTool.create(LoopAgentExample.class, \"exitLoop\"))\n            .build();\n\n    // STEP 2: Refinement Loop Agent\n    LoopAgent refinementLoop =\n        LoopAgent.builder()\n            .name(\"RefinementLoop\")\n            .description(\"Repeatedly refines the document with critique and then exits.\")\n            .subAgents(criticAgentInLoop, refinerAgentInLoop)\n            .maxIterations(5)\n            .build();\n\n    // STEP 3: Overall Sequential Pipeline\n    SequentialAgent iterativeWriterAgent =\n        SequentialAgent.builder()\n            .name(APP_NAME)\n            .description(\n                \"Writes an initial document and then iteratively refines it with critique using an\"\n                    + \" exit tool.\")\n            .subAgents(initialWriterAgent, refinementLoop)\n            .build();\n\n    // Create an InMemoryRunner\n    InMemoryRunner runner = new InMemoryRunner(iterativeWriterAgent, APP_NAME);\n    // InMemoryRunner automatically creates a session service. Create a session using the service\n    Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n    Content userMessage = Content.fromParts(Part.fromText(prompt));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre>"},{"location":"agents/workflow-agents/parallel-agents.en/","title":"Parallel agents","text":"<p>The <code>ParallelAgent</code> is a workflow agent that executes its sub-agents concurrently. This dramatically speeds up workflows where tasks can be performed independently.</p> <p>Use <code>ParallelAgent</code> when: For scenarios prioritizing speed and involving independent, resource-intensive tasks, a <code>ParallelAgent</code> facilitates efficient parallel execution. When sub-agents operate without dependencies, their tasks can be performed concurrently, significantly reducing overall processing time.</p> <p>As with other workflow agents, the <code>ParallelAgent</code> is not powered by an LLM, and is thus deterministic in how it executes. That being said, workflow agents are only concerned with their execution (i.e. executing sub-agents in parallel), and not their internal logic; the tools or sub-agents of a workflow agent may or may not utilize LLMs.</p>"},{"location":"agents/workflow-agents/parallel-agents.en/#example","title":"Example","text":"<p>This approach is particularly beneficial for operations like multi-source data retrieval or heavy computations, where parallelization yields substantial performance gains. Importantly, this strategy assumes no inherent need for shared state or direct information exchange between the concurrently executing agents.</p>"},{"location":"agents/workflow-agents/parallel-agents.en/#how-it-works","title":"How it works","text":"<p>When the <code>ParallelAgent</code>'s <code>run_async()</code> method is called:</p> <ol> <li>Concurrent Execution: It initiates the <code>run_async()</code> method of each sub-agent present in the <code>sub_agents</code> list concurrently.  This means all the agents start running at (approximately) the same time.</li> <li>Independent Branches:  Each sub-agent operates in its own execution branch.  There is no automatic sharing of conversation history or state between these branches during execution.</li> <li>Result Collection: The <code>ParallelAgent</code> manages the parallel execution and, typically, provides a way to access the results from each sub-agent after they have completed (e.g., through a list of results or events). The order of results may not be deterministic.</li> </ol>"},{"location":"agents/workflow-agents/parallel-agents.en/#independent-execution-and-state-management","title":"Independent Execution and State Management","text":"<p>It's crucial to understand that sub-agents within a <code>ParallelAgent</code> run independently.  If you need communication or data sharing between these agents, you must implement it explicitly.  Possible approaches include:</p> <ul> <li>Shared <code>InvocationContext</code>: You could pass a shared <code>InvocationContext</code> object to each sub-agent.  This object could act as a shared data store.  However, you'd need to manage concurrent access to this shared context carefully (e.g., using locks) to avoid race conditions.</li> <li>External State Management:  Use an external database, message queue, or other mechanism to manage shared state and facilitate communication between agents.</li> <li>Post-Processing: Collect results from each branch, and then implement logic to coordinate data afterwards.</li> </ul> <p></p>"},{"location":"agents/workflow-agents/parallel-agents.en/#full-example-parallel-web-research","title":"Full Example: Parallel Web Research","text":"<p>Imagine researching multiple topics simultaneously:</p> <ol> <li>Researcher Agent 1:  An <code>LlmAgent</code> that researches \"renewable energy sources.\"</li> <li>Researcher Agent 2:  An <code>LlmAgent</code> that researches \"electric vehicle technology.\"</li> <li> <p>Researcher Agent 3:  An <code>LlmAgent</code> that researches \"carbon capture methods.\"</p> <pre><code>ParallelAgent(sub_agents=[ResearcherAgent1, ResearcherAgent2, ResearcherAgent3])\n</code></pre> </li> </ol> <p>These research tasks are independent.  Using a <code>ParallelAgent</code> allows them to run concurrently, potentially reducing the total research time significantly compared to running them sequentially. The results from each agent would be collected separately after they finish.</p> Full Code PythonJava <pre><code> # Part of agent.py --&gt; Follow https://google.github.io/adk-docs/get-started/quickstart/ to learn the setup\n # --- 1. Define Researcher Sub-Agents (to run in parallel) ---\n\n # Researcher 1: Renewable Energy\n researcher_agent_1 = LlmAgent(\n     name=\"RenewableEnergyResearcher\",\n     model=GEMINI_MODEL,\n     instruction=\"\"\"You are an AI Research Assistant specializing in energy.\n Research the latest advancements in 'renewable energy sources'.\n Use the Google Search tool provided.\n Summarize your key findings concisely (1-2 sentences).\n Output *only* the summary.\n \"\"\",\n     description=\"Researches renewable energy sources.\",\n     tools=[google_search],\n     # Store result in state for the merger agent\n     output_key=\"renewable_energy_result\"\n )\n\n # Researcher 2: Electric Vehicles\n researcher_agent_2 = LlmAgent(\n     name=\"EVResearcher\",\n     model=GEMINI_MODEL,\n     instruction=\"\"\"You are an AI Research Assistant specializing in transportation.\n Research the latest developments in 'electric vehicle technology'.\n Use the Google Search tool provided.\n Summarize your key findings concisely (1-2 sentences).\n Output *only* the summary.\n \"\"\",\n     description=\"Researches electric vehicle technology.\",\n     tools=[google_search],\n     # Store result in state for the merger agent\n     output_key=\"ev_technology_result\"\n )\n\n # Researcher 3: Carbon Capture\n researcher_agent_3 = LlmAgent(\n     name=\"CarbonCaptureResearcher\",\n     model=GEMINI_MODEL,\n     instruction=\"\"\"You are an AI Research Assistant specializing in climate solutions.\n Research the current state of 'carbon capture methods'.\n Use the Google Search tool provided.\n Summarize your key findings concisely (1-2 sentences).\n Output *only* the summary.\n \"\"\",\n     description=\"Researches carbon capture methods.\",\n     tools=[google_search],\n     # Store result in state for the merger agent\n     output_key=\"carbon_capture_result\"\n )\n\n # --- 2. Create the ParallelAgent (Runs researchers concurrently) ---\n # This agent orchestrates the concurrent execution of the researchers.\n # It finishes once all researchers have completed and stored their results in state.\n parallel_research_agent = ParallelAgent(\n     name=\"ParallelWebResearchAgent\",\n     sub_agents=[researcher_agent_1, researcher_agent_2, researcher_agent_3],\n     description=\"Runs multiple research agents in parallel to gather information.\"\n )\n\n # --- 3. Define the Merger Agent (Runs *after* the parallel agents) ---\n # This agent takes the results stored in the session state by the parallel agents\n # and synthesizes them into a single, structured response with attributions.\n merger_agent = LlmAgent(\n     name=\"SynthesisAgent\",\n     model=GEMINI_MODEL,  # Or potentially a more powerful model if needed for synthesis\n     instruction=\"\"\"You are an AI Assistant responsible for combining research findings into a structured report.\n\n Your primary task is to synthesize the following research summaries, clearly attributing findings to their source areas. Structure your response using headings for each topic. Ensure the report is coherent and integrates the key points smoothly.\n\n **Crucially: Your entire response MUST be grounded *exclusively* on the information provided in the 'Input Summaries' below. Do NOT add any external knowledge, facts, or details not present in these specific summaries.**\n\n **Input Summaries:**\n\n *   **Renewable Energy:**\n     {renewable_energy_result}\n\n *   **Electric Vehicles:**\n     {ev_technology_result}\n\n *   **Carbon Capture:**\n     {carbon_capture_result}\n\n **Output Format:**\n\n ## Summary of Recent Sustainable Technology Advancements\n\n ### Renewable Energy Findings\n (Based on RenewableEnergyResearcher's findings)\n [Synthesize and elaborate *only* on the renewable energy input summary provided above.]\n\n ### Electric Vehicle Findings\n (Based on EVResearcher's findings)\n [Synthesize and elaborate *only* on the EV input summary provided above.]\n\n ### Carbon Capture Findings\n (Based on CarbonCaptureResearcher's findings)\n [Synthesize and elaborate *only* on the carbon capture input summary provided above.]\n\n ### Overall Conclusion\n [Provide a brief (1-2 sentence) concluding statement that connects *only* the findings presented above.]\n\n Output *only* the structured report following this format. Do not include introductory or concluding phrases outside this structure, and strictly adhere to using only the provided input summary content.\n \"\"\",\n     description=\"Combines research findings from parallel agents into a structured, cited report, strictly grounded on provided inputs.\",\n     # No tools needed for merging\n     # No output_key needed here, as its direct response is the final output of the sequence\n )\n\n\n # --- 4. Create the SequentialAgent (Orchestrates the overall flow) ---\n # This is the main agent that will be run. It first executes the ParallelAgent\n # to populate the state, and then executes the MergerAgent to produce the final output.\n sequential_pipeline_agent = SequentialAgent(\n     name=\"ResearchAndSynthesisPipeline\",\n     # Run parallel research first, then merge\n     sub_agents=[parallel_research_agent, merger_agent],\n     description=\"Coordinates parallel research and synthesizes the results.\"\n )\n\n root_agent = sequential_pipeline_agent\n</code></pre> <pre><code> import com.google.adk.agents.LlmAgent;\n import com.google.adk.agents.ParallelAgent;\n import com.google.adk.agents.SequentialAgent;\n import com.google.adk.events.Event;\n import com.google.adk.runner.InMemoryRunner;\n import com.google.adk.sessions.Session;\n import com.google.adk.tools.GoogleSearchTool;\n import com.google.genai.types.Content;\n import com.google.genai.types.Part;\n import io.reactivex.rxjava3.core.Flowable;\n\n public class ParallelResearchPipeline {\n\n   private static final String APP_NAME = \"parallel_research_app\";\n   private static final String USER_ID = \"research_user_01\";\n   private static final String GEMINI_MODEL = \"gemini-2.0-flash\";\n\n   // Assume google_search is an instance of the GoogleSearchTool\n   private static final GoogleSearchTool googleSearchTool = new GoogleSearchTool();\n\n   public static void main(String[] args) {\n     String query = \"Summarize recent sustainable tech advancements.\";\n     SequentialAgent sequentialPipelineAgent = initAgent();\n     runAgent(sequentialPipelineAgent, query);\n   }\n\n   public static SequentialAgent initAgent() {\n     // --- 1. Define Researcher Sub-Agents (to run in parallel) ---\n     // Researcher 1: Renewable Energy\n     LlmAgent researcherAgent1 = LlmAgent.builder()\n         .name(\"RenewableEnergyResearcher\")\n         .model(GEMINI_MODEL)\n         .instruction(\"\"\"\n                     You are an AI Research Assistant specializing in energy.\n                     Research the latest advancements in 'renewable energy sources'.\n                     Use the Google Search tool provided.\n                     Summarize your key findings concisely (1-2 sentences).\n                     Output *only* the summary.\n                     \"\"\")\n         .description(\"Researches renewable energy sources.\")\n         .tools(googleSearchTool)\n         .outputKey(\"renewable_energy_result\") // Store result in state\n         .build();\n\n     // Researcher 2: Electric Vehicles\n     LlmAgent researcherAgent2 = LlmAgent.builder()\n         .name(\"EVResearcher\")\n         .model(GEMINI_MODEL)\n         .instruction(\"\"\"\n                     You are an AI Research Assistant specializing in transportation.\n                     Research the latest developments in 'electric vehicle technology'.\n                     Use the Google Search tool provided.\n                     Summarize your key findings concisely (1-2 sentences).\n                     Output *only* the summary.\n                     \"\"\")\n         .description(\"Researches electric vehicle technology.\")\n         .tools(googleSearchTool)\n         .outputKey(\"ev_technology_result\") // Store result in state\n         .build();\n\n     // Researcher 3: Carbon Capture\n     LlmAgent researcherAgent3 = LlmAgent.builder()\n         .name(\"CarbonCaptureResearcher\")\n         .model(GEMINI_MODEL)\n         .instruction(\"\"\"\n                     You are an AI Research Assistant specializing in climate solutions.\n                     Research the current state of 'carbon capture methods'.\n                     Use the Google Search tool provided.\n                     Summarize your key findings concisely (1-2 sentences).\n                     Output *only* the summary.\n                     \"\"\")\n         .description(\"Researches carbon capture methods.\")\n         .tools(googleSearchTool)\n         .outputKey(\"carbon_capture_result\") // Store result in state\n         .build();\n\n     // --- 2. Create the ParallelAgent (Runs researchers concurrently) ---\n     // This agent orchestrates the concurrent execution of the researchers.\n     // It finishes once all researchers have completed and stored their results in state.\n     ParallelAgent parallelResearchAgent =\n         ParallelAgent.builder()\n             .name(\"ParallelWebResearchAgent\")\n             .subAgents(researcherAgent1, researcherAgent2, researcherAgent3)\n             .description(\"Runs multiple research agents in parallel to gather information.\")\n             .build();\n\n     // --- 3. Define the Merger Agent (Runs *after* the parallel agents) ---\n     // This agent takes the results stored in the session state by the parallel agents\n     // and synthesizes them into a single, structured response with attributions.\n     LlmAgent mergerAgent =\n         LlmAgent.builder()\n             .name(\"SynthesisAgent\")\n             .model(GEMINI_MODEL)\n             .instruction(\n                 \"\"\"\n                       You are an AI Assistant responsible for combining research findings into a structured report.\n                       Your primary task is to synthesize the following research summaries, clearly attributing findings to their source areas. Structure your response using headings for each topic. Ensure the report is coherent and integrates the key points smoothly.\n                       **Crucially: Your entire response MUST be grounded *exclusively* on the information provided in the 'Input Summaries' below. Do NOT add any external knowledge, facts, or details not present in these specific summaries.**\n                       **Input Summaries:**\n\n                       *   **Renewable Energy:**\n                           {renewable_energy_result}\n\n                       *   **Electric Vehicles:**\n                           {ev_technology_result}\n\n                       *   **Carbon Capture:**\n                           {carbon_capture_result}\n\n                       **Output Format:**\n\n                       ## Summary of Recent Sustainable Technology Advancements\n\n                       ### Renewable Energy Findings\n                       (Based on RenewableEnergyResearcher's findings)\n                       [Synthesize and elaborate *only* on the renewable energy input summary provided above.]\n\n                       ### Electric Vehicle Findings\n                       (Based on EVResearcher's findings)\n                       [Synthesize and elaborate *only* on the EV input summary provided above.]\n\n                       ### Carbon Capture Findings\n                       (Based on CarbonCaptureResearcher's findings)\n                       [Synthesize and elaborate *only* on the carbon capture input summary provided above.]\n\n                       ### Overall Conclusion\n                       [Provide a brief (1-2 sentence) concluding statement that connects *only* the findings presented above.]\n\n                       Output *only* the structured report following this format. Do not include introductory or concluding phrases outside this structure, and strictly adhere to using only the provided input summary content.\n                       \"\"\")\n             .description(\n                 \"Combines research findings from parallel agents into a structured, cited report, strictly grounded on provided inputs.\")\n             // No tools needed for merging\n             // No output_key needed here, as its direct response is the final output of the sequence\n             .build();\n\n     // --- 4. Create the SequentialAgent (Orchestrates the overall flow) ---\n     // This is the main agent that will be run. It first executes the ParallelAgent\n     // to populate the state, and then executes the MergerAgent to produce the final output.\n     SequentialAgent sequentialPipelineAgent =\n         SequentialAgent.builder()\n             .name(\"ResearchAndSynthesisPipeline\")\n             // Run parallel research first, then merge\n             .subAgents(parallelResearchAgent, mergerAgent)\n             .description(\"Coordinates parallel research and synthesizes the results.\")\n             .build();\n\n     return sequentialPipelineAgent;\n   }\n\n   public static void runAgent(SequentialAgent sequentialPipelineAgent, String query) {\n     // Create an InMemoryRunner\n     InMemoryRunner runner = new InMemoryRunner(sequentialPipelineAgent, APP_NAME);\n     // InMemoryRunner automatically creates a session service. Create a session using the service\n     Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n     Content userMessage = Content.fromParts(Part.fromText(query));\n\n     // Run the agent\n     Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n     // Stream event response\n     eventStream.blockingForEach(\n         event -&gt; {\n           if (event.finalResponse()) {\n             System.out.printf(\"Event Author: %s \\n Event Response: %s \\n\\n\\n\", event.author(), event.stringifyContent());\n           }\n         });\n   }\n }\n</code></pre>"},{"location":"agents/workflow-agents/parallel-agents/","title":"Parallel agents","text":"<p><code>ParallelAgent</code> \u662f\u4e00\u7a2e\u5de5\u4f5c\u6d41\u7a0b agent\uff0c\u80fd\u5920\u540c\u6642\u57f7\u884c\u5176\u5b50 agent\u3002\u9019\u5c0d\u65bc\u53ef\u7368\u7acb\u57f7\u884c\u7684\u4efb\u52d9\u4f86\u8aaa\uff0c\u80fd\u5927\u5e45\u52a0\u5feb\u5de5\u4f5c\u6d41\u7a0b\u7684\u901f\u5ea6\u3002</p> <p>\u7576\u4f60\u9047\u5230\u4ee5\u4e0b\u60c5\u5883\u6642\uff0c\u8acb\u4f7f\u7528 <code>ParallelAgent</code>\uff1a\u82e5\u4f60\u7684\u5834\u666f\u4ee5\u901f\u5ea6\u70ba\u512a\u5148\uff0c\u4e14\u5305\u542b\u7368\u7acb\u4e14\u8cc7\u6e90\u5bc6\u96c6\u7684\u4efb\u52d9\uff0c<code>ParallelAgent</code> \u80fd\u6709\u6548\u4fc3\u9032\u9ad8\u6548\u7684\u5e73\u884c\u57f7\u884c\u3002\u7576\u5b50 agent \u4e4b\u9593\u6c92\u6709\u76f8\u4f9d\u95dc\u4fc2\u6642\uff0c\u9019\u4e9b\u4efb\u52d9\u53ef\u4ee5\u540c\u6642\u57f7\u884c\uff0c\u5927\u5e45\u7e2e\u77ed\u6574\u9ad4\u8655\u7406\u6642\u9593\u3002</p> <p>\u5982\u540c\u5176\u4ed6\u5de5\u4f5c\u6d41\u7a0b agent\uff0c<code>ParallelAgent</code> \u4e26\u975e\u7531\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u9a45\u52d5\uff0c\u56e0\u6b64\u5176\u57f7\u884c\u65b9\u5f0f\u662f\u78ba\u5b9a\u6027\u7684\u3002\u4e0d\u904e\uff0c\u5de5\u4f5c\u6d41\u7a0b agent \u53ea\u8ca0\u8cac\u57f7\u884c\uff08\u4f8b\u5982\uff1a\u5e73\u884c\u57f7\u884c\u5b50 agent\uff09\uff0c\u800c\u4e0d\u6d89\u53ca\u5176\u5167\u90e8\u908f\u8f2f\uff1b\u5de5\u4f5c\u6d41\u7a0b agent \u7684\u5de5\u5177\u6216\u5b50 agent \u53ef\u80fd\u6703\uff0c\u4e5f\u53ef\u80fd\u4e0d\u6703\u4f7f\u7528\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\u3002</p>"},{"location":"agents/workflow-agents/parallel-agents/#_1","title":"\u7bc4\u4f8b","text":"<p>\u9019\u7a2e\u65b9\u6cd5\u7279\u5225\u9069\u5408\u591a\u4f86\u6e90\u8cc7\u6599\u64f7\u53d6\u6216\u5927\u91cf\u904b\u7b97\u7b49\u64cd\u4f5c\uff0c\u5728\u9019\u4e9b\u60c5\u5883\u4e0b\uff0c\u5e73\u884c\u5316\u80fd\u5e36\u4f86\u986f\u8457\u7684\u6548\u80fd\u63d0\u5347\u3002\u91cd\u8981\u7684\u662f\uff0c\u9019\u7a2e\u7b56\u7565\u5047\u8a2d\u540c\u6642\u57f7\u884c\u7684 agent \u4e4b\u9593\u4e0d\u9700\u8981\u5171\u7528\u72c0\u614b\u6216\u76f4\u63a5\u8cc7\u8a0a\u4ea4\u63db\u3002</p>"},{"location":"agents/workflow-agents/parallel-agents/#_2","title":"\u904b\u4f5c\u65b9\u5f0f","text":"<p>\u7576\u547c\u53eb <code>ParallelAgent</code> \u7684 <code>run_async()</code> \u65b9\u6cd5\u6642\uff1a</p> <ol> <li>\u540c\u6642\u57f7\u884c\uff1a \u6703\u540c\u6642\u555f\u52d5 <code>sub_agents</code> \u6e05\u55ae\u4e2d\u6bcf\u4e00\u500b\u5b50 agent \u7684 <code>run_async()</code> \u65b9\u6cd5\u3002\u9019\u4ee3\u8868\u6240\u6709 agent \u5e7e\u4e4e\u5728\u540c\u4e00\u6642\u9593\u958b\u59cb\u57f7\u884c\u3002</li> <li>\u7368\u7acb\u5206\u652f\uff1a \u6bcf\u500b\u5b50 agent \u90fd\u5728\u81ea\u5df1\u7684\u57f7\u884c\u5206\u652f\u4e2d\u904b\u4f5c\u3002\u5728\u57f7\u884c\u671f\u9593\uff0c\u9019\u4e9b\u5206\u652f\u4e4b\u9593\u4e0d\u6703\u81ea\u52d5\u5171\u7528\u5c0d\u8a71\u6b77\u53f2\u6216\u72c0\u614b\u3002</li> <li>\u7d50\u679c\u6536\u96c6\uff1a <code>ParallelAgent</code> \u6703\u7ba1\u7406\u5e73\u884c\u57f7\u884c\uff0c\u4e26\u901a\u5e38\u63d0\u4f9b\u4e00\u7a2e\u65b9\u5f0f\u8b93\u4f60\u5728\u6240\u6709\u5b50 agent \u5b8c\u6210\u5f8c\u5b58\u53d6\u5404\u81ea\u7684\u7d50\u679c\uff08\u4f8b\u5982\uff1a\u900f\u904e\u7d50\u679c\u6e05\u55ae\u6216\u4e8b\u4ef6\uff09\u3002\u7d50\u679c\u7684\u9806\u5e8f\u53ef\u80fd\u4e0d\u662f\u78ba\u5b9a\u6027\u7684\u3002</li> </ol>"},{"location":"agents/workflow-agents/parallel-agents/#_3","title":"\u7368\u7acb\u57f7\u884c\u8207\u72c0\u614b\u7ba1\u7406","text":"<p>\u52d9\u5fc5\u7406\u89e3\uff0c<code>ParallelAgent</code> \u5167\u7684\u5b50 agent \u662f\u7368\u7acb\u57f7\u884c\u7684\u3002\u5982\u679c\u4f60\u9700\u8981\u9019\u4e9b agent \u4e4b\u9593\u9032\u884c\u901a\u8a0a\u6216\u8cc7\u6599\u5171\u4eab\uff0c\u5fc5\u9808\u81ea\u884c\u5be6\u4f5c\u3002\u53ef\u80fd\u7684\u505a\u6cd5\u5305\u62ec\uff1a</p> <ul> <li>\u5171\u7528 <code>InvocationContext</code>\uff1a \u4f60\u53ef\u4ee5\u5c07\u5171\u7528\u7684 <code>InvocationContext</code> \u7269\u4ef6\u50b3\u905e\u7d66\u6bcf\u500b\u5b50 agent\u3002\u9019\u500b\u7269\u4ef6\u53ef\u4ee5\u4f5c\u70ba\u5171\u7528\u7684\u8cc7\u6599\u5132\u5b58\u5340\u3002\u4e0d\u904e\uff0c\u4f60\u9700\u8981\u8b39\u614e\u7ba1\u7406\u5c0d\u9019\u500b\u5171\u7528 context \u7684\u540c\u6642\u5b58\u53d6\uff08\u4f8b\u5982\uff1a\u4f7f\u7528\u9396\u5b9a\u6a5f\u5236\uff09\uff0c\u4ee5\u907f\u514d\u7af6\u722d\u689d\u4ef6\u3002</li> <li>\u5916\u90e8\u72c0\u614b\u7ba1\u7406\uff1a \u4f7f\u7528\u5916\u90e8\u8cc7\u6599\u5eab\u3001\u8a0a\u606f\u4f47\u5217\u6216\u5176\u4ed6\u6a5f\u5236\u4f86\u7ba1\u7406\u5171\u7528\u72c0\u614b\uff0c\u4e26\u5354\u52a9 agent \u4e4b\u9593\u7684\u901a\u8a0a\u3002</li> <li>\u5f8c\u8655\u7406\uff1a \u6536\u96c6\u6bcf\u500b\u5206\u652f\u7684\u7d50\u679c\uff0c\u7136\u5f8c\u5be6\u4f5c\u5354\u8abf\u8cc7\u6599\u7684\u908f\u8f2f\u3002</li> </ul> <p></p>"},{"location":"agents/workflow-agents/parallel-agents/#_4","title":"\u5b8c\u6574\u7bc4\u4f8b\uff1a\u5e73\u884c\u7db2\u8def\u7814\u7a76","text":"<p>\u60f3\u50cf\u4f60\u8981\u540c\u6642\u7814\u7a76\u591a\u500b\u4e3b\u984c\uff1a</p> <ol> <li>\u7814\u7a76\u54e1 Agent 1\uff1a \u4e00\u500b <code>LlmAgent</code>\uff0c\u8ca0\u8cac\u7814\u7a76\u300c\u518d\u751f\u80fd\u6e90\u4f86\u6e90\u300d\u3002</li> <li>\u7814\u7a76\u54e1 Agent 2\uff1a \u4e00\u500b <code>LlmAgent</code>\uff0c\u8ca0\u8cac\u7814\u7a76\u300c\u96fb\u52d5\u8eca\u6280\u8853\u300d\u3002</li> <li> <p>\u7814\u7a76\u54e1 Agent 3\uff1a \u4e00\u500b <code>LlmAgent</code>\uff0c\u8ca0\u8cac\u7814\u7a76\u300c\u78b3\u6355\u6349\u65b9\u6cd5\u300d\u3002</p> <pre><code>ParallelAgent(sub_agents=[ResearcherAgent1, ResearcherAgent2, ResearcherAgent3])\n</code></pre> </li> </ol> <p>\u9019\u4e9b\u7814\u7a76\u4efb\u52d9\u5f7c\u6b64\u7368\u7acb\u3002\u4f7f\u7528 <code>ParallelAgent</code> \u53ef\u4ee5\u8b93\u5b83\u5011\u540c\u6642\u57f7\u884c\uff08\u5e73\u884c\u57f7\u884c\uff09\uff0c\u8207\u4f9d\u5e8f\u57f7\u884c\u76f8\u6bd4\uff0c\u6709\u6a5f\u6703\u5927\u5e45\u7e2e\u77ed\u6574\u9ad4\u7814\u7a76\u6240\u9700\u7684\u6642\u9593\u3002\u6bcf\u500b agent \u57f7\u884c\u5b8c\u7562\u5f8c\uff0c\u5176\u7d50\u679c\u6703\u5206\u5225\u88ab\u6536\u96c6\u3002</p> Full Code PythonJava <pre><code> # Part of agent.py --&gt; Follow https://google.github.io/adk-docs/get-started/quickstart/ to learn the setup\n # --- 1. Define Researcher Sub-Agents (to run in parallel) ---\n\n # Researcher 1: Renewable Energy\n researcher_agent_1 = LlmAgent(\n     name=\"RenewableEnergyResearcher\",\n     model=GEMINI_MODEL,\n     instruction=\"\"\"You are an AI Research Assistant specializing in energy.\n Research the latest advancements in 'renewable energy sources'.\n Use the Google Search tool provided.\n Summarize your key findings concisely (1-2 sentences).\n Output *only* the summary.\n \"\"\",\n     description=\"Researches renewable energy sources.\",\n     tools=[google_search],\n     # Store result in state for the merger agent\n     output_key=\"renewable_energy_result\"\n )\n\n # Researcher 2: Electric Vehicles\n researcher_agent_2 = LlmAgent(\n     name=\"EVResearcher\",\n     model=GEMINI_MODEL,\n     instruction=\"\"\"You are an AI Research Assistant specializing in transportation.\n Research the latest developments in 'electric vehicle technology'.\n Use the Google Search tool provided.\n Summarize your key findings concisely (1-2 sentences).\n Output *only* the summary.\n \"\"\",\n     description=\"Researches electric vehicle technology.\",\n     tools=[google_search],\n     # Store result in state for the merger agent\n     output_key=\"ev_technology_result\"\n )\n\n # Researcher 3: Carbon Capture\n researcher_agent_3 = LlmAgent(\n     name=\"CarbonCaptureResearcher\",\n     model=GEMINI_MODEL,\n     instruction=\"\"\"You are an AI Research Assistant specializing in climate solutions.\n Research the current state of 'carbon capture methods'.\n Use the Google Search tool provided.\n Summarize your key findings concisely (1-2 sentences).\n Output *only* the summary.\n \"\"\",\n     description=\"Researches carbon capture methods.\",\n     tools=[google_search],\n     # Store result in state for the merger agent\n     output_key=\"carbon_capture_result\"\n )\n\n # --- 2. Create the ParallelAgent (Runs researchers concurrently) ---\n # This agent orchestrates the concurrent execution of the researchers.\n # It finishes once all researchers have completed and stored their results in state.\n parallel_research_agent = ParallelAgent(\n     name=\"ParallelWebResearchAgent\",\n     sub_agents=[researcher_agent_1, researcher_agent_2, researcher_agent_3],\n     description=\"Runs multiple research agents in parallel to gather information.\"\n )\n\n # --- 3. Define the Merger Agent (Runs *after* the parallel agents) ---\n # This agent takes the results stored in the session state by the parallel agents\n # and synthesizes them into a single, structured response with attributions.\n merger_agent = LlmAgent(\n     name=\"SynthesisAgent\",\n     model=GEMINI_MODEL,  # Or potentially a more powerful model if needed for synthesis\n     instruction=\"\"\"You are an AI Assistant responsible for combining research findings into a structured report.\n\n Your primary task is to synthesize the following research summaries, clearly attributing findings to their source areas. Structure your response using headings for each topic. Ensure the report is coherent and integrates the key points smoothly.\n\n **Crucially: Your entire response MUST be grounded *exclusively* on the information provided in the 'Input Summaries' below. Do NOT add any external knowledge, facts, or details not present in these specific summaries.**\n\n **Input Summaries:**\n\n *   **Renewable Energy:**\n     {renewable_energy_result}\n\n *   **Electric Vehicles:**\n     {ev_technology_result}\n\n *   **Carbon Capture:**\n     {carbon_capture_result}\n\n **Output Format:**\n\n ## Summary of Recent Sustainable Technology Advancements\n\n ### Renewable Energy Findings\n (Based on RenewableEnergyResearcher's findings)\n [Synthesize and elaborate *only* on the renewable energy input summary provided above.]\n\n ### Electric Vehicle Findings\n (Based on EVResearcher's findings)\n [Synthesize and elaborate *only* on the EV input summary provided above.]\n\n ### Carbon Capture Findings\n (Based on CarbonCaptureResearcher's findings)\n [Synthesize and elaborate *only* on the carbon capture input summary provided above.]\n\n ### Overall Conclusion\n [Provide a brief (1-2 sentence) concluding statement that connects *only* the findings presented above.]\n\n Output *only* the structured report following this format. Do not include introductory or concluding phrases outside this structure, and strictly adhere to using only the provided input summary content.\n \"\"\",\n     description=\"Combines research findings from parallel agents into a structured, cited report, strictly grounded on provided inputs.\",\n     # No tools needed for merging\n     # No output_key needed here, as its direct response is the final output of the sequence\n )\n\n\n # --- 4. Create the SequentialAgent (Orchestrates the overall flow) ---\n # This is the main agent that will be run. It first executes the ParallelAgent\n # to populate the state, and then executes the MergerAgent to produce the final output.\n sequential_pipeline_agent = SequentialAgent(\n     name=\"ResearchAndSynthesisPipeline\",\n     # Run parallel research first, then merge\n     sub_agents=[parallel_research_agent, merger_agent],\n     description=\"Coordinates parallel research and synthesizes the results.\"\n )\n\n root_agent = sequential_pipeline_agent\n</code></pre> <pre><code> import com.google.adk.agents.LlmAgent;\n import com.google.adk.agents.ParallelAgent;\n import com.google.adk.agents.SequentialAgent;\n import com.google.adk.events.Event;\n import com.google.adk.runner.InMemoryRunner;\n import com.google.adk.sessions.Session;\n import com.google.adk.tools.GoogleSearchTool;\n import com.google.genai.types.Content;\n import com.google.genai.types.Part;\n import io.reactivex.rxjava3.core.Flowable;\n\n public class ParallelResearchPipeline {\n\n   private static final String APP_NAME = \"parallel_research_app\";\n   private static final String USER_ID = \"research_user_01\";\n   private static final String GEMINI_MODEL = \"gemini-2.0-flash\";\n\n   // Assume google_search is an instance of the GoogleSearchTool\n   private static final GoogleSearchTool googleSearchTool = new GoogleSearchTool();\n\n   public static void main(String[] args) {\n     String query = \"Summarize recent sustainable tech advancements.\";\n     SequentialAgent sequentialPipelineAgent = initAgent();\n     runAgent(sequentialPipelineAgent, query);\n   }\n\n   public static SequentialAgent initAgent() {\n     // --- 1. Define Researcher Sub-Agents (to run in parallel) ---\n     // Researcher 1: Renewable Energy\n     LlmAgent researcherAgent1 = LlmAgent.builder()\n         .name(\"RenewableEnergyResearcher\")\n         .model(GEMINI_MODEL)\n         .instruction(\"\"\"\n                     You are an AI Research Assistant specializing in energy.\n                     Research the latest advancements in 'renewable energy sources'.\n                     Use the Google Search tool provided.\n                     Summarize your key findings concisely (1-2 sentences).\n                     Output *only* the summary.\n                     \"\"\")\n         .description(\"Researches renewable energy sources.\")\n         .tools(googleSearchTool)\n         .outputKey(\"renewable_energy_result\") // Store result in state\n         .build();\n\n     // Researcher 2: Electric Vehicles\n     LlmAgent researcherAgent2 = LlmAgent.builder()\n         .name(\"EVResearcher\")\n         .model(GEMINI_MODEL)\n         .instruction(\"\"\"\n                     You are an AI Research Assistant specializing in transportation.\n                     Research the latest developments in 'electric vehicle technology'.\n                     Use the Google Search tool provided.\n                     Summarize your key findings concisely (1-2 sentences).\n                     Output *only* the summary.\n                     \"\"\")\n         .description(\"Researches electric vehicle technology.\")\n         .tools(googleSearchTool)\n         .outputKey(\"ev_technology_result\") // Store result in state\n         .build();\n\n     // Researcher 3: Carbon Capture\n     LlmAgent researcherAgent3 = LlmAgent.builder()\n         .name(\"CarbonCaptureResearcher\")\n         .model(GEMINI_MODEL)\n         .instruction(\"\"\"\n                     You are an AI Research Assistant specializing in climate solutions.\n                     Research the current state of 'carbon capture methods'.\n                     Use the Google Search tool provided.\n                     Summarize your key findings concisely (1-2 sentences).\n                     Output *only* the summary.\n                     \"\"\")\n         .description(\"Researches carbon capture methods.\")\n         .tools(googleSearchTool)\n         .outputKey(\"carbon_capture_result\") // Store result in state\n         .build();\n\n     // --- 2. Create the ParallelAgent (Runs researchers concurrently) ---\n     // This agent orchestrates the concurrent execution of the researchers.\n     // It finishes once all researchers have completed and stored their results in state.\n     ParallelAgent parallelResearchAgent =\n         ParallelAgent.builder()\n             .name(\"ParallelWebResearchAgent\")\n             .subAgents(researcherAgent1, researcherAgent2, researcherAgent3)\n             .description(\"Runs multiple research agents in parallel to gather information.\")\n             .build();\n\n     // --- 3. Define the Merger Agent (Runs *after* the parallel agents) ---\n     // This agent takes the results stored in the session state by the parallel agents\n     // and synthesizes them into a single, structured response with attributions.\n     LlmAgent mergerAgent =\n         LlmAgent.builder()\n             .name(\"SynthesisAgent\")\n             .model(GEMINI_MODEL)\n             .instruction(\n                 \"\"\"\n                       You are an AI Assistant responsible for combining research findings into a structured report.\n                       Your primary task is to synthesize the following research summaries, clearly attributing findings to their source areas. Structure your response using headings for each topic. Ensure the report is coherent and integrates the key points smoothly.\n                       **Crucially: Your entire response MUST be grounded *exclusively* on the information provided in the 'Input Summaries' below. Do NOT add any external knowledge, facts, or details not present in these specific summaries.**\n                       **Input Summaries:**\n\n                       *   **Renewable Energy:**\n                           {renewable_energy_result}\n\n                       *   **Electric Vehicles:**\n                           {ev_technology_result}\n\n                       *   **Carbon Capture:**\n                           {carbon_capture_result}\n\n                       **Output Format:**\n\n                       ## Summary of Recent Sustainable Technology Advancements\n\n                       ### Renewable Energy Findings\n                       (Based on RenewableEnergyResearcher's findings)\n                       [Synthesize and elaborate *only* on the renewable energy input summary provided above.]\n\n                       ### Electric Vehicle Findings\n                       (Based on EVResearcher's findings)\n                       [Synthesize and elaborate *only* on the EV input summary provided above.]\n\n                       ### Carbon Capture Findings\n                       (Based on CarbonCaptureResearcher's findings)\n                       [Synthesize and elaborate *only* on the carbon capture input summary provided above.]\n\n                       ### Overall Conclusion\n                       [Provide a brief (1-2 sentence) concluding statement that connects *only* the findings presented above.]\n\n                       Output *only* the structured report following this format. Do not include introductory or concluding phrases outside this structure, and strictly adhere to using only the provided input summary content.\n                       \"\"\")\n             .description(\n                 \"Combines research findings from parallel agents into a structured, cited report, strictly grounded on provided inputs.\")\n             // No tools needed for merging\n             // No output_key needed here, as its direct response is the final output of the sequence\n             .build();\n\n     // --- 4. Create the SequentialAgent (Orchestrates the overall flow) ---\n     // This is the main agent that will be run. It first executes the ParallelAgent\n     // to populate the state, and then executes the MergerAgent to produce the final output.\n     SequentialAgent sequentialPipelineAgent =\n         SequentialAgent.builder()\n             .name(\"ResearchAndSynthesisPipeline\")\n             // Run parallel research first, then merge\n             .subAgents(parallelResearchAgent, mergerAgent)\n             .description(\"Coordinates parallel research and synthesizes the results.\")\n             .build();\n\n     return sequentialPipelineAgent;\n   }\n\n   public static void runAgent(SequentialAgent sequentialPipelineAgent, String query) {\n     // Create an InMemoryRunner\n     InMemoryRunner runner = new InMemoryRunner(sequentialPipelineAgent, APP_NAME);\n     // InMemoryRunner automatically creates a session service. Create a session using the service\n     Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n     Content userMessage = Content.fromParts(Part.fromText(query));\n\n     // Run the agent\n     Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n     // Stream event response\n     eventStream.blockingForEach(\n         event -&gt; {\n           if (event.finalResponse()) {\n             System.out.printf(\"Event Author: %s \\n Event Response: %s \\n\\n\\n\", event.author(), event.stringifyContent());\n           }\n         });\n   }\n }\n</code></pre>"},{"location":"agents/workflow-agents/sequential-agents.en/","title":"Sequential agents","text":""},{"location":"agents/workflow-agents/sequential-agents.en/#the-sequentialagent","title":"The <code>SequentialAgent</code>","text":"<p>The <code>SequentialAgent</code> is a workflow agent that executes its sub-agents in the order they are specified in the list.</p> <p>Use the <code>SequentialAgent</code> when you want the execution to occur in a fixed, strict order.</p>"},{"location":"agents/workflow-agents/sequential-agents.en/#example","title":"Example","text":"<ul> <li>You want to build an agent that can summarize any webpage, using two tools: <code>Get Page Contents</code> and <code>Summarize Page</code>. Because the agent must always call <code>Get Page Contents</code> before calling <code>Summarize Page</code> (you can't summarize from nothing!), you should build your agent using a <code>SequentialAgent</code>.</li> </ul> <p>As with other workflow agents, the <code>SequentialAgent</code> is not powered by an LLM, and is thus deterministic in how it executes. That being said, workflow agents are concerned only with their execution (i.e. in sequence), and not their internal logic; the tools or sub-agents of a workflow agent may or may not utilize LLMs.</p>"},{"location":"agents/workflow-agents/sequential-agents.en/#how-it-works","title":"How it works","text":"<p>When the <code>SequentialAgent</code>'s <code>Run Async</code> method is called, it performs the following actions:</p> <ol> <li>Iteration: It iterates through the sub agents list in the order they were provided.</li> <li>Sub-Agent Execution: For each sub-agent in the list, it calls the sub-agent's <code>Run Async</code> method.</li> </ol> <p></p>"},{"location":"agents/workflow-agents/sequential-agents.en/#full-example-code-development-pipeline","title":"Full Example: Code Development Pipeline","text":"<p>Consider a simplified code development pipeline:</p> <ul> <li>Code Writer Agent:  An LLM Agent that generates initial code based on a specification.</li> <li>Code Reviewer Agent:  An LLM Agent that reviews the generated code for errors, style issues, and adherence to best practices.  It receives the output of the Code Writer Agent.</li> <li>Code Refactorer Agent: An LLM Agent that takes the reviewed code (and the reviewer's comments) and refactors it to improve quality and address issues.</li> </ul> <p>A <code>SequentialAgent</code> is perfect for this:</p> <pre><code>SequentialAgent(sub_agents=[CodeWriterAgent, CodeReviewerAgent, CodeRefactorerAgent])\n</code></pre> <p>This ensures the code is written, then reviewed, and finally refactored, in a strict, dependable order. The output from each sub-agent is passed to the next by storing them in state via Output Key.</p> <p>Shared Invocation Context</p> <p>The <code>SequentialAgent</code> passes the same <code>InvocationContext</code> to each of its sub-agents. This means they all share the same session state, including the temporary (<code>temp:</code>) namespace, making it easy to pass data between steps within a single turn.</p> Code PythonJava <pre><code># Part of agent.py --&gt; Follow https://google.github.io/adk-docs/get-started/quickstart/ to learn the setup\n\n# --- 1. Define Sub-Agents for Each Pipeline Stage ---\n\n# Code Writer Agent\n# Takes the initial specification (from user query) and writes code.\ncode_writer_agent = LlmAgent(\n    name=\"CodeWriterAgent\",\n    model=GEMINI_MODEL,\n    # Change 3: Improved instruction\n    instruction=\"\"\"You are a Python Code Generator.\nBased *only* on the user's request, write Python code that fulfills the requirement.\nOutput *only* the complete Python code block, enclosed in triple backticks (```python ... ```). \nDo not add any other text before or after the code block.\n\"\"\",\n    description=\"Writes initial Python code based on a specification.\",\n    output_key=\"generated_code\" # Stores output in state['generated_code']\n)\n\n# Code Reviewer Agent\n# Takes the code generated by the previous agent (read from state) and provides feedback.\ncode_reviewer_agent = LlmAgent(\n    name=\"CodeReviewerAgent\",\n    model=GEMINI_MODEL,\n    # Change 3: Improved instruction, correctly using state key injection\n    instruction=\"\"\"You are an expert Python Code Reviewer. \n    Your task is to provide constructive feedback on the provided code.\n\n    **Code to Review:**\n    ```python\n    {generated_code}\n    ```\n\n**Review Criteria:**\n1.  **Correctness:** Does the code work as intended? Are there logic errors?\n2.  **Readability:** Is the code clear and easy to understand? Follows PEP 8 style guidelines?\n3.  **Efficiency:** Is the code reasonably efficient? Any obvious performance bottlenecks?\n4.  **Edge Cases:** Does the code handle potential edge cases or invalid inputs gracefully?\n5.  **Best Practices:** Does the code follow common Python best practices?\n\n**Output:**\nProvide your feedback as a concise, bulleted list. Focus on the most important points for improvement.\nIf the code is excellent and requires no changes, simply state: \"No major issues found.\"\nOutput *only* the review comments or the \"No major issues\" statement.\n\"\"\",\n    description=\"Reviews code and provides feedback.\",\n    output_key=\"review_comments\", # Stores output in state['review_comments']\n)\n\n\n# Code Refactorer Agent\n# Takes the original code and the review comments (read from state) and refactors the code.\ncode_refactorer_agent = LlmAgent(\n    name=\"CodeRefactorerAgent\",\n    model=GEMINI_MODEL,\n    # Change 3: Improved instruction, correctly using state key injection\n    instruction=\"\"\"You are a Python Code Refactoring AI.\nYour goal is to improve the given Python code based on the provided review comments.\n\n  **Original Code:**\n  ```python\n  {generated_code}\n  ```\n\n  **Review Comments:**\n  {review_comments}\n\n**Task:**\nCarefully apply the suggestions from the review comments to refactor the original code.\nIf the review comments state \"No major issues found,\" return the original code unchanged.\nEnsure the final code is complete, functional, and includes necessary imports and docstrings.\n\n**Output:**\nOutput *only* the final, refactored Python code block, enclosed in triple backticks (```python ... ```). \nDo not add any other text before or after the code block.\n\"\"\",\n    description=\"Refactors code based on review comments.\",\n    output_key=\"refactored_code\", # Stores output in state['refactored_code']\n)\n\n\n# --- 2. Create the SequentialAgent ---\n# This agent orchestrates the pipeline by running the sub_agents in order.\ncode_pipeline_agent = SequentialAgent(\n    name=\"CodePipelineAgent\",\n    sub_agents=[code_writer_agent, code_reviewer_agent, code_refactorer_agent],\n    description=\"Executes a sequence of code writing, reviewing, and refactoring.\",\n    # The agents will run in the order provided: Writer -&gt; Reviewer -&gt; Refactorer\n)\n\n# For ADK tools compatibility, the root agent must be named `root_agent`\nroot_agent = code_pipeline_agent\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.SequentialAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\n\npublic class SequentialAgentExample {\n\n  private static final String APP_NAME = \"CodePipelineAgent\";\n  private static final String USER_ID = \"test_user_456\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n\n  public static void main(String[] args) {\n    SequentialAgentExample sequentialAgentExample = new SequentialAgentExample();\n    sequentialAgentExample.runAgent(\n        \"Write a Java function to calculate the factorial of a number.\");\n  }\n\n  public void runAgent(String prompt) {\n\n    LlmAgent codeWriterAgent =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"CodeWriterAgent\")\n            .description(\"Writes initial Java code based on a specification.\")\n            .instruction(\n                \"\"\"\n                You are a Java Code Generator.\n                Based *only* on the user's request, write Java code that fulfills the requirement.\n                Output *only* the complete Java code block, enclosed in triple backticks (```java ... ```).\n                Do not add any other text before or after the code block.\n                \"\"\")\n            .outputKey(\"generated_code\")\n            .build();\n\n    LlmAgent codeReviewerAgent =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"CodeReviewerAgent\")\n            .description(\"Reviews code and provides feedback.\")\n            .instruction(\n                \"\"\"\n                    You are an expert Java Code Reviewer.\n                    Your task is to provide constructive feedback on the provided code.\n\n                    **Code to Review:**\n                    ```java\n                    {generated_code}\n                    ```\n\n                    **Review Criteria:**\n                    1.  **Correctness:** Does the code work as intended? Are there logic errors?\n                    2.  **Readability:** Is the code clear and easy to understand? Follows Java style guidelines?\n                    3.  **Efficiency:** Is the code reasonably efficient? Any obvious performance bottlenecks?\n                    4.  **Edge Cases:** Does the code handle potential edge cases or invalid inputs gracefully?\n                    5.  **Best Practices:** Does the code follow common Java best practices?\n\n                    **Output:**\n                    Provide your feedback as a concise, bulleted list. Focus on the most important points for improvement.\n                    If the code is excellent and requires no changes, simply state: \"No major issues found.\"\n                    Output *only* the review comments or the \"No major issues\" statement.\n                \"\"\")\n            .outputKey(\"review_comments\")\n            .build();\n\n    LlmAgent codeRefactorerAgent =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"CodeRefactorerAgent\")\n            .description(\"Refactors code based on review comments.\")\n            .instruction(\n                \"\"\"\n                You are a Java Code Refactoring AI.\n                Your goal is to improve the given Java code based on the provided review comments.\n\n                  **Original Code:**\n                  ```java\n                  {generated_code}\n                  ```\n\n                  **Review Comments:**\n                  {review_comments}\n\n                **Task:**\n                Carefully apply the suggestions from the review comments to refactor the original code.\n                If the review comments state \"No major issues found,\" return the original code unchanged.\n                Ensure the final code is complete, functional, and includes necessary imports and docstrings.\n\n                **Output:**\n                Output *only* the final, refactored Java code block, enclosed in triple backticks (```java ... ```).\n                Do not add any other text before or after the code block.\n                \"\"\")\n            .outputKey(\"refactored_code\")\n            .build();\n\n    SequentialAgent codePipelineAgent =\n        SequentialAgent.builder()\n            .name(APP_NAME)\n            .description(\"Executes a sequence of code writing, reviewing, and refactoring.\")\n            // The agents will run in the order provided: Writer -&gt; Reviewer -&gt; Refactorer\n            .subAgents(codeWriterAgent, codeReviewerAgent, codeRefactorerAgent)\n            .build();\n\n    // Create an InMemoryRunner\n    InMemoryRunner runner = new InMemoryRunner(codePipelineAgent, APP_NAME);\n    // InMemoryRunner automatically creates a session service. Create a session using the service\n    Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n    Content userMessage = Content.fromParts(Part.fromText(prompt));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre>"},{"location":"agents/workflow-agents/sequential-agents/","title":"Sequential agents","text":""},{"location":"agents/workflow-agents/sequential-agents/#sequentialagent","title":"<code>SequentialAgent</code>","text":"<p><code>SequentialAgent</code> \u662f\u4e00\u7a2e\u5de5\u4f5c\u6d41\u7a0b agent\uff0c\u6703\u4f9d\u7167\u5217\u8868\u4e2d\u6307\u5b9a\u7684\u9806\u5e8f\u57f7\u884c\u5176\u5b50 agent\u3002</p> <p>\u7576\u4f60\u5e0c\u671b\u57f7\u884c\u9806\u5e8f\u662f\u56fa\u5b9a\u4e14\u56b4\u683c\u6642\uff0c\u8acb\u4f7f\u7528 <code>SequentialAgent</code>\u3002</p>"},{"location":"agents/workflow-agents/sequential-agents/#_1","title":"\u7bc4\u4f8b","text":"<ul> <li>\u4f60\u60f3\u5efa\u7acb\u4e00\u500b\u80fd\u6458\u8981\u4efb\u610f\u7db2\u9801\u7684 agent\uff0c\u4e26\u4f7f\u7528\u5169\u500b\u5de5\u5177\uff1a<code>Get Page Contents</code> \u548c <code>Summarize Page</code>\u3002\u7531\u65bc agent \u5fc5\u9808\u5728\u547c\u53eb <code>Summarize Page</code> \u524d\u5148\u547c\u53eb <code>Get Page Contents</code>\uff08\u4e0d\u80fd\u7121\u4e2d\u751f\u6709\u5730\u6458\u8981\uff01\uff09\uff0c\u56e0\u6b64\u4f60\u61c9\u8a72\u4f7f\u7528 <code>SequentialAgent</code> \u4f86\u5efa\u7acb\u4f60\u7684 agent\u3002</li> </ul> <p>\u5982\u540c\u5176\u4ed6\u5de5\u4f5c\u6d41\u7a0b agent\uff0c<code>SequentialAgent</code> \u4e26\u975e\u7531\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u9a45\u52d5\uff0c\u56e0\u6b64\u5176\u57f7\u884c\u65b9\u5f0f\u662f\u78ba\u5b9a\u6027\u7684\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5de5\u4f5c\u6d41\u7a0b agent \u53ea\u95dc\u5fc3\u57f7\u884c\u9806\u5e8f\uff08\u5373\u4f9d\u5e8f\u57f7\u884c\uff09\uff0c\u800c\u4e0d\u6d89\u53ca\u5167\u90e8\u908f\u8f2f\uff1b\u5de5\u4f5c\u6d41\u7a0b agent \u7684\u5de5\u5177\u6216\u5b50 agent \u53ef\u4ee5\u4f7f\u7528 LLM\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528\u3002</p>"},{"location":"agents/workflow-agents/sequential-agents/#_2","title":"\u904b\u4f5c\u65b9\u5f0f","text":"<p>\u7576\u547c\u53eb <code>SequentialAgent</code> \u7684 <code>Run Async</code> \u65b9\u6cd5\u6642\uff0c\u6703\u57f7\u884c\u4ee5\u4e0b\u52d5\u4f5c\uff1a</p> <ol> <li>\u8fed\u4ee3\uff1a \u4f9d\u7167\u63d0\u4f9b\u7684\u9806\u5e8f\uff0c\u904d\u6b77\u5b50 agent \u5217\u8868\u3002</li> <li>\u5b50 agent \u57f7\u884c\uff1a \u5c0d\u5217\u8868\u4e2d\u7684\u6bcf\u500b\u5b50 agent\uff0c\u547c\u53eb\u8a72\u5b50 agent \u7684 <code>Run Async</code> \u65b9\u6cd5\u3002</li> </ol> <p></p>"},{"location":"agents/workflow-agents/sequential-agents/#_3","title":"\u5b8c\u6574\u7bc4\u4f8b\uff1a\u7a0b\u5f0f\u78bc\u958b\u767c\u6d41\u7a0b","text":"<p>\u4ee5\u7c21\u5316\u7684\u7a0b\u5f0f\u78bc\u958b\u767c\u6d41\u7a0b\u70ba\u4f8b\uff1a</p> <ul> <li>Code Writer Agent\uff1a \u7531\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u9a45\u52d5\u7684 agent\uff0c\u6839\u64da\u898f\u683c\u7522\u751f\u521d\u59cb\u7a0b\u5f0f\u78bc\u3002</li> <li>Code Reviewer Agent\uff1a \u7531\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u9a45\u52d5\u7684 agent\uff0c\u8ca0\u8cac\u6aa2\u67e5\u7522\u751f\u7684\u7a0b\u5f0f\u78bc\u662f\u5426\u6709\u932f\u8aa4\u3001\u98a8\u683c\u554f\u984c\uff0c\u4ee5\u53ca\u662f\u5426\u7b26\u5408\u6700\u4f73\u5be6\u8e10\u3002\u5b83\u6703\u63a5\u6536 Code Writer Agent \u7684\u8f38\u51fa\u3002</li> <li>Code Refactorer Agent\uff1a \u7531\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u9a45\u52d5\u7684 agent\uff0c\u63a5\u6536\u7d93\u904e\u5be9\u67e5\u7684\u7a0b\u5f0f\u78bc\uff08\u4ee5\u53ca\u5be9\u67e5\u8005\u7684\u8a55\u8ad6\uff09\uff0c\u4e26\u9032\u884c\u91cd\u69cb\u4ee5\u63d0\u5347\u54c1\u8cea\u4e26\u89e3\u6c7a\u554f\u984c\u3002</li> </ul> <p><code>SequentialAgent</code> \u975e\u5e38\u9069\u5408\u7528\u65bc\u9019\u7a2e\u60c5\u5883\uff1a</p> <pre><code>SequentialAgent(sub_agents=[CodeWriterAgent, CodeReviewerAgent, CodeRefactorerAgent])\n</code></pre> <p>\u9019\u53ef\u78ba\u4fdd\u7a0b\u5f0f\u78bc\u6703\u5148\u88ab\u64b0\u5beb\uff0c\u63a5\u8457\u9032\u884c\u5be9\u67e5\uff0c\u6700\u5f8c\u518d\u9032\u884c\u91cd\u69cb\uff0c\u4e26\u4e14\u6309\u7167\u56b4\u683c\u4e14\u53ef\u9760\u7684\u9806\u5e8f\u57f7\u884c\u3002\u6bcf\u500b\u5b50 agent \u7684\u8f38\u51fa\u6703\u900f\u904e Output Key \u5132\u5b58\u5728 state \u4e2d\uff0c\u4e26\u50b3\u905e\u7d66\u4e0b\u4e00\u500b\u5b50 agent\u3002</p> <p>Shared Invocation Context</p> <p><code>SequentialAgent</code> \u6703\u5c07\u76f8\u540c\u7684 <code>InvocationContext</code> \u50b3\u905e\u7d66\u5176\u6240\u6709\u5b50 agent\u3002\u9019\u8868\u793a\u5b83\u5011\u90fd\u5171\u4eab\u76f8\u540c\u7684 session state\uff0c\u5305\u62ec\u66ab\u5b58\uff08<code>temp:</code>\uff09\u547d\u540d\u7a7a\u9593\uff0c\u4f7f\u5f97\u5728\u55ae\u4e00 agent \u56de\u5408\u5167\u65bc\u5404\u6b65\u9a5f\u4e4b\u9593\u50b3\u905e\u8cc7\u6599\u8b8a\u5f97\u5341\u5206\u5bb9\u6613\u3002</p> Code PythonJava <pre><code># Part of agent.py --&gt; Follow https://google.github.io/adk-docs/get-started/quickstart/ to learn the setup\n\n# --- 1. Define Sub-Agents for Each Pipeline Stage ---\n\n# Code Writer Agent\n# Takes the initial specification (from user query) and writes code.\ncode_writer_agent = LlmAgent(\n    name=\"CodeWriterAgent\",\n    model=GEMINI_MODEL,\n    # Change 3: Improved instruction\n    instruction=\"\"\"You are a Python Code Generator.\nBased *only* on the user's request, write Python code that fulfills the requirement.\nOutput *only* the complete Python code block, enclosed in triple backticks (```python ... ```). \nDo not add any other text before or after the code block.\n\"\"\",\n    description=\"Writes initial Python code based on a specification.\",\n    output_key=\"generated_code\" # Stores output in state['generated_code']\n)\n\n# Code Reviewer Agent\n# Takes the code generated by the previous agent (read from state) and provides feedback.\ncode_reviewer_agent = LlmAgent(\n    name=\"CodeReviewerAgent\",\n    model=GEMINI_MODEL,\n    # Change 3: Improved instruction, correctly using state key injection\n    instruction=\"\"\"You are an expert Python Code Reviewer. \n    Your task is to provide constructive feedback on the provided code.\n\n    **Code to Review:**\n    ```python\n    {generated_code}\n    ```\n\n**Review Criteria:**\n1.  **Correctness:** Does the code work as intended? Are there logic errors?\n2.  **Readability:** Is the code clear and easy to understand? Follows PEP 8 style guidelines?\n3.  **Efficiency:** Is the code reasonably efficient? Any obvious performance bottlenecks?\n4.  **Edge Cases:** Does the code handle potential edge cases or invalid inputs gracefully?\n5.  **Best Practices:** Does the code follow common Python best practices?\n\n**Output:**\nProvide your feedback as a concise, bulleted list. Focus on the most important points for improvement.\nIf the code is excellent and requires no changes, simply state: \"No major issues found.\"\nOutput *only* the review comments or the \"No major issues\" statement.\n\"\"\",\n    description=\"Reviews code and provides feedback.\",\n    output_key=\"review_comments\", # Stores output in state['review_comments']\n)\n\n\n# Code Refactorer Agent\n# Takes the original code and the review comments (read from state) and refactors the code.\ncode_refactorer_agent = LlmAgent(\n    name=\"CodeRefactorerAgent\",\n    model=GEMINI_MODEL,\n    # Change 3: Improved instruction, correctly using state key injection\n    instruction=\"\"\"You are a Python Code Refactoring AI.\nYour goal is to improve the given Python code based on the provided review comments.\n\n  **Original Code:**\n  ```python\n  {generated_code}\n  ```\n\n  **Review Comments:**\n  {review_comments}\n\n**Task:**\nCarefully apply the suggestions from the review comments to refactor the original code.\nIf the review comments state \"No major issues found,\" return the original code unchanged.\nEnsure the final code is complete, functional, and includes necessary imports and docstrings.\n\n**Output:**\nOutput *only* the final, refactored Python code block, enclosed in triple backticks (```python ... ```). \nDo not add any other text before or after the code block.\n\"\"\",\n    description=\"Refactors code based on review comments.\",\n    output_key=\"refactored_code\", # Stores output in state['refactored_code']\n)\n\n\n# --- 2. Create the SequentialAgent ---\n# This agent orchestrates the pipeline by running the sub_agents in order.\ncode_pipeline_agent = SequentialAgent(\n    name=\"CodePipelineAgent\",\n    sub_agents=[code_writer_agent, code_reviewer_agent, code_refactorer_agent],\n    description=\"Executes a sequence of code writing, reviewing, and refactoring.\",\n    # The agents will run in the order provided: Writer -&gt; Reviewer -&gt; Refactorer\n)\n\n# For ADK tools compatibility, the root agent must be named `root_agent`\nroot_agent = code_pipeline_agent\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.SequentialAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\n\npublic class SequentialAgentExample {\n\n  private static final String APP_NAME = \"CodePipelineAgent\";\n  private static final String USER_ID = \"test_user_456\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n\n  public static void main(String[] args) {\n    SequentialAgentExample sequentialAgentExample = new SequentialAgentExample();\n    sequentialAgentExample.runAgent(\n        \"Write a Java function to calculate the factorial of a number.\");\n  }\n\n  public void runAgent(String prompt) {\n\n    LlmAgent codeWriterAgent =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"CodeWriterAgent\")\n            .description(\"Writes initial Java code based on a specification.\")\n            .instruction(\n                \"\"\"\n                You are a Java Code Generator.\n                Based *only* on the user's request, write Java code that fulfills the requirement.\n                Output *only* the complete Java code block, enclosed in triple backticks (```java ... ```).\n                Do not add any other text before or after the code block.\n                \"\"\")\n            .outputKey(\"generated_code\")\n            .build();\n\n    LlmAgent codeReviewerAgent =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"CodeReviewerAgent\")\n            .description(\"Reviews code and provides feedback.\")\n            .instruction(\n                \"\"\"\n                    You are an expert Java Code Reviewer.\n                    Your task is to provide constructive feedback on the provided code.\n\n                    **Code to Review:**\n                    ```java\n                    {generated_code}\n                    ```\n\n                    **Review Criteria:**\n                    1.  **Correctness:** Does the code work as intended? Are there logic errors?\n                    2.  **Readability:** Is the code clear and easy to understand? Follows Java style guidelines?\n                    3.  **Efficiency:** Is the code reasonably efficient? Any obvious performance bottlenecks?\n                    4.  **Edge Cases:** Does the code handle potential edge cases or invalid inputs gracefully?\n                    5.  **Best Practices:** Does the code follow common Java best practices?\n\n                    **Output:**\n                    Provide your feedback as a concise, bulleted list. Focus on the most important points for improvement.\n                    If the code is excellent and requires no changes, simply state: \"No major issues found.\"\n                    Output *only* the review comments or the \"No major issues\" statement.\n                \"\"\")\n            .outputKey(\"review_comments\")\n            .build();\n\n    LlmAgent codeRefactorerAgent =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(\"CodeRefactorerAgent\")\n            .description(\"Refactors code based on review comments.\")\n            .instruction(\n                \"\"\"\n                You are a Java Code Refactoring AI.\n                Your goal is to improve the given Java code based on the provided review comments.\n\n                  **Original Code:**\n                  ```java\n                  {generated_code}\n                  ```\n\n                  **Review Comments:**\n                  {review_comments}\n\n                **Task:**\n                Carefully apply the suggestions from the review comments to refactor the original code.\n                If the review comments state \"No major issues found,\" return the original code unchanged.\n                Ensure the final code is complete, functional, and includes necessary imports and docstrings.\n\n                **Output:**\n                Output *only* the final, refactored Java code block, enclosed in triple backticks (```java ... ```).\n                Do not add any other text before or after the code block.\n                \"\"\")\n            .outputKey(\"refactored_code\")\n            .build();\n\n    SequentialAgent codePipelineAgent =\n        SequentialAgent.builder()\n            .name(APP_NAME)\n            .description(\"Executes a sequence of code writing, reviewing, and refactoring.\")\n            // The agents will run in the order provided: Writer -&gt; Reviewer -&gt; Refactorer\n            .subAgents(codeWriterAgent, codeReviewerAgent, codeRefactorerAgent)\n            .build();\n\n    // Create an InMemoryRunner\n    InMemoryRunner runner = new InMemoryRunner(codePipelineAgent, APP_NAME);\n    // InMemoryRunner automatically creates a session service. Create a session using the service\n    Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n    Content userMessage = Content.fromParts(Part.fromText(prompt));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre>"},{"location":"api-reference/","title":"API \u53c3\u8003","text":"<p>Agent Development Kit (ADK) \u63d0\u4f9b\u5b8c\u6574\u7684 Python \u8207 Java API \u53c3\u8003\u6587\u4ef6\uff0c\u8b93\u4f60\u6df1\u5165\u4e86\u89e3\u6240\u6709\u53ef\u7528\u7684\u985e\u5225\u3001\u65b9\u6cd5\u8207\u529f\u80fd\u3002</p> <ul> <li> <p> Python API \u53c3\u8003</p> <p>\u63a2\u7d22 Python Agent Development Kit \u7684\u5b8c\u6574 API \u6587\u4ef6\u3002\u4f60\u53ef\u4ee5\u67e5\u95b1\u6240\u6709\u6a21\u7d44\u3001\u985e\u5225\u3001\u51fd\u5f0f\u7684\u8a73\u7d30\u8cc7\u8a0a\u8207\u7bc4\u4f8b\uff0c\u5354\u52a9\u4f60\u4ee5 Python \u5efa\u7acb\u9032\u968e\u7684 AI agent\u3002</p> <p> \u67e5\u770b Python API \u6587\u4ef6 </p> </li> </ul> <ul> <li> <p> Java API \u53c3\u8003</p> <p>\u5b58\u53d6 Java Agent Development Kit \u7684\u5b8c\u6574 Javadoc\u3002\u6b64\u53c3\u8003\u6587\u4ef6\u8a73\u7d30\u8aaa\u660e\u6240\u6709\u5957\u4ef6\u3001\u985e\u5225\u3001\u4ecb\u9762\u8207\u65b9\u6cd5\uff0c\u5354\u52a9\u4f60\u4ee5 Java \u958b\u767c\u7a69\u5065\u7684 AI agent\u3002</p> <p> \u67e5\u770b Java API \u6587\u4ef6 </p> </li> </ul> <ul> <li> <p> CLI \u53c3\u8003</p> <p>\u63a2\u7d22\u547d\u4ee4\u5217\u4ecb\u9762 (Command Line Interface, CLI) \u7684\u5b8c\u6574 API \u6587\u4ef6\uff0c\u5305\u542b\u6240\u6709\u6709\u6548\u9078\u9805\u8207\u5b50\u6307\u4ee4\u3002</p> <p> \u67e5\u770b CLI \u6587\u4ef6 </p> </li> </ul> <ul> <li> <p> Agent Config YAML \u53c3\u8003</p> <p>\u67e5\u770b\u7528\u65bc\u8a2d\u5b9a ADK \u7684 YAML \u683c\u5f0f Agent Config \u8a9e\u6cd5\u5b8c\u6574\u8aaa\u660e\u3002</p> <p> \u67e5\u770b Agent Config \u53c3\u8003 </p> </li> </ul> <ul> <li> <p> REST API \u53c3\u8003</p> <p>\u63a2\u7d22 ADK \u7db2\u9801\u4f3a\u670d\u5668\u7684 REST API\u3002\u6b64\u53c3\u8003\u6587\u4ef6\u63d0\u4f9b\u6240\u6709\u53ef\u7528 API \u7aef\u9ede\u3001\u8acb\u6c42\u8207\u56de\u61c9\u683c\u5f0f\u7b49\u8a73\u7d30\u8cc7\u8a0a\u3002</p> <p> \u67e5\u770b REST API \u6587\u4ef6 </p> </li> </ul>"},{"location":"api-reference/index.en/","title":"API Reference","text":"<p>The Agent Development Kit (ADK) provides comprehensive API references for both Python and Java, allowing you to dive deep into all available classes, methods, and functionalities.</p> <ul> <li> <p> Python API Reference</p> <p>Explore the complete API documentation for the Python Agent Development Kit. Discover detailed information on all modules, classes, functions, and examples to build sophisticated AI agents with Python.</p> <p> View Python API Docs </p> </li> </ul> <ul> <li> <p> Java API Reference</p> <p>Access the comprehensive Javadoc for the Java Agent Development Kit. This reference provides detailed specifications for all packages, classes, interfaces, and methods, enabling you to develop robust AI agents using Java.</p> <p> View Java API Docs </p> </li> </ul> <ul> <li> <p> CLI Reference</p> <p>Explore the complete API documentation for the CLI including all of the  valid options and subcommands. </p> <p> View CLI Docs </p> </li> </ul> <ul> <li> <p> Agent Config YAML reference</p> <p>View the full Agent Config syntax for configuring ADK with  YAML text files.</p> <p> View Agent Config reference </p> </li> </ul> <ul> <li> <p> REST API Reference</p> <p>Explore the REST API for the ADK web server. This reference provides details on the available endpoints, request and response formats, and more.</p> <p> View REST API Docs </p> </li> </ul>"},{"location":"api-reference/rest/","title":"REST API \u53c3\u8003","text":"<p>\u672c\u9801\u63d0\u4f9b\u7531 Agent Development Kit (ADK) \u7db2\u9801\u4f3a\u670d\u5668\u6240\u63d0\u4f9b\u7684 REST API \u53c3\u8003\u8aaa\u660e\u3002 \u5982\u9700\u5be6\u969b\u4f7f\u7528 ADK REST API \u7684\u8a73\u7d30\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 Testing\u3002 </p> <p>Tip</p> <p>\u4f60\u53ef\u4ee5\u5728\u57f7\u884c\u4e2d\u7684 Agent Development Kit (ADK) web \u4f3a\u670d\u5668\u4e0a\uff0c\u900f\u904e\u700f\u89bd <code>/docs</code> \u4f4d\u7f6e\u4f86\u6aa2\u8996\u6700\u65b0\u7684 API \u53c3\u8003\uff0c\u4f8b\u5982\uff1a<code>http://localhost:8000/docs</code></p>"},{"location":"api-reference/rest/#_1","title":"\u7aef\u9ede","text":""},{"location":"api-reference/rest/#run","title":"<code>/run</code>","text":"<p>\u6b64 API \u7aef\u9ede\u6703\u57f7\u884c\u4e00\u6b21 agent run\u3002\u5b83\u63a5\u53d7\u4e00\u500b\u5305\u542b\u57f7\u884c\u7d30\u7bc0\u7684 JSON \u8f09\u8377\uff0c\u4e26\u56de\u50b3\u5728\u57f7\u884c\u671f\u9593\u7522\u751f\u7684\u4e8b\u4ef6\uff08event\uff09\u5217\u8868\u3002</p> <p>Request Body</p> <p>\u8acb\u6c42\u4e3b\u9ad4\u61c9\u70ba\u4e00\u500b JSON \u7269\u4ef6\uff0c\u5305\u542b\u4ee5\u4e0b\u6b04\u4f4d\uff1a</p> <ul> <li><code>app_name</code>\uff08string\uff0c\u5fc5\u586b\uff09\uff1a\u8981\u57f7\u884c\u7684 agent \u540d\u7a31\u3002</li> <li><code>user_id</code>\uff08string\uff0c\u5fc5\u586b\uff09\uff1a\u4f7f\u7528\u8005\u7684 ID\u3002</li> <li><code>session_id</code>\uff08string\uff0c\u5fc5\u586b\uff09\uff1asession \u7684 ID\u3002</li> <li><code>new_message</code>\uff08Content\uff0c\u5fc5\u586b\uff09\uff1a\u8981\u50b3\u9001\u7d66 agent \u7684\u65b0\u8a0a\u606f\u3002\u8a73\u60c5\u8acb\u53c3\u95b1 Content \u7ae0\u7bc0\u3002</li> <li><code>streaming</code>\uff08boolean\uff0c\u9078\u586b\uff09\uff1a\u662f\u5426\u4f7f\u7528\u4e32\u6d41\u3002\u9810\u8a2d\u70ba <code>false</code>\u3002</li> <li><code>state_delta</code>\uff08object\uff0c\u9078\u586b\uff09\uff1a\u5728\u57f7\u884c\u524d\u8981\u5957\u7528\u7684 state \u5dee\u7570\uff08delta\uff09\u3002</li> </ul> <p>Response Body</p> <p>\u56de\u61c9\u4e3b\u9ad4\u70ba\u4e00\u500b Event \u7269\u4ef6\u7684 JSON \u9663\u5217\u3002</p>"},{"location":"api-reference/rest/#run_sse","title":"<code>/run_sse</code>","text":"<p>\u6b64 API \u7aef\u9ede\u6703\u4f7f\u7528 Server Sent Events (SSE) \u4f86\u4e32\u6d41\u56de\u61c9\uff0c\u57f7\u884c\u4e00\u6b21 agent run\u3002\u5b83\u63a5\u53d7\u8207 <code>/run</code> \u7aef\u9ede\u76f8\u540c\u7684 JSON \u8f09\u8377\u3002</p> <p>Request Body</p> <p>\u8acb\u6c42\u4e3b\u9ad4\u8207 <code>/run</code> \u7aef\u9ede\u76f8\u540c\u3002</p> <p>Response Body</p> <p>\u56de\u61c9\u662f\u4e00\u500b Server Sent Events (SSE) \u4e32\u6d41\u3002\u6bcf\u500b\u4e8b\u4ef6\u90fd\u662f\u4e00\u500b\u4ee3\u8868 Event \u7684 JSON \u7269\u4ef6\u3002</p>"},{"location":"api-reference/rest/#_2","title":"\u7269\u4ef6","text":""},{"location":"api-reference/rest/#content","title":"<code>Content</code> \u7269\u4ef6","text":"<p><code>Content</code> \u7269\u4ef6\u4ee3\u8868\u4e00\u5247\u8a0a\u606f\u7684\u5167\u5bb9\u3002\u5176\u7d50\u69cb\u5982\u4e0b\uff1a</p> <pre><code>{\n  \"parts\": [\n    {\n      \"text\": \"...\"\n    }\n  ],\n  \"role\": \"...\"\n}\n</code></pre> <ul> <li><code>parts</code>\uff1a\u90e8\u5206\uff08part\uff09\u7684\u6e05\u55ae\u3002\u6bcf\u500b\u90e8\u5206\u53ef\u4ee5\u662f\u6587\u5b57\u6216\u51fd\u5f0f\u547c\u53eb\uff08function call\uff09\u3002</li> <li><code>role</code>\uff1a\u8a0a\u606f\u4f5c\u8005\u7684\u89d2\u8272\uff08\u4f8b\u5982\uff1a\"user\"\u3001\"model\"\uff09\u3002</li> </ul>"},{"location":"api-reference/rest/#event","title":"<code>Event</code> \u7269\u4ef6","text":"<p><code>Event</code> \u7269\u4ef6\u4ee3\u8868 agent \u57f7\u884c\u671f\u9593\u767c\u751f\u7684\u4e00\u500b\u4e8b\u4ef6\uff08event\uff09\u3002\u5b83\u5177\u6709\u8907\u96dc\u7684\u7d50\u69cb\uff0c\u5305\u542b\u8a31\u591a\u53ef\u9078\u6b04\u4f4d\u3002\u6700\u91cd\u8981\u7684\u6b04\u4f4d\u5982\u4e0b\uff1a</p> <ul> <li><code>id</code>\uff1a\u4e8b\u4ef6\u7684 ID\u3002</li> <li><code>timestamp</code>\uff1a\u4e8b\u4ef6\u7684\u6642\u9593\u6233\u8a18\uff08timestamp\uff09\u3002</li> <li><code>author</code>\uff1a\u4e8b\u4ef6\u7684\u4f5c\u8005\u3002</li> <li><code>content</code>\uff1a\u4e8b\u4ef6\u7684\u5167\u5bb9\u3002</li> </ul>"},{"location":"api-reference/rest/index.en/","title":"REST API Reference","text":"<p>This page provides a reference for the REST API provided by the ADK web server. For details on using the ADK REST API in practice, see Testing. </p> <p>Tip</p> <p>You can view an updated API reference on a running ADK web server by browsing  the <code>/docs</code> location, for example at: <code>http://localhost:8000/docs</code></p>"},{"location":"api-reference/rest/index.en/#endpoints","title":"Endpoints","text":""},{"location":"api-reference/rest/index.en/#run","title":"<code>/run</code>","text":"<p>This endpoint executes an agent run. It takes a JSON payload with the details of the run and returns a list of events generated during the run.</p> <p>Request Body</p> <p>The request body should be a JSON object with the following fields:</p> <ul> <li><code>app_name</code> (string, required): The name of the agent to run.</li> <li><code>user_id</code> (string, required): The ID of the user.</li> <li><code>session_id</code> (string, required): The ID of the session.</li> <li><code>new_message</code> (Content, required): The new message to send to the agent. See the Content section for more details.</li> <li><code>streaming</code> (boolean, optional): Whether to use streaming. Defaults to <code>false</code>.</li> <li><code>state_delta</code> (object, optional): A delta of the state to apply before the run.</li> </ul> <p>Response Body</p> <p>The response body is a JSON array of Event objects.</p>"},{"location":"api-reference/rest/index.en/#run_sse","title":"<code>/run_sse</code>","text":"<p>This endpoint executes an agent run using Server-Sent Events (SSE) for streaming responses. It takes the same JSON payload as the <code>/run</code> endpoint.</p> <p>Request Body</p> <p>The request body is the same as for the <code>/run</code> endpoint.</p> <p>Response Body</p> <p>The response is a stream of Server-Sent Events. Each event is a JSON object representing an Event.</p>"},{"location":"api-reference/rest/index.en/#objects","title":"Objects","text":""},{"location":"api-reference/rest/index.en/#content-object","title":"<code>Content</code> object","text":"<p>The <code>Content</code> object represents the content of a message. It has the following structure:</p> <pre><code>{\n  \"parts\": [\n    {\n      \"text\": \"...\"\n    }\n  ],\n  \"role\": \"...\"\n}\n</code></pre> <ul> <li><code>parts</code>: A list of parts. Each part can be either text or a function call.</li> <li><code>role</code>: The role of the author of the message (e.g., \"user\", \"model\").</li> </ul>"},{"location":"api-reference/rest/index.en/#event-object","title":"<code>Event</code> object","text":"<p>The <code>Event</code> object represents an event that occurred during an agent run. It has a complex structure with many optional fields. The most important fields are:</p> <ul> <li><code>id</code>: The ID of the event.</li> <li><code>timestamp</code>: The timestamp of the event.</li> <li><code>author</code>: The author of the event.</li> <li><code>content</code>: The content of the event.</li> </ul>"},{"location":"artifacts/","title":"Artifacts","text":"<p>\u5728 Agent Development Kit (ADK) \u4e2d\uff0cArtifacts\uff08\u7522\u7269\uff09\u662f\u4e00\u7a2e\u95dc\u9375\u6a5f\u5236\uff0c\u7528\u65bc\u7ba1\u7406\u5177\u540d\u4e14\u6709\u7248\u672c\u7684\u4e8c\u9032\u4f4d\u8cc7\u6599\uff0c\u9019\u4e9b\u8cc7\u6599\u53ef\u4ee5\u8207\u7279\u5b9a\u4f7f\u7528\u8005\u4e92\u52d5 session \u7d81\u5b9a\uff0c\u6216\u662f\u8de8\u591a\u500b session \u6301\u4e45\u4fdd\u5b58\u65bc\u4f7f\u7528\u8005\u540d\u4e0b\u3002Artifacts \u8b93\u4f60\u7684 agent \u548c tools \u80fd\u8655\u7406\u4e0d\u50c5\u9650\u65bc\u7d14\u6587\u5b57\u5b57\u4e32\u7684\u8cc7\u6599\uff0c\u9032\u4e00\u6b65\u652f\u63f4\u5305\u542b\u6a94\u6848\u3001\u5716\u7247\u3001\u97f3\u8a0a\u53ca\u5176\u4ed6\u4e8c\u9032\u4f4d\u683c\u5f0f\u7684\u66f4\u8c50\u5bcc\u4e92\u52d5\u3002</p> <p>Note</p> <p>\u7279\u5b9a\u7684\u57fa\u672c\u64cd\u4f5c\uff08primitive\uff09\u6240\u4f7f\u7528\u7684\u53c3\u6578\u6216\u65b9\u6cd5\u540d\u7a31\uff0c\u53ef\u80fd\u6703\u4f9d\u4e0d\u540c SDK \u8a9e\u8a00\u7565\u6709\u5dee\u7570\uff08\u4f8b\u5982\uff1aPython \u4e2d\u70ba <code>save_artifact</code>\uff0cJava \u4e2d\u70ba <code>saveArtifact</code>\uff09\u3002\u8a73\u7d30\u8cc7\u8a0a\u8acb\u53c3\u8003\u5404\u8a9e\u8a00\u7684 API \u6587\u4ef6\u8aaa\u660e\u3002</p>"},{"location":"artifacts/#artifact","title":"\u4ec0\u9ebc\u662f Artifact\uff1f","text":"<ul> <li> <p>\u5b9a\u7fa9\uff1a Artifact \u672c\u8cea\u4e0a\u662f\u4e00\u6bb5\u4e8c\u9032\u4f4d\u8cc7\u6599\uff08\u5982\u6a94\u6848\u5167\u5bb9\uff09\uff0c\u5728\u7279\u5b9a\u7bc4\u570d\uff08session \u6216 user\uff09\u5167\u4ee5\u552f\u4e00\u7684 <code>filename</code> \u5b57\u4e32\u4f5c\u70ba\u8b58\u5225\u3002\u6bcf\u6b21\u4ee5\u76f8\u540c\u6a94\u540d\u5132\u5b58 artifact \u6642\uff0c\u7cfb\u7d71\u90fd\u6703\u5efa\u7acb\u4e00\u500b\u65b0\u7248\u672c\u3002</p> </li> <li> <p>\u8868\u793a\u65b9\u5f0f\uff1a Artifact \u4e00\u5f8b\u4ee5\u6a19\u6e96\u7684 <code>google.genai.types.Part</code> \u7269\u4ef6\u4f86\u8868\u793a\u3002\u5176\u6838\u5fc3\u8cc7\u6599\u901a\u5e38\u5132\u5b58\u5728 <code>Part</code> \u7684\u5167\u5d4c\u8cc7\u6599\u7d50\u69cb\u4e2d\uff08\u53ef\u900f\u904e <code>inline_data</code> \u5b58\u53d6\uff09\uff0c\u8a72\u7d50\u69cb\u5305\u542b\uff1a</p> <ul> <li><code>data</code>\uff1a\u539f\u59cb\u4e8c\u9032\u4f4d\u5167\u5bb9\uff0c\u4ee5 bytes \u5f62\u5f0f\u5132\u5b58\u3002</li> <li><code>mime_type</code>\uff1a\u4e00\u500b\u5b57\u4e32\uff0c\u6a19\u793a\u8cc7\u6599\u7684\u578b\u614b\uff08\u4f8b\u5982\uff1a<code>\"image/png\"</code>\u3001<code>\"application/pdf\"</code>\uff09\u3002\u9019\u5c0d\u65bc\u5f8c\u7e8c\u6b63\u78ba\u89e3\u8b80\u8cc7\u6599\u975e\u5e38\u91cd\u8981\u3002</li> </ul> </li> </ul> PythonJava <pre><code># Example of how an artifact might be represented as a types.Part\nimport google.genai.types as types\n\n# Assume 'image_bytes' contains the binary data of a PNG image\nimage_bytes = b'\\x89PNG\\r\\n\\x1a\\n...' # Placeholder for actual image bytes\n\nimage_artifact = types.Part(\n    inline_data=types.Blob(\n        mime_type=\"image/png\",\n        data=image_bytes\n    )\n)\n\n# You can also use the convenience constructor:\n# image_artifact_alt = types.Part.from_bytes(data=image_bytes, mime_type=\"image/png\")\n\nprint(f\"Artifact MIME Type: {image_artifact.inline_data.mime_type}\")\nprint(f\"Artifact Data (first 10 bytes): {image_artifact.inline_data.data[:10]}...\")\n</code></pre> <pre><code>import com.google.genai.types.Part;\nimport java.nio.charset.StandardCharsets;\n\npublic class ArtifactExample {\n    public static void main(String[] args) {\n        // Assume 'imageBytes' contains the binary data of a PNG image\n        byte[] imageBytes = {(byte) 0x89, (byte) 0x50, (byte) 0x4E, (byte) 0x47, (byte) 0x0D, (byte) 0x0A, (byte) 0x1A, (byte) 0x0A, (byte) 0x01, (byte) 0x02}; // Placeholder for actual image bytes\n\n        // Create an image artifact using Part.fromBytes\n        Part imageArtifact = Part.fromBytes(imageBytes, \"image/png\");\n\n        System.out.println(\"Artifact MIME Type: \" + imageArtifact.inlineData().get().mimeType().get());\n        System.out.println(\n            \"Artifact Data (first 10 bytes): \"\n                + new String(imageArtifact.inlineData().get().data().get(), 0, 10, StandardCharsets.UTF_8)\n                + \"...\");\n    }\n}\n</code></pre> <ul> <li>\u6301\u4e45\u5316\u8207\u7ba1\u7406\uff1a Artifact\uff08\u4eba\u5de5\u7522\u7269\uff09\u4e26\u4e0d\u6703\u76f4\u63a5\u5132\u5b58\u5728 agent \u6216 session state \u4e4b\u4e2d\u3002\u5b83\u5011\u7684\u5132\u5b58\u8207\u5b58\u53d6\u7531\u5c08\u9580\u7684 Artifact Service\uff08<code>BaseArtifactService</code> \u7684\u5be6\u4f5c\uff0c\u5b9a\u7fa9\u65bc <code>google.adk.artifacts</code>\uff09\u8ca0\u8cac\u7ba1\u7406\u3002Agent Development Kit (ADK) \u63d0\u4f9b\u4e86\u591a\u7a2e\u5be6\u4f5c\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a<ul> <li>\u7528\u65bc\u6e2c\u8a66\u6216\u66ab\u5b58\u7684\u8a18\u61b6\u9ad4\u5167\u670d\u52d9\uff08\u5982 Python \u7684 <code>InMemoryArtifactService</code>\uff0c\u5b9a\u7fa9\u65bc <code>google.adk.artifacts.in_memory_artifact_service.py</code>\uff09\u3002</li> <li>\u4f7f\u7528 Google Cloud Storage (GCS) \u9032\u884c\u6301\u4e45\u5316\u5132\u5b58\u7684\u670d\u52d9\uff08\u5982 Python \u7684 <code>GcsArtifactService</code>\uff0c\u5b9a\u7fa9\u65bc <code>google.adk.artifacts.gcs_artifact_service.py</code>\uff09\u3002 \u7576\u4f60\u5132\u5b58\u8cc7\u6599\u6642\uff0c\u6240\u9078\u64c7\u7684\u670d\u52d9\u5be6\u4f5c\u6703\u81ea\u52d5\u8655\u7406\u7248\u672c\u7ba1\u7406\u3002</li> </ul> </li> </ul>"},{"location":"artifacts/#artifact_1","title":"\u70ba\u4ec0\u9ebc\u8981\u4f7f\u7528 Artifact\uff1f","text":"<p>\u96d6\u7136 session state \u9069\u5408\u7528\u4f86\u5132\u5b58\u5c0f\u578b\u7684\u8a2d\u5b9a\u6216\u5c0d\u8a71\u4e0a\u4e0b\u6587\uff08\u5982\u5b57\u4e32\u3001\u6578\u5b57\u3001\u5e03\u6797\u503c\uff0c\u6216\u5c0f\u578b\u5b57\u5178/\u6e05\u55ae\uff09\uff0cArtifact \u5247\u5c08\u70ba\u8655\u7406\u4e8c\u9032\u4f4d\u6216\u5927\u578b\u8cc7\u6599\u7684\u60c5\u5883\u800c\u8a2d\u8a08\uff1a</p> <ol> <li>\u8655\u7406\u975e\u6587\u5b57\u578b\u8cc7\u6599\uff1a \u53ef\u4ee5\u8f15\u9b06\u5132\u5b58\u8207\u8b80\u53d6\u5716\u7247\u3001\u97f3\u8a0a\u7247\u6bb5\u3001\u5f71\u7247\u7247\u6bb5\u3001PDF\u3001\u8a66\u7b97\u8868\uff0c\u6216\u4efb\u4f55\u8207 agent \u529f\u80fd\u76f8\u95dc\u7684\u6a94\u6848\u683c\u5f0f\u3002  </li> <li>\u6301\u4e45\u5316\u5927\u578b\u8cc7\u6599\uff1a session state \u901a\u5e38\u4e0d\u9069\u5408\u5132\u5b58\u5927\u91cf\u8cc7\u6599\u3002Artifact \u63d0\u4f9b\u5c08\u5c6c\u6a5f\u5236\u4f86\u6301\u4e45\u5316\u8f03\u5927\u7684\u4e8c\u9032\u4f4d\u8cc7\u6599\uff0c\u4e0d\u6703\u8b93 session state \u6df7\u4e82\u3002  </li> <li>\u4f7f\u7528\u8005\u6a94\u6848\u7ba1\u7406\uff1a \u63d0\u4f9b\u4f7f\u7528\u8005\u4e0a\u50b3\u6a94\u6848\uff08\u53ef\u5132\u5b58\u70ba artifact\uff09\u7684\u80fd\u529b\uff0c\u4e26\u80fd\u8b93\u4f7f\u7528\u8005\u53d6\u5f97\u6216\u4e0b\u8f09 agent \u7522\u751f\u7684\u6a94\u6848\uff08\u5f9e artifact \u8f09\u5165\uff09\u3002  </li> <li>\u8f38\u51fa\u5171\u4eab\uff1a \u8b93\u5de5\u5177\u6216 agent \u7522\u751f\u4e8c\u9032\u4f4d\u8f38\u51fa\uff08\u5982 PDF \u5831\u544a\u6216\u7522\u751f\u7684\u5716\u7247\uff09\uff0c\u53ef\u900f\u904e <code>save_artifact</code> \u5132\u5b58\uff0c\u4e26\u5728\u61c9\u7528\u7a0b\u5f0f\u7684\u5176\u4ed6\u90e8\u5206\u6216\u5f8c\u7e8c session\uff08\u82e5\u4f7f\u7528\u4f7f\u7528\u8005\u547d\u540d\u7a7a\u9593\uff09\u4e2d\u5b58\u53d6\u3002  </li> <li>\u4e8c\u9032\u4f4d\u8cc7\u6599\u5feb\u53d6\uff1a \u5c07\u904b\u7b97\u6210\u672c\u9ad8\u3001\u6703\u7522\u751f\u4e8c\u9032\u4f4d\u8cc7\u6599\u7684\u7d50\u679c\uff08\u5982\u6e32\u67d3\u8907\u96dc\u5716\u8868\u5716\u7247\uff09\u4ee5 artifact \u5f62\u5f0f\u5132\u5b58\uff0c\u907f\u514d\u6bcf\u6b21\u8acb\u6c42\u90fd\u91cd\u65b0\u7522\u751f\u3002</li> </ol> <p>\u7c21\u800c\u8a00\u4e4b\uff0c\u7576\u4f60\u7684 agent \u9700\u8981\u8655\u7406\u9700\u88ab\u6301\u4e45\u5316\u3001\u7248\u672c\u5316\u6216\u5171\u4eab\u7684\u6a94\u6848\u578b\u4e8c\u9032\u4f4d\u8cc7\u6599\u6642\uff0c\u7531 <code>ArtifactService</code> \u7ba1\u7406\u7684 Artifact \u5c31\u662f Agent Development Kit (ADK) \u4e2d\u6700\u5408\u9069\u7684\u6a5f\u5236\u3002</p>"},{"location":"artifacts/#_1","title":"\u5e38\u898b\u4f7f\u7528\u60c5\u5883","text":"<p>Artifact \u70ba\u4f60\u7684 Agent Development Kit (ADK) \u61c9\u7528\u63d0\u4f9b\u4e86\u9748\u6d3b\u8655\u7406\u4e8c\u9032\u4f4d\u8cc7\u6599\u7684\u65b9\u5f0f\u3002</p> <p>\u4ee5\u4e0b\u662f\u5b83\u5011\u7279\u5225\u6709\u50f9\u503c\u7684\u4e00\u4e9b\u5178\u578b\u60c5\u5883\uff1a</p> <ul> <li> <p>\u7522\u751f\u5831\u544a/\u6a94\u6848\uff1a</p> <ul> <li>\u5de5\u5177\u6216 agent \u7522\u751f\u5831\u544a\uff08\u5982 PDF \u5206\u6790\u3001CSV \u8cc7\u6599\u532f\u51fa\u3001\u5716\u8868\u5716\u7247\uff09\u3002</li> </ul> </li> <li> <p>\u8655\u7406\u4f7f\u7528\u8005\u4e0a\u50b3\uff1a</p> <ul> <li>\u4f7f\u7528\u8005\u900f\u904e\u524d\u7aef\u4ecb\u9762\u4e0a\u50b3\u6a94\u6848\uff08\u5982\u5206\u6790\u7528\u7684\u5716\u7247\u3001\u6458\u8981\u7528\u7684\u6587\u4ef6\uff09\u3002</li> </ul> </li> <li> <p>\u5132\u5b58\u4e2d\u9593\u4e8c\u9032\u4f4d\u7d50\u679c\uff1a</p> <ul> <li>agent \u57f7\u884c\u8907\u96dc\u7684\u591a\u6b65\u9a5f\u6d41\u7a0b\uff0c\u5176\u4e2d\u67d0\u4e00\u6b65\u6703\u7522\u751f\u4e2d\u9593\u4e8c\u9032\u4f4d\u8cc7\u6599\uff08\u5982\u8a9e\u97f3\u5408\u6210\u3001\u6a21\u64ec\u7d50\u679c\uff09\u3002</li> </ul> </li> <li> <p>\u6301\u4e45\u5316\u4f7f\u7528\u8005\u8cc7\u6599\uff1a</p> <ul> <li>\u5132\u5b58\u4f7f\u7528\u8005\u5c08\u5c6c\u7684\u8a2d\u5b9a\u6216\u8cc7\u6599\uff0c\u9019\u4e9b\u8cc7\u6599\u4e0d\u662f\u55ae\u7d14\u7684\u9375\u503c\u72c0\u614b\u3002</li> </ul> </li> <li> <p>\u5feb\u53d6\u7522\u751f\u7684\u4e8c\u9032\u4f4d\u5167\u5bb9\uff1a</p> <ul> <li>agent \u6839\u64da\u7279\u5b9a\u8f38\u5165\u7d93\u5e38\u7522\u751f\u76f8\u540c\u7684\u4e8c\u9032\u4f4d\u8f38\u51fa\uff08\u5982\u516c\u53f8 Logo \u5716\u7247\u3001\u6a19\u6e96\u8a9e\u97f3\u554f\u5019\uff09\u3002</li> </ul> </li> </ul>"},{"location":"artifacts/#_2","title":"\u6838\u5fc3\u6982\u5ff5","text":"<p>\u7406\u89e3 Artifact \u6d89\u53ca\u638c\u63e1\u5e7e\u500b\u95dc\u9375\u5143\u4ef6\uff1a\u8ca0\u8cac\u7ba1\u7406\u7684\u670d\u52d9\u3001\u7528\u4f86\u627f\u8f09\u8cc7\u6599\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u4ee5\u53ca\u5b83\u5011\u7684\u8b58\u5225\u8207\u7248\u672c\u7ba1\u7406\u65b9\u5f0f\u3002</p>"},{"location":"artifacts/#artifact-servicebaseartifactservice","title":"Artifact Service\uff08<code>BaseArtifactService</code>\uff09","text":"<ul> <li> <p>\u89d2\u8272\uff1a \u8ca0\u8cac Artifact \u5be6\u969b\u5132\u5b58\u8207\u5b58\u53d6\u908f\u8f2f\u7684\u6838\u5fc3\u5143\u4ef6\u3002\u5b83\u5b9a\u7fa9\u4e86 Artifact \u5982\u4f55 \u4ee5\u53ca \u5132\u5b58\u5728\u54ea\u88e1\u3002</p> </li> <li> <p>\u4ecb\u9762\uff1a \u7531\u62bd\u8c61\u57fa\u5e95\u985e\u5225 <code>BaseArtifactService</code> \u5b9a\u7fa9\u3002\u4efb\u4f55\u5177\u9ad4\u5be6\u4f5c\u90fd\u5fc5\u9808\u63d0\u4f9b\u4e0b\u5217\u65b9\u6cd5\uff1a</p> <ul> <li><code>Save Artifact</code>\uff1a\u5132\u5b58 artifact \u8cc7\u6599\u4e26\u56de\u50b3\u5176\u6307\u6d3e\u7684\u7248\u672c\u865f\u3002</li> <li><code>Load Artifact</code>\uff1a\u8b80\u53d6\u7279\u5b9a\u7248\u672c\uff08\u6216\u6700\u65b0\u7248\u672c\uff09\u7684 artifact\u3002</li> <li><code>List Artifact keys</code>\uff1a\u5217\u51fa\u6307\u5b9a\u7bc4\u570d\u5167 artifact \u7684\u552f\u4e00\u6a94\u540d\u3002</li> <li><code>Delete Artifact</code>\uff1a\u79fb\u9664 artifact\uff08\u4ee5\u53ca\u8996\u5be6\u4f5c\u800c\u5b9a\uff0c\u53ef\u80fd\u5305\u542b\u6240\u6709\u7248\u672c\uff09\u3002</li> <li><code>List versions</code>\uff1a\u5217\u51fa\u7279\u5b9a artifact \u6a94\u540d\u4e0b\u6240\u6709\u53ef\u7528\u7684\u7248\u672c\u865f\u3002</li> </ul> </li> <li> <p>\u8a2d\u5b9a\u65b9\u5f0f\uff1a \u7576\u4f60\u521d\u59cb\u5316 <code>Runner</code> \u6642\uff0c\u9700\u63d0\u4f9b\u4e00\u500b artifact service \u7684\u5be6\u4f8b\uff08\u5982 <code>InMemoryArtifactService</code>\u3001<code>GcsArtifactService</code>\uff09\u3002<code>Runner</code> \u6703\u900f\u904e <code>InvocationContext</code> \u5c07\u6b64\u670d\u52d9\u63d0\u4f9b\u7d66 agent \u8207 tools \u4f7f\u7528\u3002</p> </li> </ul> PythonJava <pre><code>from google.adk.runners import Runner\nfrom google.adk.artifacts import InMemoryArtifactService # Or GcsArtifactService\nfrom google.adk.agents import LlmAgent # Any agent\nfrom google.adk.sessions import InMemorySessionService\n\n# Example: Configuring the Runner with an Artifact Service\nmy_agent = LlmAgent(name=\"artifact_user_agent\", model=\"gemini-2.0-flash\")\nartifact_service = InMemoryArtifactService() # Choose an implementation\nsession_service = InMemorySessionService()\n\nrunner = Runner(\n    agent=my_agent,\n    app_name=\"my_artifact_app\",\n    session_service=session_service,\n    artifact_service=artifact_service # Provide the service instance here\n)\n# Now, contexts within runs managed by this runner can use artifact methods\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.artifacts.InMemoryArtifactService;\n\n// Example: Configuring the Runner with an Artifact Service\nLlmAgent myAgent =  LlmAgent.builder()\n  .name(\"artifact_user_agent\")\n  .model(\"gemini-2.0-flash\")\n  .build();\nInMemoryArtifactService artifactService = new InMemoryArtifactService(); // Choose an implementation\nInMemorySessionService sessionService = new InMemorySessionService();\n\nRunner runner = new Runner(myAgent, \"my_artifact_app\", artifactService, sessionService); // Provide the service instance here\n// Now, contexts within runs managed by this runner can use artifact methods\n</code></pre>"},{"location":"artifacts/#artifact_2","title":"Artifact \u8cc7\u6599","text":"<ul> <li> <p>\u6a19\u6e96\u8868\u793a\u6cd5\uff1a Artifact \u5167\u5bb9\u6703\u4ee5 <code>google.genai.types.Part</code> \u7269\u4ef6\u4f5c\u70ba\u901a\u7528\u8868\u793a\u65b9\u5f0f\uff0c\u9019\u8207\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u8a0a\u606f\u7684\u90e8\u5206\u7d50\u69cb\u76f8\u540c\u3002</p> </li> <li> <p>\u4e3b\u8981\u5c6c\u6027 (<code>inline_data</code>)\uff1a \u5c0d\u65bc artifact\uff0c\u6700\u76f8\u95dc\u7684\u5c6c\u6027\u662f <code>inline_data</code>\uff0c\u5b83\u662f\u4e00\u500b <code>google.genai.types.Blob</code> \u7269\u4ef6\uff0c\u5305\u542b\uff1a</p> <ul> <li><code>data</code> (<code>bytes</code>)\uff1aartifact \u7684\u539f\u59cb\u4e8c\u9032\u4f4d\u5167\u5bb9\u3002</li> <li><code>mime_type</code> (<code>str</code>)\uff1a\u6a19\u6e96\u7684 MIME type \u5b57\u4e32\uff08\u4f8b\u5982 <code>'application/pdf'</code>\u3001<code>'image/png'</code>\u3001<code>'audio/mpeg'</code>\uff09\uff0c\u7528\u65bc\u63cf\u8ff0\u4e8c\u9032\u4f4d\u8cc7\u6599\u7684\u985e\u578b\u3002\u9019\u5c0d\u65bc\u6b63\u78ba\u8f09\u5165 artifact \u6642\u7684\u89e3\u8b80\u81f3\u95dc\u91cd\u8981\u3002</li> </ul> </li> </ul> PythonJava <pre><code>import google.genai.types as types\n\n# Example: Creating an artifact Part from raw bytes\npdf_bytes = b'%PDF-1.4...' # Your raw PDF data\npdf_mime_type = \"application/pdf\"\n\n# Using the constructor\npdf_artifact_py = types.Part(\n    inline_data=types.Blob(data=pdf_bytes, mime_type=pdf_mime_type)\n)\n\n# Using the convenience class method (equivalent)\npdf_artifact_alt_py = types.Part.from_bytes(data=pdf_bytes, mime_type=pdf_mime_type)\n\nprint(f\"Created Python artifact with MIME type: {pdf_artifact_py.inline_data.mime_type}\")\n</code></pre> <pre><code>import com.google.genai.types.Blob;\nimport com.google.genai.types.Part;\nimport java.nio.charset.StandardCharsets;\n\npublic class ArtifactDataExample {\n  public static void main(String[] args) {\n    // Example: Creating an artifact Part from raw bytes\n    byte[] pdfBytes = \"%PDF-1.4...\".getBytes(StandardCharsets.UTF_8); // Your raw PDF data\n    String pdfMimeType = \"application/pdf\";\n\n    // Using the Part.fromBlob() constructor with a Blob\n    Blob pdfBlob = Blob.builder()\n        .data(pdfBytes)\n        .mimeType(pdfMimeType)\n        .build();\n    Part pdfArtifactJava = Part.builder().inlineData(pdfBlob).build();\n\n    // Using the convenience static method Part.fromBytes() (equivalent)\n    Part pdfArtifactAltJava = Part.fromBytes(pdfBytes, pdfMimeType);\n\n    // Accessing mimeType, note the use of Optional\n    String mimeType = pdfArtifactJava.inlineData()\n        .flatMap(Blob::mimeType)\n        .orElse(\"unknown\");\n    System.out.println(\"Created Java artifact with MIME type: \" + mimeType);\n\n    // Accessing data\n    byte[] data = pdfArtifactJava.inlineData()\n        .flatMap(Blob::data)\n        .orElse(new byte[0]);\n    System.out.println(\"Java artifact data (first 10 bytes): \"\n        + new String(data, 0, Math.min(data.length, 10), StandardCharsets.UTF_8) + \"...\");\n  }\n}\n</code></pre>"},{"location":"artifacts/#filename","title":"\u6a94\u540d\uff08Filename\uff09","text":"<ul> <li>\u8b58\u5225\u5b50\uff08Identifier\uff09\uff1a \u4e00\u500b\u7c21\u55ae\u7684\u5b57\u4e32\uff0c\u7528\u65bc\u5728\u7279\u5b9a\u547d\u540d\u7a7a\u9593\u5167\u547d\u540d\u4e26\u6aa2\u7d22 artifact\u3002  </li> <li>\u552f\u4e00\u6027\uff08Uniqueness\uff09\uff1a \u6a94\u540d\u5728\u5176\u7bc4\u570d\u5167\uff08session \u6216 user \u547d\u540d\u7a7a\u9593\uff09\u5fc5\u9808\u662f\u552f\u4e00\u7684\u3002  </li> <li>\u6700\u4f73\u5be6\u8e10\uff08Best Practice\uff09\uff1a \u5efa\u8b70\u4f7f\u7528\u5177\u63cf\u8ff0\u6027\u7684\u540d\u7a31\uff0c\u4e26\u53ef\u5305\u542b\u526f\u6a94\u540d\uff08\u4f8b\u5982\uff1a<code>\"monthly_report.pdf\"</code>\u3001<code>\"user_avatar.jpg\"</code>\uff09\uff0c\u4f46\u526f\u6a94\u540d\u672c\u8eab\u4e0d\u6703\u6c7a\u5b9a\u884c\u70ba\u2014\u2014<code>mime_type</code> \u624d\u6703\u3002</li> </ul>"},{"location":"artifacts/#versioning","title":"\u7248\u672c\u63a7\u7ba1\uff08Versioning\uff09","text":"<ul> <li>\u81ea\u52d5\u7248\u672c\u63a7\u7ba1\uff08Automatic Versioning\uff09\uff1a artifact \u670d\u52d9\u6703\u81ea\u52d5\u8655\u7406\u7248\u672c\u63a7\u7ba1\u3002\u7576\u4f60\u547c\u53eb <code>save_artifact</code> \u6642\uff0c\u670d\u52d9\u6703\u70ba\u8a72\u6a94\u540d\u53ca\u7bc4\u570d\u6c7a\u5b9a\u4e0b\u4e00\u500b\u53ef\u7528\u7684\u7248\u672c\u865f\uff08\u901a\u5e38\u5f9e 0 \u958b\u59cb\u905e\u589e\uff09\u3002  </li> <li>\u7531 <code>save_artifact</code> \u56de\u50b3\uff1a <code>save_artifact</code> \u65b9\u6cd5\u6703\u56de\u50b3\u65b0\u5132\u5b58 artifact \u6240\u5206\u914d\u7684\u6574\u6578\u7248\u672c\u865f\u3002  </li> <li>\u6aa2\u7d22\uff08Retrieval\uff09\uff1a </li> <li><code>load_artifact(..., version=None)</code>\uff08\u9810\u8a2d\uff09\uff1a\u53d6\u5f97\u8a72 artifact \u7684\u6700\u65b0\u53ef\u7528\u7248\u672c\u3002  </li> <li><code>load_artifact(..., version=N)</code>\uff1a\u53d6\u5f97\u6307\u5b9a\u7248\u672c <code>N</code>\u3002  </li> <li>\u5217\u51fa\u6240\u6709\u7248\u672c\uff08Listing Versions\uff09\uff1a <code>list_versions</code> \u65b9\u6cd5\uff08\u5728\u670d\u52d9\u4e0a\uff0c\u800c\u975e context\uff09\u53ef\u7528\u4f86\u67e5\u8a62\u67d0\u500b artifact \u6240\u6709\u5df2\u5b58\u5728\u7684\u7248\u672c\u865f\u3002</li> </ul>"},{"location":"artifacts/#session-vs-user","title":"\u547d\u540d\u7a7a\u9593\uff08Session vs. User\uff09","text":"<ul> <li> <p>\u6982\u5ff5\uff08Concept\uff09\uff1a artifact \u53ef\u4ee5\u9650\u5b9a\u65bc\u7279\u5b9a session\uff0c\u6216\u66f4\u5ee3\u6cdb\u5730\u9650\u5b9a\u65bc\u4f7f\u7528\u8005\u5728\u61c9\u7528\u7a0b\u5f0f\u5167\u7684\u6240\u6709 session\u3002\u9019\u500b\u7bc4\u570d\u7531 <code>filename</code> \u683c\u5f0f\u6c7a\u5b9a\uff0c\u4e26\u7531 <code>ArtifactService</code> \u65bc\u5167\u90e8\u8655\u7406\u3002  </p> </li> <li> <p>\u9810\u8a2d\uff08Session \u7bc4\u570d\uff09\uff1a \u5982\u679c\u4f60\u4f7f\u7528\u50cf <code>\"report.pdf\"</code> \u9019\u6a23\u7684\u7d14\u6a94\u540d\uff0cartifact \u6703\u8207\u7279\u5b9a\u7684 <code>app_name</code>\u3001<code>user_id</code> \u4ee5\u53ca <code>session_id</code> \u76f8\u95dc\u806f\u3002\u5b83\u50c5\u80fd\u5728\u8a72 session context \u4e0b\u5b58\u53d6\u3002  </p> </li> <li> <p>User \u7bc4\u570d\uff08<code>\"user:\"</code> \u524d\u7db4\uff09\uff1a \u5982\u679c\u4f60\u5728\u6a94\u540d\u524d\u52a0\u4e0a <code>\"user:\"</code>\uff0c\u4f8b\u5982 <code>\"user:profile.png\"</code>\uff0cartifact \u53ea\u6703\u8207 <code>app_name</code> \u548c <code>user_id</code> \u76f8\u95dc\u806f\u3002\u8a72 artifact \u53ef\u5728\u8a72\u4f7f\u7528\u8005\u65bc\u61c9\u7528\u7a0b\u5f0f\u4e2d\u7684\u4efb\u4f55 session \u5b58\u53d6\u6216\u66f4\u65b0\u3002  </p> </li> </ul> PythonJava <pre><code># Example illustrating namespace difference (conceptual)\n\n# Session-specific artifact filename\nsession_report_filename = \"summary.txt\"\n\n# User-specific artifact filename\nuser_config_filename = \"user:settings.json\"\n\n# When saving 'summary.txt' via context.save_artifact,\n# it's tied to the current app_name, user_id, and session_id.\n\n# When saving 'user:settings.json' via context.save_artifact,\n# the ArtifactService implementation should recognize the \"user:\" prefix\n# and scope it to app_name and user_id, making it accessible across sessions for that user.\n</code></pre> <pre><code>// Example illustrating namespace difference (conceptual)\n\n// Session-specific artifact filename\nString sessionReportFilename = \"summary.txt\";\n\n// User-specific artifact filename\nString userConfigFilename = \"user:settings.json\"; // The \"user:\" prefix is key\n\n// When saving 'summary.txt' via context.save_artifact,\n// it's tied to the current app_name, user_id, and session_id.\n// artifactService.saveArtifact(appName, userId, sessionId1, sessionReportFilename, someData);\n\n// When saving 'user:settings.json' via context.save_artifact,\n// the ArtifactService implementation should recognize the \"user:\" prefix\n// and scope it to app_name and user_id, making it accessible across sessions for that user.\n// artifactService.saveArtifact(appName, userId, sessionId1, userConfigFilename, someData);\n</code></pre> <p>\u9019\u4e9b\u6838\u5fc3\u6982\u5ff5\u5354\u540c\u904b\u4f5c\uff0c\u70ba Agent Development Kit (ADK) \u6846\u67b6\u5167\u7684\u4e8c\u9032\u4f4d\u8cc7\u6599\u7ba1\u7406\u63d0\u4f9b\u4e86\u4e00\u500b\u9748\u6d3b\u7684\u7cfb\u7d71\u3002</p>"},{"location":"artifacts/#artifact-context","title":"\u8207 Artifact \u4e92\u52d5\uff08\u900f\u904e Context \u7269\u4ef6\uff09","text":"<p>\u5728 agent \u908f\u8f2f\u4e2d\uff08\u7279\u5225\u662f\u5728 callbacks \u6216 tools \u5167\uff09\uff0c\u4f60\u4e3b\u8981\u662f\u900f\u904e <code>CallbackContext</code> \u548c <code>ToolContext</code> \u7269\u4ef6\u6240\u63d0\u4f9b\u7684\u65b9\u6cd5\u4f86\u8207 artifact \u4e92\u52d5\u3002\u9019\u4e9b\u65b9\u6cd5\u5c07\u5e95\u5c64\u7531 <code>ArtifactService</code> \u7ba1\u7406\u7684\u5132\u5b58\u7d30\u7bc0\u9032\u884c\u4e86\u62bd\u8c61\u5316\u3002</p>"},{"location":"artifacts/#artifactservice","title":"\u524d\u7f6e\u4f5c\u696d\uff1a\u8a2d\u5b9a <code>ArtifactService</code>","text":"<p>\u5728\u4f60\u80fd\u5920\u900f\u904e context \u7269\u4ef6\u4f7f\u7528\u4efb\u4f55 artifact \u65b9\u6cd5\u4e4b\u524d\uff0c\u521d\u59cb\u5316 <code>Runner</code> \u6642\u5fc5\u9808\u63d0\u4f9b\u4e00\u500b <code>BaseArtifactService</code> \u5be6\u4f5c\uff08\u4f8b\u5982 <code>InMemoryArtifactService</code> \u6216 <code>GcsArtifactService</code>\uff09\u7684\u5be6\u4f8b\u3002</p> PythonJava <p>In Python, you provide this instance when initializing your <code>Runner</code>.</p> <p><pre><code>from google.adk.runners import Runner\nfrom google.adk.artifacts import InMemoryArtifactService # Or GcsArtifactService\nfrom google.adk.agents import LlmAgent\nfrom google.adk.sessions import InMemorySessionService\n\n# Your agent definition\nagent = LlmAgent(name=\"my_agent\", model=\"gemini-2.0-flash\")\n\n# Instantiate the desired artifact service\nartifact_service = InMemoryArtifactService()\n\n# Provide it to the Runner\nrunner = Runner(\n    agent=agent,\n    app_name=\"artifact_app\",\n    session_service=InMemorySessionService(),\n    artifact_service=artifact_service # Service must be provided here\n)\n</code></pre> If no <code>artifact_service</code> is configured in the <code>InvocationContext</code> (which happens if it's not passed to the <code>Runner</code>), calling <code>save_artifact</code>, <code>load_artifact</code>, or <code>list_artifacts</code> on the context objects will raise a <code>ValueError</code>.</p> <p>In Java, you would instantiate a <code>BaseArtifactService</code> implementation and then ensure it's accessible to the parts of your application that manage artifacts. This is often done through dependency injection or by explicitly passing the service instance.</p> <p><pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.artifacts.InMemoryArtifactService; // Or GcsArtifactService\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\n\npublic class SampleArtifactAgent {\n\n  public static void main(String[] args) {\n\n    // Your agent definition\n    LlmAgent agent = LlmAgent.builder()\n        .name(\"my_agent\")\n        .model(\"gemini-2.0-flash\")\n        .build();\n\n    // Instantiate the desired artifact service\n    InMemoryArtifactService artifactService = new InMemoryArtifactService();\n\n    // Provide it to the Runner\n    Runner runner = new Runner(agent,\n        \"APP_NAME\",\n        artifactService, // Service must be provided here\n        new InMemorySessionService());\n\n  }\n}\n</code></pre> In Java, if an <code>ArtifactService</code> instance is not available (e.g., <code>null</code>) when artifact operations are attempted, it would typically result in a <code>NullPointerException</code> or a custom error, depending on how your application is structured. Robust applications often use dependency injection frameworks to manage service lifecycles and ensure availability.</p>"},{"location":"artifacts/#_3","title":"\u5b58\u53d6\u65b9\u6cd5","text":"<p>artifact \u4e92\u52d5\u65b9\u6cd5\u53ef\u76f4\u63a5\u5728 <code>CallbackContext</code>\uff08\u50b3\u905e\u7d66 agent \u548c model \u56de\u547c\u51fd\u5f0f\uff09\u4ee5\u53ca <code>ToolContext</code>\uff08\u50b3\u905e\u7d66\u5de5\u5177\u56de\u547c\u51fd\u5f0f\uff09\u5be6\u4f8b\u4e0a\u4f7f\u7528\u3002\u8acb\u6ce8\u610f\uff0c<code>ToolContext</code> \u662f\u7e7c\u627f\u81ea <code>CallbackContext</code>\u3002</p> <ul> <li> <p>\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\uff1a</p> PythonJava <pre><code>import google.genai.types as types\nfrom google.adk.agents.callback_context import CallbackContext # Or ToolContext\n\nasync def save_generated_report_py(context: CallbackContext, report_bytes: bytes):\n    \"\"\"Saves generated PDF report bytes as an artifact.\"\"\"\n    report_artifact = types.Part.from_data(\n        data=report_bytes,\n        mime_type=\"application/pdf\"\n    )\n    filename = \"generated_report.pdf\"\n\n    try:\n        version = await context.save_artifact(filename=filename, artifact=report_artifact)\n        print(f\"Successfully saved Python artifact '{filename}' as version {version}.\")\n        # The event generated after this callback will contain:\n        # event.actions.artifact_delta == {\"generated_report.pdf\": version}\n    except ValueError as e:\n        print(f\"Error saving Python artifact: {e}. Is ArtifactService configured in Runner?\")\n    except Exception as e:\n        # Handle potential storage errors (e.g., GCS permissions)\n        print(f\"An unexpected error occurred during Python artifact save: {e}\")\n\n# --- Example Usage Concept (Python) ---\n# async def main_py():\n#   callback_context: CallbackContext = ... # obtain context\n#   report_data = b'...' # Assume this holds the PDF bytes\n#   await save_generated_report_py(callback_context, report_data)\n</code></pre> <pre><code>import com.google.adk.agents.CallbackContext;\nimport com.google.adk.artifacts.BaseArtifactService;\nimport com.google.adk.artifacts.InMemoryArtifactService;\nimport com.google.genai.types.Part;\nimport java.nio.charset.StandardCharsets;\n\npublic class SaveArtifactExample {\n\npublic void saveGeneratedReport(CallbackContext callbackContext, byte[] reportBytes) {\n// Saves generated PDF report bytes as an artifact.\nPart reportArtifact = Part.fromBytes(reportBytes, \"application/pdf\");\nString filename = \"generatedReport.pdf\";\n\n    callbackContext.saveArtifact(filename, reportArtifact);\n    System.out.println(\"Successfully saved Java artifact '\" + filename);\n    // The event generated after this callback will contain:\n    // event().actions().artifactDelta == {\"generated_report.pdf\": version}\n}\n\n// --- Example Usage Concept (Java) ---\npublic static void main(String[] args) {\n    BaseArtifactService service = new InMemoryArtifactService(); // Or GcsArtifactService\n    SaveArtifactExample myTool = new SaveArtifactExample();\n    byte[] reportData = \"...\".getBytes(StandardCharsets.UTF_8); // PDF bytes\n    CallbackContext callbackContext; // ... obtain callback context from your app\n    myTool.saveGeneratedReport(callbackContext, reportData);\n    // Due to async nature, in a real app, ensure program waits or handles completion.\n  }\n}\n</code></pre> </li> </ul>"},{"location":"artifacts/#artifact_3","title":"\u8f09\u5165 Artifact","text":"<ul> <li> <p>\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\uff1a</p> PythonJava <pre><code>import google.genai.types as types\nfrom google.adk.agents.callback_context import CallbackContext # Or ToolContext\n\nasync def process_latest_report_py(context: CallbackContext):\n    \"\"\"Loads the latest report artifact and processes its data.\"\"\"\n    filename = \"generated_report.pdf\"\n    try:\n        # Load the latest version\n        report_artifact = await context.load_artifact(filename=filename)\n\n        if report_artifact and report_artifact.inline_data:\n            print(f\"Successfully loaded latest Python artifact '{filename}'.\")\n            print(f\"MIME Type: {report_artifact.inline_data.mime_type}\")\n            # Process the report_artifact.inline_data.data (bytes)\n            pdf_bytes = report_artifact.inline_data.data\n            print(f\"Report size: {len(pdf_bytes)} bytes.\")\n            # ... further processing ...\n        else:\n            print(f\"Python artifact '{filename}' not found.\")\n\n        # Example: Load a specific version (if version 0 exists)\n        # specific_version_artifact = await context.load_artifact(filename=filename, version=0)\n        # if specific_version_artifact:\n        #     print(f\"Loaded version 0 of '{filename}'.\")\n\n    except ValueError as e:\n        print(f\"Error loading Python artifact: {e}. Is ArtifactService configured?\")\n    except Exception as e:\n        # Handle potential storage errors\n        print(f\"An unexpected error occurred during Python artifact load: {e}\")\n\n# --- Example Usage Concept (Python) ---\n# async def main_py():\n#   callback_context: CallbackContext = ... # obtain context\n#   await process_latest_report_py(callback_context)\n</code></pre> <pre><code>import com.google.adk.artifacts.BaseArtifactService;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.MaybeObserver;\nimport io.reactivex.rxjava3.disposables.Disposable;\nimport java.util.Optional;\n\npublic class MyArtifactLoaderService {\n\n    private final BaseArtifactService artifactService;\n    private final String appName;\n\n    public MyArtifactLoaderService(BaseArtifactService artifactService, String appName) {\n        this.artifactService = artifactService;\n        this.appName = appName;\n    }\n\n    public void processLatestReportJava(String userId, String sessionId, String filename) {\n        // Load the latest version by passing Optional.empty() for the version\n        artifactService\n                .loadArtifact(appName, userId, sessionId, filename, Optional.empty())\n                .subscribe(\n                        new MaybeObserver&lt;Part&gt;() {\n                            @Override\n                            public void onSubscribe(Disposable d) {\n                                // Optional: handle subscription\n                            }\n\n                            @Override\n                            public void onSuccess(Part reportArtifact) {\n                                System.out.println(\n                                        \"Successfully loaded latest Java artifact '\" + filename + \"'.\");\n                                reportArtifact\n                                        .inlineData()\n                                        .ifPresent(\n                                                blob -&gt; {\n                                                    System.out.println(\n                                                            \"MIME Type: \" + blob.mimeType().orElse(\"N/A\"));\n                                                    byte[] pdfBytes = blob.data().orElse(new byte[0]);\n                                                    System.out.println(\"Report size: \" + pdfBytes.length + \" bytes.\");\n                                                    // ... further processing of pdfBytes ...\n                                                });\n                            }\n\n                            @Override\n                            public void onError(Throwable e) {\n                                // Handle potential storage errors or other exceptions\n                                System.err.println(\n                                        \"An error occurred during Java artifact load for '\"\n                                                + filename\n                                                + \"': \"\n                                                + e.getMessage());\n                            }\n\n                            @Override\n                            public void onComplete() {\n                                // Called if the artifact (latest version) is not found\n                                System.out.println(\"Java artifact '\" + filename + \"' not found.\");\n                            }\n                        });\n\n        // Example: Load a specific version (e.g., version 0)\n        /*\n        artifactService.loadArtifact(appName, userId, sessionId, filename, Optional.of(0))\n            .subscribe(part -&gt; {\n                System.out.println(\"Loaded version 0 of Java artifact '\" + filename + \"'.\");\n            }, throwable -&gt; {\n                System.err.println(\"Error loading version 0 of '\" + filename + \"': \" + throwable.getMessage());\n            }, () -&gt; {\n                System.out.println(\"Version 0 of Java artifact '\" + filename + \"' not found.\");\n            });\n        */\n    }\n\n    // --- Example Usage Concept (Java) ---\n    public static void main(String[] args) {\n        // BaseArtifactService service = new InMemoryArtifactService(); // Or GcsArtifactService\n        // MyArtifactLoaderService loader = new MyArtifactLoaderService(service, \"myJavaApp\");\n        // loader.processLatestReportJava(\"user123\", \"sessionABC\", \"java_report.pdf\");\n        // Due to async nature, in a real app, ensure program waits or handles completion.\n    }\n}\n</code></pre> </li> </ul>"},{"location":"artifacts/#artifact_4","title":"\u5217\u51fa Artifact \u6a94\u6848\u540d\u7a31","text":"<ul> <li> <p>\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\uff1a</p> PythonJava <pre><code>from google.adk.tools.tool_context import ToolContext\n\ndef list_user_files_py(tool_context: ToolContext) -&gt; str:\n    \"\"\"Tool to list available artifacts for the user.\"\"\"\n    try:\n        available_files = await tool_context.list_artifacts()\n        if not available_files:\n            return \"You have no saved artifacts.\"\n        else:\n            # Format the list for the user/LLM\n            file_list_str = \"\\n\".join([f\"- {fname}\" for fname in available_files])\n            return f\"Here are your available Python artifacts:\\n{file_list_str}\"\n    except ValueError as e:\n        print(f\"Error listing Python artifacts: {e}. Is ArtifactService configured?\")\n        return \"Error: Could not list Python artifacts.\"\n    except Exception as e:\n        print(f\"An unexpected error occurred during Python artifact list: {e}\")\n        return \"Error: An unexpected error occurred while listing Python artifacts.\"\n\n# This function would typically be wrapped in a FunctionTool\n# from google.adk.tools import FunctionTool\n# list_files_tool = FunctionTool(func=list_user_files_py)\n</code></pre> <pre><code>import com.google.adk.artifacts.BaseArtifactService;\nimport com.google.adk.artifacts.ListArtifactsResponse;\nimport com.google.common.collect.ImmutableList;\nimport io.reactivex.rxjava3.core.SingleObserver;\nimport io.reactivex.rxjava3.disposables.Disposable;\n\npublic class MyArtifactListerService {\n\n    private final BaseArtifactService artifactService;\n    private final String appName;\n\n    public MyArtifactListerService(BaseArtifactService artifactService, String appName) {\n        this.artifactService = artifactService;\n        this.appName = appName;\n    }\n\n    // Example method that might be called by a tool or agent logic\n    public void listUserFilesJava(String userId, String sessionId) {\n        artifactService\n                .listArtifactKeys(appName, userId, sessionId)\n                .subscribe(\n                        new SingleObserver&lt;ListArtifactsResponse&gt;() {\n                            @Override\n                            public void onSubscribe(Disposable d) {\n                                // Optional: handle subscription\n                            }\n\n                            @Override\n                            public void onSuccess(ListArtifactsResponse response) {\n                                ImmutableList&lt;String&gt; availableFiles = response.filenames();\n                                if (availableFiles.isEmpty()) {\n                                    System.out.println(\n                                            \"User \"\n                                                    + userId\n                                                    + \" in session \"\n                                                    + sessionId\n                                                    + \" has no saved Java artifacts.\");\n                                } else {\n                                    StringBuilder fileListStr =\n                                            new StringBuilder(\n                                                    \"Here are the available Java artifacts for user \"\n                                                            + userId\n                                                            + \" in session \"\n                                                            + sessionId\n                                                            + \":\\n\");\n                                    for (String fname : availableFiles) {\n                                        fileListStr.append(\"- \").append(fname).append(\"\\n\");\n                                    }\n                                    System.out.println(fileListStr.toString());\n                                }\n                            }\n\n                            @Override\n                            public void onError(Throwable e) {\n                                System.err.println(\n                                        \"Error listing Java artifacts for user \"\n                                                + userId\n                                                + \" in session \"\n                                                + sessionId\n                                                + \": \"\n                                                + e.getMessage());\n                                // In a real application, you might return an error message to the user/LLM\n                            }\n                        });\n    }\n\n    // --- Example Usage Concept (Java) ---\n    public static void main(String[] args) {\n        // BaseArtifactService service = new InMemoryArtifactService(); // Or GcsArtifactService\n        // MyArtifactListerService lister = new MyArtifactListerService(service, \"myJavaApp\");\n        // lister.listUserFilesJava(\"user123\", \"sessionABC\");\n        // Due to async nature, in a real app, ensure program waits or handles completion.\n    }\n}\n</code></pre> </li> </ul> <p>\u9019\u4e9b\u7528\u65bc\u5132\u5b58\u3001\u8f09\u5165\u8207\u5217\u8209\u7684\u65b9\u6cd5\uff0c\u7121\u8ad6\u662f\u5728 Python \u7684 context \u7269\u4ef6\u4e2d\uff0c\u9084\u662f\u76f4\u63a5\u5728 Java \u4e2d\u8207 <code>BaseArtifactService</code> \u4e92\u52d5\uff0c\u90fd\u70ba\u5728 Agent Development Kit (ADK) \u5167\u90e8\u7ba1\u7406\u4e8c\u9032\u4f4d\u8cc7\u6599\u6301\u4e45\u5316\u63d0\u4f9b\u4e86\u4fbf\u5229\u4e14\u4e00\u81f4\u7684\u65b9\u5f0f\uff0c\u4e14\u4e0d\u53d7\u6240\u9078\u5f8c\u7aef\u5132\u5b58\u5be6\u4f5c\u7684\u5f71\u97ff\u3002</p>"},{"location":"artifacts/#_4","title":"\u53ef\u7528\u5be6\u4f5c","text":"<p>Agent Development Kit (ADK) \u63d0\u4f9b\u4e86 <code>BaseArtifactService</code> \u4ecb\u9762\u7684\u5177\u9ad4\u5be6\u4f5c\uff0c\u652f\u63f4\u591a\u7a2e\u5132\u5b58\u5f8c\u7aef\uff0c\u9069\u7528\u65bc\u4e0d\u540c\u7684\u958b\u767c\u968e\u6bb5\u8207\u90e8\u7f72\u9700\u6c42\u3002\u9019\u4e9b\u5be6\u4f5c\u6703\u6839\u64da <code>app_name</code>\u3001<code>user_id</code>\u3001<code>session_id</code> \u548c <code>filename</code>\uff08\u5305\u542b <code>user:</code> \u547d\u540d\u7a7a\u9593\u524d\u7db4\uff09\u4f86\u8655\u7406 artifact \u8cc7\u6599\u7684\u5132\u5b58\u3001\u7248\u672c\u7ba1\u7406\u8207\u64f7\u53d6\u7d30\u7bc0\u3002</p>"},{"location":"artifacts/#inmemoryartifactservice","title":"InMemoryArtifactService","text":"<ul> <li>\u5132\u5b58\u6a5f\u5236\uff1a<ul> <li>Python\uff1a\u4f7f\u7528\u61c9\u7528\u7a0b\u5f0f\u8a18\u61b6\u9ad4\u4e2d\u7684 Python \u5b57\u5178\uff08<code>self.artifacts</code>\uff09\u3002\u5b57\u5178\u7684 key \u4ee3\u8868 artifact \u8def\u5f91\uff0cvalue \u5247\u662f <code>types.Part</code> \u7684\u5217\u8868\uff0c\u6bcf\u500b\u5217\u8868\u5143\u7d20\u4ee3\u8868\u4e00\u500b\u7248\u672c\u3002</li> <li>Java\uff1a\u4f7f\u7528\u8a18\u61b6\u9ad4\u4e2d\u7684\u5de2\u72c0 <code>HashMap</code> \u5be6\u4f8b\uff08<code>private final Map&lt;String, Map&lt;String, Map&lt;String, Map&lt;String, List&lt;Part&gt;&gt;&gt;&gt;&gt; artifacts;</code>\uff09\u3002\u6bcf\u4e00\u5c64\u7684 key \u5206\u5225\u70ba <code>appName</code>\u3001<code>userId</code>\u3001<code>sessionId</code> \u8207 <code>filename</code>\u3002\u6700\u5167\u5c64\u7684 <code>List&lt;Part&gt;</code> \u5132\u5b58 artifact \u7684\u5404\u500b\u7248\u672c\uff0c\u5217\u8868\u7d22\u5f15\u5c0d\u61c9\u7248\u672c\u865f\u3002</li> </ul> </li> <li>\u4e3b\u8981\u7279\u9ede\uff1a<ul> <li>\u7c21\u55ae\u6613\u7528\uff1a \u9664\u4e86\u6838\u5fc3 ADK \u51fd\u5f0f\u5eab\u5916\uff0c\u4e0d\u9700\u984d\u5916\u8a2d\u5b9a\u6216\u76f8\u4f9d\u5957\u4ef6\u3002</li> <li>\u901f\u5ea6\u5feb\uff1a \u64cd\u4f5c\u901a\u5e38\u975e\u5e38\u5feb\u901f\uff0c\u56e0\u70ba\u50c5\u6d89\u53ca\u8a18\u61b6\u9ad4\u4e2d\u7684 map/\u5b57\u5178\u67e5\u627e\u8207\u5217\u8868\u64cd\u4f5c\u3002</li> <li>\u66ab\u5b58\u6027\uff1a \u6240\u6709\u5132\u5b58\u7684 artifact \u6703\u5728\u61c9\u7528\u7a0b\u5f0f\u7a0b\u5e8f\u7d42\u6b62\u6642\u5168\u90e8\u907a\u5931\u3002\u8cc7\u6599\u4e0d\u6703\u5728\u61c9\u7528\u7a0b\u5f0f\u91cd\u555f\u9593\u4fdd\u7559\u3002</li> </ul> </li> <li>\u9069\u7528\u60c5\u5883\uff1a<ul> <li>\u9069\u5408\u672c\u6a5f\u958b\u767c\u8207\u6e2c\u8a66\uff0c\u4e0d\u9700\u8981\u8cc7\u6599\u6301\u4e45\u5316\u7684\u5834\u5408\u3002</li> <li>\u9069\u7528\u65bc\u77ed\u66ab\u5c55\u793a\u6216 artifact \u8cc7\u6599\u50c5\u9700\u5728\u55ae\u6b21\u61c9\u7528\u7a0b\u5f0f\u57f7\u884c\u671f\u9593\u66ab\u5b58\u7684\u60c5\u5883\u3002</li> </ul> </li> <li> <p>\u5efa\u7acb\u65b9\u5f0f\uff1a</p> PythonJava <pre><code>from google.adk.artifacts import InMemoryArtifactService\n\n# Simply instantiate the class\nin_memory_service_py = InMemoryArtifactService()\n\n# Then pass it to the Runner\n# runner = Runner(..., artifact_service=in_memory_service_py)\n</code></pre> <pre><code>import com.google.adk.artifacts.BaseArtifactService;\nimport com.google.adk.artifacts.InMemoryArtifactService;\n\npublic class InMemoryServiceSetup {\n    public static void main(String[] args) {\n        // Simply instantiate the class\n        BaseArtifactService inMemoryServiceJava = new InMemoryArtifactService();\n\n        System.out.println(\"InMemoryArtifactService (Java) instantiated: \" + inMemoryServiceJava.getClass().getName());\n\n        // This instance would then be provided to your Runner.\n        // Runner runner = new Runner(\n        //     /* other services */,\n        //     inMemoryServiceJava\n        // );\n    }\n}\n</code></pre> </li> </ul>"},{"location":"artifacts/#gcsartifactservice","title":"GcsArtifactService","text":"<ul> <li>\u5132\u5b58\u6a5f\u5236\uff1a \u63a1\u7528 Google Cloud Storage\uff08GCS\uff09\u4f5c\u70ba\u6301\u4e45\u6027 artifact \u5132\u5b58\u7a7a\u9593\u3002\u6bcf\u500b artifact \u7684\u7248\u672c\u90fd\u6703\u4ee5\u7368\u7acb\u7684\u7269\u4ef6\uff08blob\uff09\u5132\u5b58\u5728\u6307\u5b9a\u7684 GCS bucket \u4e2d\u3002</li> <li>\u7269\u4ef6\u547d\u540d\u898f\u5247\uff1a \u900f\u904e\u968e\u5c64\u5f0f\u8def\u5f91\u7d50\u69cb\u4f86\u7d44\u6210 GCS \u7269\u4ef6\u540d\u7a31\uff08blob \u540d\u7a31\uff09\u3002</li> <li>\u4e3b\u8981\u7279\u9ede\uff1a<ul> <li>\u6301\u4e45\u6027\uff1a \u5132\u5b58\u5728 GCS \u7684 artifact \u53ef\u5728\u61c9\u7528\u7a0b\u5f0f\u91cd\u555f\u53ca\u90e8\u7f72\u5f8c\u6301\u7e8c\u4fdd\u7559\u3002</li> <li>\u53ef\u64f4\u5c55\u6027\uff1a \u5229\u7528 Google Cloud Storage \u7684\u53ef\u64f4\u5c55\u6027\u8207\u9ad8\u8010\u4e45\u6027\u3002</li> <li>\u7248\u672c\u7ba1\u7406\uff1a \u660e\u78ba\u5730\u5c07\u6bcf\u500b\u7248\u672c\u5132\u5b58\u70ba\u7368\u7acb\u7684 GCS \u7269\u4ef6\u3002\u76f8\u95dc\u65b9\u6cd5\u8acb\u53c3\u8003 <code>saveArtifact</code> \u65bc <code>GcsArtifactService</code>\u3002</li> <li>\u6240\u9700\u6b0a\u9650\uff1a \u61c9\u7528\u7a0b\u5f0f\u57f7\u884c\u74b0\u5883\u9700\u5177\u5099\u9069\u7576\u7684\u6191\u8b49\uff08\u4f8b\u5982 Application Default Credentials\uff09\u53ca IAM \u6b0a\u9650\uff0c\u4ee5\u8b80\u53d6\u548c\u5beb\u5165\u6307\u5b9a\u7684 GCS bucket\u3002</li> </ul> </li> <li>\u9069\u7528\u60c5\u5883\uff1a<ul> <li>\u751f\u7522\u74b0\u5883\u4e2d\u9700\u8981\u6301\u4e45\u6027 artifact \u5132\u5b58\u7684\u60c5\u5883\u3002</li> <li>\u9700\u8981\u5728\u4e0d\u540c\u61c9\u7528\u7a0b\u5f0f\u5be6\u4f8b\u6216\u670d\u52d9\u9593\u5171\u7528 artifact \u7684\u60c5\u5883\uff08\u900f\u904e\u5b58\u53d6\u540c\u4e00\u500b GCS bucket\uff09\u3002</li> <li>\u9700\u8981\u9577\u671f\u5132\u5b58\u8207\u64f7\u53d6\u4f7f\u7528\u8005\u6216 session \u8cc7\u6599\u7684\u61c9\u7528\u7a0b\u5f0f\u3002</li> </ul> </li> <li> <p>\u5be6\u4f8b\u5316\u65b9\u5f0f\uff1a</p> PythonJava <pre><code>from google.adk.artifacts import GcsArtifactService\n\n# Specify the GCS bucket name\ngcs_bucket_name_py = \"your-gcs-bucket-for-adk-artifacts\" # Replace with your bucket name\n\ntry:\n    gcs_service_py = GcsArtifactService(bucket_name=gcs_bucket_name_py)\n    print(f\"Python GcsArtifactService initialized for bucket: {gcs_bucket_name_py}\")\n    # Ensure your environment has credentials to access this bucket.\n    # e.g., via Application Default Credentials (ADC)\n\n    # Then pass it to the Runner\n    # runner = Runner(..., artifact_service=gcs_service_py)\n\nexcept Exception as e:\n    # Catch potential errors during GCS client initialization (e.g., auth issues)\n    print(f\"Error initializing Python GcsArtifactService: {e}\")\n    # Handle the error appropriately - maybe fall back to InMemory or raise\n</code></pre> <pre><code>import com.google.adk.artifacts.BaseArtifactService;\nimport com.google.adk.artifacts.GcsArtifactService;\nimport com.google.cloud.storage.Storage;\nimport com.google.cloud.storage.StorageOptions;\n\npublic class GcsServiceSetup {\n  public static void main(String[] args) {\n    // Specify the GCS bucket name\n    String gcsBucketNameJava = \"your-gcs-bucket-for-adk-artifacts\"; // Replace with your bucket name\n\n    try {\n      // Initialize the GCS Storage client.\n      // This will use Application Default Credentials by default.\n      // Ensure the environment is configured correctly (e.g., GOOGLE_APPLICATION_CREDENTIALS).\n      Storage storageClient = StorageOptions.getDefaultInstance().getService();\n\n      // Instantiate the GcsArtifactService\n      BaseArtifactService gcsServiceJava =\n          new GcsArtifactService(gcsBucketNameJava, storageClient);\n\n      System.out.println(\n          \"Java GcsArtifactService initialized for bucket: \" + gcsBucketNameJava);\n\n      // This instance would then be provided to your Runner.\n      // Runner runner = new Runner(\n      //     /* other services */,\n      //     gcsServiceJava\n      // );\n\n    } catch (Exception e) {\n      // Catch potential errors during GCS client initialization (e.g., auth, permissions)\n      System.err.println(\"Error initializing Java GcsArtifactService: \" + e.getMessage());\n      e.printStackTrace();\n      // Handle the error appropriately\n    }\n  }\n}\n</code></pre> </li> </ul> <p>\u9078\u64c7\u5408\u9069\u7684 <code>ArtifactService</code> \u5be6\u4f5c\uff0c\u53d6\u6c7a\u65bc\u60a8\u7684\u61c9\u7528\u7a0b\u5f0f\u5c0d\u8cc7\u6599\u6301\u4e45\u6027\u3001\u53ef\u64f4\u5c55\u6027\u4ee5\u53ca\u904b\u884c\u74b0\u5883\u7684\u9700\u6c42\u3002</p>"},{"location":"artifacts/#_5","title":"\u6700\u4f73\u5be6\u8e10","text":"<p>\u70ba\u4e86\u6709\u6548\u4e14\u53ef\u7dad\u8b77\u5730\u4f7f\u7528 artifacts\uff08\u7522\u7269\uff09\uff0c\u5efa\u8b70\u9075\u5faa\u4ee5\u4e0b\u505a\u6cd5\uff1a</p> <ul> <li>\u9078\u64c7\u5408\u9069\u7684\u670d\u52d9\uff1a \u82e5\u9700\u5feb\u901f\u539f\u578b\u958b\u767c\u3001\u6e2c\u8a66\u6216\u4e0d\u9700\u8981\u6301\u4e45\u5316\u7684\u60c5\u5883\uff0c\u8acb\u4f7f\u7528 <code>InMemoryArtifactService</code>\u3002\u82e5\u70ba\u9700\u8981\u8cc7\u6599\u6301\u4e45\u6027\u8207\u53ef\u64f4\u5c55\u6027\u7684\u6b63\u5f0f\u74b0\u5883\uff0c\u8acb\u4f7f\u7528 <code>GcsArtifactService</code>\uff08\u6216\u91dd\u5c0d\u5176\u4ed6\u5f8c\u7aef\u81ea\u884c\u5be6\u4f5c <code>BaseArtifactService</code>\uff09\u3002  </li> <li>\u6709\u610f\u7fa9\u7684\u6a94\u540d\uff1a \u8acb\u4f7f\u7528\u6e05\u695a\u4e14\u5177\u63cf\u8ff0\u6027\u7684\u6a94\u540d\u3002\u96d6\u7136 <code>mime_type</code> \u6703\u6c7a\u5b9a\u7a0b\u5f0f\u5982\u4f55\u8655\u7406\u6a94\u6848\uff0c\u4f46\u52a0\u4e0a\u76f8\u95dc\u526f\u6a94\u540d\uff08\u5982 <code>.pdf</code>\u3001<code>.png</code>\u3001<code>.wav</code>\uff09\u6709\u52a9\u65bc\u4eba\u54e1\u7406\u89e3\u5167\u5bb9\u3002\u8acb\u5efa\u7acb\u66ab\u5b58\u8207\u6301\u4e45\u6027 artifact \u6a94\u540d\u7684\u547d\u540d\u6163\u4f8b\u3002  </li> <li>\u6307\u5b9a\u6b63\u78ba\u7684 MIME \u985e\u578b\uff1a \u5728\u70ba <code>save_artifact</code> \u5efa\u7acb <code>types.Part</code> \u6642\uff0c\u52d9\u5fc5\u63d0\u4f9b\u6b63\u78ba\u7684 <code>mime_type</code>\u3002\u9019\u5c0d\u65bc\u5f8c\u7e8c\u9700\u8981\u6b63\u78ba\u89e3\u6790 <code>bytes</code> \u8cc7\u6599\u7684\u61c9\u7528\u7a0b\u5f0f\u6216\u5de5\u5177\u81f3\u95dc\u91cd\u8981\u3002\u8acb\u76e1\u53ef\u80fd\u4f7f\u7528\u6a19\u6e96\u7684 IANA MIME \u985e\u578b\u3002  </li> <li>\u7406\u89e3\u7248\u672c\u7ba1\u7406\uff1a \u8acb\u6ce8\u610f\uff0c<code>load_artifact()</code> \u82e5\u672a\u6307\u5b9a <code>version</code> \u53c3\u6578\uff0c\u6703\u53d6\u5f97\u6700\u65b0\u7248\u672c\u3002\u5982\u679c\u60a8\u7684\u908f\u8f2f\u4f9d\u8cf4\u65bc artifact \u7684\u7279\u5b9a\u6b77\u53f2\u7248\u672c\uff0c\u8f09\u5165\u6642\u8acb\u52d9\u5fc5\u63d0\u4f9b\u6574\u6578\u7248\u672c\u865f\u3002  </li> <li>\u6709\u610f\u8b58\u5730\u4f7f\u7528\u547d\u540d\u7a7a\u9593\uff08<code>user:</code>\uff09\uff1a \u50c5\u7576\u8cc7\u6599\u78ba\u5be6\u5c6c\u65bc\u4f7f\u7528\u8005\u4e14\u61c9\u8de8\u6240\u6709 session \u53ef\u5b58\u53d6\u6642\uff0c\u624d\u5728\u6a94\u540d\u52a0\u4e0a <code>\"user:\"</code> \u524d\u7db4\u3002\u82e5\u8cc7\u6599\u50c5\u5c6c\u65bc\u55ae\u4e00\u5c0d\u8a71\u6216 session\uff0c\u8acb\u4f7f\u7528\u4e00\u822c\u6a94\u540d\uff0c\u4e0d\u52a0\u524d\u7db4\u3002  </li> <li>\u932f\u8aa4\u8655\u7406\uff1a <ul> <li>\u5728\u547c\u53eb context \u65b9\u6cd5\uff08<code>save_artifact</code>\u3001<code>load_artifact</code>\u3001<code>list_artifacts</code>\uff09\u524d\uff0c\u52d9\u5fc5\u5148\u6aa2\u67e5 <code>artifact_service</code> \u662f\u5426\u5df2\u6b63\u78ba\u8a2d\u5b9a\u2014\u2014\u82e5\u670d\u52d9\u70ba <code>None</code>\uff0c\u9019\u4e9b\u65b9\u6cd5\u6703\u62cb\u51fa <code>ValueError</code>\u3002  </li> <li>\u8acb\u6aa2\u67e5 <code>load_artifact</code> \u7684\u56de\u50b3\u503c\uff0c\u82e5 artifact \u6216\u7248\u672c\u4e0d\u5b58\u5728\uff0c\u5c07\u6703\u662f <code>None</code>\u3002\u4e0d\u8981\u5047\u8a2d\u5b83\u4e00\u5b9a\u6703\u56de\u50b3 <code>Part</code>\u3002  </li> <li>\u61c9\u6e96\u5099\u597d\u8655\u7406\u5e95\u5c64\u5132\u5b58\u670d\u52d9\u7684\u4f8b\u5916\u72c0\u6cc1\uff0c\u7279\u5225\u662f\u5728\u4f7f\u7528 <code>GcsArtifactService</code> \u6642\uff08\u4f8b\u5982\uff1a<code>google.api_core.exceptions.Forbidden</code> \u4ee3\u8868\u6b0a\u9650\u554f\u984c\u3001<code>NotFound</code> \u8868\u793a bucket \u4e0d\u5b58\u5728\u3001\u7db2\u8def\u932f\u8aa4\u7b49\uff09\u3002  </li> </ul> </li> <li>\u6a94\u6848\u5927\u5c0f\u8003\u91cf\uff1a artifact \u9069\u7528\u65bc\u4e00\u822c\u6a94\u6848\u5927\u5c0f\uff0c\u4f46\u82e5\u70ba\u6975\u5927\u6a94\u6848\uff0c\u7279\u5225\u662f\u5728\u96f2\u7aef\u5132\u5b58\u6642\uff0c\u8acb\u6ce8\u610f\u53ef\u80fd\u7684\u6210\u672c\u8207\u6548\u80fd\u5f71\u97ff\u3002<code>InMemoryArtifactService</code> \u82e5\u5132\u5b58\u5927\u91cf\u5927\u578b artifact\uff0c\u53ef\u80fd\u6703\u4f54\u7528\u5927\u91cf\u8a18\u61b6\u9ad4\u3002\u82e5\u8cc7\u6599\u91cf\u6975\u5927\uff0c\u5efa\u8b70\u8003\u616e\u76f4\u63a5\u4f7f\u7528 GCS \u9023\u7d50\u6216\u5176\u4ed6\u5c08\u9580\u7684\u5132\u5b58\u65b9\u6848\uff0c\u800c\u975e\u76f4\u63a5\u4ee5\u8a18\u61b6\u9ad4\u50b3\u905e\u6574\u500b\u4f4d\u5143\u7d44\u9663\u5217\u3002  </li> <li>\u6e05\u7406\u7b56\u7565\uff1a \u5c0d\u65bc\u50cf <code>GcsArtifactService</code> \u9019\u985e\u6301\u4e45\u6027\u5132\u5b58\uff0cartifact \u6703\u4e00\u76f4\u4fdd\u7559\uff0c\u76f4\u5230\u660e\u78ba\u522a\u9664\u3002\u5982\u679c artifact \u4ee3\u8868\u66ab\u5b58\u8cc7\u6599\u6216\u50c5\u9700\u77ed\u66ab\u4fdd\u5b58\uff0c\u8acb\u5be6\u4f5c\u6e05\u7406\u7b56\u7565\u3002\u9019\u53ef\u5305\u62ec\uff1a  <ul> <li>\u5728 bucket \u4e0a\u8a2d\u5b9a GCS \u751f\u547d\u9031\u671f\u653f\u7b56\u3002  </li> <li>\u5efa\u7acb\u5c08\u7528\u5de5\u5177\u6216\u7ba1\u7406\u529f\u80fd\uff0c\u5229\u7528 <code>artifact_service.delete_artifact</code> \u65b9\u6cd5\uff08\u6ce8\u610f\uff1a\u70ba\u5b89\u5168\u8d77\u898b\uff0ccontext \u7269\u4ef6\u4e26\u672a\u63d0\u4f9b delete \u529f\u80fd\uff09\u3002  </li> <li>\u8b39\u614e\u7ba1\u7406\u6a94\u540d\uff0c\u4ee5\u4fbf\u65e5\u5f8c\u53ef\u4f9d\u6a21\u5f0f\u6279\u6b21\u522a\u9664\u3002</li> </ul> </li> </ul>"},{"location":"artifacts/index.en/","title":"Artifacts","text":"<p>In ADK, Artifacts represent a crucial mechanism for managing named, versioned binary data associated either with a specific user interaction session or persistently with a user across multiple sessions. They allow your agents and tools to handle data beyond simple text strings, enabling richer interactions involving files, images, audio, and other binary formats.</p> <p>Note</p> <p>The specific parameters or method names for the primitives may vary slightly by SDK language (e.g., <code>save_artifact</code> in Python, <code>saveArtifact</code> in Java). Refer to the language-specific API documentation for details.</p>"},{"location":"artifacts/index.en/#what-are-artifacts","title":"What are Artifacts?","text":"<ul> <li> <p>Definition: An Artifact is essentially a piece of binary data (like the content of a file) identified by a unique <code>filename</code> string within a specific scope (session or user). Each time you save an artifact with the same filename, a new version is created.</p> </li> <li> <p>Representation: Artifacts are consistently represented using the standard <code>google.genai.types.Part</code> object. The core data is typically stored within an inline data structure of the <code>Part</code> (accessed via <code>inline_data</code>), which itself contains:</p> <ul> <li><code>data</code>: The raw binary content as bytes.</li> <li><code>mime_type</code>: A string indicating the type of the data (e.g., <code>\"image/png\"</code>, <code>\"application/pdf\"</code>). This is essential for correctly interpreting the data later.</li> </ul> </li> </ul> PythonJava <pre><code># Example of how an artifact might be represented as a types.Part\nimport google.genai.types as types\n\n# Assume 'image_bytes' contains the binary data of a PNG image\nimage_bytes = b'\\x89PNG\\r\\n\\x1a\\n...' # Placeholder for actual image bytes\n\nimage_artifact = types.Part(\n    inline_data=types.Blob(\n        mime_type=\"image/png\",\n        data=image_bytes\n    )\n)\n\n# You can also use the convenience constructor:\n# image_artifact_alt = types.Part.from_bytes(data=image_bytes, mime_type=\"image/png\")\n\nprint(f\"Artifact MIME Type: {image_artifact.inline_data.mime_type}\")\nprint(f\"Artifact Data (first 10 bytes): {image_artifact.inline_data.data[:10]}...\")\n</code></pre> <pre><code>import com.google.genai.types.Part;\nimport java.nio.charset.StandardCharsets;\n\npublic class ArtifactExample {\n    public static void main(String[] args) {\n        // Assume 'imageBytes' contains the binary data of a PNG image\n        byte[] imageBytes = {(byte) 0x89, (byte) 0x50, (byte) 0x4E, (byte) 0x47, (byte) 0x0D, (byte) 0x0A, (byte) 0x1A, (byte) 0x0A, (byte) 0x01, (byte) 0x02}; // Placeholder for actual image bytes\n\n        // Create an image artifact using Part.fromBytes\n        Part imageArtifact = Part.fromBytes(imageBytes, \"image/png\");\n\n        System.out.println(\"Artifact MIME Type: \" + imageArtifact.inlineData().get().mimeType().get());\n        System.out.println(\n            \"Artifact Data (first 10 bytes): \"\n                + new String(imageArtifact.inlineData().get().data().get(), 0, 10, StandardCharsets.UTF_8)\n                + \"...\");\n    }\n}\n</code></pre> <ul> <li>Persistence &amp; Management: Artifacts are not stored directly within the agent or session state. Their storage and retrieval are managed by a dedicated Artifact Service (an implementation of <code>BaseArtifactService</code>, defined in <code>google.adk.artifacts</code>. ADK provides various implementations, such as:<ul> <li>An in-memory service for testing or temporary storage (e.g., <code>InMemoryArtifactService</code> in Python, defined in <code>google.adk.artifacts.in_memory_artifact_service.py</code>).</li> <li>A service for persistent storage using Google Cloud Storage (GCS) (e.g., <code>GcsArtifactService</code> in Python, defined in <code>google.adk.artifacts.gcs_artifact_service.py</code>). The chosen service implementation handles versioning automatically when you save data.</li> </ul> </li> </ul>"},{"location":"artifacts/index.en/#why-use-artifacts","title":"Why Use Artifacts?","text":"<p>While session <code>state</code> is suitable for storing small pieces of configuration or conversational context (like strings, numbers, booleans, or small dictionaries/lists), Artifacts are designed for scenarios involving binary or large data:</p> <ol> <li>Handling Non-Textual Data: Easily store and retrieve images, audio clips, video snippets, PDFs, spreadsheets, or any other file format relevant to your agent's function.  </li> <li>Persisting Large Data: Session state is generally not optimized for storing large amounts of data. Artifacts provide a dedicated mechanism for persisting larger blobs without cluttering the session state.  </li> <li>User File Management: Provide capabilities for users to upload files (which can be saved as artifacts) and retrieve or download files generated by the agent (loaded from artifacts).  </li> <li>Sharing Outputs: Enable tools or agents to generate binary outputs (like a PDF report or a generated image) that can be saved via <code>save_artifact</code> and later accessed by other parts of the application or even in subsequent sessions (if using user namespacing).  </li> <li>Caching Binary Data: Store the results of computationally expensive operations that produce binary data (e.g., rendering a complex chart image) as artifacts to avoid regenerating them on subsequent requests.</li> </ol> <p>In essence, whenever your agent needs to work with file-like binary data that needs to be persisted, versioned, or shared, Artifacts managed by an <code>ArtifactService</code> are the appropriate mechanism within ADK.</p>"},{"location":"artifacts/index.en/#common-use-cases","title":"Common Use Cases","text":"<p>Artifacts provide a flexible way to handle binary data within your ADK applications.</p> <p>Here are some typical scenarios where they prove valuable:</p> <ul> <li> <p>Generated Reports/Files:</p> <ul> <li>A tool or agent generates a report (e.g., a PDF analysis, a CSV data export, an image chart).</li> </ul> </li> <li> <p>Handling User Uploads:</p> <ul> <li>A user uploads a file (e.g., an image for analysis, a document for summarization) through a front-end interface.</li> </ul> </li> <li> <p>Storing Intermediate Binary Results:</p> <ul> <li>An agent performs a complex multi-step process where one step generates intermediate binary data (e.g., audio synthesis, simulation results).</li> </ul> </li> <li> <p>Persistent User Data:</p> <ul> <li>Storing user-specific configuration or data that isn't a simple key-value state.</li> </ul> </li> <li> <p>Caching Generated Binary Content:</p> <ul> <li>An agent frequently generates the same binary output based on certain inputs (e.g., a company logo image, a standard audio greeting).</li> </ul> </li> </ul>"},{"location":"artifacts/index.en/#core-concepts","title":"Core Concepts","text":"<p>Understanding artifacts involves grasping a few key components: the service that manages them, the data structure used to hold them, and how they are identified and versioned.</p>"},{"location":"artifacts/index.en/#artifact-service-baseartifactservice","title":"Artifact Service (<code>BaseArtifactService</code>)","text":"<ul> <li> <p>Role: The central component responsible for the actual storage and retrieval logic for artifacts. It defines how and where artifacts are persisted.  </p> </li> <li> <p>Interface: Defined by the abstract base class <code>BaseArtifactService</code>. Any concrete implementation must provide methods for:  </p> <ul> <li><code>Save Artifact</code>: Stores the artifact data and returns its assigned version number.  </li> <li><code>Load Artifact</code>: Retrieves a specific version (or the latest) of an artifact.  </li> <li><code>List Artifact keys</code>: Lists the unique filenames of artifacts within a given scope.  </li> <li><code>Delete Artifact</code>: Removes an artifact (and potentially all its versions, depending on implementation).  </li> <li><code>List versions</code>: Lists all available version numbers for a specific artifact filename.</li> </ul> </li> <li> <p>Configuration: You provide an instance of an artifact service (e.g., <code>InMemoryArtifactService</code>, <code>GcsArtifactService</code>) when initializing the <code>Runner</code>. The <code>Runner</code> then makes this service available to agents and tools via the <code>InvocationContext</code>.</p> </li> </ul> PythonJava <pre><code>from google.adk.runners import Runner\nfrom google.adk.artifacts import InMemoryArtifactService # Or GcsArtifactService\nfrom google.adk.agents import LlmAgent # Any agent\nfrom google.adk.sessions import InMemorySessionService\n\n# Example: Configuring the Runner with an Artifact Service\nmy_agent = LlmAgent(name=\"artifact_user_agent\", model=\"gemini-2.0-flash\")\nartifact_service = InMemoryArtifactService() # Choose an implementation\nsession_service = InMemorySessionService()\n\nrunner = Runner(\n    agent=my_agent,\n    app_name=\"my_artifact_app\",\n    session_service=session_service,\n    artifact_service=artifact_service # Provide the service instance here\n)\n# Now, contexts within runs managed by this runner can use artifact methods\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.artifacts.InMemoryArtifactService;\n\n// Example: Configuring the Runner with an Artifact Service\nLlmAgent myAgent =  LlmAgent.builder()\n  .name(\"artifact_user_agent\")\n  .model(\"gemini-2.0-flash\")\n  .build();\nInMemoryArtifactService artifactService = new InMemoryArtifactService(); // Choose an implementation\nInMemorySessionService sessionService = new InMemorySessionService();\n\nRunner runner = new Runner(myAgent, \"my_artifact_app\", artifactService, sessionService); // Provide the service instance here\n// Now, contexts within runs managed by this runner can use artifact methods\n</code></pre>"},{"location":"artifacts/index.en/#artifact-data","title":"Artifact Data","text":"<ul> <li> <p>Standard Representation: Artifact content is universally represented using the <code>google.genai.types.Part</code> object, the same structure used for parts of LLM messages.  </p> </li> <li> <p>Key Attribute (<code>inline_data</code>): For artifacts, the most relevant attribute is <code>inline_data</code>, which is a <code>google.genai.types.Blob</code> object containing:  </p> <ul> <li><code>data</code> (<code>bytes</code>): The raw binary content of the artifact.  </li> <li><code>mime_type</code> (<code>str</code>): A standard MIME type string (e.g., <code>'application/pdf'</code>, <code>'image/png'</code>, <code>'audio/mpeg'</code>) describing the nature of the binary data. This is crucial for correct interpretation when loading the artifact.</li> </ul> </li> </ul> PythonJava <pre><code>import google.genai.types as types\n\n# Example: Creating an artifact Part from raw bytes\npdf_bytes = b'%PDF-1.4...' # Your raw PDF data\npdf_mime_type = \"application/pdf\"\n\n# Using the constructor\npdf_artifact_py = types.Part(\n    inline_data=types.Blob(data=pdf_bytes, mime_type=pdf_mime_type)\n)\n\n# Using the convenience class method (equivalent)\npdf_artifact_alt_py = types.Part.from_bytes(data=pdf_bytes, mime_type=pdf_mime_type)\n\nprint(f\"Created Python artifact with MIME type: {pdf_artifact_py.inline_data.mime_type}\")\n</code></pre> <pre><code>import com.google.genai.types.Blob;\nimport com.google.genai.types.Part;\nimport java.nio.charset.StandardCharsets;\n\npublic class ArtifactDataExample {\n  public static void main(String[] args) {\n    // Example: Creating an artifact Part from raw bytes\n    byte[] pdfBytes = \"%PDF-1.4...\".getBytes(StandardCharsets.UTF_8); // Your raw PDF data\n    String pdfMimeType = \"application/pdf\";\n\n    // Using the Part.fromBlob() constructor with a Blob\n    Blob pdfBlob = Blob.builder()\n        .data(pdfBytes)\n        .mimeType(pdfMimeType)\n        .build();\n    Part pdfArtifactJava = Part.builder().inlineData(pdfBlob).build();\n\n    // Using the convenience static method Part.fromBytes() (equivalent)\n    Part pdfArtifactAltJava = Part.fromBytes(pdfBytes, pdfMimeType);\n\n    // Accessing mimeType, note the use of Optional\n    String mimeType = pdfArtifactJava.inlineData()\n        .flatMap(Blob::mimeType)\n        .orElse(\"unknown\");\n    System.out.println(\"Created Java artifact with MIME type: \" + mimeType);\n\n    // Accessing data\n    byte[] data = pdfArtifactJava.inlineData()\n        .flatMap(Blob::data)\n        .orElse(new byte[0]);\n    System.out.println(\"Java artifact data (first 10 bytes): \"\n        + new String(data, 0, Math.min(data.length, 10), StandardCharsets.UTF_8) + \"...\");\n  }\n}\n</code></pre>"},{"location":"artifacts/index.en/#filename","title":"Filename","text":"<ul> <li>Identifier: A simple string used to name and retrieve an artifact within its specific namespace.  </li> <li>Uniqueness: Filenames must be unique within their scope (either the session or the user namespace).  </li> <li>Best Practice: Use descriptive names, potentially including file extensions (e.g., <code>\"monthly_report.pdf\"</code>, <code>\"user_avatar.jpg\"</code>), although the extension itself doesn't dictate behavior \u2013 the <code>mime_type</code> does.</li> </ul>"},{"location":"artifacts/index.en/#versioning","title":"Versioning","text":"<ul> <li>Automatic Versioning: The artifact service automatically handles versioning. When you call <code>save_artifact</code>, the service determines the next available version number (typically starting from 0 and incrementing) for that specific filename and scope.  </li> <li>Returned by <code>save_artifact</code>: The <code>save_artifact</code> method returns the integer version number that was assigned to the newly saved artifact.  </li> <li>Retrieval: </li> <li><code>load_artifact(..., version=None)</code> (default): Retrieves the latest available version of the artifact.  </li> <li><code>load_artifact(..., version=N)</code>: Retrieves the specific version <code>N</code>.  </li> <li>Listing Versions: The <code>list_versions</code> method (on the service, not context) can be used to find all existing version numbers for an artifact.</li> </ul>"},{"location":"artifacts/index.en/#namespacing-session-vs-user","title":"Namespacing (Session vs. User)","text":"<ul> <li> <p>Concept: Artifacts can be scoped either to a specific session or more broadly to a user across all their sessions within the application. This scoping is determined by the <code>filename</code> format and handled internally by the <code>ArtifactService</code>.  </p> </li> <li> <p>Default (Session Scope): If you use a plain filename like <code>\"report.pdf\"</code>, the artifact is associated with the specific <code>app_name</code>, <code>user_id</code>, and <code>session_id</code>. It's only accessible within that exact session context.  </p> </li> <li> <p>User Scope (<code>\"user:\"</code> prefix): If you prefix the filename with <code>\"user:\"</code>, like <code>\"user:profile.png\"</code>, the artifact is associated only with the <code>app_name</code> and <code>user_id</code>. It can be accessed or updated from any session belonging to that user within the app.  </p> </li> </ul> PythonJava <pre><code># Example illustrating namespace difference (conceptual)\n\n# Session-specific artifact filename\nsession_report_filename = \"summary.txt\"\n\n# User-specific artifact filename\nuser_config_filename = \"user:settings.json\"\n\n# When saving 'summary.txt' via context.save_artifact,\n# it's tied to the current app_name, user_id, and session_id.\n\n# When saving 'user:settings.json' via context.save_artifact,\n# the ArtifactService implementation should recognize the \"user:\" prefix\n# and scope it to app_name and user_id, making it accessible across sessions for that user.\n</code></pre> <pre><code>// Example illustrating namespace difference (conceptual)\n\n// Session-specific artifact filename\nString sessionReportFilename = \"summary.txt\";\n\n// User-specific artifact filename\nString userConfigFilename = \"user:settings.json\"; // The \"user:\" prefix is key\n\n// When saving 'summary.txt' via context.save_artifact,\n// it's tied to the current app_name, user_id, and session_id.\n// artifactService.saveArtifact(appName, userId, sessionId1, sessionReportFilename, someData);\n\n// When saving 'user:settings.json' via context.save_artifact,\n// the ArtifactService implementation should recognize the \"user:\" prefix\n// and scope it to app_name and user_id, making it accessible across sessions for that user.\n// artifactService.saveArtifact(appName, userId, sessionId1, userConfigFilename, someData);\n</code></pre> <p>These core concepts work together to provide a flexible system for managing binary data within the ADK framework.</p>"},{"location":"artifacts/index.en/#interacting-with-artifacts-via-context-objects","title":"Interacting with Artifacts (via Context Objects)","text":"<p>The primary way you interact with artifacts within your agent's logic (specifically within callbacks or tools) is through methods provided by the <code>CallbackContext</code> and <code>ToolContext</code> objects. These methods abstract away the underlying storage details managed by the <code>ArtifactService</code>.</p>"},{"location":"artifacts/index.en/#prerequisite-configuring-the-artifactservice","title":"Prerequisite: Configuring the <code>ArtifactService</code>","text":"<p>Before you can use any artifact methods via the context objects, you must provide an instance of a <code>BaseArtifactService</code> implementation (like <code>InMemoryArtifactService</code> or <code>GcsArtifactService</code>) when initializing your <code>Runner</code>.</p> PythonJava <p>In Python, you provide this instance when initializing your <code>Runner</code>.</p> <p><pre><code>from google.adk.runners import Runner\nfrom google.adk.artifacts import InMemoryArtifactService # Or GcsArtifactService\nfrom google.adk.agents import LlmAgent\nfrom google.adk.sessions import InMemorySessionService\n\n# Your agent definition\nagent = LlmAgent(name=\"my_agent\", model=\"gemini-2.0-flash\")\n\n# Instantiate the desired artifact service\nartifact_service = InMemoryArtifactService()\n\n# Provide it to the Runner\nrunner = Runner(\n    agent=agent,\n    app_name=\"artifact_app\",\n    session_service=InMemorySessionService(),\n    artifact_service=artifact_service # Service must be provided here\n)\n</code></pre> If no <code>artifact_service</code> is configured in the <code>InvocationContext</code> (which happens if it's not passed to the <code>Runner</code>), calling <code>save_artifact</code>, <code>load_artifact</code>, or <code>list_artifacts</code> on the context objects will raise a <code>ValueError</code>.</p> <p>In Java, you would instantiate a <code>BaseArtifactService</code> implementation and then ensure it's accessible to the parts of your application that manage artifacts. This is often done through dependency injection or by explicitly passing the service instance.</p> <p><pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.artifacts.InMemoryArtifactService; // Or GcsArtifactService\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\n\npublic class SampleArtifactAgent {\n\n  public static void main(String[] args) {\n\n    // Your agent definition\n    LlmAgent agent = LlmAgent.builder()\n        .name(\"my_agent\")\n        .model(\"gemini-2.0-flash\")\n        .build();\n\n    // Instantiate the desired artifact service\n    InMemoryArtifactService artifactService = new InMemoryArtifactService();\n\n    // Provide it to the Runner\n    Runner runner = new Runner(agent,\n        \"APP_NAME\",\n        artifactService, // Service must be provided here\n        new InMemorySessionService());\n\n  }\n}\n</code></pre> In Java, if an <code>ArtifactService</code> instance is not available (e.g., <code>null</code>) when artifact operations are attempted, it would typically result in a <code>NullPointerException</code> or a custom error, depending on how your application is structured. Robust applications often use dependency injection frameworks to manage service lifecycles and ensure availability.</p>"},{"location":"artifacts/index.en/#accessing-methods","title":"Accessing Methods","text":"<p>The artifact interaction methods are available directly on instances of <code>CallbackContext</code> (passed to agent and model callbacks) and <code>ToolContext</code> (passed to tool callbacks). Remember that <code>ToolContext</code> inherits from <code>CallbackContext</code>.</p> <ul> <li> <p>Code Example:</p> PythonJava <pre><code>import google.genai.types as types\nfrom google.adk.agents.callback_context import CallbackContext # Or ToolContext\n\nasync def save_generated_report_py(context: CallbackContext, report_bytes: bytes):\n    \"\"\"Saves generated PDF report bytes as an artifact.\"\"\"\n    report_artifact = types.Part.from_data(\n        data=report_bytes,\n        mime_type=\"application/pdf\"\n    )\n    filename = \"generated_report.pdf\"\n\n    try:\n        version = await context.save_artifact(filename=filename, artifact=report_artifact)\n        print(f\"Successfully saved Python artifact '{filename}' as version {version}.\")\n        # The event generated after this callback will contain:\n        # event.actions.artifact_delta == {\"generated_report.pdf\": version}\n    except ValueError as e:\n        print(f\"Error saving Python artifact: {e}. Is ArtifactService configured in Runner?\")\n    except Exception as e:\n        # Handle potential storage errors (e.g., GCS permissions)\n        print(f\"An unexpected error occurred during Python artifact save: {e}\")\n\n# --- Example Usage Concept (Python) ---\n# async def main_py():\n#   callback_context: CallbackContext = ... # obtain context\n#   report_data = b'...' # Assume this holds the PDF bytes\n#   await save_generated_report_py(callback_context, report_data)\n</code></pre> <pre><code>import com.google.adk.agents.CallbackContext;\nimport com.google.adk.artifacts.BaseArtifactService;\nimport com.google.adk.artifacts.InMemoryArtifactService;\nimport com.google.genai.types.Part;\nimport java.nio.charset.StandardCharsets;\n\npublic class SaveArtifactExample {\n\npublic void saveGeneratedReport(CallbackContext callbackContext, byte[] reportBytes) {\n// Saves generated PDF report bytes as an artifact.\nPart reportArtifact = Part.fromBytes(reportBytes, \"application/pdf\");\nString filename = \"generatedReport.pdf\";\n\n    callbackContext.saveArtifact(filename, reportArtifact);\n    System.out.println(\"Successfully saved Java artifact '\" + filename);\n    // The event generated after this callback will contain:\n    // event().actions().artifactDelta == {\"generated_report.pdf\": version}\n}\n\n// --- Example Usage Concept (Java) ---\npublic static void main(String[] args) {\n    BaseArtifactService service = new InMemoryArtifactService(); // Or GcsArtifactService\n    SaveArtifactExample myTool = new SaveArtifactExample();\n    byte[] reportData = \"...\".getBytes(StandardCharsets.UTF_8); // PDF bytes\n    CallbackContext callbackContext; // ... obtain callback context from your app\n    myTool.saveGeneratedReport(callbackContext, reportData);\n    // Due to async nature, in a real app, ensure program waits or handles completion.\n  }\n}\n</code></pre> </li> </ul>"},{"location":"artifacts/index.en/#loading-artifacts","title":"Loading Artifacts","text":"<ul> <li> <p>Code Example:</p> PythonJava <pre><code>import google.genai.types as types\nfrom google.adk.agents.callback_context import CallbackContext # Or ToolContext\n\nasync def process_latest_report_py(context: CallbackContext):\n    \"\"\"Loads the latest report artifact and processes its data.\"\"\"\n    filename = \"generated_report.pdf\"\n    try:\n        # Load the latest version\n        report_artifact = await context.load_artifact(filename=filename)\n\n        if report_artifact and report_artifact.inline_data:\n            print(f\"Successfully loaded latest Python artifact '{filename}'.\")\n            print(f\"MIME Type: {report_artifact.inline_data.mime_type}\")\n            # Process the report_artifact.inline_data.data (bytes)\n            pdf_bytes = report_artifact.inline_data.data\n            print(f\"Report size: {len(pdf_bytes)} bytes.\")\n            # ... further processing ...\n        else:\n            print(f\"Python artifact '{filename}' not found.\")\n\n        # Example: Load a specific version (if version 0 exists)\n        # specific_version_artifact = await context.load_artifact(filename=filename, version=0)\n        # if specific_version_artifact:\n        #     print(f\"Loaded version 0 of '{filename}'.\")\n\n    except ValueError as e:\n        print(f\"Error loading Python artifact: {e}. Is ArtifactService configured?\")\n    except Exception as e:\n        # Handle potential storage errors\n        print(f\"An unexpected error occurred during Python artifact load: {e}\")\n\n# --- Example Usage Concept (Python) ---\n# async def main_py():\n#   callback_context: CallbackContext = ... # obtain context\n#   await process_latest_report_py(callback_context)\n</code></pre> <pre><code>import com.google.adk.artifacts.BaseArtifactService;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.MaybeObserver;\nimport io.reactivex.rxjava3.disposables.Disposable;\nimport java.util.Optional;\n\npublic class MyArtifactLoaderService {\n\n    private final BaseArtifactService artifactService;\n    private final String appName;\n\n    public MyArtifactLoaderService(BaseArtifactService artifactService, String appName) {\n        this.artifactService = artifactService;\n        this.appName = appName;\n    }\n\n    public void processLatestReportJava(String userId, String sessionId, String filename) {\n        // Load the latest version by passing Optional.empty() for the version\n        artifactService\n                .loadArtifact(appName, userId, sessionId, filename, Optional.empty())\n                .subscribe(\n                        new MaybeObserver&lt;Part&gt;() {\n                            @Override\n                            public void onSubscribe(Disposable d) {\n                                // Optional: handle subscription\n                            }\n\n                            @Override\n                            public void onSuccess(Part reportArtifact) {\n                                System.out.println(\n                                        \"Successfully loaded latest Java artifact '\" + filename + \"'.\");\n                                reportArtifact\n                                        .inlineData()\n                                        .ifPresent(\n                                                blob -&gt; {\n                                                    System.out.println(\n                                                            \"MIME Type: \" + blob.mimeType().orElse(\"N/A\"));\n                                                    byte[] pdfBytes = blob.data().orElse(new byte[0]);\n                                                    System.out.println(\"Report size: \" + pdfBytes.length + \" bytes.\");\n                                                    // ... further processing of pdfBytes ...\n                                                });\n                            }\n\n                            @Override\n                            public void onError(Throwable e) {\n                                // Handle potential storage errors or other exceptions\n                                System.err.println(\n                                        \"An error occurred during Java artifact load for '\"\n                                                + filename\n                                                + \"': \"\n                                                + e.getMessage());\n                            }\n\n                            @Override\n                            public void onComplete() {\n                                // Called if the artifact (latest version) is not found\n                                System.out.println(\"Java artifact '\" + filename + \"' not found.\");\n                            }\n                        });\n\n        // Example: Load a specific version (e.g., version 0)\n        /*\n        artifactService.loadArtifact(appName, userId, sessionId, filename, Optional.of(0))\n            .subscribe(part -&gt; {\n                System.out.println(\"Loaded version 0 of Java artifact '\" + filename + \"'.\");\n            }, throwable -&gt; {\n                System.err.println(\"Error loading version 0 of '\" + filename + \"': \" + throwable.getMessage());\n            }, () -&gt; {\n                System.out.println(\"Version 0 of Java artifact '\" + filename + \"' not found.\");\n            });\n        */\n    }\n\n    // --- Example Usage Concept (Java) ---\n    public static void main(String[] args) {\n        // BaseArtifactService service = new InMemoryArtifactService(); // Or GcsArtifactService\n        // MyArtifactLoaderService loader = new MyArtifactLoaderService(service, \"myJavaApp\");\n        // loader.processLatestReportJava(\"user123\", \"sessionABC\", \"java_report.pdf\");\n        // Due to async nature, in a real app, ensure program waits or handles completion.\n    }\n}\n</code></pre> </li> </ul>"},{"location":"artifacts/index.en/#listing-artifact-filenames","title":"Listing Artifact Filenames","text":"<ul> <li> <p>Code Example:</p> PythonJava <pre><code>from google.adk.tools.tool_context import ToolContext\n\ndef list_user_files_py(tool_context: ToolContext) -&gt; str:\n    \"\"\"Tool to list available artifacts for the user.\"\"\"\n    try:\n        available_files = await tool_context.list_artifacts()\n        if not available_files:\n            return \"You have no saved artifacts.\"\n        else:\n            # Format the list for the user/LLM\n            file_list_str = \"\\n\".join([f\"- {fname}\" for fname in available_files])\n            return f\"Here are your available Python artifacts:\\n{file_list_str}\"\n    except ValueError as e:\n        print(f\"Error listing Python artifacts: {e}. Is ArtifactService configured?\")\n        return \"Error: Could not list Python artifacts.\"\n    except Exception as e:\n        print(f\"An unexpected error occurred during Python artifact list: {e}\")\n        return \"Error: An unexpected error occurred while listing Python artifacts.\"\n\n# This function would typically be wrapped in a FunctionTool\n# from google.adk.tools import FunctionTool\n# list_files_tool = FunctionTool(func=list_user_files_py)\n</code></pre> <pre><code>import com.google.adk.artifacts.BaseArtifactService;\nimport com.google.adk.artifacts.ListArtifactsResponse;\nimport com.google.common.collect.ImmutableList;\nimport io.reactivex.rxjava3.core.SingleObserver;\nimport io.reactivex.rxjava3.disposables.Disposable;\n\npublic class MyArtifactListerService {\n\n    private final BaseArtifactService artifactService;\n    private final String appName;\n\n    public MyArtifactListerService(BaseArtifactService artifactService, String appName) {\n        this.artifactService = artifactService;\n        this.appName = appName;\n    }\n\n    // Example method that might be called by a tool or agent logic\n    public void listUserFilesJava(String userId, String sessionId) {\n        artifactService\n                .listArtifactKeys(appName, userId, sessionId)\n                .subscribe(\n                        new SingleObserver&lt;ListArtifactsResponse&gt;() {\n                            @Override\n                            public void onSubscribe(Disposable d) {\n                                // Optional: handle subscription\n                            }\n\n                            @Override\n                            public void onSuccess(ListArtifactsResponse response) {\n                                ImmutableList&lt;String&gt; availableFiles = response.filenames();\n                                if (availableFiles.isEmpty()) {\n                                    System.out.println(\n                                            \"User \"\n                                                    + userId\n                                                    + \" in session \"\n                                                    + sessionId\n                                                    + \" has no saved Java artifacts.\");\n                                } else {\n                                    StringBuilder fileListStr =\n                                            new StringBuilder(\n                                                    \"Here are the available Java artifacts for user \"\n                                                            + userId\n                                                            + \" in session \"\n                                                            + sessionId\n                                                            + \":\\n\");\n                                    for (String fname : availableFiles) {\n                                        fileListStr.append(\"- \").append(fname).append(\"\\n\");\n                                    }\n                                    System.out.println(fileListStr.toString());\n                                }\n                            }\n\n                            @Override\n                            public void onError(Throwable e) {\n                                System.err.println(\n                                        \"Error listing Java artifacts for user \"\n                                                + userId\n                                                + \" in session \"\n                                                + sessionId\n                                                + \": \"\n                                                + e.getMessage());\n                                // In a real application, you might return an error message to the user/LLM\n                            }\n                        });\n    }\n\n    // --- Example Usage Concept (Java) ---\n    public static void main(String[] args) {\n        // BaseArtifactService service = new InMemoryArtifactService(); // Or GcsArtifactService\n        // MyArtifactListerService lister = new MyArtifactListerService(service, \"myJavaApp\");\n        // lister.listUserFilesJava(\"user123\", \"sessionABC\");\n        // Due to async nature, in a real app, ensure program waits or handles completion.\n    }\n}\n</code></pre> </li> </ul> <p>These methods for saving, loading, and listing provide a convenient and consistent way to manage binary data persistence within ADK, whether using Python's context objects or directly interacting with the <code>BaseArtifactService</code> in Java, regardless of the chosen backend storage implementation.</p>"},{"location":"artifacts/index.en/#available-implementations","title":"Available Implementations","text":"<p>ADK provides concrete implementations of the <code>BaseArtifactService</code> interface, offering different storage backends suitable for various development stages and deployment needs. These implementations handle the details of storing, versioning, and retrieving artifact data based on the <code>app_name</code>, <code>user_id</code>, <code>session_id</code>, and <code>filename</code> (including the <code>user:</code> namespace prefix).</p>"},{"location":"artifacts/index.en/#inmemoryartifactservice","title":"InMemoryArtifactService","text":"<ul> <li>Storage Mechanism:<ul> <li>Python: Uses a Python dictionary (<code>self.artifacts</code>) held in the application's memory. The dictionary keys represent the artifact path, and the values are lists of <code>types.Part</code>, where each list element is a version.</li> <li>Java: Uses nested <code>HashMap</code> instances (<code>private final Map&lt;String, Map&lt;String, Map&lt;String, Map&lt;String, List&lt;Part&gt;&gt;&gt;&gt;&gt; artifacts;</code>) held in memory. The keys at each level are <code>appName</code>, <code>userId</code>, <code>sessionId</code>, and <code>filename</code> respectively. The innermost <code>List&lt;Part&gt;</code> stores the versions of the artifact, where the list index corresponds to the version number.</li> </ul> </li> <li>Key Features:<ul> <li>Simplicity: Requires no external setup or dependencies beyond the core ADK library.</li> <li>Speed: Operations are typically very fast as they involve in-memory map/dictionary lookups and list manipulations.</li> <li>Ephemeral: All stored artifacts are lost when the application process terminates. Data does not persist between application restarts.</li> </ul> </li> <li>Use Cases:<ul> <li>Ideal for local development and testing where persistence is not required.</li> <li>Suitable for short-lived demonstrations or scenarios where artifact data is purely temporary within a single run of the application.</li> </ul> </li> <li> <p>Instantiation:</p> PythonJava <pre><code>from google.adk.artifacts import InMemoryArtifactService\n\n# Simply instantiate the class\nin_memory_service_py = InMemoryArtifactService()\n\n# Then pass it to the Runner\n# runner = Runner(..., artifact_service=in_memory_service_py)\n</code></pre> <pre><code>import com.google.adk.artifacts.BaseArtifactService;\nimport com.google.adk.artifacts.InMemoryArtifactService;\n\npublic class InMemoryServiceSetup {\n    public static void main(String[] args) {\n        // Simply instantiate the class\n        BaseArtifactService inMemoryServiceJava = new InMemoryArtifactService();\n\n        System.out.println(\"InMemoryArtifactService (Java) instantiated: \" + inMemoryServiceJava.getClass().getName());\n\n        // This instance would then be provided to your Runner.\n        // Runner runner = new Runner(\n        //     /* other services */,\n        //     inMemoryServiceJava\n        // );\n    }\n}\n</code></pre> </li> </ul>"},{"location":"artifacts/index.en/#gcsartifactservice","title":"GcsArtifactService","text":"<ul> <li>Storage Mechanism: Leverages Google Cloud Storage (GCS) for persistent artifact storage. Each version of an artifact is stored as a separate object (blob) within a specified GCS bucket.</li> <li>Object Naming Convention: It constructs GCS object names (blob names) using a hierarchical path structure.</li> <li>Key Features:<ul> <li>Persistence: Artifacts stored in GCS persist across application restarts and deployments.</li> <li>Scalability: Leverages the scalability and durability of Google Cloud Storage.</li> <li>Versioning: Explicitly stores each version as a distinct GCS object. The <code>saveArtifact</code> method in <code>GcsArtifactService</code>.</li> <li>Permissions Required: The application environment needs appropriate credentials (e.g., Application Default Credentials) and IAM permissions to read from and write to the specified GCS bucket.</li> </ul> </li> <li>Use Cases:<ul> <li>Production environments requiring persistent artifact storage.</li> <li>Scenarios where artifacts need to be shared across different application instances or services (by accessing the same GCS bucket).</li> <li>Applications needing long-term storage and retrieval of user or session data.</li> </ul> </li> <li> <p>Instantiation:</p> PythonJava <pre><code>from google.adk.artifacts import GcsArtifactService\n\n# Specify the GCS bucket name\ngcs_bucket_name_py = \"your-gcs-bucket-for-adk-artifacts\" # Replace with your bucket name\n\ntry:\n    gcs_service_py = GcsArtifactService(bucket_name=gcs_bucket_name_py)\n    print(f\"Python GcsArtifactService initialized for bucket: {gcs_bucket_name_py}\")\n    # Ensure your environment has credentials to access this bucket.\n    # e.g., via Application Default Credentials (ADC)\n\n    # Then pass it to the Runner\n    # runner = Runner(..., artifact_service=gcs_service_py)\n\nexcept Exception as e:\n    # Catch potential errors during GCS client initialization (e.g., auth issues)\n    print(f\"Error initializing Python GcsArtifactService: {e}\")\n    # Handle the error appropriately - maybe fall back to InMemory or raise\n</code></pre> <pre><code>import com.google.adk.artifacts.BaseArtifactService;\nimport com.google.adk.artifacts.GcsArtifactService;\nimport com.google.cloud.storage.Storage;\nimport com.google.cloud.storage.StorageOptions;\n\npublic class GcsServiceSetup {\n  public static void main(String[] args) {\n    // Specify the GCS bucket name\n    String gcsBucketNameJava = \"your-gcs-bucket-for-adk-artifacts\"; // Replace with your bucket name\n\n    try {\n      // Initialize the GCS Storage client.\n      // This will use Application Default Credentials by default.\n      // Ensure the environment is configured correctly (e.g., GOOGLE_APPLICATION_CREDENTIALS).\n      Storage storageClient = StorageOptions.getDefaultInstance().getService();\n\n      // Instantiate the GcsArtifactService\n      BaseArtifactService gcsServiceJava =\n          new GcsArtifactService(gcsBucketNameJava, storageClient);\n\n      System.out.println(\n          \"Java GcsArtifactService initialized for bucket: \" + gcsBucketNameJava);\n\n      // This instance would then be provided to your Runner.\n      // Runner runner = new Runner(\n      //     /* other services */,\n      //     gcsServiceJava\n      // );\n\n    } catch (Exception e) {\n      // Catch potential errors during GCS client initialization (e.g., auth, permissions)\n      System.err.println(\"Error initializing Java GcsArtifactService: \" + e.getMessage());\n      e.printStackTrace();\n      // Handle the error appropriately\n    }\n  }\n}\n</code></pre> </li> </ul> <p>Choosing the appropriate <code>ArtifactService</code> implementation depends on your application's requirements for data persistence, scalability, and operational environment.</p>"},{"location":"artifacts/index.en/#best-practices","title":"Best Practices","text":"<p>To use artifacts effectively and maintainably:</p> <ul> <li>Choose the Right Service: Use <code>InMemoryArtifactService</code> for rapid prototyping, testing, and scenarios where persistence isn't needed. Use <code>GcsArtifactService</code> (or implement your own <code>BaseArtifactService</code> for other backends) for production environments requiring data persistence and scalability.  </li> <li>Meaningful Filenames: Use clear, descriptive filenames. Including relevant extensions (<code>.pdf</code>, <code>.png</code>, <code>.wav</code>) helps humans understand the content, even though the <code>mime_type</code> dictates programmatic handling. Establish conventions for temporary vs. persistent artifact names.  </li> <li>Specify Correct MIME Types: Always provide an accurate <code>mime_type</code> when creating the <code>types.Part</code> for <code>save_artifact</code>. This is critical for applications or tools that later <code>load_artifact</code> to interpret the <code>bytes</code> data correctly. Use standard IANA MIME types where possible.  </li> <li>Understand Versioning: Remember that <code>load_artifact()</code> without a specific <code>version</code> argument retrieves the latest version. If your logic depends on a specific historical version of an artifact, be sure to provide the integer version number when loading.  </li> <li>Use Namespacing (<code>user:</code>) Deliberately: Only use the <code>\"user:\"</code> prefix for filenames when the data truly belongs to the user and should be accessible across all their sessions. For data specific to a single conversation or session, use regular filenames without the prefix.  </li> <li>Error Handling: <ul> <li>Always check if an <code>artifact_service</code> is actually configured before calling context methods (<code>save_artifact</code>, <code>load_artifact</code>, <code>list_artifacts</code>) \u2013 they will raise a <code>ValueError</code> if the service is <code>None</code>. </li> <li>Check the return value of <code>load_artifact</code>, as it will be <code>None</code> if the artifact or version doesn't exist. Don't assume it always returns a <code>Part</code>.  </li> <li>Be prepared to handle exceptions from the underlying storage service, especially with <code>GcsArtifactService</code> (e.g., <code>google.api_core.exceptions.Forbidden</code> for permission issues, <code>NotFound</code> if the bucket doesn't exist, network errors).  </li> </ul> </li> <li>Size Considerations: Artifacts are suitable for typical file sizes, but be mindful of potential costs and performance impacts with extremely large files, especially with cloud storage. <code>InMemoryArtifactService</code> can consume significant memory if storing many large artifacts. Evaluate if very large data might be better handled through direct GCS links or other specialized storage solutions rather than passing entire byte arrays in-memory.  </li> <li>Cleanup Strategy: For persistent storage like <code>GcsArtifactService</code>, artifacts remain until explicitly deleted. If artifacts represent temporary data or have a limited lifespan, implement a strategy for cleanup. This might involve:  <ul> <li>Using GCS lifecycle policies on the bucket.  </li> <li>Building specific tools or administrative functions that utilize the <code>artifact_service.delete_artifact</code> method (note: delete is not exposed via context objects for safety).  </li> <li>Carefully managing filenames to allow pattern-based deletion if needed.</li> </ul> </li> </ul>"},{"location":"callbacks/","title":"Callbacks\uff1a\u89c0\u5bdf\u3001\u81ea\u8a02\u8207\u63a7\u5236 agent \u884c\u70ba","text":""},{"location":"callbacks/#callbacks","title":"\u4ecb\u7d39\uff1a\u4ec0\u9ebc\u662f Callbacks\uff1f\u70ba\u4ec0\u9ebc\u8981\u4f7f\u7528\u5b83\u5011\uff1f","text":"<p>Callbacks \u662f Agent Development Kit (ADK) \u7684\u6838\u5fc3\u529f\u80fd\u4e4b\u4e00\uff0c\u63d0\u4f9b\u4e86\u4e00\u7a2e\u5f37\u5927\u7684\u6a5f\u5236\uff0c\u8b93\u4f60\u80fd\u5920\u5728 agent \u57f7\u884c\u904e\u7a0b\u4e2d\u7684\u7279\u5b9a\u3001\u9810\u5148\u5b9a\u7fa9\u597d\u7684\u6642\u6a5f\u9ede\u9032\u884c\u6514\u622a\u3002\u900f\u904e Callbacks\uff0c\u4f60\u53ef\u4ee5\u89c0\u5bdf\u3001\u81ea\u8a02\uff0c\u751a\u81f3\u63a7\u5236 agent \u7684\u884c\u70ba\uff0c\u800c\u7121\u9700\u4fee\u6539 ADK \u6846\u67b6\u7684\u6838\u5fc3\u7a0b\u5f0f\u78bc\u3002</p> <p>\u4ec0\u9ebc\u662f Callbacks\uff1f \u672c\u8cea\u4e0a\uff0cCallbacks \u5c31\u662f\u4f60\u81ea\u884c\u5b9a\u7fa9\u7684\u6a19\u6e96\u51fd\u5f0f\u3002\u4f60\u53ef\u4ee5\u5728\u5efa\u7acb agent \u6642\uff0c\u5c07\u9019\u4e9b\u51fd\u5f0f\u8207 agent \u95dc\u806f\u3002Agent Development Kit (ADK) \u6846\u67b6\u6703\u5728\u95dc\u9375\u968e\u6bb5\u81ea\u52d5\u547c\u53eb\u4f60\u7684\u51fd\u5f0f\uff0c\u8b93\u4f60\u80fd\u5920\u89c0\u5bdf\u6216\u4ecb\u5165 agent \u7684\u57f7\u884c\u6d41\u7a0b\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u60f3\u50cf\u6210 agent \u8655\u7406\u6d41\u7a0b\u4e2d\u7684\u6aa2\u67e5\u9ede\uff1a</p> <ul> <li>\u5728 agent \u958b\u59cb\u8655\u7406\u8acb\u6c42\u7684\u4e3b\u8981\u5de5\u4f5c\u4e4b\u524d\uff0c\u4ee5\u53ca\u5b8c\u6210\u4e4b\u5f8c\uff1a \u7576\u4f60\u8981\u6c42 agent \u57f7\u884c\u67d0\u4ef6\u4e8b\uff08\u4f8b\u5982\uff1a\u56de\u7b54\u4e00\u500b\u554f\u984c\uff09\uff0c\u5b83\u6703\u904b\u884c\u5167\u90e8\u908f\u8f2f\u4f86\u7522\u751f\u56de\u61c9\u3002</li> <li><code>Before Agent</code> callback \u6703\u5728\u8a72\u8acb\u6c42\u7684\u4e3b\u8981\u5de5\u4f5c\u958b\u59cb\u4e4b\u524d\u57f7\u884c\u3002</li> <li><code>After Agent</code> callback \u6703\u5728 agent \u5b8c\u6210\u8a72\u8acb\u6c42\u7684\u6240\u6709\u6b65\u9a5f\u4e26\u6e96\u5099\u597d\u6700\u7d42\u7d50\u679c\u5f8c\u3001\u4f46\u5728\u7d50\u679c\u56de\u50b3\u4e4b\u524d\u57f7\u884c\u3002</li> <li>\u9019\u88e1\u6240\u8aaa\u7684\u300c\u4e3b\u8981\u5de5\u4f5c\u300d\u6db5\u84cb\u4e86 agent \u8655\u7406\u55ae\u4e00\u8acb\u6c42\u7684\u5b8c\u6574\u6d41\u7a0b\u3002\u9019\u53ef\u80fd\u5305\u62ec\u6c7a\u5b9a\u662f\u5426\u547c\u53eb\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\u3001\u5be6\u969b\u547c\u53eb LLM\u3001\u6c7a\u5b9a\u662f\u5426\u4f7f\u7528\u5de5\u5177\u3001\u57f7\u884c\u5de5\u5177\u3001\u8655\u7406\u7d50\u679c\uff0c\u6700\u5f8c\u7d44\u5408\u51fa\u7b54\u6848\u3002\u9019\u4e9b Callbacks \u57fa\u672c\u4e0a\u5305\u88f9\u4e86\u5f9e\u63a5\u6536\u8f38\u5165\u5230\u7522\u751f\u6700\u7d42\u8f38\u51fa\u7684\u6574\u500b\u4e92\u52d5\u904e\u7a0b\u3002</li> <li>\u5728\u767c\u9001\u8acb\u6c42\u7d66\u5927\u578b\u8a9e\u8a00\u6a21\u578b (Large Language Model, LLM) \u524d\u5f8c\uff1a \u9019\u985e Callbacks\uff08<code>Before Model</code>\u3001<code>After Model</code>\uff09\u8b93\u4f60\u80fd\u5920\u6aa2\u67e5\u6216\u4fee\u6539\u5373\u5c07\u9001\u5f80\u6216\u525b\u5f9e LLM \u56de\u4f86\u7684\u8cc7\u6599\u3002</li> <li>\u5728\u57f7\u884c\u5de5\u5177\uff08\u5982 Python \u51fd\u5f0f\u6216\u5176\u4ed6 agent\uff09\u4e4b\u524d\u6216\u4e4b\u5f8c\uff1a \u540c\u6a23\u5730\uff0c<code>Before Tool</code> \u548c <code>After Tool</code> Callbacks \u63d0\u4f9b\u4f60\u5c0d agent \u6240\u547c\u53eb\u5de5\u5177\u57f7\u884c\u524d\u5f8c\u7684\u63a7\u5236\u9ede\u3002</li> </ul> <p></p> <p>\u70ba\u4ec0\u9ebc\u8981\u4f7f\u7528 Callbacks\uff1f Callbacks \u80fd\u89e3\u9396\u9ad8\u5ea6\u5f48\u6027\uff0c\u4e26\u8ce6\u4e88 agent \u9032\u968e\u80fd\u529b\uff1a</p> <ul> <li>\u89c0\u5bdf\u8207\u9664\u932f\uff1a \u5728\u95dc\u9375\u6b65\u9a5f\u8a18\u9304\u8a73\u7d30\u8cc7\u8a0a\uff0c\u65b9\u4fbf\u76e3\u63a7\u8207\u554f\u984c\u6392\u67e5\u3002  </li> <li>\u81ea\u8a02\u8207\u63a7\u5236\uff1a \u6839\u64da\u4f60\u7684\u908f\u8f2f\uff0c\u4fee\u6539 agent \u8655\u7406\u904e\u7a0b\u4e2d\u7684\u8cc7\u6599\uff08\u5982 LLM \u8acb\u6c42\u6216\u5de5\u5177\u7d50\u679c\uff09\uff0c\u751a\u81f3\u5b8c\u5168\u7565\u904e\u67d0\u4e9b\u6b65\u9a5f\u3002  </li> <li>\u5be6\u4f5c\u9632\u8b77\u6a5f\u5236\uff1a \u5f37\u5236\u57f7\u884c\u5b89\u5168\u898f\u5247\u3001\u9a57\u8b49\u8f38\u5165/\u8f38\u51fa\uff0c\u6216\u963b\u6b62\u4e0d\u5141\u8a31\u7684\u64cd\u4f5c\u3002  </li> <li>\u7ba1\u7406\u72c0\u614b\uff1a \u5728\u57f7\u884c\u671f\u9593\u8b80\u53d6\u6216\u52d5\u614b\u66f4\u65b0 agent \u7684 session state\u3002  </li> <li>\u6574\u5408\u8207\u64f4\u5145\uff1a \u89f8\u767c\u5916\u90e8\u884c\u52d5\uff08API \u547c\u53eb\u3001\u901a\u77e5\uff09\uff0c\u6216\u52a0\u5165\u5feb\u53d6\u7b49\u529f\u80fd\u3002</li> </ul> <p>Tip</p> <p>\u5728\u5be6\u4f5c\u5b89\u5168\u9632\u8b77\u63aa\u65bd\u8207\u653f\u7b56\u6642\uff0c\u5efa\u8b70\u4f7f\u7528 ADK \u63d2\u4ef6\uff08ADK Plugins\uff09\uff0c\u5176\u6a21\u7d44\u5316\u8207\u5f48\u6027\u512a\u65bc Callbacks\u3002\u8a73\u60c5\u8acb\u53c3\u95b1 Callbacks and Plugins for Security Guardrails\u3002</p> <p>\u5982\u4f55\u65b0\u589e\uff1a</p> \u7a0b\u5f0f\u78bc PythonJava <pre><code>from google.adk.agents import LlmAgent\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.models import LlmResponse, LlmRequest\nfrom typing import Optional\n\n# --- Define your callback function ---\ndef my_before_model_logic(\n    callback_context: CallbackContext, llm_request: LlmRequest\n) -&gt; Optional[LlmResponse]:\n    print(f\"Callback running before model call for agent: {callback_context.agent_name}\")\n    # ... your custom logic here ...\n    return None # Allow the model call to proceed\n\n# --- Register it during Agent creation ---\nmy_agent = LlmAgent(\n    name=\"MyCallbackAgent\",\n    model=\"gemini-2.0-flash\", # Or your desired model\n    instruction=\"Be helpful.\",\n    # Other agent parameters...\n    before_model_callback=my_before_model_logic # Pass the function here\n)\n</code></pre> <pre><code>import com.google.adk.agents.CallbackContext;\nimport com.google.adk.agents.Callbacks;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.models.LlmRequest;\nimport java.util.Optional;\n\npublic class AgentWithBeforeModelCallback {\n\n  public static void main(String[] args) {\n    // --- Define your callback logic ---\n    Callbacks.BeforeModelCallbackSync myBeforeModelLogic =\n        (CallbackContext callbackContext, LlmRequest llmRequest) -&gt; {\n          System.out.println(\n              \"Callback running before model call for agent: \" + callbackContext.agentName());\n          // ... your custom logic here ...\n\n          // Return Optional.empty() to allow the model call to proceed,\n          // similar to returning None in the Python example.\n          // If you wanted to return a response and skip the model call,\n          // you would return Optional.of(yourLlmResponse).\n          return Optional.empty();\n        };\n\n    // --- Register it during Agent creation ---\n    LlmAgent myAgent =\n        LlmAgent.builder()\n            .name(\"MyCallbackAgent\")\n            .model(\"gemini-2.0-flash\") // Or your desired model\n            .instruction(\"Be helpful.\")\n            // Other agent parameters...\n            .beforeModelCallbackSync(myBeforeModelLogic) // Pass the callback implementation here\n            .build();\n  }\n}\n</code></pre>"},{"location":"callbacks/#_1","title":"\u56de\u547c\u6a5f\u5236\uff1a\u6514\u622a\u8207\u63a7\u5236","text":"<p>\u7576 Agent Development Kit (ADK) \u6846\u67b6\u5728\u57f7\u884c\u904e\u7a0b\u4e2d\u9047\u5230\u53ef\u4ee5\u57f7\u884c\u56de\u547c\uff08callback\uff09\u7684\u6642\u6a5f\u9ede\uff08\u4f8b\u5982\uff1a\u547c\u53eb\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u4e4b\u524d\uff09\uff0c\u6703\u6aa2\u67e5\u4f60\u662f\u5426\u70ba\u8a72 agent \u63d0\u4f9b\u4e86\u5c0d\u61c9\u7684\u56de\u547c\u51fd\u5f0f\u3002\u5982\u679c\u6709\uff0c\u6846\u67b6\u5c31\u6703\u57f7\u884c\u4f60\u7684\u51fd\u5f0f\u3002</p> <p>\u60c5\u5883\u5f88\u91cd\u8981\uff1a \u4f60\u7684\u56de\u547c\u51fd\u5f0f\u4e26\u4e0d\u662f\u5728\u771f\u7a7a\u4e2d\u88ab\u547c\u53eb\u3002\u6846\u67b6\u6703\u5c07\u7279\u6b8a\u7684\u60c5\u5883\u7269\u4ef6\uff08<code>CallbackContext</code> \u6216 <code>ToolContext</code>\uff09\u4f5c\u70ba\u53c3\u6578\u50b3\u5165\u3002\u9019\u4e9b\u7269\u4ef6\u5305\u542b\u4e86 agent \u57f7\u884c\u7576\u4e0b\u7684\u91cd\u8981\u8cc7\u8a0a\uff0c\u5305\u62ec\u547c\u53eb\u7d30\u7bc0\u3001session state\uff0c\u4ee5\u53ca\u53ef\u80fd\u7684\u670d\u52d9\u53c3\u8003\uff08\u5982 artifacts \u6216 memory\uff09\u3002\u4f60\u53ef\u4ee5\u5229\u7528\u9019\u4e9b\u60c5\u5883\u7269\u4ef6\u4f86\u7406\u89e3\u76ee\u524d\u7684\u72c0\u6cc1\uff0c\u4e26\u8207\u6846\u67b6\u4e92\u52d5\u3002\uff08\u5b8c\u6574\u7d30\u7bc0\u8acb\u53c3\u898b\u5c08\u9580\u7684\u300c\u60c5\u5883\u7269\u4ef6\u300d\u7ae0\u7bc0\u3002\uff09</p> <p>\u63a7\u5236\u6d41\u7a0b\uff08\u6838\u5fc3\u6a5f\u5236\uff09\uff1a \u56de\u547c\u6700\u5f37\u5927\u7684\u5730\u65b9\uff0c\u5728\u65bc\u5b83\u7684\u56de\u50b3\u503c\u6703\u5f71\u97ff agent \u63a5\u4e0b\u4f86\u7684\u884c\u70ba\u3002\u9019\u5c31\u662f\u4f60\u6514\u622a\u8207\u63a7\u5236\u57f7\u884c\u6d41\u7a0b\u7684\u65b9\u5f0f\uff1a</p> <ol> <li> <p><code>return None</code>\uff08\u5141\u8a31\u9810\u8a2d\u884c\u70ba\uff09\uff1a </p> <ul> <li>\u5177\u9ad4\u7684\u56de\u50b3\u578b\u5225\u6703\u4f9d\u8a9e\u8a00\u800c\u7570\u3002\u5728 Java \u4e2d\uff0c\u5c0d\u61c9\u7684\u56de\u50b3\u578b\u5225\u662f <code>Optional.empty()</code>\u3002\u8acb\u53c3\u8003 API \u6587\u4ef6\u4ee5\u53d6\u5f97\u5404\u8a9e\u8a00\u7684\u6307\u5f15\u3002</li> <li>\u9019\u662f\u6a19\u6e96\u7684\u65b9\u5f0f\uff0c\u7528\u4f86\u8868\u793a\u4f60\u7684\u56de\u547c\u5df2\u7d93\u5b8c\u6210\uff08\u4f8b\u5982\uff1a\u65e5\u8a8c\u8a18\u9304\u3001\u6aa2\u67e5\u3001\u5c0d\u53ef\u8b8a\u8f38\u5165\u53c3\u6578\u5982 <code>llm_request</code> \u9032\u884c\u5c0f\u5e45\u4fee\u6539\uff09\uff0c\u4e26\u8b93 ADK agent \u7e7c\u7e8c\u57f7\u884c\u5176\u6b63\u5e38\u6d41\u7a0b\u3002</li> <li>\u5c0d\u65bc <code>before_*</code> \u56de\u547c\uff08<code>before_agent</code>\u3001<code>before_model</code>\u3001<code>before_tool</code>\uff09\uff0c\u56de\u50b3 <code>None</code> \u4ee3\u8868\u6d41\u7a0b\u6703\u9032\u5165\u4e0b\u4e00\u6b65\uff08\u57f7\u884c agent \u908f\u8f2f\u3001\u547c\u53eb LLM\u3001\u57f7\u884c\u5de5\u5177\uff09\u3002</li> <li>\u5c0d\u65bc <code>after_*</code> \u56de\u547c\uff08<code>after_agent</code>\u3001<code>after_model</code>\u3001<code>after_tool</code>\uff09\uff0c\u56de\u50b3 <code>None</code> \u4ee3\u8868\u525b\u7522\u751f\u7684\u7d50\u679c\uff08agent \u8f38\u51fa\u3001LLM \u56de\u61c9\u3001\u5de5\u5177\u7d50\u679c\uff09\u6703\u539f\u5c01\u4e0d\u52d5\u5730\u88ab\u63a1\u7528\u3002</li> </ul> </li> <li> <p><code>return &lt;Specific Object&gt;</code>\uff08\u8986\u5beb\u9810\u8a2d\u884c\u70ba\uff09\uff1a </p> <ul> <li>\u56de\u50b3\u7279\u5b9a\u578b\u5225\u7684\u7269\u4ef6\uff08\u800c\u975e <code>None</code>\uff09\uff0c\u5373\u53ef\u8986\u5beb ADK agent \u7684\u9810\u8a2d\u884c\u70ba\u3002\u6846\u67b6\u6703\u76f4\u63a5\u63a1\u7528\u4f60\u56de\u50b3\u7684\u7269\u4ef6\uff0c\u4e26\u8df3\u904e\u539f\u672c\u9810\u671f\u7684\u6b65\u9a5f\uff0c\u6216\u53d6\u4ee3\u525b\u7522\u751f\u7684\u7d50\u679c\u3002</li> <li><code>before_agent_callback</code> \u2192 <code>types.Content</code>\uff1a\u8df3\u904e agent \u7684\u4e3b\u8981\u57f7\u884c\u908f\u8f2f\uff08<code>_run_async_impl</code> / <code>_run_live_impl</code>\uff09\u3002\u56de\u50b3\u7684 <code>Content</code> \u7269\u4ef6\u6703\u7acb\u5373\u4f5c\u70ba\u672c\u56de\u5408 agent \u7684\u6700\u7d42\u8f38\u51fa\u3002\u9069\u5408\u76f4\u63a5\u8655\u7406\u7c21\u55ae\u8acb\u6c42\u6216\u5f37\u5236\u5b58\u53d6\u63a7\u5236\u3002</li> <li><code>before_model_callback</code> \u2192 <code>LlmResponse</code>\uff1a\u8df3\u904e\u5c0d\u5916\u90e8\u5927\u578b\u8a9e\u8a00\u6a21\u578b (Large Language Model) \u7684\u547c\u53eb\u3002\u56de\u50b3\u7684 <code>LlmResponse</code> \u7269\u4ef6\u6703\u88ab\u8996\u70ba LLM \u7684\u5be6\u969b\u56de\u61c9\u3002\u975e\u5e38\u9069\u5408\u5be6\u4f5c\u8f38\u5165\u9632\u8b77\u3001\u63d0\u793a\u9a57\u8b49\u6216\u56de\u50b3\u5feb\u53d6\u7d50\u679c\u3002</li> <li><code>before_tool_callback</code> \u2192 <code>dict</code> \u6216 <code>Map</code>\uff1a\u8df3\u904e\u5be6\u969b\u5de5\u5177\u51fd\u5f0f\uff08\u6216\u5b50 agent\uff09\u7684\u57f7\u884c\u3002\u56de\u50b3\u7684 <code>dict</code> \u6703\u4f5c\u70ba\u5de5\u5177\u547c\u53eb\u7684\u7d50\u679c\uff0c\u901a\u5e38\u63a5\u8457\u6703\u50b3\u56de\u7d66 LLM\u3002\u9069\u5408\u9a57\u8b49\u5de5\u5177\u53c3\u6578\u3001\u5957\u7528\u653f\u7b56\u9650\u5236\uff0c\u6216\u56de\u50b3\u6a21\u64ec\uff0f\u5feb\u53d6\u7684\u5de5\u5177\u7d50\u679c\u3002</li> <li><code>after_agent_callback</code> \u2192 <code>types.Content</code>\uff1a\u53d6\u4ee3 agent \u57f7\u884c\u908f\u8f2f\u525b\u7522\u751f\u7684 <code>Content</code>\u3002</li> <li><code>after_model_callback</code> \u2192 <code>LlmResponse</code>\uff1a\u53d6\u4ee3 \u5f9e LLM \u6536\u5230\u7684 <code>LlmResponse</code>\u3002\u9069\u5408\u7528\u65bc\u8f38\u51fa\u6de8\u5316\u3001\u52a0\u4e0a\u6a19\u6e96\u514d\u8cac\u8072\u660e\uff0c\u6216\u4fee\u6539 LLM \u56de\u61c9\u7d50\u69cb\u3002</li> <li><code>after_tool_callback</code> \u2192 <code>dict</code> \u6216 <code>Map</code>\uff1a\u53d6\u4ee3 \u5de5\u5177\u56de\u50b3\u7684 <code>dict</code> \u7d50\u679c\u3002\u53ef\u7528\u65bc\u5c0d\u5de5\u5177\u8f38\u51fa\u9032\u884c\u5f8c\u8655\u7406\u6216\u6a19\u6e96\u5316\uff0c\u7136\u5f8c\u518d\u50b3\u56de\u7d66 LLM\u3002</li> </ul> </li> </ol> <p>\u6982\u5ff5\u6027\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\uff08Guardrail\uff09\uff1a</p> <p>\u4ee5\u4e0b\u7bc4\u4f8b\u5c55\u793a\u4e86\u4f7f\u7528 <code>before_model_callback</code> \u4f86\u5be6\u4f5c guardrail \u7684\u5e38\u898b\u6a21\u5f0f\u3002</p> Code PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.models import LlmResponse, LlmRequest\nfrom google.adk.runners import Runner\nfrom typing import Optional\nfrom google.genai import types \nfrom google.adk.sessions import InMemorySessionService\n\nGEMINI_2_FLASH=\"gemini-2.0-flash\"\n\n# --- Define the Callback Function ---\ndef simple_before_model_modifier(\n    callback_context: CallbackContext, llm_request: LlmRequest\n) -&gt; Optional[LlmResponse]:\n    \"\"\"Inspects/modifies the LLM request or skips the call.\"\"\"\n    agent_name = callback_context.agent_name\n    print(f\"[Callback] Before model call for agent: {agent_name}\")\n\n    # Inspect the last user message in the request contents\n    last_user_message = \"\"\n    if llm_request.contents and llm_request.contents[-1].role == 'user':\n         if llm_request.contents[-1].parts:\n            last_user_message = llm_request.contents[-1].parts[0].text\n    print(f\"[Callback] Inspecting last user message: '{last_user_message}'\")\n\n    # --- Modification Example ---\n    # Add a prefix to the system instruction\n    original_instruction = llm_request.config.system_instruction or types.Content(role=\"system\", parts=[])\n    prefix = \"[Modified by Callback] \"\n    # Ensure system_instruction is Content and parts list exists\n    if not isinstance(original_instruction, types.Content):\n         # Handle case where it might be a string (though config expects Content)\n         original_instruction = types.Content(role=\"system\", parts=[types.Part(text=str(original_instruction))])\n    if not original_instruction.parts:\n        original_instruction.parts.append(types.Part(text=\"\")) # Add an empty part if none exist\n\n    # Modify the text of the first part\n    modified_text = prefix + (original_instruction.parts[0].text or \"\")\n    original_instruction.parts[0].text = modified_text\n    llm_request.config.system_instruction = original_instruction\n    print(f\"[Callback] Modified system instruction to: '{modified_text}'\")\n\n    # --- Skip Example ---\n    # Check if the last user message contains \"BLOCK\"\n    if \"BLOCK\" in last_user_message.upper():\n        print(\"[Callback] 'BLOCK' keyword found. Skipping LLM call.\")\n        # Return an LlmResponse to skip the actual LLM call\n        return LlmResponse(\n            content=types.Content(\n                role=\"model\",\n                parts=[types.Part(text=\"LLM call was blocked by before_model_callback.\")],\n            )\n        )\n    else:\n        print(\"[Callback] Proceeding with LLM call.\")\n        # Return None to allow the (modified) request to go to the LLM\n        return None\n\n\n# Create LlmAgent and Assign Callback\nmy_llm_agent = LlmAgent(\n        name=\"ModelCallbackAgent\",\n        model=GEMINI_2_FLASH,\n        instruction=\"You are a helpful assistant.\", # Base instruction\n        description=\"An LLM agent demonstrating before_model_callback\",\n        before_model_callback=simple_before_model_modifier # Assign the function here\n)\n\nAPP_NAME = \"guardrail_app\"\nUSER_ID = \"user_1\"\nSESSION_ID = \"session_001\"\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=my_llm_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"write a joke on BLOCK\")\n</code></pre> <pre><code>import com.google.adk.agents.CallbackContext;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.models.LlmRequest;\nimport com.google.adk.models.LlmResponse;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.GenerateContentConfig;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\npublic class BeforeModelGuardrailExample {\n\n  private static final String MODEL_ID = \"gemini-2.0-flash\";\n  private static final String APP_NAME = \"guardrail_app\";\n  private static final String USER_ID = \"user_1\";\n\n  public static void main(String[] args) {\n    BeforeModelGuardrailExample example = new BeforeModelGuardrailExample();\n    example.defineAgentAndRun(\"Tell me about quantum computing. This is a test.\");\n  }\n\n  // --- Define your callback logic ---\n  // Looks for the word \"BLOCK\" in the user prompt and blocks the call to LLM if found.\n  // Otherwise the LLM call proceeds as usual.\n  public Optional&lt;LlmResponse&gt; simpleBeforeModelModifier(\n      CallbackContext callbackContext, LlmRequest llmRequest) {\n    System.out.println(\"[Callback] Before model call for agent: \" + callbackContext.agentName());\n\n    // Inspect the last user message in the request contents\n    String lastUserMessageText = \"\";\n    List&lt;Content&gt; requestContents = llmRequest.contents();\n    if (requestContents != null &amp;&amp; !requestContents.isEmpty()) {\n      Content lastContent = requestContents.get(requestContents.size() - 1);\n      if (lastContent.role().isPresent() &amp;&amp; \"user\".equals(lastContent.role().get())) {\n        lastUserMessageText =\n            lastContent.parts().orElse(List.of()).stream()\n                .flatMap(part -&gt; part.text().stream())\n                .collect(Collectors.joining(\" \")); // Concatenate text from all parts\n      }\n    }\n    System.out.println(\"[Callback] Inspecting last user message: '\" + lastUserMessageText + \"'\");\n\n    String prefix = \"[Modified by Callback] \";\n    GenerateContentConfig currentConfig =\n        llmRequest.config().orElse(GenerateContentConfig.builder().build());\n    Optional&lt;Content&gt; optOriginalSystemInstruction = currentConfig.systemInstruction();\n\n    Content conceptualModifiedSystemInstruction;\n    if (optOriginalSystemInstruction.isPresent()) {\n      Content originalSystemInstruction = optOriginalSystemInstruction.get();\n      List&lt;Part&gt; originalParts =\n          new ArrayList&lt;&gt;(originalSystemInstruction.parts().orElse(List.of()));\n      String originalText = \"\";\n\n      if (!originalParts.isEmpty()) {\n        Part firstPart = originalParts.get(0);\n        if (firstPart.text().isPresent()) {\n          originalText = firstPart.text().get();\n        }\n        originalParts.set(0, Part.fromText(prefix + originalText));\n      } else {\n        originalParts.add(Part.fromText(prefix));\n      }\n      conceptualModifiedSystemInstruction =\n          originalSystemInstruction.toBuilder().parts(originalParts).build();\n    } else {\n      conceptualModifiedSystemInstruction =\n          Content.builder()\n              .role(\"system\")\n              .parts(List.of(Part.fromText(prefix)))\n              .build();\n    }\n\n    // This demonstrates building a new LlmRequest with the modified config.\n    llmRequest =\n        llmRequest.toBuilder()\n            .config(\n                currentConfig.toBuilder()\n                    .systemInstruction(conceptualModifiedSystemInstruction)\n                    .build())\n            .build();\n\n    System.out.println(\n        \"[Callback] Conceptually modified system instruction is: '\"\n            + llmRequest.config().get().systemInstruction().get().parts().get().get(0).text().get());\n\n    // --- Skip Example ---\n    // Check if the last user message contains \"BLOCK\"\n    if (lastUserMessageText.toUpperCase().contains(\"BLOCK\")) {\n      System.out.println(\"[Callback] 'BLOCK' keyword found. Skipping LLM call.\");\n      LlmResponse skipResponse =\n          LlmResponse.builder()\n              .content(\n                  Content.builder()\n                      .role(\"model\")\n                      .parts(\n                          List.of(\n                              Part.builder()\n                                  .text(\"LLM call was blocked by before_model_callback.\")\n                                  .build()))\n                      .build())\n              .build();\n      return Optional.of(skipResponse);\n    }\n    System.out.println(\"[Callback] Proceeding with LLM call.\");\n    // Return Optional.empty() to allow the (modified) request to go to the LLM\n    return Optional.empty();\n  }\n\n  public void defineAgentAndRun(String prompt) {\n    // --- Create LlmAgent and Assign Callback ---\n    LlmAgent myLlmAgent =\n        LlmAgent.builder()\n            .name(\"ModelCallbackAgent\")\n            .model(MODEL_ID)\n            .instruction(\"You are a helpful assistant.\") // Base instruction\n            .description(\"An LLM agent demonstrating before_model_callback\")\n            .beforeModelCallbackSync(this::simpleBeforeModelModifier) // Assign the callback here\n            .build();\n\n    // Session and Runner\n    InMemoryRunner runner = new InMemoryRunner(myLlmAgent, APP_NAME);\n    // InMemoryRunner automatically creates a session service. Create a session using the service\n    Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n    Content userMessage =\n        Content.fromParts(Part.fromText(prompt));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre> <p>\u900f\u904e\u7406\u89e3\u56de\u50b3 <code>None</code> \u8207\u56de\u50b3\u7279\u5b9a\u7269\u4ef6\u9019\u7a2e\u6a5f\u5236\uff0c\u60a8\u53ef\u4ee5\u7cbe\u78ba\u5730\u63a7\u5236 agent \u7684\u57f7\u884c\u8def\u5f91\uff0c\u4f7f Callbacks \u6210\u70ba\u4f7f\u7528 Agent Development Kit (ADK) \u5efa\u69cb\u9ad8\u968e\u4e14\u53ef\u9760 agent \u7684\u91cd\u8981\u5de5\u5177\u3002</p>"},{"location":"callbacks/design-patterns-and-best-practices.en/","title":"Design Patterns and Best Practices for Callbacks","text":"<p>Callbacks offer powerful hooks into the agent lifecycle. Here are common design patterns illustrating how to leverage them effectively in ADK, followed by best practices for implementation.</p>"},{"location":"callbacks/design-patterns-and-best-practices.en/#design-patterns","title":"Design Patterns","text":"<p>These patterns demonstrate typical ways to enhance or control agent behavior using callbacks:</p>"},{"location":"callbacks/design-patterns-and-best-practices.en/#guardrails-policy-enforcement","title":"1. Guardrails &amp; Policy Enforcement","text":"<p>Pattern Overview: Intercept requests before they reach the LLM or tools to enforce rules.</p> <p>Implementation: - Use <code>before_model_callback</code> to inspect the <code>LlmRequest</code> prompt - Use <code>before_tool_callback</code> to inspect tool arguments - If a policy violation is detected (e.g., forbidden topics, profanity):   - Return a predefined response (<code>LlmResponse</code> or <code>dict</code>/<code>Map</code>) to block the operation   - Optionally update <code>context.state</code> to log the violation</p> <p>Example Use Case: A <code>before_model_callback</code> checks <code>llm_request.contents</code> for sensitive keywords and returns a standard \"Cannot process this request\" <code>LlmResponse</code> if found, preventing the LLM call.</p>"},{"location":"callbacks/design-patterns-and-best-practices.en/#dynamic-state-management","title":"2. Dynamic State Management","text":"<p>Pattern Overview: Read from and write to session state within callbacks to make agent behavior context-aware and pass data between steps.</p> <p>Implementation: - Access <code>callback_context.state</code> or <code>tool_context.state</code> - Modifications (<code>state['key'] = value</code>) are automatically tracked in the subsequent <code>Event.actions.state_delta</code> - Changes are persisted by the <code>SessionService</code></p> <p>Example Use Case: An <code>after_tool_callback</code> saves a <code>transaction_id</code> from the tool's result to <code>tool_context.state['last_transaction_id']</code>. A later <code>before_agent_callback</code> might read <code>state['user_tier']</code> to customize the agent's greeting.</p>"},{"location":"callbacks/design-patterns-and-best-practices.en/#logging-and-monitoring","title":"3. Logging and Monitoring","text":"<p>Pattern Overview: Add detailed logging at specific lifecycle points for observability and debugging.</p> <p>Implementation: - Implement callbacks (e.g., <code>before_agent_callback</code>, <code>after_tool_callback</code>, <code>after_model_callback</code>) - Print or send structured logs containing:   - Agent name   - Tool name   - Invocation ID   - Relevant data from the context or arguments</p> <p>Example Use Case: Log messages like <code>INFO: [Invocation: e-123] Before Tool: search_api - Args: {'query': 'ADK'}</code>.</p>"},{"location":"callbacks/design-patterns-and-best-practices.en/#caching","title":"4. Caching","text":"<p>Pattern Overview: Avoid redundant LLM calls or tool executions by caching results.</p> <p>Implementation Steps: 1. Before Operation: In <code>before_model_callback</code> or <code>before_tool_callback</code>:    - Generate a cache key based on the request/arguments    - Check <code>context.state</code> (or an external cache) for this key    - If found, return the cached <code>LlmResponse</code> or result directly</p> <ol> <li>After Operation: If cache miss occurred:</li> <li>Use the corresponding <code>after_</code> callback to store the new result in the cache using the key</li> </ol> <p>Example Use Case: <code>before_tool_callback</code> for <code>get_stock_price(symbol)</code> checks <code>state[f\"cache:stock:{symbol}\"]</code>. If present, returns the cached price; otherwise, allows the API call and <code>after_tool_callback</code> saves the result to the state key.</p>"},{"location":"callbacks/design-patterns-and-best-practices.en/#request-response-modification","title":"5. Request/Response Modification","text":"<p>Pattern Overview: Alter data just before it's sent to the LLM/tool or just after it's received.</p> <p>Implementation Options: - <code>before_model_callback</code>: Modify <code>llm_request</code> (e.g., add system instructions based on <code>state</code>) - <code>after_model_callback</code>: Modify the returned <code>LlmResponse</code> (e.g., format text, filter content) - <code>before_tool_callback</code>: Modify the tool <code>args</code> dictionary (or Map in Java) - <code>after_tool_callback</code>: Modify the <code>tool_response</code> dictionary (or Map in Java)</p> <p>Example Use Case: <code>before_model_callback</code> appends \"User language preference: Spanish\" to <code>llm_request.config.system_instruction</code> if <code>context.state['lang'] == 'es'</code>.</p>"},{"location":"callbacks/design-patterns-and-best-practices.en/#conditional-skipping-of-steps","title":"6. Conditional Skipping of Steps","text":"<p>Pattern Overview: Prevent standard operations (agent run, LLM call, tool execution) based on certain conditions.</p> <p>Implementation: - Return a value from a <code>before_</code> callback to skip the normal execution:   - <code>Content</code> from <code>before_agent_callback</code>   - <code>LlmResponse</code> from <code>before_model_callback</code>   - <code>dict</code> from <code>before_tool_callback</code> - The framework interprets this returned value as the result for that step</p> <p>Example Use Case: <code>before_tool_callback</code> checks <code>tool_context.state['api_quota_exceeded']</code>. If <code>True</code>, it returns <code>{'error': 'API quota exceeded'}</code>, preventing the actual tool function from running.</p>"},{"location":"callbacks/design-patterns-and-best-practices.en/#tool-specific-actions-authentication-summarization-control","title":"7. Tool-Specific Actions (Authentication &amp; Summarization Control)","text":"<p>Pattern Overview: Handle actions specific to the tool lifecycle, primarily authentication and controlling LLM summarization of tool results.</p> <p>Implementation: Use <code>ToolContext</code> within tool callbacks (<code>before_tool_callback</code>, <code>after_tool_callback</code>):</p> <ul> <li>Authentication: Call <code>tool_context.request_credential(auth_config)</code> in <code>before_tool_callback</code> if credentials are required but not found (e.g., via <code>tool_context.get_auth_response</code> or state check). This initiates the auth flow.</li> <li>Summarization: Set <code>tool_context.actions.skip_summarization = True</code> if the raw dictionary output of the tool should be passed back to the LLM or potentially displayed directly, bypassing the default LLM summarization step.</li> </ul> <p>Example Use Case: A <code>before_tool_callback</code> for a secure API checks for an auth token in state; if missing, it calls <code>request_credential</code>. An <code>after_tool_callback</code> for a tool returning structured JSON might set <code>skip_summarization = True</code>.</p>"},{"location":"callbacks/design-patterns-and-best-practices.en/#artifact-handling","title":"8. Artifact Handling","text":"<p>Pattern Overview: Save or load session-related files or large data blobs during the agent lifecycle.</p> <p>Implementation: - Saving: Use <code>callback_context.save_artifact</code> / <code>await tool_context.save_artifact</code> to store data:   - Generated reports   - Logs   - Intermediate data - Loading: Use <code>load_artifact</code> to retrieve previously stored artifacts - Tracking: Changes are tracked via <code>Event.actions.artifact_delta</code></p> <p>Example Use Case: An <code>after_tool_callback</code> for a \"generate_report\" tool saves the output file using <code>await tool_context.save_artifact(\"report.pdf\", report_part)</code>. A <code>before_agent_callback</code> might load a configuration artifact using <code>callback_context.load_artifact(\"agent_config.json\")</code>.</p>"},{"location":"callbacks/design-patterns-and-best-practices.en/#best-practices-for-callbacks","title":"Best Practices for Callbacks","text":""},{"location":"callbacks/design-patterns-and-best-practices.en/#design-principles","title":"Design Principles","text":"<p>Keep Focused: Design each callback for a single, well-defined purpose (e.g., just logging, just validation). Avoid monolithic callbacks.</p> <p>Mind Performance: Callbacks execute synchronously within the agent's processing loop. Avoid long-running or blocking operations (network calls, heavy computation). Offload if necessary, but be aware this adds complexity.</p>"},{"location":"callbacks/design-patterns-and-best-practices.en/#error-handling","title":"Error Handling","text":"<p>Handle Errors Gracefully: - Use <code>try...except/catch</code> blocks within your callback functions - Log errors appropriately - Decide if the agent invocation should halt or attempt recovery - Don't let callback errors crash the entire process</p>"},{"location":"callbacks/design-patterns-and-best-practices.en/#state-management","title":"State Management","text":"<p>Manage State Carefully: - Be deliberate about reading from and writing to <code>context.state</code> - Changes are immediately visible within the current invocation and persisted at the end of the event processing - Use specific state keys rather than modifying broad structures to avoid unintended side effects - Consider using state prefixes (<code>State.APP_PREFIX</code>, <code>State.USER_PREFIX</code>, <code>State.TEMP_PREFIX</code>) for clarity, especially with persistent <code>SessionService</code> implementations</p>"},{"location":"callbacks/design-patterns-and-best-practices.en/#reliability","title":"Reliability","text":"<p>Consider Idempotency: If a callback performs actions with external side effects (e.g., incrementing an external counter), design it to be idempotent (safe to run multiple times with the same input) if possible, to handle potential retries in the framework or your application.</p>"},{"location":"callbacks/design-patterns-and-best-practices.en/#testing-documentation","title":"Testing &amp; Documentation","text":"<p>Test Thoroughly: - Unit test your callback functions using mock context objects - Perform integration tests to ensure callbacks function correctly within the full agent flow</p> <p>Ensure Clarity: - Use descriptive names for your callback functions - Add clear docstrings explaining their purpose, when they run, and any side effects (especially state modifications)</p> <p>Use Correct Context Type: Always use the specific context type provided (<code>CallbackContext</code> for agent/model, <code>ToolContext</code> for tools) to ensure access to the appropriate methods and properties.</p> <p>By applying these patterns and best practices, you can effectively use callbacks to create more robust, observable, and customized agent behaviors in ADK.</p>"},{"location":"callbacks/design-patterns-and-best-practices/","title":"Callbacks \u7684\u8a2d\u8a08\u6a21\u5f0f\u8207\u6700\u4f73\u5be6\u8e10","text":"<p>Callbacks \u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u9264\u5b50\uff08hook\uff09\uff0c\u53ef\u4ecb\u5165 agent \u7684\u751f\u547d\u9031\u671f\u3002\u4ee5\u4e0b\u4ecb\u7d39\u5728 Agent Development Kit (ADK) \u4e2d\u6709\u6548\u904b\u7528 Callbacks \u7684\u5e38\u898b\u8a2d\u8a08\u6a21\u5f0f\uff0c\u4e26\u9644\u4e0a\u5be6\u4f5c\u6700\u4f73\u5be6\u8e10\u5efa\u8b70\u3002</p>"},{"location":"callbacks/design-patterns-and-best-practices/#_1","title":"\u8a2d\u8a08\u6a21\u5f0f","text":"<p>\u9019\u4e9b\u6a21\u5f0f\u5c55\u793a\u4e86\u5982\u4f55\u900f\u904e Callbacks \u589e\u5f37\u6216\u63a7\u5236 agent \u884c\u70ba\u7684\u5178\u578b\u65b9\u5f0f\uff1a</p>"},{"location":"callbacks/design-patterns-and-best-practices/#guardrails-policy-enforcement","title":"1. \u9632\u8b77\u6b04\u8207\u653f\u7b56\u5f37\u5236\u57f7\u884c","text":"<p>\u6a21\u5f0f\u6982\u8ff0\uff1a \u5728\u8acb\u6c42\u5230\u9054\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6216\u5de5\u5177\u524d\u9032\u884c\u6514\u622a\uff0c\u4ee5\u5f37\u5236\u57f7\u884c\u898f\u5247\u3002</p> <p>\u5be6\u4f5c\u65b9\u5f0f\uff1a - \u4f7f\u7528 <code>before_model_callback</code> \u6aa2\u67e5 <code>LlmRequest</code> prompt - \u4f7f\u7528 <code>before_tool_callback</code> \u6aa2\u67e5\u5de5\u5177\u53c3\u6578 - \u82e5\u5075\u6e2c\u5230\u653f\u7b56\u9055\u898f\uff08\u5982\uff1a\u7981\u7528\u4e3b\u984c\u3001\u9ad2\u8a71\uff09\uff1a   - \u56de\u50b3\u9810\u5148\u5b9a\u7fa9\u7684\u56de\u61c9\uff08<code>LlmResponse</code> \u6216 <code>dict</code>/<code>Map</code>\uff09\uff0c\u4ee5\u963b\u64cb\u8a72\u64cd\u4f5c   - \u53ef\u9078\u64c7\u6027\u5730\u66f4\u65b0 <code>context.state</code> \u4ee5\u8a18\u9304\u9055\u898f\u4e8b\u4ef6</p> <p>\u7bc4\u4f8b\u61c9\u7528\u60c5\u5883\uff1a <code>before_model_callback</code> \u6703\u6aa2\u67e5 <code>llm_request.contents</code> \u662f\u5426\u5305\u542b\u654f\u611f\u95dc\u9375\u5b57\uff0c\u82e5\u767c\u73fe\u5247\u56de\u50b3\u6a19\u6e96\u7684\u300c\u7121\u6cd5\u8655\u7406\u6b64\u8acb\u6c42\u300d<code>LlmResponse</code>\uff0c\u5f9e\u800c\u963b\u6b62 LLM \u547c\u53eb\u3002</p>"},{"location":"callbacks/design-patterns-and-best-practices/#dynamic-state-management","title":"2. \u52d5\u614b\u72c0\u614b\u7ba1\u7406","text":"<p>\u6a21\u5f0f\u6982\u8ff0\uff1a \u5728 Callbacks \u4e2d\u8b80\u53d6\u8207\u5beb\u5165 session state\uff0c\u8b93 agent \u884c\u70ba\u5177\u5099\u60c5\u5883\u611f\u77e5\u80fd\u529b\uff0c\u4e26\u53ef\u5728\u6b65\u9a5f\u9593\u50b3\u905e\u8cc7\u6599\u3002</p> <p>\u5be6\u4f5c\u65b9\u5f0f\uff1a - \u5b58\u53d6 <code>callback_context.state</code> \u6216 <code>tool_context.state</code> - \u8b8a\u66f4\uff08<code>state['key'] = value</code>\uff09\u6703\u81ea\u52d5\u88ab\u8ffd\u8e64\u65bc\u5f8c\u7e8c\u7684 <code>Event.actions.state_delta</code> - \u8b8a\u66f4\u5167\u5bb9\u6703\u7531 <code>SessionService</code> \u8ca0\u8cac\u6301\u4e45\u5316</p> <p>\u7bc4\u4f8b\u61c9\u7528\u60c5\u5883\uff1a <code>after_tool_callback</code> \u6703\u5c07\u5de5\u5177\u7d50\u679c\u4e2d\u7684 <code>transaction_id</code> \u5132\u5b58\u81f3 <code>tool_context.state['last_transaction_id']</code>\uff0c\u4e4b\u5f8c\u7684 <code>before_agent_callback</code> \u53ef\u8b80\u53d6 <code>state['user_tier']</code> \u4f86\u5ba2\u88fd\u5316 agent \u7684\u554f\u5019\u8a9e\u3002</p>"},{"location":"callbacks/design-patterns-and-best-practices/#logging-and-monitoring","title":"3. \u65e5\u8a8c\u8a18\u9304\u8207\u76e3\u63a7","text":"<p>\u6a21\u5f0f\u6982\u8ff0\uff1a \u5728\u7279\u5b9a\u751f\u547d\u9031\u671f\u968e\u6bb5\u52a0\u5165\u8a73\u7d30\u65e5\u8a8c\uff0c\u63d0\u5347\u53ef\u89c0\u5bdf\u6027\u8207\u9664\u932f\u80fd\u529b\u3002</p> <p>\u5be6\u4f5c\u65b9\u5f0f\uff1a - \u5be6\u4f5c Callbacks\uff08\u5982 <code>before_agent_callback</code>\u3001<code>after_tool_callback</code>\u3001<code>after_model_callback</code>\uff09 - \u8f38\u51fa\u6216\u50b3\u9001\u7d50\u69cb\u5316\u65e5\u8a8c\uff0c\u5167\u5bb9\u5305\u542b\uff1a   - agent \u540d\u7a31   - \u5de5\u5177\u540d\u7a31   - \u547c\u53eb ID   - \u4f86\u81ea context \u6216\u53c3\u6578\u7684\u76f8\u95dc\u8cc7\u6599</p> <p>\u7bc4\u4f8b\u61c9\u7528\u60c5\u5883\uff1a \u8a18\u9304\u5982 <code>INFO: [Invocation: e-123] Before Tool: search_api - Args: {'query': 'ADK'}</code> \u7684\u65e5\u8a8c\u8a0a\u606f\u3002</p>"},{"location":"callbacks/design-patterns-and-best-practices/#caching","title":"4. \u5feb\u53d6","text":"<p>\u6a21\u5f0f\u6982\u8ff0\uff1a \u900f\u904e\u5feb\u53d6\u7d50\u679c\uff0c\u907f\u514d\u91cd\u8907\u9032\u884c LLM \u547c\u53eb\u6216\u5de5\u5177\u57f7\u884c\u3002</p> <p>\u5be6\u4f5c\u6b65\u9a5f\uff1a 1. \u64cd\u4f5c\u524d\uff1a \u5728 <code>before_model_callback</code> \u6216 <code>before_tool_callback</code> \u4e2d\uff1a    - \u6839\u64da\u8acb\u6c42/\u53c3\u6578\u7522\u751f\u5feb\u53d6\u9375    - \u6aa2\u67e5 <code>context.state</code>\uff08\u6216\u5916\u90e8\u5feb\u53d6\uff09\u662f\u5426\u5df2\u6709\u6b64\u9375    - \u82e5\u6709\uff0c\u76f4\u63a5\u56de\u50b3\u5feb\u53d6\u7684 <code>LlmResponse</code> \u6216\u7d50\u679c</p> <ol> <li>\u64cd\u4f5c\u5f8c\uff1a \u82e5\u70ba\u5feb\u53d6\u672a\u547d\u4e2d\uff1a</li> <li>\u4f7f\u7528\u5c0d\u61c9\u7684 <code>after_</code> callback\uff0c\u5c07\u65b0\u7d50\u679c\u4ee5\u8a72\u9375\u5b58\u5165\u5feb\u53d6</li> </ol> <p>\u7bc4\u4f8b\u61c9\u7528\u60c5\u5883\uff1a <code>before_tool_callback</code> \u91dd\u5c0d <code>get_stock_price(symbol)</code> \u6703\u6aa2\u67e5 <code>state[f\"cache:stock:{symbol}\"]</code>\uff0c\u82e5\u6709\u5247\u56de\u50b3\u5feb\u53d6\u7684\u80a1\u50f9\uff0c\u5426\u5247\u5141\u8a31 API \u547c\u53eb\u4e26\u7531 <code>after_tool_callback</code> \u5c07\u7d50\u679c\u5132\u5b58\u81f3 state key\u3002</p>"},{"location":"callbacks/design-patterns-and-best-practices/#request-response-modification","title":"5. \u8acb\u6c42\uff0f\u56de\u61c9\u4fee\u6539","text":"<p>\u6a21\u5f0f\u6982\u8ff0\uff1a \u5728\u8cc7\u6599\u9001\u5f80 LLM/\u5de5\u5177\u524d\uff0c\u6216\u63a5\u6536\u5f8c\u5373\u6642\u9032\u884c\u4fee\u6539\u3002</p> <p>\u5be6\u4f5c\u9078\u9805\uff1a - <code>before_model_callback</code>\uff1a \u4fee\u6539 <code>llm_request</code>\uff08\u4f8b\u5982\u6839\u64da <code>state</code> \u52a0\u5165\u7cfb\u7d71\u6307\u4ee4\uff09 - <code>after_model_callback</code>\uff1a \u4fee\u6539\u56de\u50b3\u7684 <code>LlmResponse</code>\uff08\u4f8b\u5982\u683c\u5f0f\u5316\u6587\u5b57\u3001\u904e\u6ffe\u5167\u5bb9\uff09 - <code>before_tool_callback</code>\uff1a \u4fee\u6539\u5de5\u5177\u7684 <code>args</code> \u5b57\u5178\uff08\u6216 Java \u4e2d\u7684 Map\uff09 - <code>after_tool_callback</code>\uff1a \u4fee\u6539 <code>tool_response</code> \u5b57\u5178\uff08\u6216 Java \u4e2d\u7684 Map\uff09</p> <p>\u7bc4\u4f8b\u61c9\u7528\u60c5\u5883\uff1a <code>before_model_callback</code> \u82e5\u5075\u6e2c\u5230 <code>context.state['lang'] == 'es'</code>\uff0c\u5247\u6703\u5728 <code>llm_request.config.system_instruction</code> \u5f8c\u65b9\u52a0\u4e0a\u300cUser language preference: Spanish\u300d\u3002</p>"},{"location":"callbacks/design-patterns-and-best-practices/#conditional-skipping-of-steps","title":"6. \u689d\u4ef6\u5f0f\u8df3\u904e\u6b65\u9a5f","text":"<p>\u6a21\u5f0f\u6982\u8ff0\uff1a \u6839\u64da\u7279\u5b9a\u689d\u4ef6\uff0c\u9632\u6b62\u6a19\u6e96\u64cd\u4f5c\uff08agent \u57f7\u884c\u3001LLM \u547c\u53eb\u3001\u5de5\u5177\u57f7\u884c\uff09\u767c\u751f\u3002</p> <p>\u5be6\u4f5c\u65b9\u5f0f\uff1a - \u5f9e <code>before_</code> callback \u56de\u50b3\u4e00\u500b\u503c\uff0c\u5373\u53ef\u8df3\u904e\u6b63\u5e38\u57f7\u884c\u6d41\u7a0b\uff1a   - <code>Content</code> \u4f86\u81ea <code>before_agent_callback</code>   - <code>LlmResponse</code> \u4f86\u81ea <code>before_model_callback</code>   - <code>dict</code> \u4f86\u81ea <code>before_tool_callback</code> - \u6846\u67b6\u6703\u5c07\u8a72\u56de\u50b3\u503c\u8996\u70ba\u8a72\u6b65\u9a5f\u7684\u57f7\u884c\u7d50\u679c</p> <p>\u7bc4\u4f8b\u61c9\u7528\u60c5\u5883\uff1a <code>before_tool_callback</code> \u6703\u6aa2\u67e5 <code>tool_context.state['api_quota_exceeded']</code>\uff0c\u82e5 <code>True</code>\uff0c\u5247\u76f4\u63a5\u56de\u50b3 <code>{'error': 'API quota exceeded'}</code>\uff0c\u5f9e\u800c\u963b\u6b62\u5be6\u969b\u7684\u5de5\u5177\u51fd\u5f0f\u57f7\u884c\u3002</p>"},{"location":"callbacks/design-patterns-and-best-practices/#tool-specific-actions-authentication-summarization-control","title":"7. \u5de5\u5177\u5c08\u5c6c\u884c\u70ba\uff08\u8a8d\u8b49\u8207\u6458\u8981\u63a7\u5236\uff09","text":"<p>\u6a21\u5f0f\u6982\u8ff0\uff1a \u8655\u7406\u5de5\u5177\u751f\u547d\u9031\u671f\u4e2d\u5c08\u5c6c\u884c\u70ba\uff0c\u4e3b\u8981\u70ba\u8a8d\u8b49\uff08Authentication\uff09\u8207\u63a7\u5236 LLM \u5c0d\u5de5\u5177\u7d50\u679c\u7684\u6458\u8981\u3002</p> <p>\u5be6\u4f5c\u65b9\u5f0f\uff1a \u5728\u5de5\u5177 callbacks\uff08<code>before_tool_callback</code>\u3001<code>after_tool_callback</code>\uff09\u4e2d\u4f7f\u7528 <code>ToolContext</code>\uff1a</p> <ul> <li>\u8a8d\u8b49\uff1a \u82e5\u9700\u8981\u8a8d\u8b49\u4f46\u672a\u627e\u5230\u6191\u8b49\uff08\u5982\u900f\u904e <code>tool_context.get_auth_response</code> \u6216 state \u6aa2\u67e5\uff09\uff0c\u5247\u65bc <code>before_tool_callback</code> \u4e2d\u547c\u53eb <code>tool_context.request_credential(auth_config)</code>\uff0c\u555f\u52d5\u8a8d\u8b49\u6d41\u7a0b\u3002</li> <li>\u6458\u8981\u63a7\u5236\uff1a \u82e5\u5e0c\u671b\u5c07\u5de5\u5177\u7684\u539f\u59cb\u5b57\u5178\u8f38\u51fa\u76f4\u63a5\u50b3\u56de LLM \u6216\u76f4\u63a5\u986f\u793a\uff08\u8df3\u904e\u9810\u8a2d\u7684 LLM \u6458\u8981\u6b65\u9a5f\uff09\uff0c\u5247\u8a2d\u5b9a <code>tool_context.actions.skip_summarization = True</code>\u3002</li> </ul> <p>\u7bc4\u4f8b\u61c9\u7528\u60c5\u5883\uff1a \u91dd\u5c0d\u5b89\u5168 API \u7684 <code>before_tool_callback</code> \u6703\u6aa2\u67e5 state \u662f\u5426\u6709 auth token\uff0c\u82e5\u7f3a\u5c11\u5247\u547c\u53eb <code>request_credential</code>\u3002\u800c\u91dd\u5c0d\u56de\u50b3\u7d50\u69cb\u5316 JSON \u7684\u5de5\u5177\uff0c<code>after_tool_callback</code> \u53ef\u80fd\u6703\u8a2d\u5b9a <code>skip_summarization = True</code>\u3002</p>"},{"location":"callbacks/design-patterns-and-best-practices/#artifact-handling","title":"8. \u6a94\u6848\u8655\u7406\uff08Artifact Handling\uff09","text":"<p>\u6a21\u5f0f\u6982\u8ff0\uff1a \u5728 agent \u751f\u547d\u9031\u671f\u4e2d\u5132\u5b58\u6216\u8f09\u5165\u8207 session \u76f8\u95dc\u7684\u6a94\u6848\u6216\u5927\u578b\u8cc7\u6599 blob\u3002</p> <p>\u5be6\u4f5c\u65b9\u5f0f\uff1a - \u5132\u5b58\uff1a \u4f7f\u7528 <code>callback_context.save_artifact</code> / <code>await tool_context.save_artifact</code> \u5132\u5b58\u8cc7\u6599\uff1a   - \u7522\u751f\u7684\u5831\u544a   - \u65e5\u8a8c   - \u4e2d\u9593\u8cc7\u6599 - \u8f09\u5165\uff1a \u4f7f\u7528 <code>load_artifact</code> \u53d6\u56de\u5148\u524d\u5132\u5b58\u7684 artifact - \u8ffd\u8e64\uff1a \u8b8a\u66f4\u6703\u900f\u904e <code>Event.actions.artifact_delta</code> \u8ffd\u8e64</p> <p>\u7bc4\u4f8b\u61c9\u7528\u60c5\u5883\uff1a \u300cgenerate_report\u300d\u5de5\u5177\u7684 <code>after_tool_callback</code> \u6703\u7528 <code>await tool_context.save_artifact(\"report.pdf\", report_part)</code> \u5132\u5b58\u8f38\u51fa\u6a94\u6848\uff1b<code>before_agent_callback</code> \u5247\u53ef\u80fd\u7528 <code>callback_context.load_artifact(\"agent_config.json\")</code> \u8f09\u5165\u8a2d\u5b9a\u6a94 artifact\u3002</p>"},{"location":"callbacks/design-patterns-and-best-practices/#callbacks_1","title":"Callbacks \u7684\u6700\u4f73\u5be6\u8e10","text":""},{"location":"callbacks/design-patterns-and-best-practices/#_2","title":"\u8a2d\u8a08\u539f\u5247","text":"<p>\u805a\u7126\u55ae\u4e00\u8077\u8cac\uff1a \u8a2d\u8a08\u6bcf\u500b callback \u6642\uff0c\u8acb\u805a\u7126\u65bc\u55ae\u4e00\u660e\u78ba\u7684\u76ee\u7684\uff08\u5982\u50c5\u505a\u65e5\u8a8c\u3001\u50c5\u505a\u9a57\u8b49\uff09\uff0c\u907f\u514d callback \u904e\u65bc\u9f90\u5927\u3002</p> <p>\u6ce8\u610f\u6548\u80fd\uff1a Callbacks \u6703\u5728 agent \u8655\u7406\u8ff4\u5708\u4e2d\u540c\u6b65\u57f7\u884c\u3002\u907f\u514d\u57f7\u884c\u9577\u6642\u9593\u6216\u963b\u585e\u7684\u64cd\u4f5c\uff08\u5982\u7db2\u8def\u547c\u53eb\u3001\u91cd\u5ea6\u904b\u7b97\uff09\u3002\u5982\u9700\u96e2\u7dda\u8655\u7406\uff0c\u8acb\u6ce8\u610f\u9019\u6703\u589e\u52a0\u8907\u96dc\u5ea6\u3002</p>"},{"location":"callbacks/design-patterns-and-best-practices/#_3","title":"\u932f\u8aa4\u8655\u7406","text":"<p>\u512a\u96c5\u8655\u7406\u932f\u8aa4\uff1a - \u5728 callback \u51fd\u5f0f\u5167\u4f7f\u7528 <code>try...except/catch</code> \u5340\u584a - \u9069\u7576\u8a18\u9304\u932f\u8aa4 - \u6c7a\u5b9a agent \u547c\u53eb\u662f\u5426\u61c9\u4e2d\u6b62\u6216\u5617\u8a66\u5fa9\u539f - \u8acb\u52ff\u8b93 callback \u932f\u8aa4\u5c0e\u81f4\u6574\u500b\u6d41\u7a0b\u5d29\u6f70</p>"},{"location":"callbacks/design-patterns-and-best-practices/#_4","title":"\u72c0\u614b\u7ba1\u7406","text":"<p>\u8b39\u614e\u7ba1\u7406\u72c0\u614b\uff1a - \u6709\u610f\u8b58\u5730\u8b80\u5beb <code>context.state</code> - \u8b8a\u66f4\u6703\u65bc_\u672c\u6b21_\u547c\u53eb\u5167\u7acb\u5373\u53ef\u898b\uff0c\u4e26\u65bc\u4e8b\u4ef6\u8655\u7406\u7d50\u675f\u6642\u6301\u4e45\u5316 - \u5118\u91cf\u4f7f\u7528\u660e\u78ba\u7684 state key\uff0c\u907f\u514d\u4fee\u6539\u6574\u9ad4\u7d50\u69cb\uff0c\u4ee5\u9632\u7522\u751f\u975e\u9810\u671f\u526f\u4f5c\u7528 - \u5efa\u8b70\u4f7f\u7528 state \u524d\u7db4\uff08<code>State.APP_PREFIX</code>\u3001<code>State.USER_PREFIX</code>\u3001<code>State.TEMP_PREFIX</code>\uff09\u4ee5\u63d0\u5347\u53ef\u8b80\u6027\uff0c\u7279\u5225\u662f\u5728\u6301\u4e45\u5316 <code>SessionService</code> \u5be6\u4f5c\u6642</p>"},{"location":"callbacks/design-patterns-and-best-practices/#_5","title":"\u53ef\u9760\u6027","text":"<p>\u8003\u616e\u51aa\u7b49\u6027\uff08Idempotency\uff09\uff1a \u82e5 callback \u6703\u5c0d\u5916\u90e8\u7522\u751f\u526f\u4f5c\u7528\uff08\u5982\u905e\u589e\u5916\u90e8\u8a08\u6578\u5668\uff09\uff0c\u8acb\u76e1\u91cf\u8a2d\u8a08\u70ba\u51aa\u7b49\uff08\u540c\u4e00\u8f38\u5165\u591a\u6b21\u57f7\u884c\u4e5f\u5b89\u5168\uff09\uff0c\u4ee5\u56e0\u61c9\u6846\u67b6\u6216\u61c9\u7528\u5c64\u53ef\u80fd\u7684\u91cd\u8a66\u884c\u70ba\u3002</p>"},{"location":"callbacks/design-patterns-and-best-practices/#_6","title":"\u6e2c\u8a66\u8207\u6587\u4ef6","text":"<p>\u5fb9\u5e95\u6e2c\u8a66\uff1a - \u4f7f\u7528 mock context \u7269\u4ef6\u9032\u884c\u55ae\u5143\u6e2c\u8a66 - \u9032\u884c\u6574\u5408\u6e2c\u8a66\uff0c\u78ba\u4fdd callback \u5728\u5b8c\u6574 agent \u6d41\u7a0b\u4e2d\u6b63\u5e38\u904b\u4f5c</p> <p>\u78ba\u4fdd\u6613\u8b80\u6027\uff1a - \u70ba callback \u51fd\u5f0f\u4f7f\u7528\u5177\u63cf\u8ff0\u6027\u7684\u540d\u7a31 - \u52a0\u4e0a\u6e05\u695a\u7684 docstring\uff0c\u8aaa\u660e\u7528\u9014\u3001\u89f8\u767c\u6642\u6a5f\u53ca\u526f\u4f5c\u7528\uff08\u5c24\u5176\u662f\u72c0\u614b\u8b8a\u66f4\uff09</p> <p>\u4f7f\u7528\u6b63\u78ba\u7684 Context \u578b\u5225\uff1a \u52d9\u5fc5\u4f7f\u7528\u63d0\u4f9b\u7684\u5c08\u5c6c context \u578b\u5225\uff08agent/model \u8acb\u7528 <code>CallbackContext</code>\uff0c\u5de5\u5177\u8acb\u7528 <code>ToolContext</code>\uff09\uff0c\u4ee5\u78ba\u4fdd\u80fd\u5b58\u53d6\u6b63\u78ba\u7684\u65b9\u6cd5\u8207\u5c6c\u6027\u3002</p> <p>\u904b\u7528\u9019\u4e9b\u8a2d\u8a08\u6a21\u5f0f\u8207\u6700\u4f73\u5be6\u8e10\uff0c\u60a8\u5c07\u80fd\u6709\u6548\u5229\u7528 Callbacks\uff0c\u6253\u9020\u66f4\u5065\u58ef\u3001\u53ef\u89c0\u5bdf\u3001\u4e14\u9ad8\u5ea6\u81ea\u8a02\u5316\u7684 agent \u884c\u70ba\u65bc Agent Development Kit (ADK) \u4e2d\u3002</p>"},{"location":"callbacks/index.en/","title":"Callbacks: Observe, Customize, and Control Agent Behavior","text":""},{"location":"callbacks/index.en/#introduction-what-are-callbacks-and-why-use-them","title":"Introduction: What are Callbacks and Why Use Them?","text":"<p>Callbacks are a cornerstone feature of ADK, providing a powerful mechanism to hook into an agent's execution process. They allow you to observe, customize, and even control the agent's behavior at specific, predefined points without modifying the core ADK framework code.</p> <p>What are they? In essence, callbacks are standard functions that you define. You then associate these functions with an agent when you create it. The ADK framework automatically calls your functions at key stages, letting you observe or intervene. Think of it like checkpoints during the agent's process:</p> <ul> <li>Before the agent starts its main work on a request, and after it finishes: When you ask an agent to do something (e.g., answer a question), it runs its internal logic to figure out the response.</li> <li>The <code>Before Agent</code> callback executes right before this main work begins for that specific request.</li> <li>The <code>After Agent</code> callback executes right after the agent has finished all its steps for that request and has prepared the final result, but just before the result is returned.</li> <li>This \"main work\" encompasses the agent's entire process for handling that single request. This might involve deciding to call an LLM, actually calling the LLM, deciding to use a tool, using the tool, processing the results, and finally putting together the answer. These callbacks essentially wrap the whole sequence from receiving the input to producing the final output for that one interaction.</li> <li>Before sending a request to, or after receiving a response from, the Large Language Model (LLM): These callbacks (<code>Before Model</code>, <code>After Model</code>) allow you to inspect or modify the data going to and coming from the LLM specifically.</li> <li>Before executing a tool (like a Python function or another agent) or after it finishes: Similarly, <code>Before Tool</code> and <code>After Tool</code> callbacks give you control points specifically around the execution of tools invoked by the agent.</li> </ul> <p></p> <p>Why use them? Callbacks unlock significant flexibility and enable advanced agent capabilities:</p> <ul> <li>Observe &amp; Debug: Log detailed information at critical steps for monitoring and troubleshooting.  </li> <li>Customize &amp; Control: Modify data flowing through the agent (like LLM requests or tool results) or even bypass certain steps entirely based on your logic.  </li> <li>Implement Guardrails: Enforce safety rules, validate inputs/outputs, or prevent disallowed operations.  </li> <li>Manage State: Read or dynamically update the agent's session state during execution.  </li> <li>Integrate &amp; Enhance: Trigger external actions (API calls, notifications) or add features like caching.</li> </ul> <p>Tip</p> <p>When implementing security guardrails and policies, use ADK Plugins for better modularity and flexibility than Callbacks. For more details, see  Callbacks and Plugins for Security Guardrails.</p> <p>How are they added: </p> Code PythonJava <pre><code>from google.adk.agents import LlmAgent\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.models import LlmResponse, LlmRequest\nfrom typing import Optional\n\n# --- Define your callback function ---\ndef my_before_model_logic(\n    callback_context: CallbackContext, llm_request: LlmRequest\n) -&gt; Optional[LlmResponse]:\n    print(f\"Callback running before model call for agent: {callback_context.agent_name}\")\n    # ... your custom logic here ...\n    return None # Allow the model call to proceed\n\n# --- Register it during Agent creation ---\nmy_agent = LlmAgent(\n    name=\"MyCallbackAgent\",\n    model=\"gemini-2.0-flash\", # Or your desired model\n    instruction=\"Be helpful.\",\n    # Other agent parameters...\n    before_model_callback=my_before_model_logic # Pass the function here\n)\n</code></pre> <pre><code>import com.google.adk.agents.CallbackContext;\nimport com.google.adk.agents.Callbacks;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.models.LlmRequest;\nimport java.util.Optional;\n\npublic class AgentWithBeforeModelCallback {\n\n  public static void main(String[] args) {\n    // --- Define your callback logic ---\n    Callbacks.BeforeModelCallbackSync myBeforeModelLogic =\n        (CallbackContext callbackContext, LlmRequest llmRequest) -&gt; {\n          System.out.println(\n              \"Callback running before model call for agent: \" + callbackContext.agentName());\n          // ... your custom logic here ...\n\n          // Return Optional.empty() to allow the model call to proceed,\n          // similar to returning None in the Python example.\n          // If you wanted to return a response and skip the model call,\n          // you would return Optional.of(yourLlmResponse).\n          return Optional.empty();\n        };\n\n    // --- Register it during Agent creation ---\n    LlmAgent myAgent =\n        LlmAgent.builder()\n            .name(\"MyCallbackAgent\")\n            .model(\"gemini-2.0-flash\") // Or your desired model\n            .instruction(\"Be helpful.\")\n            // Other agent parameters...\n            .beforeModelCallbackSync(myBeforeModelLogic) // Pass the callback implementation here\n            .build();\n  }\n}\n</code></pre>"},{"location":"callbacks/index.en/#the-callback-mechanism-interception-and-control","title":"The Callback Mechanism: Interception and Control","text":"<p>When the ADK framework encounters a point where a callback can run (e.g., just before calling the LLM), it checks if you provided a corresponding callback function for that agent. If you did, the framework executes your function.</p> <p>Context is Key: Your callback function isn't called in isolation. The framework provides special context objects (<code>CallbackContext</code> or <code>ToolContext</code>) as arguments. These objects contain vital information about the current state of the agent's execution, including the invocation details, session state, and potentially references to services like artifacts or memory. You use these context objects to understand the situation and interact with the framework. (See the dedicated \"Context Objects\" section for full details).</p> <p>Controlling the Flow (The Core Mechanism): The most powerful aspect of callbacks lies in how their return value influences the agent's subsequent actions. This is how you intercept and control the execution flow:</p> <ol> <li> <p><code>return None</code> (Allow Default Behavior): </p> <ul> <li>The specific return type can vary depending on the language. In Java, the equivalent return type is <code>Optional.empty()</code>. Refer to the API documentation for language specific guidance.</li> <li>This is the standard way to signal that your callback has finished its work (e.g., logging, inspection, minor modifications to mutable input arguments like <code>llm_request</code>) and that the ADK agent should proceed with its normal operation.  </li> <li>For <code>before_*</code> callbacks (<code>before_agent</code>, <code>before_model</code>, <code>before_tool</code>), returning <code>None</code> means the next step in the sequence (running the agent logic, calling the LLM, executing the tool) will occur.  </li> <li>For <code>after_*</code> callbacks (<code>after_agent</code>, <code>after_model</code>, <code>after_tool</code>), returning <code>None</code> means the result just produced by the preceding step (the agent's output, the LLM's response, the tool's result) will be used as is.</li> </ul> </li> <li> <p><code>return &lt;Specific Object&gt;</code> (Override Default Behavior): </p> <ul> <li>Returning a specific type of object (instead of <code>None</code>) is how you override the ADK agent's default behavior. The framework will use the object you return and skip the step that would normally follow or replace the result that was just generated.  </li> <li><code>before_agent_callback</code> \u2192 <code>types.Content</code>: Skips the agent's main execution logic (<code>_run_async_impl</code> / <code>_run_live_impl</code>). The returned <code>Content</code> object is immediately treated as the agent's final output for this turn. Useful for handling simple requests directly or enforcing access control.  </li> <li><code>before_model_callback</code> \u2192 <code>LlmResponse</code>: Skips the call to the external Large Language Model. The returned <code>LlmResponse</code> object is processed as if it were the actual response from the LLM. Ideal for implementing input guardrails, prompt validation, or serving cached responses.  </li> <li><code>before_tool_callback</code> \u2192 <code>dict</code> or <code>Map</code>: Skips the execution of the actual tool function (or sub-agent). The returned <code>dict</code> is used as the result of the tool call, which is then typically passed back to the LLM. Perfect for validating tool arguments, applying policy restrictions, or returning mocked/cached tool results.  </li> <li><code>after_agent_callback</code> \u2192 <code>types.Content</code>: Replaces the <code>Content</code> that the agent's run logic just produced.  </li> <li><code>after_model_callback</code> \u2192 <code>LlmResponse</code>: Replaces the <code>LlmResponse</code> received from the LLM. Useful for sanitizing outputs, adding standard disclaimers, or modifying the LLM's response structure.  </li> <li><code>after_tool_callback</code> \u2192 <code>dict</code> or <code>Map</code>: Replaces the <code>dict</code> result returned by the tool. Allows for post-processing or standardization of tool outputs before they are sent back to the LLM.</li> </ul> </li> </ol> <p>Conceptual Code Example (Guardrail):</p> <p>This example demonstrates the common pattern for a guardrail using <code>before_model_callback</code>.</p> Code PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.models import LlmResponse, LlmRequest\nfrom google.adk.runners import Runner\nfrom typing import Optional\nfrom google.genai import types \nfrom google.adk.sessions import InMemorySessionService\n\nGEMINI_2_FLASH=\"gemini-2.0-flash\"\n\n# --- Define the Callback Function ---\ndef simple_before_model_modifier(\n    callback_context: CallbackContext, llm_request: LlmRequest\n) -&gt; Optional[LlmResponse]:\n    \"\"\"Inspects/modifies the LLM request or skips the call.\"\"\"\n    agent_name = callback_context.agent_name\n    print(f\"[Callback] Before model call for agent: {agent_name}\")\n\n    # Inspect the last user message in the request contents\n    last_user_message = \"\"\n    if llm_request.contents and llm_request.contents[-1].role == 'user':\n         if llm_request.contents[-1].parts:\n            last_user_message = llm_request.contents[-1].parts[0].text\n    print(f\"[Callback] Inspecting last user message: '{last_user_message}'\")\n\n    # --- Modification Example ---\n    # Add a prefix to the system instruction\n    original_instruction = llm_request.config.system_instruction or types.Content(role=\"system\", parts=[])\n    prefix = \"[Modified by Callback] \"\n    # Ensure system_instruction is Content and parts list exists\n    if not isinstance(original_instruction, types.Content):\n         # Handle case where it might be a string (though config expects Content)\n         original_instruction = types.Content(role=\"system\", parts=[types.Part(text=str(original_instruction))])\n    if not original_instruction.parts:\n        original_instruction.parts.append(types.Part(text=\"\")) # Add an empty part if none exist\n\n    # Modify the text of the first part\n    modified_text = prefix + (original_instruction.parts[0].text or \"\")\n    original_instruction.parts[0].text = modified_text\n    llm_request.config.system_instruction = original_instruction\n    print(f\"[Callback] Modified system instruction to: '{modified_text}'\")\n\n    # --- Skip Example ---\n    # Check if the last user message contains \"BLOCK\"\n    if \"BLOCK\" in last_user_message.upper():\n        print(\"[Callback] 'BLOCK' keyword found. Skipping LLM call.\")\n        # Return an LlmResponse to skip the actual LLM call\n        return LlmResponse(\n            content=types.Content(\n                role=\"model\",\n                parts=[types.Part(text=\"LLM call was blocked by before_model_callback.\")],\n            )\n        )\n    else:\n        print(\"[Callback] Proceeding with LLM call.\")\n        # Return None to allow the (modified) request to go to the LLM\n        return None\n\n\n# Create LlmAgent and Assign Callback\nmy_llm_agent = LlmAgent(\n        name=\"ModelCallbackAgent\",\n        model=GEMINI_2_FLASH,\n        instruction=\"You are a helpful assistant.\", # Base instruction\n        description=\"An LLM agent demonstrating before_model_callback\",\n        before_model_callback=simple_before_model_modifier # Assign the function here\n)\n\nAPP_NAME = \"guardrail_app\"\nUSER_ID = \"user_1\"\nSESSION_ID = \"session_001\"\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=my_llm_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"write a joke on BLOCK\")\n</code></pre> <pre><code>import com.google.adk.agents.CallbackContext;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.models.LlmRequest;\nimport com.google.adk.models.LlmResponse;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.GenerateContentConfig;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\npublic class BeforeModelGuardrailExample {\n\n  private static final String MODEL_ID = \"gemini-2.0-flash\";\n  private static final String APP_NAME = \"guardrail_app\";\n  private static final String USER_ID = \"user_1\";\n\n  public static void main(String[] args) {\n    BeforeModelGuardrailExample example = new BeforeModelGuardrailExample();\n    example.defineAgentAndRun(\"Tell me about quantum computing. This is a test.\");\n  }\n\n  // --- Define your callback logic ---\n  // Looks for the word \"BLOCK\" in the user prompt and blocks the call to LLM if found.\n  // Otherwise the LLM call proceeds as usual.\n  public Optional&lt;LlmResponse&gt; simpleBeforeModelModifier(\n      CallbackContext callbackContext, LlmRequest llmRequest) {\n    System.out.println(\"[Callback] Before model call for agent: \" + callbackContext.agentName());\n\n    // Inspect the last user message in the request contents\n    String lastUserMessageText = \"\";\n    List&lt;Content&gt; requestContents = llmRequest.contents();\n    if (requestContents != null &amp;&amp; !requestContents.isEmpty()) {\n      Content lastContent = requestContents.get(requestContents.size() - 1);\n      if (lastContent.role().isPresent() &amp;&amp; \"user\".equals(lastContent.role().get())) {\n        lastUserMessageText =\n            lastContent.parts().orElse(List.of()).stream()\n                .flatMap(part -&gt; part.text().stream())\n                .collect(Collectors.joining(\" \")); // Concatenate text from all parts\n      }\n    }\n    System.out.println(\"[Callback] Inspecting last user message: '\" + lastUserMessageText + \"'\");\n\n    String prefix = \"[Modified by Callback] \";\n    GenerateContentConfig currentConfig =\n        llmRequest.config().orElse(GenerateContentConfig.builder().build());\n    Optional&lt;Content&gt; optOriginalSystemInstruction = currentConfig.systemInstruction();\n\n    Content conceptualModifiedSystemInstruction;\n    if (optOriginalSystemInstruction.isPresent()) {\n      Content originalSystemInstruction = optOriginalSystemInstruction.get();\n      List&lt;Part&gt; originalParts =\n          new ArrayList&lt;&gt;(originalSystemInstruction.parts().orElse(List.of()));\n      String originalText = \"\";\n\n      if (!originalParts.isEmpty()) {\n        Part firstPart = originalParts.get(0);\n        if (firstPart.text().isPresent()) {\n          originalText = firstPart.text().get();\n        }\n        originalParts.set(0, Part.fromText(prefix + originalText));\n      } else {\n        originalParts.add(Part.fromText(prefix));\n      }\n      conceptualModifiedSystemInstruction =\n          originalSystemInstruction.toBuilder().parts(originalParts).build();\n    } else {\n      conceptualModifiedSystemInstruction =\n          Content.builder()\n              .role(\"system\")\n              .parts(List.of(Part.fromText(prefix)))\n              .build();\n    }\n\n    // This demonstrates building a new LlmRequest with the modified config.\n    llmRequest =\n        llmRequest.toBuilder()\n            .config(\n                currentConfig.toBuilder()\n                    .systemInstruction(conceptualModifiedSystemInstruction)\n                    .build())\n            .build();\n\n    System.out.println(\n        \"[Callback] Conceptually modified system instruction is: '\"\n            + llmRequest.config().get().systemInstruction().get().parts().get().get(0).text().get());\n\n    // --- Skip Example ---\n    // Check if the last user message contains \"BLOCK\"\n    if (lastUserMessageText.toUpperCase().contains(\"BLOCK\")) {\n      System.out.println(\"[Callback] 'BLOCK' keyword found. Skipping LLM call.\");\n      LlmResponse skipResponse =\n          LlmResponse.builder()\n              .content(\n                  Content.builder()\n                      .role(\"model\")\n                      .parts(\n                          List.of(\n                              Part.builder()\n                                  .text(\"LLM call was blocked by before_model_callback.\")\n                                  .build()))\n                      .build())\n              .build();\n      return Optional.of(skipResponse);\n    }\n    System.out.println(\"[Callback] Proceeding with LLM call.\");\n    // Return Optional.empty() to allow the (modified) request to go to the LLM\n    return Optional.empty();\n  }\n\n  public void defineAgentAndRun(String prompt) {\n    // --- Create LlmAgent and Assign Callback ---\n    LlmAgent myLlmAgent =\n        LlmAgent.builder()\n            .name(\"ModelCallbackAgent\")\n            .model(MODEL_ID)\n            .instruction(\"You are a helpful assistant.\") // Base instruction\n            .description(\"An LLM agent demonstrating before_model_callback\")\n            .beforeModelCallbackSync(this::simpleBeforeModelModifier) // Assign the callback here\n            .build();\n\n    // Session and Runner\n    InMemoryRunner runner = new InMemoryRunner(myLlmAgent, APP_NAME);\n    // InMemoryRunner automatically creates a session service. Create a session using the service\n    Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n    Content userMessage =\n        Content.fromParts(Part.fromText(prompt));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre> <p>By understanding this mechanism of returning <code>None</code> versus returning specific objects, you can precisely control the agent's execution path, making callbacks an essential tool for building sophisticated and reliable agents with ADK.</p>"},{"location":"callbacks/types-of-callbacks.en/","title":"Types of Callbacks","text":"<p>The framework provides different types of callbacks that trigger at various stages of an agent's execution. Understanding when each callback fires and what context it receives is key to using them effectively.</p>"},{"location":"callbacks/types-of-callbacks.en/#agent-lifecycle-callbacks","title":"Agent Lifecycle Callbacks","text":"<p>These callbacks are available on any agent that inherits from <code>BaseAgent</code> (including <code>LlmAgent</code>, <code>SequentialAgent</code>, <code>ParallelAgent</code>, <code>LoopAgent</code>, etc).</p> <p>Note</p> <p>The specific method names or return types may vary slightly by SDK language (e.g., return <code>None</code> in Python, return <code>Optional.empty()</code> or <code>Maybe.empty()</code> in Java). Refer to the language-specific API documentation for details.</p>"},{"location":"callbacks/types-of-callbacks.en/#before-agent-callback","title":"Before Agent Callback","text":"<p>When: Called immediately before the agent's <code>_run_async_impl</code> (or <code>_run_live_impl</code>) method is executed. It runs after the agent's <code>InvocationContext</code> is created but before its core logic begins.</p> <p>Purpose: Ideal for setting up resources or state needed only for this specific agent's run, performing validation checks on the session state (callback_context.state) before execution starts, logging the entry point of the agent's activity, or potentially modifying the invocation context before the core logic uses it.</p> Code PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# # --- Setup Instructions ---\n# # 1. Install the ADK package:\n# !pip install google-adk\n# # Make sure to restart kernel if using colab/jupyter notebooks\n\n# # 2. Set up your Gemini API Key:\n# #    - Get a key from Google AI Studio: https://aistudio.google.com/app/apikey\n# #    - Set it as an environment variable:\n# import os\n# os.environ[\"GOOGLE_API_KEY\"] = \"YOUR_API_KEY_HERE\" # &lt;--- REPLACE with your actual key\n# # Or learn about other authentication methods (like Vertex AI):\n# # https://google.github.io/adk-docs/agents/models/\n\n# ADK Imports\nfrom google.adk.agents import LlmAgent\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.runners import InMemoryRunner # Use InMemoryRunner\nfrom google.genai import types # For types.Content\nfrom typing import Optional\n\n# Define the model - Use the specific model name requested\nGEMINI_2_FLASH=\"gemini-2.0-flash\"\n\n# --- 1. Define the Callback Function ---\ndef check_if_agent_should_run(callback_context: CallbackContext) -&gt; Optional[types.Content]:\n    \"\"\"\n    Logs entry and checks 'skip_llm_agent' in session state.\n    If True, returns Content to skip the agent's execution.\n    If False or not present, returns None to allow execution.\n    \"\"\"\n    agent_name = callback_context.agent_name\n    invocation_id = callback_context.invocation_id\n    current_state = callback_context.state.to_dict()\n\n    print(f\"\\n[Callback] Entering agent: {agent_name} (Inv: {invocation_id})\")\n    print(f\"[Callback] Current State: {current_state}\")\n\n    # Check the condition in session state dictionary\n    if current_state.get(\"skip_llm_agent\", False):\n        print(f\"[Callback] State condition 'skip_llm_agent=True' met: Skipping agent {agent_name}.\")\n        # Return Content to skip the agent's run\n        return types.Content(\n            parts=[types.Part(text=f\"Agent {agent_name} skipped by before_agent_callback due to state.\")],\n            role=\"model\" # Assign model role to the overriding response\n        )\n    else:\n        print(f\"[Callback] State condition not met: Proceeding with agent {agent_name}.\")\n        # Return None to allow the LlmAgent's normal execution\n        return None\n\n# --- 2. Setup Agent with Callback ---\nllm_agent_with_before_cb = LlmAgent(\n    name=\"MyControlledAgent\",\n    model=GEMINI_2_FLASH,\n    instruction=\"You are a concise assistant.\",\n    description=\"An LLM agent demonstrating stateful before_agent_callback\",\n    before_agent_callback=check_if_agent_should_run # Assign the callback\n)\n\n# --- 3. Setup Runner and Sessions using InMemoryRunner ---\nasync def main():\n    app_name = \"before_agent_demo\"\n    user_id = \"test_user\"\n    session_id_run = \"session_will_run\"\n    session_id_skip = \"session_will_skip\"\n\n    # Use InMemoryRunner - it includes InMemorySessionService\n    runner = InMemoryRunner(agent=llm_agent_with_before_cb, app_name=app_name)\n    # Get the bundled session service to create sessions\n    session_service = runner.session_service\n\n    # Create session 1: Agent will run (default empty state)\n    session_service.create_session(\n        app_name=app_name,\n        user_id=user_id,\n        session_id=session_id_run\n        # No initial state means 'skip_llm_agent' will be False in the callback check\n    )\n\n    # Create session 2: Agent will be skipped (state has skip_llm_agent=True)\n    session_service.create_session(\n        app_name=app_name,\n        user_id=user_id,\n        session_id=session_id_skip,\n        state={\"skip_llm_agent\": True} # Set the state flag here\n    )\n\n    # --- Scenario 1: Run where callback allows agent execution ---\n    print(\"\\n\" + \"=\"*20 + f\" SCENARIO 1: Running Agent on Session '{session_id_run}' (Should Proceed) \" + \"=\"*20)\n    async for event in runner.run_async(\n        user_id=user_id,\n        session_id=session_id_run,\n        new_message=types.Content(role=\"user\", parts=[types.Part(text=\"Hello, please respond.\")])\n    ):\n        # Print final output (either from LLM or callback override)\n        if event.is_final_response() and event.content:\n            print(f\"Final Output: [{event.author}] {event.content.parts[0].text.strip()}\")\n        elif event.is_error():\n             print(f\"Error Event: {event.error_details}\")\n\n    # --- Scenario 2: Run where callback intercepts and skips agent ---\n    print(\"\\n\" + \"=\"*20 + f\" SCENARIO 2: Running Agent on Session '{session_id_skip}' (Should Skip) \" + \"=\"*20)\n    async for event in runner.run_async(\n        user_id=user_id,\n        session_id=session_id_skip,\n        new_message=types.Content(role=\"user\", parts=[types.Part(text=\"This message won't reach the LLM.\")])\n    ):\n         # Print final output (either from LLM or callback override)\n         if event.is_final_response() and event.content:\n            print(f\"Final Output: [{event.author}] {event.content.parts[0].text.strip()}\")\n         elif event.is_error():\n             print(f\"Error Event: {event.error_details}\")\n\n# --- 4. Execute ---\n# In a Python script:\n# import asyncio\n# if __name__ == \"__main__\":\n#     # Make sure GOOGLE_API_KEY environment variable is set if not using Vertex AI auth\n#     # Or ensure Application Default Credentials (ADC) are configured for Vertex AI\n#     asyncio.run(main())\n\n# In a Jupyter Notebook or similar environment:\nawait main()\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.CallbackContext;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.sessions.State;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport io.reactivex.rxjava3.core.Maybe;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class BeforeAgentCallbackExample {\n\n  private static final String APP_NAME = \"AgentWithBeforeAgentCallback\";\n  private static final String USER_ID = \"test_user_456\";\n  private static final String SESSION_ID = \"session_id_123\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n\n  public static void main(String[] args) {\n    BeforeAgentCallbackExample callbackAgent = new BeforeAgentCallbackExample();\n    callbackAgent.defineAgent(\"Write a document about a cat\");\n  }\n\n  // --- 1. Define the Callback Function ---\n  /**\n   * Logs entry and checks 'skip_llm_agent' in session state. If True, returns Content to skip the\n   * agent's execution. If False or not present, returns None to allow execution.\n   */\n  public Maybe&lt;Content&gt; checkIfAgentShouldRun(CallbackContext callbackContext) {\n    String agentName = callbackContext.agentName();\n    String invocationId = callbackContext.invocationId();\n    State currentState = callbackContext.state();\n\n    System.out.printf(\"%n[Callback] Entering agent: %s (Inv: %s)%n\", agentName, invocationId);\n    System.out.printf(\"[Callback] Current State: %s%n\", currentState.entrySet());\n\n    // Check the condition in session state dictionary\n    if (Boolean.TRUE.equals(currentState.get(\"skip_llm_agent\"))) {\n      System.out.printf(\n          \"[Callback] State condition 'skip_llm_agent=True' met: Skipping agent %s\", agentName);\n      // Return Content to skip the agent's run\n      return Maybe.just(\n          Content.fromParts(\n              Part.fromText(\n                  String.format(\n                      \"Agent %s skipped by before_agent_callback due to state.\", agentName))));\n    }\n\n    System.out.printf(\n        \"[Callback] State condition 'skip_llm_agent=True' NOT met: Running agent %s \\n\", agentName);\n    // Return empty response to allow the LlmAgent's normal execution\n    return Maybe.empty();\n  }\n\n  public void defineAgent(String prompt) {\n    // --- 2. Setup Agent with Callback ---\n    BaseAgent llmAgentWithBeforeCallback =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(APP_NAME)\n            .instruction(\"You are a concise assistant.\")\n            .description(\"An LLM agent demonstrating stateful before_agent_callback\")\n            // You can also use a sync version of this callback \"beforeAgentCallbackSync\"\n            .beforeAgentCallback(this::checkIfAgentShouldRun)\n            .build();\n\n    // --- 3. Setup Runner and Sessions using InMemoryRunner ---\n\n    // Use InMemoryRunner - it includes InMemorySessionService\n    InMemoryRunner runner = new InMemoryRunner(llmAgentWithBeforeCallback, APP_NAME);\n    // Scenario 1: Initial state is null, which means 'skip_llm_agent' will be false in the callback\n    // check\n    runAgent(runner, null, prompt);\n    // Scenario 2: Agent will be skipped (state has skip_llm_agent=true)\n    runAgent(runner, new ConcurrentHashMap&lt;&gt;(Map.of(\"skip_llm_agent\", true)), prompt);\n  }\n\n  public void runAgent(InMemoryRunner runner, ConcurrentHashMap&lt;String, Object&gt; initialState, String prompt) {\n    // InMemoryRunner automatically creates a session service. Create a session using the service.\n    Session session =\n        runner\n            .sessionService()\n            .createSession(APP_NAME, USER_ID, initialState, SESSION_ID)\n            .blockingGet();\n    Content userMessage = Content.fromParts(Part.fromText(prompt));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Print final output (either from LLM or callback override)\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre> <p>Note on the <code>before_agent_callback</code> Example:</p> <ul> <li>What it Shows: This example demonstrates the <code>before_agent_callback</code>. This callback runs right before the agent's main processing logic starts for a given request.</li> <li>How it Works: The callback function (<code>check_if_agent_should_run</code>) looks at a flag (<code>skip_llm_agent</code>) in the session's state.<ul> <li>If the flag is <code>True</code>, the callback returns a <code>types.Content</code> object. This tells the ADK framework to skip the agent's main execution entirely and use the callback's returned content as the final response.</li> <li>If the flag is <code>False</code> (or not set), the callback returns <code>None</code> or an empty object. This tells the ADK framework to proceed with the agent's normal execution (calling the LLM in this case).</li> </ul> </li> <li>Expected Outcome: You'll see two scenarios:<ol> <li>In the session with the <code>skip_llm_agent: True</code> state, the agent's LLM call is bypassed, and the output comes directly from the callback (\"Agent... skipped...\").</li> <li>In the session without that state flag, the callback allows the agent to run, and you see the actual response from the LLM (e.g., \"Hello!\").</li> </ol> </li> <li>Understanding Callbacks: This highlights how <code>before_</code> callbacks act as gatekeepers, allowing you to intercept execution before a major step and potentially prevent it based on checks (like state, input validation, permissions).</li> </ul>"},{"location":"callbacks/types-of-callbacks.en/#after-agent-callback","title":"After Agent Callback","text":"<p>When: Called immediately after the agent's <code>_run_async_impl</code> (or <code>_run_live_impl</code>) method successfully completes. It does not run if the agent was skipped due to <code>before_agent_callback</code> returning content or if <code>end_invocation</code> was set during the agent's run.</p> <p>Purpose: Useful for cleanup tasks, post-execution validation, logging the completion of an agent's activity, modifying final state, or augmenting/replacing the agent's final output.</p> Code PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# # --- Setup Instructions ---\n# # 1. Install the ADK package:\n# !pip install google-adk\n# # Make sure to restart kernel if using colab/jupyter notebooks\n\n# # 2. Set up your Gemini API Key:\n# #    - Get a key from Google AI Studio: https://aistudio.google.com/app/apikey\n# #    - Set it as an environment variable:\n# import os\n# os.environ[\"GOOGLE_API_KEY\"] = \"YOUR_API_KEY_HERE\" # &lt;--- REPLACE with your actual key\n# # Or learn about other authentication methods (like Vertex AI):\n# # https://google.github.io/adk-docs/agents/models/\n\n\n# ADK Imports\nfrom google.adk.agents import LlmAgent\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.runners import InMemoryRunner # Use InMemoryRunner\nfrom google.genai import types # For types.Content\nfrom typing import Optional\n\n# Define the model - Use the specific model name requested\nGEMINI_2_FLASH=\"gemini-2.0-flash\"\n\n# --- 1. Define the Callback Function ---\ndef modify_output_after_agent(callback_context: CallbackContext) -&gt; Optional[types.Content]:\n    \"\"\"\n    Logs exit from an agent and checks 'add_concluding_note' in session state.\n    If True, returns new Content to *replace* the agent's original output.\n    If False or not present, returns None, allowing the agent's original output to be used.\n    \"\"\"\n    agent_name = callback_context.agent_name\n    invocation_id = callback_context.invocation_id\n    current_state = callback_context.state.to_dict()\n\n    print(f\"\\n[Callback] Exiting agent: {agent_name} (Inv: {invocation_id})\")\n    print(f\"[Callback] Current State: {current_state}\")\n\n    # Example: Check state to decide whether to modify the final output\n    if current_state.get(\"add_concluding_note\", False):\n        print(f\"[Callback] State condition 'add_concluding_note=True' met: Replacing agent {agent_name}'s output.\")\n        # Return Content to *replace* the agent's own output\n        return types.Content(\n            parts=[types.Part(text=f\"Concluding note added by after_agent_callback, replacing original output.\")],\n            role=\"model\" # Assign model role to the overriding response\n        )\n    else:\n        print(f\"[Callback] State condition not met: Using agent {agent_name}'s original output.\")\n        # Return None - the agent's output produced just before this callback will be used.\n        return None\n\n# --- 2. Setup Agent with Callback ---\nllm_agent_with_after_cb = LlmAgent(\n    name=\"MySimpleAgentWithAfter\",\n    model=GEMINI_2_FLASH,\n    instruction=\"You are a simple agent. Just say 'Processing complete!'\",\n    description=\"An LLM agent demonstrating after_agent_callback for output modification\",\n    after_agent_callback=modify_output_after_agent # Assign the callback here\n)\n\n# --- 3. Setup Runner and Sessions using InMemoryRunner ---\nasync def main():\n    app_name = \"after_agent_demo\"\n    user_id = \"test_user_after\"\n    session_id_normal = \"session_run_normally\"\n    session_id_modify = \"session_modify_output\"\n\n    # Use InMemoryRunner - it includes InMemorySessionService\n    runner = InMemoryRunner(agent=llm_agent_with_after_cb, app_name=app_name)\n    # Get the bundled session service to create sessions\n    session_service = runner.session_service\n\n    # Create session 1: Agent output will be used as is (default empty state)\n    session_service.create_session(\n        app_name=app_name,\n        user_id=user_id,\n        session_id=session_id_normal\n        # No initial state means 'add_concluding_note' will be False in the callback check\n    )\n    # print(f\"Session '{session_id_normal}' created with default state.\")\n\n    # Create session 2: Agent output will be replaced by the callback\n    session_service.create_session(\n        app_name=app_name,\n        user_id=user_id,\n        session_id=session_id_modify,\n        state={\"add_concluding_note\": True} # Set the state flag here\n    )\n    # print(f\"Session '{session_id_modify}' created with state={{'add_concluding_note': True}}.\")\n\n\n    # --- Scenario 1: Run where callback allows agent's original output ---\n    print(\"\\n\" + \"=\"*20 + f\" SCENARIO 1: Running Agent on Session '{session_id_normal}' (Should Use Original Output) \" + \"=\"*20)\n    async for event in runner.run_async(\n        user_id=user_id,\n        session_id=session_id_normal,\n        new_message=types.Content(role=\"user\", parts=[types.Part(text=\"Process this please.\")])\n    ):\n        # Print final output (either from LLM or callback override)\n        if event.is_final_response() and event.content:\n            print(f\"Final Output: [{event.author}] {event.content.parts[0].text.strip()}\")\n        elif event.is_error():\n             print(f\"Error Event: {event.error_details}\")\n\n    # --- Scenario 2: Run where callback replaces the agent's output ---\n    print(\"\\n\" + \"=\"*20 + f\" SCENARIO 2: Running Agent on Session '{session_id_modify}' (Should Replace Output) \" + \"=\"*20)\n    async for event in runner.run_async(\n        user_id=user_id,\n        session_id=session_id_modify,\n        new_message=types.Content(role=\"user\", parts=[types.Part(text=\"Process this and add note.\")])\n    ):\n         # Print final output (either from LLM or callback override)\n         if event.is_final_response() and event.content:\n            print(f\"Final Output: [{event.author}] {event.content.parts[0].text.strip()}\")\n         elif event.is_error():\n             print(f\"Error Event: {event.error_details}\")\n\n# --- 4. Execute ---\n# In a Python script:\n# import asyncio\n# if __name__ == \"__main__\":\n#     # Make sure GOOGLE_API_KEY environment variable is set if not using Vertex AI auth\n#     # Or ensure Application Default Credentials (ADC) are configured for Vertex AI\n#     asyncio.run(main())\n\n# In a Jupyter Notebook or similar environment:\nawait main()\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.CallbackContext;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.State;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport io.reactivex.rxjava3.core.Maybe;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class AfterAgentCallbackExample {\n\n  // --- Constants ---\n  private static final String APP_NAME = \"after_agent_demo\";\n  private static final String USER_ID = \"test_user_after\";\n  private static final String SESSION_ID_NORMAL = \"session_run_normally\";\n  private static final String SESSION_ID_MODIFY = \"session_modify_output\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n\n  public static void main(String[] args) {\n    AfterAgentCallbackExample demo = new AfterAgentCallbackExample();\n    demo.defineAgentAndRunScenarios();\n  }\n\n  // --- 1. Define the Callback Function ---\n  /**\n   * Log exit from an agent and checks 'add_concluding_note' in session state. If True, returns new\n   * Content to *replace* the agent's original output. If False or not present, returns\n   * Maybe.empty(), allowing the agent's original output to be used.\n   */\n  public Maybe&lt;Content&gt; modifyOutputAfterAgent(CallbackContext callbackContext) {\n    String agentName = callbackContext.agentName();\n    String invocationId = callbackContext.invocationId();\n    State currentState = callbackContext.state();\n\n    System.out.printf(\"%n[Callback] Exiting agent: %s (Inv: %s)%n\", agentName, invocationId);\n    System.out.printf(\"[Callback] Current State: %s%n\", currentState.entrySet());\n\n    Object addNoteFlag = currentState.get(\"add_concluding_note\");\n\n    // Example: Check state to decide whether to modify the final output\n    if (Boolean.TRUE.equals(addNoteFlag)) {\n      System.out.printf(\n          \"[Callback] State condition 'add_concluding_note=True' met: Replacing agent %s's\"\n              + \" output.%n\",\n          agentName);\n\n      // Return Content to *replace* the agent's own output\n      return Maybe.just(\n          Content.builder()\n              .parts(\n                  List.of(\n                      Part.fromText(\n                          \"Concluding note added by after_agent_callback, replacing original output.\")))\n              .role(\"model\") // Assign model role to the overriding response\n              .build());\n\n    } else {\n      System.out.printf(\n          \"[Callback] State condition not met: Using agent %s's original output.%n\", agentName);\n      // Return None - the agent's output produced just before this callback will be used.\n      return Maybe.empty();\n    }\n  }\n\n  // --- 2. Setup Agent with Callback ---\n  public void defineAgentAndRunScenarios() {\n    LlmAgent llmAgentWithAfterCb =\n        LlmAgent.builder()\n            .name(APP_NAME)\n            .model(MODEL_NAME)\n            .description(\"An LLM agent demonstrating after_agent_callback for output modification\")\n            .instruction(\"You are a simple agent. Just say 'Processing complete!'\")\n            .afterAgentCallback(this::modifyOutputAfterAgent) // Assign the callback here\n            .build();\n\n    // --- 3. Setup Runner and Sessions using InMemoryRunner ---\n    // Use InMemoryRunner - it includes InMemorySessionService\n    InMemoryRunner runner = new InMemoryRunner(llmAgentWithAfterCb, APP_NAME);\n\n    // --- Scenario 1: Run where callback allows agent's original output ---\n    System.out.printf(\n        \"%n%s SCENARIO 1: Running Agent (Should Use Original Output) %s%n\",\n        \"=\".repeat(20), \"=\".repeat(20));\n    // No initial state means 'add_concluding_note' will be false in the callback check\n    runScenario(\n        runner,\n        llmAgentWithAfterCb.name(), // Use agent name for runner's appName consistency\n        SESSION_ID_NORMAL,\n        null,\n        \"Process this please.\");\n\n    // --- Scenario 2: Run where callback replaces the agent's output ---\n    System.out.printf(\n        \"%n%s SCENARIO 2: Running Agent (Should Replace Output) %s%n\",\n        \"=\".repeat(20), \"=\".repeat(20));\n    Map&lt;String, Object&gt; modifyState = new HashMap&lt;&gt;();\n    modifyState.put(\"add_concluding_note\", true); // Set the state flag here\n    runScenario(\n        runner,\n        llmAgentWithAfterCb.name(), // Use agent name for runner's appName consistency\n        SESSION_ID_MODIFY,\n        new ConcurrentHashMap&lt;&gt;(modifyState),\n        \"Process this and add note.\");\n  }\n\n  // --- 3. Method to Run a Single Scenario ---\n  public void runScenario(\n      InMemoryRunner runner,\n      String appName,\n      String sessionId,\n      ConcurrentHashMap&lt;String, Object&gt; initialState,\n      String userQuery) {\n\n    // Create session using the runner's bundled session service\n    runner.sessionService().createSession(appName, USER_ID, initialState, sessionId).blockingGet();\n\n    System.out.printf(\n        \"Running scenario for session: %s, initial state: %s%n\", sessionId, initialState);\n    Content userMessage =\n        Content.builder().role(\"user\").parts(List.of(Part.fromText(userQuery))).build();\n\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, sessionId, userMessage);\n\n    // Print final output\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse() &amp;&amp; event.content().isPresent()) {\n            String author = event.author() != null ? event.author() : \"UNKNOWN\";\n            String text =\n                event\n                    .content()\n                    .flatMap(Content::parts)\n                    .filter(parts -&gt; !parts.isEmpty())\n                    .map(parts -&gt; parts.get(0).text().orElse(\"\").trim())\n                    .orElse(\"[No text in final response]\");\n            System.out.printf(\"Final Output for %s: [%s] %s%n\", sessionId, author, text);\n          } else if (event.errorCode().isPresent()) {\n            System.out.printf(\n                \"Error Event for %s: %s%n\",\n                sessionId, event.errorMessage().orElse(\"Unknown error\"));\n          }\n        });\n  }\n}\n</code></pre> <p>Note on the <code>after_agent_callback</code> Example:</p> <ul> <li>What it Shows: This example demonstrates the <code>after_agent_callback</code>. This callback runs right after the agent's main processing logic has finished and produced its result, but before that result is finalized and returned.</li> <li>How it Works: The callback function (<code>modify_output_after_agent</code>) checks a flag (<code>add_concluding_note</code>) in the session's state.<ul> <li>If the flag is <code>True</code>, the callback returns a new <code>types.Content</code> object. This tells the ADK framework to replace the agent's original output with the content returned by the callback.</li> <li>If the flag is <code>False</code> (or not set), the callback returns <code>None</code> or an empty object. This tells the ADK framework to use the original output generated by the agent.</li> </ul> </li> <li>Expected Outcome: You'll see two scenarios:<ol> <li>In the session without the <code>add_concluding_note: True</code> state, the callback allows the agent's original output (\"Processing complete!\") to be used.</li> <li>In the session with that state flag, the callback intercepts the agent's original output and replaces it with its own message (\"Concluding note added...\").</li> </ol> </li> <li>Understanding Callbacks: This highlights how <code>after_</code> callbacks allow post-processing or modification. You can inspect the result of a step (the agent's run) and decide whether to let it pass through, change it, or completely replace it based on your logic.</li> </ul>"},{"location":"callbacks/types-of-callbacks.en/#llm-interaction-callbacks","title":"LLM Interaction Callbacks","text":"<p>These callbacks are specific to <code>LlmAgent</code> and provide hooks around the interaction with the Large Language Model.</p>"},{"location":"callbacks/types-of-callbacks.en/#before-model-callback","title":"Before Model Callback","text":"<p>When: Called just before the <code>generate_content_async</code> (or equivalent) request is sent to the LLM within an <code>LlmAgent</code>'s flow.</p> <p>Purpose: Allows inspection and modification of the request going to the LLM. Use cases include adding dynamic instructions, injecting few-shot examples based on state, modifying model config, implementing guardrails (like profanity filters), or implementing request-level caching.</p> <p>Return Value Effect: If the callback returns <code>None</code> (or a <code>Maybe.empty()</code> object in Java), the LLM continues its normal workflow. If the callback returns an <code>LlmResponse</code> object, then the call to the LLM is skipped. The returned <code>LlmResponse</code> is used directly as if it came from the model. This is powerful for implementing guardrails or caching.</p> Code PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.models import LlmResponse, LlmRequest\nfrom google.adk.runners import Runner\nfrom typing import Optional\nfrom google.genai import types \nfrom google.adk.sessions import InMemorySessionService\n\nGEMINI_2_FLASH=\"gemini-2.0-flash\"\n\n# --- Define the Callback Function ---\ndef simple_before_model_modifier(\n    callback_context: CallbackContext, llm_request: LlmRequest\n) -&gt; Optional[LlmResponse]:\n    \"\"\"Inspects/modifies the LLM request or skips the call.\"\"\"\n    agent_name = callback_context.agent_name\n    print(f\"[Callback] Before model call for agent: {agent_name}\")\n\n    # Inspect the last user message in the request contents\n    last_user_message = \"\"\n    if llm_request.contents and llm_request.contents[-1].role == 'user':\n         if llm_request.contents[-1].parts:\n            last_user_message = llm_request.contents[-1].parts[0].text\n    print(f\"[Callback] Inspecting last user message: '{last_user_message}'\")\n\n    # --- Modification Example ---\n    # Add a prefix to the system instruction\n    original_instruction = llm_request.config.system_instruction or types.Content(role=\"system\", parts=[])\n    prefix = \"[Modified by Callback] \"\n    # Ensure system_instruction is Content and parts list exists\n    if not isinstance(original_instruction, types.Content):\n         # Handle case where it might be a string (though config expects Content)\n         original_instruction = types.Content(role=\"system\", parts=[types.Part(text=str(original_instruction))])\n    if not original_instruction.parts:\n        original_instruction.parts.append(types.Part(text=\"\")) # Add an empty part if none exist\n\n    # Modify the text of the first part\n    modified_text = prefix + (original_instruction.parts[0].text or \"\")\n    original_instruction.parts[0].text = modified_text\n    llm_request.config.system_instruction = original_instruction\n    print(f\"[Callback] Modified system instruction to: '{modified_text}'\")\n\n    # --- Skip Example ---\n    # Check if the last user message contains \"BLOCK\"\n    if \"BLOCK\" in last_user_message.upper():\n        print(\"[Callback] 'BLOCK' keyword found. Skipping LLM call.\")\n        # Return an LlmResponse to skip the actual LLM call\n        return LlmResponse(\n            content=types.Content(\n                role=\"model\",\n                parts=[types.Part(text=\"LLM call was blocked by before_model_callback.\")],\n            )\n        )\n    else:\n        print(\"[Callback] Proceeding with LLM call.\")\n        # Return None to allow the (modified) request to go to the LLM\n        return None\n\n\n# Create LlmAgent and Assign Callback\nmy_llm_agent = LlmAgent(\n        name=\"ModelCallbackAgent\",\n        model=GEMINI_2_FLASH,\n        instruction=\"You are a helpful assistant.\", # Base instruction\n        description=\"An LLM agent demonstrating before_model_callback\",\n        before_model_callback=simple_before_model_modifier # Assign the function here\n)\n\nAPP_NAME = \"guardrail_app\"\nUSER_ID = \"user_1\"\nSESSION_ID = \"session_001\"\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=my_llm_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"write a joke on BLOCK\")\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.CallbackContext;\nimport com.google.adk.events.Event;\nimport com.google.adk.models.LlmRequest;\nimport com.google.adk.models.LlmResponse;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.Iterables;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.GenerateContentConfig;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport io.reactivex.rxjava3.core.Maybe;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class BeforeModelCallbackExample {\n\n  // --- Define Constants ---\n  private static final String AGENT_NAME = \"ModelCallbackAgent\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n  private static final String AGENT_INSTRUCTION = \"You are a helpful assistant.\";\n  private static final String AGENT_DESCRIPTION =\n      \"An LLM agent demonstrating before_model_callback\";\n\n  // For session and runner\n  private static final String APP_NAME = \"guardrail_app_java\";\n  private static final String USER_ID = \"user_1_java\";\n\n  public static void main(String[] args) {\n    BeforeModelCallbackExample demo = new BeforeModelCallbackExample();\n    demo.defineAgentAndRun();\n  }\n\n  // --- 1. Define the Callback Function ---\n  // Inspects/modifies the LLM request or skips the actual LLM call.\n  public Maybe&lt;LlmResponse&gt; simpleBeforeModelModifier(\n      CallbackContext callbackContext, LlmRequest llmRequest) {\n    String agentName = callbackContext.agentName();\n    System.out.printf(\"%n[Callback] Before model call for agent: %s%n\", agentName);\n\n    String lastUserMessage = \"\";\n    if (llmRequest.contents() != null &amp;&amp; !llmRequest.contents().isEmpty()) {\n      Content lastContentItem = Iterables.getLast(llmRequest.contents());\n      if (\"user\".equals(lastContentItem.role().orElse(null))\n          &amp;&amp; lastContentItem.parts().isPresent()\n          &amp;&amp; !lastContentItem.parts().get().isEmpty()) {\n        lastUserMessage = lastContentItem.parts().get().get(0).text().orElse(\"\");\n      }\n    }\n    System.out.printf(\"[Callback] Inspecting last user message: '%s'%n\", lastUserMessage);\n\n    // --- Modification Example ---\n    // Add a prefix to the system instruction\n    Content systemInstructionFromRequest = Content.builder().parts(ImmutableList.of()).build();\n    // Ensure system_instruction is Content and parts list exists\n    if (llmRequest.config().isPresent()) {\n      systemInstructionFromRequest =\n          llmRequest\n              .config()\n              .get()\n              .systemInstruction()\n              .orElseGet(() -&gt; Content.builder().role(\"system\").parts(ImmutableList.of()).build());\n    }\n    List&lt;Part&gt; currentSystemParts =\n        new ArrayList&lt;&gt;(systemInstructionFromRequest.parts().orElse(ImmutableList.of()));\n    // Ensure a part exists for modification\n    if (currentSystemParts.isEmpty()) {\n      currentSystemParts.add(Part.fromText(\"\"));\n    }\n    // Modify the text of the first part\n    String prefix = \"[Modified by Callback] \";\n    String conceptuallyModifiedText = prefix + currentSystemParts.get(0).text().orElse(\"\");\n    llmRequest =\n        llmRequest.toBuilder()\n            .config(\n                GenerateContentConfig.builder()\n                    .systemInstruction(\n                        Content.builder()\n                            .parts(List.of(Part.fromText(conceptuallyModifiedText)))\n                            .build())\n                    .build())\n            .build();\n    System.out.printf(\n        \"Modified System Instruction %s\", llmRequest.config().get().systemInstruction());\n\n    // --- Skip Example ---\n    // Check if the last user message contains \"BLOCK\"\n    if (lastUserMessage.toUpperCase().contains(\"BLOCK\")) {\n      System.out.println(\"[Callback] 'BLOCK' keyword found. Skipping LLM call.\");\n      // Return an LlmResponse to skip the actual LLM call\n      return Maybe.just(\n          LlmResponse.builder()\n              .content(\n                  Content.builder()\n                      .role(\"model\")\n                      .parts(\n                          ImmutableList.of(\n                              Part.fromText(\"LLM call was blocked by before_model_callback.\")))\n                      .build())\n              .build());\n    }\n\n    // Return Empty response to allow the (modified) request to go to the LLM\n    System.out.println(\"[Callback] Proceeding with LLM call (using the original LlmRequest).\");\n    return Maybe.empty();\n  }\n\n  // --- 2. Define Agent and Run Scenarios ---\n  public void defineAgentAndRun() {\n    // Setup Agent with Callback\n    LlmAgent myLlmAgent =\n        LlmAgent.builder()\n            .name(AGENT_NAME)\n            .model(MODEL_NAME)\n            .instruction(AGENT_INSTRUCTION)\n            .description(AGENT_DESCRIPTION)\n            .beforeModelCallback(this::simpleBeforeModelModifier)\n            .build();\n\n    // Create an InMemoryRunner\n    InMemoryRunner runner = new InMemoryRunner(myLlmAgent, APP_NAME);\n    // InMemoryRunner automatically creates a session service. Create a session using the service\n    Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n    Content userMessage =\n        Content.fromParts(\n            Part.fromText(\"Tell me about quantum computing. This is a test. So BLOCK.\"));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre>"},{"location":"callbacks/types-of-callbacks.en/#after-model-callback","title":"After Model Callback","text":"<p>When: Called just after a response (<code>LlmResponse</code>) is received from the LLM, before it's processed further by the invoking agent.</p> <p>Purpose: Allows inspection or modification of the raw LLM response. Use cases include</p> <ul> <li>logging model outputs,</li> <li>reformatting responses,</li> <li>censoring sensitive information generated by the model,</li> <li>parsing structured data from the LLM response and storing it in <code>callback_context.state</code></li> <li>or handling specific error codes.</li> </ul> Code PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.runners import Runner\nfrom typing import Optional\nfrom google.genai import types \nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.models import LlmResponse\n\nGEMINI_2_FLASH=\"gemini-2.0-flash\"\n\n# --- Define the Callback Function ---\ndef simple_after_model_modifier(\n    callback_context: CallbackContext, llm_response: LlmResponse\n) -&gt; Optional[LlmResponse]:\n    \"\"\"Inspects/modifies the LLM response after it's received.\"\"\"\n    agent_name = callback_context.agent_name\n    print(f\"[Callback] After model call for agent: {agent_name}\")\n\n    # --- Inspection ---\n    original_text = \"\"\n    if llm_response.content and llm_response.content.parts:\n        # Assuming simple text response for this example\n        if llm_response.content.parts[0].text:\n            original_text = llm_response.content.parts[0].text\n            print(f\"[Callback] Inspected original response text: '{original_text[:100]}...'\") # Log snippet\n        elif llm_response.content.parts[0].function_call:\n             print(f\"[Callback] Inspected response: Contains function call '{llm_response.content.parts[0].function_call.name}'. No text modification.\")\n             return None # Don't modify tool calls in this example\n        else:\n             print(\"[Callback] Inspected response: No text content found.\")\n             return None\n    elif llm_response.error_message:\n        print(f\"[Callback] Inspected response: Contains error '{llm_response.error_message}'. No modification.\")\n        return None\n    else:\n        print(\"[Callback] Inspected response: Empty LlmResponse.\")\n        return None # Nothing to modify\n\n    # --- Modification Example ---\n    # Replace \"joke\" with \"funny story\" (case-insensitive)\n    search_term = \"joke\"\n    replace_term = \"funny story\"\n    if search_term in original_text.lower():\n        print(f\"[Callback] Found '{search_term}'. Modifying response.\")\n        modified_text = original_text.replace(search_term, replace_term)\n        modified_text = modified_text.replace(search_term.capitalize(), replace_term.capitalize()) # Handle capitalization\n\n        # Create a NEW LlmResponse with the modified content\n        # Deep copy parts to avoid modifying original if other callbacks exist\n        modified_parts = [copy.deepcopy(part) for part in llm_response.content.parts]\n        modified_parts[0].text = modified_text # Update the text in the copied part\n\n        new_response = LlmResponse(\n             content=types.Content(role=\"model\", parts=modified_parts),\n             # Copy other relevant fields if necessary, e.g., grounding_metadata\n             grounding_metadata=llm_response.grounding_metadata\n             )\n        print(f\"[Callback] Returning modified response.\")\n        return new_response # Return the modified response\n    else:\n        print(f\"[Callback] '{search_term}' not found. Passing original response through.\")\n        # Return None to use the original llm_response\n        return None\n\n\n# Create LlmAgent and Assign Callback\nmy_llm_agent = LlmAgent(\n        name=\"AfterModelCallbackAgent\",\n        model=GEMINI_2_FLASH,\n        instruction=\"You are a helpful assistant.\",\n        description=\"An LLM agent demonstrating after_model_callback\",\n        after_model_callback=simple_after_model_modifier # Assign the function here\n)\n\nAPP_NAME = \"guardrail_app\"\nUSER_ID = \"user_1\"\nSESSION_ID = \"session_001\"\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=my_llm_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n# Agent Interaction\nasync def call_agent_async(query):\n  session, runner = await setup_session_and_runner()\n\n  content = types.Content(role='user', parts=[types.Part(text=query)])\n  events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n  async for event in events:\n      if event.is_final_response():\n          final_response = event.content.parts[0].text\n          print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"\"\"write multiple time the word \"joke\" \"\"\")\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.CallbackContext;\nimport com.google.adk.events.Event;\nimport com.google.adk.models.LlmResponse;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.common.collect.ImmutableList;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport io.reactivex.rxjava3.core.Maybe;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class AfterModelCallbackExample {\n\n  // --- Define Constants ---\n  private static final String AGENT_NAME = \"AfterModelCallbackAgent\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n  private static final String AGENT_INSTRUCTION = \"You are a helpful assistant.\";\n  private static final String AGENT_DESCRIPTION = \"An LLM agent demonstrating after_model_callback\";\n\n  // For session and runner\n  private static final String APP_NAME = \"AfterModelCallbackAgentApp\";\n  private static final String USER_ID = \"user_1\";\n\n  // For text replacement\n  private static final String SEARCH_TERM = \"joke\";\n  private static final String REPLACE_TERM = \"funny story\";\n  private static final Pattern SEARCH_PATTERN =\n      Pattern.compile(\"\\\\b\" + Pattern.quote(SEARCH_TERM) + \"\\\\b\", Pattern.CASE_INSENSITIVE);\n\n  public static void main(String[] args) {\n    AfterModelCallbackExample example = new AfterModelCallbackExample();\n    example.defineAgentAndRun();\n  }\n\n  // --- Define the Callback Function ---\n  // Inspects/modifies the LLM response after it's received.\n  public Maybe&lt;LlmResponse&gt; simpleAfterModelModifier(\n      CallbackContext callbackContext, LlmResponse llmResponse) {\n    String agentName = callbackContext.agentName();\n    System.out.printf(\"%n[Callback] After model call for agent: %s%n\", agentName);\n\n    // --- Inspection Phase ---\n    if (llmResponse.errorMessage().isPresent()) {\n      System.out.printf(\n          \"[Callback] Response has error: '%s'. No modification.%n\",\n          llmResponse.errorMessage().get());\n      return Maybe.empty(); // Pass through errors\n    }\n\n    Optional&lt;Part&gt; firstTextPartOpt =\n        llmResponse\n            .content()\n            .flatMap(Content::parts)\n            .filter(parts -&gt; !parts.isEmpty() &amp;&amp; parts.get(0).text().isPresent())\n            .map(parts -&gt; parts.get(0));\n\n    if (!firstTextPartOpt.isPresent()) {\n      // Could be a function call, empty content, or no text in the first part\n      llmResponse\n          .content()\n          .flatMap(Content::parts)\n          .filter(parts -&gt; !parts.isEmpty() &amp;&amp; parts.get(0).functionCall().isPresent())\n          .ifPresent(\n              parts -&gt;\n                  System.out.printf(\n                      \"[Callback] Response is a function call ('%s'). No text modification.%n\",\n                      parts.get(0).functionCall().get().name().orElse(\"N/A\")));\n      if (!llmResponse.content().isPresent()\n          || !llmResponse.content().flatMap(Content::parts).isPresent()\n          || llmResponse.content().flatMap(Content::parts).get().isEmpty()) {\n        System.out.println(\n            \"[Callback] Response content is empty or has no parts. No modification.\");\n      } else if (!firstTextPartOpt.isPresent()) { // Already checked for function call\n        System.out.println(\"[Callback] First part has no text content. No modification.\");\n      }\n      return Maybe.empty(); // Pass through non-text or unsuitable responses\n    }\n\n    String originalText = firstTextPartOpt.get().text().get();\n    System.out.printf(\"[Callback] Inspected original text: '%.100s...'%n\", originalText);\n\n    // --- Modification Phase ---\n    Matcher matcher = SEARCH_PATTERN.matcher(originalText);\n    if (!matcher.find()) {\n      System.out.printf(\n          \"[Callback] '%s' not found. Passing original response through.%n\", SEARCH_TERM);\n      return Maybe.empty();\n    }\n\n    System.out.printf(\"[Callback] Found '%s'. Modifying response.%n\", SEARCH_TERM);\n\n    // Perform the replacement, respecting original capitalization of the found term's first letter\n    String foundTerm = matcher.group(0); // The actual term found (e.g., \"joke\" or \"Joke\")\n    String actualReplaceTerm = REPLACE_TERM;\n    if (Character.isUpperCase(foundTerm.charAt(0)) &amp;&amp; REPLACE_TERM.length() &gt; 0) {\n      actualReplaceTerm = Character.toUpperCase(REPLACE_TERM.charAt(0)) + REPLACE_TERM.substring(1);\n    }\n    String modifiedText = matcher.replaceFirst(Matcher.quoteReplacement(actualReplaceTerm));\n\n    // Create a new LlmResponse with the modified content\n    Content originalContent = llmResponse.content().get();\n    List&lt;Part&gt; originalParts = originalContent.parts().orElse(ImmutableList.of());\n\n    List&lt;Part&gt; modifiedPartsList = new ArrayList&lt;&gt;(originalParts.size());\n    if (!originalParts.isEmpty()) {\n      modifiedPartsList.add(Part.fromText(modifiedText)); // Replace first part's text\n      // Add remaining parts as they were (shallow copy)\n      for (int i = 1; i &lt; originalParts.size(); i++) {\n        modifiedPartsList.add(originalParts.get(i));\n      }\n    } else { // Should not happen if firstTextPartOpt was present\n      modifiedPartsList.add(Part.fromText(modifiedText));\n    }\n\n    LlmResponse.Builder newResponseBuilder =\n        LlmResponse.builder()\n            .content(\n                originalContent.toBuilder().parts(ImmutableList.copyOf(modifiedPartsList)).build())\n            .groundingMetadata(llmResponse.groundingMetadata());\n\n    System.out.println(\"[Callback] Returning modified response.\");\n    return Maybe.just(newResponseBuilder.build());\n  }\n\n  // --- 2. Define Agent and Run Scenarios ---\n  public void defineAgentAndRun() {\n    // Setup Agent with Callback\n    LlmAgent myLlmAgent =\n        LlmAgent.builder()\n            .name(AGENT_NAME)\n            .model(MODEL_NAME)\n            .instruction(AGENT_INSTRUCTION)\n            .description(AGENT_DESCRIPTION)\n            .afterModelCallback(this::simpleAfterModelModifier)\n            .build();\n\n    // Create an InMemoryRunner\n    InMemoryRunner runner = new InMemoryRunner(myLlmAgent, APP_NAME);\n    // InMemoryRunner automatically creates a session service. Create a session using the service\n    Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n    Content userMessage =\n        Content.fromParts(\n            Part.fromText(\n                \"Tell me a joke about quantum computing. Include the word 'joke' in your response\"));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre>"},{"location":"callbacks/types-of-callbacks.en/#tool-execution-callbacks","title":"Tool Execution Callbacks","text":"<p>These callbacks are also specific to <code>LlmAgent</code> and trigger around the execution of tools (including <code>FunctionTool</code>, <code>AgentTool</code>, etc.) that the LLM might request.</p>"},{"location":"callbacks/types-of-callbacks.en/#before-tool-callback","title":"Before Tool Callback","text":"<p>When: Called just before a specific tool's <code>run_async</code> method is invoked, after the LLM has generated a function call for it.</p> <p>Purpose: Allows inspection and modification of tool arguments, performing authorization checks before execution, logging tool usage attempts, or implementing tool-level caching.</p> <p>Return Value Effect:</p> <ol> <li>If the callback returns <code>None</code> (or a <code>Maybe.empty()</code> object in Java), the tool's <code>run_async</code> method is executed with the (potentially modified) <code>args</code>.  </li> <li>If a dictionary (or <code>Map</code> in Java) is returned, the tool's <code>run_async</code> method is skipped. The returned dictionary is used directly as the result of the tool call. This is useful for caching or overriding tool behavior.  </li> </ol> Code PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.runners import Runner\nfrom typing import Optional\nfrom google.genai import types \nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools import FunctionTool\nfrom google.adk.tools.tool_context import ToolContext\nfrom google.adk.tools.base_tool import BaseTool\nfrom typing import Dict, Any\n\n\nGEMINI_2_FLASH=\"gemini-2.0-flash\"\n\ndef get_capital_city(country: str) -&gt; str:\n    \"\"\"Retrieves the capital city of a given country.\"\"\"\n    print(f\"--- Tool 'get_capital_city' executing with country: {country} ---\")\n    country_capitals = {\n        \"united states\": \"Washington, D.C.\",\n        \"canada\": \"Ottawa\",\n        \"france\": \"Paris\",\n        \"germany\": \"Berlin\",\n    }\n    return country_capitals.get(country.lower(), f\"Capital not found for {country}\")\n\ncapital_tool = FunctionTool(func=get_capital_city)\n\ndef simple_before_tool_modifier(\n    tool: BaseTool, args: Dict[str, Any], tool_context: ToolContext\n) -&gt; Optional[Dict]:\n    \"\"\"Inspects/modifies tool args or skips the tool call.\"\"\"\n    agent_name = tool_context.agent_name\n    tool_name = tool.name\n    print(f\"[Callback] Before tool call for tool '{tool_name}' in agent '{agent_name}'\")\n    print(f\"[Callback] Original args: {args}\")\n\n    if tool_name == 'get_capital_city' and args.get('country', '').lower() == 'canada':\n        print(\"[Callback] Detected 'Canada'. Modifying args to 'France'.\")\n        args['country'] = 'France'\n        print(f\"[Callback] Modified args: {args}\")\n        return None\n\n    # If the tool is 'get_capital_city' and country is 'BLOCK'\n    if tool_name == 'get_capital_city' and args.get('country', '').upper() == 'BLOCK':\n        print(\"[Callback] Detected 'BLOCK'. Skipping tool execution.\")\n        return {\"result\": \"Tool execution was blocked by before_tool_callback.\"}\n\n    print(\"[Callback] Proceeding with original or previously modified args.\")\n    return None\n\nmy_llm_agent = LlmAgent(\n        name=\"ToolCallbackAgent\",\n        model=GEMINI_2_FLASH,\n        instruction=\"You are an agent that can find capital cities. Use the get_capital_city tool.\",\n        description=\"An LLM agent demonstrating before_tool_callback\",\n        tools=[capital_tool],\n        before_tool_callback=simple_before_tool_modifier\n)\n\nAPP_NAME = \"guardrail_app\"\nUSER_ID = \"user_1\"\nSESSION_ID = \"session_001\"\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=my_llm_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"Canada\")\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.InvocationContext;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.BaseTool;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.adk.tools.ToolContext;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport io.reactivex.rxjava3.core.Maybe;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class BeforeToolCallbackExample {\n\n  private static final String APP_NAME = \"ToolCallbackAgentApp\";\n  private static final String USER_ID = \"user_1\";\n  private static final String SESSION_ID = \"session_001\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n\n  public static void main(String[] args) {\n    BeforeToolCallbackExample example = new BeforeToolCallbackExample();\n    example.runAgent(\"capital of canada\");\n  }\n\n  // --- Define a Simple Tool Function ---\n  // The Schema is important for the callback \"args\" to correctly identify the input.\n  public static Map&lt;String, Object&gt; getCapitalCity(\n      @Schema(name = \"country\", description = \"The country to find the capital of.\")\n          String country) {\n    System.out.printf(\"--- Tool 'getCapitalCity' executing with country: %s ---%n\", country);\n    Map&lt;String, String&gt; countryCapitals = new HashMap&lt;&gt;();\n    countryCapitals.put(\"united states\", \"Washington, D.C.\");\n    countryCapitals.put(\"canada\", \"Ottawa\");\n    countryCapitals.put(\"france\", \"Paris\");\n    countryCapitals.put(\"germany\", \"Berlin\");\n\n    String capital =\n        countryCapitals.getOrDefault(country.toLowerCase(), \"Capital not found for \" + country);\n    // FunctionTool expects a Map&lt;String, Object&gt; as the return type for the method it wraps.\n    return ImmutableMap.of(\"capital\", capital);\n  }\n\n  // Define the Callback function\n  // The Tool callback provides all these parameters by default.\n  public Maybe&lt;Map&lt;String, Object&gt;&gt; simpleBeforeToolModifier(\n      InvocationContext invocationContext,\n      BaseTool tool,\n      Map&lt;String, Object&gt; args,\n      ToolContext toolContext) {\n\n    String agentName = invocationContext.agent().name();\n    String toolName = tool.name();\n    System.out.printf(\n        \"[Callback] Before tool call for tool '%s' in agent '%s'%n\", toolName, agentName);\n    System.out.printf(\"[Callback] Original args: %s%n\", args);\n\n    if (\"getCapitalCity\".equals(toolName)) {\n      String countryArg = (String) args.get(\"country\");\n      if (countryArg != null) {\n        if (\"canada\".equalsIgnoreCase(countryArg)) {\n          System.out.println(\"[Callback] Detected 'Canada'. Modifying args to 'France'.\");\n          args.put(\"country\", \"France\");\n          System.out.printf(\"[Callback] Modified args: %s%n\", args);\n          // Proceed with modified args\n          return Maybe.empty();\n        } else if (\"BLOCK\".equalsIgnoreCase(countryArg)) {\n          System.out.println(\"[Callback] Detected 'BLOCK'. Skipping tool execution.\");\n          // Return a map to skip the tool call and use this as the result\n          return Maybe.just(\n              ImmutableMap.of(\"result\", \"Tool execution was blocked by before_tool_callback.\"));\n        }\n      }\n    }\n\n    System.out.println(\"[Callback] Proceeding with original or previously modified args.\");\n    return Maybe.empty();\n  }\n\n  public void runAgent(String query) {\n    // --- Wrap the function into a Tool ---\n    FunctionTool capitalTool = FunctionTool.create(this.getClass(), \"getCapitalCity\");\n\n    // Create LlmAgent and Assign Callback\n    LlmAgent myLlmAgent =\n        LlmAgent.builder()\n            .name(APP_NAME)\n            .model(MODEL_NAME)\n            .instruction(\n                \"You are an agent that can find capital cities. Use the getCapitalCity tool.\")\n            .description(\"An LLM agent demonstrating before_tool_callback\")\n            .tools(capitalTool)\n            .beforeToolCallback(this::simpleBeforeToolModifier)\n            .build();\n\n    // Session and Runner\n    InMemoryRunner runner = new InMemoryRunner(myLlmAgent);\n    Session session =\n        runner.sessionService().createSession(APP_NAME, USER_ID, null, SESSION_ID).blockingGet();\n\n    Content userMessage = Content.fromParts(Part.fromText(query));\n\n    System.out.printf(\"%n--- Calling agent with query: \\\"%s\\\" ---%n\", query);\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre>"},{"location":"callbacks/types-of-callbacks.en/#after-tool-callback","title":"After Tool Callback","text":"<p>When: Called just after the tool's <code>run_async</code> method completes successfully.</p> <p>Purpose: Allows inspection and modification of the tool's result before it's sent back to the LLM (potentially after summarization). Useful for logging tool results, post-processing or formatting results, or saving specific parts of the result to the session state.</p> <p>Return Value Effect:</p> <ol> <li>If the callback returns <code>None</code> (or a <code>Maybe.empty()</code> object in Java), the original <code>tool_response</code> is used.  </li> <li>If a new dictionary is returned, it replaces the original <code>tool_response</code>. This allows modifying or filtering the result seen by the LLM.</li> </ol> Code PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.runners import Runner\nfrom typing import Optional\nfrom google.genai import types \nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools import FunctionTool\nfrom google.adk.tools.tool_context import ToolContext\nfrom google.adk.tools.base_tool import BaseTool\nfrom typing import Dict, Any\nfrom copy import deepcopy\n\nGEMINI_2_FLASH=\"gemini-2.0-flash\"\n\n# --- Define a Simple Tool Function (Same as before) ---\ndef get_capital_city(country: str) -&gt; str:\n    \"\"\"Retrieves the capital city of a given country.\"\"\"\n    print(f\"--- Tool 'get_capital_city' executing with country: {country} ---\")\n    country_capitals = {\n        \"united states\": \"Washington, D.C.\",\n        \"canada\": \"Ottawa\",\n        \"france\": \"Paris\",\n        \"germany\": \"Berlin\",\n    }\n    return {\"result\": country_capitals.get(country.lower(), f\"Capital not found for {country}\")}\n\n# --- Wrap the function into a Tool ---\ncapital_tool = FunctionTool(func=get_capital_city)\n\n# --- Define the Callback Function ---\ndef simple_after_tool_modifier(\n    tool: BaseTool, args: Dict[str, Any], tool_context: ToolContext, tool_response: Dict\n) -&gt; Optional[Dict]:\n    \"\"\"Inspects/modifies the tool result after execution.\"\"\"\n    agent_name = tool_context.agent_name\n    tool_name = tool.name\n    print(f\"[Callback] After tool call for tool '{tool_name}' in agent '{agent_name}'\")\n    print(f\"[Callback] Args used: {args}\")\n    print(f\"[Callback] Original tool_response: {tool_response}\")\n\n    # Default structure for function tool results is {\"result\": &lt;return_value&gt;}\n    original_result_value = tool_response.get(\"result\", \"\")\n    # original_result_value = tool_response\n\n    # --- Modification Example ---\n    # If the tool was 'get_capital_city' and result is 'Washington, D.C.'\n    if tool_name == 'get_capital_city' and original_result_value == \"Washington, D.C.\":\n        print(\"[Callback] Detected 'Washington, D.C.'. Modifying tool response.\")\n\n        # IMPORTANT: Create a new dictionary or modify a copy\n        modified_response = deepcopy(tool_response)\n        modified_response[\"result\"] = f\"{original_result_value} (Note: This is the capital of the USA).\"\n        modified_response[\"note_added_by_callback\"] = True # Add extra info if needed\n\n        print(f\"[Callback] Modified tool_response: {modified_response}\")\n        return modified_response # Return the modified dictionary\n\n    print(\"[Callback] Passing original tool response through.\")\n    # Return None to use the original tool_response\n    return None\n\n\n# Create LlmAgent and Assign Callback\nmy_llm_agent = LlmAgent(\n        name=\"AfterToolCallbackAgent\",\n        model=GEMINI_2_FLASH,\n        instruction=\"You are an agent that finds capital cities using the get_capital_city tool. Report the result clearly.\",\n        description=\"An LLM agent demonstrating after_tool_callback\",\n        tools=[capital_tool], # Add the tool\n        after_tool_callback=simple_after_tool_modifier # Assign the callback\n    )\n\nAPP_NAME = \"guardrail_app\"\nUSER_ID = \"user_1\"\nSESSION_ID = \"session_001\"\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=my_llm_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"united states\")\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.InvocationContext;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.BaseTool;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.adk.tools.ToolContext;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport io.reactivex.rxjava3.core.Maybe;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class AfterToolCallbackExample {\n\n  private static final String APP_NAME = \"AfterToolCallbackAgentApp\";\n  private static final String USER_ID = \"user_1\";\n  private static final String SESSION_ID = \"session_001\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n\n  public static void main(String[] args) {\n    AfterToolCallbackExample example = new AfterToolCallbackExample();\n    example.runAgent(\"What is the capital of the United States?\");\n  }\n\n  // --- Define a Simple Tool Function (Same as before) ---\n  @Schema(description = \"Retrieves the capital city of a given country.\")\n  public static Map&lt;String, Object&gt; getCapitalCity(\n      @Schema(description = \"The country to find the capital of.\") String country) {\n    System.out.printf(\"--- Tool 'getCapitalCity' executing with country: %s ---%n\", country);\n    Map&lt;String, String&gt; countryCapitals = new HashMap&lt;&gt;();\n    countryCapitals.put(\"united states\", \"Washington, D.C.\");\n    countryCapitals.put(\"canada\", \"Ottawa\");\n    countryCapitals.put(\"france\", \"Paris\");\n    countryCapitals.put(\"germany\", \"Berlin\");\n\n    String capital =\n        countryCapitals.getOrDefault(country.toLowerCase(), \"Capital not found for \" + country);\n    return ImmutableMap.of(\"result\", capital);\n  }\n\n  // Define the Callback function.\n  public Maybe&lt;Map&lt;String, Object&gt;&gt; simpleAfterToolModifier(\n      InvocationContext invocationContext,\n      BaseTool tool,\n      Map&lt;String, Object&gt; args,\n      ToolContext toolContext,\n      Object toolResponse) {\n\n    // Inspects/modifies the tool result after execution.\n    String agentName = invocationContext.agent().name();\n    String toolName = tool.name();\n    System.out.printf(\n        \"[Callback] After tool call for tool '%s' in agent '%s'%n\", toolName, agentName);\n    System.out.printf(\"[Callback] Args used: %s%n\", args);\n    System.out.printf(\"[Callback] Original tool_response: %s%n\", toolResponse);\n\n    if (!(toolResponse instanceof Map)) {\n      System.out.println(\"[Callback] toolResponse is not a Map, cannot process further.\");\n      // Pass through if not a map\n      return Maybe.empty();\n    }\n\n    // Default structure for function tool results is {\"result\": &lt;return_value&gt;}\n    @SuppressWarnings(\"unchecked\")\n    Map&lt;String, Object&gt; responseMap = (Map&lt;String, Object&gt;) toolResponse;\n    Object originalResultValue = responseMap.get(\"result\");\n\n    // --- Modification Example ---\n    // If the tool was 'get_capital_city' and result is 'Washington, D.C.'\n    if (\"getCapitalCity\".equals(toolName) &amp;&amp; \"Washington, D.C.\".equals(originalResultValue)) {\n      System.out.println(\"[Callback] Detected 'Washington, D.C.'. Modifying tool response.\");\n\n      // IMPORTANT: Create a new mutable map or modify a copy\n      Map&lt;String, Object&gt; modifiedResponse = new HashMap&lt;&gt;(responseMap);\n      modifiedResponse.put(\n          \"result\", originalResultValue + \" (Note: This is the capital of the USA).\");\n      modifiedResponse.put(\"note_added_by_callback\", true); // Add extra info if needed\n\n      System.out.printf(\"[Callback] Modified tool_response: %s%n\", modifiedResponse);\n      return Maybe.just(modifiedResponse);\n    }\n\n    System.out.println(\"[Callback] Passing original tool response through.\");\n    // Return Maybe.empty() to use the original tool_response\n    return Maybe.empty();\n  }\n\n  public void runAgent(String query) {\n    // --- Wrap the function into a Tool ---\n    FunctionTool capitalTool = FunctionTool.create(this.getClass(), \"getCapitalCity\");\n\n    // Create LlmAgent and Assign Callback\n    LlmAgent myLlmAgent =\n        LlmAgent.builder()\n            .name(APP_NAME)\n            .model(MODEL_NAME)\n            .instruction(\n                \"You are an agent that finds capital cities using the getCapitalCity tool. Report\"\n                    + \" the result clearly.\")\n            .description(\"An LLM agent demonstrating after_tool_callback\")\n            .tools(capitalTool) // Add the tool\n            .afterToolCallback(this::simpleAfterToolModifier) // Assign the callback\n            .build();\n\n    InMemoryRunner runner = new InMemoryRunner(myLlmAgent);\n\n    // Session and Runner\n    Session session =\n        runner.sessionService().createSession(APP_NAME, USER_ID, null, SESSION_ID).blockingGet();\n\n    Content userMessage = Content.fromParts(Part.fromText(query));\n\n    System.out.printf(\"%n--- Calling agent with query: \\\"%s\\\" ---%n\", query);\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre>"},{"location":"callbacks/types-of-callbacks/","title":"Callbacks \u7684\u985e\u578b","text":"<p>\u6b64\u6846\u67b6\u63d0\u4f9b\u591a\u7a2e\u4e0d\u540c\u985e\u578b\u7684 Callbacks\uff0c\u6703\u5728 agent \u57f7\u884c\u904e\u7a0b\u4e2d\u7684\u5404\u500b\u968e\u6bb5\u88ab\u89f8\u767c\u3002\u4e86\u89e3\u6bcf\u7a2e Callback \u89f8\u767c\u7684\u6642\u6a5f\u4ee5\u53ca\u5b83\u6240\u63a5\u6536\u7684 context\uff0c\u5c0d\u65bc\u6709\u6548\u904b\u7528\u5b83\u5011\u81f3\u95dc\u91cd\u8981\u3002</p>"},{"location":"callbacks/types-of-callbacks/#agent-callbacks","title":"Agent \u751f\u547d\u9031\u671f Callbacks","text":"<p>\u9019\u4e9b Callbacks \u53ef\u7528\u65bc\u4efb\u4f55\u7e7c\u627f\u81ea <code>BaseAgent</code> \u7684 agent\uff08\u5305\u62ec <code>LlmAgent</code>\u3001<code>SequentialAgent</code>\u3001<code>ParallelAgent</code>\u3001<code>LoopAgent</code> \u7b49\uff09\u3002</p> <p>Note</p> <p>\u5177\u9ad4\u7684\u65b9\u6cd5\u540d\u7a31\u6216\u56de\u50b3\u578b\u5225\u53ef\u80fd\u6703\u4f9d\u4e0d\u540c SDK \u8a9e\u8a00\u7565\u6709\u5dee\u7570\uff08\u4f8b\u5982\uff1a\u5728 Python \u4e2d\u56de\u50b3 <code>None</code>\uff0c\u5728 Java \u4e2d\u56de\u50b3 <code>Optional.empty()</code> \u6216 <code>Maybe.empty()</code>\uff09\u3002\u8a73\u7d30\u8cc7\u8a0a\u8acb\u53c3\u95b1\u5404\u8a9e\u8a00\u7684 API \u6587\u4ef6\u8aaa\u660e\u3002</p>"},{"location":"callbacks/types-of-callbacks/#before-agent-callback","title":"Before Agent Callback","text":"<p>\u6642\u6a5f\uff1a \u5728 agent \u7684 <code>_run_async_impl</code>\uff08\u6216 <code>_run_live_impl</code>\uff09\u65b9\u6cd5\u57f7\u884c\u4e4b\u524d\u7acb\u5373\u547c\u53eb\u3002\u6b64 Callback \u6703\u5728 agent \u7684 <code>InvocationContext</code> \u5efa\u7acb\u4e4b\u5f8c\u3001\u4f46\u5728\u5176\u6838\u5fc3\u908f\u8f2f\u958b\u59cb\u4e4b\u524d\u57f7\u884c\u3002</p> <p>\u7528\u9014\uff1a \u9069\u5408\u7528\u65bc\u8a2d\u5b9a\u50c5\u6b64\u7279\u5b9a agent \u57f7\u884c\u6642\u6240\u9700\u7684\u8cc7\u6e90\u6216\u72c0\u614b\uff0c\u5728\u57f7\u884c\u958b\u59cb\u524d\u5c0d session state\uff08callback_context.state\uff09\u9032\u884c\u9a57\u8b49\u6aa2\u67e5\u3001\u8a18\u9304 agent \u6d3b\u52d5\u7684\u9032\u5165\u9ede\uff0c\u6216\u5728\u6838\u5fc3\u908f\u8f2f\u4f7f\u7528\u524d\uff0c\u5c0d\u547c\u53eb\u4e0a\u4e0b\u6587\u9032\u884c\u5fc5\u8981\u7684\u4fee\u6539\u3002</p> Code PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# # --- Setup Instructions ---\n# # 1. Install the ADK package:\n# !pip install google-adk\n# # Make sure to restart kernel if using colab/jupyter notebooks\n\n# # 2. Set up your Gemini API Key:\n# #    - Get a key from Google AI Studio: https://aistudio.google.com/app/apikey\n# #    - Set it as an environment variable:\n# import os\n# os.environ[\"GOOGLE_API_KEY\"] = \"YOUR_API_KEY_HERE\" # &lt;--- REPLACE with your actual key\n# # Or learn about other authentication methods (like Vertex AI):\n# # https://google.github.io/adk-docs/agents/models/\n\n# ADK Imports\nfrom google.adk.agents import LlmAgent\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.runners import InMemoryRunner # Use InMemoryRunner\nfrom google.genai import types # For types.Content\nfrom typing import Optional\n\n# Define the model - Use the specific model name requested\nGEMINI_2_FLASH=\"gemini-2.0-flash\"\n\n# --- 1. Define the Callback Function ---\ndef check_if_agent_should_run(callback_context: CallbackContext) -&gt; Optional[types.Content]:\n    \"\"\"\n    Logs entry and checks 'skip_llm_agent' in session state.\n    If True, returns Content to skip the agent's execution.\n    If False or not present, returns None to allow execution.\n    \"\"\"\n    agent_name = callback_context.agent_name\n    invocation_id = callback_context.invocation_id\n    current_state = callback_context.state.to_dict()\n\n    print(f\"\\n[Callback] Entering agent: {agent_name} (Inv: {invocation_id})\")\n    print(f\"[Callback] Current State: {current_state}\")\n\n    # Check the condition in session state dictionary\n    if current_state.get(\"skip_llm_agent\", False):\n        print(f\"[Callback] State condition 'skip_llm_agent=True' met: Skipping agent {agent_name}.\")\n        # Return Content to skip the agent's run\n        return types.Content(\n            parts=[types.Part(text=f\"Agent {agent_name} skipped by before_agent_callback due to state.\")],\n            role=\"model\" # Assign model role to the overriding response\n        )\n    else:\n        print(f\"[Callback] State condition not met: Proceeding with agent {agent_name}.\")\n        # Return None to allow the LlmAgent's normal execution\n        return None\n\n# --- 2. Setup Agent with Callback ---\nllm_agent_with_before_cb = LlmAgent(\n    name=\"MyControlledAgent\",\n    model=GEMINI_2_FLASH,\n    instruction=\"You are a concise assistant.\",\n    description=\"An LLM agent demonstrating stateful before_agent_callback\",\n    before_agent_callback=check_if_agent_should_run # Assign the callback\n)\n\n# --- 3. Setup Runner and Sessions using InMemoryRunner ---\nasync def main():\n    app_name = \"before_agent_demo\"\n    user_id = \"test_user\"\n    session_id_run = \"session_will_run\"\n    session_id_skip = \"session_will_skip\"\n\n    # Use InMemoryRunner - it includes InMemorySessionService\n    runner = InMemoryRunner(agent=llm_agent_with_before_cb, app_name=app_name)\n    # Get the bundled session service to create sessions\n    session_service = runner.session_service\n\n    # Create session 1: Agent will run (default empty state)\n    session_service.create_session(\n        app_name=app_name,\n        user_id=user_id,\n        session_id=session_id_run\n        # No initial state means 'skip_llm_agent' will be False in the callback check\n    )\n\n    # Create session 2: Agent will be skipped (state has skip_llm_agent=True)\n    session_service.create_session(\n        app_name=app_name,\n        user_id=user_id,\n        session_id=session_id_skip,\n        state={\"skip_llm_agent\": True} # Set the state flag here\n    )\n\n    # --- Scenario 1: Run where callback allows agent execution ---\n    print(\"\\n\" + \"=\"*20 + f\" SCENARIO 1: Running Agent on Session '{session_id_run}' (Should Proceed) \" + \"=\"*20)\n    async for event in runner.run_async(\n        user_id=user_id,\n        session_id=session_id_run,\n        new_message=types.Content(role=\"user\", parts=[types.Part(text=\"Hello, please respond.\")])\n    ):\n        # Print final output (either from LLM or callback override)\n        if event.is_final_response() and event.content:\n            print(f\"Final Output: [{event.author}] {event.content.parts[0].text.strip()}\")\n        elif event.is_error():\n             print(f\"Error Event: {event.error_details}\")\n\n    # --- Scenario 2: Run where callback intercepts and skips agent ---\n    print(\"\\n\" + \"=\"*20 + f\" SCENARIO 2: Running Agent on Session '{session_id_skip}' (Should Skip) \" + \"=\"*20)\n    async for event in runner.run_async(\n        user_id=user_id,\n        session_id=session_id_skip,\n        new_message=types.Content(role=\"user\", parts=[types.Part(text=\"This message won't reach the LLM.\")])\n    ):\n         # Print final output (either from LLM or callback override)\n         if event.is_final_response() and event.content:\n            print(f\"Final Output: [{event.author}] {event.content.parts[0].text.strip()}\")\n         elif event.is_error():\n             print(f\"Error Event: {event.error_details}\")\n\n# --- 4. Execute ---\n# In a Python script:\n# import asyncio\n# if __name__ == \"__main__\":\n#     # Make sure GOOGLE_API_KEY environment variable is set if not using Vertex AI auth\n#     # Or ensure Application Default Credentials (ADC) are configured for Vertex AI\n#     asyncio.run(main())\n\n# In a Jupyter Notebook or similar environment:\nawait main()\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.CallbackContext;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.sessions.State;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport io.reactivex.rxjava3.core.Maybe;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class BeforeAgentCallbackExample {\n\n  private static final String APP_NAME = \"AgentWithBeforeAgentCallback\";\n  private static final String USER_ID = \"test_user_456\";\n  private static final String SESSION_ID = \"session_id_123\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n\n  public static void main(String[] args) {\n    BeforeAgentCallbackExample callbackAgent = new BeforeAgentCallbackExample();\n    callbackAgent.defineAgent(\"Write a document about a cat\");\n  }\n\n  // --- 1. Define the Callback Function ---\n  /**\n   * Logs entry and checks 'skip_llm_agent' in session state. If True, returns Content to skip the\n   * agent's execution. If False or not present, returns None to allow execution.\n   */\n  public Maybe&lt;Content&gt; checkIfAgentShouldRun(CallbackContext callbackContext) {\n    String agentName = callbackContext.agentName();\n    String invocationId = callbackContext.invocationId();\n    State currentState = callbackContext.state();\n\n    System.out.printf(\"%n[Callback] Entering agent: %s (Inv: %s)%n\", agentName, invocationId);\n    System.out.printf(\"[Callback] Current State: %s%n\", currentState.entrySet());\n\n    // Check the condition in session state dictionary\n    if (Boolean.TRUE.equals(currentState.get(\"skip_llm_agent\"))) {\n      System.out.printf(\n          \"[Callback] State condition 'skip_llm_agent=True' met: Skipping agent %s\", agentName);\n      // Return Content to skip the agent's run\n      return Maybe.just(\n          Content.fromParts(\n              Part.fromText(\n                  String.format(\n                      \"Agent %s skipped by before_agent_callback due to state.\", agentName))));\n    }\n\n    System.out.printf(\n        \"[Callback] State condition 'skip_llm_agent=True' NOT met: Running agent %s \\n\", agentName);\n    // Return empty response to allow the LlmAgent's normal execution\n    return Maybe.empty();\n  }\n\n  public void defineAgent(String prompt) {\n    // --- 2. Setup Agent with Callback ---\n    BaseAgent llmAgentWithBeforeCallback =\n        LlmAgent.builder()\n            .model(MODEL_NAME)\n            .name(APP_NAME)\n            .instruction(\"You are a concise assistant.\")\n            .description(\"An LLM agent demonstrating stateful before_agent_callback\")\n            // You can also use a sync version of this callback \"beforeAgentCallbackSync\"\n            .beforeAgentCallback(this::checkIfAgentShouldRun)\n            .build();\n\n    // --- 3. Setup Runner and Sessions using InMemoryRunner ---\n\n    // Use InMemoryRunner - it includes InMemorySessionService\n    InMemoryRunner runner = new InMemoryRunner(llmAgentWithBeforeCallback, APP_NAME);\n    // Scenario 1: Initial state is null, which means 'skip_llm_agent' will be false in the callback\n    // check\n    runAgent(runner, null, prompt);\n    // Scenario 2: Agent will be skipped (state has skip_llm_agent=true)\n    runAgent(runner, new ConcurrentHashMap&lt;&gt;(Map.of(\"skip_llm_agent\", true)), prompt);\n  }\n\n  public void runAgent(InMemoryRunner runner, ConcurrentHashMap&lt;String, Object&gt; initialState, String prompt) {\n    // InMemoryRunner automatically creates a session service. Create a session using the service.\n    Session session =\n        runner\n            .sessionService()\n            .createSession(APP_NAME, USER_ID, initialState, SESSION_ID)\n            .blockingGet();\n    Content userMessage = Content.fromParts(Part.fromText(prompt));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Print final output (either from LLM or callback override)\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre> <p>\u95dc\u65bc <code>before_agent_callback</code> \u7bc4\u4f8b\u7684\u8aaa\u660e\uff1a</p> <ul> <li>\u5c55\u793a\u5167\u5bb9\uff1a \u6b64\u7bc4\u4f8b\u5c55\u793a\u4e86<code>before_agent_callback</code>\u3002\u9019\u500b Callback \u6703\u5728 agent \u7684\u4e3b\u8981\u8655\u7406\u908f\u8f2f\u958b\u59cb\u57f7\u884c\u524d\uff08\u91dd\u5c0d\u6bcf\u500b\u8acb\u6c42\uff09\u7acb\u5373\u88ab\u547c\u53eb\u3002</li> <li>\u904b\u4f5c\u65b9\u5f0f\uff1a Callback \u51fd\u5f0f\uff08<code>check_if_agent_should_run</code>\uff09\u6703\u6aa2\u67e5 session state \u4e2d\u7684\u4e00\u500b\u65d7\u6a19\uff08<code>skip_llm_agent</code>\uff09\u3002<ul> <li>\u82e5\u8a72\u65d7\u6a19\u70ba <code>True</code>\uff0c\u5247 Callback \u6703\u56de\u50b3\u4e00\u500b <code>types.Content</code> \u7269\u4ef6\u3002\u9019\u6703\u544a\u8a34 Agent Development Kit (ADK) \u6846\u67b6\u5b8c\u5168\u7565\u904e agent \u7684\u4e3b\u8981\u57f7\u884c\uff0c\u4e26\u5c07 Callback \u56de\u50b3\u7684\u5167\u5bb9\u4f5c\u70ba\u6700\u7d42\u56de\u61c9\u3002</li> <li>\u82e5\u8a72\u65d7\u6a19\u70ba <code>False</code>\uff08\u6216\u672a\u8a2d\u5b9a\uff09\uff0c\u5247 Callback \u6703\u56de\u50b3 <code>None</code> \u6216\u7a7a\u7269\u4ef6\u3002\u9019\u6703\u544a\u8a34 Agent Development Kit (ADK) \u6846\u67b6\u7e7c\u7e8c\u57f7\u884c agent \u7684\u6b63\u5e38\u6d41\u7a0b\uff08\u5728\u6b64\u6848\u4f8b\u4e2d\u5373\u547c\u53eb\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\uff09\u3002</li> </ul> </li> <li>\u9810\u671f\u7d50\u679c\uff1a \u4f60\u6703\u770b\u5230\u5169\u7a2e\u60c5\u5883\uff1a<ol> <li>\u5728 \u6709 <code>skip_llm_agent: True</code> state \u7684 session \u4e2d\uff0cagent \u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb\u6703\u88ab\u7565\u904e\uff0c\u8f38\u51fa\u6703\u76f4\u63a5\u4f86\u81ea Callback\uff08\u4f8b\u5982 \"Agent... skipped...\"\uff09\u3002</li> <li>\u5728 \u6c92\u6709 \u8a72 state \u65d7\u6a19\u7684 session \u4e2d\uff0cCallback \u5141\u8a31 agent \u57f7\u884c\uff0c\u4f60\u6703\u770b\u5230\u4f86\u81ea\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7684\u5be6\u969b\u56de\u61c9\uff08\u4f8b\u5982 \"Hello!\"\uff09\u3002</li> </ol> </li> <li>\u7406\u89e3 Callbacks\uff1a \u9019\u51f8\u986f\u4e86<code>before_</code> Callback \u4f5c\u70ba\u5b88\u9580\u54e1\u7684\u89d2\u8272\uff0c\u8b93\u4f60\u80fd\u5728\u4e3b\u8981\u6b65\u9a5f\u4e4b\u524d\u6514\u622a\u57f7\u884c\u6d41\u7a0b\uff0c\u4e26\u6839\u64da\u6aa2\u67e5\u7d50\u679c\uff08\u5982 state\u3001\u8f38\u5165\u9a57\u8b49\u3001\u6b0a\u9650\u7b49\uff09\u6c7a\u5b9a\u662f\u5426\u963b\u6b62\u5f8c\u7e8c\u57f7\u884c\u3002</li> </ul>"},{"location":"callbacks/types-of-callbacks/#after-agent-callback","title":"After Agent Callback","text":"<p>\u6642\u6a5f\uff1a \u7576 agent \u7684 <code>_run_async_impl</code>\uff08\u6216 <code>_run_live_impl</code>\uff09\u65b9\u6cd5\u6210\u529f\u5b8c\u6210\u5f8c\u7acb\u5373\u88ab\u547c\u53eb\u3002\u5982\u679c\u56e0\u70ba <code>before_agent_callback</code> \u56de\u50b3\u5167\u5bb9\u800c\u7565\u904e agent\uff0c\u6216\u5728 agent \u57f7\u884c\u671f\u9593\u8a2d\u7f6e\u4e86 <code>end_invocation</code>\uff0c\u5247\u4e0d\u6703\u57f7\u884c\u6b64 Callback\u3002</p> <p>\u7528\u9014\uff1a \u9069\u5408\u7528\u65bc\u6e05\u7406\u5de5\u4f5c\u3001\u57f7\u884c\u5f8c\u9a57\u8b49\u3001\u8a18\u9304 agent \u6d3b\u52d5\u5b8c\u6210\u3001\u4fee\u6539\u6700\u7d42 state\uff0c\u6216\u589e\u5f37\uff0f\u53d6\u4ee3 agent \u7684\u6700\u7d42\u8f38\u51fa\u3002</p> \u7a0b\u5f0f\u78bc PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# # --- Setup Instructions ---\n# # 1. Install the ADK package:\n# !pip install google-adk\n# # Make sure to restart kernel if using colab/jupyter notebooks\n\n# # 2. Set up your Gemini API Key:\n# #    - Get a key from Google AI Studio: https://aistudio.google.com/app/apikey\n# #    - Set it as an environment variable:\n# import os\n# os.environ[\"GOOGLE_API_KEY\"] = \"YOUR_API_KEY_HERE\" # &lt;--- REPLACE with your actual key\n# # Or learn about other authentication methods (like Vertex AI):\n# # https://google.github.io/adk-docs/agents/models/\n\n\n# ADK Imports\nfrom google.adk.agents import LlmAgent\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.runners import InMemoryRunner # Use InMemoryRunner\nfrom google.genai import types # For types.Content\nfrom typing import Optional\n\n# Define the model - Use the specific model name requested\nGEMINI_2_FLASH=\"gemini-2.0-flash\"\n\n# --- 1. Define the Callback Function ---\ndef modify_output_after_agent(callback_context: CallbackContext) -&gt; Optional[types.Content]:\n    \"\"\"\n    Logs exit from an agent and checks 'add_concluding_note' in session state.\n    If True, returns new Content to *replace* the agent's original output.\n    If False or not present, returns None, allowing the agent's original output to be used.\n    \"\"\"\n    agent_name = callback_context.agent_name\n    invocation_id = callback_context.invocation_id\n    current_state = callback_context.state.to_dict()\n\n    print(f\"\\n[Callback] Exiting agent: {agent_name} (Inv: {invocation_id})\")\n    print(f\"[Callback] Current State: {current_state}\")\n\n    # Example: Check state to decide whether to modify the final output\n    if current_state.get(\"add_concluding_note\", False):\n        print(f\"[Callback] State condition 'add_concluding_note=True' met: Replacing agent {agent_name}'s output.\")\n        # Return Content to *replace* the agent's own output\n        return types.Content(\n            parts=[types.Part(text=f\"Concluding note added by after_agent_callback, replacing original output.\")],\n            role=\"model\" # Assign model role to the overriding response\n        )\n    else:\n        print(f\"[Callback] State condition not met: Using agent {agent_name}'s original output.\")\n        # Return None - the agent's output produced just before this callback will be used.\n        return None\n\n# --- 2. Setup Agent with Callback ---\nllm_agent_with_after_cb = LlmAgent(\n    name=\"MySimpleAgentWithAfter\",\n    model=GEMINI_2_FLASH,\n    instruction=\"You are a simple agent. Just say 'Processing complete!'\",\n    description=\"An LLM agent demonstrating after_agent_callback for output modification\",\n    after_agent_callback=modify_output_after_agent # Assign the callback here\n)\n\n# --- 3. Setup Runner and Sessions using InMemoryRunner ---\nasync def main():\n    app_name = \"after_agent_demo\"\n    user_id = \"test_user_after\"\n    session_id_normal = \"session_run_normally\"\n    session_id_modify = \"session_modify_output\"\n\n    # Use InMemoryRunner - it includes InMemorySessionService\n    runner = InMemoryRunner(agent=llm_agent_with_after_cb, app_name=app_name)\n    # Get the bundled session service to create sessions\n    session_service = runner.session_service\n\n    # Create session 1: Agent output will be used as is (default empty state)\n    session_service.create_session(\n        app_name=app_name,\n        user_id=user_id,\n        session_id=session_id_normal\n        # No initial state means 'add_concluding_note' will be False in the callback check\n    )\n    # print(f\"Session '{session_id_normal}' created with default state.\")\n\n    # Create session 2: Agent output will be replaced by the callback\n    session_service.create_session(\n        app_name=app_name,\n        user_id=user_id,\n        session_id=session_id_modify,\n        state={\"add_concluding_note\": True} # Set the state flag here\n    )\n    # print(f\"Session '{session_id_modify}' created with state={{'add_concluding_note': True}}.\")\n\n\n    # --- Scenario 1: Run where callback allows agent's original output ---\n    print(\"\\n\" + \"=\"*20 + f\" SCENARIO 1: Running Agent on Session '{session_id_normal}' (Should Use Original Output) \" + \"=\"*20)\n    async for event in runner.run_async(\n        user_id=user_id,\n        session_id=session_id_normal,\n        new_message=types.Content(role=\"user\", parts=[types.Part(text=\"Process this please.\")])\n    ):\n        # Print final output (either from LLM or callback override)\n        if event.is_final_response() and event.content:\n            print(f\"Final Output: [{event.author}] {event.content.parts[0].text.strip()}\")\n        elif event.is_error():\n             print(f\"Error Event: {event.error_details}\")\n\n    # --- Scenario 2: Run where callback replaces the agent's output ---\n    print(\"\\n\" + \"=\"*20 + f\" SCENARIO 2: Running Agent on Session '{session_id_modify}' (Should Replace Output) \" + \"=\"*20)\n    async for event in runner.run_async(\n        user_id=user_id,\n        session_id=session_id_modify,\n        new_message=types.Content(role=\"user\", parts=[types.Part(text=\"Process this and add note.\")])\n    ):\n         # Print final output (either from LLM or callback override)\n         if event.is_final_response() and event.content:\n            print(f\"Final Output: [{event.author}] {event.content.parts[0].text.strip()}\")\n         elif event.is_error():\n             print(f\"Error Event: {event.error_details}\")\n\n# --- 4. Execute ---\n# In a Python script:\n# import asyncio\n# if __name__ == \"__main__\":\n#     # Make sure GOOGLE_API_KEY environment variable is set if not using Vertex AI auth\n#     # Or ensure Application Default Credentials (ADC) are configured for Vertex AI\n#     asyncio.run(main())\n\n# In a Jupyter Notebook or similar environment:\nawait main()\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.CallbackContext;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.State;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport io.reactivex.rxjava3.core.Maybe;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class AfterAgentCallbackExample {\n\n  // --- Constants ---\n  private static final String APP_NAME = \"after_agent_demo\";\n  private static final String USER_ID = \"test_user_after\";\n  private static final String SESSION_ID_NORMAL = \"session_run_normally\";\n  private static final String SESSION_ID_MODIFY = \"session_modify_output\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n\n  public static void main(String[] args) {\n    AfterAgentCallbackExample demo = new AfterAgentCallbackExample();\n    demo.defineAgentAndRunScenarios();\n  }\n\n  // --- 1. Define the Callback Function ---\n  /**\n   * Log exit from an agent and checks 'add_concluding_note' in session state. If True, returns new\n   * Content to *replace* the agent's original output. If False or not present, returns\n   * Maybe.empty(), allowing the agent's original output to be used.\n   */\n  public Maybe&lt;Content&gt; modifyOutputAfterAgent(CallbackContext callbackContext) {\n    String agentName = callbackContext.agentName();\n    String invocationId = callbackContext.invocationId();\n    State currentState = callbackContext.state();\n\n    System.out.printf(\"%n[Callback] Exiting agent: %s (Inv: %s)%n\", agentName, invocationId);\n    System.out.printf(\"[Callback] Current State: %s%n\", currentState.entrySet());\n\n    Object addNoteFlag = currentState.get(\"add_concluding_note\");\n\n    // Example: Check state to decide whether to modify the final output\n    if (Boolean.TRUE.equals(addNoteFlag)) {\n      System.out.printf(\n          \"[Callback] State condition 'add_concluding_note=True' met: Replacing agent %s's\"\n              + \" output.%n\",\n          agentName);\n\n      // Return Content to *replace* the agent's own output\n      return Maybe.just(\n          Content.builder()\n              .parts(\n                  List.of(\n                      Part.fromText(\n                          \"Concluding note added by after_agent_callback, replacing original output.\")))\n              .role(\"model\") // Assign model role to the overriding response\n              .build());\n\n    } else {\n      System.out.printf(\n          \"[Callback] State condition not met: Using agent %s's original output.%n\", agentName);\n      // Return None - the agent's output produced just before this callback will be used.\n      return Maybe.empty();\n    }\n  }\n\n  // --- 2. Setup Agent with Callback ---\n  public void defineAgentAndRunScenarios() {\n    LlmAgent llmAgentWithAfterCb =\n        LlmAgent.builder()\n            .name(APP_NAME)\n            .model(MODEL_NAME)\n            .description(\"An LLM agent demonstrating after_agent_callback for output modification\")\n            .instruction(\"You are a simple agent. Just say 'Processing complete!'\")\n            .afterAgentCallback(this::modifyOutputAfterAgent) // Assign the callback here\n            .build();\n\n    // --- 3. Setup Runner and Sessions using InMemoryRunner ---\n    // Use InMemoryRunner - it includes InMemorySessionService\n    InMemoryRunner runner = new InMemoryRunner(llmAgentWithAfterCb, APP_NAME);\n\n    // --- Scenario 1: Run where callback allows agent's original output ---\n    System.out.printf(\n        \"%n%s SCENARIO 1: Running Agent (Should Use Original Output) %s%n\",\n        \"=\".repeat(20), \"=\".repeat(20));\n    // No initial state means 'add_concluding_note' will be false in the callback check\n    runScenario(\n        runner,\n        llmAgentWithAfterCb.name(), // Use agent name for runner's appName consistency\n        SESSION_ID_NORMAL,\n        null,\n        \"Process this please.\");\n\n    // --- Scenario 2: Run where callback replaces the agent's output ---\n    System.out.printf(\n        \"%n%s SCENARIO 2: Running Agent (Should Replace Output) %s%n\",\n        \"=\".repeat(20), \"=\".repeat(20));\n    Map&lt;String, Object&gt; modifyState = new HashMap&lt;&gt;();\n    modifyState.put(\"add_concluding_note\", true); // Set the state flag here\n    runScenario(\n        runner,\n        llmAgentWithAfterCb.name(), // Use agent name for runner's appName consistency\n        SESSION_ID_MODIFY,\n        new ConcurrentHashMap&lt;&gt;(modifyState),\n        \"Process this and add note.\");\n  }\n\n  // --- 3. Method to Run a Single Scenario ---\n  public void runScenario(\n      InMemoryRunner runner,\n      String appName,\n      String sessionId,\n      ConcurrentHashMap&lt;String, Object&gt; initialState,\n      String userQuery) {\n\n    // Create session using the runner's bundled session service\n    runner.sessionService().createSession(appName, USER_ID, initialState, sessionId).blockingGet();\n\n    System.out.printf(\n        \"Running scenario for session: %s, initial state: %s%n\", sessionId, initialState);\n    Content userMessage =\n        Content.builder().role(\"user\").parts(List.of(Part.fromText(userQuery))).build();\n\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, sessionId, userMessage);\n\n    // Print final output\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse() &amp;&amp; event.content().isPresent()) {\n            String author = event.author() != null ? event.author() : \"UNKNOWN\";\n            String text =\n                event\n                    .content()\n                    .flatMap(Content::parts)\n                    .filter(parts -&gt; !parts.isEmpty())\n                    .map(parts -&gt; parts.get(0).text().orElse(\"\").trim())\n                    .orElse(\"[No text in final response]\");\n            System.out.printf(\"Final Output for %s: [%s] %s%n\", sessionId, author, text);\n          } else if (event.errorCode().isPresent()) {\n            System.out.printf(\n                \"Error Event for %s: %s%n\",\n                sessionId, event.errorMessage().orElse(\"Unknown error\"));\n          }\n        });\n  }\n}\n</code></pre> <p><code>after_agent_callback</code> \u7bc4\u4f8b\u8aaa\u660e\uff1a</p> <ul> <li>\u5c55\u793a\u5167\u5bb9\uff1a \u6b64\u7bc4\u4f8b\u5c55\u793a\u4e86<code>after_agent_callback</code>\u3002\u9019\u500b callback \u6703\u5728 agent \u4e3b\u8981\u8655\u7406\u908f\u8f2f\u5b8c\u6210\u4e26\u7522\u751f\u7d50\u679c\u4e4b\u5f8c\u3001\u4f46\u5728\u7d50\u679c\u6700\u7d42\u5b9a\u7a3f\u8207\u56de\u50b3\u4e4b\u524d\u57f7\u884c\u3002</li> <li>\u904b\u4f5c\u65b9\u5f0f\uff1a callback \u51fd\u5f0f\uff08<code>modify_output_after_agent</code>\uff09\u6703\u6aa2\u67e5 session state \u4e2d\u7684\u4e00\u500b\u65d7\u6a19\uff08<code>add_concluding_note</code>\uff09\u3002<ul> <li>\u5982\u679c\u8a72\u65d7\u6a19\u70ba <code>True</code>\uff0ccallback \u6703\u56de\u50b3\u4e00\u500b\u65b0\u7684<code>types.Content</code> \u7269\u4ef6\u3002\u9019\u6703\u544a\u8a34 Agent Development Kit (ADK) \u6846\u67b6\u53d6\u4ee3 agent \u539f\u672c\u7684\u8f38\u51fa\uff0c\u6539\u7528 callback \u56de\u50b3\u7684\u5167\u5bb9\u3002</li> <li>\u5982\u679c\u8a72\u65d7\u6a19\u70ba <code>False</code>\uff08\u6216\u672a\u8a2d\u5b9a\uff09\uff0ccallback \u5247\u56de\u50b3 <code>None</code> \u6216\u7a7a\u7269\u4ef6\u3002\u9019\u6703\u544a\u8a34 Agent Development Kit (ADK) \u6846\u67b6\u6cbf\u7528 agent \u539f\u672c\u7522\u751f\u7684\u8f38\u51fa\u3002</li> </ul> </li> <li>\u9810\u671f\u7d50\u679c\uff1a \u4f60\u6703\u770b\u5230\u5169\u7a2e\u60c5\u5883\uff1a<ol> <li>\u5728\u6c92\u6709<code>add_concluding_note: True</code> state \u7684 session \u4e2d\uff0ccallback \u5141\u8a31 agent \u539f\u672c\u7684\u8f38\u51fa\uff08\"Processing complete!\"\uff09\u88ab\u4f7f\u7528\u3002</li> <li>\u5728\u6709\u8a72 state \u65d7\u6a19\u7684 session \u4e2d\uff0ccallback \u6703\u6514\u622a agent \u539f\u672c\u7684\u8f38\u51fa\uff0c\u4e26\u4ee5\u81ea\u5df1\u7684\u8a0a\u606f\uff08\"Concluding note added...\"\uff09\u53d6\u800c\u4ee3\u4e4b\u3002</li> </ol> </li> <li>\u7406\u89e3 Callbacks\uff1a \u9019\u5f37\u8abf\u4e86<code>after_</code> callback \u5982\u4f55\u5be6\u73fe\u5f8c\u8655\u7406\u6216\u4fee\u6539\u3002\u4f60\u53ef\u4ee5\u6aa2\u67e5\u67d0\u500b\u6b65\u9a5f\uff08agent \u57f7\u884c\uff09\u7684\u7d50\u679c\uff0c\u4e26\u6839\u64da\u4f60\u7684\u908f\u8f2f\u6c7a\u5b9a\u8981\u8b93\u5b83\u901a\u904e\u3001\u4fee\u6539\u5b83\uff0c\u6216\u5b8c\u5168\u53d6\u4ee3\u5b83\u3002</li> </ul>"},{"location":"callbacks/types-of-callbacks/#llm-callback","title":"LLM \u4e92\u52d5 Callback","text":"<p>\u9019\u4e9b callback \u5c08\u70ba<code>LlmAgent</code>\u8a2d\u8a08\uff0c\u63d0\u4f9b\u8207\u5927\u578b\u8a9e\u8a00\u6a21\u578b (Large Language Model, LLM) \u4e92\u52d5\u6642\u7684\u639b\u9264\u9ede\u3002</p>"},{"location":"callbacks/types-of-callbacks/#before-model-callback","title":"Before Model Callback","text":"<p>\u6642\u6a5f\uff1a \u5728 <code>generate_content_async</code>\uff08\u6216\u540c\u7b49\u529f\u80fd\uff09\u8acb\u6c42\u65bc<code>LlmAgent</code>\u6d41\u7a0b\u4e2d\u9001\u5f80 LLM \u4e4b\u524d\u547c\u53eb\u3002</p> <p>\u76ee\u7684\uff1a \u5141\u8a31\u6aa2\u67e5\u4e26\u4fee\u6539\u5373\u5c07\u9001\u5f80 LLM \u7684\u8acb\u6c42\u3002\u5e38\u898b\u7528\u9014\u5305\u62ec\uff1a\u52d5\u614b\u65b0\u589e\u6307\u4ee4\u3001\u6839\u64da state \u6ce8\u5165 few-shot \u7bc4\u4f8b\u3001\u4fee\u6539\u6a21\u578b\u8a2d\u5b9a\u3001\u5be6\u4f5c\u9632\u8b77\u63aa\u65bd\uff08\u5982\u9ad2\u8a71\u904e\u6ffe\uff09\u3001\u6216\u5be6\u4f5c\u8acb\u6c42\u5c64\u7d1a\u7684\u5feb\u53d6\u3002</p> <p>\u56de\u50b3\u503c\u6548\u679c\uff1a \u5982\u679c callback \u56de\u50b3 <code>None</code>\uff08\u6216\u5728 Java \u4e2d\u70ba <code>Maybe.empty()</code> \u7269\u4ef6\uff09\uff0cLLM \u6703\u7167\u5e38\u57f7\u884c\u6d41\u7a0b\u3002\u5982\u679c callback \u56de\u50b3 <code>LlmResponse</code> \u7269\u4ef6\uff0c\u5247\u6703\u8df3\u904e\u5c0d LLM \u7684\u547c\u53eb\u3002\u6b64\u6642\u56de\u50b3\u7684 <code>LlmResponse</code> \u6703\u88ab\u76f4\u63a5\u7576\u4f5c\u4f86\u81ea\u6a21\u578b\u7684\u7d50\u679c\u4f7f\u7528\u3002\u9019\u5c0d\u65bc\u5be6\u4f5c\u9632\u8b77\u63aa\u65bd\u6216\u5feb\u53d6\u7279\u5225\u6709\u7528\u3002</p> \u7a0b\u5f0f\u78bc PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.models import LlmResponse, LlmRequest\nfrom google.adk.runners import Runner\nfrom typing import Optional\nfrom google.genai import types \nfrom google.adk.sessions import InMemorySessionService\n\nGEMINI_2_FLASH=\"gemini-2.0-flash\"\n\n# --- Define the Callback Function ---\ndef simple_before_model_modifier(\n    callback_context: CallbackContext, llm_request: LlmRequest\n) -&gt; Optional[LlmResponse]:\n    \"\"\"Inspects/modifies the LLM request or skips the call.\"\"\"\n    agent_name = callback_context.agent_name\n    print(f\"[Callback] Before model call for agent: {agent_name}\")\n\n    # Inspect the last user message in the request contents\n    last_user_message = \"\"\n    if llm_request.contents and llm_request.contents[-1].role == 'user':\n         if llm_request.contents[-1].parts:\n            last_user_message = llm_request.contents[-1].parts[0].text\n    print(f\"[Callback] Inspecting last user message: '{last_user_message}'\")\n\n    # --- Modification Example ---\n    # Add a prefix to the system instruction\n    original_instruction = llm_request.config.system_instruction or types.Content(role=\"system\", parts=[])\n    prefix = \"[Modified by Callback] \"\n    # Ensure system_instruction is Content and parts list exists\n    if not isinstance(original_instruction, types.Content):\n         # Handle case where it might be a string (though config expects Content)\n         original_instruction = types.Content(role=\"system\", parts=[types.Part(text=str(original_instruction))])\n    if not original_instruction.parts:\n        original_instruction.parts.append(types.Part(text=\"\")) # Add an empty part if none exist\n\n    # Modify the text of the first part\n    modified_text = prefix + (original_instruction.parts[0].text or \"\")\n    original_instruction.parts[0].text = modified_text\n    llm_request.config.system_instruction = original_instruction\n    print(f\"[Callback] Modified system instruction to: '{modified_text}'\")\n\n    # --- Skip Example ---\n    # Check if the last user message contains \"BLOCK\"\n    if \"BLOCK\" in last_user_message.upper():\n        print(\"[Callback] 'BLOCK' keyword found. Skipping LLM call.\")\n        # Return an LlmResponse to skip the actual LLM call\n        return LlmResponse(\n            content=types.Content(\n                role=\"model\",\n                parts=[types.Part(text=\"LLM call was blocked by before_model_callback.\")],\n            )\n        )\n    else:\n        print(\"[Callback] Proceeding with LLM call.\")\n        # Return None to allow the (modified) request to go to the LLM\n        return None\n\n\n# Create LlmAgent and Assign Callback\nmy_llm_agent = LlmAgent(\n        name=\"ModelCallbackAgent\",\n        model=GEMINI_2_FLASH,\n        instruction=\"You are a helpful assistant.\", # Base instruction\n        description=\"An LLM agent demonstrating before_model_callback\",\n        before_model_callback=simple_before_model_modifier # Assign the function here\n)\n\nAPP_NAME = \"guardrail_app\"\nUSER_ID = \"user_1\"\nSESSION_ID = \"session_001\"\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=my_llm_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"write a joke on BLOCK\")\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.CallbackContext;\nimport com.google.adk.events.Event;\nimport com.google.adk.models.LlmRequest;\nimport com.google.adk.models.LlmResponse;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.Iterables;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.GenerateContentConfig;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport io.reactivex.rxjava3.core.Maybe;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class BeforeModelCallbackExample {\n\n  // --- Define Constants ---\n  private static final String AGENT_NAME = \"ModelCallbackAgent\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n  private static final String AGENT_INSTRUCTION = \"You are a helpful assistant.\";\n  private static final String AGENT_DESCRIPTION =\n      \"An LLM agent demonstrating before_model_callback\";\n\n  // For session and runner\n  private static final String APP_NAME = \"guardrail_app_java\";\n  private static final String USER_ID = \"user_1_java\";\n\n  public static void main(String[] args) {\n    BeforeModelCallbackExample demo = new BeforeModelCallbackExample();\n    demo.defineAgentAndRun();\n  }\n\n  // --- 1. Define the Callback Function ---\n  // Inspects/modifies the LLM request or skips the actual LLM call.\n  public Maybe&lt;LlmResponse&gt; simpleBeforeModelModifier(\n      CallbackContext callbackContext, LlmRequest llmRequest) {\n    String agentName = callbackContext.agentName();\n    System.out.printf(\"%n[Callback] Before model call for agent: %s%n\", agentName);\n\n    String lastUserMessage = \"\";\n    if (llmRequest.contents() != null &amp;&amp; !llmRequest.contents().isEmpty()) {\n      Content lastContentItem = Iterables.getLast(llmRequest.contents());\n      if (\"user\".equals(lastContentItem.role().orElse(null))\n          &amp;&amp; lastContentItem.parts().isPresent()\n          &amp;&amp; !lastContentItem.parts().get().isEmpty()) {\n        lastUserMessage = lastContentItem.parts().get().get(0).text().orElse(\"\");\n      }\n    }\n    System.out.printf(\"[Callback] Inspecting last user message: '%s'%n\", lastUserMessage);\n\n    // --- Modification Example ---\n    // Add a prefix to the system instruction\n    Content systemInstructionFromRequest = Content.builder().parts(ImmutableList.of()).build();\n    // Ensure system_instruction is Content and parts list exists\n    if (llmRequest.config().isPresent()) {\n      systemInstructionFromRequest =\n          llmRequest\n              .config()\n              .get()\n              .systemInstruction()\n              .orElseGet(() -&gt; Content.builder().role(\"system\").parts(ImmutableList.of()).build());\n    }\n    List&lt;Part&gt; currentSystemParts =\n        new ArrayList&lt;&gt;(systemInstructionFromRequest.parts().orElse(ImmutableList.of()));\n    // Ensure a part exists for modification\n    if (currentSystemParts.isEmpty()) {\n      currentSystemParts.add(Part.fromText(\"\"));\n    }\n    // Modify the text of the first part\n    String prefix = \"[Modified by Callback] \";\n    String conceptuallyModifiedText = prefix + currentSystemParts.get(0).text().orElse(\"\");\n    llmRequest =\n        llmRequest.toBuilder()\n            .config(\n                GenerateContentConfig.builder()\n                    .systemInstruction(\n                        Content.builder()\n                            .parts(List.of(Part.fromText(conceptuallyModifiedText)))\n                            .build())\n                    .build())\n            .build();\n    System.out.printf(\n        \"Modified System Instruction %s\", llmRequest.config().get().systemInstruction());\n\n    // --- Skip Example ---\n    // Check if the last user message contains \"BLOCK\"\n    if (lastUserMessage.toUpperCase().contains(\"BLOCK\")) {\n      System.out.println(\"[Callback] 'BLOCK' keyword found. Skipping LLM call.\");\n      // Return an LlmResponse to skip the actual LLM call\n      return Maybe.just(\n          LlmResponse.builder()\n              .content(\n                  Content.builder()\n                      .role(\"model\")\n                      .parts(\n                          ImmutableList.of(\n                              Part.fromText(\"LLM call was blocked by before_model_callback.\")))\n                      .build())\n              .build());\n    }\n\n    // Return Empty response to allow the (modified) request to go to the LLM\n    System.out.println(\"[Callback] Proceeding with LLM call (using the original LlmRequest).\");\n    return Maybe.empty();\n  }\n\n  // --- 2. Define Agent and Run Scenarios ---\n  public void defineAgentAndRun() {\n    // Setup Agent with Callback\n    LlmAgent myLlmAgent =\n        LlmAgent.builder()\n            .name(AGENT_NAME)\n            .model(MODEL_NAME)\n            .instruction(AGENT_INSTRUCTION)\n            .description(AGENT_DESCRIPTION)\n            .beforeModelCallback(this::simpleBeforeModelModifier)\n            .build();\n\n    // Create an InMemoryRunner\n    InMemoryRunner runner = new InMemoryRunner(myLlmAgent, APP_NAME);\n    // InMemoryRunner automatically creates a session service. Create a session using the service\n    Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n    Content userMessage =\n        Content.fromParts(\n            Part.fromText(\"Tell me about quantum computing. This is a test. So BLOCK.\"));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre>"},{"location":"callbacks/types-of-callbacks/#after-model-callback","title":"After Model Callback","text":"<p>\u6642\u6a5f\uff1a \u7576\u5f9e\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6536\u5230\u56de\u61c9\uff08<code>LlmResponse</code>\uff09\u5f8c\uff0c\u4e14\u5728\u88ab\u547c\u53eb\u7684 agent \u9032\u4e00\u6b65\u8655\u7406\u4e4b\u524d\u57f7\u884c\u3002</p> <p>\u76ee\u7684\uff1a \u5141\u8a31\u6aa2\u67e5\u6216\u4fee\u6539\u539f\u59cb LLM \u56de\u61c9\u3002\u5e38\u898b\u7528\u9014\u5305\u62ec\uff1a</p> <ul> <li>\u8a18\u9304\u6a21\u578b\u8f38\u51fa\uff0c</li> <li>\u91cd\u65b0\u683c\u5f0f\u5316\u56de\u61c9\u5167\u5bb9\uff0c</li> <li>\u904e\u6ffe\u6216\u906e\u853d\u6a21\u578b\u7522\u751f\u7684\u654f\u611f\u8cc7\u8a0a\uff0c</li> <li>\u5f9e LLM \u56de\u61c9\u4e2d\u89e3\u6790\u7d50\u69cb\u5316\u8cc7\u6599\u4e26\u5132\u5b58\u5230 <code>callback_context.state</code>\uff0c</li> <li>\u6216\u8655\u7406\u7279\u5b9a\u932f\u8aa4\u78bc\u3002</li> </ul> \u7a0b\u5f0f\u78bc PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.runners import Runner\nfrom typing import Optional\nfrom google.genai import types \nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.models import LlmResponse\n\nGEMINI_2_FLASH=\"gemini-2.0-flash\"\n\n# --- Define the Callback Function ---\ndef simple_after_model_modifier(\n    callback_context: CallbackContext, llm_response: LlmResponse\n) -&gt; Optional[LlmResponse]:\n    \"\"\"Inspects/modifies the LLM response after it's received.\"\"\"\n    agent_name = callback_context.agent_name\n    print(f\"[Callback] After model call for agent: {agent_name}\")\n\n    # --- Inspection ---\n    original_text = \"\"\n    if llm_response.content and llm_response.content.parts:\n        # Assuming simple text response for this example\n        if llm_response.content.parts[0].text:\n            original_text = llm_response.content.parts[0].text\n            print(f\"[Callback] Inspected original response text: '{original_text[:100]}...'\") # Log snippet\n        elif llm_response.content.parts[0].function_call:\n             print(f\"[Callback] Inspected response: Contains function call '{llm_response.content.parts[0].function_call.name}'. No text modification.\")\n             return None # Don't modify tool calls in this example\n        else:\n             print(\"[Callback] Inspected response: No text content found.\")\n             return None\n    elif llm_response.error_message:\n        print(f\"[Callback] Inspected response: Contains error '{llm_response.error_message}'. No modification.\")\n        return None\n    else:\n        print(\"[Callback] Inspected response: Empty LlmResponse.\")\n        return None # Nothing to modify\n\n    # --- Modification Example ---\n    # Replace \"joke\" with \"funny story\" (case-insensitive)\n    search_term = \"joke\"\n    replace_term = \"funny story\"\n    if search_term in original_text.lower():\n        print(f\"[Callback] Found '{search_term}'. Modifying response.\")\n        modified_text = original_text.replace(search_term, replace_term)\n        modified_text = modified_text.replace(search_term.capitalize(), replace_term.capitalize()) # Handle capitalization\n\n        # Create a NEW LlmResponse with the modified content\n        # Deep copy parts to avoid modifying original if other callbacks exist\n        modified_parts = [copy.deepcopy(part) for part in llm_response.content.parts]\n        modified_parts[0].text = modified_text # Update the text in the copied part\n\n        new_response = LlmResponse(\n             content=types.Content(role=\"model\", parts=modified_parts),\n             # Copy other relevant fields if necessary, e.g., grounding_metadata\n             grounding_metadata=llm_response.grounding_metadata\n             )\n        print(f\"[Callback] Returning modified response.\")\n        return new_response # Return the modified response\n    else:\n        print(f\"[Callback] '{search_term}' not found. Passing original response through.\")\n        # Return None to use the original llm_response\n        return None\n\n\n# Create LlmAgent and Assign Callback\nmy_llm_agent = LlmAgent(\n        name=\"AfterModelCallbackAgent\",\n        model=GEMINI_2_FLASH,\n        instruction=\"You are a helpful assistant.\",\n        description=\"An LLM agent demonstrating after_model_callback\",\n        after_model_callback=simple_after_model_modifier # Assign the function here\n)\n\nAPP_NAME = \"guardrail_app\"\nUSER_ID = \"user_1\"\nSESSION_ID = \"session_001\"\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=my_llm_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n# Agent Interaction\nasync def call_agent_async(query):\n  session, runner = await setup_session_and_runner()\n\n  content = types.Content(role='user', parts=[types.Part(text=query)])\n  events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n  async for event in events:\n      if event.is_final_response():\n          final_response = event.content.parts[0].text\n          print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"\"\"write multiple time the word \"joke\" \"\"\")\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.CallbackContext;\nimport com.google.adk.events.Event;\nimport com.google.adk.models.LlmResponse;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.common.collect.ImmutableList;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport io.reactivex.rxjava3.core.Maybe;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class AfterModelCallbackExample {\n\n  // --- Define Constants ---\n  private static final String AGENT_NAME = \"AfterModelCallbackAgent\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n  private static final String AGENT_INSTRUCTION = \"You are a helpful assistant.\";\n  private static final String AGENT_DESCRIPTION = \"An LLM agent demonstrating after_model_callback\";\n\n  // For session and runner\n  private static final String APP_NAME = \"AfterModelCallbackAgentApp\";\n  private static final String USER_ID = \"user_1\";\n\n  // For text replacement\n  private static final String SEARCH_TERM = \"joke\";\n  private static final String REPLACE_TERM = \"funny story\";\n  private static final Pattern SEARCH_PATTERN =\n      Pattern.compile(\"\\\\b\" + Pattern.quote(SEARCH_TERM) + \"\\\\b\", Pattern.CASE_INSENSITIVE);\n\n  public static void main(String[] args) {\n    AfterModelCallbackExample example = new AfterModelCallbackExample();\n    example.defineAgentAndRun();\n  }\n\n  // --- Define the Callback Function ---\n  // Inspects/modifies the LLM response after it's received.\n  public Maybe&lt;LlmResponse&gt; simpleAfterModelModifier(\n      CallbackContext callbackContext, LlmResponse llmResponse) {\n    String agentName = callbackContext.agentName();\n    System.out.printf(\"%n[Callback] After model call for agent: %s%n\", agentName);\n\n    // --- Inspection Phase ---\n    if (llmResponse.errorMessage().isPresent()) {\n      System.out.printf(\n          \"[Callback] Response has error: '%s'. No modification.%n\",\n          llmResponse.errorMessage().get());\n      return Maybe.empty(); // Pass through errors\n    }\n\n    Optional&lt;Part&gt; firstTextPartOpt =\n        llmResponse\n            .content()\n            .flatMap(Content::parts)\n            .filter(parts -&gt; !parts.isEmpty() &amp;&amp; parts.get(0).text().isPresent())\n            .map(parts -&gt; parts.get(0));\n\n    if (!firstTextPartOpt.isPresent()) {\n      // Could be a function call, empty content, or no text in the first part\n      llmResponse\n          .content()\n          .flatMap(Content::parts)\n          .filter(parts -&gt; !parts.isEmpty() &amp;&amp; parts.get(0).functionCall().isPresent())\n          .ifPresent(\n              parts -&gt;\n                  System.out.printf(\n                      \"[Callback] Response is a function call ('%s'). No text modification.%n\",\n                      parts.get(0).functionCall().get().name().orElse(\"N/A\")));\n      if (!llmResponse.content().isPresent()\n          || !llmResponse.content().flatMap(Content::parts).isPresent()\n          || llmResponse.content().flatMap(Content::parts).get().isEmpty()) {\n        System.out.println(\n            \"[Callback] Response content is empty or has no parts. No modification.\");\n      } else if (!firstTextPartOpt.isPresent()) { // Already checked for function call\n        System.out.println(\"[Callback] First part has no text content. No modification.\");\n      }\n      return Maybe.empty(); // Pass through non-text or unsuitable responses\n    }\n\n    String originalText = firstTextPartOpt.get().text().get();\n    System.out.printf(\"[Callback] Inspected original text: '%.100s...'%n\", originalText);\n\n    // --- Modification Phase ---\n    Matcher matcher = SEARCH_PATTERN.matcher(originalText);\n    if (!matcher.find()) {\n      System.out.printf(\n          \"[Callback] '%s' not found. Passing original response through.%n\", SEARCH_TERM);\n      return Maybe.empty();\n    }\n\n    System.out.printf(\"[Callback] Found '%s'. Modifying response.%n\", SEARCH_TERM);\n\n    // Perform the replacement, respecting original capitalization of the found term's first letter\n    String foundTerm = matcher.group(0); // The actual term found (e.g., \"joke\" or \"Joke\")\n    String actualReplaceTerm = REPLACE_TERM;\n    if (Character.isUpperCase(foundTerm.charAt(0)) &amp;&amp; REPLACE_TERM.length() &gt; 0) {\n      actualReplaceTerm = Character.toUpperCase(REPLACE_TERM.charAt(0)) + REPLACE_TERM.substring(1);\n    }\n    String modifiedText = matcher.replaceFirst(Matcher.quoteReplacement(actualReplaceTerm));\n\n    // Create a new LlmResponse with the modified content\n    Content originalContent = llmResponse.content().get();\n    List&lt;Part&gt; originalParts = originalContent.parts().orElse(ImmutableList.of());\n\n    List&lt;Part&gt; modifiedPartsList = new ArrayList&lt;&gt;(originalParts.size());\n    if (!originalParts.isEmpty()) {\n      modifiedPartsList.add(Part.fromText(modifiedText)); // Replace first part's text\n      // Add remaining parts as they were (shallow copy)\n      for (int i = 1; i &lt; originalParts.size(); i++) {\n        modifiedPartsList.add(originalParts.get(i));\n      }\n    } else { // Should not happen if firstTextPartOpt was present\n      modifiedPartsList.add(Part.fromText(modifiedText));\n    }\n\n    LlmResponse.Builder newResponseBuilder =\n        LlmResponse.builder()\n            .content(\n                originalContent.toBuilder().parts(ImmutableList.copyOf(modifiedPartsList)).build())\n            .groundingMetadata(llmResponse.groundingMetadata());\n\n    System.out.println(\"[Callback] Returning modified response.\");\n    return Maybe.just(newResponseBuilder.build());\n  }\n\n  // --- 2. Define Agent and Run Scenarios ---\n  public void defineAgentAndRun() {\n    // Setup Agent with Callback\n    LlmAgent myLlmAgent =\n        LlmAgent.builder()\n            .name(AGENT_NAME)\n            .model(MODEL_NAME)\n            .instruction(AGENT_INSTRUCTION)\n            .description(AGENT_DESCRIPTION)\n            .afterModelCallback(this::simpleAfterModelModifier)\n            .build();\n\n    // Create an InMemoryRunner\n    InMemoryRunner runner = new InMemoryRunner(myLlmAgent, APP_NAME);\n    // InMemoryRunner automatically creates a session service. Create a session using the service\n    Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n    Content userMessage =\n        Content.fromParts(\n            Part.fromText(\n                \"Tell me a joke about quantum computing. Include the word 'joke' in your response\"));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre>"},{"location":"callbacks/types-of-callbacks/#tool-execution-callbacks","title":"\u5de5\u5177\u57f7\u884c\u56de\u547c\uff08Tool Execution Callbacks\uff09","text":"<p>\u9019\u4e9b\u56de\u547c\u540c\u6a23\u662f\u91dd\u5c0d <code>LlmAgent</code> \u800c\u8a2d\u8a08\uff0c\u4e26\u6703\u5728\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u53ef\u80fd\u8acb\u6c42\u57f7\u884c\u7684\u5de5\u5177\uff08\u5305\u542b <code>FunctionTool</code>\u3001<code>AgentTool</code> \u7b49\uff09\u57f7\u884c\u524d\u5f8c\u89f8\u767c\u3002</p>"},{"location":"callbacks/types-of-callbacks/#before-tool-callback","title":"\u5de5\u5177\u57f7\u884c\u524d\u56de\u547c\uff08Before Tool Callback\uff09","text":"<p>\u6642\u6a5f\uff1a \u7576\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5df2\u70ba\u7279\u5b9a\u5de5\u5177\u7522\u751f\u51fd\u5f0f\u547c\u53eb\uff0c\u4e14\u5373\u5c07\u547c\u53eb\u8a72\u5de5\u5177\u7684 <code>run_async</code> \u65b9\u6cd5\u524d\u89f8\u767c\u3002</p> <p>\u7528\u9014\uff1a \u53ef\u7528\u65bc\u6aa2\u67e5\u8207\u4fee\u6539\u5de5\u5177\u53c3\u6578\u3001\u5728\u57f7\u884c\u524d\u9032\u884c\u6388\u6b0a\u6aa2\u67e5\u3001\u8a18\u9304\u5de5\u5177\u4f7f\u7528\u5617\u8a66\uff0c\u6216\u5be6\u4f5c\u5de5\u5177\u5c64\u7d1a\u7684\u5feb\u53d6\u3002</p> <p>\u56de\u50b3\u503c\u6548\u679c\uff1a</p> <ol> <li>\u5982\u679c\u56de\u547c\u56de\u50b3 <code>None</code>\uff08\u6216\u5728 Java \u4e2d\u70ba <code>Maybe.empty()</code> \u7269\u4ef6\uff09\uff0c\u5247\u5de5\u5177\u7684 <code>run_async</code> \u65b9\u6cd5\u6703\u4ee5\uff08\u53ef\u80fd\u5df2\u88ab\u4fee\u6539\u7684\uff09<code>args</code> \u57f7\u884c\u3002  </li> <li>\u5982\u679c\u56de\u50b3\u7684\u662f\u5b57\u5178\uff08\u6216\u5728 Java \u4e2d\u70ba <code>Map</code>\uff09\uff0c\u5247\u5de5\u5177\u7684 <code>run_async</code> \u65b9\u6cd5\u6703\u88ab\u7565\u904e\u3002\u56de\u50b3\u7684\u5b57\u5178\u6703\u76f4\u63a5\u4f5c\u70ba\u8a72\u5de5\u5177\u547c\u53eb\u7684\u7d50\u679c\u3002\u9019\u5c0d\u65bc\u5feb\u53d6\u6216\u8986\u5beb\u5de5\u5177\u884c\u70ba\u975e\u5e38\u6709\u7528\u3002  </li> </ol> \u7a0b\u5f0f\u78bc PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.runners import Runner\nfrom typing import Optional\nfrom google.genai import types \nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools import FunctionTool\nfrom google.adk.tools.tool_context import ToolContext\nfrom google.adk.tools.base_tool import BaseTool\nfrom typing import Dict, Any\n\n\nGEMINI_2_FLASH=\"gemini-2.0-flash\"\n\ndef get_capital_city(country: str) -&gt; str:\n    \"\"\"Retrieves the capital city of a given country.\"\"\"\n    print(f\"--- Tool 'get_capital_city' executing with country: {country} ---\")\n    country_capitals = {\n        \"united states\": \"Washington, D.C.\",\n        \"canada\": \"Ottawa\",\n        \"france\": \"Paris\",\n        \"germany\": \"Berlin\",\n    }\n    return country_capitals.get(country.lower(), f\"Capital not found for {country}\")\n\ncapital_tool = FunctionTool(func=get_capital_city)\n\ndef simple_before_tool_modifier(\n    tool: BaseTool, args: Dict[str, Any], tool_context: ToolContext\n) -&gt; Optional[Dict]:\n    \"\"\"Inspects/modifies tool args or skips the tool call.\"\"\"\n    agent_name = tool_context.agent_name\n    tool_name = tool.name\n    print(f\"[Callback] Before tool call for tool '{tool_name}' in agent '{agent_name}'\")\n    print(f\"[Callback] Original args: {args}\")\n\n    if tool_name == 'get_capital_city' and args.get('country', '').lower() == 'canada':\n        print(\"[Callback] Detected 'Canada'. Modifying args to 'France'.\")\n        args['country'] = 'France'\n        print(f\"[Callback] Modified args: {args}\")\n        return None\n\n    # If the tool is 'get_capital_city' and country is 'BLOCK'\n    if tool_name == 'get_capital_city' and args.get('country', '').upper() == 'BLOCK':\n        print(\"[Callback] Detected 'BLOCK'. Skipping tool execution.\")\n        return {\"result\": \"Tool execution was blocked by before_tool_callback.\"}\n\n    print(\"[Callback] Proceeding with original or previously modified args.\")\n    return None\n\nmy_llm_agent = LlmAgent(\n        name=\"ToolCallbackAgent\",\n        model=GEMINI_2_FLASH,\n        instruction=\"You are an agent that can find capital cities. Use the get_capital_city tool.\",\n        description=\"An LLM agent demonstrating before_tool_callback\",\n        tools=[capital_tool],\n        before_tool_callback=simple_before_tool_modifier\n)\n\nAPP_NAME = \"guardrail_app\"\nUSER_ID = \"user_1\"\nSESSION_ID = \"session_001\"\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=my_llm_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"Canada\")\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.InvocationContext;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.BaseTool;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.adk.tools.ToolContext;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport io.reactivex.rxjava3.core.Maybe;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class BeforeToolCallbackExample {\n\n  private static final String APP_NAME = \"ToolCallbackAgentApp\";\n  private static final String USER_ID = \"user_1\";\n  private static final String SESSION_ID = \"session_001\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n\n  public static void main(String[] args) {\n    BeforeToolCallbackExample example = new BeforeToolCallbackExample();\n    example.runAgent(\"capital of canada\");\n  }\n\n  // --- Define a Simple Tool Function ---\n  // The Schema is important for the callback \"args\" to correctly identify the input.\n  public static Map&lt;String, Object&gt; getCapitalCity(\n      @Schema(name = \"country\", description = \"The country to find the capital of.\")\n          String country) {\n    System.out.printf(\"--- Tool 'getCapitalCity' executing with country: %s ---%n\", country);\n    Map&lt;String, String&gt; countryCapitals = new HashMap&lt;&gt;();\n    countryCapitals.put(\"united states\", \"Washington, D.C.\");\n    countryCapitals.put(\"canada\", \"Ottawa\");\n    countryCapitals.put(\"france\", \"Paris\");\n    countryCapitals.put(\"germany\", \"Berlin\");\n\n    String capital =\n        countryCapitals.getOrDefault(country.toLowerCase(), \"Capital not found for \" + country);\n    // FunctionTool expects a Map&lt;String, Object&gt; as the return type for the method it wraps.\n    return ImmutableMap.of(\"capital\", capital);\n  }\n\n  // Define the Callback function\n  // The Tool callback provides all these parameters by default.\n  public Maybe&lt;Map&lt;String, Object&gt;&gt; simpleBeforeToolModifier(\n      InvocationContext invocationContext,\n      BaseTool tool,\n      Map&lt;String, Object&gt; args,\n      ToolContext toolContext) {\n\n    String agentName = invocationContext.agent().name();\n    String toolName = tool.name();\n    System.out.printf(\n        \"[Callback] Before tool call for tool '%s' in agent '%s'%n\", toolName, agentName);\n    System.out.printf(\"[Callback] Original args: %s%n\", args);\n\n    if (\"getCapitalCity\".equals(toolName)) {\n      String countryArg = (String) args.get(\"country\");\n      if (countryArg != null) {\n        if (\"canada\".equalsIgnoreCase(countryArg)) {\n          System.out.println(\"[Callback] Detected 'Canada'. Modifying args to 'France'.\");\n          args.put(\"country\", \"France\");\n          System.out.printf(\"[Callback] Modified args: %s%n\", args);\n          // Proceed with modified args\n          return Maybe.empty();\n        } else if (\"BLOCK\".equalsIgnoreCase(countryArg)) {\n          System.out.println(\"[Callback] Detected 'BLOCK'. Skipping tool execution.\");\n          // Return a map to skip the tool call and use this as the result\n          return Maybe.just(\n              ImmutableMap.of(\"result\", \"Tool execution was blocked by before_tool_callback.\"));\n        }\n      }\n    }\n\n    System.out.println(\"[Callback] Proceeding with original or previously modified args.\");\n    return Maybe.empty();\n  }\n\n  public void runAgent(String query) {\n    // --- Wrap the function into a Tool ---\n    FunctionTool capitalTool = FunctionTool.create(this.getClass(), \"getCapitalCity\");\n\n    // Create LlmAgent and Assign Callback\n    LlmAgent myLlmAgent =\n        LlmAgent.builder()\n            .name(APP_NAME)\n            .model(MODEL_NAME)\n            .instruction(\n                \"You are an agent that can find capital cities. Use the getCapitalCity tool.\")\n            .description(\"An LLM agent demonstrating before_tool_callback\")\n            .tools(capitalTool)\n            .beforeToolCallback(this::simpleBeforeToolModifier)\n            .build();\n\n    // Session and Runner\n    InMemoryRunner runner = new InMemoryRunner(myLlmAgent);\n    Session session =\n        runner.sessionService().createSession(APP_NAME, USER_ID, null, SESSION_ID).blockingGet();\n\n    Content userMessage = Content.fromParts(Part.fromText(query));\n\n    System.out.printf(\"%n--- Calling agent with query: \\\"%s\\\" ---%n\", query);\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre>"},{"location":"callbacks/types-of-callbacks/#after-tool-callback","title":"After Tool Callback","text":"<p>\u6642\u6a5f\uff1a \u5728\u5de5\u5177\u7684 <code>run_async</code> \u65b9\u6cd5\u6210\u529f\u5b8c\u6210\u5f8c\u7acb\u5373\u547c\u53eb\u3002</p> <p>\u76ee\u7684\uff1a \u5141\u8a31\u5728\u7d50\u679c\u56de\u50b3\u7d66\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\uff08\u53ef\u80fd\u7d93\u904e\u6458\u8981\u8655\u7406\uff09\u4e4b\u524d\uff0c\u6aa2\u67e5\u8207\u4fee\u6539\u5de5\u5177\u7684\u7d50\u679c\u3002\u9019\u5c0d\u65bc\u8a18\u9304\u5de5\u5177\u7d50\u679c\u3001\u5f8c\u8655\u7406\u6216\u683c\u5f0f\u5316\u7d50\u679c\uff0c\u6216\u5c07\u7d50\u679c\u7684\u7279\u5b9a\u90e8\u5206\u5132\u5b58\u5230 session state \u90fd\u5f88\u6709\u7528\u3002</p> <p>\u56de\u50b3\u503c\u5f71\u97ff\uff1a</p> <ol> <li>\u5982\u679c callback \u56de\u50b3 <code>None</code>\uff08\u6216\u5728 Java \u4e2d\u70ba <code>Maybe.empty()</code> \u7269\u4ef6\uff09\uff0c\u5247\u6703\u4f7f\u7528\u539f\u672c\u7684 <code>tool_response</code>\u3002  </li> <li>\u5982\u679c\u56de\u50b3\u65b0\u7684 dictionary\uff0c\u5247\u6703\u53d6\u4ee3\u539f\u672c\u7684 <code>tool_response</code>\u3002\u9019\u53ef\u7528\u65bc\u4fee\u6539\u6216\u904e\u6ffe LLM \u6240\u770b\u5230\u7684\u7d50\u679c\u3002</li> </ol> \u7a0b\u5f0f\u78bc PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.runners import Runner\nfrom typing import Optional\nfrom google.genai import types \nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools import FunctionTool\nfrom google.adk.tools.tool_context import ToolContext\nfrom google.adk.tools.base_tool import BaseTool\nfrom typing import Dict, Any\nfrom copy import deepcopy\n\nGEMINI_2_FLASH=\"gemini-2.0-flash\"\n\n# --- Define a Simple Tool Function (Same as before) ---\ndef get_capital_city(country: str) -&gt; str:\n    \"\"\"Retrieves the capital city of a given country.\"\"\"\n    print(f\"--- Tool 'get_capital_city' executing with country: {country} ---\")\n    country_capitals = {\n        \"united states\": \"Washington, D.C.\",\n        \"canada\": \"Ottawa\",\n        \"france\": \"Paris\",\n        \"germany\": \"Berlin\",\n    }\n    return {\"result\": country_capitals.get(country.lower(), f\"Capital not found for {country}\")}\n\n# --- Wrap the function into a Tool ---\ncapital_tool = FunctionTool(func=get_capital_city)\n\n# --- Define the Callback Function ---\ndef simple_after_tool_modifier(\n    tool: BaseTool, args: Dict[str, Any], tool_context: ToolContext, tool_response: Dict\n) -&gt; Optional[Dict]:\n    \"\"\"Inspects/modifies the tool result after execution.\"\"\"\n    agent_name = tool_context.agent_name\n    tool_name = tool.name\n    print(f\"[Callback] After tool call for tool '{tool_name}' in agent '{agent_name}'\")\n    print(f\"[Callback] Args used: {args}\")\n    print(f\"[Callback] Original tool_response: {tool_response}\")\n\n    # Default structure for function tool results is {\"result\": &lt;return_value&gt;}\n    original_result_value = tool_response.get(\"result\", \"\")\n    # original_result_value = tool_response\n\n    # --- Modification Example ---\n    # If the tool was 'get_capital_city' and result is 'Washington, D.C.'\n    if tool_name == 'get_capital_city' and original_result_value == \"Washington, D.C.\":\n        print(\"[Callback] Detected 'Washington, D.C.'. Modifying tool response.\")\n\n        # IMPORTANT: Create a new dictionary or modify a copy\n        modified_response = deepcopy(tool_response)\n        modified_response[\"result\"] = f\"{original_result_value} (Note: This is the capital of the USA).\"\n        modified_response[\"note_added_by_callback\"] = True # Add extra info if needed\n\n        print(f\"[Callback] Modified tool_response: {modified_response}\")\n        return modified_response # Return the modified dictionary\n\n    print(\"[Callback] Passing original tool response through.\")\n    # Return None to use the original tool_response\n    return None\n\n\n# Create LlmAgent and Assign Callback\nmy_llm_agent = LlmAgent(\n        name=\"AfterToolCallbackAgent\",\n        model=GEMINI_2_FLASH,\n        instruction=\"You are an agent that finds capital cities using the get_capital_city tool. Report the result clearly.\",\n        description=\"An LLM agent demonstrating after_tool_callback\",\n        tools=[capital_tool], # Add the tool\n        after_tool_callback=simple_after_tool_modifier # Assign the callback\n    )\n\nAPP_NAME = \"guardrail_app\"\nUSER_ID = \"user_1\"\nSESSION_ID = \"session_001\"\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=my_llm_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"united states\")\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.InvocationContext;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.BaseTool;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.adk.tools.ToolContext;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport io.reactivex.rxjava3.core.Maybe;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class AfterToolCallbackExample {\n\n  private static final String APP_NAME = \"AfterToolCallbackAgentApp\";\n  private static final String USER_ID = \"user_1\";\n  private static final String SESSION_ID = \"session_001\";\n  private static final String MODEL_NAME = \"gemini-2.0-flash\";\n\n  public static void main(String[] args) {\n    AfterToolCallbackExample example = new AfterToolCallbackExample();\n    example.runAgent(\"What is the capital of the United States?\");\n  }\n\n  // --- Define a Simple Tool Function (Same as before) ---\n  @Schema(description = \"Retrieves the capital city of a given country.\")\n  public static Map&lt;String, Object&gt; getCapitalCity(\n      @Schema(description = \"The country to find the capital of.\") String country) {\n    System.out.printf(\"--- Tool 'getCapitalCity' executing with country: %s ---%n\", country);\n    Map&lt;String, String&gt; countryCapitals = new HashMap&lt;&gt;();\n    countryCapitals.put(\"united states\", \"Washington, D.C.\");\n    countryCapitals.put(\"canada\", \"Ottawa\");\n    countryCapitals.put(\"france\", \"Paris\");\n    countryCapitals.put(\"germany\", \"Berlin\");\n\n    String capital =\n        countryCapitals.getOrDefault(country.toLowerCase(), \"Capital not found for \" + country);\n    return ImmutableMap.of(\"result\", capital);\n  }\n\n  // Define the Callback function.\n  public Maybe&lt;Map&lt;String, Object&gt;&gt; simpleAfterToolModifier(\n      InvocationContext invocationContext,\n      BaseTool tool,\n      Map&lt;String, Object&gt; args,\n      ToolContext toolContext,\n      Object toolResponse) {\n\n    // Inspects/modifies the tool result after execution.\n    String agentName = invocationContext.agent().name();\n    String toolName = tool.name();\n    System.out.printf(\n        \"[Callback] After tool call for tool '%s' in agent '%s'%n\", toolName, agentName);\n    System.out.printf(\"[Callback] Args used: %s%n\", args);\n    System.out.printf(\"[Callback] Original tool_response: %s%n\", toolResponse);\n\n    if (!(toolResponse instanceof Map)) {\n      System.out.println(\"[Callback] toolResponse is not a Map, cannot process further.\");\n      // Pass through if not a map\n      return Maybe.empty();\n    }\n\n    // Default structure for function tool results is {\"result\": &lt;return_value&gt;}\n    @SuppressWarnings(\"unchecked\")\n    Map&lt;String, Object&gt; responseMap = (Map&lt;String, Object&gt;) toolResponse;\n    Object originalResultValue = responseMap.get(\"result\");\n\n    // --- Modification Example ---\n    // If the tool was 'get_capital_city' and result is 'Washington, D.C.'\n    if (\"getCapitalCity\".equals(toolName) &amp;&amp; \"Washington, D.C.\".equals(originalResultValue)) {\n      System.out.println(\"[Callback] Detected 'Washington, D.C.'. Modifying tool response.\");\n\n      // IMPORTANT: Create a new mutable map or modify a copy\n      Map&lt;String, Object&gt; modifiedResponse = new HashMap&lt;&gt;(responseMap);\n      modifiedResponse.put(\n          \"result\", originalResultValue + \" (Note: This is the capital of the USA).\");\n      modifiedResponse.put(\"note_added_by_callback\", true); // Add extra info if needed\n\n      System.out.printf(\"[Callback] Modified tool_response: %s%n\", modifiedResponse);\n      return Maybe.just(modifiedResponse);\n    }\n\n    System.out.println(\"[Callback] Passing original tool response through.\");\n    // Return Maybe.empty() to use the original tool_response\n    return Maybe.empty();\n  }\n\n  public void runAgent(String query) {\n    // --- Wrap the function into a Tool ---\n    FunctionTool capitalTool = FunctionTool.create(this.getClass(), \"getCapitalCity\");\n\n    // Create LlmAgent and Assign Callback\n    LlmAgent myLlmAgent =\n        LlmAgent.builder()\n            .name(APP_NAME)\n            .model(MODEL_NAME)\n            .instruction(\n                \"You are an agent that finds capital cities using the getCapitalCity tool. Report\"\n                    + \" the result clearly.\")\n            .description(\"An LLM agent demonstrating after_tool_callback\")\n            .tools(capitalTool) // Add the tool\n            .afterToolCallback(this::simpleAfterToolModifier) // Assign the callback\n            .build();\n\n    InMemoryRunner runner = new InMemoryRunner(myLlmAgent);\n\n    // Session and Runner\n    Session session =\n        runner.sessionService().createSession(APP_NAME, USER_ID, null, SESSION_ID).blockingGet();\n\n    Content userMessage = Content.fromParts(Part.fromText(query));\n\n    System.out.printf(\"%n--- Calling agent with query: \\\"%s\\\" ---%n\", query);\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n}\n</code></pre>"},{"location":"context/","title":"Context","text":""},{"location":"context/#context_1","title":"\u4ec0\u9ebc\u662f Context","text":"<p>\u5728 Agent Development Kit (ADK) \u4e2d\uff0c\u300ccontext\u300d\u6307\u7684\u662f agent \u53ca\u5176 tools \u5728\u7279\u5b9a\u64cd\u4f5c\u671f\u9593\u53ef\u7528\u7684\u91cd\u8981\u8cc7\u8a0a\u96c6\u5408\u3002\u4f60\u53ef\u4ee5\u5c07\u5b83\u60f3\u50cf\u6210 agent \u8655\u7406\u7576\u524d\u4efb\u52d9\u6216\u5c0d\u8a71\u56de\u5408\u6642\u6240\u9700\u7684\u80cc\u666f\u77e5\u8b58\u8207\u8cc7\u6e90\u3002</p> <p>agent \u901a\u5e38\u9700\u8981\u7684\u4e0d\u50c5\u50c5\u662f\u6700\u65b0\u7684\u4f7f\u7528\u8005\u8a0a\u606f\u624d\u80fd\u6709\u826f\u597d\u8868\u73fe\u3002context \u4e4b\u6240\u4ee5\u91cd\u8981\uff0c\u662f\u56e0\u70ba\u5b83\u80fd\u5920\uff1a</p> <ol> <li>\u7dad\u6301\u72c0\u614b\uff08Maintaining State\uff09\uff1a \u5728\u591a\u6b65\u5c0d\u8a71\u4e2d\u8a18\u4f4f\u7d30\u7bc0\uff08\u4f8b\u5982\uff1a\u4f7f\u7528\u8005\u504f\u597d\u3001\u5148\u524d\u7684\u8a08\u7b97\u7d50\u679c\u3001\u8cfc\u7269\u8eca\u4e2d\u7684\u9805\u76ee\uff09\u3002\u9019\u4e3b\u8981\u900f\u904e session state \u4f86\u7ba1\u7406\u3002</li> <li>\u8cc7\u6599\u50b3\u905e\uff08Passing Data\uff09\uff1a \u5c07\u67d0\u4e00\u6b65\u9a5f\uff08\u5982\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb\u6216\u5de5\u5177\u57f7\u884c\uff09\u4e2d\u767c\u73fe\u6216\u7522\u751f\u7684\u8cc7\u8a0a\uff0c\u50b3\u905e\u7d66\u5f8c\u7e8c\u6b65\u9a5f\u3002\u9019\u88e1 session state \u4e5f\u626e\u6f14\u95dc\u9375\u89d2\u8272\u3002</li> <li>\u5b58\u53d6\u670d\u52d9\uff08Accessing Services\uff09\uff1a \u8207\u6846\u67b6\u529f\u80fd\u4e92\u52d5\uff0c\u4f8b\u5982\uff1a<ul> <li>Artifact Storage\uff1a \u5132\u5b58\u6216\u8f09\u5165\u8207 session \u76f8\u95dc\u7684\u6a94\u6848\u6216\u8cc7\u6599\uff08\u5982 PDF\u3001\u5716\u7247\u3001\u8a2d\u5b9a\u6a94\uff09\u3002</li> <li>Memory\uff1a \u5f9e\u904e\u5f80\u4e92\u52d5\u6216\u9023\u7d50\u5230\u4f7f\u7528\u8005\u7684\u5916\u90e8\u77e5\u8b58\u4f86\u6e90\u4e2d\u641c\u5c0b\u76f8\u95dc\u8cc7\u8a0a\u3002</li> <li>Authentication\uff1a \u8acb\u6c42\u4e26\u53d6\u5f97 tools \u5b58\u53d6\u5916\u90e8 API \u6240\u9700\u7684\u8a8d\u8b49\u6191\u8b49\u3002</li> </ul> </li> <li>\u8eab\u5206\u8207\u8ffd\u8e64\uff08Identity and Tracking\uff09\uff1a \u77e5\u9053\u7576\u524d\u57f7\u884c\u7684\u662f\u54ea\u500b agent\uff08<code>agent.name</code>\uff09\uff0c\u4e26\u80fd\u552f\u4e00\u8b58\u5225\u76ee\u524d\u7684\u8acb\u6c42-\u56de\u61c9\u5faa\u74b0\uff08<code>invocation_id</code>\uff09\uff0c\u4ee5\u4fbf\u65e5\u8a8c\u8a18\u9304\u8207\u9664\u932f\u3002</li> <li>\u5de5\u5177\u5c08\u5c6c\u64cd\u4f5c\uff08Tool-Specific Actions\uff09\uff1a \u8b93 tools \u80fd\u57f7\u884c\u7279\u6b8a\u64cd\u4f5c\uff0c\u4f8b\u5982\u8acb\u6c42\u8a8d\u8b49\u6216\u641c\u5c0b\u8a18\u61b6\u9ad4\uff0c\u9019\u4e9b\u90fd\u9700\u8981\u5b58\u53d6\u7576\u524d\u4e92\u52d5\u7684\u8a73\u7d30\u8cc7\u8a0a\u3002</li> </ol> <p>\u5c07\u9019\u4e9b\u8cc7\u8a0a\u5728\u55ae\u4e00\u6b21\u3001\u5b8c\u6574\u7684\u4f7f\u7528\u8005\u8acb\u6c42\u5230\u6700\u7d42\u56de\u61c9\u5faa\u74b0\uff08\u5373\u4e00\u6b21 invocation\uff09\u4e2d\u6574\u5408\u8d77\u4f86\u7684\u6838\u5fc3\u7269\u4ef6\u662f <code>InvocationContext</code>\u3002\u7136\u800c\uff0c\u901a\u5e38\u4f60\u4e0d\u9700\u8981\u76f4\u63a5\u5efa\u7acb\u6216\u7ba1\u7406\u9019\u500b\u7269\u4ef6\u3002ADK \u6846\u67b6\u6703\u5728\u4e00\u6b21 invocation \u958b\u59cb\u6642\uff08\u4f8b\u5982\u900f\u904e <code>runner.run_async</code>\uff09\u81ea\u52d5\u5efa\u7acb\u5b83\uff0c\u4e26\u5c07\u76f8\u95dc\u7684 context \u8cc7\u8a0a\u96b1\u5f0f\u50b3\u905e\u7d66\u4f60\u7684 agent \u7a0b\u5f0f\u78bc\u3001Callbacks \u53ca tools\u3002</p> PythonJava <pre><code># Conceptual Pseudocode: How the framework provides context (Internal Logic)\n\n# runner = Runner(agent=my_root_agent, session_service=..., artifact_service=...)\n# user_message = types.Content(...)\n# session = session_service.get_session(...) # Or create new\n\n# --- Inside runner.run_async(...) ---\n# 1. Framework creates the main context for this specific run\n# invocation_context = InvocationContext(\n#     invocation_id=\"unique-id-for-this-run\",\n#     session=session,\n#     user_content=user_message,\n#     agent=my_root_agent, # The starting agent\n#     session_service=session_service,\n#     artifact_service=artifact_service,\n#     memory_service=memory_service,\n#     # ... other necessary fields ...\n# )\n#\n# 2. Framework calls the agent's run method, passing the context implicitly\n#    (The agent's method signature will receive it, e.g., runAsyncImpl(InvocationContext invocationContext))\n# await my_root_agent.run_async(invocation_context)\n#   --- End Internal Logic ---\n#\n# As a developer, you work with the context objects provided in method arguments.\n</code></pre> <pre><code>/* Conceptual Pseudocode: How the framework provides context (Internal Logic) */\nInMemoryRunner runner = new InMemoryRunner(agent);\nSession session = runner\n    .sessionService()\n    .createSession(runner.appName(), USER_ID, initialState, SESSION_ID )\n    .blockingGet();\n\ntry (Scanner scanner = new Scanner(System.in, StandardCharsets.UTF_8)) {\n  while (true) {\n    System.out.print(\"\\nYou &gt; \");\n  }\n  String userInput = scanner.nextLine();\n  if (\"quit\".equalsIgnoreCase(userInput)) {\n    break;\n  }\n  Content userMsg = Content.fromParts(Part.fromText(userInput));\n  Flowable&lt;Event&gt; events = runner.runAsync(session.userId(), session.id(), userMsg);\n  System.out.print(\"\\nAgent &gt; \");\n  events.blockingForEach(event -&gt; System.out.print(event.stringifyContent()));\n}\n</code></pre> <pre><code>## \u4e0d\u540c\u985e\u578b\u7684 Context\n\n\u96d6\u7136 `InvocationContext` \u4f5c\u70ba\u5b8c\u6574\u7684\u5167\u90e8\u5bb9\u5668\uff0cAgent Development Kit (ADK) \u4e5f\u63d0\u4f9b\u4e86\u91dd\u5c0d\u7279\u5b9a\u60c5\u5883\u8a2d\u8a08\u7684\u5c08\u7528 context \u7269\u4ef6\u3002\u9019\u78ba\u4fdd\u4f60\u53ef\u4ee5\u6839\u64da\u7576\u4e0b\u4efb\u52d9\uff0c\u53d6\u5f97\u5408\u9069\u7684\u5de5\u5177\u8207\u6b0a\u9650\uff0c\u800c\u7121\u9700\u5728\u6bcf\u500b\u5730\u65b9\u90fd\u8655\u7406\u5b8c\u6574\u7684\u5167\u90e8 context \u8907\u96dc\u5ea6\u3002\u4ee5\u4e0b\u662f\u4f60\u6703\u9047\u5230\u7684\u4e0d\u540c\u300c\u98a8\u683c\u300d\uff1a\n\n1.  **`InvocationContext`**\n    *   **\u4f7f\u7528\u5834\u666f\uff1a** \u4ee5 `ctx` \u53c3\u6578\u7684\u5f62\u5f0f\uff0c\u76f4\u63a5\u50b3\u905e\u7d66 agent \u6838\u5fc3\u5be6\u4f5c\u65b9\u6cd5\uff08`_run_async_impl`\u3001`_run_live_impl`\uff09\u3002\n    *   **\u76ee\u7684\uff1a** \u63d0\u4f9b\u5c0d\u7576\u524d\u547c\u53eb*\u5b8c\u6574*\u72c0\u614b\u7684\u5b58\u53d6\u3002\u9019\u662f\u6700\u5168\u9762\u7684 context \u7269\u4ef6\u3002\n    *   **\u4e3b\u8981\u5167\u5bb9\uff1a** \u53ef\u76f4\u63a5\u5b58\u53d6 `session`\uff08\u5305\u542b `state` \u8207 `events`\uff09\u3001\u76ee\u524d\u7684 `agent` \u5be6\u4f8b\u3001`invocation_id`\u3001\u521d\u59cb `user_content`\u3001\u5df2\u8a2d\u5b9a\u670d\u52d9\u7684\u53c3\u8003\uff08`artifact_service`\u3001`memory_service`\u3001`session_service`\uff09\uff0c\u4ee5\u53ca\u8207\u5373\u6642/\u4e32\u6d41\u6a21\u5f0f\u76f8\u95dc\u7684\u6b04\u4f4d\u3002\n    *   **\u4f7f\u7528\u60c5\u5883\uff1a** \u4e3b\u8981\u7528\u65bc agent \u6838\u5fc3\u908f\u8f2f\u9700\u8981\u76f4\u63a5\u5b58\u53d6\u6574\u9ad4 session \u6216\u670d\u52d9\u6642\uff0c\u96d6\u7136\u5927\u591a\u6578\u72c0\u614b\u8207 artifact \u7684\u4e92\u52d5\u6703\u59d4\u6d3e\u7d66\u4f7f\u7528\u81ea\u8eab context \u7684 callbacks/tools\u3002\u6b64\u5916\uff0c\u4e5f\u53ef\u7528\u65bc\u63a7\u5236\u547c\u53eb\u672c\u8eab\uff08\u4f8b\u5982\u8a2d\u5b9a `ctx.end_invocation = True`\uff09\u3002\n\n    === \"Python\"\n</code></pre> <pre><code>    ```python\n    # Pseudocode: Agent implementation receiving InvocationContext\n    from google.adk.agents import BaseAgent\n    from google.adk.agents.invocation_context import InvocationContext\n    from google.adk.events import Event\n    from typing import AsyncGenerator\n\n    class MyAgent(BaseAgent):\n        async def _run_async_impl(self, ctx: InvocationContext) -&gt; AsyncGenerator[Event, None]:\n            # Direct access example\n            agent_name = ctx.agent.name\n            session_id = ctx.session.id\n            print(f\"Agent {agent_name} running in session {session_id} for invocation {ctx.invocation_id}\")\n            # ... agent logic using ctx ...\n            yield # ... event ...\n    ```\n\n=== \"Java\"\n\n    ```java\n    // Pseudocode: Agent implementation receiving InvocationContext\n    import com.google.adk.agents.BaseAgent;\n    import com.google.adk.agents.InvocationContext;\n\n        LlmAgent root_agent =\n            LlmAgent.builder()\n                .model(\"gemini-***\")\n                .name(\"sample_agent\")\n                .description(\"Answers user questions.\")\n                .instruction(\n                    \"\"\"\n                    provide instruction for the agent here.\n                    \"\"\"\n                )\n                .tools(sampleTool)\n                .outputKey(\"YOUR_KEY\")\n                .build();\n\n        ConcurrentMap&lt;String, Object&gt; initialState = new ConcurrentHashMap&lt;&gt;();\n        initialState.put(\"YOUR_KEY\", \"\");\n\n        InMemoryRunner runner = new InMemoryRunner(agent);\n        Session session =\n              runner\n                  .sessionService()\n                  .createSession(runner.appName(), USER_ID, initialState, SESSION_ID )\n                  .blockingGet();\n\n       try (Scanner scanner = new Scanner(System.in, StandardCharsets.UTF_8)) {\n            while (true) {\n              System.out.print(\"\\nYou &gt; \");\n              String userInput = scanner.nextLine();\n\n              if (\"quit\".equalsIgnoreCase(userInput)) {\n                break;\n              }\n\n              Content userMsg = Content.fromParts(Part.fromText(userInput));\n              Flowable&lt;Event&gt; events = \n                      runner.runAsync(session.userId(), session.id(), userMsg);\n\n              System.out.print(\"\\nAgent &gt; \");\n              events.blockingForEach(event -&gt; \n                      System.out.print(event.stringifyContent()));\n          }\n\n        protected Flowable&lt;Event&gt; runAsyncImpl(InvocationContext invocationContext) {\n            // Direct access example\n            String agentName = invocationContext.agent.name\n            String sessionId = invocationContext.session.id\n            String invocationId = invocationContext.invocationId\n            System.out.println(\"Agent \" + agent_name + \" running in session \" + session_id + \" for invocation \" + invocationId)\n            // ... agent logic using ctx ...\n        }\n    ```\n</code></pre> <ol> <li> <p><code>ReadonlyContext</code></p> <ul> <li>\u4f7f\u7528\u60c5\u5883\uff1a \u7528\u65bc\u50c5\u9700\u8b80\u53d6\u57fa\u672c\u8cc7\u8a0a\u4e14\u4e0d\u5141\u8a31\u4fee\u6539\u7684\u60c5\u5883\uff08\u4f8b\u5982\uff1a<code>InstructionProvider</code> \u51fd\u5f0f\uff09\u3002\u540c\u6642\u4e5f\u662f\u5176\u4ed6 Context \u7684\u57fa\u790e\u985e\u5225\u3002</li> <li>\u76ee\u7684\uff1a \u63d0\u4f9b\u4e00\u500b\u5b89\u5168\u3001\u552f\u8b80\u7684\u57fa\u672c\u60c5\u5883\u8cc7\u8a0a\u6aa2\u8996\u3002</li> <li>\u4e3b\u8981\u5167\u5bb9\uff1a <code>invocation_id</code>\u3001<code>agent_name</code>\uff0c\u4ee5\u53ca\u76ee\u524d <code>state</code> \u7684\u552f\u8b80 view\u3002</li> </ul> PythonJava <pre><code># Pseudocode: Instruction provider receiving ReadonlyContext\nfrom google.adk.agents.readonly_context import ReadonlyContext\n\ndef my_instruction_provider(context: ReadonlyContext) -&gt; str:\n    # Read-only access example\n    user_tier = context.state().get(\"user_tier\", \"standard\") # Can read state\n    # context.state['new_key'] = 'value' # This would typically cause an error or be ineffective\n    return f\"Process the request for a {user_tier} user.\"\n</code></pre> <pre><code>// Pseudocode: Instruction provider receiving ReadonlyContext\nimport com.google.adk.agents.ReadonlyContext;\n\npublic String myInstructionProvider(ReadonlyContext context){\n    // Read-only access example\n    String userTier = context.state().get(\"user_tier\", \"standard\");\n    context.state().put('new_key', 'value'); //This would typically cause an error\n    return \"Process the request for a \" + userTier + \" user.\"\n}\n</code></pre> </li> <li> <p><code>CallbackContext</code></p> <ul> <li>\u4f7f\u7528\u5834\u666f\uff1a\u4f5c\u70ba <code>callback_context</code> \u50b3\u905e\u7d66 agent \u751f\u547d\u5468\u671f\u56de\u547c\uff08<code>before_agent_callback</code>\u3001<code>after_agent_callback</code>\uff09\u4ee5\u53ca\u6a21\u578b\u4e92\u52d5\u56de\u547c\uff08<code>before_model_callback</code>\u3001<code>after_model_callback</code>\uff09\u3002</li> <li>\u76ee\u7684\uff1a\u5354\u52a9\u5728\u56de\u547c\u5167\u6aa2\u67e5\u8207\u4fee\u6539\u72c0\u614b\u3001\u8207 artifacts \u4e92\u52d5\uff0c\u4ee5\u53ca\u5b58\u53d6\u547c\u53eb\u8a73\u7d30\u8cc7\u8a0a\u3002</li> <li>\u4e3b\u8981\u529f\u80fd\uff08\u76f8\u8f03\u65bc <code>ReadonlyContext</code> \u7684\u64f4\u5145\uff09\uff1a<ul> <li>\u53ef\u8b8a\u52d5\u7684 <code>state</code> \u5c6c\u6027\uff1a\u5141\u8a31\u8b80\u53d6\u53ca\u5beb\u5165 session state\u3002\u5728\u6b64\u6240\u505a\u7684\u8b8a\u66f4\uff08<code>callback_context.state['key'] = value</code>\uff09\u6703\u88ab\u8ffd\u8e64\uff0c\u4e26\u5728\u56de\u547c\u5f8c\u8207\u6846\u67b6\u7522\u751f\u7684\u4e8b\u4ef6\u95dc\u806f\u3002</li> <li>Artifact \u65b9\u6cd5\uff1a\u63d0\u4f9b <code>load_artifact(filename)</code> \u8207 <code>save_artifact(filename, part)</code> \u65b9\u6cd5\uff0c\u7528\u65bc\u8207\u5df2\u8a2d\u5b9a\u7684 <code>artifact_service</code> \u4e92\u52d5\u3002</li> <li>\u53ef\u76f4\u63a5\u5b58\u53d6 <code>user_content</code>\u3002</li> </ul> </li> </ul> PythonJava <pre><code># Pseudocode: Callback receiving CallbackContext\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.models import LlmRequest\nfrom google.genai import types\nfrom typing import Optional\n\ndef my_before_model_cb(callback_context: CallbackContext, request: LlmRequest) -&gt; Optional[types.Content]:\n    # Read/Write state example\n    call_count = callback_context.state.get(\"model_calls\", 0)\n    callback_context.state[\"model_calls\"] = call_count + 1 # Modify state\n\n    # Optionally load an artifact\n    # config_part = callback_context.load_artifact(\"model_config.json\")\n    print(f\"Preparing model call #{call_count + 1} for invocation {callback_context.invocation_id}\")\n    return None # Allow model call to proceed\n</code></pre> <pre><code>// Pseudocode: Callback receiving CallbackContext\nimport com.google.adk.agents.CallbackContext;\nimport com.google.adk.models.LlmRequest;\nimport com.google.genai.types.Content;\nimport java.util.Optional;\n\npublic Maybe&lt;LlmResponse&gt; myBeforeModelCb(CallbackContext callbackContext, LlmRequest request){\n    // Read/Write state example\n    callCount = callbackContext.state().get(\"model_calls\", 0)\n    callbackContext.state().put(\"model_calls\") = callCount + 1 # Modify state\n\n    // Optionally load an artifact\n    // Maybe&lt;Part&gt; configPart = callbackContext.loadArtifact(\"model_config.json\");\n    System.out.println(\"Preparing model call \" + callCount + 1);\n    return Maybe.empty(); // Allow model call to proceed\n}\n</code></pre> </li> <li> <p><code>ToolContext</code></p> <ul> <li>\u4f7f\u7528\u5834\u666f\uff1a\u4f5c\u70ba <code>tool_context</code> \u50b3\u905e\u7d66\u652f\u63f4 <code>FunctionTool</code> \u7684\u51fd\u5f0f\u4ee5\u53ca\u5de5\u5177\u57f7\u884c\u7684\u56de\u547c\u51fd\u5f0f\uff08<code>before_tool_callback</code>\u3001<code>after_tool_callback</code>\uff09\u3002</li> <li>\u7528\u9014\uff1a\u63d0\u4f9b\u8207 <code>CallbackContext</code> \u76f8\u540c\u7684\u529f\u80fd\uff0c\u4e26\u984d\u5916\u5305\u542b\u5de5\u5177\u57f7\u884c\u6240\u9700\u7684\u5c08\u7528\u65b9\u6cd5\uff0c\u4f8b\u5982\u8655\u7406\u9a57\u8b49\u3001\u8a18\u61b6\u9ad4\u641c\u5c0b\uff0c\u4ee5\u53ca\u5217\u51fa artifacts\u3002</li> <li>\u4e3b\u8981\u80fd\u529b\uff08\u76f8\u8f03\u65bc <code>CallbackContext</code> \u7684\u65b0\u589e\u529f\u80fd\uff09\uff1a<ul> <li>\u9a57\u8b49\u65b9\u6cd5\uff1a<code>request_credential(auth_config)</code> \u7528\u65bc\u89f8\u767c\u9a57\u8b49\u6d41\u7a0b\uff0c\u4ee5\u53ca <code>get_auth_response(auth_config)</code> \u7528\u65bc\u53d6\u5f97\u4f7f\u7528\u8005\uff0f\u7cfb\u7d71\u6240\u63d0\u4f9b\u7684\u8a8d\u8b49\u8cc7\u8a0a\u3002</li> <li>Artifact \u5217\u8868\uff1a<code>list_artifacts()</code> \u53ef\u7528\u65bc\u767c\u73fe\u76ee\u524d session \u4e2d\u53ef\u7528\u7684 artifacts\u3002</li> <li>\u8a18\u61b6\u9ad4\u641c\u5c0b\uff1a<code>search_memory(query)</code> \u53ef\u67e5\u8a62\u5df2\u8a2d\u5b9a\u7684 <code>memory_service</code>\u3002</li> <li><code>function_call_id</code> \u5c6c\u6027\uff1a\u8b58\u5225\u89f8\u767c\u6b64\u6b21\u5de5\u5177\u57f7\u884c\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7684\u7279\u5b9a function call\uff0c\u5c0d\u65bc\u6b63\u78ba\u4e32\u63a5\u9a57\u8b49\u8acb\u6c42\u6216\u56de\u61c9\u81f3\u95dc\u91cd\u8981\u3002</li> <li><code>actions</code> \u5c6c\u6027\uff1a\u53ef\u76f4\u63a5\u5b58\u53d6\u672c\u6b65\u9a5f\u7684 <code>EventActions</code> \u7269\u4ef6\uff0c\u8b93\u5de5\u5177\u80fd\u5920\u767c\u9001\u72c0\u614b\u8b8a\u66f4\u3001\u9a57\u8b49\u8acb\u6c42\u7b49\u8a0a\u865f\u3002</li> </ul> </li> </ul> PythonJava <pre><code># Pseudocode: Tool function receiving ToolContext\nfrom google.adk.tools import ToolContext\nfrom typing import Dict, Any\n\n# Assume this function is wrapped by a FunctionTool\ndef search_external_api(query: str, tool_context: ToolContext) -&gt; Dict[str, Any]:\n    api_key = tool_context.state.get(\"api_key\")\n    if not api_key:\n        # Define required auth config\n        # auth_config = AuthConfig(...)\n        # tool_context.request_credential(auth_config) # Request credentials\n        # Use the 'actions' property to signal the auth request has been made\n        # tool_context.actions.requested_auth_configs[tool_context.function_call_id] = auth_config\n        return {\"status\": \"Auth Required\"}\n\n    # Use the API key...\n    print(f\"Tool executing for query '{query}' using API key. Invocation: {tool_context.invocation_id}\")\n\n    # Optionally search memory or list artifacts\n    # relevant_docs = tool_context.search_memory(f\"info related to {query}\")\n    # available_files = tool_context.list_artifacts()\n\n    return {\"result\": f\"Data for {query} fetched.\"}\n</code></pre> <pre><code>// Pseudocode: Tool function receiving ToolContext\nimport com.google.adk.tools.ToolContext;\nimport java.util.HashMap;\nimport java.util.Map;\n\n// Assume this function is wrapped by a FunctionTool\npublic Map&lt;String, Object&gt; searchExternalApi(String query, ToolContext toolContext){\n    String apiKey = toolContext.state.get(\"api_key\");\n    if(apiKey.isEmpty()){\n        // Define required auth config\n        // authConfig = AuthConfig(...);\n        // toolContext.requestCredential(authConfig); # Request credentials\n        // Use the 'actions' property to signal the auth request has been made\n        ...\n        return Map.of(\"status\", \"Auth Required\");\n\n    // Use the API key...\n    System.out.println(\"Tool executing for query \" + query + \" using API key. \");\n\n    // Optionally list artifacts\n    // Single&lt;List&lt;String&gt;&gt; availableFiles = toolContext.listArtifacts();\n\n    return Map.of(\"result\", \"Data for \" + query + \" fetched\");\n}\n</code></pre> </li> </ol> <p>\u7406\u89e3\u9019\u4e9b\u4e0d\u540c\u7684 context \u7269\u4ef6\u4ee5\u53ca\u4f55\u6642\u4f7f\u7528\u5b83\u5011\uff0c\u662f\u6709\u6548\u7ba1\u7406 state\u3001\u5b58\u53d6\u670d\u52d9\uff0c\u4ee5\u53ca\u63a7\u5236 Agent Development Kit (ADK) \u61c9\u7528\u7a0b\u5f0f\u6d41\u7a0b\u7684\u95dc\u9375\u3002\u4e0b\u4e00\u7bc0\u5c07\u8a73\u7d30\u8aaa\u660e\u4f60\u53ef\u4ee5\u5229\u7528\u9019\u4e9b context \u57f7\u884c\u7684\u5e38\u898b\u4efb\u52d9\u3002</p>"},{"location":"context/#context_2","title":"\u4f7f\u7528 Context \u57f7\u884c\u5e38\u898b\u4efb\u52d9","text":"<p>\u73fe\u5728\u4f60\u5df2\u7d93\u4e86\u89e3\u4e0d\u540c\u7684 context \u7269\u4ef6\uff0c\u63a5\u4e0b\u4f86\u6211\u5011\u5c07\u91cd\u9ede\u8aaa\u660e\u5728\u5efa\u7acb agent \u8207\u5de5\u5177\uff08tools\uff09\u6642\uff0c\u5982\u4f55\u5229\u7528\u9019\u4e9b context \u4f86\u5b8c\u6210\u5e38\u898b\u4efb\u52d9\u3002</p>"},{"location":"context/#_1","title":"\u5b58\u53d6\u8cc7\u8a0a","text":"<p>\u4f60\u7d93\u5e38\u9700\u8981\u8b80\u53d6\u5132\u5b58\u5728 context \u5167\u7684\u8cc7\u8a0a\u3002</p> <ul> <li> <p>\u8b80\u53d6 session state\uff1a \u5b58\u53d6\u5728\u5148\u524d\u6b65\u9a5f\u6216\u4f7f\u7528\u8005\uff0f\u61c9\u7528\u5c64\u7d1a\u8a2d\u5b9a\u4e2d\u5132\u5b58\u7684\u8cc7\u6599\u3002\u8acb\u4f7f\u7528\u985e\u4f3c\u5b57\u5178\uff08dictionary\uff09\u7684\u65b9\u5f0f\u5b58\u53d6 <code>state</code> \u5c6c\u6027\u3002</p> PythonJava <pre><code># Pseudocode: In a Tool function\nfrom google.adk.tools import ToolContext\n\ndef my_tool(tool_context: ToolContext, **kwargs):\n    user_pref = tool_context.state.get(\"user_display_preference\", \"default_mode\")\n    api_endpoint = tool_context.state.get(\"app:api_endpoint\") # Read app-level state\n\n    if user_pref == \"dark_mode\":\n        # ... apply dark mode logic ...\n        pass\n    print(f\"Using API endpoint: {api_endpoint}\")\n    # ... rest of tool logic ...\n\n# Pseudocode: In a Callback function\nfrom google.adk.agents.callback_context import CallbackContext\n\ndef my_callback(callback_context: CallbackContext, **kwargs):\n    last_tool_result = callback_context.state.get(\"temp:last_api_result\") # Read temporary state\n    if last_tool_result:\n        print(f\"Found temporary result from last tool: {last_tool_result}\")\n    # ... callback logic ...\n</code></pre> <pre><code>// Pseudocode: In a Tool function\nimport com.google.adk.tools.ToolContext;\n\npublic void myTool(ToolContext toolContext){\n   String userPref = toolContext.state().get(\"user_display_preference\");\n   String apiEndpoint = toolContext.state().get(\"app:api_endpoint\"); // Read app-level state\n   if(userPref.equals(\"dark_mode\")){\n        // ... apply dark mode logic ...\n        pass\n    }\n   System.out.println(\"Using API endpoint: \" + api_endpoint);\n   // ... rest of tool logic ...\n}\n\n\n// Pseudocode: In a Callback function\nimport com.google.adk.agents.CallbackContext;\n\n    public void myCallback(CallbackContext callbackContext){\n        String lastToolResult = (String) callbackContext.state().get(\"temp:last_api_result\"); // Read temporary state\n    }\n    if(!(lastToolResult.isEmpty())){\n        System.out.println(\"Found temporary result from last tool: \" + lastToolResult);\n    }\n    // ... callback logic ...\n</code></pre> </li> <li> <p>\u53d6\u5f97\u76ee\u524d\u8b58\u5225\u78bc\uff1a \u9069\u7528\u65bc\u6839\u64da\u7576\u524d\u64cd\u4f5c\u9032\u884c\u65e5\u8a8c\u8a18\u9304\u6216\u81ea\u8a02\u908f\u8f2f\u3002</p> PythonJava <pre><code># Pseudocode: In any context (ToolContext shown)\nfrom google.adk.tools import ToolContext\n\ndef log_tool_usage(tool_context: ToolContext, **kwargs):\n    agent_name = tool_context.agent_nameSystem.out.println(\"Found temporary result from last tool: \" + lastToolResult);\n    inv_id = tool_context.invocation_id\n    func_call_id = getattr(tool_context, 'function_call_id', 'N/A') # Specific to ToolContext\n\n    print(f\"Log: Invocation={inv_id}, Agent={agent_name}, FunctionCallID={func_call_id} - Tool Executed.\")\n</code></pre> <pre><code>// Pseudocode: In any context (ToolContext shown)\n import com.google.adk.tools.ToolContext;\n\n public void logToolUsage(ToolContext toolContext){\n            String agentName = toolContext.agentName;\n            String invId = toolContext.invocationId;\n            String functionCallId = toolContext.functionCallId().get(); // Specific to ToolContext\n            System.out.println(\"Log: Invocation= \" + invId &amp;+ \" Agent= \" + agentName);\n        }\n</code></pre> </li> <li> <p>\u5b58\u53d6\u521d\u59cb\u4f7f\u7528\u8005\u8f38\u5165\uff1a \u56de\u6eaf\u81f3\u555f\u52d5\u76ee\u524d\u547c\u53eb\uff08invocation\uff09\u7684\u8a0a\u606f\u3002</p> PythonJava <pre><code># Pseudocode: In a Callback\nfrom google.adk.agents.callback_context import CallbackContext\n\ndef check_initial_intent(callback_context: CallbackContext, **kwargs):\n    initial_text = \"N/A\"\n    if callback_context.user_content and callback_context.user_content.parts:\n        initial_text = callback_context.user_content.parts[0].text or \"Non-text input\"\n\n    print(f\"This invocation started with user input: '{initial_text}'\")\n\n# Pseudocode: In an Agent's _run_async_impl\n# async def _run_async_impl(self, ctx: InvocationContext) -&gt; AsyncGenerator[Event, None]:\n#     if ctx.user_content and ctx.user_content.parts:\n#         initial_text = ctx.user_content.parts[0].text\n#         print(f\"Agent logic remembering initial query: {initial_text}\")\n#     ...\n</code></pre> <pre><code>// Pseudocode: In a Callback\nimport com.google.adk.agents.CallbackContext;\n\npublic void checkInitialIntent(CallbackContext callbackContext){\n    String initialText = \"N/A\";\n    if((!(callbackContext.userContent().isEmpty())) &amp;&amp; (!(callbackContext.userContent().parts.isEmpty()))){\n        initialText = cbx.userContent().get().parts().get().get(0).text().get();\n        ...\n        System.out.println(\"This invocation started with user input: \" + initialText)\n    }\n}\n</code></pre> </li> </ul>"},{"location":"context/#state","title":"\u7ba1\u7406 State","text":"<p>State\uff08\u72c0\u614b\uff09\u5c0d\u65bc\u8a18\u61b6\u8207\u8cc7\u6599\u6d41\u52d5\u81f3\u95dc\u91cd\u8981\u3002\u7576\u4f60\u4f7f\u7528 <code>CallbackContext</code> \u6216 <code>ToolContext</code> \u4fee\u6539 state \u6642\uff0c\u9019\u4e9b\u8b8a\u66f4\u6703\u81ea\u52d5\u7531\u6846\u67b6\u8ffd\u8e64\u4e26\u6301\u4e45\u5316\u3002</p> <ul> <li> <p>\u904b\u4f5c\u65b9\u5f0f\uff1a \u5c0d <code>callback_context.state['my_key'] = my_value</code> \u6216 <code>tool_context.state['my_key'] = my_value</code> \u9032\u884c\u5beb\u5165\u6642\uff0c\u6703\u5c07\u9019\u500b\u8b8a\u66f4\u65b0\u589e\u5230\u8207\u7576\u524d\u6b65\u9a5f\u4e8b\u4ef6\u76f8\u95dc\u806f\u7684 <code>EventActions.state_delta</code>\u3002<code>SessionService</code> \u6703\u5728\u6301\u4e45\u5316\u4e8b\u4ef6\u6642\u5957\u7528\u9019\u4e9b\u8b8a\u52d5\uff08delta\uff09\u3002</p> </li> <li> <p>\u5728\u5de5\u5177\u9593\u50b3\u905e\u8cc7\u6599</p> PythonJava <pre><code># Pseudocode: Tool 1 - Fetches user ID\nfrom google.adk.tools import ToolContext\nimport uuid\n\ndef get_user_profile(tool_context: ToolContext) -&gt; dict:\n    user_id = str(uuid.uuid4()) # Simulate fetching ID\n    # Save the ID to state for the next tool\n    tool_context.state[\"temp:current_user_id\"] = user_id\n    return {\"profile_status\": \"ID generated\"}\n\n# Pseudocode: Tool 2 - Uses user ID from state\ndef get_user_orders(tool_context: ToolContext) -&gt; dict:\n    user_id = tool_context.state.get(\"temp:current_user_id\")\n    if not user_id:\n        return {\"error\": \"User ID not found in state\"}\n\n    print(f\"Fetching orders for user ID: {user_id}\")\n    # ... logic to fetch orders using user_id ...\n    return {\"orders\": [\"order123\", \"order456\"]}\n</code></pre> <pre><code>// Pseudocode: Tool 1 - Fetches user ID\nimport com.google.adk.tools.ToolContext;\nimport java.util.UUID;\n\npublic Map&lt;String, String&gt; getUserProfile(ToolContext toolContext){\n    String userId = UUID.randomUUID().toString();\n    // Save the ID to state for the next tool\n    toolContext.state().put(\"temp:current_user_id\", user_id);\n    return Map.of(\"profile_status\", \"ID generated\");\n}\n\n// Pseudocode: Tool 2 - Uses user ID from state\npublic  Map&lt;String, String&gt; getUserOrders(ToolContext toolContext){\n    String userId = toolContext.state().get(\"temp:current_user_id\");\n    if(userId.isEmpty()){\n        return Map.of(\"error\", \"User ID not found in state\");\n    }\n    System.out.println(\"Fetching orders for user id: \" + userId);\n     // ... logic to fetch orders using user_id ...\n    return Map.of(\"orders\", \"order123\");\n}\n</code></pre> </li> <li> <p>\u66f4\u65b0\u4f7f\u7528\u8005\u504f\u597d\u8a2d\u5b9a\uff1a</p> PythonJava <pre><code># Pseudocode: Tool or Callback identifies a preference\nfrom google.adk.tools import ToolContext # Or CallbackContext\n\ndef set_user_preference(tool_context: ToolContext, preference: str, value: str) -&gt; dict:\n    # Use 'user:' prefix for user-level state (if using a persistent SessionService)\n    state_key = f\"user:{preference}\"\n    tool_context.state[state_key] = value\n    print(f\"Set user preference '{preference}' to '{value}'\")\n    return {\"status\": \"Preference updated\"}\n</code></pre> <pre><code>// Pseudocode: Tool or Callback identifies a preference\nimport com.google.adk.tools.ToolContext; // Or CallbackContext\n\npublic Map&lt;String, String&gt; setUserPreference(ToolContext toolContext, String preference, String value){\n    // Use 'user:' prefix for user-level state (if using a persistent SessionService)\n    String stateKey = \"user:\" + preference;\n    toolContext.state().put(stateKey, value);\n    System.out.println(\"Set user preference '\" + preference + \"' to '\" + value + \"'\");\n    return Map.of(\"status\", \"Preference updated\");\n}\n</code></pre> </li> <li> <p>State \u524d\u7db4\u8a5e\uff1a \u96d6\u7136\u57fa\u672c\u7684 session state \u662f\u91dd\u5c0d\u55ae\u4e00 session\uff0c\u4f46\u50cf\u662f <code>app:</code> \u548c <code>user:</code> \u9019\u985e\u524d\u7db4\u8a5e\u53ef\u4ee5\u642d\u914d\u6301\u4e45\u5316\u7684 <code>SessionService</code> \u5be6\u4f5c\uff08\u4f8b\u5982 <code>DatabaseSessionService</code> \u6216 <code>VertexAiSessionService</code>\uff09\u4f86\u8868\u793a\u66f4\u5ee3\u6cdb\u7684\u7bc4\u570d\uff08\u4f8b\u5982\u61c9\u7528\u7a0b\u5f0f\u5168\u57df\u6216\u4f7f\u7528\u8005\u8de8 session \u7684\u7bc4\u570d\uff09\u3002<code>temp:</code> \u5247\u53ef\u7528\u4f86\u6a19\u793a\u50c5\u5728\u672c\u6b21\u547c\u53eb\uff08invocation\uff09\u4e2d\u76f8\u95dc\u7684\u8cc7\u6599\u3002</p> </li> </ul>"},{"location":"context/#artifact","title":"\u4f7f\u7528 Artifact","text":"<p>\u4f7f\u7528 artifact \u4f86\u8655\u7406\u8207 session \u76f8\u95dc\u7684\u6a94\u6848\u6216\u5927\u578b\u8cc7\u6599 blob\u3002\u5e38\u898b\u7528\u9014\uff1a\u8655\u7406\u4e0a\u50b3\u7684\u6587\u4ef6\u3002</p> <ul> <li> <p>\u6587\u4ef6\u6458\u8981\u5668\uff08Document Summarizer\uff09\u7bc4\u4f8b\u6d41\u7a0b\uff1a</p> <ol> <li> <p>\u64f7\u53d6\u53c3\u8003\u8cc7\u6599\uff08\u4f8b\u5982\u5728 Setup Tool \u6216 Callback \u4e2d\uff09\uff1a \u5c07\u6587\u4ef6\u7684 \u8def\u5f91\u6216 URI \u5132\u5b58\u70ba artifact\uff0c\u800c\u4e0d\u662f\u5c07\u6574\u500b\u5167\u5bb9\u5132\u5b58\u4e0b\u4f86\u3002</p> PythonJava <pre><code># Pseudocode: In a callback or initial tool\nfrom google.adk.agents.callback_context import CallbackContext # Or ToolContext\nfrom google.genai import types\n\ndef save_document_reference(context: CallbackContext, file_path: str) -&gt; None:\n    # Assume file_path is something like \"gs://my-bucket/docs/report.pdf\" or \"/local/path/to/report.pdf\"\n    try:\n        # Create a Part containing the path/URI text\n        artifact_part = types.Part(text=file_path)\n        version = context.save_artifact(\"document_to_summarize.txt\", artifact_part)\n        print(f\"Saved document reference '{file_path}' as artifact version {version}\")\n        # Store the filename in state if needed by other tools\n        context.state[\"temp:doc_artifact_name\"] = \"document_to_summarize.txt\"\n    except ValueError as e:\n        print(f\"Error saving artifact: {e}\") # E.g., Artifact service not configured\n    except Exception as e:\n        print(f\"Unexpected error saving artifact reference: {e}\")\n\n# Example usage:\n# save_document_reference(callback_context, \"gs://my-bucket/docs/report.pdf\")\n</code></pre> <pre><code>// Pseudocode: In a callback or initial tool\nimport com.google.adk.agents.CallbackContext;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\n\n\npubic void saveDocumentReference(CallbackContext context, String filePath){\n    // Assume file_path is something like \"gs://my-bucket/docs/report.pdf\" or \"/local/path/to/report.pdf\"\n    try{\n        // Create a Part containing the path/URI text\n        Part artifactPart = types.Part(filePath)\n        Optional&lt;Integer&gt; version = context.saveArtifact(\"document_to_summarize.txt\", artifactPart)\n        System.out.println(\"Saved document reference\" + filePath + \" as artifact version \" + version);\n        // Store the filename in state if needed by other tools\n        context.state().put(\"temp:doc_artifact_name\", \"document_to_summarize.txt\");\n    } catch(Exception e){\n        System.out.println(\"Unexpected error saving artifact reference: \" + e);\n    }\n}\n\n// Example usage:\n// saveDocumentReference(context, \"gs://my-bucket/docs/report.pdf\")\n</code></pre> </li> <li> <p>Summarizer Tool\uff1a \u8f09\u5165 artifact \u4ee5\u53d6\u5f97\u8def\u5f91/URI\uff0c\u4f7f\u7528\u9069\u7576\u7684\u51fd\u5f0f\u5eab\u8b80\u53d6\u5be6\u969b\u6587\u4ef6\u5167\u5bb9\uff0c\u9032\u884c\u6458\u8981\uff0c\u4e26\u56de\u50b3\u7d50\u679c\u3002</p> PythonJava <pre><code># Pseudocode: In the Summarizer tool function\nfrom google.adk.tools import ToolContext\nfrom google.genai import types\n# Assume libraries like google.cloud.storage or built-in open are available\n# Assume a 'summarize_text' function exists\n# from my_summarizer_lib import summarize_text\n\ndef summarize_document_tool(tool_context: ToolContext) -&gt; dict:\n    artifact_name = tool_context.state.get(\"temp:doc_artifact_name\")\n    if not artifact_name:\n        return {\"error\": \"Document artifact name not found in state.\"}\n\n    try:\n        # 1. Load the artifact part containing the path/URI\n        artifact_part = tool_context.load_artifact(artifact_name)\n        if not artifact_part or not artifact_part.text:\n            return {\"error\": f\"Could not load artifact or artifact has no text path: {artifact_name}\"}\n\n        file_path = artifact_part.text\n        print(f\"Loaded document reference: {file_path}\")\n\n        # 2. Read the actual document content (outside ADK context)\n        document_content = \"\"\n        if file_path.startswith(\"gs://\"):\n            # Example: Use GCS client library to download/read\n            # from google.cloud import storage\n            # client = storage.Client()\n            # blob = storage.Blob.from_string(file_path, client=client)\n            # document_content = blob.download_as_text() # Or bytes depending on format\n            pass # Replace with actual GCS reading logic\n        elif file_path.startswith(\"/\"):\n             # Example: Use local file system\n             with open(file_path, 'r', encoding='utf-8') as f:\n                 document_content = f.read()\n        else:\n            return {\"error\": f\"Unsupported file path scheme: {file_path}\"}\n\n        # 3. Summarize the content\n        if not document_content:\n             return {\"error\": \"Failed to read document content.\"}\n\n        # summary = summarize_text(document_content) # Call your summarization logic\n        summary = f\"Summary of content from {file_path}\" # Placeholder\n\n        return {\"summary\": summary}\n\n    except ValueError as e:\n         return {\"error\": f\"Artifact service error: {e}\"}\n    except FileNotFoundError:\n         return {\"error\": f\"Local file not found: {file_path}\"}\n    # except Exception as e: # Catch specific exceptions for GCS etc.\n    #      return {\"error\": f\"Error reading document {file_path}: {e}\"}\n</code></pre> <pre><code>// Pseudocode: In the Summarizer tool function\nimport com.google.adk.tools.ToolContext;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\n\npublic Map&lt;String, String&gt; summarizeDocumentTool(ToolContext toolContext){\n    String artifactName = toolContext.state().get(\"temp:doc_artifact_name\");\n    if(artifactName.isEmpty()){\n        return Map.of(\"error\", \"Document artifact name not found in state.\");\n    }\n    try{\n        // 1. Load the artifact part containing the path/URI\n        Maybe&lt;Part&gt; artifactPart = toolContext.loadArtifact(artifactName);\n        if((artifactPart == null) || (artifactPart.text().isEmpty())){\n            return Map.of(\"error\", \"Could not load artifact or artifact has no text path: \" + artifactName);\n        }\n        filePath = artifactPart.text();\n        System.out.println(\"Loaded document reference: \" + filePath);\n\n        // 2. Read the actual document content (outside ADK context)\n        String documentContent = \"\";\n        if(filePath.startsWith(\"gs://\")){\n            // Example: Use GCS client library to download/read into documentContent\n            pass; // Replace with actual GCS reading logic\n        } else if(){\n            // Example: Use local file system to download/read into documentContent\n        } else{\n            return Map.of(\"error\", \"Unsupported file path scheme: \" + filePath); \n        }\n\n        // 3. Summarize the content\n        if(documentContent.isEmpty()){\n            return Map.of(\"error\", \"Failed to read document content.\"); \n        }\n\n        // summary = summarizeText(documentContent) // Call your summarization logic\n        summary = \"Summary of content from \" + filePath; // Placeholder\n\n        return Map.of(\"summary\", summary);\n    } catch(IllegalArgumentException e){\n        return Map.of(\"error\", \"Artifact service error \" + filePath + e);\n    } catch(FileNotFoundException e){\n        return Map.of(\"error\", \"Local file not found \" + filePath + e);\n    } catch(Exception e){\n        return Map.of(\"error\", \"Error reading document \" + filePath + e);\n    }\n}\n</code></pre> </li> </ol> </li> <li> <p>\u5217\u51fa\u6a94\u6848 (Artifacts)\uff1a \u63a2\u7d22\u6709\u54ea\u4e9b\u6a94\u6848\u53ef\u7528\u3002</p> PythonJava <pre><code># Pseudocode: In a tool function\nfrom google.adk.tools import ToolContext\n\ndef check_available_docs(tool_context: ToolContext) -&gt; dict:\n    try:\n        artifact_keys = tool_context.list_artifacts()\n        print(f\"Available artifacts: {artifact_keys}\")\n        return {\"available_docs\": artifact_keys}\n    except ValueError as e:\n        return {\"error\": f\"Artifact service error: {e}\"}\n</code></pre> <pre><code>// Pseudocode: In a tool function\nimport com.google.adk.tools.ToolContext;\n\npublic Map&lt;String, String&gt; checkAvailableDocs(ToolContext toolContext){\n    try{\n        Single&lt;List&lt;String&gt;&gt; artifactKeys = toolContext.listArtifacts();\n        System.out.println(\"Available artifacts\" + artifactKeys.tostring());\n        return Map.of(\"availableDocs\", \"artifactKeys\");\n    } catch(IllegalArgumentException e){\n        return Map.of(\"error\", \"Artifact service error: \" + e);\n    }\n}\n</code></pre> </li> </ul>"},{"location":"context/#_2","title":"\u8655\u7406\u5de5\u5177\u9a57\u8b49","text":"<p>\u5b89\u5168\u5730\u7ba1\u7406\u5de5\u5177\u6240\u9700\u7684 API \u91d1\u9470\u6216\u5176\u4ed6\u8a8d\u8b49\u8cc7\u8a0a\u3002</p> <p><pre><code># Pseudocode: Tool requiring auth\nfrom google.adk.tools import ToolContext\nfrom google.adk.auth import AuthConfig # Assume appropriate AuthConfig is defined\n\n# Define your required auth configuration (e.g., OAuth, API Key)\nMY_API_AUTH_CONFIG = AuthConfig(...)\nAUTH_STATE_KEY = \"user:my_api_credential\" # Key to store retrieved credential\n\ndef call_secure_api(tool_context: ToolContext, request_data: str) -&gt; dict:\n    # 1. Check if credential already exists in state\n    credential = tool_context.state.get(AUTH_STATE_KEY)\n\n    if not credential:\n        # 2. If not, request it\n        print(\"Credential not found, requesting...\")\n        try:\n            tool_context.request_credential(MY_API_AUTH_CONFIG)\n            # The framework handles yielding the event. The tool execution stops here for this turn.\n            return {\"status\": \"Authentication required. Please provide credentials.\"}\n        except ValueError as e:\n            return {\"error\": f\"Auth error: {e}\"} # e.g., function_call_id missing\n        except Exception as e:\n            return {\"error\": f\"Failed to request credential: {e}\"}\n\n    # 3. If credential exists (might be from a previous turn after request)\n    #    or if this is a subsequent call after auth flow completed externally\n    try:\n        # Optionally, re-validate/retrieve if needed, or use directly\n        # This might retrieve the credential if the external flow just completed\n        auth_credential_obj = tool_context.get_auth_response(MY_API_AUTH_CONFIG)\n        api_key = auth_credential_obj.api_key # Or access_token, etc.\n\n        # Store it back in state for future calls within the session\n        tool_context.state[AUTH_STATE_KEY] = auth_credential_obj.model_dump() # Persist retrieved credential\n\n        print(f\"Using retrieved credential to call API with data: {request_data}\")\n        # ... Make the actual API call using api_key ...\n        api_result = f\"API result for {request_data}\"\n\n        return {\"result\": api_result}\n    except Exception as e:\n        # Handle errors retrieving/using the credential\n        print(f\"Error using credential: {e}\")\n        # Maybe clear the state key if credential is invalid?\n        # tool_context.state[AUTH_STATE_KEY] = None\n        return {\"error\": \"Failed to use credential\"}\n</code></pre> \u8acb\u8a18\u4f4f\uff1a<code>request_credential</code> \u6703\u66ab\u505c\u5de5\u5177\uff0c\u4e26\u63d0\u793a\u9700\u8981\u9032\u884c\u9a57\u8b49\u3002\u4f7f\u7528\u8005\u6216\u7cfb\u7d71\u63d0\u4f9b\u8a8d\u8b49\u8cc7\u8a0a\u5f8c\uff0c\u5728\u5f8c\u7e8c\u547c\u53eb\u6642\uff0c<code>get_auth_response</code>\uff08\u6216\u518d\u6b21\u6aa2\u67e5\u72c0\u614b\uff09\u5373\u53ef\u8b93\u5de5\u5177\u7e7c\u7e8c\u57f7\u884c\u3002 <code>tool_context.function_call_id</code> \u7531\u6846\u67b6\u96b1\u5f0f\u4f7f\u7528\uff0c\u7528\u65bc\u9023\u7d50\u8acb\u6c42\u8207\u56de\u61c9\u3002</p>"},{"location":"context/#memory","title":"\u5584\u7528\u8a18\u61b6\u9ad4\uff08Memory\uff09","text":"<p>\u5f9e\u904e\u53bb\u6216\u5916\u90e8\u4f86\u6e90\u5b58\u53d6\u76f8\u95dc\u8cc7\u8a0a\u3002</p> <pre><code># Pseudocode: Tool using memory search\nfrom google.adk.tools import ToolContext\n\ndef find_related_info(tool_context: ToolContext, topic: str) -&gt; dict:\n    try:\n        search_results = tool_context.search_memory(f\"Information about {topic}\")\n        if search_results.results:\n            print(f\"Found {len(search_results.results)} memory results for '{topic}'\")\n            # Process search_results.results (which are SearchMemoryResponseEntry)\n            top_result_text = search_results.results[0].text\n            return {\"memory_snippet\": top_result_text}\n        else:\n            return {\"message\": \"No relevant memories found.\"}\n    except ValueError as e:\n        return {\"error\": f\"Memory service error: {e}\"} # e.g., Service not configured\n    except Exception as e:\n        return {\"error\": f\"Unexpected error searching memory: {e}\"}\n</code></pre>"},{"location":"context/#invocationcontext","title":"\u9032\u968e\uff1a\u76f4\u63a5\u4f7f\u7528 <code>InvocationContext</code>","text":"<p>\u96d6\u7136\u5927\u591a\u6578\u4e92\u52d5\u662f\u900f\u904e <code>CallbackContext</code> \u6216 <code>ToolContext</code> \u9032\u884c\uff0c\u4f46\u6709\u6642 agent \u7684\u6838\u5fc3\u908f\u8f2f\uff08<code>_run_async_impl</code>/<code>_run_live_impl</code>\uff09\u9700\u8981\u76f4\u63a5\u5b58\u53d6\u3002</p> <pre><code># Pseudocode: Inside agent's _run_async_impl\nfrom google.adk.agents import BaseAgent\nfrom google.adk.agents.invocation_context import InvocationContext\nfrom google.adk.events import Event\nfrom typing import AsyncGenerator\n\nclass MyControllingAgent(BaseAgent):\n    async def _run_async_impl(self, ctx: InvocationContext) -&gt; AsyncGenerator[Event, None]:\n        # Example: Check if a specific service is available\n        if not ctx.memory_service:\n            print(\"Memory service is not available for this invocation.\")\n            # Potentially change agent behavior\n\n        # Example: Early termination based on some condition\n        if ctx.session.state.get(\"critical_error_flag\"):\n            print(\"Critical error detected, ending invocation.\")\n            ctx.end_invocation = True # Signal framework to stop processing\n            yield Event(author=self.name, invocation_id=ctx.invocation_id, content=\"Stopping due to critical error.\")\n            return # Stop this agent's execution\n\n        # ... Normal agent processing ...\n        yield # ... event ...\n</code></pre> <p>\u8a2d\u5b9a <code>ctx.end_invocation = True</code> \u662f\u4e00\u7a2e\u8b93 agent \u6216\u5176 callbacks/tools \u80fd\u5920\u5f9e\u5167\u90e8\uff08\u900f\u904e\u5404\u81ea\u7684 context \u7269\u4ef6\uff0c\u9019\u4e9b\u7269\u4ef6\u540c\u6642\u4e5f\u80fd\u4fee\u6539\u5e95\u5c64 <code>InvocationContext</code> \u7684\u65d7\u6a19\uff09\u512a\u96c5\u5730\u7d42\u6b62\u6574\u500b\u8acb\u6c42-\u56de\u61c9\u6d41\u7a0b\u7684\u65b9\u6cd5\u3002</p>"},{"location":"context/#_3","title":"\u91cd\u8981\u91cd\u9ede\u8207\u6700\u4f73\u5be6\u8e10","text":"<ul> <li>\u9078\u7528\u6b63\u78ba\u7684 Context\uff1a \u8acb\u52d9\u5fc5\u4f7f\u7528\u6240\u63d0\u4f9b\u7684\u6700\u5177\u9ad4\u7684 context \u7269\u4ef6\uff08tools/tool-callbacks \u4e2d\u7684 <code>ToolContext</code>\uff0cagent/model-callbacks \u4e2d\u7684 <code>CallbackContext</code>\uff0c\u9069\u7528\u6642\u5247\u70ba <code>ReadonlyContext</code>\uff09\u3002\u50c5\u5728\u5fc5\u8981\u6642\uff0c\u624d\u76f4\u63a5\u65bc <code>_run_async_impl</code> / <code>_run_live_impl</code> \u4e2d\u4f7f\u7528\u5b8c\u6574\u7684 <code>InvocationContext</code>\uff08<code>ctx</code>\uff09\u3002</li> <li>State \u7528\u65bc\u8cc7\u6599\u6d41\u901a\uff1a <code>context.state</code> \u662f\u5728\u4e00\u6b21\u547c\u53eb\u5167\u5206\u4eab\u8cc7\u6599\u3001\u8a18\u61b6\u504f\u597d\u8a2d\u5b9a\uff0c\u4ee5\u53ca\u7ba1\u7406\u5c0d\u8a71\u8a18\u61b6\u7684\u4e3b\u8981\u65b9\u5f0f\u3002\u82e5\u4f7f\u7528\u6301\u4e45\u5316\u5132\u5b58\u6642\uff0c\u8acb\u8b39\u614e\u4f7f\u7528\u524d\u7db4\uff08\u5982 <code>app:</code>\u3001<code>user:</code>\u3001<code>temp:</code>\uff09\u3002</li> <li>Artifacts \u7528\u65bc\u6a94\u6848\u7ba1\u7406\uff1a \u8acb\u4f7f\u7528 <code>context.save_artifact</code> \u548c <code>context.load_artifact</code> \u4f86\u7ba1\u7406\u6a94\u6848\u53c3\u8003\uff08\u5982\u8def\u5f91\u6216 URI\uff09\u6216\u8f03\u5927\u7684\u8cc7\u6599 blob\u3002\u5efa\u8b70\u5132\u5b58\u53c3\u8003\uff0c\u4e26\u65bc\u9700\u8981\u6642\u518d\u8f09\u5165\u5167\u5bb9\u3002</li> <li>\u8b8a\u66f4\u8ffd\u8e64\uff1a \u900f\u904e context \u65b9\u6cd5\u5c0d state \u6216 artifacts \u6240\u505a\u7684\u4fee\u6539\uff0c\u6703\u81ea\u52d5\u95dc\u806f\u5230\u7576\u524d\u6b65\u9a5f\u7684 <code>EventActions</code>\uff0c\u4e26\u7531 <code>SessionService</code> \u8655\u7406\u3002</li> <li>\u5f9e\u7c21\u5165\u9580\uff1a \u8acb\u5148\u5c08\u6ce8\u65bc <code>state</code> \u53ca\u57fa\u672c artifact \u7684\u4f7f\u7528\u3002\u7576\u9700\u6c42\u8b8a\u8907\u96dc\u6642\uff0c\u518d\u9032\u4e00\u6b65\u63a2\u7d22\u9a57\u8b49\u3001\u8a18\u61b6\u9ad4\uff0c\u4ee5\u53ca\u9032\u968e\u7684 <code>InvocationContext</code> \u6b04\u4f4d\uff08\u4f8b\u5982\u5373\u6642\u4e32\u6d41\u76f8\u95dc\u6b04\u4f4d\uff09\u3002</li> </ul> <p>\u900f\u904e\u7406\u89e3\u4e26\u6709\u6548\u904b\u7528\u9019\u4e9b context \u7269\u4ef6\uff0c\u4f60\u53ef\u4ee5\u5229\u7528 Agent Development Kit (ADK) \u5efa\u7acb\u66f4\u5148\u9032\u3001\u6709\u72c0\u614b\u4e14\u529f\u80fd\u66f4\u5f37\u5927\u7684 agent\u3002</p>"},{"location":"context/index.en/","title":"Context","text":""},{"location":"context/index.en/#what-are-context","title":"What are Context","text":"<p>In the Agent Development Kit (ADK), \"context\" refers to the crucial bundle of information available to your agent and its tools during specific operations. Think of it as the necessary background knowledge and resources needed to handle a current task or conversation turn effectively.</p> <p>Agents often need more than just the latest user message to perform well. Context is essential because it enables:</p> <ol> <li>Maintaining State: Remembering details across multiple steps in a conversation (e.g., user preferences, previous calculations, items in a shopping cart). This is primarily managed through session state.</li> <li>Passing Data: Sharing information discovered or generated in one step (like an LLM call or a tool execution) with subsequent steps. Session state is key here too.</li> <li>Accessing Services: Interacting with framework capabilities like:<ul> <li>Artifact Storage: Saving or loading files or data blobs (like PDFs, images, configuration files) associated with the session.</li> <li>Memory: Searching for relevant information from past interactions or external knowledge sources connected to the user.</li> <li>Authentication: Requesting and retrieving credentials needed by tools to access external APIs securely.</li> </ul> </li> <li>Identity and Tracking: Knowing which agent is currently running (<code>agent.name</code>) and uniquely identifying the current request-response cycle (<code>invocation_id</code>) for logging and debugging.</li> <li>Tool-Specific Actions: Enabling specialized operations within tools, such as requesting authentication or searching memory, which require access to the current interaction's details.</li> </ol> <p>The central piece holding all this information together for a single, complete user-request-to-final-response cycle (an invocation) is the <code>InvocationContext</code>. However, you typically won't create or manage this object directly. The ADK framework creates it when an invocation starts (e.g., via <code>runner.run_async</code>) and passes the relevant contextual information implicitly to your agent code, callbacks, and tools.</p> PythonJava <pre><code># Conceptual Pseudocode: How the framework provides context (Internal Logic)\n\n# runner = Runner(agent=my_root_agent, session_service=..., artifact_service=...)\n# user_message = types.Content(...)\n# session = session_service.get_session(...) # Or create new\n\n# --- Inside runner.run_async(...) ---\n# 1. Framework creates the main context for this specific run\n# invocation_context = InvocationContext(\n#     invocation_id=\"unique-id-for-this-run\",\n#     session=session,\n#     user_content=user_message,\n#     agent=my_root_agent, # The starting agent\n#     session_service=session_service,\n#     artifact_service=artifact_service,\n#     memory_service=memory_service,\n#     # ... other necessary fields ...\n# )\n#\n# 2. Framework calls the agent's run method, passing the context implicitly\n#    (The agent's method signature will receive it, e.g., runAsyncImpl(InvocationContext invocationContext))\n# await my_root_agent.run_async(invocation_context)\n#   --- End Internal Logic ---\n#\n# As a developer, you work with the context objects provided in method arguments.\n</code></pre> <pre><code>/* Conceptual Pseudocode: How the framework provides context (Internal Logic) */\nInMemoryRunner runner = new InMemoryRunner(agent);\nSession session = runner\n    .sessionService()\n    .createSession(runner.appName(), USER_ID, initialState, SESSION_ID )\n    .blockingGet();\n\ntry (Scanner scanner = new Scanner(System.in, StandardCharsets.UTF_8)) {\n  while (true) {\n    System.out.print(\"\\nYou &gt; \");\n  }\n  String userInput = scanner.nextLine();\n  if (\"quit\".equalsIgnoreCase(userInput)) {\n    break;\n  }\n  Content userMsg = Content.fromParts(Part.fromText(userInput));\n  Flowable&lt;Event&gt; events = runner.runAsync(session.userId(), session.id(), userMsg);\n  System.out.print(\"\\nAgent &gt; \");\n  events.blockingForEach(event -&gt; System.out.print(event.stringifyContent()));\n}\n</code></pre>"},{"location":"context/index.en/#the-different-types-of-context","title":"The Different types of Context","text":"<p>While <code>InvocationContext</code> acts as the comprehensive internal container, ADK provides specialized context objects tailored to specific situations. This ensures you have the right tools and permissions for the task at hand without needing to handle the full complexity of the internal context everywhere. Here are the different \"flavors\" you'll encounter:</p> <ol> <li> <p><code>InvocationContext</code></p> <ul> <li>Where Used: Received as the <code>ctx</code> argument directly within an agent's core implementation methods (<code>_run_async_impl</code>, <code>_run_live_impl</code>).</li> <li>Purpose: Provides access to the entire state of the current invocation. This is the most comprehensive context object.</li> <li>Key Contents: Direct access to <code>session</code> (including <code>state</code> and <code>events</code>), the current <code>agent</code> instance, <code>invocation_id</code>, initial <code>user_content</code>, references to configured services (<code>artifact_service</code>, <code>memory_service</code>, <code>session_service</code>), and fields related to live/streaming modes.</li> <li>Use Case: Primarily used when the agent's core logic needs direct access to the overall session or services, though often state and artifact interactions are delegated to callbacks/tools which use their own contexts. Also used to control the invocation itself (e.g., setting <code>ctx.end_invocation = True</code>).</li> </ul> PythonJava <pre><code># Pseudocode: Agent implementation receiving InvocationContext\nfrom google.adk.agents import BaseAgent\nfrom google.adk.agents.invocation_context import InvocationContext\nfrom google.adk.events import Event\nfrom typing import AsyncGenerator\n\nclass MyAgent(BaseAgent):\n    async def _run_async_impl(self, ctx: InvocationContext) -&gt; AsyncGenerator[Event, None]:\n        # Direct access example\n        agent_name = ctx.agent.name\n        session_id = ctx.session.id\n        print(f\"Agent {agent_name} running in session {session_id} for invocation {ctx.invocation_id}\")\n        # ... agent logic using ctx ...\n        yield # ... event ...\n</code></pre> <pre><code>// Pseudocode: Agent implementation receiving InvocationContext\nimport com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.InvocationContext;\n\n    LlmAgent root_agent =\n        LlmAgent.builder()\n            .model(\"gemini-***\")\n            .name(\"sample_agent\")\n            .description(\"Answers user questions.\")\n            .instruction(\n                \"\"\"\n                provide instruction for the agent here.\n                \"\"\"\n            )\n            .tools(sampleTool)\n            .outputKey(\"YOUR_KEY\")\n            .build();\n\n    ConcurrentMap&lt;String, Object&gt; initialState = new ConcurrentHashMap&lt;&gt;();\n    initialState.put(\"YOUR_KEY\", \"\");\n\n    InMemoryRunner runner = new InMemoryRunner(agent);\n    Session session =\n          runner\n              .sessionService()\n              .createSession(runner.appName(), USER_ID, initialState, SESSION_ID )\n              .blockingGet();\n\n   try (Scanner scanner = new Scanner(System.in, StandardCharsets.UTF_8)) {\n        while (true) {\n          System.out.print(\"\\nYou &gt; \");\n          String userInput = scanner.nextLine();\n\n          if (\"quit\".equalsIgnoreCase(userInput)) {\n            break;\n          }\n\n          Content userMsg = Content.fromParts(Part.fromText(userInput));\n          Flowable&lt;Event&gt; events = \n                  runner.runAsync(session.userId(), session.id(), userMsg);\n\n          System.out.print(\"\\nAgent &gt; \");\n          events.blockingForEach(event -&gt; \n                  System.out.print(event.stringifyContent()));\n      }\n\n    protected Flowable&lt;Event&gt; runAsyncImpl(InvocationContext invocationContext) {\n        // Direct access example\n        String agentName = invocationContext.agent.name\n        String sessionId = invocationContext.session.id\n        String invocationId = invocationContext.invocationId\n        System.out.println(\"Agent \" + agent_name + \" running in session \" + session_id + \" for invocation \" + invocationId)\n        // ... agent logic using ctx ...\n    }\n</code></pre> </li> <li> <p><code>ReadonlyContext</code></p> <ul> <li>Where Used: Provided in scenarios where only read access to basic information is needed and mutation is disallowed (e.g., <code>InstructionProvider</code> functions). It's also the base class for other contexts.</li> <li>Purpose: Offers a safe, read-only view of fundamental contextual details.</li> <li>Key Contents: <code>invocation_id</code>, <code>agent_name</code>, and a read-only view of the current <code>state</code>.</li> </ul> PythonJava <pre><code># Pseudocode: Instruction provider receiving ReadonlyContext\nfrom google.adk.agents.readonly_context import ReadonlyContext\n\ndef my_instruction_provider(context: ReadonlyContext) -&gt; str:\n    # Read-only access example\n    user_tier = context.state().get(\"user_tier\", \"standard\") # Can read state\n    # context.state['new_key'] = 'value' # This would typically cause an error or be ineffective\n    return f\"Process the request for a {user_tier} user.\"\n</code></pre> <pre><code>// Pseudocode: Instruction provider receiving ReadonlyContext\nimport com.google.adk.agents.ReadonlyContext;\n\npublic String myInstructionProvider(ReadonlyContext context){\n    // Read-only access example\n    String userTier = context.state().get(\"user_tier\", \"standard\");\n    context.state().put('new_key', 'value'); //This would typically cause an error\n    return \"Process the request for a \" + userTier + \" user.\"\n}\n</code></pre> </li> <li> <p><code>CallbackContext</code></p> <ul> <li>Where Used: Passed as <code>callback_context</code> to agent lifecycle callbacks (<code>before_agent_callback</code>, <code>after_agent_callback</code>) and model interaction callbacks (<code>before_model_callback</code>, <code>after_model_callback</code>).</li> <li>Purpose: Facilitates inspecting and modifying state, interacting with artifacts, and accessing invocation details specifically within callbacks.</li> <li>Key Capabilities (Adds to <code>ReadonlyContext</code>):<ul> <li>Mutable <code>state</code> Property: Allows reading and writing to session state. Changes made here (<code>callback_context.state['key'] = value</code>) are tracked and associated with the event generated by the framework after the callback.</li> <li>Artifact Methods: <code>load_artifact(filename)</code> and <code>save_artifact(filename, part)</code> methods for interacting with the configured <code>artifact_service</code>.</li> <li>Direct <code>user_content</code> access.</li> </ul> </li> </ul> PythonJava <pre><code># Pseudocode: Callback receiving CallbackContext\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.models import LlmRequest\nfrom google.genai import types\nfrom typing import Optional\n\ndef my_before_model_cb(callback_context: CallbackContext, request: LlmRequest) -&gt; Optional[types.Content]:\n    # Read/Write state example\n    call_count = callback_context.state.get(\"model_calls\", 0)\n    callback_context.state[\"model_calls\"] = call_count + 1 # Modify state\n\n    # Optionally load an artifact\n    # config_part = callback_context.load_artifact(\"model_config.json\")\n    print(f\"Preparing model call #{call_count + 1} for invocation {callback_context.invocation_id}\")\n    return None # Allow model call to proceed\n</code></pre> <pre><code>// Pseudocode: Callback receiving CallbackContext\nimport com.google.adk.agents.CallbackContext;\nimport com.google.adk.models.LlmRequest;\nimport com.google.genai.types.Content;\nimport java.util.Optional;\n\npublic Maybe&lt;LlmResponse&gt; myBeforeModelCb(CallbackContext callbackContext, LlmRequest request){\n    // Read/Write state example\n    callCount = callbackContext.state().get(\"model_calls\", 0)\n    callbackContext.state().put(\"model_calls\") = callCount + 1 # Modify state\n\n    // Optionally load an artifact\n    // Maybe&lt;Part&gt; configPart = callbackContext.loadArtifact(\"model_config.json\");\n    System.out.println(\"Preparing model call \" + callCount + 1);\n    return Maybe.empty(); // Allow model call to proceed\n}\n</code></pre> </li> <li> <p><code>ToolContext</code></p> <ul> <li>Where Used: Passed as <code>tool_context</code> to the functions backing <code>FunctionTool</code>s and to tool execution callbacks (<code>before_tool_callback</code>, <code>after_tool_callback</code>).</li> <li>Purpose: Provides everything <code>CallbackContext</code> does, plus specialized methods essential for tool execution, like handling authentication, searching memory, and listing artifacts.</li> <li>Key Capabilities (Adds to <code>CallbackContext</code>):<ul> <li>Authentication Methods: <code>request_credential(auth_config)</code> to trigger an auth flow, and <code>get_auth_response(auth_config)</code> to retrieve credentials provided by the user/system.</li> <li>Artifact Listing: <code>list_artifacts()</code> to discover available artifacts in the session.</li> <li>Memory Search: <code>search_memory(query)</code> to query the configured <code>memory_service</code>.</li> <li><code>function_call_id</code> Property: Identifies the specific function call from the LLM that triggered this tool execution, crucial for linking authentication requests or responses back correctly.</li> <li><code>actions</code> Property: Direct access to the <code>EventActions</code> object for this step, allowing the tool to signal state changes, auth requests, etc.</li> </ul> </li> </ul> PythonJava <pre><code># Pseudocode: Tool function receiving ToolContext\nfrom google.adk.tools import ToolContext\nfrom typing import Dict, Any\n\n# Assume this function is wrapped by a FunctionTool\ndef search_external_api(query: str, tool_context: ToolContext) -&gt; Dict[str, Any]:\n    api_key = tool_context.state.get(\"api_key\")\n    if not api_key:\n        # Define required auth config\n        # auth_config = AuthConfig(...)\n        # tool_context.request_credential(auth_config) # Request credentials\n        # Use the 'actions' property to signal the auth request has been made\n        # tool_context.actions.requested_auth_configs[tool_context.function_call_id] = auth_config\n        return {\"status\": \"Auth Required\"}\n\n    # Use the API key...\n    print(f\"Tool executing for query '{query}' using API key. Invocation: {tool_context.invocation_id}\")\n\n    # Optionally search memory or list artifacts\n    # relevant_docs = tool_context.search_memory(f\"info related to {query}\")\n    # available_files = tool_context.list_artifacts()\n\n    return {\"result\": f\"Data for {query} fetched.\"}\n</code></pre> <pre><code>// Pseudocode: Tool function receiving ToolContext\nimport com.google.adk.tools.ToolContext;\nimport java.util.HashMap;\nimport java.util.Map;\n\n// Assume this function is wrapped by a FunctionTool\npublic Map&lt;String, Object&gt; searchExternalApi(String query, ToolContext toolContext){\n    String apiKey = toolContext.state.get(\"api_key\");\n    if(apiKey.isEmpty()){\n        // Define required auth config\n        // authConfig = AuthConfig(...);\n        // toolContext.requestCredential(authConfig); # Request credentials\n        // Use the 'actions' property to signal the auth request has been made\n        ...\n        return Map.of(\"status\", \"Auth Required\");\n\n    // Use the API key...\n    System.out.println(\"Tool executing for query \" + query + \" using API key. \");\n\n    // Optionally list artifacts\n    // Single&lt;List&lt;String&gt;&gt; availableFiles = toolContext.listArtifacts();\n\n    return Map.of(\"result\", \"Data for \" + query + \" fetched\");\n}\n</code></pre> </li> </ol> <p>Understanding these different context objects and when to use them is key to effectively managing state, accessing services, and controlling the flow of your ADK application. The next section will detail common tasks you can perform using these contexts.</p>"},{"location":"context/index.en/#common-tasks-using-context","title":"Common Tasks Using Context","text":"<p>Now that you understand the different context objects, let's focus on how to use them for common tasks when building your agents and tools.</p>"},{"location":"context/index.en/#accessing-information","title":"Accessing Information","text":"<p>You'll frequently need to read information stored within the context.</p> <ul> <li> <p>Reading Session State: Access data saved in previous steps or user/app-level settings. Use dictionary-like access on the <code>state</code> property.</p> PythonJava <pre><code># Pseudocode: In a Tool function\nfrom google.adk.tools import ToolContext\n\ndef my_tool(tool_context: ToolContext, **kwargs):\n    user_pref = tool_context.state.get(\"user_display_preference\", \"default_mode\")\n    api_endpoint = tool_context.state.get(\"app:api_endpoint\") # Read app-level state\n\n    if user_pref == \"dark_mode\":\n        # ... apply dark mode logic ...\n        pass\n    print(f\"Using API endpoint: {api_endpoint}\")\n    # ... rest of tool logic ...\n\n# Pseudocode: In a Callback function\nfrom google.adk.agents.callback_context import CallbackContext\n\ndef my_callback(callback_context: CallbackContext, **kwargs):\n    last_tool_result = callback_context.state.get(\"temp:last_api_result\") # Read temporary state\n    if last_tool_result:\n        print(f\"Found temporary result from last tool: {last_tool_result}\")\n    # ... callback logic ...\n</code></pre> <pre><code>// Pseudocode: In a Tool function\nimport com.google.adk.tools.ToolContext;\n\npublic void myTool(ToolContext toolContext){\n   String userPref = toolContext.state().get(\"user_display_preference\");\n   String apiEndpoint = toolContext.state().get(\"app:api_endpoint\"); // Read app-level state\n   if(userPref.equals(\"dark_mode\")){\n        // ... apply dark mode logic ...\n        pass\n    }\n   System.out.println(\"Using API endpoint: \" + api_endpoint);\n   // ... rest of tool logic ...\n}\n\n\n// Pseudocode: In a Callback function\nimport com.google.adk.agents.CallbackContext;\n\n    public void myCallback(CallbackContext callbackContext){\n        String lastToolResult = (String) callbackContext.state().get(\"temp:last_api_result\"); // Read temporary state\n    }\n    if(!(lastToolResult.isEmpty())){\n        System.out.println(\"Found temporary result from last tool: \" + lastToolResult);\n    }\n    // ... callback logic ...\n</code></pre> </li> <li> <p>Getting Current Identifiers: Useful for logging or custom logic based on the current operation.</p> PythonJava <pre><code># Pseudocode: In any context (ToolContext shown)\nfrom google.adk.tools import ToolContext\n\ndef log_tool_usage(tool_context: ToolContext, **kwargs):\n    agent_name = tool_context.agent_nameSystem.out.println(\"Found temporary result from last tool: \" + lastToolResult);\n    inv_id = tool_context.invocation_id\n    func_call_id = getattr(tool_context, 'function_call_id', 'N/A') # Specific to ToolContext\n\n    print(f\"Log: Invocation={inv_id}, Agent={agent_name}, FunctionCallID={func_call_id} - Tool Executed.\")\n</code></pre> <pre><code>// Pseudocode: In any context (ToolContext shown)\n import com.google.adk.tools.ToolContext;\n\n public void logToolUsage(ToolContext toolContext){\n            String agentName = toolContext.agentName;\n            String invId = toolContext.invocationId;\n            String functionCallId = toolContext.functionCallId().get(); // Specific to ToolContext\n            System.out.println(\"Log: Invocation= \" + invId &amp;+ \" Agent= \" + agentName);\n        }\n</code></pre> </li> <li> <p>Accessing the Initial User Input: Refer back to the message that started the current invocation.</p> PythonJava <pre><code># Pseudocode: In a Callback\nfrom google.adk.agents.callback_context import CallbackContext\n\ndef check_initial_intent(callback_context: CallbackContext, **kwargs):\n    initial_text = \"N/A\"\n    if callback_context.user_content and callback_context.user_content.parts:\n        initial_text = callback_context.user_content.parts[0].text or \"Non-text input\"\n\n    print(f\"This invocation started with user input: '{initial_text}'\")\n\n# Pseudocode: In an Agent's _run_async_impl\n# async def _run_async_impl(self, ctx: InvocationContext) -&gt; AsyncGenerator[Event, None]:\n#     if ctx.user_content and ctx.user_content.parts:\n#         initial_text = ctx.user_content.parts[0].text\n#         print(f\"Agent logic remembering initial query: {initial_text}\")\n#     ...\n</code></pre> <pre><code>// Pseudocode: In a Callback\nimport com.google.adk.agents.CallbackContext;\n\npublic void checkInitialIntent(CallbackContext callbackContext){\n    String initialText = \"N/A\";\n    if((!(callbackContext.userContent().isEmpty())) &amp;&amp; (!(callbackContext.userContent().parts.isEmpty()))){\n        initialText = cbx.userContent().get().parts().get().get(0).text().get();\n        ...\n        System.out.println(\"This invocation started with user input: \" + initialText)\n    }\n}\n</code></pre> </li> </ul>"},{"location":"context/index.en/#managing-state","title":"Managing State","text":"<p>State is crucial for memory and data flow. When you modify state using <code>CallbackContext</code> or <code>ToolContext</code>, the changes are automatically tracked and persisted by the framework.</p> <ul> <li> <p>How it Works: Writing to <code>callback_context.state['my_key'] = my_value</code> or <code>tool_context.state['my_key'] = my_value</code> adds this change to the <code>EventActions.state_delta</code> associated with the current step's event. The <code>SessionService</code> then applies these deltas when persisting the event.</p> </li> <li> <p>Passing Data Between Tools</p> PythonJava <pre><code># Pseudocode: Tool 1 - Fetches user ID\nfrom google.adk.tools import ToolContext\nimport uuid\n\ndef get_user_profile(tool_context: ToolContext) -&gt; dict:\n    user_id = str(uuid.uuid4()) # Simulate fetching ID\n    # Save the ID to state for the next tool\n    tool_context.state[\"temp:current_user_id\"] = user_id\n    return {\"profile_status\": \"ID generated\"}\n\n# Pseudocode: Tool 2 - Uses user ID from state\ndef get_user_orders(tool_context: ToolContext) -&gt; dict:\n    user_id = tool_context.state.get(\"temp:current_user_id\")\n    if not user_id:\n        return {\"error\": \"User ID not found in state\"}\n\n    print(f\"Fetching orders for user ID: {user_id}\")\n    # ... logic to fetch orders using user_id ...\n    return {\"orders\": [\"order123\", \"order456\"]}\n</code></pre> <pre><code>// Pseudocode: Tool 1 - Fetches user ID\nimport com.google.adk.tools.ToolContext;\nimport java.util.UUID;\n\npublic Map&lt;String, String&gt; getUserProfile(ToolContext toolContext){\n    String userId = UUID.randomUUID().toString();\n    // Save the ID to state for the next tool\n    toolContext.state().put(\"temp:current_user_id\", user_id);\n    return Map.of(\"profile_status\", \"ID generated\");\n}\n\n// Pseudocode: Tool 2 - Uses user ID from state\npublic  Map&lt;String, String&gt; getUserOrders(ToolContext toolContext){\n    String userId = toolContext.state().get(\"temp:current_user_id\");\n    if(userId.isEmpty()){\n        return Map.of(\"error\", \"User ID not found in state\");\n    }\n    System.out.println(\"Fetching orders for user id: \" + userId);\n     // ... logic to fetch orders using user_id ...\n    return Map.of(\"orders\", \"order123\");\n}\n</code></pre> </li> <li> <p>Updating User Preferences:</p> PythonJava <pre><code># Pseudocode: Tool or Callback identifies a preference\nfrom google.adk.tools import ToolContext # Or CallbackContext\n\ndef set_user_preference(tool_context: ToolContext, preference: str, value: str) -&gt; dict:\n    # Use 'user:' prefix for user-level state (if using a persistent SessionService)\n    state_key = f\"user:{preference}\"\n    tool_context.state[state_key] = value\n    print(f\"Set user preference '{preference}' to '{value}'\")\n    return {\"status\": \"Preference updated\"}\n</code></pre> <pre><code>// Pseudocode: Tool or Callback identifies a preference\nimport com.google.adk.tools.ToolContext; // Or CallbackContext\n\npublic Map&lt;String, String&gt; setUserPreference(ToolContext toolContext, String preference, String value){\n    // Use 'user:' prefix for user-level state (if using a persistent SessionService)\n    String stateKey = \"user:\" + preference;\n    toolContext.state().put(stateKey, value);\n    System.out.println(\"Set user preference '\" + preference + \"' to '\" + value + \"'\");\n    return Map.of(\"status\", \"Preference updated\");\n}\n</code></pre> </li> <li> <p>State Prefixes: While basic state is session-specific, prefixes like <code>app:</code> and <code>user:</code> can be used with persistent <code>SessionService</code> implementations (like <code>DatabaseSessionService</code> or <code>VertexAiSessionService</code>) to indicate broader scope (app-wide or user-wide across sessions). <code>temp:</code> can denote data only relevant within the current invocation.</p> </li> </ul>"},{"location":"context/index.en/#working-with-artifacts","title":"Working with Artifacts","text":"<p>Use artifacts to handle files or large data blobs associated with the session. Common use case: processing uploaded documents.</p> <ul> <li> <p>Document Summarizer Example Flow:</p> <ol> <li> <p>Ingest Reference (e.g., in a Setup Tool or Callback): Save the path or URI of the document, not the entire content, as an artifact.</p> PythonJava <pre><code># Pseudocode: In a callback or initial tool\nfrom google.adk.agents.callback_context import CallbackContext # Or ToolContext\nfrom google.genai import types\n\ndef save_document_reference(context: CallbackContext, file_path: str) -&gt; None:\n    # Assume file_path is something like \"gs://my-bucket/docs/report.pdf\" or \"/local/path/to/report.pdf\"\n    try:\n        # Create a Part containing the path/URI text\n        artifact_part = types.Part(text=file_path)\n        version = context.save_artifact(\"document_to_summarize.txt\", artifact_part)\n        print(f\"Saved document reference '{file_path}' as artifact version {version}\")\n        # Store the filename in state if needed by other tools\n        context.state[\"temp:doc_artifact_name\"] = \"document_to_summarize.txt\"\n    except ValueError as e:\n        print(f\"Error saving artifact: {e}\") # E.g., Artifact service not configured\n    except Exception as e:\n        print(f\"Unexpected error saving artifact reference: {e}\")\n\n# Example usage:\n# save_document_reference(callback_context, \"gs://my-bucket/docs/report.pdf\")\n</code></pre> <pre><code>// Pseudocode: In a callback or initial tool\nimport com.google.adk.agents.CallbackContext;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\n\n\npubic void saveDocumentReference(CallbackContext context, String filePath){\n    // Assume file_path is something like \"gs://my-bucket/docs/report.pdf\" or \"/local/path/to/report.pdf\"\n    try{\n        // Create a Part containing the path/URI text\n        Part artifactPart = types.Part(filePath)\n        Optional&lt;Integer&gt; version = context.saveArtifact(\"document_to_summarize.txt\", artifactPart)\n        System.out.println(\"Saved document reference\" + filePath + \" as artifact version \" + version);\n        // Store the filename in state if needed by other tools\n        context.state().put(\"temp:doc_artifact_name\", \"document_to_summarize.txt\");\n    } catch(Exception e){\n        System.out.println(\"Unexpected error saving artifact reference: \" + e);\n    }\n}\n\n// Example usage:\n// saveDocumentReference(context, \"gs://my-bucket/docs/report.pdf\")\n</code></pre> </li> <li> <p>Summarizer Tool: Load the artifact to get the path/URI, read the actual document content using appropriate libraries, summarize, and return the result.</p> PythonJava <pre><code># Pseudocode: In the Summarizer tool function\nfrom google.adk.tools import ToolContext\nfrom google.genai import types\n# Assume libraries like google.cloud.storage or built-in open are available\n# Assume a 'summarize_text' function exists\n# from my_summarizer_lib import summarize_text\n\ndef summarize_document_tool(tool_context: ToolContext) -&gt; dict:\n    artifact_name = tool_context.state.get(\"temp:doc_artifact_name\")\n    if not artifact_name:\n        return {\"error\": \"Document artifact name not found in state.\"}\n\n    try:\n        # 1. Load the artifact part containing the path/URI\n        artifact_part = tool_context.load_artifact(artifact_name)\n        if not artifact_part or not artifact_part.text:\n            return {\"error\": f\"Could not load artifact or artifact has no text path: {artifact_name}\"}\n\n        file_path = artifact_part.text\n        print(f\"Loaded document reference: {file_path}\")\n\n        # 2. Read the actual document content (outside ADK context)\n        document_content = \"\"\n        if file_path.startswith(\"gs://\"):\n            # Example: Use GCS client library to download/read\n            # from google.cloud import storage\n            # client = storage.Client()\n            # blob = storage.Blob.from_string(file_path, client=client)\n            # document_content = blob.download_as_text() # Or bytes depending on format\n            pass # Replace with actual GCS reading logic\n        elif file_path.startswith(\"/\"):\n             # Example: Use local file system\n             with open(file_path, 'r', encoding='utf-8') as f:\n                 document_content = f.read()\n        else:\n            return {\"error\": f\"Unsupported file path scheme: {file_path}\"}\n\n        # 3. Summarize the content\n        if not document_content:\n             return {\"error\": \"Failed to read document content.\"}\n\n        # summary = summarize_text(document_content) # Call your summarization logic\n        summary = f\"Summary of content from {file_path}\" # Placeholder\n\n        return {\"summary\": summary}\n\n    except ValueError as e:\n         return {\"error\": f\"Artifact service error: {e}\"}\n    except FileNotFoundError:\n         return {\"error\": f\"Local file not found: {file_path}\"}\n    # except Exception as e: # Catch specific exceptions for GCS etc.\n    #      return {\"error\": f\"Error reading document {file_path}: {e}\"}\n</code></pre> <pre><code>// Pseudocode: In the Summarizer tool function\nimport com.google.adk.tools.ToolContext;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\n\npublic Map&lt;String, String&gt; summarizeDocumentTool(ToolContext toolContext){\n    String artifactName = toolContext.state().get(\"temp:doc_artifact_name\");\n    if(artifactName.isEmpty()){\n        return Map.of(\"error\", \"Document artifact name not found in state.\");\n    }\n    try{\n        // 1. Load the artifact part containing the path/URI\n        Maybe&lt;Part&gt; artifactPart = toolContext.loadArtifact(artifactName);\n        if((artifactPart == null) || (artifactPart.text().isEmpty())){\n            return Map.of(\"error\", \"Could not load artifact or artifact has no text path: \" + artifactName);\n        }\n        filePath = artifactPart.text();\n        System.out.println(\"Loaded document reference: \" + filePath);\n\n        // 2. Read the actual document content (outside ADK context)\n        String documentContent = \"\";\n        if(filePath.startsWith(\"gs://\")){\n            // Example: Use GCS client library to download/read into documentContent\n            pass; // Replace with actual GCS reading logic\n        } else if(){\n            // Example: Use local file system to download/read into documentContent\n        } else{\n            return Map.of(\"error\", \"Unsupported file path scheme: \" + filePath); \n        }\n\n        // 3. Summarize the content\n        if(documentContent.isEmpty()){\n            return Map.of(\"error\", \"Failed to read document content.\"); \n        }\n\n        // summary = summarizeText(documentContent) // Call your summarization logic\n        summary = \"Summary of content from \" + filePath; // Placeholder\n\n        return Map.of(\"summary\", summary);\n    } catch(IllegalArgumentException e){\n        return Map.of(\"error\", \"Artifact service error \" + filePath + e);\n    } catch(FileNotFoundException e){\n        return Map.of(\"error\", \"Local file not found \" + filePath + e);\n    } catch(Exception e){\n        return Map.of(\"error\", \"Error reading document \" + filePath + e);\n    }\n}\n</code></pre> </li> </ol> </li> <li> <p>Listing Artifacts: Discover what files are available.</p> PythonJava <pre><code># Pseudocode: In a tool function\nfrom google.adk.tools import ToolContext\n\ndef check_available_docs(tool_context: ToolContext) -&gt; dict:\n    try:\n        artifact_keys = tool_context.list_artifacts()\n        print(f\"Available artifacts: {artifact_keys}\")\n        return {\"available_docs\": artifact_keys}\n    except ValueError as e:\n        return {\"error\": f\"Artifact service error: {e}\"}\n</code></pre> <pre><code>// Pseudocode: In a tool function\nimport com.google.adk.tools.ToolContext;\n\npublic Map&lt;String, String&gt; checkAvailableDocs(ToolContext toolContext){\n    try{\n        Single&lt;List&lt;String&gt;&gt; artifactKeys = toolContext.listArtifacts();\n        System.out.println(\"Available artifacts\" + artifactKeys.tostring());\n        return Map.of(\"availableDocs\", \"artifactKeys\");\n    } catch(IllegalArgumentException e){\n        return Map.of(\"error\", \"Artifact service error: \" + e);\n    }\n}\n</code></pre> </li> </ul>"},{"location":"context/index.en/#handling-tool-authentication","title":"Handling Tool Authentication","text":"<p>Securely manage API keys or other credentials needed by tools.</p> <p><pre><code># Pseudocode: Tool requiring auth\nfrom google.adk.tools import ToolContext\nfrom google.adk.auth import AuthConfig # Assume appropriate AuthConfig is defined\n\n# Define your required auth configuration (e.g., OAuth, API Key)\nMY_API_AUTH_CONFIG = AuthConfig(...)\nAUTH_STATE_KEY = \"user:my_api_credential\" # Key to store retrieved credential\n\ndef call_secure_api(tool_context: ToolContext, request_data: str) -&gt; dict:\n    # 1. Check if credential already exists in state\n    credential = tool_context.state.get(AUTH_STATE_KEY)\n\n    if not credential:\n        # 2. If not, request it\n        print(\"Credential not found, requesting...\")\n        try:\n            tool_context.request_credential(MY_API_AUTH_CONFIG)\n            # The framework handles yielding the event. The tool execution stops here for this turn.\n            return {\"status\": \"Authentication required. Please provide credentials.\"}\n        except ValueError as e:\n            return {\"error\": f\"Auth error: {e}\"} # e.g., function_call_id missing\n        except Exception as e:\n            return {\"error\": f\"Failed to request credential: {e}\"}\n\n    # 3. If credential exists (might be from a previous turn after request)\n    #    or if this is a subsequent call after auth flow completed externally\n    try:\n        # Optionally, re-validate/retrieve if needed, or use directly\n        # This might retrieve the credential if the external flow just completed\n        auth_credential_obj = tool_context.get_auth_response(MY_API_AUTH_CONFIG)\n        api_key = auth_credential_obj.api_key # Or access_token, etc.\n\n        # Store it back in state for future calls within the session\n        tool_context.state[AUTH_STATE_KEY] = auth_credential_obj.model_dump() # Persist retrieved credential\n\n        print(f\"Using retrieved credential to call API with data: {request_data}\")\n        # ... Make the actual API call using api_key ...\n        api_result = f\"API result for {request_data}\"\n\n        return {\"result\": api_result}\n    except Exception as e:\n        # Handle errors retrieving/using the credential\n        print(f\"Error using credential: {e}\")\n        # Maybe clear the state key if credential is invalid?\n        # tool_context.state[AUTH_STATE_KEY] = None\n        return {\"error\": \"Failed to use credential\"}\n</code></pre> Remember: <code>request_credential</code> pauses the tool and signals the need for authentication. The user/system provides credentials, and on a subsequent call, <code>get_auth_response</code> (or checking state again) allows the tool to proceed. The <code>tool_context.function_call_id</code> is used implicitly by the framework to link the request and response.</p>"},{"location":"context/index.en/#leveraging-memory","title":"Leveraging Memory","text":"<p>Access relevant information from the past or external sources.</p> <pre><code># Pseudocode: Tool using memory search\nfrom google.adk.tools import ToolContext\n\ndef find_related_info(tool_context: ToolContext, topic: str) -&gt; dict:\n    try:\n        search_results = tool_context.search_memory(f\"Information about {topic}\")\n        if search_results.results:\n            print(f\"Found {len(search_results.results)} memory results for '{topic}'\")\n            # Process search_results.results (which are SearchMemoryResponseEntry)\n            top_result_text = search_results.results[0].text\n            return {\"memory_snippet\": top_result_text}\n        else:\n            return {\"message\": \"No relevant memories found.\"}\n    except ValueError as e:\n        return {\"error\": f\"Memory service error: {e}\"} # e.g., Service not configured\n    except Exception as e:\n        return {\"error\": f\"Unexpected error searching memory: {e}\"}\n</code></pre>"},{"location":"context/index.en/#advanced-direct-invocationcontext-usage","title":"Advanced: Direct <code>InvocationContext</code> Usage","text":"<p>While most interactions happen via <code>CallbackContext</code> or <code>ToolContext</code>, sometimes the agent's core logic (<code>_run_async_impl</code>/<code>_run_live_impl</code>) needs direct access.</p> <pre><code># Pseudocode: Inside agent's _run_async_impl\nfrom google.adk.agents import BaseAgent\nfrom google.adk.agents.invocation_context import InvocationContext\nfrom google.adk.events import Event\nfrom typing import AsyncGenerator\n\nclass MyControllingAgent(BaseAgent):\n    async def _run_async_impl(self, ctx: InvocationContext) -&gt; AsyncGenerator[Event, None]:\n        # Example: Check if a specific service is available\n        if not ctx.memory_service:\n            print(\"Memory service is not available for this invocation.\")\n            # Potentially change agent behavior\n\n        # Example: Early termination based on some condition\n        if ctx.session.state.get(\"critical_error_flag\"):\n            print(\"Critical error detected, ending invocation.\")\n            ctx.end_invocation = True # Signal framework to stop processing\n            yield Event(author=self.name, invocation_id=ctx.invocation_id, content=\"Stopping due to critical error.\")\n            return # Stop this agent's execution\n\n        # ... Normal agent processing ...\n        yield # ... event ...\n</code></pre> <p>Setting <code>ctx.end_invocation = True</code> is a way to gracefully stop the entire request-response cycle from within the agent or its callbacks/tools (via their respective context objects which also have access to modify the underlying <code>InvocationContext</code>'s flag).</p>"},{"location":"context/index.en/#key-takeaways-best-practices","title":"Key Takeaways &amp; Best Practices","text":"<ul> <li>Use the Right Context: Always use the most specific context object provided (<code>ToolContext</code> in tools/tool-callbacks, <code>CallbackContext</code> in agent/model-callbacks, <code>ReadonlyContext</code> where applicable). Use the full <code>InvocationContext</code> (<code>ctx</code>) directly in <code>_run_async_impl</code> / <code>_run_live_impl</code> only when necessary.</li> <li>State for Data Flow: <code>context.state</code> is the primary way to share data, remember preferences, and manage conversational memory within an invocation. Use prefixes (<code>app:</code>, <code>user:</code>, <code>temp:</code>) thoughtfully when using persistent storage.</li> <li>Artifacts for Files: Use <code>context.save_artifact</code> and <code>context.load_artifact</code> for managing file references (like paths or URIs) or larger data blobs. Store references, load content on demand.</li> <li>Tracked Changes: Modifications to state or artifacts made via context methods are automatically linked to the current step's <code>EventActions</code> and handled by the <code>SessionService</code>.</li> <li>Start Simple: Focus on <code>state</code> and basic artifact usage first. Explore authentication, memory, and advanced <code>InvocationContext</code> fields (like those for live streaming) as your needs become more complex.</li> </ul> <p>By understanding and effectively using these context objects, you can build more sophisticated, stateful, and capable agents with ADK.</p>"},{"location":"deploy/","title":"\u90e8\u7f72\u4f60\u7684 agent","text":"<p>\u7576\u4f60\u4f7f\u7528 Agent Development Kit (ADK) \u5efa\u7acb\u4e26\u6e2c\u8a66\u597d\u4f60\u7684 agent \u5f8c\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u5c07\u5176\u90e8\u7f72\uff0c\u8b93\u5b83\u53ef\u4ee5\u88ab\u5b58\u53d6\u3001\u67e5\u8a62\u4e26\u7528\u65bc\u6b63\u5f0f\u74b0\u5883\uff0c\u6216\u6574\u5408\u5230\u5176\u4ed6\u61c9\u7528\u7a0b\u5f0f\u4e2d\u3002\u90e8\u7f72\u7684\u904e\u7a0b\u6703\u5c07\u4f60\u7684 agent \u5f9e\u672c\u6a5f\u958b\u767c\u6a5f\u5668\u79fb\u8f49\u5230\u4e00\u500b\u53ef\u64f4\u5c55\u4e14\u53ef\u9760\u7684\u74b0\u5883\u3002</p> <p></p>"},{"location":"deploy/#_1","title":"\u90e8\u7f72\u9078\u9805","text":"<p>\u4f60\u7684 ADK agent \u53ef\u4ee5\u6839\u64da\u4f60\u5c0d\u6b63\u5f0f\u74b0\u5883\u7a69\u5b9a\u6027\u6216\u81ea\u8a02\u5f48\u6027\u7684\u9700\u6c42\uff0c\u90e8\u7f72\u5230\u591a\u7a2e\u4e0d\u540c\u7684\u74b0\u5883\uff1a</p>"},{"location":"deploy/#vertex-ai-agent-engine","title":"Vertex AI Agent Engine","text":"<p>Agent Engine \u662f Google Cloud \u4e0a\u7684\u5168\u4ee3\u7ba1\u81ea\u52d5\u64f4\u5c55\u670d\u52d9\uff0c\u5c08\u70ba\u90e8\u7f72\u3001\u7ba1\u7406\u53ca\u64f4\u5c55\u4ee5 ADK \u7b49\u6846\u67b6\u6253\u9020\u7684 AI agent \u800c\u8a2d\u8a08\u3002</p> <p>\u9032\u4e00\u6b65\u4e86\u89e3\u5982\u4f55\u5c07\u4f60\u7684 agent \u90e8\u7f72\u5230 Vertex AI Agent Engine\u3002</p>"},{"location":"deploy/#cloud-run","title":"Cloud Run","text":"<p>Cloud Run \u662f Google Cloud \u4e0a\u7684\u4ee3\u7ba1\u81ea\u52d5\u64f4\u5c55\u904b\u7b97\u5e73\u53f0\uff0c\u8b93\u4f60\u53ef\u4ee5\u5c07 agent \u4ee5\u5bb9\u5668\u5316\u61c9\u7528\u7a0b\u5f0f\u7684\u65b9\u5f0f\u57f7\u884c\u3002</p> <p>\u9032\u4e00\u6b65\u4e86\u89e3\u5982\u4f55\u5c07\u4f60\u7684 agent \u90e8\u7f72\u5230 Cloud Run\u3002</p>"},{"location":"deploy/#google-kubernetes-engine-gke","title":"Google Kubernetes Engine (GKE)","text":"<p>Google Kubernetes Engine (GKE) \u662f Google Cloud \u7684\u4ee3\u7ba1 Kubernetes \u670d\u52d9\uff0c\u8b93\u4f60\u53ef\u4ee5\u5728\u5bb9\u5668\u5316\u74b0\u5883\u4e2d\u57f7\u884c agent\u3002\u5982\u679c\u4f60\u9700\u8981\u5c0d\u90e8\u7f72\u6709\u66f4\u591a\u63a7\u5236\u6b0a\uff0c\u6216\u60f3\u8981\u57f7\u884c Open Models\uff0cGKE \u6703\u662f\u5f88\u597d\u7684\u9078\u64c7\u3002</p> <p>\u9032\u4e00\u6b65\u4e86\u89e3\u5982\u4f55\u5c07\u4f60\u7684 agent \u90e8\u7f72\u5230 GKE\u3002</p>"},{"location":"deploy/#_2","title":"\u5176\u4ed6\u652f\u63f4\u5bb9\u5668\u7684\u57fa\u790e\u8a2d\u65bd","text":"<p>\u4f60\u53ef\u4ee5\u624b\u52d5\u5c07 agent \u6253\u5305\u6210\u5bb9\u5668\u6620\u50cf\u6a94\uff0c\u7136\u5f8c\u5728\u4efb\u4f55\u652f\u63f4\u5bb9\u5668\u6620\u50cf\u7684\u74b0\u5883\u4e2d\u57f7\u884c\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5728\u672c\u5730\u7aef\u4f7f\u7528 Docker \u6216 Podman \u57f7\u884c\u3002\u5982\u679c\u4f60\u504f\u597d\u96e2\u7dda\u6216\u65b7\u7dda\u904b\u4f5c\uff0c\u6216\u662f\u5728\u6c92\u6709\u9023\u63a5 Google Cloud \u7684\u7cfb\u7d71\u4e2d\uff0c\u9019\u6703\u662f\u5f88\u597d\u7684\u9078\u64c7\u3002</p> <p>\u8acb\u4f9d\u7167\u5c07\u4f60\u7684 agent \u90e8\u7f72\u5230 Cloud Run \u7684\u6307\u5f15\u64cd\u4f5c\uff0c\u7279\u5225\u662f\u5176\u4e2d\u8aaa\u660e\u5982\u4f55\u4f7f\u7528\u81ea\u8a02 Dockerfile \u7684\u90e8\u5206\u3002</p>"},{"location":"deploy/agent-engine.en/","title":"Deploy to Vertex AI Agent Engine","text":"<p>Agent Engine is a fully managed Google Cloud service enabling developers to deploy, manage, and scale AI agents in production. Agent Engine handles the infrastructure to scale agents in production so you can focus on creating intelligent and impactful applications. This guide provides an accelerated deployment instruction set for when you want to deploy an ADK project quickly, and a standard, step-by-step set of instructions for when you want to carefully manage deploying an agent to Agent Engine.</p>"},{"location":"deploy/agent-engine.en/#accelerated-deployment","title":"Accelerated deployment","text":"<p>This section describes how to perform a deployment using the Agent Starter Pack (ASP) and the ADK command line interface (CLI) tool. This approach uses the ASP tool to apply a project template to your existing project, add deployment artifacts, and prepare your agent project for deployment. These instructions show you how to use ASP to provision a Google Cloud project with services needed for deploying your ADK project, as follows:</p> <ul> <li>Prerequisites: Setup Google Cloud     account, a project, and install required software.</li> <li>Prepare your ADK project: Modify your     existing ADK project files to get ready for deployment.</li> <li>Connect to your Google Cloud project:     Connect your development environment to Google Cloud and your Google Cloud     project.</li> <li>Deploy your ADK project:  Provision     required services in your Google Cloud project and upload your ADK project code.</li> </ul> <p>For information on testing a deployed agent, see Test deployed agent. For more information on using Agent Starter Pack and its command line tools, see the CLI reference and Development guide.</p>"},{"location":"deploy/agent-engine.en/#prerequisites-ad","title":"Prerequisites","text":"<p>You need the following resources configured to use this deployment path:</p> <ul> <li>Google Cloud account, with administrator access to:</li> <li>Google Cloud Project: An empty Google Cloud project with     billing enabled.     For information on creating projects, see     Creating and managing projects.</li> <li>Python Environment: A Python version between 3.9 and 3.13.</li> <li>UV Tool: Manage Python development environment and running ASP     tools. For installation details, see      Install UV.</li> <li>Google Cloud CLI tool: The gcloud command line interface. For     installation details, see     Google Cloud Command Line Interface.</li> <li>Make tool: Build automation tool. This tool is part of most     Unix-based systems, for installation details, see the      Make tool documentation.</li> <li>Terraform: Infrastructure and services deployment on Google Cloud.     For installation details, see      Install Terraform.</li> </ul>"},{"location":"deploy/agent-engine.en/#prepare-ad","title":"Prepare your ADK project","text":"<p>When you deploy an ADK project to Agent Engine, you need some additional files to support the deployment operation. The following ASP command backs up your project and then adds files to your project for deployment purposes.</p> <p>These instructions assume you have an existing ADK project that you are modifying for deployment. If you do not have an ADK project, or want to use a test project, complete the Python Quickstart guide, which creates a multi_tool_agent project. The following instructions use the <code>multi_tool_agent</code> project as an example.</p> <p>To prepare your ADK project for deployment to Agent Engine:</p> <ol> <li> <p>In a terminal window of your development environment, navigate to the     root directory of your project, for example:</p> <pre><code>cd multi_tool_agent/\n</code></pre> </li> <li> <p>Run the ASP <code>enhance</code> command to add the needed files required for     deployment into your project.</p> <pre><code>uvx agent-starter-pack enhance --adk -d agent_engine\n</code></pre> </li> <li> <p>Follow the instructions from the ASP tool. In general, you can accept     the default answers to all questions. However for the GCP region,      option, make sure you select one of the      supported regions for Agent Engine.</p> </li> </ol> <p>When you successfully complete this process, the tool shows the following message:</p> <pre><code>&gt; Success! Your agent project is ready.\n</code></pre> <p>Note</p> <p>The ASP tool may show a reminder to connect to Google Cloud while running, but that connection is not required at this stage.</p> <p>For more information about the changes ASP makes to your ADK project, see Changes to your ADK project.</p>"},{"location":"deploy/agent-engine.en/#connect-ad","title":"Connect to your Google Cloud project","text":"<p>Before you deploy your ADK project, you must connect to Google Cloud and your project. After logging into your Google Cloud account, you should verify that your deployment target project is visible from your account and that it is configured as your current project.</p> <p>To connect to Google Cloud and list your project:</p> <ol> <li> <p>In a terminal window of your development environment, login to your     Google Cloud account:</p> <pre><code>gcloud auth application-default login\n</code></pre> </li> <li> <p>Set your target project using the Google Cloud Project ID:</p> <pre><code>gcloud config set project your-project-id-xxxxx\n</code></pre> </li> <li> <p>Verify your Google Cloud target project is set:</p> <pre><code>gcloud config get-value project\n</code></pre> </li> </ol> <p>Once you have successfully connected to Google Cloud and set your Cloud Project ID, you are ready to deploy your ADK project files to Agent Engine.</p>"},{"location":"deploy/agent-engine.en/#deploy-ad","title":"Deploy your ADK project","text":"<p>When using the ASP tool, you deploy in stages. In the first stage, you run a <code>make</code> command that provisions the services needed to run your ADK workflow on Agent Engine. In the second stage, your project code is uploaded to the Agent Engine service and the agent project is executed.</p> <p>Important</p> <p>Make sure your Google Cloud target deployment project is set as your current project before performing these steps. The <code>make backend</code> command uses your currently set Google Cloud project when it performs a deployment. For information on setting and checking your current project, see Connect to your Google Cloud project.</p> <p>To deploy your ADK project to Agent Engine in your Google Cloud project:</p> <ol> <li>In a terminal window of your development environment, navigate to the     root directory of your project, for example:     <code>cd multi_tool_agent/</code></li> <li> <p>Provision a development environment, including logging, services accounts,     storage, and Vertex AI API by running the following ASP make command:</p> <pre><code>make setup-dev-env\n</code></pre> </li> <li> <p>Deploy the code from the updated local project into the Google Cloud development environment, by running the following ASP make command:</p> <pre><code>make backend\n</code></pre> </li> </ol> <p>Once this process completes successfully, you should be able to interact with the agent running on Google Cloud Agent Engine. For details on testing the deployed agent, see the next section.</p> <p>Once this process completes successfully, you should be able to interact with the agent running on Google Cloud Agent Engine. For details on testing the deployed agent, see  Test deployed agent.</p>"},{"location":"deploy/agent-engine.en/#adk-asp-changes","title":"Changes to your ADK project","text":"<p>The ASP tools add more files to your project for deployment. The procedure below backs up your existing project files before modifying them. This guide uses the multi_tool_agent project as a reference example. The original project has the following file structure to start with:</p> <pre><code>multi_tool_agent/\n\u251c\u2500 __init__.py\n\u251c\u2500 agent.py\n\u2514\u2500 .env\n</code></pre> <p>After running the ASP enhance command to add Agent Engine deployment information, the new structure is as follows:</p> <pre><code>multi-tool-agent/\n\u251c\u2500 app/                 # Core application code\n\u2502   \u251c\u2500 agent.py         # Main agent logic\n\u2502   \u251c\u2500 agent_engine_app.py # Agent Engine application logic\n\u2502   \u2514\u2500 utils/           # Utility functions and helpers\n\u251c\u2500 .cloudbuild/         # CI/CD pipeline configurations for Google Cloud Build\n\u251c\u2500 deployment/          # Infrastructure and deployment scripts\n\u251c\u2500 notebooks/           # Jupyter notebooks for prototyping and evaluation\n\u251c\u2500 tests/               # Unit, integration, and load tests\n\u251c\u2500 Makefile             # Makefile for common commands\n\u251c\u2500 GEMINI.md            # AI-assisted development guide\n\u2514\u2500 pyproject.toml       # Project dependencies and configuration\n</code></pre> <p>See the README.md file in your updated ADK project folder for more information. For more information on using Agent Starter Pack, see the Development guide.</p>"},{"location":"deploy/agent-engine.en/#standard-deployment","title":"Standard deployment","text":"<p>This section describes how to perform a deployment to Agent Engine step-by-step. These instructions are more appropriate if you want to carefully manage your deployment settings, or are modifying an existing deployment with Agent Engine.</p>"},{"location":"deploy/agent-engine.en/#prerequisites","title":"Prerequisites","text":"<p>These instructions assume you have already defined an ADK project. If you do not have an ADK project, see the instructions for creating a test project in Define your agent.</p> <p>Before starting deployment procedure, ensure you have the following:</p> <ol> <li> <p>Google Cloud Project: A Google Cloud project with the Vertex AI API enabled.</p> </li> <li> <p>Authenticated gcloud CLI: You need to be authenticated with Google Cloud. Run the following command in your terminal:     <pre><code>gcloud auth application-default login\n</code></pre></p> </li> <li> <p>Google Cloud Storage (GCS) Bucket: Agent Engine requires a GCS bucket to stage your agent's code and dependencies for deployment. If you don't have a bucket, create one by following the instructions here.</p> </li> <li> <p>Python Environment: A Python version between 3.9 and 3.13.</p> </li> <li> <p>Install Vertex AI SDK</p> <p>Agent Engine is part of the Vertex AI SDK for Python. For more information, you can review the Agent Engine quickstart documentation.</p> <pre><code>pip install google-cloud-aiplatform[adk,agent_engines]&gt;=1.111\n</code></pre> </li> </ol>"},{"location":"deploy/agent-engine.en/#define-your-agent","title":"Define your agent","text":"<p>These instructions assume you have an existing ADK project that you are modifying for deployment. If you do not have an ADK project, or want to use a test project, complete the Python Quickstart guide, which creates a multi_tool_agent project. The following instructions use the <code>multi_tool_agent</code> project as an example.</p>"},{"location":"deploy/agent-engine.en/#initialize-vertex-ai","title":"Initialize Vertex AI","text":"<p>Next, initialize the Vertex AI SDK. This tells the SDK which Google Cloud project and region to use, and where to stage files for deployment.</p> <p>For IDE Users</p> <p>You can place this initialization code in a separate <code>deploy.py</code> script along with the deployment logic for the following steps: 3 through 6.</p> deploy.py<pre><code>import vertexai\nfrom agent import root_agent # modify this if your agent is not in agent.py\n\n# TODO: Fill in these values for your project\nPROJECT_ID = \"your-gcp-project-id\"\nLOCATION = \"us-central1\"  # For other options, see https://cloud.google.com/vertex-ai/generative-ai/docs/agent-engine/overview#supported-regions\nSTAGING_BUCKET = \"gs://your-gcs-bucket-name\"\n\n# Initialize the Vertex AI SDK\nvertexai.init(\n    project=PROJECT_ID,\n    location=LOCATION,\n    staging_bucket=STAGING_BUCKET,\n)\n</code></pre>"},{"location":"deploy/agent-engine.en/#prepare-the-agent-for-deployment","title":"Prepare the agent for deployment","text":"<p>To make your agent compatible with Agent Engine, you need to wrap it in an <code>AdkApp</code> object.</p> deploy.py<pre><code>from vertexai import agent_engines\n\n# Wrap the agent in an AdkApp object\napp = agent_engines.AdkApp(\n    agent=root_agent,\n    enable_tracing=True,\n)\n</code></pre> <p>Info</p> <p>When an AdkApp is deployed to Agent Engine, it automatically uses <code>VertexAiSessionService</code> for persistent, managed session state. This provides multi-turn conversational memory without any additional configuration. For local testing, the application defaults to a temporary, in-memory session service.</p>"},{"location":"deploy/agent-engine.en/#test-agent-locally-optional","title":"Test agent locally (optional)","text":"<p>Before deploying, you can test your agent's behavior locally.</p> <p>The <code>async_stream_query</code> method returns a stream of events that represent the agent's execution trace.</p> deploy.py<pre><code># Create a local session to maintain conversation history\nsession = await app.async_create_session(user_id=\"u_123\")\nprint(session)\n</code></pre> <p>Expected output for <code>create_session</code> (local):</p> <pre><code>Session(id='c6a33dae-26ef-410c-9135-b434a528291f', app_name='default-app-name', user_id='u_123', state={}, events=[], last_update_time=1743440392.8689594)\n</code></pre> <p>Send a query to the agent. Copy-paste the following code to your \"deploy.py\" python script or a notebook.</p> deploy.py<pre><code>events = []\nasync for event in app.async_stream_query(\n    user_id=\"u_123\",\n    session_id=session.id,\n    message=\"whats the weather in new york\",\n):\n    events.append(event)\n\n# The full event stream shows the agent's thought process\nprint(\"--- Full Event Stream ---\")\nfor event in events:\n    print(event)\n\n# For quick tests, you can extract just the final text response\nfinal_text_responses = [\n    e for e in events\n    if e.get(\"content\", {}).get(\"parts\", [{}])[0].get(\"text\")\n    and not e.get(\"content\", {}).get(\"parts\", [{}])[0].get(\"function_call\")\n]\nif final_text_responses:\n    print(\"\\n--- Final Response ---\")\n    print(final_text_responses[0][\"content\"][\"parts\"][0][\"text\"])\n</code></pre>"},{"location":"deploy/agent-engine.en/#understanding-the-output","title":"Understanding the output","text":"<p>When you run the code above, you will see a few types of events:</p> <ul> <li>Tool Call Event: The model asks to call a tool (e.g., <code>get_weather</code>).</li> <li>Tool Response Event: The system provides the result of the tool call back to the model.</li> <li>Model Response Event: The final text response from the agent after it has processed the tool results.</li> </ul> <p>Expected output for <code>async_stream_query</code> (local):</p> <pre><code>{'parts': [{'function_call': {'id': 'af-a33fedb0-29e6-4d0c-9eb3-00c402969395', 'args': {'city': 'new york'}, 'name': 'get_weather'}}], 'role': 'model'}\n{'parts': [{'function_response': {'id': 'af-a33fedb0-29e6-4d0c-9eb3-00c402969395', 'name': 'get_weather', 'response': {'status': 'success', 'report': 'The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).'}}}], 'role': 'user'}\n{'parts': [{'text': 'The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).'}], 'role': 'model'}\n</code></pre>"},{"location":"deploy/agent-engine.en/#deploy-to-agent-engine","title":"Deploy to agent engine","text":"<p>Once you are satisfied with your agent's local behavior, you can deploy it. You can do this using the Python SDK or the <code>adk</code> command-line tool.</p> <p>This process packages your code, builds it into a container, and deploys it to the managed Agent Engine service. This process can take several minutes.</p> ADK CLIPython <p>You can deploy from your terminal using the <code>adk deploy</code> command line tool. The following example deploy command uses the <code>multi_tool_agent</code> sample code as the project to be deployed:</p> <pre><code>adk deploy agent_engine \\\n    --project=my-cloud-project-xxxxx \\\n    --region=us-central1 \\\n    --staging_bucket=gs://my-cloud-project-staging-bucket-name \\\n    --display_name=\"My Agent Name\" \\\n    /multi_tool_agent\n</code></pre> <p>Find the names of your available storage buckets in the Cloud Storage Bucket section of your deployment project in the Google Cloud Console. For more details on using the <code>adk deploy</code> command, see the  ADK CLI reference.</p> <p>Tip</p> <p>Make sure your main ADK agent definition (<code>root_agent</code>) is  discoverable when deploying your ADK project.</p> <p>This code block initiates the deployment from a Python script or notebook.</p> deploy.py<pre><code>from vertexai import agent_engines\n\nremote_app = agent_engines.create(\n    agent_engine=app,\n    requirements=[\n        \"google-cloud-aiplatform[adk,agent_engines]\"   \n    ]\n)\n\nprint(f\"Deployment finished!\")\nprint(f\"Resource Name: {remote_app.resource_name}\")\n# Resource Name: \"projects/{PROJECT_NUMBER}/locations/{LOCATION}/reasoningEngines/{RESOURCE_ID}\"\n#       Note: The PROJECT_NUMBER is different than the PROJECT_ID.\n</code></pre>"},{"location":"deploy/agent-engine.en/#monitoring-and-verification","title":"Monitoring and verification","text":"<ul> <li>You can monitor the deployment status in the Agent Engine UI in the Google Cloud Console.</li> <li>The <code>remote_app.resource_name</code> is the unique identifier for your deployed agent. You will need it to interact with the agent. You can also get this from the response returned by the ADK CLI command.</li> <li>For additional details, you can visit the Agent Engine documentation deploying an agent and managing deployed agents.</li> </ul>"},{"location":"deploy/agent-engine.en/#test-deployment","title":"Test deployed agent","text":"<p>Once you have completed the deployment of your agent to Agent Engine, you can view your deployed agent through the Google Cloud Console, and interact with the agent using REST calls or the Vertex AI SDK for Python.</p> <p>To view your deployed agent in the Cloud Console:</p> <ul> <li>Navigate to the Agent Engine page in the Google Cloud Console:     https://console.cloud.google.com/vertex-ai/agents/agent-engines</li> </ul> <p>This page lists all deployed agents in your currently selected Google Cloud  project. If you do not see your agent listed, make sure you have your target project selected in Google Cloud Console. For more information on selecting an exising Google Cloud project, see Creating and managing projects.</p>"},{"location":"deploy/agent-engine.en/#find-google-cloud-project-information","title":"Find Google Cloud project information","text":"<p>You need the address and resource identification for your project (<code>PROJECT_ID</code>, <code>LOCATION</code>, <code>RESOURCE_ID</code>) to be able to test your deployment. You can use Cloud Console or the <code>gcloud</code> command line tool to find this information. </p> <p>To find your project information with Google Cloud Console:</p> <ol> <li> <p>In the Google Cloud Console, navigate to the Agent Engine page:     https://console.cloud.google.com/vertex-ai/agents/agent-engines</p> </li> <li> <p>At the top of the page, select API URLs, and then copy the Query     URL string for your deployed agent, which should be in this format:</p> <pre><code>https://$(LOCATION_ID)-aiplatform.googleapis.com/v1/projects/$(PROJECT_ID)/locations/$(LOCATION_ID)/reasoningEngines/$(RESOURCE_ID):query\n</code></pre> </li> </ol> <p>To find your project information with <code>gloud</code>:</p> <ol> <li> <p>In your development environment, make sure you are authenticated to      Google Cloud and run the following command to list your project:</p> <pre><code>gcloud projects list\n</code></pre> </li> <li> <p>Take the Project ID used for deployment and run this command to get     the additional details:</p> <pre><code>gcloud asset search-all-resources \\\n    --scope=projects/$(PROJECT_ID) \\\n    --asset-types='aiplatform.googleapis.com/ReasoningEngine' \\\n    --format=\"table(name,assetType,location,reasoning_engine_id)\"\n</code></pre> </li> </ol>"},{"location":"deploy/agent-engine.en/#test-using-rest-calls","title":"Test using REST calls","text":"<p>A simple way to interact with your deployed agent in Agent Engine is to use REST calls with the <code>curl</code> tool. This section describes the how to check your connection to the agent and also to test processing of a request by the deployed agent.</p>"},{"location":"deploy/agent-engine.en/#check-connection-to-agent","title":"Check connection to agent","text":"<p>You can check your connection to the running agent using the Query URL available in the Agent Engine section of the Cloud Console. This check does not execute the deployed agent, but returns information about the agent.</p> <p>To send a REST call get a response from deployed agent:</p> <ul> <li> <p>In a terminal window of your development environment, build a request     and execute it:</p> <pre><code>curl -X GET \\\n    -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n    \"https://$(LOCATION)-aiplatform.googleapis.com/v1/projects/$(PROJECT_ID)/locations/$(LOCATION)/reasoningEngines\"\n</code></pre> </li> </ul> <p>If your deployment was successful, this request responds with a list of valid requests and expected data formats. </p> <p>Access for agent connections</p> <p>This connection test requires the calling user has a valid access token for the deployed agent. When testing from other environments, make sure the calling user has access to connect to the agent in your Google Cloud project.</p>"},{"location":"deploy/agent-engine.en/#send-an-agent-request","title":"Send an agent request","text":"<p>When getting responses from your agent project, you must first create a session, receive a Session ID, and then send your requests using that Session ID. This process is described in the following instructions.</p> <p>To test interaction with the deployed agent via REST:</p> <ol> <li> <p>In a terminal window of your development environment, create a session     by building a request using this template:</p> <pre><code>curl \\\n    -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n    -H \"Content-Type: application/json\" \\\n    https://$(LOCATION)-aiplatform.googleapis.com/v1/projects/$(PROJECT_ID)/locations/$(LOCATION)/reasoningEngines/$(RESOURCE_ID):query \\\n    -d '{\"class_method\": \"async_create_session\", \"input\": {\"user_id\": \"u_123\"},}'\n</code></pre> </li> <li> <p>In the response to the previous command, extract the created Session ID     from the id field:</p> <pre><code>{\n    \"output\": {\n        \"userId\": \"u_123\",\n        \"lastUpdateTime\": 1757690426.337745,\n        \"state\": {},\n        \"id\": \"4857885913439920384\", # Session ID\n        \"appName\": \"9888888855577777776\",\n        \"events\": []\n    }\n}\n</code></pre> </li> <li> <p>In a terminal window of your development environment, send a message to     your agent by building a request using this template and the Session ID     created in the previous step:</p> <pre><code>curl \\\n-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n-H \"Content-Type: application/json\" \\\nhttps://$(LOCATION)-aiplatform.googleapis.com/v1/projects/$(PROJECT_ID)/locations/$(LOCATION)/reasoningEngines/$(RESOURCE_ID):streamQuery?alt=sse -d '{\n\"class_method\": \"async_stream_query\",\n\"input\": {\n    \"user_id\": \"u_123\",\n    \"session_id\": \"4857885913439920384\",\n    \"message\": \"Hey whats the weather in new york today?\",\n}\n}'\n</code></pre> </li> </ol> <p>This request should generate a response from your deployed agent code in JSON format. For more information about interacting with a deployed ADK agent in Agent Engine using REST calls, see Manage deployed agents and Use a Agent Development Kit agent in the Agent Engine documentation.</p>"},{"location":"deploy/agent-engine.en/#test-using-python","title":"Test using Python","text":"<p>You can use Python code for more sophisticated and repeatable testing of your agent deployed in Agent Engine. These instructions describe how to create a session with the deployed agent, and then send a request to the agent for processing.</p>"},{"location":"deploy/agent-engine.en/#create-a-remote-session","title":"Create a remote session","text":"<p>Use the <code>remote_app</code> object to create a connection to deployed, remote agent:</p> <pre><code># If you are in a new script or used the ADK CLI to deploy, you can connect like this:\n# remote_app = agent_engines.get(\"your-agent-resource-name\")\nremote_session = await remote_app.async_create_session(user_id=\"u_456\")\nprint(remote_session)\n</code></pre> <p>Expected output for <code>create_session</code> (remote):</p> <pre><code>{'events': [],\n'user_id': 'u_456',\n'state': {},\n'id': '7543472750996750336',\n'app_name': '7917477678498709504',\n'last_update_time': 1743683353.030133}\n</code></pre> <p>The <code>id</code> value is the session ID, and <code>app_name</code> is the resource ID of the deployed agent on Agent Engine.</p>"},{"location":"deploy/agent-engine.en/#send-queries-to-your-remote-agent","title":"Send queries to your remote agent","text":"<pre><code>async for event in remote_app.async_stream_query(\n    user_id=\"u_456\",\n    session_id=remote_session[\"id\"],\n    message=\"whats the weather in new york\",\n):\n    print(event)\n</code></pre> <p>Expected output for <code>async_stream_query</code> (remote):</p> <pre><code>{'parts': [{'function_call': {'id': 'af-f1906423-a531-4ecf-a1ef-723b05e85321', 'args': {'city': 'new york'}, 'name': 'get_weather'}}], 'role': 'model'}\n{'parts': [{'function_response': {'id': 'af-f1906423-a531-4ecf-a1ef-723b05e85321', 'name': 'get_weather', 'response': {'status': 'success', 'report': 'The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).'}}}], 'role': 'user'}\n{'parts': [{'text': 'The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).'}], 'role': 'model'}\n</code></pre> <p>For more information about interacting with a deployed ADK agent in Agent Engine, see Manage deployed agents and Use a Agent Development Kit agent in the Agent Engine documentation.</p>"},{"location":"deploy/agent-engine.en/#sending-multimodal-queries","title":"Sending Multimodal Queries","text":"<p>To send multimodal queries (e.g., including images) to your agent, you can construct the <code>message</code> parameter of <code>async_stream_query</code> with a list of <code>types.Part</code> objects. Each part can be text or an image.</p> <p>To include an image, you can use <code>types.Part.from_uri</code>, providing a Google Cloud Storage (GCS) URI for the image.</p> <pre><code>from google.genai import types\n\nimage_part = types.Part.from_uri(\n    file_uri=\"gs://cloud-samples-data/generative-ai/image/scones.jpg\",\n    mime_type=\"image/jpeg\",\n)\ntext_part = types.Part.from_text(\n    text=\"What is in this image?\",\n)\n\nasync for event in remote_app.async_stream_query(\n    user_id=\"u_456\",\n    session_id=remote_session[\"id\"],\n    message=[text_part, image_part],\n):\n    print(event)\n</code></pre> <p>Note</p> <p>While the underlying communication with the model may involve Base64 encoding for images, the recommended and supported method for sending image data to an agent deployed on Agent Engine is by providing a GCS URI.</p>"},{"location":"deploy/agent-engine.en/#payload","title":"Deployment payload","text":"<p>When you deploy your ADK agent project to Agent Engine, the following content is uploaded to the service:</p> <ul> <li>Your ADK agent code</li> <li>Any dependencies declared in your ADK agent code</li> </ul> <p>The deployment does not include the ADK API server or the ADK web user interface libraries. The Agent Engine service provides the libraries for ADK API server functionality.</p>"},{"location":"deploy/agent-engine.en/#clean-up-deployments","title":"Clean up deployments","text":"<p>If you have performed deployments as tests, it is a good practice to clean up your cloud resources after you have finished. You can delete the deployed Agent Engine instance to avoid any unexpected charges on your Google Cloud account.</p> <pre><code>remote_app.delete(force=True)\n</code></pre> <p>The <code>force=True</code> parameter also deletes any child resources that were generated from the deployed agent, such as sessions. You can also delete your deployed agent via the Agent Engine UI on Google Cloud.</p>"},{"location":"deploy/agent-engine/","title":"\u90e8\u7f72\u5230 Vertex AI Agent Engine","text":"<p>Agent Engine \u662f\u4e00\u9805\u5168\u4ee3\u7ba1\u7684 Google Cloud \u670d\u52d9\uff0c\u53ef\u8b93\u958b\u767c\u8005\u5728\u6b63\u5f0f\u74b0\u5883\u4e2d\u90e8\u7f72\u3001\u7ba1\u7406\u8207\u64f4\u5c55 AI agent\u3002Agent Engine \u6703\u8655\u7406\u6b63\u5f0f\u74b0\u5883\u4e0b agent \u7684\u57fa\u790e\u67b6\u69cb\u64f4\u5c55\uff0c\u8b93\u4f60\u80fd\u5c08\u6ce8\u65bc\u6253\u9020\u667a\u6167\u4e14\u5177\u5f71\u97ff\u529b\u7684\u61c9\u7528\u7a0b\u5f0f\u3002\u672c\u6307\u5357\u63d0\u4f9b\u5169\u7a2e\u90e8\u7f72\u65b9\u5f0f\uff1a\u4e00\u7a2e\u662f\u52a0\u901f\u90e8\u7f72\u6d41\u7a0b\uff0c\u9069\u5408\u4f60\u60f3\u5feb\u901f\u90e8\u7f72 Agent Development Kit (ADK) \u5c08\u6848\u6642\u4f7f\u7528\uff1b\u53e6\u4e00\u7a2e\u662f\u6a19\u6e96\u3001\u9010\u6b65\u7684\u90e8\u7f72\u6307\u5f15\uff0c\u9069\u5408\u4f60\u5e0c\u671b\u7d30\u7dfb\u7ba1\u7406 agent \u90e8\u7f72\u5230 Agent Engine \u7684\u60c5\u5883\u3002</p>"},{"location":"deploy/agent-engine/#_1","title":"\u52a0\u901f\u90e8\u7f72","text":"<p>\u672c\u7bc0\u8aaa\u660e\u5982\u4f55\u4f7f\u7528 Agent Starter Pack\uff08ASP\uff09\u8207 ADK \u547d\u4ee4\u5217\u4ecb\u9762 (CLI) \u5de5\u5177\u9032\u884c\u90e8\u7f72\u3002\u9019\u7a2e\u65b9\u5f0f\u6703\u5229\u7528 ASP \u5de5\u5177\u5c07\u5c08\u6848\u7bc4\u672c\u5957\u7528\u5230\u4f60\u7684\u73fe\u6709\u5c08\u6848\u3001\u52a0\u5165\u90e8\u7f72\u6240\u9700\u7684\u6a94\u6848\uff0c\u4e26\u70ba\u90e8\u7f72\u505a\u597d\u6e96\u5099\u3002\u9019\u4e9b\u6307\u5f15\u6703\u6559\u4f60\u5982\u4f55\u4f7f\u7528 ASP \u4f86\u914d\u7f6e Google Cloud \u5c08\u6848\uff0c\u4e26\u555f\u7528\u90e8\u7f72 ADK \u5c08\u6848\u6240\u9700\u7684\u670d\u52d9\uff0c\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ul> <li>\u5148\u6c7a\u689d\u4ef6\uff1a\u8a2d\u5b9a Google Cloud \u5e33\u6236\u3001\u5c08\u6848\uff0c\u4e26\u5b89\u88dd\u5fc5\u8981\u8edf\u9ad4\u3002</li> <li>\u6e96\u5099\u4f60\u7684 ADK \u5c08\u6848\uff1a\u4fee\u6539\u4f60\u73fe\u6709\u7684 ADK \u5c08\u6848\u6a94\u6848\uff0c\u70ba\u90e8\u7f72\u505a\u6e96\u5099\u3002</li> <li>\u9023\u63a5\u5230\u4f60\u7684 Google Cloud \u5c08\u6848\uff1a\u5c07\u4f60\u7684\u958b\u767c\u74b0\u5883\u9023\u63a5\u5230 Google Cloud \u53ca\u4f60\u7684 Google Cloud \u5c08\u6848\u3002</li> <li>\u90e8\u7f72\u4f60\u7684 ADK \u5c08\u6848\uff1a\u5728 Google Cloud \u5c08\u6848\u4e2d\u914d\u7f6e\u6240\u9700\u670d\u52d9\uff0c\u4e26\u4e0a\u50b3\u4f60\u7684 ADK \u5c08\u6848\u7a0b\u5f0f\u78bc\u3002</li> </ul> <p>\u5982\u9700\u6e2c\u8a66\u5df2\u90e8\u7f72 agent \u7684\u76f8\u95dc\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 \u6e2c\u8a66\u5df2\u90e8\u7f72 agent\u3002\u5982\u9700\u66f4\u591a\u95dc\u65bc Agent Starter Pack \u53ca\u5176\u547d\u4ee4\u5217\u5de5\u5177\u7684\u8aaa\u660e\uff0c\u8acb\u53c3\u95b1 CLI \u53c3\u8003 \u53ca \u958b\u767c\u6307\u5357\u3002</p>"},{"location":"deploy/agent-engine/#prerequisites-ad","title":"\u5148\u6c7a\u689d\u4ef6","text":"<p>\u4f60\u9700\u8981\u5148\u5b8c\u6210\u4ee5\u4e0b\u8cc7\u6e90\u8a2d\u5b9a\uff0c\u624d\u80fd\u4f7f\u7528\u672c\u90e8\u7f72\u8def\u5f91\uff1a</p> <ul> <li>Google Cloud \u5e33\u6236\uff0c\u9700\u5177\u5099\u7ba1\u7406\u54e1\u6b0a\u9650\uff0c\u4ee5\u4fbf\uff1a</li> <li>Google Cloud \u5c08\u6848\uff1a\u4e00\u500b\u555f\u7528 \u8a08\u8cbb\u529f\u80fd \u7684\u7a7a\u767d Google Cloud \u5c08\u6848\u3002     \u5982\u9700\u5efa\u7acb\u5c08\u6848\u7684\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 \u5efa\u7acb\u8207\u7ba1\u7406\u5c08\u6848\u3002</li> <li>Python \u74b0\u5883\uff1a\u652f\u63f4 3.9 \u81f3 3.13 \u7248\u672c\u7684 Python\u3002</li> <li>UV \u5de5\u5177\uff1a\u7528\u65bc\u7ba1\u7406 Python \u958b\u767c\u74b0\u5883\u53ca\u57f7\u884c ASP \u5de5\u5177\u3002\u5b89\u88dd\u8aaa\u660e\u8acb\u53c3\u95b1 \u5b89\u88dd UV\u3002</li> <li>Google Cloud CLI \u5de5\u5177\uff1agcloud \u547d\u4ee4\u5217\u4ecb\u9762\u3002\u5b89\u88dd\u8aaa\u660e\u8acb\u53c3\u95b1 Google Cloud Command Line Interface\u3002</li> <li>Make \u5de5\u5177\uff1a\u5efa\u7f6e\u81ea\u52d5\u5316\u5de5\u5177\u3002\u5927\u591a\u6578 Unix \u7cfb\u7d71\u9810\u8a2d\u5df2\u5b89\u88dd\uff0c\u5b89\u88dd\u8aaa\u660e\u8acb\u53c3\u95b1 Make \u5de5\u5177 \u6587\u4ef6\u3002</li> <li>Terraform\uff1a\u7528\u65bc\u5728 Google Cloud \u4e0a\u90e8\u7f72\u57fa\u790e\u67b6\u69cb\u8207\u670d\u52d9\u3002\u5b89\u88dd\u8aaa\u660e\u8acb\u53c3\u95b1 \u5b89\u88dd Terraform\u3002</li> </ul>"},{"location":"deploy/agent-engine/#prepare-ad","title":"\u6e96\u5099\u4f60\u7684 ADK \u5c08\u6848","text":"<p>\u7576\u4f60\u8981\u5c07 Agent Development Kit (ADK) \u5c08\u6848\u90e8\u7f72\u5230 Agent Engine \u6642\uff0c\u9700\u8981\u984d\u5916\u52a0\u5165\u4e00\u4e9b\u6a94\u6848\u4ee5\u652f\u63f4\u90e8\u7f72\u4f5c\u696d\u3002\u4ee5\u4e0b ASP \u6307\u4ee4\u6703\u5148\u5099\u4efd\u4f60\u7684\u5c08\u6848\uff0c\u7136\u5f8c\u5c07\u90e8\u7f72\u6240\u9700\u7684\u6a94\u6848\u52a0\u5165\u4f60\u7684\u5c08\u6848\u4e2d\u3002</p> <p>\u9019\u4e9b\u6307\u5f15\u5047\u8a2d\u4f60\u5df2\u7d93\u6709\u4e00\u500b\u73fe\u6709\u7684 ADK \u5c08\u6848\uff0c\u4e26\u4e14\u6b63\u5728\u4fee\u6539\u4ee5\u4fbf\u90e8\u7f72\u3002\u5982\u679c\u4f60\u9084\u6c92\u6709 ADK \u5c08\u6848\uff0c\u6216\u60f3\u8981\u4f7f\u7528\u6e2c\u8a66\u5c08\u6848\uff0c\u8acb\u53c3\u8003 Python \u5feb\u901f\u958b\u59cb \u6307\u5357\uff0c\u8a72\u6307\u5357\u6703\u5efa\u7acb\u4e00\u500b multi_tool_agent \u5c08\u6848\u3002\u4ee5\u4e0b\u8aaa\u660e\u5c07\u4ee5 <code>multi_tool_agent</code> \u5c08\u6848\u70ba\u4f8b\u3002</p> <p>\u5c07\u4f60\u7684 ADK \u5c08\u6848\u6e96\u5099\u597d\u4ee5\u90e8\u7f72\u5230 Agent Engine\uff1a</p> <ol> <li> <p>\u5728\u4f60\u7684\u958b\u767c\u74b0\u5883\u7d42\u7aef\u6a5f\u8996\u7a97\u4e2d\uff0c\u5207\u63db\u5230\u5c08\u6848\u7684\u6839\u76ee\u9304\uff0c\u4f8b\u5982\uff1a</p> <pre><code>cd multi_tool_agent/\n</code></pre> </li> <li> <p>\u57f7\u884c ASP <code>enhance</code> \u6307\u4ee4\uff0c\u5c07\u90e8\u7f72\u6240\u9700\u7684\u6a94\u6848\u52a0\u5165\u60a8\u7684\u5c08\u6848\u4e2d\u3002</p> <pre><code>uvx agent-starter-pack enhance --adk -d agent_engine\n</code></pre> </li> <li> <p>\u8acb\u4f9d\u7167 ASP \u5de5\u5177\u7684\u6307\u793a\u64cd\u4f5c\u3002\u4e00\u822c\u4f86\u8aaa\uff0c\u6240\u6709\u554f\u984c\u90fd\u53ef\u4ee5\u63a5\u53d7\u9810\u8a2d\u7b54\u6848\u3002\u4e0d\u904e\uff0c\u5728\u9078\u64c7 GCP region\uff08Google Cloud \u5340\u57df\uff09\u6642\uff0c\u8acb\u52d9\u5fc5\u9078\u64c7 Agent Engine \u652f\u63f4\u7684\u5340\u57df \u4e4b\u4e00\u3002</p> </li> </ol> <p>\u7576\u4f60\u9806\u5229\u5b8c\u6210\u9019\u500b\u6d41\u7a0b\u5f8c\uff0c\u5de5\u5177\u6703\u986f\u793a\u4ee5\u4e0b\u8a0a\u606f\uff1a</p> <pre><code>&gt; Success! Your agent project is ready.\n</code></pre> <p>Note</p> <p>ASP \u5de5\u5177\u5728\u57f7\u884c\u6642\u53ef\u80fd\u6703\u986f\u793a\u9023\u7dda\u5230 Google Cloud \u7684\u63d0\u9192\uff0c\u4f46\u6b64\u968e\u6bb5\u4e0d\u9700\u8981\u9032\u884c\u9023\u7dda\u3002</p> <p>\u5982\u9700\u77ad\u89e3 ASP \u5c0d\u60a8\u7684 Agent Development Kit (ADK) \u5c08\u6848\u6240\u505a\u7684\u8b8a\u66f4\uff0c\u8acb\u53c3\u95b1 Changes to your ADK project\u3002</p>"},{"location":"deploy/agent-engine/#connect-ad","title":"\u9023\u7dda\u5230\u60a8\u7684 Google Cloud \u5c08\u6848","text":"<p>\u5728\u90e8\u7f72\u60a8\u7684 Agent Development Kit (ADK) \u5c08\u6848\u4e4b\u524d\uff0c\u60a8\u5fc5\u9808\u5148\u9023\u7dda\u5230 Google Cloud \u4ee5\u53ca\u60a8\u7684\u5c08\u6848\u3002\u5728\u767b\u5165\u60a8\u7684 Google Cloud \u5e33\u6236\u5f8c\uff0c\u8acb\u78ba\u8a8d\u60a8\u7684\u90e8\u7f72\u76ee\u6a19\u5c08\u6848\u53ef\u5f9e\u60a8\u7684\u5e33\u6236\u4e2d\u770b\u5230\uff0c\u4e26\u4e14\u5df2\u8a2d\u5b9a\u70ba\u76ee\u524d\u7684\u5c08\u6848\u3002</p> <p>\u8981\u9023\u7dda\u5230 Google Cloud \u4e26\u5217\u51fa\u60a8\u7684\u5c08\u6848\uff0c\u8acb\u4f9d\u4e0b\u5217\u6b65\u9a5f\u64cd\u4f5c\uff1a</p> <ol> <li> <p>\u5728\u60a8\u7684\u958b\u767c\u74b0\u5883\u7d42\u7aef\u6a5f\u8996\u7a97\u4e2d\uff0c\u767b\u5165\u60a8\u7684 Google Cloud \u5e33\u6236\uff1a</p> <pre><code>gcloud auth application-default login\n</code></pre> </li> <li> <p>\u4f7f\u7528 Google Cloud \u5c08\u6848 ID \u8a2d\u5b9a\u60a8\u7684\u76ee\u6a19\u5c08\u6848\uff1a</p> <pre><code>gcloud config set project your-project-id-xxxxx\n</code></pre> </li> <li> <p>\u78ba\u8a8d\u60a8\u5df2\u8a2d\u5b9a Google Cloud \u76ee\u6a19\u5c08\u6848\u3002</p> <pre><code>gcloud config get-value project\n</code></pre> </li> </ol> <p>\u7576\u4f60\u5df2\u6210\u529f\u9023\u63a5\u5230 Google Cloud \u4e26\u8a2d\u5b9a\u597d\u4f60\u7684 Google Cloud \u5c08\u6848 ID \u4e4b\u5f8c\uff0c\u5c31\u53ef\u4ee5\u5c07\u4f60\u7684 Agent Development Kit (ADK) \u5c08\u6848\u6a94\u6848\u90e8\u7f72\u5230 Agent Engine\u3002</p>"},{"location":"deploy/agent-engine/#deploy-ad","title":"\u90e8\u7f72\u4f60\u7684 ADK \u5c08\u6848","text":"<p>\u4f7f\u7528 ASP \u5de5\u5177\u6642\uff0c\u90e8\u7f72\u6703\u5206\u70ba\u591a\u500b\u968e\u6bb5\u3002\u5728\u7b2c\u4e00\u968e\u6bb5\uff0c\u4f60\u9700\u8981\u57f7\u884c <code>make</code> \u6307\u4ee4\uff0c\u9019\u6703\u5728 Agent Engine \u4e0a\u914d\u7f6e\u57f7\u884c ADK \u5de5\u4f5c\u6d41\u7a0b\u6240\u9700\u7684\u670d\u52d9\u3002\u5728\u7b2c\u4e8c\u968e\u6bb5\uff0c\u4f60\u7684\u5c08\u6848\u7a0b\u5f0f\u78bc\u6703\u4e0a\u50b3\u5230 Agent Engine \u670d\u52d9\uff0c\u4e26\u958b\u59cb\u57f7\u884c agent \u5c08\u6848\u3002</p> <p>Important</p> <p>\u5728\u57f7\u884c\u4ee5\u4e0b\u6b65\u9a5f\u524d\uff0c\u8acb\u78ba\u4fdd\u4f60\u7684 Google Cloud \u76ee\u6a19\u90e8\u7f72\u5c08\u6848\u5df2\u8a2d\u70ba\u76ee\u524d\u5c08\u6848\u3002<code>make backend</code> \u6307\u4ee4\u6703\u5728\u90e8\u7f72\u6642\u4f7f\u7528\u4f60\u76ee\u524d\u8a2d\u5b9a\u7684 Google Cloud \u5c08\u6848\u3002\u5982\u9700\u8a2d\u5b9a\u8207\u6aa2\u67e5\u76ee\u524d\u5c08\u6848\u7684\u76f8\u95dc\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 Connect to your Google Cloud project\u3002</p> <p>\u8981\u5c07\u4f60\u7684 Agent Development Kit (ADK) \u5c08\u6848\u90e8\u7f72\u5230 Google Cloud \u5c08\u6848\u4e2d\u7684 Agent Engine\uff0c\u8acb\u4f9d\u7167\u4e0b\u5217\u6b65\u9a5f\u64cd\u4f5c\uff1a</p> <ol> <li>\u5728\u958b\u767c\u74b0\u5883\u7684\u7d42\u7aef\u6a5f\u8996\u7a97\u4e2d\uff0c\u5207\u63db\u5230\u4f60\u7684\u5c08\u6848\u6839\u76ee\u9304\uff0c\u4f8b\u5982\uff1a     <code>cd multi_tool_agent/</code></li> <li> <p>\u900f\u904e\u57f7\u884c\u4ee5\u4e0b ASP make \u6307\u4ee4\uff0c\u5efa\u7acb\u958b\u767c\u74b0\u5883\uff0c\u5305\u62ec\u65e5\u8a8c\u8a18\u9304\u3001\u670d\u52d9\u5e33\u6236\u3001\u5132\u5b58\u7a7a\u9593\uff0c\u4ee5\u53ca Vertex AI API\uff1a</p> <pre><code>make setup-dev-env\n</code></pre> </li> <li> <p>\u5c07\u5df2\u66f4\u65b0\u7684\u672c\u6a5f\u5c08\u6848\u7a0b\u5f0f\u78bc\u90e8\u7f72\u5230 Google Cloud \u958b\u767c\u74b0\u5883\uff0c\u8acb\u57f7\u884c\u4ee5\u4e0b ASP make \u6307\u4ee4\uff1a</p> <pre><code>make backend\n</code></pre> </li> </ol> <p>\u7576\u6b64\u7a0b\u5e8f\u9806\u5229\u5b8c\u6210\u5f8c\uff0c\u60a8\u61c9\u8a72\u53ef\u4ee5\u8207\u904b\u884c\u65bc Google Cloud Agent Engine \u7684 agent \u4e92\u52d5\u3002\u5982\u9700\u6e2c\u8a66\u5df2\u90e8\u7f72 agent \u7684\u8a73\u7d30\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1\u4e0b\u4e00\u7bc0\u3002</p> <p>\u7576\u6b64\u7a0b\u5e8f\u9806\u5229\u5b8c\u6210\u5f8c\uff0c\u60a8\u61c9\u8a72\u53ef\u4ee5\u8207\u904b\u884c\u65bc Google Cloud Agent Engine \u7684 agent \u4e92\u52d5\u3002\u5982\u9700\u6e2c\u8a66\u5df2\u90e8\u7f72 agent \u7684\u8a73\u7d30\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 \u6e2c\u8a66\u5df2\u90e8\u7f72 agent\u3002</p>"},{"location":"deploy/agent-engine/#adk-asp-changes","title":"\u60a8\u7684 Agent Development Kit (ADK) \u5c08\u6848\u8b8a\u66f4","text":"<p>ASP \u5de5\u5177\u6703\u70ba\u60a8\u7684\u5c08\u6848\u65b0\u589e\u66f4\u591a\u6a94\u6848\u4ee5\u9032\u884c\u90e8\u7f72\u3002\u4ee5\u4e0b\u6b65\u9a5f\u6703\u5728\u4fee\u6539\u524d\u5099\u4efd\u60a8\u73fe\u6709\u7684\u5c08\u6848\u6a94\u6848\u3002\u672c\u6307\u5357\u4ee5 multi_tool_agent \u5c08\u6848\u4f5c\u70ba\u53c3\u8003\u7bc4\u4f8b\u3002\u539f\u59cb\u5c08\u6848\u8d77\u59cb\u6642\u7684\u6a94\u6848\u7d50\u69cb\u5982\u4e0b\uff1a</p> <pre><code>multi_tool_agent/\n\u251c\u2500 __init__.py\n\u251c\u2500 agent.py\n\u2514\u2500 .env\n</code></pre> <p>\u57f7\u884c ASP enhance \u6307\u4ee4\u4ee5\u65b0\u589e Agent Engine \u90e8\u7f72\u8cc7\u8a0a\u5f8c\uff0c\u65b0\u7684\u7d50\u69cb\u5982\u4e0b\uff1a</p> <pre><code>multi-tool-agent/\n\u251c\u2500 app/                 # Core application code\n\u2502   \u251c\u2500 agent.py         # Main agent logic\n\u2502   \u251c\u2500 agent_engine_app.py # Agent Engine application logic\n\u2502   \u2514\u2500 utils/           # Utility functions and helpers\n\u251c\u2500 .cloudbuild/         # CI/CD pipeline configurations for Google Cloud Build\n\u251c\u2500 deployment/          # Infrastructure and deployment scripts\n\u251c\u2500 notebooks/           # Jupyter notebooks for prototyping and evaluation\n\u251c\u2500 tests/               # Unit, integration, and load tests\n\u251c\u2500 Makefile             # Makefile for common commands\n\u251c\u2500 GEMINI.md            # AI-assisted development guide\n\u2514\u2500 pyproject.toml       # Project dependencies and configuration\n</code></pre> <p>\u5982\u9700\u66f4\u591a\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1\u5df2\u66f4\u65b0\u7684 ADK \u5c08\u6848\u8cc7\u6599\u593e\u4e2d\u7684 README.md \u6a94\u6848\u3002 \u95dc\u65bc\u4f7f\u7528 Agent Starter Pack \u7684\u8a73\u7d30\u8aaa\u660e\uff0c\u8acb\u53c3\u95b1 Development guide\u3002</p>"},{"location":"deploy/agent-engine/#_2","title":"\u6a19\u6e96\u90e8\u7f72","text":"<p>\u672c\u7bc0\u5c07\u9010\u6b65\u8aaa\u660e\u5982\u4f55\u90e8\u7f72\u81f3 Agent Engine\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u4ed4\u7d30\u7ba1\u7406\u90e8\u7f72\u8a2d\u5b9a\uff0c\u6216\u662f\u8981\u4fee\u6539\u73fe\u6709\u7684 Agent Engine \u90e8\u7f72\uff0c\u9019\u4e9b\u6307\u5f15\u5c07\u7279\u5225\u9069\u7528\u3002</p>"},{"location":"deploy/agent-engine/#_3","title":"\u5148\u6c7a\u689d\u4ef6","text":"<p>\u672c\u8aaa\u660e\u5047\u8a2d\u4f60\u5df2\u7d93\u5b9a\u7fa9\u4e86\u4e00\u500b Agent Development Kit (ADK) \u5c08\u6848\u3002\u5982\u679c\u4f60\u5c1a\u672a\u64c1\u6709 ADK \u5c08\u6848\uff0c\u8acb\u53c3\u95b1 Define your agent \u4e2d\u5efa\u7acb\u6e2c\u8a66\u5c08\u6848\u7684\u76f8\u95dc\u6307\u5f15\u3002</p> <p>\u5728\u958b\u59cb\u90e8\u7f72\u7a0b\u5e8f\u4e4b\u524d\uff0c\u8acb\u78ba\u4fdd\u4f60\u5df2\u5177\u5099\u4ee5\u4e0b\u689d\u4ef6\uff1a</p> <ol> <li> <p>Google Cloud \u5c08\u6848\uff1a\u4e00\u500b\u5df2\u555f\u7528 Vertex AI API \u7684 Google Cloud \u5c08\u6848\u3002</p> </li> <li> <p>\u5df2\u9a57\u8b49\u7684 gcloud CLI\uff1a\u4f60\u9700\u8981\u5df2\u901a\u904e Google Cloud \u9a57\u8b49\u3002\u8acb\u5728\u7d42\u7aef\u6a5f\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\uff1a     <pre><code>gcloud auth application-default login\n</code></pre></p> </li> <li> <p>Google Cloud Storage (GCS) Bucket\uff1aAgent Engine \u9700\u8981\u4e00\u500b GCS bucket \u4f86\u66ab\u5b58\u4f60\u7684 agent \u7a0b\u5f0f\u78bc\u8207\u76f8\u4f9d\u5957\u4ef6\uff0c\u4ee5\u4fbf\u90e8\u7f72\u3002\u5982\u679c\u4f60\u9084\u6c92\u6709 bucket\uff0c\u8acb\u4f9d\u7167\u9019\u88e1\u7684\u8aaa\u660e\u5efa\u7acb\u4e00\u500b\u3002</p> </li> <li> <p>Python \u74b0\u5883\uff1a\u9700\u8981 Python 3.9 \u81f3 3.13 \u4e4b\u9593\u7684\u7248\u672c\u3002</p> </li> <li> <p>\u5b89\u88dd Vertex AI SDK</p> <p>Agent Engine \u662f Vertex AI SDK for Python \u7684\u4e00\u90e8\u5206\u3002\u4f60\u53ef\u4ee5\u53c3\u8003 Agent Engine \u5feb\u901f\u958b\u59cb\u6587\u4ef6\u8aaa\u660e \u4ee5\u7372\u5f97\u66f4\u591a\u8cc7\u8a0a\u3002</p> <pre><code>pip install google-cloud-aiplatform[adk,agent_engines]&gt;=1.111\n</code></pre> </li> </ol>"},{"location":"deploy/agent-engine/#define-your-agent","title":"\u5b9a\u7fa9\u4f60\u7684 agent","text":"<p>\u9019\u4e9b\u6307\u5f15\u5047\u8a2d\u4f60\u5df2\u7d93\u6709\u4e00\u500b\u73fe\u6709\u7684 Agent Development Kit (ADK) \u5c08\u6848\uff0c\u4e26\u4e14\u6b63\u5728\u9032\u884c\u4fee\u6539\u4ee5\u90e8\u7f72\u3002\u5982\u679c\u4f60\u9084\u6c92\u6709 ADK \u5c08\u6848\uff0c\u6216\u60f3\u8981\u4f7f\u7528\u6e2c\u8a66\u5c08\u6848\uff0c\u8acb\u5148\u5b8c\u6210 Python \u5feb\u901f\u958b\u59cb \u6307\u5357\uff0c\u8a72\u6307\u5357\u6703\u5efa\u7acb\u4e00\u500b multi_tool_agent \u5c08\u6848\u3002\u4ee5\u4e0b\u8aaa\u660e\u5c07\u4ee5 <code>multi_tool_agent</code> \u5c08\u6848\u4f5c\u70ba\u7bc4\u4f8b\u3002</p>"},{"location":"deploy/agent-engine/#vertex-ai","title":"\u521d\u59cb\u5316 Vertex AI","text":"<p>\u63a5\u4e0b\u4f86\uff0c\u521d\u59cb\u5316 Vertex AI SDK\u3002\u9019\u6703\u544a\u8a34 SDK \u8981\u4f7f\u7528\u54ea\u500b Google Cloud \u5c08\u6848\u8207\u5340\u57df\uff0c\u4ee5\u53ca\u90e8\u7f72\u6642\u6a94\u6848\u8981\u66ab\u5b58\u5728\u54ea\u88e1\u3002</p> <p>For IDE Users</p> <p>\u60a8\u53ef\u4ee5\u5c07\u9019\u6bb5\u521d\u59cb\u5316\u7a0b\u5f0f\u78bc\u8207\u5f8c\u7e8c\u6b65\u9a5f 3 \u5230 6 \u7684\u90e8\u7f72\u908f\u8f2f\u4e00\u8d77\u653e\u5728\u7368\u7acb\u7684 <code>deploy.py</code> \u8173\u672c\u4e2d\u3002</p> deploy.py<pre><code>import vertexai\nfrom agent import root_agent # modify this if your agent is not in agent.py\n\n# TODO: Fill in these values for your project\nPROJECT_ID = \"your-gcp-project-id\"\nLOCATION = \"us-central1\"  # For other options, see https://cloud.google.com/vertex-ai/generative-ai/docs/agent-engine/overview#supported-regions\nSTAGING_BUCKET = \"gs://your-gcs-bucket-name\"\n\n# Initialize the Vertex AI SDK\nvertexai.init(\n    project=PROJECT_ID,\n    location=LOCATION,\n    staging_bucket=STAGING_BUCKET,\n)\n</code></pre>"},{"location":"deploy/agent-engine/#agent","title":"\u70ba agent \u90e8\u7f72\u505a\u6e96\u5099","text":"<p>\u70ba\u4e86\u8b93\u4f60\u7684 agent \u80fd\u5920\u76f8\u5bb9\u65bc Agent Engine\uff0c\u4f60\u9700\u8981\u5c07\u5b83\u5305\u88dd\u5728 <code>AdkApp</code> \u7269\u4ef6\u4e2d\u3002</p> deploy.py<pre><code>from vertexai import agent_engines\n\n# Wrap the agent in an AdkApp object\napp = agent_engines.AdkApp(\n    agent=root_agent,\n    enable_tracing=True,\n)\n</code></pre> <p>Info</p> <p>\u7576 AdkApp \u90e8\u7f72\u5230 Agent Engine \u6642\uff0c\u6703\u81ea\u52d5\u4f7f\u7528 <code>VertexAiSessionService</code> \u4f86\u7ba1\u7406\u6301\u4e45\u5316\u7684 session state\u3002\u9019\u53ef\u5728\u7121\u9700\u984d\u5916\u8a2d\u5b9a\u7684\u60c5\u6cc1\u4e0b\uff0c\u70ba\u591a\u8f2a\u5c0d\u8a71\u63d0\u4f9b\u8a18\u61b6\u529f\u80fd\u3002\u82e5\u9032\u884c\u672c\u6a5f\u6e2c\u8a66\uff0c\u61c9\u7528\u7a0b\u5f0f\u5247\u6703\u9810\u8a2d\u4f7f\u7528\u66ab\u5b58\u65bc\u8a18\u61b6\u9ad4\u4e2d\u7684 session \u670d\u52d9\u3002</p>"},{"location":"deploy/agent-engine/#agent_1","title":"\u672c\u6a5f\u6e2c\u8a66 agent\uff08\u9078\u7528\uff09","text":"<p>\u5728\u90e8\u7f72\u4e4b\u524d\uff0c\u4f60\u53ef\u4ee5\u5148\u5728\u672c\u6a5f\u6e2c\u8a66 agent \u7684\u884c\u70ba\u3002</p> <p><code>async_stream_query</code> \u65b9\u6cd5\u6703\u56de\u50b3\u4e00\u4e32\u4ee3\u8868 agent \u57f7\u884c\u8ffd\u8e64\u7d00\u9304\u7684\u4e8b\u4ef6\u4e32\u6d41\u3002</p> deploy.py<pre><code># Create a local session to maintain conversation history\nsession = await app.async_create_session(user_id=\"u_123\")\nprint(session)\n</code></pre> <p><code>create_session</code>\uff08\u672c\u6a5f\uff09\u9810\u671f\u8f38\u51fa\uff1a</p> <pre><code>Session(id='c6a33dae-26ef-410c-9135-b434a528291f', app_name='default-app-name', user_id='u_123', state={}, events=[], last_update_time=1743440392.8689594)\n</code></pre> <p>\u5411 agent \u767c\u9001\u67e5\u8a62\u3002\u8acb\u5c07\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u8907\u88fd\u8cbc\u4e0a\u5230\u4f60\u7684 \"deploy.py\" Python \u8173\u672c\u6216 notebook \u4e2d\u3002</p> deploy.py<pre><code>events = []\nasync for event in app.async_stream_query(\n    user_id=\"u_123\",\n    session_id=session.id,\n    message=\"whats the weather in new york\",\n):\n    events.append(event)\n\n# The full event stream shows the agent's thought process\nprint(\"--- Full Event Stream ---\")\nfor event in events:\n    print(event)\n\n# For quick tests, you can extract just the final text response\nfinal_text_responses = [\n    e for e in events\n    if e.get(\"content\", {}).get(\"parts\", [{}])[0].get(\"text\")\n    and not e.get(\"content\", {}).get(\"parts\", [{}])[0].get(\"function_call\")\n]\nif final_text_responses:\n    print(\"\\n--- Final Response ---\")\n    print(final_text_responses[0][\"content\"][\"parts\"][0][\"text\"])\n</code></pre>"},{"location":"deploy/agent-engine/#_4","title":"\u7406\u89e3\u8f38\u51fa\u7d50\u679c","text":"<p>\u7576\u4f60\u57f7\u884c\u4e0a\u8ff0\u7a0b\u5f0f\u78bc\u6642\uff0c\u6703\u770b\u5230\u5e7e\u7a2e\u985e\u578b\u7684\u4e8b\u4ef6\uff1a</p> <ul> <li>\u5de5\u5177\u547c\u53eb\u4e8b\u4ef6\uff08Tool Call Event\uff09\uff1a\u6a21\u578b\u8acb\u6c42\u547c\u53eb\u67d0\u500b\u5de5\u5177\uff08\u4f8b\u5982\uff1a<code>get_weather</code>\uff09\u3002</li> <li>\u5de5\u5177\u56de\u61c9\u4e8b\u4ef6\uff08Tool Response Event\uff09\uff1a\u7cfb\u7d71\u5c07\u5de5\u5177\u547c\u53eb\u7684\u7d50\u679c\u56de\u50b3\u7d66\u6a21\u578b\u3002</li> <li>\u6a21\u578b\u56de\u61c9\u4e8b\u4ef6\uff08Model Response Event\uff09\uff1aagent \u5728\u8655\u7406\u5b8c\u5de5\u5177\u7d50\u679c\u5f8c\uff0c\u7522\u751f\u7684\u6700\u7d42\u6587\u5b57\u56de\u61c9\u3002</li> </ul> <p><code>async_stream_query</code>\uff08\u672c\u6a5f\uff09\u9810\u671f\u8f38\u51fa\u5982\u4e0b\uff1a</p> <pre><code>{'parts': [{'function_call': {'id': 'af-a33fedb0-29e6-4d0c-9eb3-00c402969395', 'args': {'city': 'new york'}, 'name': 'get_weather'}}], 'role': 'model'}\n{'parts': [{'function_response': {'id': 'af-a33fedb0-29e6-4d0c-9eb3-00c402969395', 'name': 'get_weather', 'response': {'status': 'success', 'report': 'The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).'}}}], 'role': 'user'}\n{'parts': [{'text': 'The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).'}], 'role': 'model'}\n</code></pre>"},{"location":"deploy/agent-engine/#agent-engine","title":"\u90e8\u7f72\u5230 Agent Engine","text":"<p>\u7576\u4f60\u5c0d agent \u5728\u672c\u6a5f\u7684\u884c\u70ba\u611f\u5230\u6eff\u610f\u5f8c\uff0c\u5c31\u53ef\u4ee5\u9032\u884c\u90e8\u7f72\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 Python SDK \u6216 <code>adk</code> \u547d\u4ee4\u5217\u5de5\u5177\u4f86\u5b8c\u6210\u9019\u500b\u52d5\u4f5c\u3002</p> <p>\u6b64\u6d41\u7a0b\u6703\u5c07\u4f60\u7684\u7a0b\u5f0f\u78bc\u6253\u5305\u3001\u5efa\u7f6e\u6210\u5bb9\u5668\uff0c\u4e26\u90e8\u7f72\u5230\u53d7\u7ba1\u7684 Agent Engine \u670d\u52d9\u3002\u9019\u500b\u904e\u7a0b\u53ef\u80fd\u9700\u8981\u5e7e\u5206\u9418\u7684\u6642\u9593\u3002</p> ADK CLIPython <p>You can deploy from your terminal using the <code>adk deploy</code> command line tool. The following example deploy command uses the <code>multi_tool_agent</code> sample code as the project to be deployed:</p> <pre><code>adk deploy agent_engine \\\n    --project=my-cloud-project-xxxxx \\\n    --region=us-central1 \\\n    --staging_bucket=gs://my-cloud-project-staging-bucket-name \\\n    --display_name=\"My Agent Name\" \\\n    /multi_tool_agent\n</code></pre> <p>Find the names of your available storage buckets in the Cloud Storage Bucket section of your deployment project in the Google Cloud Console. For more details on using the <code>adk deploy</code> command, see the  ADK CLI reference.</p> <p>Tip</p> <p>Make sure your main ADK agent definition (<code>root_agent</code>) is  discoverable when deploying your ADK project.</p> <p>This code block initiates the deployment from a Python script or notebook.</p> deploy.py<pre><code>from vertexai import agent_engines\n\nremote_app = agent_engines.create(\n    agent_engine=app,\n    requirements=[\n        \"google-cloud-aiplatform[adk,agent_engines]\"   \n    ]\n)\n\nprint(f\"Deployment finished!\")\nprint(f\"Resource Name: {remote_app.resource_name}\")\n# Resource Name: \"projects/{PROJECT_NUMBER}/locations/{LOCATION}/reasoningEngines/{RESOURCE_ID}\"\n#       Note: The PROJECT_NUMBER is different than the PROJECT_ID.\n</code></pre>"},{"location":"deploy/agent-engine/#_5","title":"\u76e3\u63a7\u8207\u9a57\u8b49","text":"<ul> <li>\u4f60\u53ef\u4ee5\u5728 Google Cloud Console \u7684 Agent Engine UI \u76e3\u63a7\u90e8\u7f72\u72c0\u614b\u3002</li> <li><code>remote_app.resource_name</code> \u662f\u4f60\u5df2\u90e8\u7f72 agent \u7684\u552f\u4e00\u8b58\u5225\u78bc\u3002\u4f60\u5c07\u9700\u8981\u6b64\u8b58\u5225\u78bc\u4f86\u8207 agent \u4e92\u52d5\u3002\u4f60\u4e5f\u53ef\u4ee5\u5f9e ADK CLI \u6307\u4ee4\u56de\u50b3\u7684\u56de\u61c9\u4e2d\u53d6\u5f97\u6b64\u8b58\u5225\u78bc\u3002</li> <li>\u5982\u9700\u66f4\u591a\u7d30\u7bc0\uff0c\u8acb\u53c3\u95b1 Agent Engine \u6587\u4ef6\u8aaa\u660e\uff1a\u90e8\u7f72 agent \u53ca \u7ba1\u7406\u5df2\u90e8\u7f72 agent\u3002</li> </ul>"},{"location":"deploy/agent-engine/#test-deployment","title":"\u6e2c\u8a66\u5df2\u90e8\u7f72\u7684 agent","text":"<p>\u5b8c\u6210\u5c07 agent \u90e8\u7f72\u5230 Agent Engine \u5f8c\uff0c\u4f60\u53ef\u4ee5\u900f\u904e Google Cloud Console \u6aa2\u8996\u5df2\u90e8\u7f72\u7684 agent\uff0c\u4e26\u4f7f\u7528 REST \u547c\u53eb\u6216 Python \u7684 Vertex AI SDK \u8207 agent \u4e92\u52d5\u3002</p> <p>\u82e5\u8981\u5728 Cloud Console \u4e2d\u6aa2\u8996\u5df2\u90e8\u7f72\u7684 agent\uff1a</p> <ul> <li>\u524d\u5f80 Google Cloud Console \u7684 Agent Engine \u9801\u9762\uff1a     https://console.cloud.google.com/vertex-ai/agents/agent-engines</li> </ul> <p>\u6b64\u9801\u9762\u6703\u5217\u51fa\u4f60\u76ee\u524d\u6240\u9078 Google Cloud \u5c08\u6848\u4e0b\u6240\u6709\u5df2\u90e8\u7f72\u7684 agent\u3002\u5982\u679c\u4f60\u6c92\u6709\u770b\u5230\u4f60\u7684 agent\uff0c\u8acb\u78ba\u8a8d\u4f60\u5df2\u5728 Google Cloud Console \u9078\u64c7\u6b63\u78ba\u7684\u76ee\u6a19\u5c08\u6848\u3002\u95dc\u65bc\u9078\u64c7\u73fe\u6709 Google Cloud \u5c08\u6848\u7684\u66f4\u591a\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 \u5efa\u7acb\u8207\u7ba1\u7406\u5c08\u6848\u3002</p>"},{"location":"deploy/agent-engine/#google-cloud","title":"\u67e5\u627e Google Cloud \u5c08\u6848\u8cc7\u8a0a","text":"<p>\u4f60\u9700\u8981\u5c08\u6848\u7684\u4f4d\u5740\u8207\u8cc7\u6e90\u8b58\u5225\u8cc7\u8a0a\uff08<code>PROJECT_ID</code>\u3001<code>LOCATION</code>\u3001<code>RESOURCE_ID</code>\uff09\u624d\u80fd\u6e2c\u8a66\u90e8\u7f72\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 Cloud Console \u6216 <code>gcloud</code> \u547d\u4ee4\u5217\u5de5\u5177\u4f86\u67e5\u8a62\u9019\u4e9b\u8cc7\u8a0a\u3002</p> <p>\u900f\u904e Google Cloud Console \u67e5\u627e\u5c08\u6848\u8cc7\u8a0a\uff1a</p> <ol> <li> <p>\u5728 Google Cloud Console \u4e2d\uff0c\u524d\u5f80 Agent Engine \u9801\u9762\uff1a     https://console.cloud.google.com/vertex-ai/agents/agent-engines</p> </li> <li> <p>\u5728\u9801\u9762\u9802\u7aef\uff0c\u9078\u64c7 API URLs\uff0c\u7136\u5f8c\u8907\u88fd\u4f60\u5df2\u90e8\u7f72 agent \u7684 Query URL \u5b57\u4e32\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>https://$(LOCATION_ID)-aiplatform.googleapis.com/v1/projects/$(PROJECT_ID)/locations/$(LOCATION_ID)/reasoningEngines/$(RESOURCE_ID):query\n</code></pre> </li> </ol> <p>\u900f\u904e <code>gloud</code> \u67e5\u627e\u5c08\u6848\u8cc7\u8a0a\uff1a</p> <ol> <li> <p>\u5728\u4f60\u7684\u958b\u767c\u74b0\u5883\u4e2d\uff0c\u8acb\u78ba\u4fdd\u4f60\u5df2\u767b\u5165 Google Cloud\uff0c\u4e26\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u4ee5\u5217\u51fa\u4f60\u7684\u5c08\u6848\uff1a</p> <pre><code>gcloud projects list\n</code></pre> </li> <li> <p>\u53d6\u5f97\u7528\u65bc\u90e8\u7f72\u7684 Project ID\uff0c\u4e26\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u4ee5\u7372\u53d6\u66f4\u591a\u8a73\u7d30\u8cc7\u8a0a\uff1a</p> <pre><code>gcloud asset search-all-resources \\\n    --scope=projects/$(PROJECT_ID) \\\n    --asset-types='aiplatform.googleapis.com/ReasoningEngine' \\\n    --format=\"table(name,assetType,location,reasoning_engine_id)\"\n</code></pre> </li> </ol>"},{"location":"deploy/agent-engine/#rest","title":"\u4f7f\u7528 REST \u547c\u53eb\u9032\u884c\u6e2c\u8a66","text":"<p>\u8207\u4f60\u5728 Agent Engine \u90e8\u7f72\u7684 agent \u4e92\u52d5\u7684\u4e00\u500b\u7c21\u55ae\u65b9\u5f0f\uff0c\u662f\u4f7f\u7528 <code>curl</code> \u5de5\u5177\u767c\u9001 REST \u547c\u53eb\u3002\u672c\u7bc0\u5c07\u8aaa\u660e\u5982\u4f55\u6aa2\u67e5\u4f60\u8207 agent \u7684\u9023\u7dda\uff0c\u4ee5\u53ca\u5982\u4f55\u6e2c\u8a66\u90e8\u7f72\u5f8c agent \u7684\u8acb\u6c42\u8655\u7406\u80fd\u529b\u3002</p>"},{"location":"deploy/agent-engine/#agent_2","title":"\u6aa2\u67e5\u8207 agent \u7684\u9023\u7dda","text":"<p>\u4f60\u53ef\u4ee5\u4f7f\u7528 Cloud Console \u4e2d Agent Engine \u5340\u6bb5\u63d0\u4f9b\u7684 Query URL\uff0c\u4f86\u6aa2\u67e5\u4f60\u8207\u6b63\u5728\u57f7\u884c\u4e2d\u7684 agent \u7684\u9023\u7dda\u72c0\u614b\u3002\u9019\u500b\u6aa2\u67e5\u4e0d\u6703\u57f7\u884c\u90e8\u7f72\u7684 agent\uff0c\u800c\u662f\u56de\u50b3\u6709\u95dc\u8a72 agent \u7684\u8cc7\u8a0a\u3002</p> <p>\u82e5\u8981\u767c\u9001 REST \u547c\u53eb\u4e26\u5f9e\u90e8\u7f72\u7684 agent \u7372\u5f97\u56de\u61c9\uff1a</p> <ul> <li> <p>\u5728\u4f60\u7684\u958b\u767c\u74b0\u5883\u7d42\u7aef\u6a5f\u8996\u7a97\u4e2d\uff0c\u5efa\u7acb\u8acb\u6c42\u4e26\u57f7\u884c\uff1a</p> <pre><code>curl -X GET \\\n    -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n    \"https://$(LOCATION)-aiplatform.googleapis.com/v1/projects/$(PROJECT_ID)/locations/$(LOCATION)/reasoningEngines\"\n</code></pre> </li> </ul> <p>\u5982\u679c\u60a8\u7684\u90e8\u7f72\u6210\u529f\uff0c\u9019\u500b\u8acb\u6c42\u6703\u56de\u61c9\u4e00\u500b\u6709\u6548\u8acb\u6c42\u7684\u6e05\u55ae\uff0c\u4ee5\u53ca\u9810\u671f\u7684\u8cc7\u6599\u683c\u5f0f\u3002 </p> <p>Access for agent connections</p> <p>\u6b64\u9023\u7dda\u6e2c\u8a66\u8981\u6c42\u547c\u53eb\u7684\u4f7f\u7528\u8005\u5fc5\u9808\u64c1\u6709\u5df2\u90e8\u7f72 agent \u7684\u6709\u6548 access token\u3002\u82e5\u5f9e\u5176\u4ed6\u74b0\u5883\u9032\u884c\u6e2c\u8a66\uff0c\u8acb\u78ba\u4fdd\u547c\u53eb\u7684\u4f7f\u7528\u8005\u6709\u6b0a\u9023\u7dda\u81f3\u4f60\u5728 Google Cloud \u5c08\u6848\u4e2d\u7684 agent\u3002</p>"},{"location":"deploy/agent-engine/#agent_3","title":"\u767c\u9001 agent \u8acb\u6c42","text":"<p>\u7576\u4f60\u5f9e agent \u5c08\u6848\u53d6\u5f97\u56de\u61c9\u6642\uff0c\u5fc5\u9808\u5148\u5efa\u7acb\u4e00\u500b session\uff0c\u53d6\u5f97 Session ID\uff0c\u7136\u5f8c\u4f7f\u7528\u8a72 Session ID \u767c\u9001\u8acb\u6c42\u3002\u6b64\u6d41\u7a0b\u5982\u4e0b\u6240\u8ff0\u3002</p> <p>\u82e5\u8981\u900f\u904e REST \u6e2c\u8a66\u8207\u5df2\u90e8\u7f72 agent \u7684\u4e92\u52d5\uff1a</p> <ol> <li> <p>\u5728\u958b\u767c\u74b0\u5883\u7684\u7d42\u7aef\u6a5f\u8996\u7a97\u4e2d\uff0c\u4f7f\u7528\u4ee5\u4e0b\u7bc4\u672c\u5efa\u7acb\u8acb\u6c42\u4ee5\u5efa\u7acb\u4e00\u500b session\uff1a</p> <pre><code>curl \\\n    -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n    -H \"Content-Type: application/json\" \\\n    https://$(LOCATION)-aiplatform.googleapis.com/v1/projects/$(PROJECT_ID)/locations/$(LOCATION)/reasoningEngines/$(RESOURCE_ID):query \\\n    -d '{\"class_method\": \"async_create_session\", \"input\": {\"user_id\": \"u_123\"},}'\n</code></pre> </li> <li> <p>\u5728\u524d\u4e00\u500b\u6307\u4ee4\u7684\u56de\u61c9\u4e2d\uff0c\u5f9e id \u6b04\u4f4d\u64f7\u53d6\u5efa\u7acb\u7684 Session ID\uff1a</p> <pre><code>{\n    \"output\": {\n        \"userId\": \"u_123\",\n        \"lastUpdateTime\": 1757690426.337745,\n        \"state\": {},\n        \"id\": \"4857885913439920384\", # Session ID\n        \"appName\": \"9888888855577777776\",\n        \"events\": []\n    }\n}\n</code></pre> </li> <li> <p>\u5728\u60a8\u7684\u958b\u767c\u74b0\u5883\u7684\u7d42\u7aef\u6a5f\u8996\u7a97\u4e2d\uff0c\u4f7f\u7528\u6b64\u7bc4\u672c\u4ee5\u53ca\u524d\u4e00\u6b65\u5efa\u7acb\u7684 Session ID\uff0c\u4f86\u7d44\u5efa\u8acb\u6c42\u4e26\u50b3\u9001\u8a0a\u606f\u7d66\u60a8\u7684 agent\uff1a</p> <pre><code>curl \\\n-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n-H \"Content-Type: application/json\" \\\nhttps://$(LOCATION)-aiplatform.googleapis.com/v1/projects/$(PROJECT_ID)/locations/$(LOCATION)/reasoningEngines/$(RESOURCE_ID):streamQuery?alt=sse -d '{\n\"class_method\": \"async_stream_query\",\n\"input\": {\n    \"user_id\": \"u_123\",\n    \"session_id\": \"4857885913439920384\",\n    \"message\": \"Hey whats the weather in new york today?\",\n}\n}'\n</code></pre> </li> </ol> <p>\u9019\u500b\u8acb\u6c42\u61c9\u8a72\u6703\u5f9e\u4f60\u90e8\u7f72\u7684 agent \u7a0b\u5f0f\u78bc\u7522\u751f\u4e00\u500b JSON \u683c\u5f0f\u7684\u56de\u61c9\u3002\u82e5\u9700\u9032\u4e00\u6b65\u4e86\u89e3\u5982\u4f55\u900f\u904e REST \u547c\u53eb\u8207\u90e8\u7f72\u65bc Agent Engine \u7684 Agent Development Kit (ADK) agent \u4e92\u52d5\uff0c\u8acb\u53c3\u95b1 Agent Engine \u6587\u4ef6\u4e2d\u7684 Manage deployed agents \u4ee5\u53ca Use a Agent Development Kit agent\u3002</p>"},{"location":"deploy/agent-engine/#python","title":"\u4f7f\u7528 Python \u9032\u884c\u6e2c\u8a66","text":"<p>\u4f60\u53ef\u4ee5\u4f7f\u7528 Python \u7a0b\u5f0f\u78bc\uff0c\u5c0d\u90e8\u7f72\u65bc Agent Engine \u7684 agent \u9032\u884c\u66f4\u9032\u968e\u4e14\u53ef\u91cd\u8907\u7684\u6e2c\u8a66\u3002\u4ee5\u4e0b\u8aaa\u660e\u5982\u4f55\u5efa\u7acb\u8207\u5df2\u90e8\u7f72 agent \u7684 session\uff0c\u4e26\u5411\u8a72 agent \u767c\u9001\u8acb\u6c42\u4ee5\u9032\u884c\u8655\u7406\u3002</p>"},{"location":"deploy/agent-engine/#session","title":"\u5efa\u7acb\u9060\u7aef session","text":"<p>\u4f7f\u7528 <code>remote_app</code> \u7269\u4ef6\u4f86\u5efa\u7acb\u8207\u5df2\u90e8\u7f72\u9060\u7aef agent \u7684\u9023\u7dda\uff1a</p> <pre><code># If you are in a new script or used the ADK CLI to deploy, you can connect like this:\n# remote_app = agent_engines.get(\"your-agent-resource-name\")\nremote_session = await remote_app.async_create_session(user_id=\"u_456\")\nprint(remote_session)\n</code></pre> <p><code>create_session</code>\uff08remote\uff09\u7684\u9810\u671f\u8f38\u51fa\uff1a</p> <pre><code>{'events': [],\n'user_id': 'u_456',\n'state': {},\n'id': '7543472750996750336',\n'app_name': '7917477678498709504',\n'last_update_time': 1743683353.030133}\n</code></pre> <p><code>id</code> \u7684\u503c\u662f session ID\uff0c\u800c <code>app_name</code> \u5247\u662f\u5df2\u90e8\u7f72 agent \u5728 Agent Engine \u4e0a\u7684 resource ID\u3002</p>"},{"location":"deploy/agent-engine/#agent_4","title":"\u5411\u60a8\u7684\u9060\u7aef agent \u767c\u9001\u67e5\u8a62","text":"<pre><code>async for event in remote_app.async_stream_query(\n    user_id=\"u_456\",\n    session_id=remote_session[\"id\"],\n    message=\"whats the weather in new york\",\n):\n    print(event)\n</code></pre> <p><code>async_stream_query</code>\uff08remote\uff09\u7684\u9810\u671f\u8f38\u51fa\uff1a</p> <pre><code>{'parts': [{'function_call': {'id': 'af-f1906423-a531-4ecf-a1ef-723b05e85321', 'args': {'city': 'new york'}, 'name': 'get_weather'}}], 'role': 'model'}\n{'parts': [{'function_response': {'id': 'af-f1906423-a531-4ecf-a1ef-723b05e85321', 'name': 'get_weather', 'response': {'status': 'success', 'report': 'The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).'}}}], 'role': 'user'}\n{'parts': [{'text': 'The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).'}], 'role': 'model'}\n</code></pre> <p>\u5982\u9700\u5728 Agent Engine \u4e2d\u8207\u5df2\u90e8\u7f72\u7684 Agent Development Kit (ADK) agent \u4e92\u52d5\u7684\u66f4\u591a\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 Agent Engine \u6587\u4ef6\u8aaa\u660e\u4e2d\u7684 Manage deployed agents \u4ee5\u53ca Use a Agent Development Kit agent\u3002</p>"},{"location":"deploy/agent-engine/#_6","title":"\u50b3\u9001\u591a\u6a21\u614b\u67e5\u8a62","text":"<p>\u82e5\u8981\u5411\u60a8\u7684 agent \u50b3\u9001\u591a\u6a21\u614b\u67e5\u8a62\uff08\u4f8b\u5982\u5305\u542b\u5716\u7247\uff09\uff0c\u60a8\u53ef\u4ee5\u5c07 <code>message</code> \u53c3\u6578\uff08\u7528\u65bc <code>async_stream_query</code>\uff09\u5efa\u69cb\u70ba <code>types.Part</code> \u7269\u4ef6\u7684\u6e05\u55ae\u3002\u6bcf\u500b\u90e8\u5206\u53ef\u4ee5\u662f\u6587\u5b57\u6216\u5716\u7247\u3002</p> <p>\u82e5\u8981\u5305\u542b\u5716\u7247\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>types.Part.from_uri</code>\uff0c\u4e26\u63d0\u4f9b\u5716\u7247\u7684 Google Cloud Storage (GCS) URI\u3002</p> <pre><code>from google.genai import types\n\nimage_part = types.Part.from_uri(\n    file_uri=\"gs://cloud-samples-data/generative-ai/image/scones.jpg\",\n    mime_type=\"image/jpeg\",\n)\ntext_part = types.Part.from_text(\n    text=\"What is in this image?\",\n)\n\nasync for event in remote_app.async_stream_query(\n    user_id=\"u_456\",\n    session_id=remote_session[\"id\"],\n    message=[text_part, image_part],\n):\n    print(event)\n</code></pre> <p>Note</p> <p>\u96d6\u7136\u8207\u6a21\u578b\u4e4b\u9593\u7684\u5e95\u5c64\u901a\u8a0a\u53ef\u80fd\u6703\u5c0d\u5f71\u50cf\u9032\u884c Base64 \u7de8\u78bc\uff0c\u4f46\u5efa\u8b70\u4e14\u652f\u63f4\u7684\u65b9\u5f0f\u662f\uff0c\u5c07\u5f71\u50cf\u8cc7\u6599\u4ee5 GCS URI \u7684\u5f62\u5f0f\u63d0\u4f9b\u7d66\u90e8\u7f72\u65bc Agent Engine \u7684 agent\u3002</p>"},{"location":"deploy/agent-engine/#payload","title":"\u90e8\u7f72 payload","text":"<p>\u7576\u4f60\u5c07 Agent Development Kit (ADK) agent \u5c08\u6848\u90e8\u7f72\u5230 Agent Engine \u6642\uff0c\u6703\u5c07\u4ee5\u4e0b\u5167\u5bb9\u4e0a\u50b3\u81f3\u670d\u52d9\uff1a</p> <ul> <li>\u4f60\u7684 ADK agent \u7a0b\u5f0f\u78bc</li> <li>\u5728\u4f60\u7684 ADK agent \u7a0b\u5f0f\u78bc\u4e2d\u5ba3\u544a\u7684\u6240\u6709\u76f8\u4f9d\u5957\u4ef6</li> </ul> <p>\u90e8\u7f72\u5167\u5bb9\u4e0d\u5305\u542b ADK API \u4f3a\u670d\u5668\u6216 ADK \u7db2\u9801\u4f7f\u7528\u8005\u4ecb\u9762\uff08web user interface\uff09\u51fd\u5f0f\u5eab\u3002Agent Engine \u670d\u52d9\u6703\u63d0\u4f9b ADK API \u4f3a\u670d\u5668\u6240\u9700\u7684\u51fd\u5f0f\u5eab\u3002</p>"},{"location":"deploy/agent-engine/#_7","title":"\u6e05\u7406\u90e8\u7f72","text":"<p>\u5982\u679c\u4f60\u66fe\u9032\u884c\u904e\u6e2c\u8a66\u6027\u90e8\u7f72\uff0c\u5efa\u8b70\u5728\u5b8c\u6210\u5f8c\u6e05\u7406\u4f60\u7684\u96f2\u7aef\u8cc7\u6e90\u3002\u4f60\u53ef\u4ee5\u522a\u9664\u5df2\u90e8\u7f72\u7684 Agent Engine \u5be6\u4f8b\uff0c\u4ee5\u907f\u514d\u5728 Google Cloud \u5e33\u6236\u4e0a\u7522\u751f\u4efb\u4f55\u9810\u671f\u5916\u7684\u8cbb\u7528\u3002</p> <pre><code>remote_app.delete(force=True)\n</code></pre> <p><code>force=True</code> \u53c3\u6578\u4e5f\u6703\u522a\u9664\u5f9e\u5df2\u90e8\u7f72 agent \u7522\u751f\u7684\u6240\u6709\u5b50\u8cc7\u6e90\uff0c\u4f8b\u5982 session\u3002\u4f60\u4e5f\u53ef\u4ee5\u900f\u904e Google Cloud \u4e0a\u7684 Agent Engine UI \u522a\u9664\u4f60\u5df2\u90e8\u7f72\u7684 agent\u3002</p>"},{"location":"deploy/cloud-run.en/","title":"Deploy to Cloud Run","text":"<p>Cloud Run is a fully managed platform that enables you to run your code directly on top of Google's scalable infrastructure.</p> <p>To deploy your agent, you can use either the <code>adk deploy cloud_run</code> command (recommended for Python), or with <code>gcloud run deploy</code> command through Cloud Run.</p>"},{"location":"deploy/cloud-run.en/#agent-sample","title":"Agent sample","text":"<p>For each of the commands, we will reference a the <code>Capital Agent</code> sample defined on the LLM agent page. We will assume it's in a directory (eg: <code>capital_agent</code>).</p> <p>To proceed, confirm that your agent code is configured as follows:</p> PythonJava <ol> <li>Agent code is in a file called <code>agent.py</code> within your agent directory.</li> <li>Your agent variable is named <code>root_agent</code>.</li> <li><code>__init__.py</code> is within your agent directory and contains <code>from . import agent</code>.</li> <li>Your <code>requirements.txt</code> file is present in the agent directory.</li> </ol> <ol> <li>Agent code is in a file called <code>CapitalAgent.java</code> within your agent directory.</li> <li>Your agent variable is global and follows the format <code>public static final BaseAgent ROOT_AGENT</code>.</li> <li>Your agent definition is present in a static class method.</li> </ol> <p>Refer to the following section for more details. You can also find a sample app in the Github repo.</p>"},{"location":"deploy/cloud-run.en/#environment-variables","title":"Environment variables","text":"<p>Set your environment variables as described in the Setup and Installation guide.</p> <pre><code>export GOOGLE_CLOUD_PROJECT=your-project-id\nexport GOOGLE_CLOUD_LOCATION=us-central1 # Or your preferred location\nexport GOOGLE_GENAI_USE_VERTEXAI=True\n</code></pre> <p>(Replace <code>your-project-id</code> with your actual GCP project ID)</p> <p>Alternatively you can also use an API key from AI Studio</p> <p><pre><code>export GOOGLE_CLOUD_PROJECT=your-project-id\nexport GOOGLE_CLOUD_LOCATION=us-central1 # Or your preferred location\nexport GOOGLE_GENAI_USE_VERTEXAI=FALSE\nexport GOOGLE_API_KEY=your-api-key\n</code></pre> (Replace <code>your-project-id</code> with your actual GCP project ID and <code>your-api-key</code> with your actual API key from AI Studio)</p>"},{"location":"deploy/cloud-run.en/#payload","title":"Deployment payload","text":"<p>When you deploy your ADK agent workflow to the Google Cloud Run, the following content is uploaded to the service:</p> <ul> <li>Your ADK agent code</li> <li>Any dependencies declared in your ADK agent code</li> <li>ADK API server code version used by your agent</li> </ul> <p>The default deployment does not include the ADK web user interface libraries, unless you specify it as deployment setting, such as the <code>--with_ui</code> option for <code>adk deploy cloud_run</code> command.</p>"},{"location":"deploy/cloud-run.en/#deployment-commands","title":"Deployment commands","text":"Python - adk CLIPython - gcloud CLIJava - gcloud CLI"},{"location":"deploy/cloud-run.en/#adk-cli","title":"adk CLI","text":"<p>The <code>adk deploy cloud_run</code> command deploys your agent code to Google Cloud Run.</p> <p>Ensure you have authenticated with Google Cloud (<code>gcloud auth login</code> and <code>gcloud config set project &lt;your-project-id&gt;</code>).</p>"},{"location":"deploy/cloud-run.en/#setup-environment-variables","title":"Setup environment variables","text":"<p>Optional but recommended: Setting environment variables can make the deployment commands cleaner.</p> <pre><code># Set your Google Cloud Project ID\nexport GOOGLE_CLOUD_PROJECT=\"your-gcp-project-id\"\n\n# Set your desired Google Cloud Location\nexport GOOGLE_CLOUD_LOCATION=\"us-central1\" # Example location\n\n# Set the path to your agent code directory\nexport AGENT_PATH=\"./capital_agent\" # Assuming capital_agent is in the current directory\n\n# Set a name for your Cloud Run service (optional)\nexport SERVICE_NAME=\"capital-agent-service\"\n\n# Set an application name (optional)\nexport APP_NAME=\"capital-agent-app\"\n</code></pre>"},{"location":"deploy/cloud-run.en/#command-usage","title":"Command usage","text":""},{"location":"deploy/cloud-run.en/#minimal-command","title":"Minimal command","text":"<pre><code>adk deploy cloud_run \\\n--project=$GOOGLE_CLOUD_PROJECT \\\n--region=$GOOGLE_CLOUD_LOCATION \\\n$AGENT_PATH\n</code></pre>"},{"location":"deploy/cloud-run.en/#full-command-with-optional-flags","title":"Full command with optional flags","text":"<pre><code>adk deploy cloud_run \\\n--project=$GOOGLE_CLOUD_PROJECT \\\n--region=$GOOGLE_CLOUD_LOCATION \\\n--service_name=$SERVICE_NAME \\\n--app_name=$APP_NAME \\\n--with_ui \\\n$AGENT_PATH\n</code></pre>"},{"location":"deploy/cloud-run.en/#arguments","title":"Arguments","text":"<ul> <li><code>AGENT_PATH</code>: (Required) Positional argument specifying the path to the directory containing your agent's source code (e.g., <code>$AGENT_PATH</code> in the examples, or <code>capital_agent/</code>). This directory must contain at least an <code>__init__.py</code> and your main agent file (e.g., <code>agent.py</code>).</li> </ul>"},{"location":"deploy/cloud-run.en/#options","title":"Options","text":"<ul> <li><code>--project TEXT</code>: (Required) Your Google Cloud project ID (e.g., <code>$GOOGLE_CLOUD_PROJECT</code>).</li> <li><code>--region TEXT</code>: (Required) The Google Cloud location for deployment (e.g., <code>$GOOGLE_CLOUD_LOCATION</code>, <code>us-central1</code>).</li> <li><code>--service_name TEXT</code>: (Optional) The name for the Cloud Run service (e.g., <code>$SERVICE_NAME</code>). Defaults to <code>adk-default-service-name</code>.</li> <li><code>--app_name TEXT</code>: (Optional) The application name for the ADK API server (e.g., <code>$APP_NAME</code>). Defaults to the name of the directory specified by <code>AGENT_PATH</code> (e.g., <code>capital_agent</code> if <code>AGENT_PATH</code> is <code>./capital_agent</code>).</li> <li><code>--agent_engine_id TEXT</code>: (Optional) If you are using a managed session service via Vertex AI Agent Engine, provide its resource ID here.</li> <li><code>--port INTEGER</code>: (Optional) The port number the ADK API server will listen on within the container. Defaults to 8000.</li> <li><code>--with_ui</code>: (Optional) If included, deploys the ADK dev UI alongside the agent API server. By default, only the API server is deployed.</li> <li><code>--temp_folder TEXT</code>: (Optional) Specifies a directory for storing intermediate files generated during the deployment process. Defaults to a timestamped folder in the system's temporary directory. (Note: This option is generally not needed unless troubleshooting issues).</li> <li><code>--help</code>: Show the help message and exit.</li> </ul>"},{"location":"deploy/cloud-run.en/#authenticated-access","title":"Authenticated access","text":"<p>During the deployment process, you might be prompted: <code>Allow unauthenticated invocations to [your-service-name] (y/N)?</code>.</p> <ul> <li>Enter <code>y</code> to allow public access to your agent's API endpoint without authentication.</li> <li>Enter <code>N</code> (or press Enter for the default) to require authentication (e.g., using an identity token as shown in the \"Testing your agent\" section).</li> </ul> <p>Upon successful execution, the command will deploy your agent to Cloud Run and provide the URL of the deployed service.</p>"},{"location":"deploy/cloud-run.en/#gcloud-cli-for-python","title":"gcloud CLI for Python","text":"<p>Alternatively, you can deploy using the standard <code>gcloud run deploy</code> command with a <code>Dockerfile</code>. This method requires more manual setup compared to the <code>adk</code> command but offers flexibility, particularly if you want to embed your agent within a custom FastAPI application.</p> <p>Ensure you have authenticated with Google Cloud (<code>gcloud auth login</code> and <code>gcloud config set project &lt;your-project-id&gt;</code>).</p>"},{"location":"deploy/cloud-run.en/#project-structure","title":"Project Structure","text":"<p>Organize your project files as follows:</p> <pre><code>your-project-directory/\n\u251c\u2500\u2500 capital_agent/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 agent.py       # Your agent code (see \"Agent sample\" tab)\n\u251c\u2500\u2500 main.py            # FastAPI application entry point\n\u251c\u2500\u2500 requirements.txt   # Python dependencies\n\u2514\u2500\u2500 Dockerfile         # Container build instructions\n</code></pre> <p>Create the following files (<code>main.py</code>, <code>requirements.txt</code>, <code>Dockerfile</code>) in the root of <code>your-project-directory/</code>.</p>"},{"location":"deploy/cloud-run.en/#code-files","title":"Code files","text":"<ol> <li> <p>This file sets up the FastAPI application using <code>get_fast_api_app()</code> from ADK:</p> main.py<pre><code>import os\n\nimport uvicorn\nfrom fastapi import FastAPI\nfrom google.adk.cli.fast_api import get_fast_api_app\n\n# Get the directory where main.py is located\nAGENT_DIR = os.path.dirname(os.path.abspath(__file__))\n# Example session service URI (e.g., SQLite)\nSESSION_SERVICE_URI = \"sqlite:///./sessions.db\"\n# Example allowed origins for CORS\nALLOWED_ORIGINS = [\"http://localhost\", \"http://localhost:8080\", \"*\"]\n# Set web=True if you intend to serve a web interface, False otherwise\nSERVE_WEB_INTERFACE = True\n\n# Call the function to get the FastAPI app instance\n# Ensure the agent directory name ('capital_agent') matches your agent folder\napp: FastAPI = get_fast_api_app(\n    agents_dir=AGENT_DIR,\n    session_service_uri=SESSION_SERVICE_URI,\n    allow_origins=ALLOWED_ORIGINS,\n    web=SERVE_WEB_INTERFACE,\n)\n\n# You can add more FastAPI routes or configurations below if needed\n# Example:\n# @app.get(\"/hello\")\n# async def read_root():\n#     return {\"Hello\": \"World\"}\n\nif __name__ == \"__main__\":\n    # Use the PORT environment variable provided by Cloud Run, defaulting to 8080\n    uvicorn.run(app, host=\"0.0.0.0\", port=int(os.environ.get(\"PORT\", 8080)))\n</code></pre> <p>Note: We specify <code>agent_dir</code> to the directory <code>main.py</code> is in and use <code>os.environ.get(\"PORT\", 8080)</code> for Cloud Run compatibility.</p> </li> <li> <p>List the necessary Python packages:</p> requirements.txt<pre><code>google-adk\n# Add any other dependencies your agent needs\n</code></pre> </li> <li> <p>Define the container image:</p> Dockerfile<pre><code>FROM python:3.13-slim\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nRUN adduser --disabled-password --gecos \"\" myuser &amp;&amp; \\\n    chown -R myuser:myuser /app\n\nCOPY . .\n\nUSER myuser\n\nENV PATH=\"/home/myuser/.local/bin:$PATH\"\n\nCMD [\"sh\", \"-c\", \"uvicorn main:app --host 0.0.0.0 --port $PORT\"]\n</code></pre> </li> </ol>"},{"location":"deploy/cloud-run.en/#defining-multiple-agents","title":"Defining Multiple Agents","text":"<p>You can define and deploy multiple agents within the same Cloud Run instance by creating separate folders in the root of <code>your-project-directory/</code>. Each folder represents one agent and must define a <code>root_agent</code> in its configuration.</p> <p>Example structure:</p> <pre><code>your-project-directory/\n\u251c\u2500\u2500 capital_agent/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 agent.py       # contains `root_agent` definition\n\u251c\u2500\u2500 population_agent/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 agent.py       # contains `root_agent` definition\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"deploy/cloud-run.en/#deploy-using-gcloud","title":"Deploy using <code>gcloud</code>","text":"<p>Navigate to <code>your-project-directory</code> in your terminal.</p> <pre><code>gcloud run deploy capital-agent-service \\\n--source . \\\n--region $GOOGLE_CLOUD_LOCATION \\\n--project $GOOGLE_CLOUD_PROJECT \\\n--allow-unauthenticated \\\n--set-env-vars=\"GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT,GOOGLE_CLOUD_LOCATION=$GOOGLE_CLOUD_LOCATION,GOOGLE_GENAI_USE_VERTEXAI=$GOOGLE_GENAI_USE_VERTEXAI\"\n# Add any other necessary environment variables your agent might need\n</code></pre> <ul> <li><code>capital-agent-service</code>: The name you want to give your Cloud Run service.</li> <li><code>--source .</code>: Tells gcloud to build the container image from the Dockerfile in the current directory.</li> <li><code>--region</code>: Specifies the deployment region.</li> <li><code>--project</code>: Specifies the GCP project.</li> <li><code>--allow-unauthenticated</code>: Allows public access to the service. Remove this flag for private services.</li> <li><code>--set-env-vars</code>: Passes necessary environment variables to the running container. Ensure you include all variables required by ADK and your agent (like API keys if not using Application Default Credentials).</li> </ul> <p><code>gcloud</code> will build the Docker image, push it to Google Artifact Registry, and deploy it to Cloud Run. Upon completion, it will output the URL of your deployed service.</p> <p>For a full list of deployment options, see the <code>gcloud run deploy</code> reference documentation.</p>"},{"location":"deploy/cloud-run.en/#gcloud-cli-for-java","title":"gcloud CLI for Java","text":"<p>You can deploy Java Agents using the standard <code>gcloud run deploy</code> command and a <code>Dockerfile</code>. This is the current recommended way to deploy Java Agents to Google Cloud Run.</p> <p>Ensure you are authenticated with Google Cloud. Specifically, run the commands <code>gcloud auth login</code> and <code>gcloud config set project &lt;your-project-id&gt;</code> from your terminal.</p>"},{"location":"deploy/cloud-run.en/#project-structure_1","title":"Project Structure","text":"<p>Organize your project files as follows:</p> <pre><code>your-project-directory/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 main/\n\u2502       \u2514\u2500\u2500 java/\n\u2502             \u2514\u2500\u2500 agents/\n\u2502                 \u251c\u2500\u2500 capitalagent/\n\u2502                     \u2514\u2500\u2500 CapitalAgent.java    # Your agent code\n\u251c\u2500\u2500 pom.xml                                    # Java adk and adk-dev dependencies\n\u2514\u2500\u2500 Dockerfile                                 # Container build instructions\n</code></pre> <p>Create the <code>pom.xml</code> and <code>Dockerfile</code> in the root of your project directory. Your Agent code file (<code>CapitalAgent.java</code>) inside a directory as shown above.</p>"},{"location":"deploy/cloud-run.en/#code-files_1","title":"Code files","text":"<ol> <li> <p>This is our Agent definition. This is the same code as present in LLM agent with two caveats:</p> <ul> <li> <p>The Agent is now initialized as a global public static final variable.</p> </li> <li> <p>The definition of the agent can be exposed in a static method or inlined during declaration.</p> </li> </ul> <p>See the code for the <code>CapitalAgent</code> example in the  examples  repository.</p> </li> <li> <p>Add the following dependencies and plugin to the pom.xml file.</p> pom.xml<pre><code>&lt;dependencies&gt;\n  &lt;dependency&gt;\n     &lt;groupId&gt;com.google.adk&lt;/groupId&gt;\n     &lt;artifactId&gt;google-adk&lt;/artifactId&gt;\n     &lt;version&gt;0.1.0&lt;/version&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n     &lt;groupId&gt;com.google.adk&lt;/groupId&gt;\n     &lt;artifactId&gt;google-adk-dev&lt;/artifactId&gt;\n     &lt;version&gt;0.1.0&lt;/version&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n&lt;plugin&gt;\n  &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\n  &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;\n  &lt;version&gt;3.2.0&lt;/version&gt;\n  &lt;configuration&gt;\n    &lt;mainClass&gt;com.google.adk.web.AdkWebServer&lt;/mainClass&gt;\n    &lt;classpathScope&gt;compile&lt;/classpathScope&gt;\n  &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre> </li> <li> <p>Define the container image:</p> Dockerfile<pre><code># Use an official Maven image with a JDK. Choose a version appropriate for your project.\nFROM maven:3.8-openjdk-17 AS builder\n\nWORKDIR /app\n\nCOPY pom.xml .\nRUN mvn dependency:go-offline -B\n\nCOPY src ./src\n\n# Expose the port your application will listen on.\n# Cloud Run will set the PORT environment variable, which your app should use.\nEXPOSE 8080\n\n# The command to run your application.\n# TODO(Developer): Update the \"adk.agents.source-dir\" to the directory that contains your agents.\n# You can have multiple agents in this directory and all of them will be available in the Dev UI.\nENTRYPOINT [\"mvn\", \"exec:java\", \\\n    \"-Dexec.mainClass=com.google.adk.web.AdkWebServer\", \\\n    \"-Dexec.classpathScope=compile\", \\\n    \"-Dexec.args=--server.port=${PORT} --adk.agents.source-dir=src/main/java\" \\\n]\n</code></pre> </li> </ol>"},{"location":"deploy/cloud-run.en/#deploy-using-gcloud_1","title":"Deploy using <code>gcloud</code>","text":"<p>Navigate to <code>your-project-directory</code> in your terminal.</p> <pre><code>gcloud run deploy capital-agent-service \\\n--source . \\\n--region $GOOGLE_CLOUD_LOCATION \\\n--project $GOOGLE_CLOUD_PROJECT \\\n--allow-unauthenticated \\\n--set-env-vars=\"GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT,GOOGLE_CLOUD_LOCATION=$GOOGLE_CLOUD_LOCATION,GOOGLE_GENAI_USE_VERTEXAI=$GOOGLE_GENAI_USE_VERTEXAI\"\n# Add any other necessary environment variables your agent might need\n</code></pre> <ul> <li><code>capital-agent-service</code>: The name you want to give your Cloud Run service.</li> <li><code>--source .</code>: Tells gcloud to build the container image from the Dockerfile in the current directory.</li> <li><code>--region</code>: Specifies the deployment region.</li> <li><code>--project</code>: Specifies the GCP project.</li> <li><code>--allow-unauthenticated</code>: Allows public access to the service. Remove this flag for private services.</li> <li><code>--set-env-vars</code>: Passes necessary environment variables to the running container. Ensure you include all variables required by ADK and your agent (like API keys if not using Application Default Credentials).</li> </ul> <p><code>gcloud</code> will build the Docker image, push it to Google Artifact Registry, and deploy it to Cloud Run. Upon completion, it will output the URL of your deployed service.</p> <p>For a full list of deployment options, see the <code>gcloud run deploy</code> reference documentation.</p>"},{"location":"deploy/cloud-run.en/#testing-your-agent","title":"Testing your agent","text":"<p>Once your agent is deployed to Cloud Run, you can interact with it via the deployed UI (if enabled) or directly with its API endpoints using tools like <code>curl</code>. You'll need the service URL provided after deployment.</p> UI TestingAPI Testing (curl)"},{"location":"deploy/cloud-run.en/#ui-testing","title":"UI Testing","text":"<p>If you deployed your agent with the UI enabled:</p> <ul> <li>adk CLI: You included the <code>--with_ui</code> flag during deployment.</li> <li>gcloud CLI: You set <code>SERVE_WEB_INTERFACE = True</code> in your <code>main.py</code>.</li> </ul> <p>You can test your agent by simply navigating to the Cloud Run service URL provided after deployment in your web browser.</p> <pre><code># Example URL format\n# https://your-service-name-abc123xyz.a.run.app\n</code></pre> <p>The ADK dev UI allows you to interact with your agent, manage sessions, and view execution details directly in the browser.</p> <p>To verify your agent is working as intended, you can:</p> <ol> <li>Select your agent from the dropdown menu.</li> <li>Type a message and verify that you receive an expected response from your agent.</li> </ol> <p>If you experience any unexpected behavior, check the Cloud Run console logs.</p>"},{"location":"deploy/cloud-run.en/#api-testing-curl","title":"API Testing (curl)","text":"<p>You can interact with the agent's API endpoints using tools like <code>curl</code>. This is useful for programmatic interaction or if you deployed without the UI.</p> <p>You'll need the service URL provided after deployment and potentially an identity token for authentication if your service isn't set to allow unauthenticated access.</p>"},{"location":"deploy/cloud-run.en/#set-the-application-url","title":"Set the application URL","text":"<p>Replace the example URL with the actual URL of your deployed Cloud Run service.</p> <pre><code>export APP_URL=\"YOUR_CLOUD_RUN_SERVICE_URL\"\n# Example: export APP_URL=\"https://adk-default-service-name-abc123xyz.a.run.app\"\n</code></pre>"},{"location":"deploy/cloud-run.en/#get-an-identity-token-if-needed","title":"Get an identity token (if needed)","text":"<p>If your service requires authentication (i.e., you didn't use <code>--allow-unauthenticated</code> with <code>gcloud</code> or answered 'N' to the prompt with <code>adk</code>), obtain an identity token.</p> <pre><code>export TOKEN=$(gcloud auth print-identity-token)\n</code></pre> <p>If your service allows unauthenticated access, you can omit the <code>-H \"Authorization: Bearer $TOKEN\"</code> header from the <code>curl</code> commands below.</p>"},{"location":"deploy/cloud-run.en/#list-available-apps","title":"List available apps","text":"<p>Verify the deployed application name.</p> <pre><code>curl -X GET -H \"Authorization: Bearer $TOKEN\" $APP_URL/list-apps\n</code></pre> <p>(Adjust the <code>app_name</code> in the following commands based on this output if needed. The default is often the agent directory name, e.g., <code>capital_agent</code>).</p>"},{"location":"deploy/cloud-run.en/#create-or-update-a-session","title":"Create or Update a Session","text":"<p>Initialize or update the state for a specific user and session. Replace <code>capital_agent</code> with your actual app name if different. The values <code>user_123</code> and <code>session_abc</code> are example identifiers; you can replace them with your desired user and session IDs.</p> <pre><code>curl -X POST -H \"Authorization: Bearer $TOKEN\" \\\n    $APP_URL/apps/capital_agent/users/user_123/sessions/session_abc \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"state\": {\"preferred_language\": \"English\", \"visit_count\": 5}}'\n</code></pre>"},{"location":"deploy/cloud-run.en/#run-the-agent","title":"Run the Agent","text":"<p>Send a prompt to your agent. Replace <code>capital_agent</code> with your app name and adjust the user/session IDs and prompt as needed.</p> <pre><code>curl -X POST -H \"Authorization: Bearer $TOKEN\" \\\n    $APP_URL/run_sse \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"app_name\": \"capital_agent\",\n    \"user_id\": \"user_123\",\n    \"session_id\": \"session_abc\",\n    \"new_message\": {\n        \"role\": \"user\",\n        \"parts\": [{\n        \"text\": \"What is the capital of Canada?\"\n        }]\n    },\n    \"streaming\": false\n    }'\n</code></pre> <ul> <li>Set <code>\"streaming\": true</code> if you want to receive Server-Sent Events (SSE).</li> <li>The response will contain the agent's execution events, including the final answer.</li> </ul>"},{"location":"deploy/cloud-run/","title":"\u90e8\u7f72\u5230 Cloud Run","text":"<p>Cloud Run \u662f\u4e00\u500b\u5168\u4ee3\u7ba1\u7684\u5e73\u53f0\uff0c\u53ef\u8b93\u4f60\u76f4\u63a5\u5728 Google \u53ef\u64f4\u5c55\u7684\u57fa\u790e\u8a2d\u65bd\u4e0a\u57f7\u884c\u4f60\u7684\u7a0b\u5f0f\u78bc\u3002</p> <p>\u8981\u90e8\u7f72\u4f60\u7684 agent\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>adk deploy cloud_run</code> \u6307\u4ee4\uff08\u5efa\u8b70\u7528\u65bc Python\uff09\uff0c\u6216\u900f\u904e Cloud Run \u4f7f\u7528 <code>gcloud run deploy</code> \u6307\u4ee4\u3002</p>"},{"location":"deploy/cloud-run/#agent","title":"agent \u7bc4\u4f8b","text":"<p>\u5728\u4e0b\u5217\u6bcf\u500b\u6307\u4ee4\u4e2d\uff0c\u6211\u5011\u90fd\u6703\u53c3\u8003 \u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) agent \u9801\u9762\u4e2d\u5b9a\u7fa9\u7684 <code>Capital Agent</code> \u7bc4\u4f8b\u3002\u6211\u5011\u5047\u8a2d\u5b83\u4f4d\u65bc\u67d0\u500b\u8cc7\u6599\u593e\u4e2d\uff08\u4f8b\u5982\uff1a<code>capital_agent</code>\uff09\u3002</p> <p>\u8acb\u5148\u78ba\u8a8d\u4f60\u7684 agent \u7a0b\u5f0f\u78bc\u5df2\u4f9d\u7167\u4ee5\u4e0b\u65b9\u5f0f\u8a2d\u5b9a\uff1a</p> PythonJava <ol> <li>agent \u7a0b\u5f0f\u78bc\u4f4d\u65bc\u4f60\u7684 agent \u8cc7\u6599\u593e\u4e2d\u7684 <code>agent.py</code> \u6a94\u6848\u5167\u3002</li> <li>\u4f60\u7684 agent \u8b8a\u6578\u540d\u7a31\u70ba <code>root_agent</code>\u3002</li> <li><code>__init__.py</code> \u4f4d\u65bc\u4f60\u7684 agent \u8cc7\u6599\u593e\u4e2d\uff0c\u4e14\u5305\u542b <code>from . import agent</code>\u3002</li> <li>\u4f60\u7684 agent \u8cc7\u6599\u593e\u5167\u6709 <code>requirements.txt</code> \u6a94\u6848\u3002</li> </ol> <ol> <li>agent \u7a0b\u5f0f\u78bc\u4f4d\u65bc\u4f60\u7684 agent \u8cc7\u6599\u593e\u4e2d\u7684 <code>CapitalAgent.java</code> \u6a94\u6848\u5167\u3002</li> <li>\u4f60\u7684 agent \u8b8a\u6578\u70ba\u5168\u57df\u8b8a\u6578\uff0c\u683c\u5f0f\u70ba <code>public static final BaseAgent ROOT_AGENT</code>\u3002</li> <li>\u4f60\u7684 agent \u5b9a\u7fa9\u5b58\u5728\u65bc\u975c\u614b\u985e\u5225\u65b9\u6cd5\u4e2d\u3002</li> </ol> <p>\u8acb\u53c3\u8003\u4e0b\u65b9\u7ae0\u7bc0\u4ee5\u53d6\u5f97\u66f4\u591a\u7d30\u7bc0\u3002\u4f60\u4e5f\u53ef\u4ee5\u5728 Github \u5132\u5b58\u5eab\u4e2d\u627e\u5230 \u7bc4\u4f8b\u61c9\u7528\u7a0b\u5f0f\u3002</p>"},{"location":"deploy/cloud-run/#_1","title":"\u74b0\u5883\u8b8a\u6578","text":"<p>\u8acb\u4f9d\u7167 \u5b89\u88dd\u8207\u8a2d\u5b9a \u6307\u5357\u4e2d\u6240\u8ff0\u8a2d\u5b9a\u4f60\u7684\u74b0\u5883\u8b8a\u6578\u3002</p> <pre><code>export GOOGLE_CLOUD_PROJECT=your-project-id\nexport GOOGLE_CLOUD_LOCATION=us-central1 # Or your preferred location\nexport GOOGLE_GENAI_USE_VERTEXAI=True\n</code></pre> <p>(\u8acb\u5c07 <code>your-project-id</code> \u66ff\u63db\u70ba\u4f60\u5be6\u969b\u7684 Google Cloud \u5c08\u6848 ID)</p> <p>\u6216\u8005\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4f86\u81ea AI Studio \u7684 API KEY</p> <p><pre><code>export GOOGLE_CLOUD_PROJECT=your-project-id\nexport GOOGLE_CLOUD_LOCATION=us-central1 # Or your preferred location\nexport GOOGLE_GENAI_USE_VERTEXAI=FALSE\nexport GOOGLE_API_KEY=your-api-key\n</code></pre> (\u8acb\u5c07 <code>your-project-id</code> \u66ff\u63db\u70ba\u4f60\u7684\u5be6\u969b Google Cloud \u5c08\u6848 ID\uff0c\u4e26\u5c07 <code>your-api-key</code> \u66ff\u63db\u70ba\u4f60\u5f9e Google AI Studio \u53d6\u5f97\u7684\u5be6\u969b API KEY)</p>"},{"location":"deploy/cloud-run/#payload","title":"\u90e8\u7f72\u5167\u5bb9","text":"<p>\u7576\u4f60\u5c07 Agent Development Kit (ADK) agent \u5de5\u4f5c\u6d41\u7a0b\u90e8\u7f72\u5230 Google Cloud Run \u6642\uff0c \u4ee5\u4e0b\u5167\u5bb9\u6703\u88ab\u4e0a\u50b3\u81f3\u8a72\u670d\u52d9\uff1a</p> <ul> <li>\u4f60\u7684 ADK agent \u7a0b\u5f0f\u78bc</li> <li>\u5728\u4f60\u7684 ADK agent \u7a0b\u5f0f\u78bc\u4e2d\u5ba3\u544a\u7684\u6240\u6709\u76f8\u4f9d\u5957\u4ef6</li> <li>\u4f60\u7684 agent \u6240\u4f7f\u7528\u7684 ADK API \u4f3a\u670d\u5668\u7a0b\u5f0f\u78bc\u7248\u672c</li> </ul> <p>\u9810\u8a2d\u90e8\u7f72\u4e0d\u6703\u5305\u542b ADK \u7db2\u9801 UI \u51fd\u5f0f\u5eab\uff0c \u9664\u975e\u4f60\u5728\u90e8\u7f72\u8a2d\u5b9a\u4e2d\u660e\u78ba\u6307\u5b9a\uff0c\u4f8b\u5982\u5728 <code>adk deploy cloud_run</code> \u6307\u4ee4\u4e2d\u52a0\u5165 <code>--with_ui</code> \u9078\u9805\u3002</p>"},{"location":"deploy/cloud-run/#_2","title":"\u90e8\u7f72\u6307\u4ee4","text":"Python - adk CLIPython - gcloud CLIJava - gcloud \u547d\u4ee4\u5217\u4ecb\u9762 (Command Line Interface)"},{"location":"deploy/cloud-run/#adk-cli","title":"adk CLI","text":"<p>The <code>adk deploy cloud_run</code> command deploys your agent code to Google Cloud Run.</p> <p>Ensure you have authenticated with Google Cloud (<code>gcloud auth login</code> and <code>gcloud config set project &lt;your-project-id&gt;</code>).</p>"},{"location":"deploy/cloud-run/#setup-environment-variables","title":"Setup environment variables","text":"<p>Optional but recommended: Setting environment variables can make the deployment commands cleaner.</p> <pre><code># Set your Google Cloud Project ID\nexport GOOGLE_CLOUD_PROJECT=\"your-gcp-project-id\"\n\n# Set your desired Google Cloud Location\nexport GOOGLE_CLOUD_LOCATION=\"us-central1\" # Example location\n\n# Set the path to your agent code directory\nexport AGENT_PATH=\"./capital_agent\" # Assuming capital_agent is in the current directory\n\n# Set a name for your Cloud Run service (optional)\nexport SERVICE_NAME=\"capital-agent-service\"\n\n# Set an application name (optional)\nexport APP_NAME=\"capital-agent-app\"\n</code></pre>"},{"location":"deploy/cloud-run/#command-usage","title":"Command usage","text":""},{"location":"deploy/cloud-run/#minimal-command","title":"Minimal command","text":"<pre><code>adk deploy cloud_run \\\n--project=$GOOGLE_CLOUD_PROJECT \\\n--region=$GOOGLE_CLOUD_LOCATION \\\n$AGENT_PATH\n</code></pre>"},{"location":"deploy/cloud-run/#full-command-with-optional-flags","title":"Full command with optional flags","text":"<pre><code>adk deploy cloud_run \\\n--project=$GOOGLE_CLOUD_PROJECT \\\n--region=$GOOGLE_CLOUD_LOCATION \\\n--service_name=$SERVICE_NAME \\\n--app_name=$APP_NAME \\\n--with_ui \\\n$AGENT_PATH\n</code></pre>"},{"location":"deploy/cloud-run/#arguments","title":"Arguments","text":"<ul> <li><code>AGENT_PATH</code>: (Required) Positional argument specifying the path to the directory containing your agent's source code (e.g., <code>$AGENT_PATH</code> in the examples, or <code>capital_agent/</code>). This directory must contain at least an <code>__init__.py</code> and your main agent file (e.g., <code>agent.py</code>).</li> </ul>"},{"location":"deploy/cloud-run/#options","title":"Options","text":"<ul> <li><code>--project TEXT</code>: (Required) Your Google Cloud project ID (e.g., <code>$GOOGLE_CLOUD_PROJECT</code>).</li> <li><code>--region TEXT</code>: (Required) The Google Cloud location for deployment (e.g., <code>$GOOGLE_CLOUD_LOCATION</code>, <code>us-central1</code>).</li> <li><code>--service_name TEXT</code>: (Optional) The name for the Cloud Run service (e.g., <code>$SERVICE_NAME</code>). Defaults to <code>adk-default-service-name</code>.</li> <li><code>--app_name TEXT</code>: (Optional) The application name for the ADK API server (e.g., <code>$APP_NAME</code>). Defaults to the name of the directory specified by <code>AGENT_PATH</code> (e.g., <code>capital_agent</code> if <code>AGENT_PATH</code> is <code>./capital_agent</code>).</li> <li><code>--agent_engine_id TEXT</code>: (Optional) If you are using a managed session service via Vertex AI Agent Engine, provide its resource ID here.</li> <li><code>--port INTEGER</code>: (Optional) The port number the ADK API server will listen on within the container. Defaults to 8000.</li> <li><code>--with_ui</code>: (Optional) If included, deploys the ADK dev UI alongside the agent API server. By default, only the API server is deployed.</li> <li><code>--temp_folder TEXT</code>: (Optional) Specifies a directory for storing intermediate files generated during the deployment process. Defaults to a timestamped folder in the system's temporary directory. (Note: This option is generally not needed unless troubleshooting issues).</li> <li><code>--help</code>: Show the help message and exit.</li> </ul>"},{"location":"deploy/cloud-run/#authenticated-access","title":"Authenticated access","text":"<p>During the deployment process, you might be prompted: <code>Allow unauthenticated invocations to [your-service-name] (y/N)?</code>.</p> <ul> <li>Enter <code>y</code> to allow public access to your agent's API endpoint without authentication.</li> <li>Enter <code>N</code> (or press Enter for the default) to require authentication (e.g., using an identity token as shown in the \"Testing your agent\" section).</li> </ul> <p>Upon successful execution, the command will deploy your agent to Cloud Run and provide the URL of the deployed service.</p>"},{"location":"deploy/cloud-run/#gcloud-cli-for-python","title":"gcloud CLI for Python","text":"<p>Alternatively, you can deploy using the standard <code>gcloud run deploy</code> command with a <code>Dockerfile</code>. This method requires more manual setup compared to the <code>adk</code> command but offers flexibility, particularly if you want to embed your agent within a custom FastAPI application.</p> <p>Ensure you have authenticated with Google Cloud (<code>gcloud auth login</code> and <code>gcloud config set project &lt;your-project-id&gt;</code>).</p>"},{"location":"deploy/cloud-run/#project-structure","title":"Project Structure","text":"<p>Organize your project files as follows:</p> <pre><code>your-project-directory/\n\u251c\u2500\u2500 capital_agent/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 agent.py       # Your agent code (see \"Agent sample\" tab)\n\u251c\u2500\u2500 main.py            # FastAPI application entry point\n\u251c\u2500\u2500 requirements.txt   # Python dependencies\n\u2514\u2500\u2500 Dockerfile         # Container build instructions\n</code></pre> <p>Create the following files (<code>main.py</code>, <code>requirements.txt</code>, <code>Dockerfile</code>) in the root of <code>your-project-directory/</code>.</p>"},{"location":"deploy/cloud-run/#code-files","title":"Code files","text":"<ol> <li> <p>This file sets up the FastAPI application using <code>get_fast_api_app()</code> from ADK:</p> main.py<pre><code>import os\n\nimport uvicorn\nfrom fastapi import FastAPI\nfrom google.adk.cli.fast_api import get_fast_api_app\n\n# Get the directory where main.py is located\nAGENT_DIR = os.path.dirname(os.path.abspath(__file__))\n# Example session service URI (e.g., SQLite)\nSESSION_SERVICE_URI = \"sqlite:///./sessions.db\"\n# Example allowed origins for CORS\nALLOWED_ORIGINS = [\"http://localhost\", \"http://localhost:8080\", \"*\"]\n# Set web=True if you intend to serve a web interface, False otherwise\nSERVE_WEB_INTERFACE = True\n\n# Call the function to get the FastAPI app instance\n# Ensure the agent directory name ('capital_agent') matches your agent folder\napp: FastAPI = get_fast_api_app(\n    agents_dir=AGENT_DIR,\n    session_service_uri=SESSION_SERVICE_URI,\n    allow_origins=ALLOWED_ORIGINS,\n    web=SERVE_WEB_INTERFACE,\n)\n\n# You can add more FastAPI routes or configurations below if needed\n# Example:\n# @app.get(\"/hello\")\n# async def read_root():\n#     return {\"Hello\": \"World\"}\n\nif __name__ == \"__main__\":\n    # Use the PORT environment variable provided by Cloud Run, defaulting to 8080\n    uvicorn.run(app, host=\"0.0.0.0\", port=int(os.environ.get(\"PORT\", 8080)))\n</code></pre> <p>Note: We specify <code>agent_dir</code> to the directory <code>main.py</code> is in and use <code>os.environ.get(\"PORT\", 8080)</code> for Cloud Run compatibility.</p> </li> <li> <p>List the necessary Python packages:</p> requirements.txt<pre><code>google-adk\n# Add any other dependencies your agent needs\n</code></pre> </li> <li> <p>Define the container image:</p> Dockerfile<pre><code>FROM python:3.13-slim\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nRUN adduser --disabled-password --gecos \"\" myuser &amp;&amp; \\\n    chown -R myuser:myuser /app\n\nCOPY . .\n\nUSER myuser\n\nENV PATH=\"/home/myuser/.local/bin:$PATH\"\n\nCMD [\"sh\", \"-c\", \"uvicorn main:app --host 0.0.0.0 --port $PORT\"]\n</code></pre> </li> </ol>"},{"location":"deploy/cloud-run/#defining-multiple-agents","title":"Defining Multiple Agents","text":"<p>You can define and deploy multiple agents within the same Cloud Run instance by creating separate folders in the root of <code>your-project-directory/</code>. Each folder represents one agent and must define a <code>root_agent</code> in its configuration.</p> <p>Example structure:</p> <pre><code>your-project-directory/\n\u251c\u2500\u2500 capital_agent/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 agent.py       # contains `root_agent` definition\n\u251c\u2500\u2500 population_agent/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 agent.py       # contains `root_agent` definition\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"deploy/cloud-run/#deploy-using-gcloud","title":"Deploy using <code>gcloud</code>","text":"<p>Navigate to <code>your-project-directory</code> in your terminal.</p> <pre><code>gcloud run deploy capital-agent-service \\\n--source . \\\n--region $GOOGLE_CLOUD_LOCATION \\\n--project $GOOGLE_CLOUD_PROJECT \\\n--allow-unauthenticated \\\n--set-env-vars=\"GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT,GOOGLE_CLOUD_LOCATION=$GOOGLE_CLOUD_LOCATION,GOOGLE_GENAI_USE_VERTEXAI=$GOOGLE_GENAI_USE_VERTEXAI\"\n# Add any other necessary environment variables your agent might need\n</code></pre> <ul> <li><code>capital-agent-service</code>: The name you want to give your Cloud Run service.</li> <li><code>--source .</code>: Tells gcloud to build the container image from the Dockerfile in the current directory.</li> <li><code>--region</code>: Specifies the deployment region.</li> <li><code>--project</code>: Specifies the GCP project.</li> <li><code>--allow-unauthenticated</code>: Allows public access to the service. Remove this flag for private services.</li> <li><code>--set-env-vars</code>: Passes necessary environment variables to the running container. Ensure you include all variables required by ADK and your agent (like API keys if not using Application Default Credentials).</li> </ul> <p><code>gcloud</code> will build the Docker image, push it to Google Artifact Registry, and deploy it to Cloud Run. Upon completion, it will output the URL of your deployed service.</p> <p>For a full list of deployment options, see the <code>gcloud run deploy</code> reference documentation.</p>"},{"location":"deploy/cloud-run/#gcloud-cli-for-java","title":"gcloud CLI for Java","text":"<p>You can deploy Java Agents using the standard <code>gcloud run deploy</code> command and a <code>Dockerfile</code>. This is the current recommended way to deploy Java Agents to Google Cloud Run.</p> <p>Ensure you are authenticated with Google Cloud. Specifically, run the commands <code>gcloud auth login</code> and <code>gcloud config set project &lt;your-project-id&gt;</code> from your terminal.</p>"},{"location":"deploy/cloud-run/#project-structure_1","title":"Project Structure","text":"<p>Organize your project files as follows:</p> <pre><code>your-project-directory/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 main/\n\u2502       \u2514\u2500\u2500 java/\n\u2502             \u2514\u2500\u2500 agents/\n\u2502                 \u251c\u2500\u2500 capitalagent/\n\u2502                     \u2514\u2500\u2500 CapitalAgent.java    # Your agent code\n\u251c\u2500\u2500 pom.xml                                    # Java adk and adk-dev dependencies\n\u2514\u2500\u2500 Dockerfile                                 # Container build instructions\n</code></pre> <p>Create the <code>pom.xml</code> and <code>Dockerfile</code> in the root of your project directory. Your Agent code file (<code>CapitalAgent.java</code>) inside a directory as shown above.</p>"},{"location":"deploy/cloud-run/#code-files_1","title":"Code files","text":"<ol> <li> <p>This is our Agent definition. This is the same code as present in LLM agent with two caveats:</p> <ul> <li> <p>The Agent is now initialized as a global public static final variable.</p> </li> <li> <p>The definition of the agent can be exposed in a static method or inlined during declaration.</p> </li> </ul> <p>See the code for the <code>CapitalAgent</code> example in the  examples  repository.</p> </li> <li> <p>Add the following dependencies and plugin to the pom.xml file.</p> pom.xml<pre><code>&lt;dependencies&gt;\n  &lt;dependency&gt;\n     &lt;groupId&gt;com.google.adk&lt;/groupId&gt;\n     &lt;artifactId&gt;google-adk&lt;/artifactId&gt;\n     &lt;version&gt;0.1.0&lt;/version&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n     &lt;groupId&gt;com.google.adk&lt;/groupId&gt;\n     &lt;artifactId&gt;google-adk-dev&lt;/artifactId&gt;\n     &lt;version&gt;0.1.0&lt;/version&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n&lt;plugin&gt;\n  &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\n  &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;\n  &lt;version&gt;3.2.0&lt;/version&gt;\n  &lt;configuration&gt;\n    &lt;mainClass&gt;com.google.adk.web.AdkWebServer&lt;/mainClass&gt;\n    &lt;classpathScope&gt;compile&lt;/classpathScope&gt;\n  &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre> </li> <li> <p>Define the container image:</p> Dockerfile<pre><code># Use an official Maven image with a JDK. Choose a version appropriate for your project.\nFROM maven:3.8-openjdk-17 AS builder\n\nWORKDIR /app\n\nCOPY pom.xml .\nRUN mvn dependency:go-offline -B\n\nCOPY src ./src\n\n# Expose the port your application will listen on.\n# Cloud Run will set the PORT environment variable, which your app should use.\nEXPOSE 8080\n\n# The command to run your application.\n# TODO(Developer): Update the \"adk.agents.source-dir\" to the directory that contains your agents.\n# You can have multiple agents in this directory and all of them will be available in the Dev UI.\nENTRYPOINT [\"mvn\", \"exec:java\", \\\n    \"-Dexec.mainClass=com.google.adk.web.AdkWebServer\", \\\n    \"-Dexec.classpathScope=compile\", \\\n    \"-Dexec.args=--server.port=${PORT} --adk.agents.source-dir=src/main/java\" \\\n]\n</code></pre> </li> </ol>"},{"location":"deploy/cloud-run/#deploy-using-gcloud_1","title":"Deploy using <code>gcloud</code>","text":"<p>Navigate to <code>your-project-directory</code> in your terminal.</p> <pre><code>gcloud run deploy capital-agent-service \\\n--source . \\\n--region $GOOGLE_CLOUD_LOCATION \\\n--project $GOOGLE_CLOUD_PROJECT \\\n--allow-unauthenticated \\\n--set-env-vars=\"GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT,GOOGLE_CLOUD_LOCATION=$GOOGLE_CLOUD_LOCATION,GOOGLE_GENAI_USE_VERTEXAI=$GOOGLE_GENAI_USE_VERTEXAI\"\n# Add any other necessary environment variables your agent might need\n</code></pre> <ul> <li><code>capital-agent-service</code>: The name you want to give your Cloud Run service.</li> <li><code>--source .</code>: Tells gcloud to build the container image from the Dockerfile in the current directory.</li> <li><code>--region</code>: Specifies the deployment region.</li> <li><code>--project</code>: Specifies the GCP project.</li> <li><code>--allow-unauthenticated</code>: Allows public access to the service. Remove this flag for private services.</li> <li><code>--set-env-vars</code>: Passes necessary environment variables to the running container. Ensure you include all variables required by ADK and your agent (like API keys if not using Application Default Credentials).</li> </ul> <p><code>gcloud</code> will build the Docker image, push it to Google Artifact Registry, and deploy it to Cloud Run. Upon completion, it will output the URL of your deployed service.</p> <p>For a full list of deployment options, see the <code>gcloud run deploy</code> reference documentation.</p>"},{"location":"deploy/cloud-run/#agent_1","title":"\u6e2c\u8a66\u4f60\u7684 agent","text":"<p>\u7576\u4f60\u7684 agent \u90e8\u7f72\u5230 Cloud Run \u5f8c\uff0c\u4f60\u53ef\u4ee5\u900f\u904e\u5df2\u90e8\u7f72\u7684\u7db2\u9801 UI\uff08\u82e5\u5df2\u555f\u7528\uff09\u6216\u4f7f\u7528\u50cf\u662f <code>curl</code> \u7b49\u5de5\u5177\uff0c\u76f4\u63a5\u8207\u5176 API \u7aef\u9ede\u4e92\u52d5\u3002\u4f60\u5c07\u9700\u8981\u90e8\u7f72\u5f8c\u63d0\u4f9b\u7684\u670d\u52d9 URL\u3002</p> UI \u6e2c\u8a66API \u6e2c\u8a66\uff08curl\uff09"},{"location":"deploy/cloud-run/#ui-testing","title":"UI Testing","text":"<p>If you deployed your agent with the UI enabled:</p> <ul> <li>adk CLI: You included the <code>--with_ui</code> flag during deployment.</li> <li>gcloud CLI: You set <code>SERVE_WEB_INTERFACE = True</code> in your <code>main.py</code>.</li> </ul> <p>You can test your agent by simply navigating to the Cloud Run service URL provided after deployment in your web browser.</p> <pre><code># Example URL format\n# https://your-service-name-abc123xyz.a.run.app\n</code></pre> <p>The ADK dev UI allows you to interact with your agent, manage sessions, and view execution details directly in the browser.</p> <p>To verify your agent is working as intended, you can:</p> <ol> <li>Select your agent from the dropdown menu.</li> <li>Type a message and verify that you receive an expected response from your agent.</li> </ol> <p>If you experience any unexpected behavior, check the Cloud Run console logs.</p>"},{"location":"deploy/cloud-run/#api-testing-curl","title":"API Testing (curl)","text":"<p>You can interact with the agent's API endpoints using tools like <code>curl</code>. This is useful for programmatic interaction or if you deployed without the UI.</p> <p>You'll need the service URL provided after deployment and potentially an identity token for authentication if your service isn't set to allow unauthenticated access.</p>"},{"location":"deploy/cloud-run/#set-the-application-url","title":"Set the application URL","text":"<p>Replace the example URL with the actual URL of your deployed Cloud Run service.</p> <pre><code>export APP_URL=\"YOUR_CLOUD_RUN_SERVICE_URL\"\n# Example: export APP_URL=\"https://adk-default-service-name-abc123xyz.a.run.app\"\n</code></pre>"},{"location":"deploy/cloud-run/#get-an-identity-token-if-needed","title":"Get an identity token (if needed)","text":"<p>If your service requires authentication (i.e., you didn't use <code>--allow-unauthenticated</code> with <code>gcloud</code> or answered 'N' to the prompt with <code>adk</code>), obtain an identity token.</p> <pre><code>export TOKEN=$(gcloud auth print-identity-token)\n</code></pre> <p>If your service allows unauthenticated access, you can omit the <code>-H \"Authorization: Bearer $TOKEN\"</code> header from the <code>curl</code> commands below.</p>"},{"location":"deploy/cloud-run/#list-available-apps","title":"List available apps","text":"<p>Verify the deployed application name.</p> <pre><code>curl -X GET -H \"Authorization: Bearer $TOKEN\" $APP_URL/list-apps\n</code></pre> <p>(Adjust the <code>app_name</code> in the following commands based on this output if needed. The default is often the agent directory name, e.g., <code>capital_agent</code>).</p>"},{"location":"deploy/cloud-run/#create-or-update-a-session","title":"Create or Update a Session","text":"<p>Initialize or update the state for a specific user and session. Replace <code>capital_agent</code> with your actual app name if different. The values <code>user_123</code> and <code>session_abc</code> are example identifiers; you can replace them with your desired user and session IDs.</p> <pre><code>curl -X POST -H \"Authorization: Bearer $TOKEN\" \\\n    $APP_URL/apps/capital_agent/users/user_123/sessions/session_abc \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"state\": {\"preferred_language\": \"English\", \"visit_count\": 5}}'\n</code></pre>"},{"location":"deploy/cloud-run/#run-the-agent","title":"Run the Agent","text":"<p>Send a prompt to your agent. Replace <code>capital_agent</code> with your app name and adjust the user/session IDs and prompt as needed.</p> <pre><code>curl -X POST -H \"Authorization: Bearer $TOKEN\" \\\n    $APP_URL/run_sse \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"app_name\": \"capital_agent\",\n    \"user_id\": \"user_123\",\n    \"session_id\": \"session_abc\",\n    \"new_message\": {\n        \"role\": \"user\",\n        \"parts\": [{\n        \"text\": \"What is the capital of Canada?\"\n        }]\n    },\n    \"streaming\": false\n    }'\n</code></pre> <ul> <li>Set <code>\"streaming\": true</code> if you want to receive Server-Sent Events (SSE).</li> <li>The response will contain the agent's execution events, including the final answer.</li> </ul>"},{"location":"deploy/gke.en/","title":"Deploy to Google Kubernetes Engine (GKE)","text":"<p>GKE is the Google Cloud managed Kubernetes service. It allows you to deploy and manage containerized applications using Kubernetes.</p> <p>To deploy your agent you will need to have a Kubernetes cluster running on GKE. You can create a cluster using the Google Cloud Console or the <code>gcloud</code> command line tool.</p> <p>In this example we will deploy a simple agent to GKE. The agent will be a FastAPI application that uses <code>Gemini 2.0 Flash</code> as the LLM. We can use Vertex AI or AI Studio as the LLM provider using the Environment variable <code>GOOGLE_GENAI_USE_VERTEXAI</code>.</p>"},{"location":"deploy/gke.en/#environment-variables","title":"Environment variables","text":"<p>Set your environment variables as described in the Setup and Installation guide. You also need to install the <code>kubectl</code> command line tool. You can find instructions to do so in the Google Kubernetes Engine Documentation.</p> <pre><code>export GOOGLE_CLOUD_PROJECT=your-project-id # Your GCP project ID\nexport GOOGLE_CLOUD_LOCATION=us-central1 # Or your preferred location\nexport GOOGLE_GENAI_USE_VERTEXAI=true # Set to true if using Vertex AI\nexport GOOGLE_CLOUD_PROJECT_NUMBER=$(gcloud projects describe --format json $GOOGLE_CLOUD_PROJECT | jq -r \".projectNumber\")\n</code></pre> <p>If you don't have <code>jq</code> installed, you can use the following command to get the project number:</p> <pre><code>gcloud projects describe $GOOGLE_CLOUD_PROJECT\n</code></pre> <p>And copy the project number from the output.</p> <pre><code>export GOOGLE_CLOUD_PROJECT_NUMBER=YOUR_PROJECT_NUMBER\n</code></pre>"},{"location":"deploy/gke.en/#enable-apis-and-permissions","title":"Enable APIs and Permissions","text":"<p>Ensure you have authenticated with Google Cloud (<code>gcloud auth login</code> and <code>gcloud config set project &lt;your-project-id&gt;</code>).</p> <p>Enable the necessary APIs for your project. You can do this using the <code>gcloud</code> command line tool.</p> <pre><code>gcloud services enable \\\n    container.googleapis.com \\\n    artifactregistry.googleapis.com \\\n    cloudbuild.googleapis.com \\\n    aiplatform.googleapis.com\n</code></pre> <p>Grant necessary roles to the default compute engine service account required by the <code>gcloud builds submit</code> command.</p> <pre><code>ROLES_TO_ASSIGN=(\n    \"roles/artifactregistry.writer\"\n    \"roles/storage.objectViewer\"\n    \"roles/logging.viewer\"\n    \"roles/logging.logWriter\"\n)\n\nfor ROLE in \"${ROLES_TO_ASSIGN[@]}\"; do\n    gcloud projects add-iam-policy-binding \"${GOOGLE_CLOUD_PROJECT}\" \\\n        --member=\"serviceAccount:${GOOGLE_CLOUD_PROJECT_NUMBER}-compute@developer.gserviceaccount.com\" \\\n        --role=\"${ROLE}\"\ndone\n</code></pre>"},{"location":"deploy/gke.en/#payload","title":"Deployment payload","text":"<p>When you deploy your ADK agent workflow to the Google Cloud GKE, the following content is uploaded to the service:</p> <ul> <li>Your ADK agent code</li> <li>Any dependencies declared in your ADK agent code</li> <li>ADK API server code version used by your agent</li> </ul> <p>The default deployment does not include the ADK web user interface libraries, unless you specify it as deployment setting, such as the <code>--with_ui</code> option for <code>adk deploy gke</code> command.</p>"},{"location":"deploy/gke.en/#deployment-options","title":"Deployment options","text":"<p>You can deploy your agent to GKE either manually using Kubernetes manifests or automatically using the <code>adk deploy gke</code> command. Choose the approach that best suits your workflow.</p>"},{"location":"deploy/gke.en/#option-1-manual-deployment-using-gcloud-and-kubectl","title":"Option 1: Manual Deployment using gcloud and kubectl","text":""},{"location":"deploy/gke.en/#create-a-gke-cluster","title":"Create a GKE cluster","text":"<p>You can create a GKE cluster using the <code>gcloud</code> command line tool. This example creates an Autopilot cluster named <code>adk-cluster</code> in the <code>us-central1</code> region.</p> <p>If creating a GKE Standard cluster, make sure Workload Identity is enabled. Workload Identity is enabled by default in an AutoPilot cluster.</p> <pre><code>gcloud container clusters create-auto adk-cluster \\\n    --location=$GOOGLE_CLOUD_LOCATION \\\n    --project=$GOOGLE_CLOUD_PROJECT\n</code></pre> <p>After creating the cluster, you need to connect to it using <code>kubectl</code>. This command configures <code>kubectl</code> to use the credentials for your new cluster.</p> <pre><code>gcloud container clusters get-credentials adk-cluster \\\n    --location=$GOOGLE_CLOUD_LOCATION \\\n    --project=$GOOGLE_CLOUD_PROJECT\n</code></pre>"},{"location":"deploy/gke.en/#create-your-agent","title":"Create Your Agent","text":"<p>We will reference the <code>capital_agent</code> example defined on the LLM agents page.</p> <p>To proceed, organize your project files as follows:</p> <pre><code>your-project-directory/\n\u251c\u2500\u2500 capital_agent/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 agent.py       # Your agent code (see \"Capital Agent example\" below)\n\u251c\u2500\u2500 main.py            # FastAPI application entry point\n\u251c\u2500\u2500 requirements.txt   # Python dependencies\n\u2514\u2500\u2500 Dockerfile         # Container build instructions\n</code></pre>"},{"location":"deploy/gke.en/#code-files","title":"Code files","text":"<p>Create the following files (<code>main.py</code>, <code>requirements.txt</code>, <code>Dockerfile</code>, <code>capital_agent/agent.py</code>, <code>capital_agent/__init__.py</code>) in the root of <code>your-project-directory/</code>.</p> <ol> <li> <p>This is the Capital Agent example inside the <code>capital_agent</code> directory</p> capital_agent/agent.py<pre><code>from google.adk.agents import LlmAgent \n\n# Define a tool function\ndef get_capital_city(country: str) -&gt; str:\n  \"\"\"Retrieves the capital city for a given country.\"\"\"\n  # Replace with actual logic (e.g., API call, database lookup)\n  capitals = {\"france\": \"Paris\", \"japan\": \"Tokyo\", \"canada\": \"Ottawa\"}\n  return capitals.get(country.lower(), f\"Sorry, I don't know the capital of {country}.\")\n\n# Add the tool to the agent\ncapital_agent = LlmAgent(\n    model=\"gemini-2.0-flash\",\n    name=\"capital_agent\", #name of your agent\n    description=\"Answers user questions about the capital city of a given country.\",\n    instruction=\"\"\"You are an agent that provides the capital city of a country... (previous instruction text)\"\"\",\n    tools=[get_capital_city] # Provide the function directly\n)\n\n# ADK will discover the root_agent instance\nroot_agent = capital_agent\n</code></pre> <p>Mark your directory as a python package</p> capital_agent/__init__.py<pre><code>from . import agent\n</code></pre> </li> <li> <p>This file sets up the FastAPI application using <code>get_fast_api_app()</code> from ADK:</p> main.py<pre><code>import os\n\nimport uvicorn\nfrom fastapi import FastAPI\nfrom google.adk.cli.fast_api import get_fast_api_app\n\n# Get the directory where main.py is located\nAGENT_DIR = os.path.dirname(os.path.abspath(__file__))\n# Example session service URI (e.g., SQLite)\nSESSION_SERVICE_URI = \"sqlite:///./sessions.db\"\n# Example allowed origins for CORS\nALLOWED_ORIGINS = [\"http://localhost\", \"http://localhost:8080\", \"*\"]\n# Set web=True if you intend to serve a web interface, False otherwise\nSERVE_WEB_INTERFACE = True\n\n# Call the function to get the FastAPI app instance\n# Ensure the agent directory name ('capital_agent') matches your agent folder\napp: FastAPI = get_fast_api_app(\n    agents_dir=AGENT_DIR,\n    session_service_uri=SESSION_SERVICE_URI,\n    allow_origins=ALLOWED_ORIGINS,\n    web=SERVE_WEB_INTERFACE,\n)\n\n# You can add more FastAPI routes or configurations below if needed\n# Example:\n# @app.get(\"/hello\")\n# async def read_root():\n#     return {\"Hello\": \"World\"}\n\nif __name__ == \"__main__\":\n    # Use the PORT environment variable provided by Cloud Run, defaulting to 8080\n    uvicorn.run(app, host=\"0.0.0.0\", port=int(os.environ.get(\"PORT\", 8080)))\n</code></pre> <p>Note: We specify <code>agent_dir</code> to the directory <code>main.py</code> is in and use <code>os.environ.get(\"PORT\", 8080)</code> for Cloud Run compatibility.</p> </li> <li> <p>List the necessary Python packages:</p> requirements.txt<pre><code>google-adk\n# Add any other dependencies your agent needs\n</code></pre> </li> <li> <p>Define the container image:</p> Dockerfile<pre><code>FROM python:3.13-slim\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nRUN adduser --disabled-password --gecos \"\" myuser &amp;&amp; \\\n    chown -R myuser:myuser /app\n\nCOPY . .\n\nUSER myuser\n\nENV PATH=\"/home/myuser/.local/bin:$PATH\"\n\nCMD [\"sh\", \"-c\", \"uvicorn main:app --host 0.0.0.0 --port $PORT\"]\n</code></pre> </li> </ol>"},{"location":"deploy/gke.en/#build-the-container-image","title":"Build the container image","text":"<p>You need to create a Google Artifact Registry repository to store your container images. You can do this using the <code>gcloud</code> command line tool.</p> <pre><code>gcloud artifacts repositories create adk-repo \\\n    --repository-format=docker \\\n    --location=$GOOGLE_CLOUD_LOCATION \\\n    --description=\"ADK repository\"\n</code></pre> <p>Build the container image using the <code>gcloud</code> command line tool. This example builds the image and tags it as <code>adk-repo/adk-agent:latest</code>.</p> <pre><code>gcloud builds submit \\\n    --tag $GOOGLE_CLOUD_LOCATION-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/adk-repo/adk-agent:latest \\\n    --project=$GOOGLE_CLOUD_PROJECT \\\n    .\n</code></pre> <p>Verify the image is built and pushed to the Artifact Registry:</p> <pre><code>gcloud artifacts docker images list \\\n  $GOOGLE_CLOUD_LOCATION-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/adk-repo \\\n  --project=$GOOGLE_CLOUD_PROJECT\n</code></pre>"},{"location":"deploy/gke.en/#configure-kubernetes-service-account-for-vertex-ai","title":"Configure Kubernetes Service Account for Vertex AI","text":"<p>If your agent uses Vertex AI, you need to create a Kubernetes service account with the necessary permissions. This example creates a service account named <code>adk-agent-sa</code> and binds it to the <code>Vertex AI User</code> role.</p> <p>If you are using AI Studio and accessing the model with an API key you can skip this step.</p> <pre><code>kubectl create serviceaccount adk-agent-sa\n</code></pre> <pre><code>gcloud projects add-iam-policy-binding projects/${GOOGLE_CLOUD_PROJECT} \\\n    --role=roles/aiplatform.user \\\n    --member=principal://iam.googleapis.com/projects/${GOOGLE_CLOUD_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GOOGLE_CLOUD_PROJECT}.svc.id.goog/subject/ns/default/sa/adk-agent-sa \\\n    --condition=None\n</code></pre>"},{"location":"deploy/gke.en/#create-the-kubernetes-manifest-files","title":"Create the Kubernetes manifest files","text":"<p>Create a Kubernetes deployment manifest file named <code>deployment.yaml</code> in your project directory. This file defines how to deploy your application on GKE.</p> deployment.yaml<pre><code>cat &lt;&lt;  EOF &gt; deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: adk-agent\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: adk-agent\n  template:\n    metadata:\n      labels:\n        app: adk-agent\n    spec:\n      serviceAccount: adk-agent-sa\n      containers:\n      - name: adk-agent\n        imagePullPolicy: Always\n        image: $GOOGLE_CLOUD_LOCATION-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/adk-repo/adk-agent:latest\n        resources:\n          limits:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n            ephemeral-storage: \"128Mi\"\n          requests:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n            ephemeral-storage: \"128Mi\"\n        ports:\n        - containerPort: 8080\n        env:\n          - name: PORT\n            value: \"8080\"\n          - name: GOOGLE_CLOUD_PROJECT\n            value: $GOOGLE_CLOUD_PROJECT\n          - name: GOOGLE_CLOUD_LOCATION\n            value: $GOOGLE_CLOUD_LOCATION\n          - name: GOOGLE_GENAI_USE_VERTEXAI\n            value: \"$GOOGLE_GENAI_USE_VERTEXAI\"\n          # If using AI Studio, set GOOGLE_GENAI_USE_VERTEXAI to false and set the following:\n          # - name: GOOGLE_API_KEY\n          #   value: $GOOGLE_API_KEY\n          # Add any other necessary environment variables your agent might need\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: adk-agent\nspec:       \n  type: LoadBalancer\n  ports:\n    - port: 80\n      targetPort: 8080\n  selector:\n    app: adk-agent\nEOF\n</code></pre>"},{"location":"deploy/gke.en/#deploy-the-application","title":"Deploy the Application","text":"<p>Deploy the application using the <code>kubectl</code> command line tool. This command applies the deployment and service manifest files to your GKE cluster.</p> <pre><code>kubectl apply -f deployment.yaml\n</code></pre> <p>After a few moments, you can check the status of your deployment using:</p> <pre><code>kubectl get pods -l=app=adk-agent\n</code></pre> <p>This command lists the pods associated with your deployment. You should see a pod with a status of <code>Running</code>.</p> <p>Once the pod is running, you can check the status of the service using:</p> <pre><code>kubectl get service adk-agent\n</code></pre> <p>If the output shows a <code>External IP</code>, it means your service is accessible from the internet. It may take a few minutes for the external IP to be assigned.</p> <p>You can get the external IP address of your service using:</p> <pre><code>kubectl get svc adk-agent -o=jsonpath='{.status.loadBalancer.ingress[0].ip}'\n</code></pre>"},{"location":"deploy/gke.en/#option-2-automated-deployment-using-adk-deploy-gke","title":"Option 2: Automated Deployment using <code>adk deploy gke</code>","text":"<p>ADK provides a CLI command to streamline GKE deployment. This avoids the need to manually build images, write Kubernetes manifests, or push to Artifact Registry.</p>"},{"location":"deploy/gke.en/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following set up:</p> <ol> <li> <p>A running GKE cluster: You need an active Kubernetes cluster on Google Cloud.</p> </li> <li> <p>Required CLIs: </p> <ul> <li><code>gcloud</code> CLI: The Google Cloud CLI must be installed, authenticated, and configured to use your target project. Run <code>gcloud auth login</code> and <code>gcloud config set project [YOUR_PROJECT_ID]</code>.</li> <li>kubectl: The Kubernetes CLI must be installed to deploy the application to your cluster.</li> </ul> </li> <li> <p>Enabled Google Cloud APIs: Make sure the following APIs are enabled in your Google Cloud project:</p> <ul> <li>Kubernetes Engine API (<code>container.googleapis.com</code>)</li> <li>Cloud Build API (<code>cloudbuild.googleapis.com</code>)</li> <li>Container Registry API (<code>containerregistry.googleapis.com</code>)</li> </ul> </li> <li> <p>Required IAM Permissions: The user or Compute Engine default service account running the command needs, at a minimum, the following roles:</p> </li> <li> <p>Kubernetes Engine Developer (<code>roles/container.developer</code>): To interact with the GKE cluster.</p> </li> <li> <p>Storage Object Viewer (<code>roles/storage.objectViewer</code>): To allow Cloud Build to download the source code from the Cloud Storage bucket where gcloud builds submit uploads it.</p> </li> <li> <p>Artifact Registry Create on Push Writer (<code>roles/artifactregistry.createOnPushWriter</code>): To allow Cloud Build to push the built container image to Artifact Registry. This role also permits the on-the-fly creation of the special gcr.io repository within Artifact Registry if needed on the first push.</p> </li> <li> <p>Logs Writer  (<code>roles/logging.logWriter</code>): To allow Cloud Build to write build logs to Cloud Logging.</p> </li> </ol>"},{"location":"deploy/gke.en/#the-deploy-gke-command","title":"The <code>deploy gke</code> Command","text":"<p>The command takes the path to your agent and parameters specifying the target GKE cluster.</p>"},{"location":"deploy/gke.en/#syntax","title":"Syntax","text":"<pre><code>adk deploy gke [OPTIONS] AGENT_PATH\n</code></pre>"},{"location":"deploy/gke.en/#arguments-options","title":"Arguments &amp; Options","text":"Argument Description Required AGENT_PATH The local file path to your agent's root directory. Yes --project The Google Cloud Project ID where your GKE cluster is located. Yes --cluster_name The name of your GKE cluster. Yes --region The Google Cloud region of your cluster (e.g., us-central1). Yes --with_ui Deploys both the agent's back-end API and a companion front-end user interface. No --log_level Sets the logging level for the deployment process. Options: debug, info, warning, error. No"},{"location":"deploy/gke.en/#how-it-works","title":"How It Works","text":"<p>When you run the <code>adk deploy gke</code> command, the ADK performs the following steps automatically:</p> <ul> <li> <p>Containerization: It builds a Docker container image from your agent's source code.</p> </li> <li> <p>Image Push: It tags the container image and pushes it to your project's Artifact Registry.</p> </li> <li> <p>Manifest Generation: It dynamically generates the necessary Kubernetes manifest files (a <code>Deployment</code> and a <code>Service</code>).</p> </li> <li> <p>Cluster Deployment: It applies these manifests to your specified GKE cluster, which triggers the following:</p> </li> </ul> <p>The <code>Deployment</code> instructs GKE to pull the container image from Artifact Registry and run it in one or more Pods.</p> <p>The <code>Service</code> creates a stable network endpoint for your agent. By default, this is a LoadBalancer service, which provisions a public IP address to expose your agent to the internet.</p>"},{"location":"deploy/gke.en/#example-usage","title":"Example Usage","text":"<p>Here is a practical example of deploying an agent located at <code>~/agents/multi_tool_agent/</code> to a GKE cluster named test.</p> <pre><code>adk deploy gke \\\n    --project myproject \\\n    --cluster_name test \\\n    --region us-central1 \\\n    --with_ui \\\n    --log_level info \\\n    ~/agents/multi_tool_agent/\n</code></pre>"},{"location":"deploy/gke.en/#verifying-your-deployment","title":"Verifying Your Deployment","text":"<p>If you used <code>adk deploy gke</code>, verify the deployment using <code>kubectl</code>:</p> <ol> <li>Check the Pods: Ensure your agent's pods are in the Running state.</li> </ol> <p><pre><code>kubectl get pods\n</code></pre> You should see output like <code>adk-default-service-name-xxxx-xxxx ... 1/1 Running</code> in the default namespace.</p> <ol> <li>Find the External IP: Get the public IP address for your agent's service.</li> </ol> <pre><code>kubectl get service\nNAME                       TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)        AGE\nadk-default-service-name   LoadBalancer   34.118.228.70   34.63.153.253   80:32581/TCP   5d20h\n</code></pre> <p>We can navigate to the external IP and interact with the agent via UI </p>"},{"location":"deploy/gke.en/#testing-your-agent","title":"Testing your agent","text":"<p>Once your agent is deployed to GKE, you can interact with it via the deployed UI (if enabled) or directly with its API endpoints using tools like <code>curl</code>. You'll need the service URL provided after deployment.</p> UI TestingAPI Testing (curl)"},{"location":"deploy/gke.en/#ui-testing","title":"UI Testing","text":"<p>If you deployed your agent with the UI enabled:</p> <p>You can test your agent by simply navigating to the kubernetes service URL in your web browser.</p> <p>The ADK dev UI allows you to interact with your agent, manage sessions, and view execution details directly in the browser.</p> <p>To verify your agent is working as intended, you can:</p> <ol> <li>Select your agent from the dropdown menu.</li> <li>Type a message and verify that you receive an expected response from your agent.</li> </ol> <p>If you experience any unexpected behavior, check the pod logs for your agent using:</p> <pre><code>kubectl logs -l app=adk-agent\n</code></pre>"},{"location":"deploy/gke.en/#api-testing-curl","title":"API Testing (curl)","text":"<p>You can interact with the agent's API endpoints using tools like <code>curl</code>. This is useful for programmatic interaction or if you deployed without the UI.</p>"},{"location":"deploy/gke.en/#set-the-application-url","title":"Set the application URL","text":"<p>Replace the example URL with the actual URL of your deployed Cloud Run service.</p> <pre><code>export APP_URL=$(kubectl get service adk-agent -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n</code></pre>"},{"location":"deploy/gke.en/#list-available-apps","title":"List available apps","text":"<p>Verify the deployed application name.</p> <pre><code>curl -X GET $APP_URL/list-apps\n</code></pre> <p>(Adjust the <code>app_name</code> in the following commands based on this output if needed. The default is often the agent directory name, e.g., <code>capital_agent</code>).</p>"},{"location":"deploy/gke.en/#create-or-update-a-session","title":"Create or Update a Session","text":"<p>Initialize or update the state for a specific user and session. Replace <code>capital_agent</code> with your actual app name if different. The values <code>user_123</code> and <code>session_abc</code> are example identifiers; you can replace them with your desired user and session IDs.</p> <pre><code>curl -X POST \\\n    $APP_URL/apps/capital_agent/users/user_123/sessions/session_abc \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"state\": {\"preferred_language\": \"English\", \"visit_count\": 5}}'\n</code></pre>"},{"location":"deploy/gke.en/#run-the-agent","title":"Run the Agent","text":"<p>Send a prompt to your agent. Replace <code>capital_agent</code> with your app name and adjust the user/session IDs and prompt as needed.</p> <pre><code>curl -X POST $APP_URL/run_sse \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"app_name\": \"capital_agent\",\n    \"user_id\": \"user_123\",\n    \"session_id\": \"session_abc\",\n    \"new_message\": {\n        \"role\": \"user\",\n        \"parts\": [{\n        \"text\": \"What is the capital of Canada?\"\n        }]\n    },\n    \"streaming\": false\n    }'\n</code></pre> <ul> <li>Set <code>\"streaming\": true</code> if you want to receive Server-Sent Events (SSE).</li> <li>The response will contain the agent's execution events, including the final answer.</li> </ul>"},{"location":"deploy/gke.en/#troubleshooting","title":"Troubleshooting","text":"<p>These are some common issues you might encounter when deploying your agent to GKE:</p>"},{"location":"deploy/gke.en/#403-permission-denied-for-gemini-20-flash","title":"403 Permission Denied for <code>Gemini 2.0 Flash</code>","text":"<p>This usually means that the Kubernetes service account does not have the necessary permission to access the Vertex AI API. Ensure that you have created the service account and bound it to the <code>Vertex AI User</code> role as described in the Configure Kubernetes Service Account for Vertex AI section. If you are using AI Studio, ensure that you have set the <code>GOOGLE_API_KEY</code> environment variable in the deployment manifest and it is valid.</p>"},{"location":"deploy/gke.en/#404-or-not-found-response","title":"404 or Not Found response","text":"<p>This usually means there is an error in your request. Check the application logs to diagnose the problem. </p> <pre><code>export POD_NAME=$(kubectl get pod -l app=adk-agent -o jsonpath='{.items[0].metadata.name}')\nkubectl logs $POD_NAME\n</code></pre>"},{"location":"deploy/gke.en/#attempt-to-write-a-readonly-database","title":"Attempt to write a readonly database","text":"<p>You might see there is no session id created in the UI and the agent does not respond to any messages. This is usually caused by the SQLite database being read-only. This can happen if you run the agent locally and then create the container image which copies the SQLite database into the container. The database is then read-only in the container.</p> <pre><code>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) attempt to write a readonly database\n[SQL: UPDATE app_states SET state=?, update_time=CURRENT_TIMESTAMP WHERE app_states.app_name = ?]\n</code></pre> <p>To fix this issue, you can either:</p> <p>Delete the SQLite database file from your local machine before building the container image. This will create a new SQLite database when the container is started.</p> <pre><code>rm -f sessions.db\n</code></pre> <p>or (recommended) you can add a <code>.dockerignore</code> file to your project directory to exclude the SQLite database from being copied into the container image.</p> .dockerignore<pre><code>sessions.db\n</code></pre> <p>Build the container image abd deploy the application again.</p>"},{"location":"deploy/gke.en/#insufficent-permission-to-stream-logs-error-gcloudbuildssubmit","title":"Insufficent Permission to Stream Logs <code>ERROR: (gcloud.builds.submit)</code>","text":"<p>This error can occur when you don't have sufficient permissions to stream build logs, or your VPC-SC security policy restricts access to the default logs bucket.</p> <p>To check the progress of the build, follow the link provided in the error message or navigate to the Cloud Build page in the Google Cloud Console.</p> <p>You can also verify the image was built and pushed to the Artifact Registry using the command under the Build the container image section.</p>"},{"location":"deploy/gke.en/#gemini-20-flash-not-supported-in-live-api","title":"Gemini-2.0-Flash Not Supported in Live Api","text":"<p>When using the ADK Dev UI for your deployed agent, text-based chat works, but voice (e.g., clicking the microphone button) fail. You might see a <code>websockets.exceptions.ConnectionClosedError</code> in the pod logs indicating that your model is \"not supported in the live api\".</p> <p>This error occurs because the agent is configured with a model (like <code>gemini-2.0-flash</code> in the example) that does not support the Gemini Live API. The Live API is required for real-time, bidirectional streaming of audio and video.</p>"},{"location":"deploy/gke.en/#cleanup","title":"Cleanup","text":"<p>To delete the GKE cluster and all associated resources, run:</p> <pre><code>gcloud container clusters delete adk-cluster \\\n    --location=$GOOGLE_CLOUD_LOCATION \\\n    --project=$GOOGLE_CLOUD_PROJECT\n</code></pre> <p>To delete the Artifact Registry repository, run:</p> <pre><code>gcloud artifacts repositories delete adk-repo \\\n    --location=$GOOGLE_CLOUD_LOCATION \\\n    --project=$GOOGLE_CLOUD_PROJECT\n</code></pre> <p>You can also delete the project if you no longer need it. This will delete all resources associated with the project, including the GKE cluster, Artifact Registry repository, and any other resources you created.</p> <pre><code>gcloud projects delete $GOOGLE_CLOUD_PROJECT\n</code></pre>"},{"location":"deploy/gke/","title":"\u90e8\u7f72\u5230 Google Kubernetes Engine (GKE)","text":"<p>GKE \u662f Google Cloud \u6240\u63d0\u4f9b\u7684\u53d7\u7ba1 Kubernetes \u670d\u52d9\u3002\u5b83\u8b93\u4f60\u53ef\u4ee5\u4f7f\u7528 Kubernetes \u90e8\u7f72\u8207\u7ba1\u7406\u5bb9\u5668\u5316\u61c9\u7528\u7a0b\u5f0f\u3002</p> <p>\u8981\u90e8\u7f72\u4f60\u7684 agent\uff0c\u4f60\u9700\u8981\u5728 GKE \u4e0a\u6709\u4e00\u500b\u6b63\u5728\u904b\u4f5c\u7684 Kubernetes \u53e2\u96c6\u3002\u4f60\u53ef\u4ee5\u900f\u904e Google Cloud Console \u6216 <code>gcloud</code> \u547d\u4ee4\u5217\u5de5\u5177\u4f86\u5efa\u7acb\u53e2\u96c6\u3002</p> <p>\u5728\u9019\u500b\u7bc4\u4f8b\u4e2d\uff0c\u6211\u5011\u5c07\u90e8\u7f72\u4e00\u500b\u7c21\u55ae\u7684 agent \u5230 GKE\u3002\u9019\u500b agent \u6703\u662f\u4e00\u500b FastAPI \u61c9\u7528\u7a0b\u5f0f\uff0c\u4e26\u4f7f\u7528 <code>Gemini 2.0 Flash</code> \u4f5c\u70ba\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\u3002\u6211\u5011\u53ef\u4ee5\u900f\u904e\u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578 <code>GOOGLE_GENAI_USE_VERTEXAI</code>\uff0c\u9078\u64c7\u4f7f\u7528 Vertex AI \u6216 AI Studio \u4f5c\u70ba LLM \u63d0\u4f9b\u8005\u3002</p>"},{"location":"deploy/gke/#_1","title":"\u74b0\u5883\u8b8a\u6578","text":"<p>\u8acb\u4f9d\u7167 Setup and Installation \u6307\u5357\u8a2d\u5b9a\u4f60\u7684\u74b0\u5883\u8b8a\u6578\u3002\u4f60\u4e5f\u9700\u8981\u5b89\u88dd <code>kubectl</code> \u547d\u4ee4\u5217\u5de5\u5177\u3002\u76f8\u95dc\u5b89\u88dd\u8aaa\u660e\u53ef\u53c3\u8003 Google Kubernetes Engine Documentation\u3002</p> <pre><code>export GOOGLE_CLOUD_PROJECT=your-project-id # Your GCP project ID\nexport GOOGLE_CLOUD_LOCATION=us-central1 # Or your preferred location\nexport GOOGLE_GENAI_USE_VERTEXAI=true # Set to true if using Vertex AI\nexport GOOGLE_CLOUD_PROJECT_NUMBER=$(gcloud projects describe --format json $GOOGLE_CLOUD_PROJECT | jq -r \".projectNumber\")\n</code></pre> <p>\u5982\u679c\u4f60\u5c1a\u672a\u5b89\u88dd <code>jq</code>\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u4f86\u53d6\u5f97\u5c08\u6848\u7de8\u865f\uff1a</p> <pre><code>gcloud projects describe $GOOGLE_CLOUD_PROJECT\n</code></pre> <p>\u5f9e\u8f38\u51fa\u7d50\u679c\u4e2d\u8907\u88fd\u5c08\u6848\u7de8\u865f\uff08project number\uff09\u3002</p> <pre><code>export GOOGLE_CLOUD_PROJECT_NUMBER=YOUR_PROJECT_NUMBER\n</code></pre>"},{"location":"deploy/gke/#api","title":"\u555f\u7528 API \u8207\u6b0a\u9650","text":"<p>\u8acb\u78ba\u4fdd\u4f60\u5df2\u7d93\u5b8c\u6210 Google Cloud \u7684\u9a57\u8b49\uff08<code>gcloud auth login</code> \u548c <code>gcloud config set project &lt;your-project-id&gt;</code>\uff09\u3002</p> <p>\u70ba\u4f60\u7684\u5c08\u6848\u555f\u7528\u5fc5\u8981\u7684 API\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>gcloud</code> \u547d\u4ee4\u5217\u5de5\u5177\u4f86\u5b8c\u6210\u9019\u500b\u6b65\u9a5f\u3002</p> <pre><code>gcloud services enable \\\n    container.googleapis.com \\\n    artifactregistry.googleapis.com \\\n    cloudbuild.googleapis.com \\\n    aiplatform.googleapis.com\n</code></pre> <p>\u6388\u4e88\u9810\u8a2d Compute Engine \u670d\u52d9\u5e33\u6236\u57f7\u884c <code>gcloud builds submit</code> \u6307\u4ee4\u6240\u9700\u7684\u76f8\u95dc\u89d2\u8272\u6b0a\u9650\u3002</p> <pre><code>ROLES_TO_ASSIGN=(\n    \"roles/artifactregistry.writer\"\n    \"roles/storage.objectViewer\"\n    \"roles/logging.viewer\"\n    \"roles/logging.logWriter\"\n)\n\nfor ROLE in \"${ROLES_TO_ASSIGN[@]}\"; do\n    gcloud projects add-iam-policy-binding \"${GOOGLE_CLOUD_PROJECT}\" \\\n        --member=\"serviceAccount:${GOOGLE_CLOUD_PROJECT_NUMBER}-compute@developer.gserviceaccount.com\" \\\n        --role=\"${ROLE}\"\ndone\n</code></pre>"},{"location":"deploy/gke/#payload","title":"\u90e8\u7f72\u5167\u5bb9\uff08Deployment payload\uff09","text":"<p>\u7576\u4f60\u5c07 Agent Development Kit (ADK) agent \u5de5\u4f5c\u6d41\u7a0b\u90e8\u7f72\u5230 Google Cloud GKE \u6642\uff0c\u4ee5\u4e0b\u5167\u5bb9\u6703\u88ab\u4e0a\u50b3\u81f3\u670d\u52d9\uff1a</p> <ul> <li>\u4f60\u7684 ADK agent \u7a0b\u5f0f\u78bc</li> <li>\u5728\u4f60\u7684 ADK agent \u7a0b\u5f0f\u78bc\u4e2d\u5ba3\u544a\u7684\u6240\u6709\u76f8\u4f9d\u5957\u4ef6</li> <li>\u4f60\u7684 agent \u6240\u4f7f\u7528\u7684 ADK API \u4f3a\u670d\u5668\u7a0b\u5f0f\u78bc\u7248\u672c</li> </ul> <p>\u9810\u8a2d\u90e8\u7f72\u4e0d\u6703\u5305\u542b ADK \u7db2\u9801 UI \u51fd\u5f0f\u5eab\uff0c\u9664\u975e\u4f60\u5728\u90e8\u7f72\u8a2d\u5b9a\u4e2d\u660e\u78ba\u6307\u5b9a\uff0c\u4f8b\u5982\u5728 <code>adk deploy gke</code> \u6307\u4ee4\u4e2d\u4f7f\u7528 <code>--with_ui</code> \u9078\u9805\u3002</p>"},{"location":"deploy/gke/#_2","title":"\u90e8\u7f72\u9078\u9805","text":"<p>\u4f60\u53ef\u4ee5\u9078\u64c7\u624b\u52d5\u4f7f\u7528 Kubernetes manifests \u90e8\u7f72 agent\uff0c\u6216\u662f\u4f7f\u7528 <code>adk deploy gke</code> \u6307\u4ee4\u81ea\u52d5\u90e8\u7f72 agent\u3002\u8acb\u4f9d\u64da\u4f60\u7684\u5de5\u4f5c\u6d41\u7a0b\u9078\u64c7\u6700\u9069\u5408\u7684\u65b9\u5f0f\u3002</p>"},{"location":"deploy/gke/#1-gcloud-kubectl","title":"\u9078\u9805 1\uff1a\u4f7f\u7528 gcloud \u8207 kubectl \u624b\u52d5\u90e8\u7f72","text":""},{"location":"deploy/gke/#gke","title":"\u5efa\u7acb GKE \u53e2\u96c6","text":"<p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>gcloud</code> \u547d\u4ee4\u5217\u5de5\u5177\u5efa\u7acb GKE \u53e2\u96c6\u3002\u4ee5\u4e0b\u7bc4\u4f8b\u6703\u5728 <code>us-central1</code> \u5340\u57df\u5efa\u7acb\u4e00\u500b\u540d\u70ba <code>adk-cluster</code> \u7684 Autopilot \u53e2\u96c6\u3002</p> <p>\u5982\u679c\u4f60\u5efa\u7acb\u7684\u662f GKE Standard \u53e2\u96c6\uff0c\u8acb\u78ba\u4fdd\u5df2\u555f\u7528 Workload Identity\u3002Workload Identity \u5728 Autopilot \u53e2\u96c6\u4e2d\u9810\u8a2d\u70ba\u555f\u7528\u72c0\u614b\u3002</p> <pre><code>gcloud container clusters create-auto adk-cluster \\\n    --location=$GOOGLE_CLOUD_LOCATION \\\n    --project=$GOOGLE_CLOUD_PROJECT\n</code></pre> <p>\u5efa\u7acb\u53e2\u96c6\u5f8c\uff0c\u60a8\u9700\u8981\u4f7f\u7528 <code>kubectl</code> \u4f86\u9023\u7dda\u81f3\u8a72\u53e2\u96c6\u3002\u6b64\u6307\u4ee4\u6703\u5c07 <code>kubectl</code> \u8a2d\u5b9a\u70ba\u4f7f\u7528\u65b0\u53e2\u96c6\u7684\u8a8d\u8b49\u8cc7\u8a0a\u3002</p> <pre><code>gcloud container clusters get-credentials adk-cluster \\\n    --location=$GOOGLE_CLOUD_LOCATION \\\n    --project=$GOOGLE_CLOUD_PROJECT\n</code></pre>"},{"location":"deploy/gke/#agent","title":"\u5efa\u7acb\u4f60\u7684 agent","text":"<p>\u6211\u5011\u5c07\u53c3\u8003 \u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) agents \u9801\u9762\u4e2d\u5b9a\u7fa9\u7684 <code>capital_agent</code> \u7bc4\u4f8b\u3002</p> <p>\u63a5\u4e0b\u4f86\uff0c\u8acb\u4f9d\u7167\u4ee5\u4e0b\u65b9\u5f0f\u6574\u7406\u4f60\u7684\u5c08\u6848\u6a94\u6848\uff1a</p> <pre><code>your-project-directory/\n\u251c\u2500\u2500 capital_agent/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 agent.py       # Your agent code (see \"Capital Agent example\" below)\n\u251c\u2500\u2500 main.py            # FastAPI application entry point\n\u251c\u2500\u2500 requirements.txt   # Python dependencies\n\u2514\u2500\u2500 Dockerfile         # Container build instructions\n</code></pre>"},{"location":"deploy/gke/#_3","title":"\u7a0b\u5f0f\u78bc\u6a94\u6848","text":"<p>\u8acb\u5728 <code>your-project-directory/</code> \u7684\u6839\u76ee\u9304\u4e0b\u5efa\u7acb\u4ee5\u4e0b\u6a94\u6848\uff08<code>main.py</code>\u3001<code>requirements.txt</code>\u3001<code>Dockerfile</code>\u3001<code>capital_agent/agent.py</code>\u3001<code>capital_agent/__init__.py</code>\uff09\u3002</p> <ol> <li> <p>\u9019\u662f\u4f4d\u65bc <code>capital_agent</code> \u8cc7\u6599\u593e\u5167\u7684 Capital Agent \u7bc4\u4f8b</p> capital_agent/agent.py<pre><code>from google.adk.agents import LlmAgent \n\n# Define a tool function\ndef get_capital_city(country: str) -&gt; str:\n  \"\"\"Retrieves the capital city for a given country.\"\"\"\n  # Replace with actual logic (e.g., API call, database lookup)\n  capitals = {\"france\": \"Paris\", \"japan\": \"Tokyo\", \"canada\": \"Ottawa\"}\n  return capitals.get(country.lower(), f\"Sorry, I don't know the capital of {country}.\")\n\n# Add the tool to the agent\ncapital_agent = LlmAgent(\n    model=\"gemini-2.0-flash\",\n    name=\"capital_agent\", #name of your agent\n    description=\"Answers user questions about the capital city of a given country.\",\n    instruction=\"\"\"You are an agent that provides the capital city of a country... (previous instruction text)\"\"\",\n    tools=[get_capital_city] # Provide the function directly\n)\n\n# ADK will discover the root_agent instance\nroot_agent = capital_agent\n</code></pre> <p>\u5c07\u4f60\u7684\u8cc7\u6599\u593e\u6a19\u8a18\u70ba Python \u5957\u4ef6</p> capital_agent/__init__.py<pre><code>from . import agent\n</code></pre> </li> </ol> <p>\u6b64\u6a94\u6848\u4f7f\u7528 ADK \u7684 <code>get_fast_api_app()</code> \u4f86\u8a2d\u5b9a FastAPI \u61c9\u7528\u7a0b\u5f0f\uff1a</p> <pre><code>```python title=\"main.py\"\nimport os\n\nimport uvicorn\nfrom fastapi import FastAPI\nfrom google.adk.cli.fast_api import get_fast_api_app\n\n# Get the directory where main.py is located\nAGENT_DIR = os.path.dirname(os.path.abspath(__file__))\n# Example session service URI (e.g., SQLite)\nSESSION_SERVICE_URI = \"sqlite:///./sessions.db\"\n# Example allowed origins for CORS\nALLOWED_ORIGINS = [\"http://localhost\", \"http://localhost:8080\", \"*\"]\n# Set web=True if you intend to serve a web interface, False otherwise\nSERVE_WEB_INTERFACE = True\n\n# Call the function to get the FastAPI app instance\n# Ensure the agent directory name ('capital_agent') matches your agent folder\napp: FastAPI = get_fast_api_app(\n    agents_dir=AGENT_DIR,\n    session_service_uri=SESSION_SERVICE_URI,\n    allow_origins=ALLOWED_ORIGINS,\n    web=SERVE_WEB_INTERFACE,\n)\n\n# You can add more FastAPI routes or configurations below if needed\n# Example:\n# @app.get(\"/hello\")\n# async def read_root():\n#     return {\"Hello\": \"World\"}\n\nif __name__ == \"__main__\":\n    # Use the PORT environment variable provided by Cloud Run, defaulting to 8080\n    uvicorn.run(app, host=\"0.0.0.0\", port=int(os.environ.get(\"PORT\", 8080)))\n```\n\n*\u6ce8\u610f\uff1a\u6211\u5011\u5c07 `agent_dir` \u6307\u5b9a\u70ba `main.py` \u6240\u5728\u7684\u76ee\u9304\uff0c\u4e26\u4f7f\u7528 `os.environ.get(\"PORT\", 8080)` \u4ee5\u652f\u63f4 Cloud Run \u76f8\u5bb9\u6027\u3002*\n</code></pre> <ol> <li> <p>\u5217\u51fa\u6240\u9700\u7684 Python \u5957\u4ef6\uff1a</p> requirements.txt<pre><code>google-adk\n# Add any other dependencies your agent needs\n</code></pre> </li> <li> <p>\u5b9a\u7fa9\u5bb9\u5668\u6620\u50cf\u6a94\uff1a</p> Dockerfile<pre><code>FROM python:3.13-slim\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nRUN adduser --disabled-password --gecos \"\" myuser &amp;&amp; \\\n    chown -R myuser:myuser /app\n\nCOPY . .\n\nUSER myuser\n\nENV PATH=\"/home/myuser/.local/bin:$PATH\"\n\nCMD [\"sh\", \"-c\", \"uvicorn main:app --host 0.0.0.0 --port $PORT\"]\n</code></pre> </li> </ol>"},{"location":"deploy/gke/#_4","title":"\u5efa\u7acb\u5bb9\u5668\u6620\u50cf\u6a94","text":"<p>\u4f60\u9700\u8981\u5efa\u7acb\u4e00\u500b Google Artifact Registry \u5132\u5b58\u5eab\u4f86\u5132\u5b58\u4f60\u7684\u5bb9\u5668\u6620\u50cf\u6a94\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>gcloud</code> \u547d\u4ee4\u5217\u5de5\u5177\u4f86\u5b8c\u6210\u9019\u9805\u64cd\u4f5c\u3002</p> <pre><code>gcloud artifacts repositories create adk-repo \\\n    --repository-format=docker \\\n    --location=$GOOGLE_CLOUD_LOCATION \\\n    --description=\"ADK repository\"\n</code></pre> <p>\u4f7f\u7528 <code>gcloud</code> \u547d\u4ee4\u5217\u5de5\u5177\u4f86\u5efa\u7f6e\u5bb9\u5668\u6620\u50cf\u6a94\u3002\u6b64\u7bc4\u4f8b\u6703\u5efa\u7f6e\u6620\u50cf\u6a94\u4e26\u5c07\u5176\u6a19\u8a18\u70ba <code>adk-repo/adk-agent:latest</code>\u3002</p> <pre><code>gcloud builds submit \\\n    --tag $GOOGLE_CLOUD_LOCATION-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/adk-repo/adk-agent:latest \\\n    --project=$GOOGLE_CLOUD_PROJECT \\\n    .\n</code></pre> <p>\u9a57\u8b49\u6620\u50cf\u6a94\u662f\u5426\u5df2\u5efa\u7f6e\u4e26\u63a8\u9001\u5230 Artifact Registry\uff1a</p> <pre><code>gcloud artifacts docker images list \\\n  $GOOGLE_CLOUD_LOCATION-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/adk-repo \\\n  --project=$GOOGLE_CLOUD_PROJECT\n</code></pre>"},{"location":"deploy/gke/#vertex-ai-kubernetes","title":"\u70ba Vertex AI \u8a2d\u5b9a Kubernetes \u670d\u52d9\u5e33\u6236","text":"<p>\u5982\u679c\u4f60\u7684 agent \u4f7f\u7528 Vertex AI\uff0c\u4f60\u9700\u8981\u5efa\u7acb\u4e00\u500b\u5177\u6709\u5fc5\u8981\u6b0a\u9650\u7684 Kubernetes \u670d\u52d9\u5e33\u6236\u3002\u4ee5\u4e0b\u7bc4\u4f8b\u6703\u5efa\u7acb\u4e00\u500b\u540d\u70ba <code>adk-agent-sa</code> \u7684\u670d\u52d9\u5e33\u6236\uff0c\u4e26\u5c07\u5176\u7d81\u5b9a\u5230 <code>Vertex AI User</code> \u89d2\u8272\u3002</p> <p>\u5982\u679c\u4f60\u662f\u4f7f\u7528 Google AI Studio \u4e26\u900f\u904e API KEY \u5b58\u53d6\u6a21\u578b\uff0c\u53ef\u4ee5\u7565\u904e\u6b64\u6b65\u9a5f\u3002</p> <pre><code>kubectl create serviceaccount adk-agent-sa\n</code></pre> <pre><code>gcloud projects add-iam-policy-binding projects/${GOOGLE_CLOUD_PROJECT} \\\n    --role=roles/aiplatform.user \\\n    --member=principal://iam.googleapis.com/projects/${GOOGLE_CLOUD_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GOOGLE_CLOUD_PROJECT}.svc.id.goog/subject/ns/default/sa/adk-agent-sa \\\n    --condition=None\n</code></pre>"},{"location":"deploy/gke/#kubernetes-manifest","title":"\u5efa\u7acb Kubernetes manifest \u6a94\u6848","text":"<p>\u8acb\u5728\u60a8\u7684\u5c08\u6848\u76ee\u9304\u4e2d\u5efa\u7acb\u4e00\u500b\u540d\u70ba <code>deployment.yaml</code> \u7684 Kubernetes \u90e8\u7f72 manifest \u6a94\u6848\u3002\u6b64\u6a94\u6848\u7528\u65bc\u5b9a\u7fa9\u5982\u4f55\u5728 GKE \u4e0a\u90e8\u7f72\u60a8\u7684\u61c9\u7528\u7a0b\u5f0f\u3002</p> deployment.yaml<pre><code>cat &lt;&lt;  EOF &gt; deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: adk-agent\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: adk-agent\n  template:\n    metadata:\n      labels:\n        app: adk-agent\n    spec:\n      serviceAccount: adk-agent-sa\n      containers:\n      - name: adk-agent\n        imagePullPolicy: Always\n        image: $GOOGLE_CLOUD_LOCATION-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/adk-repo/adk-agent:latest\n        resources:\n          limits:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n            ephemeral-storage: \"128Mi\"\n          requests:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n            ephemeral-storage: \"128Mi\"\n        ports:\n        - containerPort: 8080\n        env:\n          - name: PORT\n            value: \"8080\"\n          - name: GOOGLE_CLOUD_PROJECT\n            value: $GOOGLE_CLOUD_PROJECT\n          - name: GOOGLE_CLOUD_LOCATION\n            value: $GOOGLE_CLOUD_LOCATION\n          - name: GOOGLE_GENAI_USE_VERTEXAI\n            value: \"$GOOGLE_GENAI_USE_VERTEXAI\"\n          # If using AI Studio, set GOOGLE_GENAI_USE_VERTEXAI to false and set the following:\n          # - name: GOOGLE_API_KEY\n          #   value: $GOOGLE_API_KEY\n          # Add any other necessary environment variables your agent might need\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: adk-agent\nspec:       \n  type: LoadBalancer\n  ports:\n    - port: 80\n      targetPort: 8080\n  selector:\n    app: adk-agent\nEOF\n</code></pre>"},{"location":"deploy/gke/#_5","title":"\u90e8\u7f72\u61c9\u7528\u7a0b\u5f0f","text":"<p>\u4f7f\u7528 <code>kubectl</code> \u547d\u4ee4\u5217\u5de5\u5177\uff08Command Line Interface\uff09\u4f86\u90e8\u7f72\u61c9\u7528\u7a0b\u5f0f\u3002\u6b64\u6307\u4ee4\u6703\u5c07\u90e8\u7f72\u8207\u670d\u52d9\u7684 manifest \u6a94\u6848\u5957\u7528\u5230\u4f60\u7684 GKE \u53e2\u96c6\u3002</p> <pre><code>kubectl apply -f deployment.yaml\n</code></pre> <p>\u904e\u5e7e\u5206\u9418\u5f8c\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u4f86\u6aa2\u67e5\u90e8\u7f72\u7684\u72c0\u614b\uff1a</p> <pre><code>kubectl get pods -l=app=adk-agent\n</code></pre> <p>\u6b64\u6307\u4ee4\u6703\u5217\u51fa\u8207\u60a8\u7684\u90e8\u7f72\u76f8\u95dc\u806f\u7684 pod\u3002\u60a8\u61c9\u8a72\u6703\u770b\u5230\u4e00\u500b\u72c0\u614b\u70ba <code>Running</code> \u7684 pod\u3002</p> <p>\u7576 pod \u57f7\u884c\u4e2d\u5f8c\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u6aa2\u67e5 service \u7684\u72c0\u614b\uff1a</p> <pre><code>kubectl get service adk-agent\n</code></pre> <p>\u5982\u679c\u8f38\u51fa\u986f\u793a<code>External IP</code>\uff0c\u8868\u793a\u60a8\u7684\u670d\u52d9\u5df2\u53ef\u5f9e\u7db2\u969b\u7db2\u8def\u5b58\u53d6\u3002\u5916\u90e8 IP \u53ef\u80fd\u9700\u8981\u5e7e\u5206\u9418\u624d\u6703\u88ab\u6307\u6d3e\u3002</p> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u53d6\u5f97\u670d\u52d9\u7684\u5916\u90e8 IP \u4f4d\u5740\uff1a</p> <pre><code>kubectl get svc adk-agent -o=jsonpath='{.status.loadBalancer.ingress[0].ip}'\n</code></pre>"},{"location":"deploy/gke/#2-adk-deploy-gke","title":"\u9078\u9805 2\uff1a\u4f7f\u7528 <code>adk deploy gke</code> \u9032\u884c\u81ea\u52d5\u5316\u90e8\u7f72","text":"<p>Agent Development Kit (ADK) \u63d0\u4f9b\u4e86\u4e00\u500b\u547d\u4ee4\u5217\u4ecb\u9762 (Command Line Interface, CLI) \u6307\u4ee4\uff0c\u53ef\u7c21\u5316 GKE\uff08Google Kubernetes Engine\uff09\u90e8\u7f72\u6d41\u7a0b\u3002\u9019\u6a23\u53ef\u4ee5\u907f\u514d\u624b\u52d5\u5efa\u7f6e\u6620\u50cf\u6a94\u3001\u64b0\u5beb Kubernetes manifest\uff0c\u6216\u5c07\u6620\u50cf\u6a94\u63a8\u9001\u81f3 Artifact Registry\u3002</p>"},{"location":"deploy/gke/#_6","title":"\u5148\u6c7a\u689d\u4ef6","text":"<p>\u5728\u958b\u59cb\u4e4b\u524d\uff0c\u8acb\u78ba\u4fdd\u5df2\u5b8c\u6210\u4ee5\u4e0b\u8a2d\u5b9a\uff1a</p> <ol> <li> <p>\u5df2\u904b\u4f5c\u7684 GKE \u53e2\u96c6\uff1a \u4f60\u9700\u8981\u5728 Google Cloud \u4e0a\u6709\u4e00\u500b\u555f\u7528\u4e2d\u7684 Kubernetes \u53e2\u96c6\u3002</p> </li> <li> <p>\u5fc5\u8981\u7684\u547d\u4ee4\u5217\u5de5\u5177 (CLI)\uff1a </p> <ul> <li><code>gcloud</code> CLI\uff1a \u5fc5\u9808\u5b89\u88dd Google Cloud CLI\uff0c\u4e26\u5df2\u5b8c\u6210\u9a57\u8b49\u8207\u8a2d\u5b9a\uff0c\u6307\u5411\u76ee\u6a19\u5c08\u6848\u3002\u8acb\u57f7\u884c <code>gcloud auth login</code> \u8207 <code>gcloud config set project [YOUR_PROJECT_ID]</code>\u3002</li> <li>kubectl\uff1a \u5fc5\u9808\u5b89\u88dd Kubernetes CLI\uff0c\u4ee5\u4fbf\u5c07\u61c9\u7528\u7a0b\u5f0f\u90e8\u7f72\u5230\u4f60\u7684\u53e2\u96c6\u3002</li> </ul> </li> <li> <p>\u555f\u7528 Google Cloud API\uff1a \u8acb\u78ba\u8a8d\u4f60\u7684 Google Cloud \u5c08\u6848\u5df2\u555f\u7528\u4ee5\u4e0b API\uff1a</p> <ul> <li>Kubernetes Engine API (<code>container.googleapis.com</code>)</li> <li>Cloud Build API (<code>cloudbuild.googleapis.com</code>)</li> <li>Container Registry API (<code>containerregistry.googleapis.com</code>)</li> </ul> </li> <li> <p>\u5fc5\u8981\u7684 IAM \u6b0a\u9650\uff1a \u57f7\u884c\u6307\u4ee4\u7684\u4f7f\u7528\u8005\u6216 Compute Engine \u9810\u8a2d\u670d\u52d9\u5e33\u6236\uff0c\u81f3\u5c11\u9700\u8981\u4e0b\u5217\u89d2\u8272\uff1a</p> </li> <li> <p>Kubernetes Engine Developer (<code>roles/container.developer</code>)\uff1a\u7528\u65bc\u8207 GKE \u53e2\u96c6\u4e92\u52d5\u3002</p> </li> <li> <p>Storage Object Viewer (<code>roles/storage.objectViewer</code>)\uff1a\u5141\u8a31 Cloud Build \u5f9e Cloud Storage \u5132\u5b58\u6876\u4e0b\u8f09\u7531 gcloud builds submit \u4e0a\u50b3\u7684\u539f\u59cb\u78bc\u3002</p> </li> <li> <p>Artifact Registry Create on Push Writer (<code>roles/artifactregistry.createOnPushWriter</code>)\uff1a\u5141\u8a31 Cloud Build \u5c07\u5efa\u7f6e\u5b8c\u6210\u7684\u5bb9\u5668\u6620\u50cf\u6a94\u63a8\u9001\u81f3 Artifact Registry\u3002\u6b64\u89d2\u8272\u4e5f\u5141\u8a31\u5728\u9996\u6b21\u63a8\u9001\u6642\uff0c\u65bc Artifact Registry \u4e2d\u5373\u6642\u5efa\u7acb\u7279\u6b8a\u7684 gcr.io \u5132\u5b58\u5eab\uff08repository\uff09\u3002</p> </li> <li> <p>Logs Writer  (<code>roles/logging.logWriter</code>)\uff1a\u5141\u8a31 Cloud Build \u5c07\u5efa\u7f6e\u65e5\u8a8c\u5beb\u5165 Cloud Logging\u3002</p> </li> </ol>"},{"location":"deploy/gke/#deploy-gke","title":"<code>deploy gke</code> \u6307\u4ee4","text":"<p>\u6b64\u6307\u4ee4\u6703\u63a5\u6536\u4f60\u7684 agent \u8def\u5f91\u8207\u76ee\u6a19 GKE \u53e2\u96c6\u76f8\u95dc\u53c3\u6578\u3002</p>"},{"location":"deploy/gke/#_7","title":"\u8a9e\u6cd5","text":"<pre><code>adk deploy gke [OPTIONS] AGENT_PATH\n</code></pre>"},{"location":"deploy/gke/#_8","title":"\u53c3\u6578\u8207\u9078\u9805","text":"\u53c3\u6578 \u8aaa\u660e \u662f\u5426\u5fc5\u586b AGENT_PATH \u672c\u6a5f agent \u6839\u76ee\u9304\u7684\u6a94\u6848\u8def\u5f91\u3002 \u662f --project GKE \u53e2\u96c6\u6240\u5728\u7684 Google Cloud \u5c08\u6848 ID\u3002 \u662f --cluster_name GKE \u53e2\u96c6\u540d\u7a31\u3002 \u662f --region \u53e2\u96c6\u6240\u5728\u7684 Google Cloud \u5340\u57df\uff08\u4f8b\u5982\uff1aus-central1\uff09\u3002 \u662f --with_ui \u540c\u6642\u90e8\u7f72 agent \u7684\u5f8c\u7aef API \u53ca\u524d\u7aef\u7db2\u9801 UI\u3002 \u5426 --log_level \u8a2d\u5b9a\u90e8\u7f72\u904e\u7a0b\u7684\u65e5\u8a8c\u7b49\u7d1a\u3002\u9078\u9805\uff1adebug\u3001info\u3001warning\u3001error\u3002 \u5426"},{"location":"deploy/gke/#_9","title":"\u904b\u4f5c\u65b9\u5f0f","text":"<p>\u7576\u4f60\u57f7\u884c <code>adk deploy gke</code> \u6307\u4ee4\u6642\uff0cAgent Development Kit (ADK) \u6703\u81ea\u52d5\u57f7\u884c\u4ee5\u4e0b\u6b65\u9a5f\uff1a</p> <ul> <li> <p>\u5bb9\u5668\u5316\uff1a\u5f9e\u4f60\u7684 agent \u539f\u59cb\u78bc\u5efa\u69cb Docker \u5bb9\u5668\u6620\u50cf\u6a94\u3002</p> </li> <li> <p>\u6620\u50cf\u63a8\u9001\uff1a\u6a19\u8a18\u8a72\u5bb9\u5668\u6620\u50cf\u6a94\u4e26\u63a8\u9001\u5230\u4f60\u7684\u5c08\u6848 Artifact Registry\u3002</p> </li> <li> <p>Manifest \u7522\u751f\uff1a\u52d5\u614b\u7522\u751f\u6240\u9700\u7684 Kubernetes manifest \u6a94\u6848\uff08<code>Deployment</code> \u8207 <code>Service</code>\uff09\u3002</p> </li> <li> <p>\u53e2\u96c6\u90e8\u7f72\uff1a\u5c07\u9019\u4e9b manifest \u5957\u7528\u5230\u4f60\u6307\u5b9a\u7684 GKE \u53e2\u96c6\uff0c\u89f8\u767c\u4ee5\u4e0b\u52d5\u4f5c\uff1a</p> </li> </ul> <p><code>Deployment</code> \u6307\u793a GKE \u5f9e Artifact Registry \u62c9\u53d6\u5bb9\u5668\u6620\u50cf\u6a94\uff0c\u4e26\u5728\u4e00\u500b\u6216\u591a\u500b Pod \u4e2d\u57f7\u884c\u3002</p> <p><code>Service</code> \u70ba\u4f60\u7684 agent \u5efa\u7acb\u4e00\u500b\u7a69\u5b9a\u7684\u7db2\u8def\u7aef\u9ede\u3002\u9810\u8a2d\u70ba LoadBalancer \u670d\u52d9\uff0c\u6703\u914d\u7f6e\u4e00\u500b\u516c\u958b IP \u4f4d\u5740\uff0c\u8b93\u4f60\u7684 agent \u53ef\u5c0d\u5916\u7db2\u8def\u5b58\u53d6\u3002</p>"},{"location":"deploy/gke/#_10","title":"\u4f7f\u7528\u7bc4\u4f8b","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u500b\u5c07\u4f4d\u65bc <code>~/agents/multi_tool_agent/</code> \u7684 agent \u90e8\u7f72\u5230\u540d\u70ba test \u7684 GKE \u53e2\u96c6\u7684\u5be6\u969b\u7bc4\u4f8b\u3002</p> <pre><code>adk deploy gke \\\n    --project myproject \\\n    --cluster_name test \\\n    --region us-central1 \\\n    --with_ui \\\n    --log_level info \\\n    ~/agents/multi_tool_agent/\n</code></pre>"},{"location":"deploy/gke/#_11","title":"\u9a57\u8b49\u60a8\u7684\u90e8\u7f72","text":"<p>\u5982\u679c\u60a8\u4f7f\u7528\u4e86<code>adk deploy gke</code>\uff0c\u8acb\u4f7f\u7528<code>kubectl</code>\u4f86\u9a57\u8b49\u90e8\u7f72\uff1a</p> <ol> <li>\u6aa2\u67e5 Pod\uff1a\u78ba\u4fdd\u60a8\u7684 agent \u7684 Pod \u8655\u65bc Running \u72c0\u614b\u3002</li> </ol> <p><pre><code>kubectl get pods\n</code></pre> \u4f60\u61c9\u8a72\u6703\u5728\u9810\u8a2d\u547d\u540d\u7a7a\u9593\u4e2d\u770b\u5230\u985e\u4f3c <code>adk-default-service-name-xxxx-xxxx ... 1/1 Running</code> \u7684\u8f38\u51fa\u3002</p> <ol> <li>\u5c0b\u627e External IP\uff1a\u53d6\u5f97\u4f60\u7684 agent \u670d\u52d9\u7684\u516c\u958b IP \u4f4d\u5740\u3002</li> </ol> <pre><code>kubectl get service\nNAME                       TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)        AGE\nadk-default-service-name   LoadBalancer   34.118.228.70   34.63.153.253   80:32581/TCP   5d20h\n</code></pre> <p>\u6211\u5011\u53ef\u4ee5\u524d\u5f80 external IP\uff0c\u4e26\u900f\u904e UI \u8207 agent \u4e92\u52d5 </p>"},{"location":"deploy/gke/#agent_1","title":"\u6e2c\u8a66\u4f60\u7684 agent","text":"<p>\u7576\u4f60\u7684 agent \u90e8\u7f72\u5230 GKE \u5f8c\uff0c\u4f60\u53ef\u4ee5\u900f\u904e\u5df2\u90e8\u7f72\u7684 UI\uff08\u5982\u679c\u5df2\u555f\u7528\uff09\u6216\u4f7f\u7528\u50cf\u662f <code>curl</code> \u9019\u985e\u5de5\u5177\uff0c\u76f4\u63a5\u8207\u5176 API \u7aef\u9ede\u4e92\u52d5\u3002\u4f60\u5c07\u9700\u8981\u5728\u90e8\u7f72\u5f8c\u63d0\u4f9b\u7684\u670d\u52d9 URL\u3002</p> UI \u6e2c\u8a66API \u6e2c\u8a66\uff08curl\uff09"},{"location":"deploy/gke/#ui-testing","title":"UI Testing","text":"<p>If you deployed your agent with the UI enabled:</p> <p>You can test your agent by simply navigating to the kubernetes service URL in your web browser.</p> <p>The ADK dev UI allows you to interact with your agent, manage sessions, and view execution details directly in the browser.</p> <p>To verify your agent is working as intended, you can:</p> <ol> <li>Select your agent from the dropdown menu.</li> <li>Type a message and verify that you receive an expected response from your agent.</li> </ol> <p>If you experience any unexpected behavior, check the pod logs for your agent using:</p> <pre><code>kubectl logs -l app=adk-agent\n</code></pre>"},{"location":"deploy/gke/#api-testing-curl","title":"API Testing (curl)","text":"<p>You can interact with the agent's API endpoints using tools like <code>curl</code>. This is useful for programmatic interaction or if you deployed without the UI.</p>"},{"location":"deploy/gke/#set-the-application-url","title":"Set the application URL","text":"<p>Replace the example URL with the actual URL of your deployed Cloud Run service.</p> <pre><code>export APP_URL=$(kubectl get service adk-agent -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\n</code></pre>"},{"location":"deploy/gke/#list-available-apps","title":"List available apps","text":"<p>Verify the deployed application name.</p> <pre><code>curl -X GET $APP_URL/list-apps\n</code></pre> <p>(Adjust the <code>app_name</code> in the following commands based on this output if needed. The default is often the agent directory name, e.g., <code>capital_agent</code>).</p>"},{"location":"deploy/gke/#create-or-update-a-session","title":"Create or Update a Session","text":"<p>Initialize or update the state for a specific user and session. Replace <code>capital_agent</code> with your actual app name if different. The values <code>user_123</code> and <code>session_abc</code> are example identifiers; you can replace them with your desired user and session IDs.</p> <pre><code>curl -X POST \\\n    $APP_URL/apps/capital_agent/users/user_123/sessions/session_abc \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"state\": {\"preferred_language\": \"English\", \"visit_count\": 5}}'\n</code></pre>"},{"location":"deploy/gke/#run-the-agent","title":"Run the Agent","text":"<p>Send a prompt to your agent. Replace <code>capital_agent</code> with your app name and adjust the user/session IDs and prompt as needed.</p> <pre><code>curl -X POST $APP_URL/run_sse \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"app_name\": \"capital_agent\",\n    \"user_id\": \"user_123\",\n    \"session_id\": \"session_abc\",\n    \"new_message\": {\n        \"role\": \"user\",\n        \"parts\": [{\n        \"text\": \"What is the capital of Canada?\"\n        }]\n    },\n    \"streaming\": false\n    }'\n</code></pre> <ul> <li>Set <code>\"streaming\": true</code> if you want to receive Server-Sent Events (SSE).</li> <li>The response will contain the agent's execution events, including the final answer.</li> </ul>"},{"location":"deploy/gke/#_12","title":"\u7591\u96e3\u6392\u89e3","text":"<p>\u4ee5\u4e0b\u662f\u60a8\u5728\u5c07 agent \u90e8\u7f72\u5230 GKE \u6642\uff0c\u53ef\u80fd\u6703\u9047\u5230\u7684\u4e00\u4e9b\u5e38\u898b\u554f\u984c\uff1a</p>"},{"location":"deploy/gke/#gemini-20-flash-403-permission-denied","title":"<code>Gemini 2.0 Flash</code> \u51fa\u73fe 403 Permission Denied","text":"<p>\u9019\u901a\u5e38\u8868\u793a Kubernetes \u670d\u52d9\u5e33\u6236\u6c92\u6709\u5b58\u53d6 Vertex AI API \u6240\u9700\u7684\u6b0a\u9650\u3002\u8acb\u78ba\u8a8d\u60a8\u5df2\u4f9d\u7167 Configure Kubernetes Service Account for Vertex AI \u7ae0\u7bc0\u4e2d\u7684\u8aaa\u660e\uff0c\u5efa\u7acb\u670d\u52d9\u5e33\u6236\u4e26\u5c07\u5176\u7d81\u5b9a\u5230 <code>Vertex AI User</code> \u89d2\u8272\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f AI Studio\uff0c\u8acb\u78ba\u4fdd\u60a8\u5df2\u5728\u90e8\u7f72 manifest \u4e2d\u8a2d\u5b9a <code>GOOGLE_API_KEY</code> \u74b0\u5883\u8b8a\u6578\uff0c\u4e14\u5176\u5167\u5bb9\u6709\u6548\u3002</p>"},{"location":"deploy/gke/#404-not-found","title":"404 \u6216 Not Found \u56de\u61c9","text":"<p>\u9019\u901a\u5e38\u8868\u793a\u60a8\u7684\u8acb\u6c42\u6709\u932f\u8aa4\u3002\u8acb\u6aa2\u67e5\u61c9\u7528\u7a0b\u5f0f\u65e5\u8a8c\u4ee5\u8a3a\u65b7\u554f\u984c\u3002 </p> <pre><code>export POD_NAME=$(kubectl get pod -l app=adk-agent -o jsonpath='{.items[0].metadata.name}')\nkubectl logs $POD_NAME\n</code></pre>"},{"location":"deploy/gke/#_13","title":"\u5617\u8a66\u5beb\u5165\u552f\u8b80\u8cc7\u6599\u5eab","text":"<p>\u4f60\u53ef\u80fd\u6703\u767c\u73fe\u5728\u7db2\u9801 UI \u4e2d\u6c92\u6709\u5efa\u7acb session id\uff0c\u4e14 agent \u7121\u6cd5\u56de\u61c9\u4efb\u4f55\u8a0a\u606f\u3002\u9019\u901a\u5e38\u662f\u56e0\u70ba SQLite \u8cc7\u6599\u5eab\u8655\u65bc\u552f\u8b80\u72c0\u614b\u6240\u5c0e\u81f4\u3002\u7576\u4f60\u5728\u672c\u6a5f\u57f7\u884c agent\uff0c\u7136\u5f8c\u5efa\u7acb\u5bb9\u5668\u6620\u50cf\u6a94\uff08container image\uff09\u6642\uff0cSQLite \u8cc7\u6599\u5eab\u6703\u88ab\u8907\u88fd\u5230\u5bb9\u5668\u5167\uff0c\u9019\u6642\u8cc7\u6599\u5eab\u5728\u5bb9\u5668\u4e2d\u5c31\u6703\u8b8a\u6210\u552f\u8b80\u3002</p> <pre><code>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) attempt to write a readonly database\n[SQL: UPDATE app_states SET state=?, update_time=CURRENT_TIMESTAMP WHERE app_states.app_name = ?]\n</code></pre> <p>\u8981\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u60a8\u53ef\u4ee5\u63a1\u53d6\u4ee5\u4e0b\u5176\u4e2d\u4e00\u7a2e\u65b9\u5f0f\uff1a</p> <p>\u5728\u5efa\u7acb\u5bb9\u5668\u6620\u50cf\u6a94\u4e4b\u524d\uff0c\u5f9e\u60a8\u7684\u672c\u6a5f\u522a\u9664 SQLite \u8cc7\u6599\u5eab\u6a94\u6848\u3002\u9019\u6a23\u5728\u5bb9\u5668\u555f\u52d5\u6642\u6703\u5efa\u7acb\u4e00\u500b\u65b0\u7684 SQLite \u8cc7\u6599\u5eab\u3002</p> <pre><code>rm -f sessions.db\n</code></pre> <p>\u6216\u8005\uff08\u5efa\u8b70\u505a\u6cd5\uff09\uff0c\u4f60\u53ef\u4ee5\u5728\u5c08\u6848\u76ee\u9304\u4e2d\u52a0\u5165\u4e00\u500b <code>.dockerignore</code> \u6a94\u6848\uff0c\u4ee5\u6392\u9664\u5c07 SQLite \u8cc7\u6599\u5eab\u8907\u88fd\u5230\u5bb9\u5668\u6620\u50cf\u6a94\u4e2d\u3002</p> .dockerignore<pre><code>sessions.db\n</code></pre> <p>\u5efa\u7f6e\u5bb9\u5668\u6620\u50cf\u6a94\u4e26\u518d\u6b21\u90e8\u7f72\u61c9\u7528\u7a0b\u5f0f\u3002</p>"},{"location":"deploy/gke/#error-gcloudbuildssubmit","title":"\u6c92\u6709\u8db3\u5920\u6b0a\u9650\u4e32\u6d41\u65e5\u8a8c <code>ERROR: (gcloud.builds.submit)</code>","text":"<p>\u7576\u60a8\u6c92\u6709\u8db3\u5920\u7684\u6b0a\u9650\u4f86\u4e32\u6d41\u5efa\u7f6e\u65e5\u8a8c\uff0c\u6216\u60a8\u7684 VPC-SC \u5b89\u5168\u6027\u653f\u7b56\u9650\u5236\u5b58\u53d6\u9810\u8a2d\u65e5\u8a8c\u5132\u5b58\u6876\u6642\uff0c\u53ef\u80fd\u6703\u767c\u751f\u6b64\u932f\u8aa4\u3002</p> <p>\u82e5\u8981\u6aa2\u67e5\u5efa\u7f6e\u9032\u5ea6\uff0c\u8acb\u4f9d\u7167\u932f\u8aa4\u8a0a\u606f\u4e2d\u63d0\u4f9b\u7684\u9023\u7d50\uff0c\u6216\u524d\u5f80 Google Cloud Console \u7684 Cloud Build \u9801\u9762\u3002</p> <p>\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 Build the container image \u7ae0\u7bc0\u4e0b\u7684\u6307\u4ee4\uff0c\u9a57\u8b49\u6620\u50cf\u6a94\u662f\u5426\u5df2\u6210\u529f\u5efa\u7f6e\u4e26\u63a8\u9001\u5230 Artifact Registry\u3002</p>"},{"location":"deploy/gke/#gemini-20-flash-live-api","title":"Gemini-2.0-Flash \u4e0d\u652f\u63f4 Live API","text":"<p>\u7576\u60a8\u5728\u5df2\u90e8\u7f72\u7684 agent \u4e0a\u4f7f\u7528 Agent Development Kit (ADK) Dev UI \u6642\uff0c\u6587\u5b57\u804a\u5929\u529f\u80fd\u53ef\u6b63\u5e38\u904b\u4f5c\uff0c\u4f46\u8a9e\u97f3\u529f\u80fd\uff08\u4f8b\u5982\u9ede\u64ca\u9ea5\u514b\u98a8\u6309\u9215\uff09\u6703\u5931\u6557\u3002\u60a8\u53ef\u80fd\u6703\u5728 pod \u65e5\u8a8c\u4e2d\u770b\u5230 <code>websockets.exceptions.ConnectionClosedError</code>\uff0c\u986f\u793a\u60a8\u7684\u6a21\u578b\u300cnot supported in the live api\u300d\u3002</p> <p>\u6b64\u932f\u8aa4\u662f\u56e0\u70ba agent \u914d\u7f6e\u4e86\u67d0\u500b\u6a21\u578b\uff08\u4f8b\u5982\u7bc4\u4f8b\u4e2d\u7684 <code>gemini-2.0-flash</code>\uff09\uff0c\u800c\u8a72\u6a21\u578b\u4e0d\u652f\u63f4 Gemini Live API\u3002Live API \u662f\u5373\u6642\u96d9\u5411\u4e32\u6d41\u97f3\u8a0a\u8207\u8996\u8a0a\u6240\u5fc5\u9808\u7684\u3002</p>"},{"location":"deploy/gke/#_14","title":"\u6e05\u7406","text":"<p>\u82e5\u8981\u522a\u9664 GKE \u53e2\u96c6\u53ca\u6240\u6709\u76f8\u95dc\u8cc7\u6e90\uff0c\u8acb\u57f7\u884c\uff1a</p> <pre><code>gcloud container clusters delete adk-cluster \\\n    --location=$GOOGLE_CLOUD_LOCATION \\\n    --project=$GOOGLE_CLOUD_PROJECT\n</code></pre> <p>\u8981\u522a\u9664 Artifact Registry \u5132\u5b58\u5eab\uff0c\u8acb\u57f7\u884c\uff1a</p> <pre><code>gcloud artifacts repositories delete adk-repo \\\n    --location=$GOOGLE_CLOUD_LOCATION \\\n    --project=$GOOGLE_CLOUD_PROJECT\n</code></pre> <p>\u4f60\u4e5f\u53ef\u4ee5\u5728\u4e0d\u518d\u9700\u8981\u6642\u522a\u9664\u8a72\u5c08\u6848\u3002\u9019\u5c07\u6703\u522a\u9664\u8207\u8a72\u5c08\u6848\u76f8\u95dc\u7684\u6240\u6709\u8cc7\u6e90\uff0c\u5305\u62ec GKE \u53e2\u96c6\u3001Artifact Registry \u5132\u5b58\u5eab\uff0c\u4ee5\u53ca\u4f60\u6240\u5efa\u7acb\u7684\u5176\u4ed6\u8cc7\u6e90\u3002</p> <pre><code>gcloud projects delete $GOOGLE_CLOUD_PROJECT\n</code></pre>"},{"location":"deploy/index.en/","title":"Deploying Your Agent","text":"<p>Once you've built and tested your agent using ADK, the next step is to deploy it so it can be accessed, queried, and used in production or integrated with other applications. Deployment moves your agent from your local development machine to a scalable and reliable environment.</p> <p></p>"},{"location":"deploy/index.en/#deployment-options","title":"Deployment Options","text":"<p>Your ADK agent can be deployed to a range of different environments based on your needs for production readiness or custom flexibility:</p>"},{"location":"deploy/index.en/#agent-engine-in-vertex-ai","title":"Agent Engine in Vertex AI","text":"<p>Agent Engine is a fully managed auto-scaling service on Google Cloud specifically designed for deploying, managing, and scaling AI agents built with frameworks such as ADK.</p> <p>Learn more about deploying your agent to Vertex AI Agent Engine.</p>"},{"location":"deploy/index.en/#cloud-run","title":"Cloud Run","text":"<p>Cloud Run is a managed auto-scaling compute platform on Google Cloud that enables you to run your agent as a container-based application.</p> <p>Learn more about deploying your agent to Cloud Run.</p>"},{"location":"deploy/index.en/#google-kubernetes-engine-gke","title":"Google Kubernetes Engine (GKE)","text":"<p>Google Kubernetes Engine (GKE) is a managed Kubernetes service of Google Cloud that allows you to run your agent in a containerized environment. GKE is a good option if you need more control over the deployment as well as for running Open Models.</p> <p>Learn more about deploying your agent to GKE.</p>"},{"location":"deploy/index.en/#other-container-friendly-infrastructure","title":"Other Container-friendly Infrastructure","text":"<p>You can manually package your Agent into a container image and then run it in any environment that supports container images.  For example you can run it locally in Docker or Podman. This is a good option if you prefer to run offline or disconnected, or otherwise in a system that has no connection to Google Cloud.</p> <p>Follow the instructions for deploying your agent to Cloud Run, specifically the case where you it describes how to use a custom Dockerfile.</p>"},{"location":"evaluate/","title":"\u70ba\u4ec0\u9ebc\u8981\u8a55\u4f30 agent","text":"<p>\u5728\u50b3\u7d71\u8edf\u9ad4\u958b\u767c\u4e2d\uff0c\u55ae\u5143\u6e2c\u8a66\uff08unit tests\uff09\u8207\u6574\u5408\u6e2c\u8a66\uff08integration tests\uff09\u80fd\u5920\u78ba\u4fdd\u7a0b\u5f0f\u78bc\u5982\u9810\u671f\u904b\u4f5c\uff0c\u4e26\u5728\u8b8a\u66f4\u904e\u7a0b\u4e2d\u7dad\u6301\u7a69\u5b9a\u3002\u9019\u4e9b\u6e2c\u8a66\u63d0\u4f9b\u660e\u78ba\u7684\u300c\u901a\u904e\uff0f\u5931\u6557\u300d\u8a0a\u865f\uff0c\u70ba\u5f8c\u7e8c\u958b\u767c\u63d0\u4f9b\u6307\u5f15\u3002\u7136\u800c\uff0c\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) agent \u5e36\u4f86\u4e86\u8b8a\u7570\u6027\uff0c\u4f7f\u5f97\u50b3\u7d71\u6e2c\u8a66\u65b9\u6cd5\u8b8a\u5f97\u4e0d\u8db3\u3002</p> <p>\u7531\u65bc\u6a21\u578b\u672c\u8cea\u4e0a\u5177\u6709\u6a5f\u7387\u6027\uff0c\u6c7a\u5b9a\u6027\u7684\u300c\u901a\u904e\uff0f\u5931\u6557\u300d\u65b7\u8a00\u5f80\u5f80\u4e0d\u9069\u7528\u65bc\u8a55\u4f30 agent \u7684\u8868\u73fe\u3002\u56e0\u6b64\uff0c\u6211\u5011\u9700\u8981\u5c0d\u6700\u7d42\u8f38\u51fa\u4ee5\u53ca agent \u7684\u8ecc\u8de1\uff08trajectory\uff09\u2014\u2014\u4e5f\u5c31\u662f\u9054\u6210\u89e3\u6c7a\u65b9\u6848\u904e\u7a0b\u4e2d\u7684\u4e00\u9023\u4e32\u6b65\u9a5f\u2014\u2014\u9032\u884c\u8cea\u6027\u8a55\u4f30\u3002\u9019\u5305\u62ec\u8a55\u4f30 agent \u7684\u6c7a\u7b56\u54c1\u8cea\u3001\u63a8\u7406\u904e\u7a0b\u4ee5\u53ca\u6700\u7d42\u7d50\u679c\u3002</p> <p>\u9019\u770b\u4f3c\u9700\u8981\u984d\u5916\u6295\u5165\u5927\u91cf\u5de5\u4f5c\uff0c\u4f46\u81ea\u52d5\u5316\u8a55\u4f30\u7684\u6295\u8cc7\u6703\u5f88\u5feb\u5e36\u4f86\u56de\u5831\u3002\u5982\u679c\u4f60\u6253\u7b97\u5c07\u5c08\u6848\u63a8\u9032\u5230\u539f\u578b\u968e\u6bb5\u4e4b\u5916\uff0c\u9019\u662f\u4e00\u9805\u9ad8\u5ea6\u5efa\u8b70\u63a1\u7528\u7684\u6700\u4f73\u5be6\u8e10\u3002</p> <p></p>"},{"location":"evaluate/#agent_1","title":"\u6e96\u5099 agent \u8a55\u4f30","text":"<p>\u5728\u81ea\u52d5\u5316 agent \u8a55\u4f30\u4e4b\u524d\uff0c\u8acb\u5148\u660e\u78ba\u5b9a\u7fa9\u76ee\u6a19\u8207\u6210\u529f\u6a19\u6e96\uff1a</p> <ul> <li>\u5b9a\u7fa9\u6210\u529f\uff1a \u4ec0\u9ebc\u60c5\u6cc1\u4e0b\u4f60\u7684 agent \u88ab\u8996\u70ba\u6210\u529f\uff1f  </li> <li>\u8b58\u5225\u95dc\u9375\u4efb\u52d9\uff1a \u4f60\u7684 agent \u5fc5\u9808\u5b8c\u6210\u54ea\u4e9b\u6838\u5fc3\u4efb\u52d9\uff1f  </li> <li>\u9078\u64c7\u76f8\u95dc\u6307\u6a19\uff1a \u4f60\u6703\u8ffd\u8e64\u54ea\u4e9b\u6307\u6a19\u4f86\u8861\u91cf\u6548\u80fd\uff1f</li> </ul> <p>\u9019\u4e9b\u8003\u91cf\u5c07\u5354\u52a9\u4f60\u8a2d\u8a08\u8a55\u4f30\u60c5\u5883\uff0c\u4e26\u6709\u6548\u76e3\u63a7 agent \u5728\u771f\u5be6\u74b0\u5883\u4e2d\u7684\u884c\u70ba\u3002</p>"},{"location":"evaluate/#_1","title":"\u8a55\u4f30\u4ec0\u9ebc\uff1f","text":"<p>\u8981\u8b93 proof-of-concept\uff08\u6982\u5ff5\u9a57\u8b49\uff09\u8207\u53ef\u6b63\u5f0f\u90e8\u7f72\u7684 AI agent \u4e4b\u9593\u9806\u5229\u929c\u63a5\uff0c\u5fc5\u9808\u5efa\u7acb\u4e00\u5957\u5065\u5168\u4e14\u81ea\u52d5\u5316\u7684\u8a55\u4f30\u6846\u67b6\u3002\u8207\u50c5\u95dc\u6ce8\u6700\u7d42\u8f38\u51fa\u7684\u751f\u6210\u5f0f\u6a21\u578b\u8a55\u4f30\u4e0d\u540c\uff0cagent \u8a55\u4f30\u9700\u8981\u66f4\u6df1\u5165\u7406\u89e3\u6c7a\u7b56\u904e\u7a0b\u3002agent \u8a55\u4f30\u53ef\u5206\u70ba\u5169\u500b\u90e8\u5206\uff1a</p> <ol> <li>\u8a55\u4f30\u8ecc\u8de1\u8207\u5de5\u5177\u4f7f\u7528\uff1a \u5206\u6790 agent \u70ba\u9054\u6210\u89e3\u6c7a\u65b9\u6848\u6240\u63a1\u53d6\u7684\u6b65\u9a5f\uff0c\u5305\u62ec\u5de5\u5177\u9078\u64c7\u3001\u7b56\u7565\u53ca\u5176\u65b9\u6cd5\u7684\u6548\u7387\u3002  </li> <li>\u8a55\u4f30\u6700\u7d42\u56de\u61c9\uff1a \u8a55\u4f30 agent \u6700\u7d42\u8f38\u51fa\u7684\u54c1\u8cea\u3001\u76f8\u95dc\u6027\u8207\u6b63\u78ba\u6027\u3002</li> </ol> <p>\u8ecc\u8de1\uff08trajectory\uff09\u5c31\u662f agent \u5728\u56de\u61c9\u4f7f\u7528\u8005\u524d\u6240\u63a1\u53d6\u7684\u6b65\u9a5f\u6e05\u55ae\u3002\u6211\u5011\u53ef\u4ee5\u5c07\u5176\u8207\u9810\u671f agent \u61c9\u63a1\u53d6\u7684\u6b65\u9a5f\u6e05\u55ae\u9032\u884c\u6bd4\u8f03\u3002</p>"},{"location":"evaluate/#_2","title":"\u8a55\u4f30\u8ecc\u8de1\u8207\u5de5\u5177\u4f7f\u7528","text":"<p>\u5728\u56de\u61c9\u4f7f\u7528\u8005\u4e4b\u524d\uff0cagent \u901a\u5e38\u6703\u57f7\u884c\u4e00\u7cfb\u5217\u52d5\u4f5c\uff0c\u6211\u5011\u7a31\u4e4b\u70ba\u300c\u8ecc\u8de1\u300d\uff08trajectory\uff09\u3002\u4f8b\u5982\uff0c\u5b83\u53ef\u80fd\u6703\u5c07\u4f7f\u7528\u8005\u8f38\u5165\u8207 session history \u6bd4\u8f03\u4ee5\u91d0\u6e05\u8853\u8a9e\uff0c\u6216\u67e5\u95b1\u653f\u7b56\u6587\u4ef6\u3001\u641c\u5c0b\u77e5\u8b58\u5eab\uff0c\u751a\u81f3\u547c\u53eb API \u4f86\u5132\u5b58\u5de5\u55ae\u3002\u6211\u5011\u5c07\u9019\u4e00\u9023\u4e32\u52d5\u4f5c\u7a31\u70ba\u300c\u8ecc\u8de1\u300d\u3002\u8a55\u4f30 agent \u7684\u8868\u73fe\u6642\uff0c\u9700\u8981\u5c07\u5be6\u969b\u8ecc\u8de1\u8207\u9810\u671f\uff08\u6216\u7406\u60f3\uff09\u8ecc\u8de1\u9032\u884c\u6bd4\u8f03\u3002\u9019\u7a2e\u6bd4\u8f03\u80fd\u63ed\u9732 agent \u6d41\u7a0b\u4e2d\u7684\u932f\u8aa4\u8207\u4f4e\u6548\u7387\u3002\u9810\u671f\u8ecc\u8de1\u4ee3\u8868\u300c\u4e8b\u5be6\u6a19\u6e96\u300d\uff08ground truth\uff09\u2014\u2014\u4e5f\u5c31\u662f\u6211\u5011\u9810\u671f agent \u61c9\u63a1\u53d6\u7684\u6b65\u9a5f\u6e05\u55ae\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># Trajectory evaluation will compare\nexpected_steps = [\"determine_intent\", \"use_tool\", \"review_results\", \"report_generation\"]\nactual_steps = [\"determine_intent\", \"use_tool\", \"review_results\", \"report_generation\"]\n</code></pre> <p>\u6709\u591a\u7a2e\u57fa\u65bc\u771f\u5be6\u6a19\u8a3b\uff08ground-truth\uff09\u7684\u8ecc\u8de1\u8a55\u4f30\u65b9\u6cd5\uff1a</p> <ol> <li>\u5b8c\u5168\u7b26\u5408\uff08Exact match\uff09\uff1a \u9700\u8981\u8207\u7406\u60f3\u8ecc\u8de1\u5b8c\u5168\u4e00\u81f4\u3002</li> <li>\u9806\u5e8f\u7b26\u5408\uff08In-order match\uff09\uff1a \u9700\u8981\u6b63\u78ba\u7684\u52d5\u4f5c\u4e14\u9806\u5e8f\u6b63\u78ba\uff0c\u4f46\u5141\u8a31\u6709\u984d\u5916\u7684\u52d5\u4f5c\u3002</li> <li>\u4efb\u610f\u9806\u5e8f\u7b26\u5408\uff08Any-order match\uff09\uff1a \u9700\u8981\u6b63\u78ba\u7684\u52d5\u4f5c\uff0c\u9806\u5e8f\u4e0d\u9650\uff0c\u5141\u8a31\u6709\u984d\u5916\u7684\u52d5\u4f5c\u3002</li> <li>\u7cbe\u78ba\u7387\uff08Precision\uff09\uff1a \u8861\u91cf\u9810\u6e2c\u52d5\u4f5c\u7684\u76f8\u95dc\u6027\uff0f\u6b63\u78ba\u6027\u3002</li> <li>\u53ec\u56de\u7387\uff08Recall\uff09\uff1a \u8861\u91cf\u9810\u6e2c\u4e2d\u6355\u6349\u5230\u591a\u5c11\u5fc5\u8981\u52d5\u4f5c\u3002</li> <li>\u55ae\u4e00\u5de5\u5177\u4f7f\u7528\uff08Single-tool use\uff09\uff1a \u6aa2\u67e5\u662f\u5426\u5305\u542b\u7279\u5b9a\u52d5\u4f5c\u3002</li> </ol> <p>\u9078\u64c7\u5408\u9069\u7684\u8a55\u4f30\u6307\u6a19\uff0c\u53d6\u6c7a\u65bc\u4f60\u7684 agent \u7684\u5177\u9ad4\u9700\u6c42\u8207\u76ee\u6a19\u3002\u4f8b\u5982\uff0c\u5728\u9ad8\u98a8\u96aa\u5834\u666f\u4e0b\uff0c\u5b8c\u5168\u7b26\u5408\u53ef\u80fd\u975e\u5e38\u95dc\u9375\uff1b\u800c\u5728\u8f03\u70ba\u5f48\u6027\u7684\u60c5\u5883\u4e2d\uff0c\u9806\u5e8f\u7b26\u5408\u6216\u4efb\u610f\u9806\u5e8f\u7b26\u5408\u5c31\u53ef\u80fd\u5df2\u7d93\u8db3\u5920\u3002</p>"},{"location":"evaluate/#agent-development-kit-adk","title":"\u8a55\u4f30\u5728 Agent Development Kit (ADK) \u4e2d\u7684\u904b\u4f5c\u65b9\u5f0f","text":"<p>Agent Development Kit (ADK) \u63d0\u4f9b\u5169\u7a2e\u65b9\u6cd5\uff0c\u7528\u65bc\u6839\u64da\u9810\u5148\u5b9a\u7fa9\u7684\u8cc7\u6599\u96c6\u548c\u8a55\u4f30\u6a19\u6e96\u4f86\u8a55\u4f30 agent \u7684\u8868\u73fe\u3002\u9019\u5169\u7a2e\u65b9\u6cd5\u5728\u6982\u5ff5\u4e0a\u76f8\u4f3c\uff0c\u4f46\u5b83\u5011\u80fd\u8655\u7406\u7684\u8cc7\u6599\u91cf\u4e0d\u540c\uff0c\u9019\u901a\u5e38\u6c7a\u5b9a\u4e86\u5404\u81ea\u9069\u7528\u7684\u60c5\u5883\u3002</p>"},{"location":"evaluate/#_3","title":"\u65b9\u6cd5\u4e00\uff1a\u4f7f\u7528\u6e2c\u8a66\u6a94\u6848","text":"<p>\u9019\u7a2e\u65b9\u6cd5\u6d89\u53ca\u5efa\u7acb\u500b\u5225\u7684\u6e2c\u8a66\u6a94\u6848\uff0c\u6bcf\u500b\u6a94\u6848\u4ee3\u8868\u4e00\u6b21\u7c21\u55ae\u7684 agent \u8207\u6a21\u578b\u4e92\u52d5\uff08\u5373\u4e00\u500b session\uff09\u3002\u9019\u5728 agent \u958b\u767c\u904e\u7a0b\u4e2d\u6700\u70ba\u6709\u6548\uff0c\u53ef\u4f5c\u70ba\u55ae\u5143\u6e2c\u8a66\u7684\u4e00\u7a2e\u5f62\u5f0f\u3002\u9019\u4e9b\u6e2c\u8a66\u8a2d\u8a08\u70ba\u53ef\u5feb\u901f\u57f7\u884c\uff0c\u61c9\u805a\u7126\u65bc\u7c21\u55ae session \u7684\u8907\u96dc\u5ea6\u3002\u6bcf\u500b\u6e2c\u8a66\u6a94\u6848\u5305\u542b\u4e00\u500b session\uff0c\u8a72 session \u53ef\u4ee5\u5305\u542b\u591a\u500b\u56de\u5408\uff08turn\uff09\u3002\u4e00\u500b\u56de\u5408\u4ee3\u8868\u4f7f\u7528\u8005\u8207 agent \u4e4b\u9593\u7684\u4e00\u6b21\u4e92\u52d5\u3002\u6bcf\u500b\u56de\u5408\u5305\u542b\uff1a</p> <ul> <li><code>User Content</code>\uff1a\u4f7f\u7528\u8005\u767c\u51fa\u7684\u67e5\u8a62\u3002</li> <li><code>Expected Intermediate Tool Use Trajectory</code>\uff1a\u6211\u5011\u671f\u671b agent \u70ba\u6b63\u78ba\u56de\u61c9\u4f7f\u7528\u8005\u67e5\u8a62\u800c\u9032\u884c\u7684\u5de5\u5177\u547c\u53eb (tool calls)\u3002</li> <li><code>Expected Intermediate Agent Responses</code>\uff1a\u9019\u4e9b\u662f agent\uff08\u6216\u5b50 agent\uff09\u5728\u7522\u751f\u6700\u7d42\u7b54\u6848\u904e\u7a0b\u4e2d\u7522\u751f\u7684\u81ea\u7136\u8a9e\u8a00\u56de\u61c9\u3002\u9019\u4e9b\u81ea\u7136\u8a9e\u8a00\u56de\u61c9\u901a\u5e38\u662f\u591a agent \u7cfb\u7d71\u7684\u7522\u7269\uff0c\u7576\u4f60\u7684\u4e3b agent \u4f9d\u8cf4\u5b50 agent \u4f86\u9054\u6210\u76ee\u6a19\u6642\u6703\u7522\u751f\u9019\u4e9b\u4e2d\u9593\u56de\u61c9\u3002\u9019\u4e9b\u4e2d\u9593\u56de\u61c9\u5c0d\u6700\u7d42\u4f7f\u7528\u8005\u4f86\u8aaa\u53ef\u80fd\u6709\u7528\u4e5f\u53ef\u80fd\u7121\u7528\uff0c\u4f46\u5c0d\u65bc\u7cfb\u7d71\u958b\u767c\u8005\uff0f\u64c1\u6709\u8005\u4f86\u8aaa\u537b\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u70ba\u5b83\u5011\u80fd\u8b93\u4f60\u78ba\u4fe1 agent \u8d70\u5c0d\u4e86\u7522\u751f\u6700\u7d42\u56de\u61c9\u7684\u8def\u5f91\u3002</li> <li><code>Final Response</code>\uff1aagent \u9810\u671f\u7684\u6700\u7d42\u56de\u61c9\u3002</li> </ul> <p>\u4f60\u53ef\u4ee5\u70ba\u6a94\u6848\u53d6\u4efb\u4f55\u540d\u7a31\uff0c\u4f8b\u5982 <code>evaluation.test.json</code>\u3002\u6846\u67b6\u53ea\u6703\u6aa2\u67e5 <code>.test.json</code> \u9019\u500b\u526f\u6a94\u540d\uff0c\u6a94\u540d\u7684\u524d\u7db4\u90e8\u5206\u6c92\u6709\u9650\u5236\u3002\u9019\u4e9b\u6e2c\u8a66\u6a94\u6848\u662f\u4ee5\u6b63\u5f0f\u7684 Pydantic \u8cc7\u6599\u6a21\u578b\u70ba\u57fa\u790e\u3002\u5169\u500b\u4e3b\u8981\u7684 schema \u6a94\u6848\u5206\u5225\u662f Eval Set \u548c Eval Case\u3002 \u4ee5\u4e0b\u662f\u4e00\u500b\u5305\u542b\u5e7e\u500b\u7bc4\u4f8b\u7684\u6e2c\u8a66\u6a94\u6848\uff1a</p> <p>\uff08\u6ce8\u610f\uff1a\u4ee5\u4e0b\u8a3b\u89e3\u50c5\u4f9b\u8aaa\u660e\u7528\u9014\uff0c\u82e5\u8981\u6210\u70ba\u6709\u6548\u7684 JSON\uff0c\u8acb\u5c07\u8a3b\u89e3\u79fb\u9664\u3002\uff09</p> <pre><code># Do note that some fields are removed for sake of making this doc readable.\n{\n  \"eval_set_id\": \"home_automation_agent_light_on_off_set\",\n  \"name\": \"\",\n  \"description\": \"This is an eval set that is used for unit testing `x` behavior of the Agent\",\n  \"eval_cases\": [\n    {\n      \"eval_id\": \"eval_case_id\",\n      \"conversation\": [\n        {\n          \"invocation_id\": \"b7982664-0ab6-47cc-ab13-326656afdf75\", # Unique identifier for the invocation.\n          \"user_content\": { # Content provided by the user in this invocation. This is the query.\n            \"parts\": [\n              {\n                \"text\": \"Turn off device_2 in the Bedroom.\"\n              }\n            ],\n            \"role\": \"user\"\n          },\n          \"final_response\": { # Final response from the agent that acts as a reference of benchmark.\n            \"parts\": [\n              {\n                \"text\": \"I have set the device_2 status to off.\"\n              }\n            ],\n            \"role\": \"model\"\n          },\n          \"intermediate_data\": {\n            \"tool_uses\": [ # Tool use trajectory in chronological order.\n              {\n                \"args\": {\n                  \"location\": \"Bedroom\",\n                  \"device_id\": \"device_2\",\n                  \"status\": \"OFF\"\n                },\n                \"name\": \"set_device_info\"\n              }\n            ],\n            \"intermediate_responses\": [] # Any intermediate sub-agent responses.\n          },\n        }\n      ],\n      \"session_input\": { # Initial session input.\n        \"app_name\": \"home_automation_agent\",\n        \"user_id\": \"test_user\",\n        \"state\": {}\n      },\n    }\n  ],\n}\n</code></pre> <p>\u6a94\u6848\u6e2c\u8a66\u53ef\u4ee5\u7d44\u7e54\u5728\u8cc7\u6599\u593e\u4e2d\u3002\u9078\u64c7\u6027\u5730\uff0c\u8cc7\u6599\u593e\u5167\u4e5f\u53ef\u4ee5\u5305\u542b<code>test_config.json</code>\u6a94\u6848\uff0c\u7528\u65bc\u6307\u5b9a\u8a55\u4f30\u6a19\u6e96\u3002</p>"},{"location":"evaluate/#pydantic-schema","title":"\u5982\u4f55\u9077\u79fb\u672a\u7b26\u5408 Pydantic schema \u7684\u6e2c\u8a66\u6a94\u6848\uff1f","text":"<p>\u6ce8\u610f\uff1a\u5982\u679c\u4f60\u7684\u6e2c\u8a66\u6a94\u6848\u672a\u9075\u5faa EvalSet schema \u6a94\u6848\uff0c\u5247\u672c\u7bc0\u5167\u5bb9\u9069\u7528\u65bc\u4f60\u3002</p> <p>\u8acb\u4f7f\u7528<code>AgentEvaluator.migrate_eval_data_to_new_schema</code>\u4f86\u5c07\u4f60\u73fe\u6709\u7684<code>*.test.json</code>\u6a94\u6848\u9077\u79fb\u81f3\u4ee5 Pydantic \u70ba\u57fa\u790e\u7684 schema\u3002</p> <p>\u6b64\u5de5\u5177\u6703\u63a5\u6536\u4f60\u76ee\u524d\u7684\u6e2c\u8a66\u8cc7\u6599\u6a94\u6848\uff0c\u4ee5\u53ca\u53ef\u9078\u7684\u521d\u59cb session \u6a94\u6848\uff0c\u4e26\u7522\u751f\u4e00\u500b\u4ee5\u65b0\u683c\u5f0f\u5e8f\u5217\u5316\u8cc7\u6599\u7684\u55ae\u4e00\u8f38\u51fa JSON \u6a94\u6848\u3002\u7531\u65bc\u65b0 schema \u66f4\u5177\u4e00\u81f4\u6027\uff0c\u820a\u7684\u6e2c\u8a66\u8cc7\u6599\u6a94\u6848\u548c\u521d\u59cb session \u6a94\u6848\u90fd\u53ef\u4ee5\u5ffd\u7565\uff08\u6216\u79fb\u9664\uff09\u3002</p>"},{"location":"evaluate/#evalset","title":"\u7b2c\u4e8c\u7a2e\u65b9\u5f0f\uff1a\u4f7f\u7528 Evalset \u6a94\u6848","text":"<p>Evalset \u65b9\u5f0f\u5229\u7528\u4e00\u500b\u5c08\u7528\u7684\u8cc7\u6599\u96c6\uff0c\u7a31\u70ba\u300cevalset\u300d\uff0c\u7528\u65bc\u8a55\u4f30 agent \u8207\u6a21\u578b\u7684\u4e92\u52d5\u3002\u8207\u6e2c\u8a66\u6a94\u6848\u985e\u4f3c\uff0cevalset \u4e5f\u5305\u542b\u7bc4\u4f8b\u4e92\u52d5\u3002\u4e0d\u904e\uff0cevalset \u53ef\u4ee5\u5305\u542b\u591a\u500b\u3001\u751a\u81f3\u8f03\u9577\u7684 session\uff0c\u975e\u5e38\u9069\u5408\u6a21\u64ec\u8907\u96dc\u7684\u591a\u8f2a\u5c0d\u8a71\u3002\u7531\u65bc\u80fd\u5920\u8868\u9054\u8907\u96dc session\uff0cevalset \u7279\u5225\u9069\u5408\u7528\u65bc\u6574\u5408\u6e2c\u8a66\u3002\u9019\u985e\u6e2c\u8a66\u901a\u5e38\u6bd4\u55ae\u5143\u6e2c\u8a66\u57f7\u884c\u983b\u7387\u4f4e\uff0c\u56e0\u70ba\u5176\u898f\u6a21\u8f03\u5927\u3002</p> <p>\u4e00\u500b evalset \u6a94\u6848\u5305\u542b\u591a\u500b\u300cevals\u300d\uff0c\u6bcf\u500b eval \u4ee3\u8868\u4e00\u500b\u7368\u7acb\u7684 session\u3002\u6bcf\u500b eval \u7531\u4e00\u500b\u6216\u591a\u500b\u300cturns\u300d\u7d44\u6210\uff0c\u9019\u4e9b turn \u5305\u542b\u4f7f\u7528\u8005\u67e5\u8a62\u3001\u9810\u671f\u7684\u5de5\u5177\u4f7f\u7528\u3001\u9810\u671f\u7684\u4e2d\u4ecb agent \u56de\u61c9\uff0c\u4ee5\u53ca\u53c3\u8003\u56de\u61c9\u3002\u9019\u4e9b\u6b04\u4f4d\u7684\u610f\u7fa9\u8207\u6e2c\u8a66\u6a94\u6848\u65b9\u5f0f\u76f8\u540c\u3002\u6bcf\u500b eval \u90fd\u6709\u552f\u4e00\u540d\u7a31\u6a19\u8b58\u3002\u6b64\u5916\uff0c\u6bcf\u500b eval \u4e5f\u5305\u542b\u76f8\u95dc\u7684\u521d\u59cb session state\u3002</p> <p>\u7531\u65bc\u624b\u52d5\u5efa\u7acb evalset \u53ef\u80fd\u8f03\u70ba\u8907\u96dc\uff0c\u56e0\u6b64\u6211\u5011\u63d0\u4f9b\u4e86 UI \u5de5\u5177\uff0c\u5354\u52a9\u4f60\u64f7\u53d6\u76f8\u95dc session\uff0c\u4e26\u8f15\u9b06\u8f49\u63db\u70ba evalset \u4e2d\u7684 eval\u3002\u4f60\u53ef\u4ee5\u5728\u4e0b\u65b9\u9032\u4e00\u6b65\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u7db2\u9801 UI \u9032\u884c\u8a55\u4f30\u3002\u4ee5\u4e0b\u662f\u4e00\u500b\u5305\u542b\u5169\u500b session \u7684 evalset \u7bc4\u4f8b\u3002Evalset \u6a94\u6848\u662f\u4ee5\u6b63\u5f0f\u7684 Pydantic \u8cc7\u6599\u6a21\u578b\u70ba\u57fa\u790e\u3002\u5169\u500b\u4e3b\u8981\u7684 schema \u6a94\u6848\u5206\u5225\u662f Eval Set \u8207 Eval Case\u3002</p> <p>Warning</p> <p>\u6b64 evalset \u8a55\u4f30\u65b9\u6cd5\u9700\u8981\u4f7f\u7528\u4ed8\u8cbb\u670d\u52d9\uff0c Vertex Gen AI Evaluation Service API\u3002</p> <p>\uff08\u6ce8\u610f\uff1a\u4ee5\u4e0b\u8a3b\u89e3\u50c5\u70ba\u8aaa\u660e\u7528\u9014\uff0c\u82e5\u8981\u4f7f JSON \u6709\u6548\uff0c\u8acb\u5c07\u5176\u79fb\u9664\u3002\uff09</p> <pre><code># Do note that some fields are removed for sake of making this doc readable.\n{\n  \"eval_set_id\": \"eval_set_example_with_multiple_sessions\",\n  \"name\": \"Eval set with multiple sessions\",\n  \"description\": \"This eval set is an example that shows that an eval set can have more than one session.\",\n  \"eval_cases\": [\n    {\n      \"eval_id\": \"session_01\",\n      \"conversation\": [\n        {\n          \"invocation_id\": \"e-0067f6c4-ac27-4f24-81d7-3ab994c28768\",\n          \"user_content\": {\n            \"parts\": [\n              {\n                \"text\": \"What can you do?\"\n              }\n            ],\n            \"role\": \"user\"\n          },\n          \"final_response\": {\n            \"parts\": [\n              {\n\n                \"text\": \"I can roll dice of different sizes and check if numbers are prime.\"\n              }\n            ],\n            \"role\": null\n          },\n          \"intermediate_data\": {\n            \"tool_uses\": [],\n            \"intermediate_responses\": []\n          },\n        },\n      ],\n      \"session_input\": {\n        \"app_name\": \"hello_world\",\n        \"user_id\": \"user\",\n        \"state\": {}\n      },\n    },\n    {\n      \"eval_id\": \"session_02\",\n      \"conversation\": [\n        {\n          \"invocation_id\": \"e-92d34c6d-0a1b-452a-ba90-33af2838647a\",\n          \"user_content\": {\n            \"parts\": [\n              {\n                \"text\": \"Roll a 19 sided dice\"\n              }\n            ],\n            \"role\": \"user\"\n          },\n          \"final_response\": {\n            \"parts\": [\n              {\n                \"text\": \"I rolled a 17.\"\n              }\n            ],\n            \"role\": null\n          },\n          \"intermediate_data\": {\n            \"tool_uses\": [],\n            \"intermediate_responses\": []\n          },\n        },\n        {\n          \"invocation_id\": \"e-bf8549a1-2a61-4ecc-a4ee-4efbbf25a8ea\",\n          \"user_content\": {\n            \"parts\": [\n              {\n                \"text\": \"Roll a 10 sided dice twice and then check if 9 is a prime or not\"\n              }\n            ],\n            \"role\": \"user\"\n          },\n          \"final_response\": {\n            \"parts\": [\n              {\n                \"text\": \"I got 4 and 7 from the dice roll, and 9 is not a prime number.\\n\"\n              }\n            ],\n            \"role\": null\n          },\n          \"intermediate_data\": {\n            \"tool_uses\": [\n              {\n                \"id\": \"adk-1a3f5a01-1782-4530-949f-07cf53fc6f05\",\n                \"args\": {\n                  \"sides\": 10\n                },\n                \"name\": \"roll_die\"\n              },\n              {\n                \"id\": \"adk-52fc3269-caaf-41c3-833d-511e454c7058\",\n                \"args\": {\n                  \"sides\": 10\n                },\n                \"name\": \"roll_die\"\n              },\n              {\n                \"id\": \"adk-5274768e-9ec5-4915-b6cf-f5d7f0387056\",\n                \"args\": {\n                  \"nums\": [\n                    9\n                  ]\n                },\n                \"name\": \"check_prime\"\n              }\n            ],\n            \"intermediate_responses\": [\n              [\n                \"data_processing_agent\",\n                [\n                  {\n                    \"text\": \"I have rolled a 10 sided die twice. The first roll is 5 and the second roll is 3.\\n\"\n                  }\n                ]\n              ]\n            ]\n          },\n        }\n      ],\n      \"session_input\": {\n        \"app_name\": \"hello_world\",\n        \"user_id\": \"user\",\n        \"state\": {}\n      },\n    }\n  ],\n}\n</code></pre>"},{"location":"evaluate/#pydantic-schema-eval-set","title":"\u5982\u4f55\u9077\u79fb\u672a\u4f9d\u7167 Pydantic schema \u7684 eval set \u6a94\u6848\uff1f","text":"<p>\u6ce8\u610f\uff1a\u5982\u679c\u4f60\u7684 eval set \u6a94\u6848\u672a\u9075\u5faa EvalSet schema \u6a94\u6848\uff0c\u5247\u672c\u7bc0\u5167\u5bb9\u9069\u7528\u65bc\u4f60\u3002</p> <p>\u6839\u64da\u8ab0\u8ca0\u8cac\u7dad\u8b77 eval set \u8cc7\u6599\uff0c\u6709\u5169\u7a2e\u8def\u5f91\uff1a</p> <ol> <li> <p>\u7531 Agent Development Kit (ADK) UI \u7dad\u8b77\u7684 eval set \u8cc7\u6599     \u5982\u679c\u4f60\u4f7f\u7528 Agent Development Kit (ADK) UI \u4f86\u7dad\u8b77 eval set \u8cc7\u6599\uff0c\u5247\u7121\u9700\u9032\u884c\u4efb\u4f55\u64cd\u4f5c\u3002</p> </li> <li> <p>eval set \u8cc7\u6599\u7531\u4eba\u5de5\u958b\u767c\u8207\u7dad\u8b77\uff0c\u4e26\u65bc ADK eval CLI \u4f7f\u7528     \u9077\u79fb\u5de5\u5177\u6b63\u5728\u958b\u767c\u4e2d\uff0c\u5728\u6b64\u4e4b\u524d\uff0cADK eval CLI \u6307\u4ee4\u4ecd\u6703\u7e7c\u7e8c\u652f\u63f4\u820a\u683c\u5f0f\u7684\u8cc7\u6599\u3002</p> </li> </ol>"},{"location":"evaluate/#_4","title":"\u8a55\u4f30\u6a19\u6e96","text":"<p>\u8a55\u4f30\u6a19\u6e96\u7528\u65bc\u5b9a\u7fa9 agent \u5728 evalset \u4e0a\u7684\u8868\u73fe\u5982\u4f55\u88ab\u8861\u91cf\u3002\u76ee\u524d\u652f\u63f4\u4ee5\u4e0b\u6307\u6a19\uff1a</p> <ul> <li><code>tool_trajectory_avg_score</code>\uff1a\u6b64\u6307\u6a19\u6703\u6bd4\u8f03 agent \u5728\u8a55\u6e2c\u904e\u7a0b\u4e2d\u5be6\u969b\u4f7f\u7528\u7684\u5de5\u5177\u8207 <code>expected_tool_use</code> \u6b04\u4f4d\u4e2d\u5b9a\u7fa9\u7684\u9810\u671f\u5de5\u5177\u4f7f\u7528\u60c5\u5883\u3002\u6bcf\u4e00\u500b\u5de5\u5177\u4f7f\u7528\u6b65\u9a5f\u82e5\u76f8\u7b26\u5247\u5f97\u5206 1\uff0c\u82e5\u4e0d\u7b26\u5247\u5f97\u5206 0\u3002\u6700\u7d42\u5206\u6578\u70ba\u9019\u4e9b\u6bd4\u5c0d\u7684\u5e73\u5747\u503c\uff0c\u4ee3\u8868\u5de5\u5177\u4f7f\u7528\u8def\u5f91\u7684\u6e96\u78ba\u7387\u3002  </li> <li><code>response_match_score</code>\uff1a\u6b64\u6307\u6a19\u6703\u6bd4\u8f03 agent \u6700\u7d42\u7684\u81ea\u7136\u8a9e\u8a00\u56de\u61c9\u8207\u9810\u671f\u7684\u6700\u7d42\u56de\u61c9\uff08\u5132\u5b58\u5728 <code>reference</code> \u6b04\u4f4d\uff09\u3002\u6211\u5011\u4f7f\u7528 [ROUGE](https://en.wikipedia.org/wiki/ROUGE_(metric) \u6307\u6a19\u4f86\u8a08\u7b97\u5169\u8005\u4e4b\u9593\u7684\u76f8\u4f3c\u5ea6\u3002</li> </ul> <p>\u5982\u679c\u672a\u63d0\u4f9b\u8a55\u4f30\u6a19\u6e96\uff0c\u5247\u6703\u4f7f\u7528\u4ee5\u4e0b\u9810\u8a2d\u8a2d\u5b9a\uff1a</p> <ul> <li><code>tool_trajectory_avg_score</code>\uff1a\u9810\u8a2d\u70ba 1.0\uff0c\u4ee3\u8868\u5de5\u5177\u4f7f\u7528\u8def\u5f91\u9700 100% \u5b8c\u5168\u76f8\u7b26\u3002  </li> <li><code>response_match_score</code>\uff1a\u9810\u8a2d\u70ba 0.8\uff0c\u5141\u8a31 agent \u7684\u81ea\u7136\u8a9e\u8a00\u56de\u61c9\u6709\u5c0f\u5e45\u5ea6\u7684\u8aa4\u5dee\u3002</li> </ul> <p>\u4ee5\u4e0b\u662f\u4e00\u500b\u6307\u5b9a\u81ea\u8a02\u8a55\u4f30\u6a19\u6e96\u7684 <code>test_config.json</code> \u6a94\u6848\u7bc4\u4f8b\uff1a</p> <pre><code>{\n  \"criteria\": {\n    \"tool_trajectory_avg_score\": 1.0,\n    \"response_match_score\": 0.8\n  }\n}\n</code></pre>"},{"location":"evaluate/#agent-development-kit-adk_1","title":"\u5982\u4f55\u4f7f\u7528 Agent Development Kit (ADK) \u57f7\u884c\u8a55\u4f30","text":"<p>\u4f5c\u70ba\u958b\u767c\u8005\uff0c\u4f60\u53ef\u4ee5\u900f\u904e\u4ee5\u4e0b\u65b9\u5f0f\uff0c\u4f7f\u7528 Agent Development Kit (ADK) \u4f86\u8a55\u4f30\u4f60\u7684 agent\uff1a</p> <ol> <li>\u7db2\u9801 UI\uff08<code>adk web</code>\uff09\uff1a \u900f\u904e\u7db2\u9801\u4ecb\u9762\u4e92\u52d5\u5f0f\u5730\u8a55\u4f30 agent\u3002  </li> <li>\u7a0b\u5f0f\u5316\uff08<code>pytest</code>\uff09\uff1a \u4f7f\u7528 <code>pytest</code> \u8207\u6e2c\u8a66\u6a94\u6848\uff0c\u5c07\u8a55\u4f30\u6574\u5408\u5230\u4f60\u7684\u6e2c\u8a66\u6d41\u7a0b\u4e2d\u3002  </li> <li>\u547d\u4ee4\u5217\u4ecb\u9762\uff08Command Line Interface, <code>adk eval</code>\uff09\uff1a \u76f4\u63a5\u5f9e\u547d\u4ee4\u5217\u5c0d\u73fe\u6709\u7684\u8a55\u4f30\u96c6\u6a94\u6848\u57f7\u884c\u8a55\u4f30\u3002</li> </ol>"},{"location":"evaluate/#1-adk-web-ui","title":"1. <code>adk web</code> - \u900f\u904e\u7db2\u9801 UI \u57f7\u884c\u8a55\u4f30","text":"<p>\u7db2\u9801 UI \u63d0\u4f9b\u4e92\u52d5\u5f0f\u65b9\u5f0f\u4f86\u8a55\u4f30 agent\u3001\u7522\u751f\u8a55\u4f30\u8cc7\u6599\u96c6\uff0c\u4e26\u8a73\u7d30\u6aa2\u8996 agent \u884c\u70ba\u3002</p>"},{"location":"evaluate/#1","title":"\u6b65\u9a5f 1\uff1a\u5efa\u7acb\u4e26\u5132\u5b58\u6e2c\u8a66\u6848\u4f8b","text":"<ol> <li>\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u555f\u52d5\u7db2\u9801\u4f3a\u670d\u5668\uff1a<code>adk web &lt;path_to_your_agents_folder&gt;</code></li> <li>\u5728\u7db2\u9801\u4ecb\u9762\u4e2d\uff0c\u9078\u64c7\u4e00\u500b agent \u4e26\u8207\u5176\u4e92\u52d5\u4ee5\u5efa\u7acb session\u3002</li> <li>\u5c0e\u822a\u81f3\u4ecb\u9762\u53f3\u5074\u7684 Eval \u5206\u9801\u3002</li> <li>\u5efa\u7acb\u65b0\u7684\u8a55\u4f30\u96c6\uff0c\u6216\u9078\u64c7\u73fe\u6709\u7684\u8a55\u4f30\u96c6\u3002</li> <li>\u9ede\u64ca \u300cAdd current session\u300d\uff0c\u5c07\u5c0d\u8a71\u5132\u5b58\u70ba\u65b0\u7684\u8a55\u4f30\u6848\u4f8b\u3002</li> </ol>"},{"location":"evaluate/#2","title":"\u6b65\u9a5f 2\uff1a\u6aa2\u8996\u8207\u7de8\u8f2f\u4f60\u7684\u6e2c\u8a66\u6848\u4f8b","text":"<p>\u6848\u4f8b\u5132\u5b58\u5f8c\uff0c\u4f60\u53ef\u4ee5\u9ede\u64ca\u6e05\u55ae\u4e2d\u7684 ID \u4f86\u6aa2\u8996\u7d30\u7bc0\u3002\u82e5\u9700\u4fee\u6539\uff0c\u8acb\u9ede\u64ca Edit current eval case\uff08\u925b\u7b46\u5716\u793a\uff09\u3002\u9019\u500b\u4e92\u52d5\u5f0f\u6aa2\u8996\u5141\u8a31\u4f60\uff1a</p> <ul> <li>\u4fee\u6539 agent \u7684\u6587\u5b57\u56de\u61c9\uff0c\u4ee5\u512a\u5316\u6e2c\u8a66\u60c5\u5883\u3002</li> <li>\u522a\u9664\u5c0d\u8a71\u4e2d\u7684\u500b\u5225 agent \u8a0a\u606f\u3002</li> <li>\u82e5\u4e0d\u518d\u9700\u8981\uff0c\u522a\u9664\u6574\u500b\u8a55\u4f30\u6848\u4f8b\u3002</li> </ul> <p></p>"},{"location":"evaluate/#3","title":"\u6b65\u9a5f 3\uff1a\u4ee5\u81ea\u8a02\u6307\u6a19\u57f7\u884c\u8a55\u4f30","text":"<ol> <li>\u5f9e\u4f60\u7684\u8a55\u4f30\u96c6\u4e2d\u9078\u64c7\u4e00\u500b\u6216\u591a\u500b\u6e2c\u8a66\u6848\u4f8b\u3002</li> <li>\u9ede\u64ca Run Evaluation\u3002\u6b64\u6642\u6703\u51fa\u73fe EVALUATION METRIC \u5c0d\u8a71\u6846\u3002</li> <li>\u5728\u5c0d\u8a71\u6846\u4e2d\uff0c\u4f7f\u7528\u6ed1\u687f\u8a2d\u5b9a\u4ee5\u4e0b\u9580\u6abb\u503c\uff1a<ul> <li>Tool trajectory avg score</li> <li>Response match score</li> </ul> </li> <li>\u9ede\u64ca Start\uff0c\u5373\u53ef\u4f9d\u64da\u4f60\u7684\u81ea\u8a02\u6a19\u6e96\u57f7\u884c\u8a55\u4f30\u3002\u6bcf\u6b21\u57f7\u884c\u6240\u4f7f\u7528\u7684\u6307\u6a19\u90fd\u6703\u88ab\u8a18\u9304\u5728\u8a55\u4f30\u6b77\u53f2\u4e2d\u3002</li> </ol>"},{"location":"evaluate/#4","title":"\u6b65\u9a5f 4\uff1a\u5206\u6790\u7d50\u679c","text":"<p>\u8a55\u4f30\u57f7\u884c\u5b8c\u7562\u5f8c\uff0c\u4f60\u53ef\u4ee5\u5206\u6790\u7d50\u679c\uff1a</p> <ul> <li>\u5206\u6790\u57f7\u884c\u5931\u6557\uff1a\u9ede\u64ca\u4efb\u4f55 Pass \u6216 Fail \u7d50\u679c\u3002\u82e5\u70ba\u5931\u6557\uff0c\u53ef\u5c07\u6ed1\u9f20\u79fb\u81f3 <code>Fail</code> \u6a19\u7c64\u4e0a\uff0c\u67e5\u770b \u5be6\u969b\u8f38\u51fa vs. \u9810\u671f\u8f38\u51fa \u7684\u4e26\u6392\u6bd4\u8f03\uff0c\u4ee5\u53ca\u5c0e\u81f4\u5931\u6557\u7684\u5206\u6578\u3002</li> </ul>"},{"location":"evaluate/#trace","title":"\u4f7f\u7528 Trace \u6aa2\u8996\u9032\u884c\u9664\u932f","text":"<p>Agent Development Kit (ADK) \u7db2\u9801 UI \u5167\u5efa\u5f37\u5927\u7684 Trace \u5206\u9801\uff0c\u53ef\u7528\u65bc\u9664\u932f agent \u884c\u70ba\u3002\u6b64\u529f\u80fd\u9069\u7528\u65bc\u4efb\u4f55 agent session\uff0c\u4e0d\u50c5\u9650\u65bc\u8a55\u4f30\u671f\u9593\u3002</p> <p>Trace \u5206\u9801\u63d0\u4f9b\u8a73\u7d30\u4e14\u4e92\u52d5\u5f0f\u7684\u65b9\u5f0f\uff0c\u6aa2\u8996 agent \u7684\u57f7\u884c\u6d41\u7a0b\u3002trace \u6703\u81ea\u52d5\u4f9d\u4f7f\u7528\u8005\u8a0a\u606f\u5206\u7d44\uff0c\u65b9\u4fbf\u4f60\u8ffd\u8e64\u4e8b\u4ef6\u93c8\u3002</p> <p>\u6bcf\u4e00\u7b46 trace \u8a18\u9304\u90fd\u662f\u4e92\u52d5\u5f0f\u7684\uff1a</p> <ul> <li>\u6ed1\u9f20\u79fb\u81f3 trace \u8a18\u9304\u6642\uff0c\u6703\u9ad8\u4eae\u5c0d\u61c9\u7684\u804a\u5929\u8a0a\u606f\u3002</li> <li>\u9ede\u64ca trace \u8a18\u9304\u6703\u958b\u555f\u8a73\u7d30\u6aa2\u8996\u9762\u677f\uff0c\u5305\u542b\u56db\u500b\u5206\u9801\uff1a<ul> <li>Event\uff1a\u539f\u59cb\u4e8b\u4ef6\u8cc7\u6599\u3002</li> <li>Request\uff1a\u50b3\u9001\u7d66\u6a21\u578b\u7684\u8acb\u6c42\u3002</li> <li>Response\uff1a\u5f9e\u6a21\u578b\u6536\u5230\u7684\u56de\u61c9\u3002</li> <li>Graph\uff1a\u5de5\u5177\u547c\u53eb (tool calls) \u8207 agent \u908f\u8f2f\u6d41\u7a0b\u7684\u8996\u89ba\u5316\u5716\u8868\u3002</li> </ul> </li> </ul> <p> </p> <p>Trace \u6aa2\u8996\u4e2d\u7684\u85cd\u8272\u5217\uff0c\u8868\u793a\u8a72\u4e92\u52d5\u7522\u751f\u4e86\u4e00\u500b\u4e8b\u4ef6\u3002\u9ede\u64ca\u9019\u4e9b\u85cd\u8272\u5217\u6703\u958b\u555f\u4e0b\u65b9\u7684\u4e8b\u4ef6\u8a73\u7d30\u9762\u677f\uff0c\u8b93\u4f60\u66f4\u6df1\u5165\u4e86\u89e3 agent \u7684\u57f7\u884c\u6d41\u7a0b\u3002</p>"},{"location":"evaluate/#2-pytest-","title":"2.  <code>pytest</code> - \u7a0b\u5f0f\u5316\u57f7\u884c\u6e2c\u8a66","text":"<p>\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>pytest</code>\uff0c\u5c07\u6e2c\u8a66\u6a94\u6848\u7d0d\u5165\u6574\u5408\u6e2c\u8a66\u6d41\u7a0b\u4e2d\u3002</p>"},{"location":"evaluate/#_5","title":"\u6307\u4ee4\u7bc4\u4f8b","text":"<pre><code>pytest tests/integration/\n</code></pre>"},{"location":"evaluate/#_6","title":"\u7bc4\u4f8b\u6e2c\u8a66\u7a0b\u5f0f\u78bc","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u500b<code>pytest</code>\u6e2c\u8a66\u6848\u4f8b\u7684\u7bc4\u4f8b\uff0c\u6703\u57f7\u884c\u55ae\u4e00\u6e2c\u8a66\u6a94\u6848\uff1a</p> <pre><code>from google.adk.evaluation.agent_evaluator import AgentEvaluator\nimport pytest\n\n@pytest.mark.asyncio\nasync def test_with_single_test_file():\n    \"\"\"Test the agent's basic ability via a session file.\"\"\"\n    await AgentEvaluator.evaluate(\n        agent_module=\"home_automation_agent\",\n        eval_dataset_file_path_or_dir=\"tests/integration/fixture/home_automation_agent/simple_test.test.json\",\n    )\n</code></pre> <p>\u9019\u7a2e\u65b9\u6cd5\u8b93\u4f60\u53ef\u4ee5\u5c07 agent \u8a55\u4f30\u6574\u5408\u5230 CI/CD \u6d41\u7a0b\u6216\u66f4\u5927\u578b\u7684\u6e2c\u8a66\u5957\u4ef6\u4e2d\u3002\u5982\u679c\u4f60\u5e0c\u671b\u70ba\u6e2c\u8a66\u6307\u5b9a\u521d\u59cb session state\uff0c\u53ef\u4ee5\u5c07 session \u8a73\u7d30\u8cc7\u8a0a\u5132\u5b58\u5728\u6a94\u6848\u4e2d\uff0c\u4e26\u50b3\u905e\u7d66 <code>AgentEvaluator.evaluate</code> \u65b9\u6cd5\u3002</p>"},{"location":"evaluate/#3-adk-eval-command-line-interface-cli","title":"3. <code>adk eval</code> - \u900f\u904e\u547d\u4ee4\u5217\u4ecb\u9762 (Command Line Interface, CLI) \u57f7\u884c\u8a55\u4f30","text":"<p>\u4f60\u4e5f\u53ef\u4ee5\u900f\u904e\u547d\u4ee4\u5217\u4ecb\u9762\uff08CLI\uff09\u4f86\u57f7\u884c eval set \u6a94\u6848\u7684\u8a55\u4f30\u3002\u9019\u6703\u57f7\u884c\u8207\u7db2\u9801 UI \u76f8\u540c\u7684\u8a55\u4f30\u6d41\u7a0b\uff0c\u4f46\u66f4\u9069\u5408\u81ea\u52d5\u5316\uff0c\u4f8b\u5982\u4f60\u53ef\u4ee5\u5c07\u9019\u500b\u6307\u4ee4\u52a0\u5165\u5230\u65e5\u5e38\u5efa\u7f6e\u7522\u751f\u8207\u9a57\u8b49\u6d41\u7a0b\u4e2d\u3002</p> <p>\u4ee5\u4e0b\u662f\u6307\u4ee4\u7bc4\u4f8b\uff1a</p> <pre><code>adk eval \\\n    &lt;AGENT_MODULE_FILE_PATH&gt; \\\n    &lt;EVAL_SET_FILE_PATH&gt; \\\n    [--config_file_path=&lt;PATH_TO_TEST_JSON_CONFIG_FILE&gt;] \\\n    [--print_detailed_results]\n</code></pre> <p>\u4f8b\u5982\uff1a</p> <pre><code>adk eval \\\n    samples_for_testing/hello_world \\\n    samples_for_testing/hello_world/hello_world_eval_set_001.evalset.json\n</code></pre> <p>\u4ee5\u4e0b\u662f\u6bcf\u500b\u547d\u4ee4\u5217\u53c3\u6578\u7684\u8a73\u7d30\u8aaa\u660e\uff1a</p> <ul> <li><code>AGENT_MODULE_FILE_PATH</code>\uff1a\u6307\u5411\u5305\u542b\u540d\u70ba \"agent\" \u6a21\u7d44\u7684 <code>__init__.py</code> \u6a94\u6848\u8def\u5f91\u3002\"agent\" \u6a21\u7d44\u5167\u5305\u542b\u4e00\u500b <code>root_agent</code>\u3002</li> <li><code>EVAL_SET_FILE_PATH</code>\uff1a\u8a55\u4f30\u6a94\u6848\u7684\u8def\u5f91\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u500b\u6216\u591a\u500b\u8a55\u4f30\u96c6\u6a94\u6848\u8def\u5f91\u3002\u9810\u8a2d\u60c5\u6cc1\u4e0b\uff0c\u6703\u91dd\u5c0d\u6bcf\u500b\u6a94\u6848\u57f7\u884c\u6240\u6709\u8a55\u4f30\u3002\u5982\u679c\u53ea\u60f3\u57f7\u884c\u67d0\u500b\u8a55\u4f30\u96c6\u4e2d\u7684\u7279\u5b9a\u8a55\u4f30\uff0c\u8acb\u5148\u5efa\u7acb\u4e00\u500b\u4ee5\u9017\u865f\u5206\u9694\u7684\u8a55\u4f30\u540d\u7a31\u6e05\u55ae\uff0c\u7136\u5f8c\u5c07\u5176\u4f5c\u70ba\u5b57\u5c3e\u52a0\u5728\u8a55\u4f30\u96c6\u6a94\u6848\u540d\u7a31\u5f8c\uff0c\u4e26\u4ee5\u5192\u865f <code>:</code> \u5206\u9694\u3002</li> <li>\u4f8b\u5982\uff1a<code>sample_eval_set_file.json:eval_1,eval_2,eval_3</code> <code>This will only run eval_1, eval_2 and eval_3 from sample_eval_set_file.json</code> </li> <li><code>CONFIG_FILE_PATH</code>\uff1a\u8a2d\u5b9a\u6a94\u7684\u8def\u5f91\u3002</li> <li><code>PRINT_DETAILED_RESULTS</code>\uff1a\u5728\u4e3b\u63a7\u53f0\u4e0a\u986f\u793a\u8a73\u7d30\u7d50\u679c\u3002</li> </ul>"},{"location":"evaluate/index.en/","title":"Why Evaluate Agents","text":"<p>In traditional software development, unit tests and integration tests provide confidence that code functions as expected and remains stable through changes. These tests provide a clear \"pass/fail\" signal, guiding further development. However, LLM agents introduce a level of variability that makes traditional testing approaches insufficient.</p> <p>Due to the probabilistic nature of models, deterministic \"pass/fail\" assertions are often unsuitable for evaluating agent performance. Instead, we need qualitative evaluations of both the final output and the agent's trajectory - the sequence of steps taken to reach the solution. This involves assessing the quality of the agent's decisions, its reasoning process, and the final result.</p> <p>This may seem like a lot of extra work to set up, but the investment of automating evaluations pays off quickly. If you intend to progress beyond prototype, this is a highly recommended best practice.</p> <p></p>"},{"location":"evaluate/index.en/#preparing-for-agent-evaluations","title":"Preparing for Agent Evaluations","text":"<p>Before automating agent evaluations, define clear objectives and success criteria:</p> <ul> <li>Define Success: What constitutes a successful outcome for your agent?  </li> <li>Identify Critical Tasks: What are the essential tasks your agent must accomplish?  </li> <li>Choose Relevant Metrics: What metrics will you track to measure performance?</li> </ul> <p>These considerations will guide the creation of evaluation scenarios and enable effective monitoring of agent behavior in real-world deployments.</p>"},{"location":"evaluate/index.en/#what-to-evaluate","title":"What to Evaluate?","text":"<p>To bridge the gap between a proof-of-concept and a production-ready AI agent, a robust and automated evaluation framework is essential. Unlike evaluating generative models, where the focus is primarily on the final output, agent evaluation requires a deeper understanding of the decision-making process. Agent evaluation can be broken down into two components:</p> <ol> <li>Evaluating Trajectory and Tool Use: Analyzing the steps an agent takes to reach a solution, including its choice of tools, strategies, and the efficiency of its approach.  </li> <li>Evaluating the Final Response: Assessing the quality, relevance, and correctness of the agent's final output.</li> </ol> <p>The trajectory is just a list of steps the agent took before it returned to the user. We can compare that against the list of steps we expect the agent to have taken.</p>"},{"location":"evaluate/index.en/#evaluating-trajectory-and-tool-use","title":"Evaluating trajectory and tool use","text":"<p>Before responding to a user, an agent typically performs a series of actions, which we refer to as a 'trajectory.' It might compare the user input with session history to disambiguate a term, or lookup a policy document, search a knowledge base or invoke an API to save a ticket. We call this a \u2018trajectory\u2019 of actions. Evaluating an agent's performance requires comparing its actual trajectory to an expected, or ideal, one. This comparison can reveal errors and inefficiencies in the agent's process. The expected trajectory represents the ground truth -- the list of steps we anticipate the agent should take.</p> <p>For example:</p> <pre><code># Trajectory evaluation will compare\nexpected_steps = [\"determine_intent\", \"use_tool\", \"review_results\", \"report_generation\"]\nactual_steps = [\"determine_intent\", \"use_tool\", \"review_results\", \"report_generation\"]\n</code></pre> <p>Several ground-truth-based trajectory evaluations exist:</p> <ol> <li>Exact match: Requires a perfect match to the ideal trajectory.  </li> <li>In-order match: Requires the correct actions in the correct order, allows for extra actions.  </li> <li>Any-order match: Requires the correct actions in any order, allows for extra actions.  </li> <li>Precision: Measures the relevance/correctness of predicted actions.  </li> <li>Recall: Measures how many essential actions are captured in the prediction.  </li> <li>Single-tool use: Checks for the inclusion of a specific action.</li> </ol> <p>Choosing the right evaluation metric depends on the specific requirements and goals of your agent. For instance, in high-stakes scenarios, an exact match might be crucial, while in more flexible situations, an in-order or any-order match might suffice.</p>"},{"location":"evaluate/index.en/#how-evaluation-works-with-the-adk","title":"How Evaluation works with the ADK","text":"<p>The ADK offers two methods for evaluating agent performance against predefined datasets and evaluation criteria. While conceptually similar, they differ in the amount of data they can process, which typically dictates the appropriate use case for each.</p>"},{"location":"evaluate/index.en/#first-approach-using-a-test-file","title":"First approach: Using a test file","text":"<p>This approach involves creating individual test files, each representing a single, simple agent-model interaction (a session). It's most effective during active agent development, serving as a form of unit testing. These tests are designed for rapid execution and should focus on simple session complexity. Each test file contains a single session, which may consist of multiple turns. A turn represents a single interaction between the user and the agent. Each turn includes</p> <ul> <li><code>User Content</code>: The user issued query.</li> <li><code>Expected Intermediate Tool Use Trajectory</code>: The tool calls we expect the     agent to make in order to respond correctly to the user query.</li> <li><code>Expected Intermediate Agent Responses</code>: These are the natural language     responses that the agent (or sub-agents) generates as it moves towards     generating a final answer. These natural language responses are usually an     artifact of an multi-agent system, where your root agent depends on sub-agents to achieve a goal. These intermediate responses, may or may not be of     interest to the end user, but for a developer/owner of the system, are of     critical importance, as they give you the confidence that the agent went     through the right path to generate final response.</li> <li><code>Final Response</code>: The expected final response from the agent.</li> </ul> <p>You can give the file any name for example <code>evaluation.test.json</code>.The framework only checks for the <code>.test.json</code> suffix, and the preceding part of the filename is not constrained. The test files are backed by a formal Pydantic data model. The two key schema files are Eval Set and Eval Case. Here is a test file with a few examples:</p> <p>(Note: Comments are included for explanatory purposes and should be removed for the JSON to be valid.)</p> <pre><code># Do note that some fields are removed for sake of making this doc readable.\n{\n  \"eval_set_id\": \"home_automation_agent_light_on_off_set\",\n  \"name\": \"\",\n  \"description\": \"This is an eval set that is used for unit testing `x` behavior of the Agent\",\n  \"eval_cases\": [\n    {\n      \"eval_id\": \"eval_case_id\",\n      \"conversation\": [\n        {\n          \"invocation_id\": \"b7982664-0ab6-47cc-ab13-326656afdf75\", # Unique identifier for the invocation.\n          \"user_content\": { # Content provided by the user in this invocation. This is the query.\n            \"parts\": [\n              {\n                \"text\": \"Turn off device_2 in the Bedroom.\"\n              }\n            ],\n            \"role\": \"user\"\n          },\n          \"final_response\": { # Final response from the agent that acts as a reference of benchmark.\n            \"parts\": [\n              {\n                \"text\": \"I have set the device_2 status to off.\"\n              }\n            ],\n            \"role\": \"model\"\n          },\n          \"intermediate_data\": {\n            \"tool_uses\": [ # Tool use trajectory in chronological order.\n              {\n                \"args\": {\n                  \"location\": \"Bedroom\",\n                  \"device_id\": \"device_2\",\n                  \"status\": \"OFF\"\n                },\n                \"name\": \"set_device_info\"\n              }\n            ],\n            \"intermediate_responses\": [] # Any intermediate sub-agent responses.\n          },\n        }\n      ],\n      \"session_input\": { # Initial session input.\n        \"app_name\": \"home_automation_agent\",\n        \"user_id\": \"test_user\",\n        \"state\": {}\n      },\n    }\n  ],\n}\n</code></pre> <p>Test files can be organized into folders. Optionally, a folder can also include a <code>test_config.json</code> file that specifies the evaluation criteria.</p>"},{"location":"evaluate/index.en/#how-to-migrate-test-files-not-backed-by-the-pydantic-schema","title":"How to migrate test files not backed by the Pydantic schema?","text":"<p>NOTE: If your test files don't adhere to EvalSet schema file, then this section is relevant to you.</p> <p>Please use <code>AgentEvaluator.migrate_eval_data_to_new_schema</code> to migrate your existing <code>*.test.json</code> files to the Pydantic backed schema.</p> <p>The utility takes your current test data file and an optional initial session file, and generates a single output json file with data serialized in the new format. Given that the new schema is more cohesive, both the old test data file and initial session file can be ignored (or removed.)</p>"},{"location":"evaluate/index.en/#second-approach-using-an-evalset-file","title":"Second approach: Using An Evalset File","text":"<p>The evalset approach utilizes a dedicated dataset called an \"evalset\" for evaluating agent-model interactions. Similar to a test file, the evalset contains example interactions. However, an evalset can contain multiple, potentially lengthy sessions, making it ideal for simulating complex, multi-turn conversations. Due to its ability to represent complex sessions, the evalset is well-suited for integration tests. These tests are typically run less frequently than unit tests due to their more extensive nature.</p> <p>An evalset file contains multiple \"evals,\" each representing a distinct session. Each eval consists of one or more \"turns,\" which include the user query, expected tool use, expected intermediate agent responses, and a reference response. These fields have the same meaning as they do in the test file approach. Each eval is identified by a unique name. Furthermore, each eval includes an associated initial session state.</p> <p>Creating evalsets manually can be complex, therefore UI tools are provided to help capture relevant sessions and easily convert them into evals within your evalset. Learn more about using the web UI for evaluation below. Here is an example evalset containing two sessions. The eval set files are  backed by a formal Pydantic data model. The two key schema files are Eval Set and Eval Case.</p> <p>Warning</p> <p>This evalset evaluation method requires the use of a paid service, Vertex Gen AI Evaluation Service API.</p> <p>(Note: Comments are included for explanatory purposes and should be removed for the JSON to be valid.)</p> <pre><code># Do note that some fields are removed for sake of making this doc readable.\n{\n  \"eval_set_id\": \"eval_set_example_with_multiple_sessions\",\n  \"name\": \"Eval set with multiple sessions\",\n  \"description\": \"This eval set is an example that shows that an eval set can have more than one session.\",\n  \"eval_cases\": [\n    {\n      \"eval_id\": \"session_01\",\n      \"conversation\": [\n        {\n          \"invocation_id\": \"e-0067f6c4-ac27-4f24-81d7-3ab994c28768\",\n          \"user_content\": {\n            \"parts\": [\n              {\n                \"text\": \"What can you do?\"\n              }\n            ],\n            \"role\": \"user\"\n          },\n          \"final_response\": {\n            \"parts\": [\n              {\n\n                \"text\": \"I can roll dice of different sizes and check if numbers are prime.\"\n              }\n            ],\n            \"role\": null\n          },\n          \"intermediate_data\": {\n            \"tool_uses\": [],\n            \"intermediate_responses\": []\n          },\n        },\n      ],\n      \"session_input\": {\n        \"app_name\": \"hello_world\",\n        \"user_id\": \"user\",\n        \"state\": {}\n      },\n    },\n    {\n      \"eval_id\": \"session_02\",\n      \"conversation\": [\n        {\n          \"invocation_id\": \"e-92d34c6d-0a1b-452a-ba90-33af2838647a\",\n          \"user_content\": {\n            \"parts\": [\n              {\n                \"text\": \"Roll a 19 sided dice\"\n              }\n            ],\n            \"role\": \"user\"\n          },\n          \"final_response\": {\n            \"parts\": [\n              {\n                \"text\": \"I rolled a 17.\"\n              }\n            ],\n            \"role\": null\n          },\n          \"intermediate_data\": {\n            \"tool_uses\": [],\n            \"intermediate_responses\": []\n          },\n        },\n        {\n          \"invocation_id\": \"e-bf8549a1-2a61-4ecc-a4ee-4efbbf25a8ea\",\n          \"user_content\": {\n            \"parts\": [\n              {\n                \"text\": \"Roll a 10 sided dice twice and then check if 9 is a prime or not\"\n              }\n            ],\n            \"role\": \"user\"\n          },\n          \"final_response\": {\n            \"parts\": [\n              {\n                \"text\": \"I got 4 and 7 from the dice roll, and 9 is not a prime number.\\n\"\n              }\n            ],\n            \"role\": null\n          },\n          \"intermediate_data\": {\n            \"tool_uses\": [\n              {\n                \"id\": \"adk-1a3f5a01-1782-4530-949f-07cf53fc6f05\",\n                \"args\": {\n                  \"sides\": 10\n                },\n                \"name\": \"roll_die\"\n              },\n              {\n                \"id\": \"adk-52fc3269-caaf-41c3-833d-511e454c7058\",\n                \"args\": {\n                  \"sides\": 10\n                },\n                \"name\": \"roll_die\"\n              },\n              {\n                \"id\": \"adk-5274768e-9ec5-4915-b6cf-f5d7f0387056\",\n                \"args\": {\n                  \"nums\": [\n                    9\n                  ]\n                },\n                \"name\": \"check_prime\"\n              }\n            ],\n            \"intermediate_responses\": [\n              [\n                \"data_processing_agent\",\n                [\n                  {\n                    \"text\": \"I have rolled a 10 sided die twice. The first roll is 5 and the second roll is 3.\\n\"\n                  }\n                ]\n              ]\n            ]\n          },\n        }\n      ],\n      \"session_input\": {\n        \"app_name\": \"hello_world\",\n        \"user_id\": \"user\",\n        \"state\": {}\n      },\n    }\n  ],\n}\n</code></pre>"},{"location":"evaluate/index.en/#how-to-migrate-eval-set-files-not-backed-by-the-pydantic-schema","title":"How to migrate eval set files not backed by the Pydantic schema?","text":"<p>NOTE: If your eval set files don't adhere to EvalSet schema file, then this section is relevant to you.</p> <p>Based on who is maintaining the eval set data, there are two routes:</p> <ol> <li> <p>Eval set data maintained by ADK UI If you use ADK UI to maintain your     Eval set data then no action is needed from you.</p> </li> <li> <p>Eval set data is developed and maintained manually and used in ADK eval CLI A     migration tool is in the works, until then the ADK eval CLI command will     continue to support data in the old format.</p> </li> </ol>"},{"location":"evaluate/index.en/#evaluation-criteria","title":"Evaluation Criteria","text":"<p>The evaluation criteria define how the agent's performance is measured against the evalset. The following metrics are supported:</p> <ul> <li><code>tool_trajectory_avg_score</code>: This metric compares the agent's actual tool usage during the evaluation against the expected tool usage defined in the <code>expected_tool_use</code> field. Each matching tool usage step receives a score of 1, while a mismatch receives a score of 0. The final score is the average of these matches, representing the accuracy of the tool usage trajectory.  </li> <li><code>response_match_score</code>: This metric compares the agent's final natural language response to the expected final response, stored in the <code>reference</code> field. We use the ROUGE metric to calculate the similarity between the two responses.</li> </ul> <p>If no evaluation criteria are provided, the following default configuration is used:</p> <ul> <li><code>tool_trajectory_avg_score</code>: Defaults to 1.0, requiring a 100% match in the tool usage trajectory.  </li> <li><code>response_match_score</code>: Defaults to 0.8, allowing for a small margin of error in the agent's natural language responses.</li> </ul> <p>Here is an example of a <code>test_config.json</code> file specifying custom evaluation criteria:</p> <pre><code>{\n  \"criteria\": {\n    \"tool_trajectory_avg_score\": 1.0,\n    \"response_match_score\": 0.8\n  }\n}\n</code></pre>"},{"location":"evaluate/index.en/#how-to-run-evaluation-with-the-adk","title":"How to run Evaluation with the ADK","text":"<p>As a developer, you can evaluate your agents using the ADK in the following ways:</p> <ol> <li>Web-based UI (<code>adk web</code>): Evaluate agents interactively through a web-based interface.  </li> <li>Programmatically (<code>pytest</code>): Integrate evaluation into your testing pipeline using <code>pytest</code> and test files.  </li> <li>Command Line Interface (<code>adk eval</code>): Run evaluations on an existing evaluation set file directly from the command line.</li> </ol>"},{"location":"evaluate/index.en/#1-adk-web-run-evaluations-via-the-web-ui","title":"1. <code>adk web</code> - Run Evaluations via the Web UI","text":"<p>The web UI provides an interactive way to evaluate agents, generate evaluation datasets, and inspect agent behavior in detail.</p>"},{"location":"evaluate/index.en/#step-1-create-and-save-a-test-case","title":"Step 1: Create and Save a Test Case","text":"<ol> <li>Start the web server by running: <code>adk web &lt;path_to_your_agents_folder&gt;</code></li> <li>In the web interface, select an agent and interact with it to create a session.</li> <li>Navigate to the Eval tab on the right side of the interface.</li> <li>Create a new eval set or select an existing one.</li> <li>Click \"Add current session\" to save the conversation as a new evaluation case.</li> </ol>"},{"location":"evaluate/index.en/#step-2-view-and-edit-your-test-case","title":"Step 2: View and Edit Your Test Case","text":"<p>Once a case is saved, you can click its ID in the list to inspect it. To make changes, click the Edit current eval case icon (pencil). This interactive view allows you to:</p> <ul> <li>Modify agent text responses to refine test scenarios.</li> <li>Delete individual agent messages from the conversation.</li> <li>Delete the entire evaluation case if it's no longer needed.</li> </ul> <p></p>"},{"location":"evaluate/index.en/#step-3-run-the-evaluation-with-custom-metrics","title":"Step 3: Run the Evaluation with Custom Metrics","text":"<ol> <li>Select one or more test cases from your evalset.</li> <li>Click Run Evaluation. An EVALUATION METRIC dialog will appear.</li> <li>In the dialog, use the sliders to configure the thresholds for:<ul> <li>Tool trajectory avg score</li> <li>Response match score</li> </ul> </li> <li>Click Start to run the evaluation using your custom criteria. The evaluation history will record the metrics used for each run.</li> </ol>"},{"location":"evaluate/index.en/#step-4-analyze-results","title":"Step 4: Analyze Results","text":"<p>After the run completes, you can analyze the results:</p> <ul> <li>Analyze Run Failures: Click on any Pass or Fail result. For failures, you can hover over the <code>Fail</code> label to see a side-by-side comparison of the Actual vs. Expected Output and the scores that caused the failure.</li> </ul>"},{"location":"evaluate/index.en/#debugging-with-the-trace-view","title":"Debugging with the Trace View","text":"<p>The ADK web UI includes a powerful Trace tab for debugging agent behavior. This feature is available for any agent session, not just during evaluation.</p> <p>The Trace tab provides a detailed and interactive way to inspect your agent's execution flow. Traces are automatically grouped by user message, making it easy to follow the chain of events.</p> <p>Each trace row is interactive:</p> <ul> <li>Hovering over a trace row highlights the corresponding message in the chat window.</li> <li>Clicking on a trace row opens a detailed inspection panel with four tabs:<ul> <li>Event: The raw event data.</li> <li>Request: The request sent to the model.</li> <li>Response: The response received from the model.</li> <li>Graph: A visual representation of the tool calls and agent logic flow.</li> </ul> </li> </ul> <p> </p> <p>Blue rows in the trace view indicate that an event was generated from that interaction. Clicking on these blue rows will open the bottom event detail panel, providing deeper insights into the agent's execution flow.</p>"},{"location":"evaluate/index.en/#2-pytest-run-tests-programmatically","title":"2.  <code>pytest</code> - Run Tests Programmatically","text":"<p>You can also use <code>pytest</code> to run test files as part of your integration tests.</p>"},{"location":"evaluate/index.en/#example-command","title":"Example Command","text":"<pre><code>pytest tests/integration/\n</code></pre>"},{"location":"evaluate/index.en/#example-test-code","title":"Example Test Code","text":"<p>Here is an example of a <code>pytest</code> test case that runs a single test file:</p> <pre><code>from google.adk.evaluation.agent_evaluator import AgentEvaluator\nimport pytest\n\n@pytest.mark.asyncio\nasync def test_with_single_test_file():\n    \"\"\"Test the agent's basic ability via a session file.\"\"\"\n    await AgentEvaluator.evaluate(\n        agent_module=\"home_automation_agent\",\n        eval_dataset_file_path_or_dir=\"tests/integration/fixture/home_automation_agent/simple_test.test.json\",\n    )\n</code></pre> <p>This approach allows you to integrate agent evaluations into your CI/CD pipelines or larger test suites. If you want to specify the initial session state for your tests, you can do that by storing the session details in a file and passing that to <code>AgentEvaluator.evaluate</code> method.</p>"},{"location":"evaluate/index.en/#3-adk-eval-run-evaluations-via-the-cli","title":"3. <code>adk eval</code> - Run Evaluations via the CLI","text":"<p>You can also run evaluation of an eval set file through the command line interface (CLI). This runs the same evaluation that runs on the UI, but it helps with automation, i.e. you can add this command as a part of your regular build generation and verification process.</p> <p>Here is the command:</p> <pre><code>adk eval \\\n    &lt;AGENT_MODULE_FILE_PATH&gt; \\\n    &lt;EVAL_SET_FILE_PATH&gt; \\\n    [--config_file_path=&lt;PATH_TO_TEST_JSON_CONFIG_FILE&gt;] \\\n    [--print_detailed_results]\n</code></pre> <p>For example:</p> <pre><code>adk eval \\\n    samples_for_testing/hello_world \\\n    samples_for_testing/hello_world/hello_world_eval_set_001.evalset.json\n</code></pre> <p>Here are the details for each command line argument:</p> <ul> <li><code>AGENT_MODULE_FILE_PATH</code>: The path to the <code>__init__.py</code> file that contains a module by the name \"agent\". \"agent\" module contains a <code>root_agent</code>.  </li> <li><code>EVAL_SET_FILE_PATH</code>: The path to evaluations file(s). You can specify one or more eval set file paths. For each file, all evals will be run by default. If you want to run only specific evals from a eval set, first create a comma separated list of eval names and then add that as a suffix to the eval set file name, demarcated by a colon <code>:</code> .</li> <li>For example: <code>sample_eval_set_file.json:eval_1,eval_2,eval_3</code> <code>This will only run eval_1, eval_2 and eval_3 from sample_eval_set_file.json</code> </li> <li><code>CONFIG_FILE_PATH</code>: The path to the config file.  </li> <li><code>PRINT_DETAILED_RESULTS</code>: Prints detailed results on the console.</li> </ul>"},{"location":"events/","title":"Events","text":"<p>Events \u662f Agent Development Kit (ADK) \u4e2d\u8cc7\u8a0a\u6d41\u52d5\u7684\u57fa\u672c\u55ae\u4f4d\u3002\u5b83\u5011\u4ee3\u8868\u4e86 agent \u4e92\u52d5\u751f\u547d\u9031\u671f\u4e2d\u6bcf\u4e00\u500b\u91cd\u8981\u4e8b\u4ef6\uff0c\u5f9e\u4f7f\u7528\u8005\u6700\u521d\u7684\u8f38\u5165\uff0c\u5230\u6700\u7d42\u56de\u61c9\uff0c\u4ee5\u53ca\u4e2d\u9593\u7684\u6240\u6709\u6b65\u9a5f\u3002\u7406\u89e3 Events \u5341\u5206\u91cd\u8981\uff0c\u56e0\u70ba\u5b83\u5011\u662f\u5143\u4ef6\u4e4b\u9593\u6e9d\u901a\u3001\u72c0\u614b\u7ba1\u7406\u8207\u63a7\u5236\u6d41\u7a0b\u5c0e\u5411\u7684\u4e3b\u8981\u65b9\u5f0f\u3002</p>"},{"location":"events/#events_1","title":"Events \u662f\u4ec0\u9ebc\uff0c\u4ee5\u53ca\u70ba\u4ec0\u9ebc\u91cd\u8981","text":"<p>\u5728 ADK \u4e2d\uff0c<code>Event</code> \u662f\u4e00\u500b\u4e0d\u53ef\u8b8a\u7684\u7d00\u9304\uff0c\u7528\u4f86\u8868\u793a agent \u57f7\u884c\u904e\u7a0b\u4e2d\u7684\u7279\u5b9a\u6642\u523b\u3002\u5b83\u6703\u8a18\u9304\u4f7f\u7528\u8005\u8a0a\u606f\u3001agent \u56de\u8986\u3001\u5de5\u5177\u547c\u53eb\uff08function calls\uff09\u3001\u5de5\u5177\u7d50\u679c\u3001\u72c0\u614b\u8b8a\u66f4\u3001\u63a7\u5236\u8a0a\u865f\uff0c\u4ee5\u53ca\u932f\u8aa4\u7b49\u8cc7\u8a0a\u3002</p> PythonJava <p>\u6280\u8853\u4e0a\u4f86\u8aaa\uff0c\u5b83\u662f <code>google.adk.events.Event</code> \u985e\u5225\u7684\u5be6\u4f8b\uff0c\u8a72\u985e\u5225\u5728\u57fa\u790e\u7684 <code>LlmResponse</code> \u7d50\u69cb\u4e0a\uff0c\u52a0\u5165\u4e86 ADK \u5c08\u5c6c\u7684\u91cd\u8981\u4e2d\u7e7c\u8cc7\u6599\u8207 <code>actions</code> \u8ca0\u8f09\uff08payload\uff09\u3002</p> <pre><code># Conceptual Structure of an Event (Python)\n# from google.adk.events import Event, EventActions\n# from google.genai import types\n\n# class Event(LlmResponse): # Simplified view\n#     # --- LlmResponse fields ---\n#     content: Optional[types.Content]\n#     partial: Optional[bool]\n#     # ... other response fields ...\n\n#     # --- ADK specific additions ---\n#     author: str          # 'user' or agent name\n#     invocation_id: str   # ID for the whole interaction run\n#     id: str              # Unique ID for this specific event\n#     timestamp: float     # Creation time\n#     actions: EventActions # Important for side-effects &amp; control\n#     branch: Optional[str] # Hierarchy path\n#     # ...\n</code></pre> <p>\u5728 Java \u4e2d\uff0c\u9019\u662f\u4e00\u500b <code>com.google.adk.events.Event</code> \u985e\u5225\u7684\u5be6\u4f8b\u3002\u5b83\u5728\u57fa\u672c\u56de\u61c9\u7d50\u69cb\u7684\u57fa\u790e\u4e0a\uff0c\u52a0\u5165\u4e86\u5fc5\u8981\u7684 Agent Development Kit (ADK) \u5c08\u5c6c\u4e2d\u7e7c\u8cc7\u6599\u4ee5\u53ca <code>actions</code> \u8f09\u8377\uff08payload\uff09\u3002</p> <pre><code>// Conceptual Structure of an Event (Java - See com.google.adk.events.Event.java)\n// Simplified view based on the provided com.google.adk.events.Event.java\n// public class Event extends JsonBaseModel {\n//     // --- Fields analogous to LlmResponse ---\n//     private Optional&lt;Content&gt; content;\n//     private Optional&lt;Boolean&gt; partial;\n//     // ... other response fields like errorCode, errorMessage ...\n\n//     // --- ADK specific additions ---\n//     private String author;         // 'user' or agent name\n//     private String invocationId;   // ID for the whole interaction run\n//     private String id;             // Unique ID for this specific event\n//     private long timestamp;        // Creation time (epoch milliseconds)\n//     private EventActions actions;  // Important for side-effects &amp; control\n//     private Optional&lt;String&gt; branch; // Hierarchy path\n//     // ... other fields like turnComplete, longRunningToolIds etc.\n// }\n</code></pre> <p>\u4e8b\u4ef6\uff08Events\uff09\u5728 Agent Development Kit (ADK) \u7684\u904b\u4f5c\u4e2d\u626e\u6f14\u6838\u5fc3\u89d2\u8272\uff0c\u4e3b\u8981\u539f\u56e0\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u901a\u8a0a\uff08Communication\uff09\uff1a \u4e8b\u4ef6\u4f5c\u70ba\u4f7f\u7528\u8005\u4ecb\u9762\u3001<code>Runner</code>\u3001agent\u3001\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u4ee5\u53ca tools \u4e4b\u9593\u7684\u6a19\u6e96\u8a0a\u606f\u683c\u5f0f\u3002\u6240\u6709\u8cc7\u6599\u7686\u4ee5 <code>Event</code> \u7684\u5f62\u5f0f\u6d41\u52d5\u3002</p> </li> <li> <p>\u72c0\u614b\u8207\u7522\u7269\u8b8a\u66f4\u8a0a\u865f\uff08Signaling State &amp; Artifact Changes\uff09\uff1a \u4e8b\u4ef6\u627f\u8f09\u72c0\u614b\u4fee\u6539\u7684\u6307\u4ee4\uff0c\u4e26\u8ffd\u8e64\u7522\u7269\uff08artifact\uff09\u7684\u66f4\u65b0\u3002<code>SessionService</code> \u6703\u5229\u7528\u9019\u4e9b\u8a0a\u865f\u4f86\u78ba\u4fdd\u8cc7\u6599\u6301\u4e45\u5316\u3002\u5728 Python \u4e2d\uff0c\u8b8a\u66f4\u6703\u900f\u904e <code>event.actions.state_delta</code> \u548c <code>event.actions.artifact_delta</code> \u4f86\u50b3\u905e\u8a0a\u865f\u3002</p> </li> <li> <p>\u63a7\u5236\u6d41\u7a0b\uff08Control Flow\uff09\uff1a \u7279\u5b9a\u6b04\u4f4d\u5982 <code>event.actions.transfer_to_agent</code> \u6216 <code>event.actions.escalate</code> \u53ef\u4f5c\u70ba\u8a0a\u865f\uff0c\u6307\u5f15\u6846\u67b6\u6c7a\u5b9a\u4e0b\u4e00\u500b\u57f7\u884c\u7684 agent\uff0c\u6216\u5224\u65b7\u662f\u5426\u7d42\u6b62\u8ff4\u5708\u3002</p> </li> <li> <p>\u6b77\u53f2\u7d00\u9304\u8207\u53ef\u89c0\u5bdf\u6027\uff08History &amp; Observability\uff09\uff1a \u5728 <code>session.events</code> \u4e2d\u6240\u8a18\u9304\u7684\u4e8b\u4ef6\u5e8f\u5217\uff0c\u63d0\u4f9b\u5b8c\u6574\u4e14\u5177\u6642\u9593\u9806\u5e8f\u7684\u4e92\u52d5\u6b77\u7a0b\uff0c\u5c0d\u65bc\u9664\u932f\u3001\u7a3d\u6838\u4ee5\u53ca\u9010\u6b65\u7406\u89e3 agent \u884c\u70ba\u6975\u70ba\u5bf6\u8cb4\u3002</p> </li> </ol> <p>\u7e3d\u7d50\u4f86\u8aaa\uff0c\u5f9e\u4f7f\u7528\u8005\u63d0\u554f\u5230 agent \u7d66\u51fa\u6700\u7d42\u56de\u61c9\uff0c\u6574\u500b\u904e\u7a0b\u90fd\u662f\u900f\u904e<code>Event</code> \u7269\u4ef6\u7684\u7522\u751f\u3001\u89e3\u8b80\u8207\u8655\u7406\u4f86\u5354\u540c\u904b\u4f5c\u7684\u3002</p>"},{"location":"events/#understanding-and-using-events","title":"\u7406\u89e3\u8207\u4f7f\u7528\u4e8b\u4ef6\uff08Understanding and Using Events\uff09","text":"<p>\u4f5c\u70ba\u958b\u767c\u4eba\u54e1\uff0c\u4f60\u4e3b\u8981\u6703\u8207 <code>Runner</code> \u6240\u7522\u751f\u7684\u4e8b\u4ef6\u4e32\u6d41\u4e92\u52d5\u3002\u4ee5\u4e0b\u8aaa\u660e\u5982\u4f55\u7406\u89e3\u4e26\u5f9e\u4e2d\u64f7\u53d6\u8cc7\u8a0a\uff1a</p> <p>Note</p> <p>\u5404 SDK \u8a9e\u8a00\u7684\u57fa\u790e\u64cd\u4f5c\uff08primitive\uff09\u7684\u5177\u9ad4\u53c3\u6578\u6216\u65b9\u6cd5\u540d\u7a31\u53ef\u80fd\u7565\u6709\u4e0d\u540c\uff08\u4f8b\u5982\uff0cPython \u4e2d\u7684 <code>event.content()</code>\uff0cJava \u4e2d\u7684 <code>event.content().get().parts()</code>\uff09\u3002\u8a73\u7d30\u8cc7\u8a0a\u8acb\u53c3\u8003\u5404\u8a9e\u8a00\u7684 API \u6587\u4ef6\u8aaa\u660e\u3002</p>"},{"location":"events/#_1","title":"\u8fa8\u8b58\u4e8b\u4ef6\u4f86\u6e90\u8207\u985e\u578b","text":"<p>\u60a8\u53ef\u4ee5\u900f\u904e\u4ee5\u4e0b\u65b9\u5f0f\u5feb\u901f\u5224\u65b7\u4e8b\u4ef6\u7684\u610f\u7fa9\uff1a</p> <ul> <li>\u8ab0\u767c\u9001\u4e86\u9019\u500b\u4e8b\u4ef6\uff1f\uff08<code>event.author</code>\uff09<ul> <li><code>'user'</code>\uff1a\u8868\u793a\u4f86\u81ea\u6700\u7d42\u4f7f\u7528\u8005\u7684\u76f4\u63a5\u8f38\u5165\u3002</li> <li><code>'AgentName'</code>\uff1a\u8868\u793a\u4f86\u81ea\u7279\u5b9a agent \u7684\u8f38\u51fa\u6216\u52d5\u4f5c\uff08\u4f8b\u5982\uff0c<code>'WeatherAgent'</code>\u3001<code>'SummarizerAgent'</code>\uff09\u3002</li> </ul> </li> <li> <p>\u4e3b\u8981\u7684 payload \u662f\u4ec0\u9ebc\uff1f\uff08<code>event.content</code> \u8207 <code>event.content.parts</code>\uff09</p> <ul> <li>\u6587\u5b57\uff08Text\uff09\uff1a \u8868\u793a\u4e00\u5247\u5c0d\u8a71\u8a0a\u606f\u3002\u5c0d\u65bc Python\uff0c\u8acb\u6aa2\u67e5\u662f\u5426\u5b58\u5728 <code>event.content.parts[0].text</code>\u3002\u5c0d\u65bc Java\uff0c\u8acb\u78ba\u8a8d\u662f\u5426\u6709 <code>event.content()</code>\uff0c\u5176 <code>parts()</code> \u5b58\u5728\u4e14\u4e0d\u70ba\u7a7a\uff0c\u4e14\u7b2c\u4e00\u500b\u90e8\u5206\u7684 <code>text()</code> \u5b58\u5728\u3002</li> <li>\u5de5\u5177\u547c\u53eb\u8acb\u6c42\uff08Tool Call Request\uff09\uff1a \u6aa2\u67e5 <code>event.get_function_calls()</code>\u3002\u5982\u679c\u4e0d\u70ba\u7a7a\uff0c\u4ee3\u8868\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u8981\u6c42\u57f7\u884c\u4e00\u500b\u6216\u591a\u500b\u5de5\u5177\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u500b\u9805\u76ee\u90fd\u5305\u542b <code>.name</code> \u8207 <code>.args</code>\u3002</li> <li>\u5de5\u5177\u57f7\u884c\u7d50\u679c\uff08Tool Result\uff09\uff1a \u6aa2\u67e5 <code>event.get_function_responses()</code>\u3002\u5982\u679c\u4e0d\u70ba\u7a7a\uff0c\u9019\u500b\u4e8b\u4ef6\u651c\u5e36\u5de5\u5177\u57f7\u884c\u7684\u7d50\u679c\u3002\u6bcf\u500b\u9805\u76ee\u90fd\u5305\u542b <code>.name</code> \u8207 <code>.response</code>\uff08\u7531\u5de5\u5177\u56de\u50b3\u7684 dictionary\uff09\u3002\u6ce8\u610f\uff1a \u5728\u6b77\u53f2\u7d50\u69cb\u5316\u6642\uff0c<code>content</code> \u5167\u7684 <code>role</code> \u901a\u5e38\u662f <code>'user'</code>\uff0c\u4f46\u4e8b\u4ef6\u7684 <code>author</code> \u901a\u5e38\u662f\u767c\u8d77\u5de5\u5177\u547c\u53eb\u8acb\u6c42\u7684 agent\u3002</li> </ul> </li> <li> <p>\u9019\u662f\u4e32\u6d41\u8f38\u51fa\u55ce\uff1f\uff08<code>event.partial</code>\uff09     \u8868\u793a\u9019\u662f\u5426\u70ba\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u8f38\u51fa\u7684\u5c1a\u672a\u5b8c\u6210\u7684\u6587\u5b57\u7247\u6bb5\u3002</p> <ul> <li><code>True</code>\uff1a\u4e4b\u5f8c\u9084\u6703\u6709\u66f4\u591a\u6587\u5b57\u3002</li> <li><code>False</code> \u6216 <code>None</code>/<code>Optional.empty()</code>\uff1a\u9019\u90e8\u5206\u5167\u5bb9\u5df2\u5b8c\u6210\uff08\u4f46\u5982\u679c <code>turn_complete</code> \u4e5f\u70ba false\uff0c\u5247\u6574\u500b\u56de\u5408\u53ef\u80fd\u5c1a\u672a\u7d50\u675f\uff09\u3002</li> </ul> </li> </ul> PythonJava <pre><code># Pseudocode: Basic event identification (Python)\n# async for event in runner.run_async(...):\n#     print(f\"Event from: {event.author}\")\n#\n#     if event.content and event.content.parts:\n#         if event.get_function_calls():\n#             print(\"  Type: Tool Call Request\")\n#         elif event.get_function_responses():\n#             print(\"  Type: Tool Result\")\n#         elif event.content.parts[0].text:\n#             if event.partial:\n#                 print(\"  Type: Streaming Text Chunk\")\n#             else:\n#                 print(\"  Type: Complete Text Message\")\n#         else:\n#             print(\"  Type: Other Content (e.g., code result)\")\n#     elif event.actions and (event.actions.state_delta or event.actions.artifact_delta):\n#         print(\"  Type: State/Artifact Update\")\n#     else:\n#         print(\"  Type: Control Signal or Other\")\n</code></pre> <pre><code>// Pseudocode: Basic event identification (Java)\n// import com.google.genai.types.Content;\n// import com.google.adk.events.Event;\n// import com.google.adk.events.EventActions;\n\n// runner.runAsync(...).forEach(event -&gt; { // Assuming a synchronous stream or reactive stream\n//     System.out.println(\"Event from: \" + event.author());\n//\n//     if (event.content().isPresent()) {\n//         Content content = event.content().get();\n//         if (!event.functionCalls().isEmpty()) {\n//             System.out.println(\"  Type: Tool Call Request\");\n//         } else if (!event.functionResponses().isEmpty()) {\n//             System.out.println(\"  Type: Tool Result\");\n//         } else if (content.parts().isPresent() &amp;&amp; !content.parts().get().isEmpty() &amp;&amp;\n//                    content.parts().get().get(0).text().isPresent()) {\n//             if (event.partial().orElse(false)) {\n//                 System.out.println(\"  Type: Streaming Text Chunk\");\n//             } else {\n//                 System.out.println(\"  Type: Complete Text Message\");\n//             }\n//         } else {\n//             System.out.println(\"  Type: Other Content (e.g., code result)\");\n//         }\n//     } else if (event.actions() != null &amp;&amp;\n//                ((event.actions().stateDelta() != null &amp;&amp; !event.actions().stateDelta().isEmpty()) ||\n//                 (event.actions().artifactDelta() != null &amp;&amp; !event.actions().artifactDelta().isEmpty()))) {\n//         System.out.println(\"  Type: State/Artifact Update\");\n//     } else {\n//         System.out.println(\"  Type: Control Signal or Other\");\n//     }\n// });\n</code></pre>"},{"location":"events/#_2","title":"\u64f7\u53d6\u95dc\u9375\u8cc7\u8a0a","text":"<p>\u7576\u4f60\u77e5\u9053\u4e8b\u4ef6\u985e\u578b\u5f8c\uff0c\u53ef\u4ee5\u5b58\u53d6\u76f8\u95dc\u8cc7\u6599\uff1a</p> <ul> <li> <p>\u6587\u5b57\u5167\u5bb9\uff1a     \u5728\u5b58\u53d6\u6587\u5b57\u524d\uff0c\u8acb\u52d9\u5fc5\u5148\u6aa2\u67e5 content \u8207 parts \u662f\u5426\u5b58\u5728\u3002\u5728 Python \u4e2d\u70ba <code>text = event.content.parts[0].text</code>\u3002</p> </li> <li> <p>\u51fd\u5f0f\u547c\u53eb\u7d30\u7bc0\uff1a</p> PythonJava <pre><code>calls = event.get_function_calls()\nif calls:\n    for call in calls:\n        tool_name = call.name\n        arguments = call.args # This is usually a dictionary\n        print(f\"  Tool: {tool_name}, Args: {arguments}\")\n        # Application might dispatch execution based on this\n</code></pre> <pre><code>import com.google.genai.types.FunctionCall;\nimport com.google.common.collect.ImmutableList;\nimport java.util.Map;\n\nImmutableList&lt;FunctionCall&gt; calls = event.functionCalls(); // from Event.java\nif (!calls.isEmpty()) {\n  for (FunctionCall call : calls) {\n    String toolName = call.name().get();\n    // args is Optional&lt;Map&lt;String, Object&gt;&gt;\n    Map&lt;String, Object&gt; arguments = call.args().get();\n           System.out.println(\"  Tool: \" + toolName + \", Args: \" + arguments);\n    // Application might dispatch execution based on this\n  }\n}\n</code></pre> </li> <li> <p>\u51fd\u5f0f\u56de\u61c9\u7d30\u7bc0\uff1a</p> PythonJava <pre><code>responses = event.get_function_responses()\nif responses:\n    for response in responses:\n        tool_name = response.name\n        result_dict = response.response # The dictionary returned by the tool\n        print(f\"  Tool Result: {tool_name} -&gt; {result_dict}\")\n</code></pre> <pre><code>import com.google.genai.types.FunctionResponse;\nimport com.google.common.collect.ImmutableList;\nimport java.util.Map; \n\nImmutableList&lt;FunctionResponse&gt; responses = event.functionResponses(); // from Event.java\nif (!responses.isEmpty()) {\n    for (FunctionResponse response : responses) {\n        String toolName = response.name().get();\n        Map&lt;String, String&gt; result= response.response().get(); // Check before getting the response\n        System.out.println(\"  Tool Result: \" + toolName + \" -&gt; \" + result);\n    }\n}\n</code></pre> </li> <li> <p>\u8b58\u5225\u78bc\uff1a</p> <ul> <li><code>event.id</code>\uff1a\u6b64\u7279\u5b9a\u4e8b\u4ef6\u5be6\u4f8b\u7684\u552f\u4e00 ID\u3002</li> <li><code>event.invocation_id</code>\uff1a\u6b64\u4e8b\u4ef6\u6240\u5c6c\u7684\u6574\u500b\u4f7f\u7528\u8005\u8acb\u6c42\u5230\u6700\u7d42\u56de\u61c9\u9031\u671f\u7684 ID\u3002\u5c0d\u65bc\u65e5\u8a8c\u8a18\u9304\u548c\u8ffd\u8e64\u975e\u5e38\u6709\u7528\u3002</li> </ul> </li> </ul>"},{"location":"events/#_3","title":"\u5075\u6e2c\u52d5\u4f5c\u8207\u526f\u4f5c\u7528","text":"<p><code>event.actions</code> \u7269\u4ef6\u7528\u65bc\u6a19\u793a\u5df2\u767c\u751f\u6216\u61c9\u8a72\u767c\u751f\u7684\u8b8a\u66f4\u3002\u5728\u5b58\u53d6 <code>event.actions</code> \u53ca\u5176\u6b04\u4f4d\uff0f\u65b9\u6cd5\u524d\uff0c\u8acb\u52d9\u5fc5\u5148\u78ba\u8a8d\u5176\u662f\u5426\u5b58\u5728\u3002</p> <ul> <li> <p>\u72c0\u614b\u8b8a\u66f4\uff08State Changes\uff09\uff1a \u63d0\u4f9b\u5728\u7522\u751f\u6b64\u4e8b\u4ef6\u7684\u6b65\u9a5f\u4e2d\uff0csession state \u88ab\u4fee\u6539\u7684\u9375\u503c\u5c0d\u96c6\u5408\u3002</p> PythonJava <p><code>delta = event.actions.state_delta</code>\uff08<code>{key: value}</code> \u9375\u503c\u5c0d\u7684\u5b57\u5178\uff09\u3002 <pre><code>if event.actions and event.actions.state_delta:\n    print(f\"  State changes: {event.actions.state_delta}\")\n    # Update local UI or application state if necessary\n</code></pre></p> <p><code>ConcurrentMap&lt;String, Object&gt; delta = event.actions().stateDelta();</code></p> <pre><code>import java.util.concurrent.ConcurrentMap;\nimport com.google.adk.events.EventActions;\n\nEventActions actions = event.actions(); // Assuming event.actions() is not null\nif (actions != null &amp;&amp; actions.stateDelta() != null &amp;&amp; !actions.stateDelta().isEmpty()) {\n    ConcurrentMap&lt;String, Object&gt; stateChanges = actions.stateDelta();\n    System.out.println(\"  State changes: \" + stateChanges);\n    // Update local UI or application state if necessary\n}\n</code></pre> </li> <li> <p>Artifact Saves\uff1a \u63d0\u4f9b\u4e00\u500b\u96c6\u5408\uff0c\u6307\u793a\u54ea\u4e9b artifact \u5df2\u88ab\u5132\u5b58\uff0c\u4ee5\u53ca\u5b83\u5011\u7684\u65b0\u7248\u672c\u865f\uff08\u6216\u76f8\u95dc\u7684 <code>Part</code> \u8cc7\u8a0a\uff09\u3002</p> PythonJava <p><code>artifact_changes = event.actions.artifact_delta</code>\uff08<code>{filename: version}</code> \u7684\u5b57\u5178\uff09\u3002 <pre><code>if event.actions and event.actions.artifact_delta:\n    print(f\"  Artifacts saved: {event.actions.artifact_delta}\")\n    # UI might refresh an artifact list\n</code></pre></p> <p><code>ConcurrentMap&lt;String, Part&gt; artifactChanges = event.actions().artifactDelta();</code></p> <pre><code>import java.util.concurrent.ConcurrentMap;\nimport com.google.genai.types.Part;\nimport com.google.adk.events.EventActions;\n\nEventActions actions = event.actions(); // Assuming event.actions() is not null\nif (actions != null &amp;&amp; actions.artifactDelta() != null &amp;&amp; !actions.artifactDelta().isEmpty()) {\n    ConcurrentMap&lt;String, Part&gt; artifactChanges = actions.artifactDelta();\n    System.out.println(\"  Artifacts saved: \" + artifactChanges);\n    // UI might refresh an artifact list\n    // Iterate through artifactChanges.entrySet() to get filename and Part details\n}\n</code></pre> </li> <li> <p>\u63a7\u5236\u6d41\u7a0b\u8a0a\u865f\uff08Control Flow Signals\uff09\uff1a \u6aa2\u67e5\u5e03\u6797\u65d7\u6a19\u6216\u5b57\u4e32\u503c\uff1a</p> PythonJava <ul> <li><code>event.actions.transfer_to_agent</code>\uff08string\uff09\uff1a\u63a7\u5236\u6d41\u7a0b\u61c9\u8a72\u4ea4\u7531\u6307\u5b9a\u540d\u7a31\u7684 agent \u8655\u7406\u3002</li> <li><code>event.actions.escalate</code>\uff08bool\uff09\uff1a\u61c9\u8a72\u7d42\u6b62\u8ff4\u5708\u3002</li> <li><code>event.actions.skip_summarization</code>\uff08bool\uff09\uff1a\u5de5\u5177\u7d50\u679c\u4e0d\u61c9\u7531\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u9032\u884c\u6458\u8981\u3002 <pre><code>if event.actions:\n    if event.actions.transfer_to_agent:\n        print(f\"  Signal: Transfer to {event.actions.transfer_to_agent}\")\n    if event.actions.escalate:\n        print(\"  Signal: Escalate (terminate loop)\")\n    if event.actions.skip_summarization:\n        print(\"  Signal: Skip summarization for tool result\")\n</code></pre></li> </ul> <ul> <li><code>event.actions().transferToAgent()</code>\uff08\u56de\u50b3 <code>Optional&lt;String&gt;</code>\uff09\uff1a\u63a7\u5236\u6b0a\u61c9\u8a72\u4ea4\u7d66\u6307\u5b9a\u7684 agent\u3002</li> <li><code>event.actions().escalate()</code>\uff08\u56de\u50b3 <code>Optional&lt;Boolean&gt;</code>\uff09\uff1a\u61c9\u8a72\u7d42\u6b62\u8ff4\u5708\u3002</li> <li><code>event.actions().skipSummarization()</code>\uff08\u56de\u50b3 <code>Optional&lt;Boolean&gt;</code>\uff09\uff1a\u5de5\u5177\u7d50\u679c\u4e0d\u61c9\u7531\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u9032\u884c\u6458\u8981\u3002</li> </ul> <pre><code>import com.google.adk.events.EventActions;\nimport java.util.Optional;\n\nEventActions actions = event.actions(); // Assuming event.actions() is not null\nif (actions != null) {\n    Optional&lt;String&gt; transferAgent = actions.transferToAgent();\n    if (transferAgent.isPresent()) {\n        System.out.println(\"  Signal: Transfer to \" + transferAgent.get());\n    }\n\n    Optional&lt;Boolean&gt; escalate = actions.escalate();\n    if (escalate.orElse(false)) { // or escalate.isPresent() &amp;&amp; escalate.get()\n        System.out.println(\"  Signal: Escalate (terminate loop)\");\n    }\n\n    Optional&lt;Boolean&gt; skipSummarization = actions.skipSummarization();\n    if (skipSummarization.orElse(false)) { // or skipSummarization.isPresent() &amp;&amp; skipSummarization.get()\n        System.out.println(\"  Signal: Skip summarization for tool result\");\n    }\n}\n</code></pre> </li> </ul>"},{"location":"events/#_4","title":"\u5224\u65b7\u4e8b\u4ef6\u662f\u5426\u70ba\u300c\u6700\u7d42\u300d\u56de\u61c9","text":"<p>\u4f7f\u7528\u5167\u5efa\u7684\u8f14\u52a9\u51fd\u5f0f <code>event.is_final_response()</code> \u4f86\u5224\u65b7\u54ea\u4e9b\u4e8b\u4ef6\u9069\u5408\u4f5c\u70ba agent \u56de\u5408\u7684\u5b8c\u6574\u8f38\u51fa\u986f\u793a\u7d66\u4f7f\u7528\u8005\u3002</p> <ul> <li>\u76ee\u7684\uff1a \u904e\u6ffe\u6389\u4e2d\u9593\u6b65\u9a5f\uff08\u4f8b\u5982\u5de5\u5177\u547c\u53eb (tool calls)\u3001\u90e8\u5206\u4e32\u6d41\u6587\u5b57\u3001\u5167\u90e8\u72c0\u614b\u66f4\u65b0\uff09\uff0c\u50c5\u4fdd\u7559\u6700\u7d42\u8981\u5448\u73fe\u7d66\u4f7f\u7528\u8005\u7684\u8a0a\u606f\u3002</li> <li>\u4ec0\u9ebc\u6642\u5019\u6703\u662f <code>True</code>\uff1f<ol> <li>\u4e8b\u4ef6\u5305\u542b\u5de5\u5177\u7d50\u679c\uff08<code>function_response</code>\uff09\uff0c\u4e14 <code>skip_summarization</code> \u70ba <code>True</code>\u3002</li> <li>\u4e8b\u4ef6\u5305\u542b\u91dd\u5c0d\u88ab\u6a19\u8a18\u70ba <code>is_long_running=True</code> \u7684\u5de5\u5177\u6240\u9032\u884c\u7684\u5de5\u5177\u547c\u53eb (<code>function_call</code>)\u3002\u5728 Java \u4e2d\uff0c\u8acb\u6aa2\u67e5 <code>longRunningToolIds</code> \u6e05\u55ae\u662f\u5426\u70ba\u7a7a\uff1a<ul> <li><code>event.longRunningToolIds().isPresent() &amp;&amp; !event.longRunningToolIds().get().isEmpty()</code> \u70ba <code>true</code>\u3002</li> </ul> </li> <li>\u6216\u8005\uff0c\u540c\u6642\u7b26\u5408\u4ee5\u4e0b\u6240\u6709\u689d\u4ef6\uff1a<ul> <li>\u6c92\u6709 function calls\uff08<code>get_function_calls()</code> \u70ba\u7a7a\uff09\u3002</li> <li>\u6c92\u6709 function responses\uff08<code>get_function_responses()</code> \u70ba\u7a7a\uff09\u3002</li> <li>\u4e0d\u662f\u90e8\u5206\u4e32\u6d41\u7247\u6bb5\uff08<code>partial</code> \u4e0d\u662f <code>True</code>\uff09\u3002</li> <li>\u7d50\u5c3e\u4e0d\u662f\u53ef\u80fd\u9084\u9700\u8981\u9032\u4e00\u6b65\u8655\u7406\uff0f\u986f\u793a\u7684\u7a0b\u5f0f\u78bc\u57f7\u884c\u7d50\u679c\u3002</li> </ul> </li> </ol> </li> <li> <p>\u7528\u6cd5\uff1a \u5728\u60a8\u7684\u61c9\u7528\u7a0b\u5f0f\u908f\u8f2f\u4e2d\uff0c\u5c0d\u4e8b\u4ef6\u4e32\u6d41\u9032\u884c\u904e\u6ffe\u3002</p> PythonJava <pre><code># Pseudocode: Handling final responses in application (Python)\n# full_response_text = \"\"\n# async for event in runner.run_async(...):\n#     # Accumulate streaming text if needed...\n#     if event.partial and event.content and event.content.parts and event.content.parts[0].text:\n#         full_response_text += event.content.parts[0].text\n#\n#     # Check if it's a final, displayable event\n#     if event.is_final_response():\n#         print(\"\\n--- Final Output Detected ---\")\n#         if event.content and event.content.parts and event.content.parts[0].text:\n#              # If it's the final part of a stream, use accumulated text\n#              final_text = full_response_text + (event.content.parts[0].text if not event.partial else \"\")\n#              print(f\"Display to user: {final_text.strip()}\")\n#              full_response_text = \"\" # Reset accumulator\n#         elif event.actions and event.actions.skip_summarization and event.get_function_responses():\n#              # Handle displaying the raw tool result if needed\n#              response_data = event.get_function_responses()[0].response\n#              print(f\"Display raw tool result: {response_data}\")\n#         elif hasattr(event, 'long_running_tool_ids') and event.long_running_tool_ids:\n#              print(\"Display message: Tool is running in background...\")\n#         else:\n#              # Handle other types of final responses if applicable\n#              print(\"Display: Final non-textual response or signal.\")\n</code></pre> <pre><code>// Pseudocode: Handling final responses in application (Java)\nimport com.google.adk.events.Event;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.FunctionResponse;\nimport java.util.Map;\n\nStringBuilder fullResponseText = new StringBuilder();\nrunner.run(...).forEach(event -&gt; { // Assuming a stream of events\n     // Accumulate streaming text if needed...\n     if (event.partial().orElse(false) &amp;&amp; event.content().isPresent()) {\n         event.content().flatMap(Content::parts).ifPresent(parts -&gt; {\n             if (!parts.isEmpty() &amp;&amp; parts.get(0).text().isPresent()) {\n                 fullResponseText.append(parts.get(0).text().get());\n            }\n         });\n     }\n\n     // Check if it's a final, displayable event\n     if (event.finalResponse()) { // Using the method from Event.java\n         System.out.println(\"\\n--- Final Output Detected ---\");\n         if (event.content().isPresent() &amp;&amp;\n             event.content().flatMap(Content::parts).map(parts -&gt; !parts.isEmpty() &amp;&amp; parts.get(0).text().isPresent()).orElse(false)) {\n             // If it's the final part of a stream, use accumulated text\n             String eventText = event.content().get().parts().get().get(0).text().get();\n             String finalText = fullResponseText.toString() + (event.partial().orElse(false) ? \"\" : eventText);\n             System.out.println(\"Display to user: \" + finalText.trim());\n             fullResponseText.setLength(0); // Reset accumulator\n         } else if (event.actions() != null &amp;&amp; event.actions().skipSummarization().orElse(false)\n                    &amp;&amp; !event.functionResponses().isEmpty()) {\n             // Handle displaying the raw tool result if needed,\n             // especially if finalResponse() was true due to other conditions\n             // or if you want to display skipped summarization results regardless of finalResponse()\n             Map&lt;String, Object&gt; responseData = event.functionResponses().get(0).response().get();\n             System.out.println(\"Display raw tool result: \" + responseData);\n         } else if (event.longRunningToolIds().isPresent() &amp;&amp; !event.longRunningToolIds().get().isEmpty()) {\n             // This case is covered by event.finalResponse()\n             System.out.println(\"Display message: Tool is running in background...\");\n         } else {\n             // Handle other types of final responses if applicable\n             System.out.println(\"Display: Final non-textual response or signal.\");\n         }\n     }\n });\n</code></pre> </li> </ul> <p>\u900f\u904e\u4ed4\u7d30\u6aa2\u8996\u4e8b\u4ef6\u7684\u9019\u4e9b\u9762\u5411\uff0c\u4f60\u53ef\u4ee5\u6253\u9020\u51fa\u80fd\u5920\u6b63\u78ba\u56de\u61c9 Agent Development Kit (ADK) \u7cfb\u7d71\u4e2d\u8c50\u5bcc\u8cc7\u8a0a\u6d41\u7684\u5f37\u5065\u61c9\u7528\u7a0b\u5f0f\u3002</p>"},{"location":"events/#_5","title":"\u4e8b\u4ef6\u6d41\u7a0b\uff1a\u7522\u751f\u8207\u8655\u7406","text":"<p>\u4e8b\u4ef6\u6703\u5728\u4e0d\u540c\u968e\u6bb5\u88ab\u5efa\u7acb\uff0c\u4e26\u7531\u6846\u67b6\u7cfb\u7d71\u6027\u5730\u8655\u7406\u3002\u7406\u89e3\u9019\u500b\u6d41\u7a0b\u6709\u52a9\u65bc\u91d0\u6e05\u52d5\u4f5c\u8207\u6b77\u53f2\u7d00\u9304\u7684\u7ba1\u7406\u65b9\u5f0f\u3002</p> <ul> <li> <p>\u7522\u751f\u4f86\u6e90\uff1a</p> <ul> <li>\u4f7f\u7528\u8005\u8f38\u5165\uff1a <code>Runner</code> \u901a\u5e38\u6703\u5c07\u521d\u59cb\u7684\u4f7f\u7528\u8005\u8a0a\u606f\u6216\u5c0d\u8a71\u4e2d\u7684\u8f38\u5165\u5305\u88dd\u6210\u5e36\u6709 <code>author='user'</code> \u7684 <code>Event</code>\u3002</li> <li>agent \u908f\u8f2f\uff1a agent\uff08<code>BaseAgent</code>\u3001<code>LlmAgent</code>\uff09\u6703\u660e\u78ba\u5730\u5efa\u7acb <code>yield Event(...)</code> \u7269\u4ef6\uff08\u8a2d\u5b9a <code>author=self.name</code>\uff09\uff0c\u4ee5\u50b3\u905e\u56de\u61c9\u6216\u767c\u51fa\u52d5\u4f5c\u8a0a\u865f\u3002</li> <li>\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u56de\u61c9\uff1a ADK \u6a21\u578b\u6574\u5408\u5c64\u6703\u5c07\u539f\u59cb LLM \u8f38\u51fa\uff08\u6587\u5b57\u3001\u51fd\u5f0f\u547c\u53eb\u3001\u932f\u8aa4\uff09\u8f49\u63db\u70ba\u7531\u547c\u53eb agent \u6240\u7522\u751f\u7684 <code>Event</code> \u7269\u4ef6\u3002</li> <li>\u5de5\u5177\u7d50\u679c\uff1a \u5de5\u5177\u57f7\u884c\u5f8c\uff0c\u6846\u67b6\u6703\u7522\u751f\u5305\u542b <code>function_response</code> \u7684 <code>Event</code>\u3002<code>author</code> \u901a\u5e38\u662f\u8acb\u6c42\u8a72\u5de5\u5177\u7684 agent\uff0c\u800c <code>content</code> \u5167\u7684 <code>role</code> \u6703\u70ba LLM \u6b77\u53f2\u7d00\u9304\u8a2d\u70ba <code>'user'</code>\u3002</li> </ul> </li> <li> <p>\u8655\u7406\u6d41\u7a0b\uff1a</p> <ol> <li>\u8b93\u6e21\uff0f\u56de\u50b3\uff1a \u4e8b\u4ef6\u7531\u4f86\u6e90\u7522\u751f\u4e26\u4ee5 yield\uff08Python\uff09\u6216 return/emit\uff08Java\uff09\u65b9\u5f0f\u50b3\u51fa\u3002</li> <li>Runner \u63a5\u6536\uff1a \u57f7\u884c agent \u7684\u4e3b\u8981 <code>Runner</code> \u6703\u63a5\u6536\u5230\u8a72\u4e8b\u4ef6\u3002</li> <li>SessionService \u8655\u7406\uff1a <code>Runner</code> \u6703\u5c07\u4e8b\u4ef6\u50b3\u9001\u81f3\u5df2\u8a2d\u5b9a\u7684 <code>SessionService</code>\u3002\u9019\u662f\u95dc\u9375\u6b65\u9a5f\uff1a<ul> <li>\u5957\u7528\u5dee\u7570\uff08delta\uff09\uff1a \u8a72\u670d\u52d9\u6703\u5c07 <code>event.actions.state_delta</code> \u5408\u4f75\u9032 <code>session.state</code>\uff0c\u4e26\u6839\u64da <code>event.actions.artifact_delta</code> \u66f4\u65b0\u5167\u90e8\u7d00\u9304\u3002\uff08\u6ce8\u610f\uff1a\u5be6\u969b\u7684 artifact \u5132\u5b58 \u901a\u5e38\u5728\u5148\u524d\u547c\u53eb <code>context.save_artifact</code> \u6642\u5df2\u7d93\u5b8c\u6210\uff09</li> <li>\u6700\u7d42\u5316\u4e2d\u7e7c\u8cc7\u6599\uff1a \u82e5\u5c1a\u672a\u5b58\u5728\uff0c\u6703\u6307\u6d3e\u552f\u4e00\u7684 <code>event.id</code>\uff0c\u4e26\u53ef\u80fd\u66f4\u65b0 <code>event.timestamp</code>\u3002</li> <li>\u5beb\u5165\u6b77\u53f2\u7d00\u9304\uff1a \u5c07\u8655\u7406\u5f8c\u7684\u4e8b\u4ef6\u9644\u52a0\u5230 <code>session.events</code> \u6e05\u55ae\u4e2d\u3002</li> </ul> </li> <li>\u5c0d\u5916\u8b93\u6e21\uff1a <code>Runner</code> \u6703\u5c07\u8655\u7406\u5f8c\u7684\u4e8b\u4ef6\u4ee5 yield\uff08Python\uff09\u6216 return/emit\uff08Java\uff09\u65b9\u5f0f\u50b3\u905e\u7d66\u547c\u53eb\u61c9\u7528\u7a0b\u5f0f\uff08\u4f8b\u5982\uff0c\u547c\u53eb <code>runner.run_async</code> \u7684\u7a0b\u5f0f\u78bc\uff09\u3002</li> </ol> </li> </ul> <p>\u6b64\u6d41\u7a0b\u53ef\u78ba\u4fdd\u6bcf\u500b\u4e8b\u4ef6\u7684\u72c0\u614b\u8b8a\u66f4\u8207\u6b77\u53f2\u7d00\u9304\uff0c\u6703\u8207\u5176\u6e9d\u901a\u5167\u5bb9\u4e00\u4f75\u4e00\u81f4\u5730\u88ab\u8a18\u9304\u4e0b\u4f86\u3002</p>"},{"location":"events/#_6","title":"\u5e38\u898b\u4e8b\u4ef6\u7bc4\u4f8b\uff08\u8aaa\u660e\u6027\u6a21\u5f0f\uff09","text":"<p>\u4ee5\u4e0b\u662f\u4f60\u5728\u4e8b\u4ef6\u4e32\u6d41\u4e2d\u53ef\u80fd\u6703\u770b\u5230\u7684\u5178\u578b\u4e8b\u4ef6\u7c21\u8981\u7bc4\u4f8b\uff1a</p> <ul> <li>\u4f7f\u7528\u8005\u8f38\u5165\uff1a <pre><code>{\n  \"author\": \"user\",\n  \"invocation_id\": \"e-xyz...\",\n  \"content\": {\"parts\": [{\"text\": \"Book a flight to London for next Tuesday\"}]}\n  // actions usually empty\n}\n</code></pre></li> <li>Agent \u6700\u7d42\u6587\u5b57\u56de\u61c9\uff1a (<code>is_final_response() == True</code>)     <pre><code>{\n  \"author\": \"TravelAgent\",\n  \"invocation_id\": \"e-xyz...\",\n  \"content\": {\"parts\": [{\"text\": \"Okay, I can help with that. Could you confirm the departure city?\"}]},\n  \"partial\": false,\n  \"turn_complete\": true\n  // actions might have state delta, etc.\n}\n</code></pre></li> <li>Agent \u4e32\u6d41\u6587\u5b57\u56de\u61c9\uff1a (<code>is_final_response() == False</code>)     <pre><code>{\n  \"author\": \"SummaryAgent\",\n  \"invocation_id\": \"e-abc...\",\n  \"content\": {\"parts\": [{\"text\": \"The document discusses three main points:\"}]},\n  \"partial\": true,\n  \"turn_complete\": false\n}\n// ... more partial=True events follow ...\n</code></pre></li> <li>\u5de5\u5177\u547c\u53eb\u8acb\u6c42\uff08\u7531\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u767c\u8d77\uff09\uff1a (<code>is_final_response() == False</code>)     <pre><code>{\n  \"author\": \"TravelAgent\",\n  \"invocation_id\": \"e-xyz...\",\n  \"content\": {\"parts\": [{\"function_call\": {\"name\": \"find_airports\", \"args\": {\"city\": \"London\"}}}]}\n  // actions usually empty\n}\n</code></pre></li> <li>\u5de5\u5177\u7d50\u679c\u5df2\u63d0\u4f9b\uff08\u7d66\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\uff09\uff1a\uff08<code>is_final_response()</code> \u4f9d\u8cf4\u65bc <code>skip_summarization</code>\uff09     <pre><code>{\n  \"author\": \"TravelAgent\", // Author is agent that requested the call\n  \"invocation_id\": \"e-xyz...\",\n  \"content\": {\n    \"role\": \"user\", // Role for LLM history\n    \"parts\": [{\"function_response\": {\"name\": \"find_airports\", \"response\": {\"result\": [\"LHR\", \"LGW\", \"STN\"]}}}]\n  }\n  // actions might have skip_summarization=True\n}\n</code></pre></li> <li>\u50c5\u9650 State/Artifact \u66f4\u65b0\uff1a\uff08<code>is_final_response() == False</code>\uff09     <pre><code>{\n  \"author\": \"InternalUpdater\",\n  \"invocation_id\": \"e-def...\",\n  \"content\": null,\n  \"actions\": {\n    \"state_delta\": {\"user_status\": \"verified\"},\n    \"artifact_delta\": {\"verification_doc.pdf\": 2}\n  }\n}\n</code></pre></li> <li>Agent \u8f49\u79fb\u8a0a\u865f\uff1a (<code>is_final_response() == False</code>)     <pre><code>{\n  \"author\": \"OrchestratorAgent\",\n  \"invocation_id\": \"e-789...\",\n  \"content\": {\"parts\": [{\"function_call\": {\"name\": \"transfer_to_agent\", \"args\": {\"agent_name\": \"BillingAgent\"}}}]},\n  \"actions\": {\"transfer_to_agent\": \"BillingAgent\"} // Added by framework\n}\n</code></pre></li> <li>\u8ff4\u5708\u5347\u7d1a\u8a0a\u865f\uff1a (<code>is_final_response() == False</code>)     <pre><code>{\n  \"author\": \"CheckerAgent\",\n  \"invocation_id\": \"e-loop...\",\n  \"content\": {\"parts\": [{\"text\": \"Maximum retries reached.\"}]}, // Optional content\n  \"actions\": {\"escalate\": true}\n}\n</code></pre></li> </ul>"},{"location":"events/#_7","title":"\u5176\u4ed6\u4e0a\u4e0b\u6587\u8207\u4e8b\u4ef6\u7d30\u7bc0","text":"<p>\u9664\u4e86\u6838\u5fc3\u6982\u5ff5\u5916\uff0c\u4ee5\u4e0b\u662f\u95dc\u65bc\u4e0a\u4e0b\u6587\u8207\u4e8b\u4ef6\u7684\u4e00\u4e9b\u7279\u5b9a\u7d30\u7bc0\uff0c\u5c0d\u67d0\u4e9b\u4f7f\u7528\u60c5\u5883\u4f86\u8aaa\u975e\u5e38\u91cd\u8981\uff1a</p> <ol> <li> <p><code>ToolContext.function_call_id</code>\uff08\u5de5\u5177\u52d5\u4f5c\u9023\u7d50\uff09\uff1a</p> <ul> <li>\u7576\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u8acb\u6c42\u4e00\u500b\u5de5\u5177\uff08FunctionCall\uff09\u6642\uff0c\u8a72\u8acb\u6c42\u6703\u6709\u4e00\u500b ID\u3002\u50b3\u905e\u7d66\u4f60\u7684\u5de5\u5177\u51fd\u5f0f\u7684 <code>ToolContext</code> \u6703\u5305\u542b\u9019\u500b <code>function_call_id</code>\u3002</li> <li>\u91cd\u8981\u6027\uff1a \u9019\u500b ID \u5c0d\u65bc\u5c07\u50cf\u662f\u9a57\u8b49\u7b49\u52d5\u4f5c\u56de\u6eaf\u5230\u767c\u8d77\u5b83\u5011\u7684\u7279\u5b9a\u5de5\u5177\u8acb\u6c42\u975e\u5e38\u95dc\u9375\uff0c\u7279\u5225\u662f\u5728\u55ae\u4e00\u56de\u5408\u4e2d\u547c\u53eb\u591a\u500b\u5de5\u5177\u6642\u3002\u6846\u67b6\u6703\u5728\u5167\u90e8\u4f7f\u7528\u9019\u500b ID\u3002</li> </ul> </li> <li> <p>\u72c0\u614b\uff0f\u7522\u7269\u8b8a\u66f4\u7684\u8a18\u9304\u65b9\u5f0f\uff1a</p> <ul> <li>\u7576\u4f60\u4f7f\u7528 <code>CallbackContext</code> \u6216 <code>ToolContext</code> \u4fee\u6539 state \u6216\u5132\u5b58 artifact \u6642\uff0c\u9019\u4e9b\u8b8a\u66f4\u4e0d\u6703\u7acb\u5373\u5beb\u5165\u6c38\u4e45\u6027\u5132\u5b58\u3002</li> <li>\u76f8\u53cd\u5730\uff0c\u9019\u4e9b\u8b8a\u66f4\u6703\u586b\u5165 <code>EventActions</code> \u7269\u4ef6\u4e2d\u7684 <code>state_delta</code> \u8207 <code>artifact_delta</code> \u6b04\u4f4d\u3002</li> <li>\u9019\u500b <code>EventActions</code> \u7269\u4ef6\u6703\u9644\u52a0\u5728\u8b8a\u66f4\u767c\u751f\u5f8c\u7522\u751f\u7684\u300c\u4e0b\u4e00\u500b\u4e8b\u4ef6\u300d\u4e0a\uff08\u4f8b\u5982 agent \u7684\u56de\u61c9\u6216\u5de5\u5177\u7d50\u679c\u4e8b\u4ef6\uff09\u3002</li> <li><code>SessionService.append_event</code> \u65b9\u6cd5\u6703\u5f9e\u6536\u5230\u7684\u4e8b\u4ef6\u4e2d\u8b80\u53d6\u9019\u4e9b delta\uff0c\u4e26\u5c07\u5b83\u5011\u5957\u7528\u5230 session \u7684\u6c38\u4e45\u72c0\u614b\u8207 artifact \u8a18\u9304\u3002\u9019\u53ef\u78ba\u4fdd\u8b8a\u66f4\u4f9d\u6642\u9593\u9806\u5e8f\u8207\u4e8b\u4ef6\u6d41\u7d81\u5b9a\u3002</li> </ul> </li> <li> <p>State \u7bc4\u570d\u524d\u7db4\uff08<code>app:</code>\u3001<code>user:</code>\u3001<code>temp:</code>\uff09\uff1a</p> <ul> <li>\u7576\u4f60\u900f\u904e <code>context.state</code> \u7ba1\u7406 state \u6642\uff0c\u53ef\u4ee5\u9078\u64c7\u6027\u5730\u4f7f\u7528\u524d\u7db4\uff1a<ul> <li><code>app:my_setting</code>\uff1a\u8868\u793a\u8207\u6574\u500b\u61c9\u7528\u7a0b\u5f0f\u76f8\u95dc\u7684 state\uff08\u9700\u8981\u6301\u4e45\u5316\u7684 <code>SessionService</code>\uff09\u3002</li> <li><code>user:user_preference</code>\uff1a\u8868\u793a\u8207\u7279\u5b9a\u4f7f\u7528\u8005\u8de8 session \u76f8\u95dc\u7684 state\uff08\u9700\u8981\u6301\u4e45\u5316\u7684 <code>SessionService</code>\uff09\u3002</li> <li><code>temp:intermediate_result</code> \u6216\u7121\u524d\u7db4\uff1a\u901a\u5e38\u70ba\u672c\u6b21\u547c\u53eb\u7684 session \u7279\u5b9a\u6216\u66ab\u6642\u6027 state\u3002</li> </ul> </li> <li>\u5e95\u5c64\u7684 <code>SessionService</code> \u6703\u6c7a\u5b9a\u9019\u4e9b\u524d\u7db4\u5728\u6301\u4e45\u5316\u6642\u7684\u8655\u7406\u65b9\u5f0f\u3002</li> </ul> </li> <li> <p>\u932f\u8aa4\u4e8b\u4ef6\uff1a</p> <ul> <li><code>Event</code> \u53ef\u4ee5\u4ee3\u8868\u4e00\u500b\u932f\u8aa4\u3002\u8acb\u6aa2\u67e5 <code>event.error_code</code> \u8207 <code>event.error_message</code> \u6b04\u4f4d\uff08\u7e7c\u627f\u81ea <code>LlmResponse</code>\uff09\u3002</li> <li>\u932f\u8aa4\u53ef\u80fd\u4f86\u81ea\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\uff08\u4f8b\u5982\u5b89\u5168\u904e\u6ffe\u3001\u8cc7\u6e90\u9650\u5236\uff09\uff0c\u4e5f\u53ef\u80fd\u662f\u6846\u67b6\u5728\u5de5\u5177\u56b4\u91cd\u5931\u6557\u6642\u5305\u88dd\u7684\u3002\u8acb\u6aa2\u67e5\u5de5\u5177 <code>FunctionResponse</code> \u5167\u5bb9\u4ee5\u7372\u5f97\u5e38\u898b\u7684\u5de5\u5177\u5c08\u5c6c\u932f\u8aa4\u3002 <pre><code>// Example Error Event (conceptual)\n{\n  \"author\": \"LLMAgent\",\n  \"invocation_id\": \"e-err...\",\n  \"content\": null,\n  \"error_code\": \"SAFETY_FILTER_TRIGGERED\",\n  \"error_message\": \"Response blocked due to safety settings.\",\n  \"actions\": {}\n}\n</code></pre></li> </ul> </li> </ol> <p>\u9019\u4e9b\u7d30\u7bc0\u70ba\u9032\u968e\u61c9\u7528\u5834\u666f\uff08\u5982\u5de5\u5177\u9a57\u8b49\u3001\u72c0\u614b\u6301\u4e45\u5316\u7bc4\u570d\uff0c\u4ee5\u53ca\u4e8b\u4ef6\u6d41\u4e2d\u7684\u932f\u8aa4\u8655\u7406\uff09\u63d0\u4f9b\u4e86\u66f4\u5b8c\u6574\u7684\u8aaa\u660e\u3002</p>"},{"location":"events/#_8","title":"\u4f7f\u7528\u4e8b\u4ef6\u7684\u6700\u4f73\u5be6\u8e10","text":"<p>\u8981\u5728\u4f60\u7684 Agent Development Kit (ADK) \u61c9\u7528\u7a0b\u5f0f\u4e2d\u6709\u6548\u904b\u7528\u4e8b\u4ef6\uff0c\u8acb\u9075\u5faa\u4ee5\u4e0b\u5efa\u8b70\uff1a</p> <ul> <li> <p>\u660e\u78ba\u6a19\u8a3b\u4f5c\u8005\uff08Clear Authorship\uff09\uff1a \u7576\u4f60\u5efa\u7acb\u81ea\u8a02 agent \u6642\uff0c\u8acb\u78ba\u4fdd agent \u884c\u70ba\u5728\u6b77\u53f2\u7d00\u9304\u4e2d\u6b63\u78ba\u6b78\u5c6c\u3002\u6846\u67b6\u901a\u5e38\u6703\u6b63\u78ba\u8655\u7406\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)/\u5de5\u5177\u4e8b\u4ef6\u7684\u4f5c\u8005\u8cc7\u8a0a\u3002</p> PythonJava <p>\u5728<code>BaseAgent</code>\u7684\u5b50\u985e\u5225\u4e2d\u4f7f\u7528<code>yield Event(author=self.name, ...)</code>\u3002</p> <p>\u5728\u81ea\u8a02 agent \u908f\u8f2f\u4e2d\u5efa\u7acb<code>Event</code>\u6642\uff0c\u8acb\u8a2d\u5b9a\u4f5c\u8005\uff0c\u4f8b\u5982\uff1a<code>Event.builder().author(this.getAgentName()) // ... .build();</code></p> </li> <li> <p>\u8a9e\u610f\u5167\u5bb9\u8207\u52d5\u4f5c\uff08Semantic Content &amp; Actions\uff09\uff1a \u8acb\u4f7f\u7528<code>event.content</code>\u4f86\u627f\u8f09\u6838\u5fc3\u8a0a\u606f/\u8cc7\u6599\uff08\u6587\u5b57\u3001\u51fd\u5f0f\u547c\u53eb/\u56de\u61c9\uff09\u3002\u91dd\u5c0d\u526f\u4f5c\u7528\uff08\u72c0\u614b/\u7522\u7269\u8b8a\u66f4\uff09\u6216\u63a7\u5236\u6d41\u7a0b\uff08<code>transfer</code>\u3001<code>escalate</code>\u3001<code>skip_summarization</code>\uff09\uff0c\u8acb\u5c08\u9580\u4f7f\u7528<code>event.actions</code>\u4f86\u6a19\u793a\u3002</p> </li> <li>\u51aa\u7b49\u6027\u610f\u8b58\uff08Idempotency Awareness\uff09\uff1a \u8acb\u7406\u89e3<code>SessionService</code>\u8ca0\u8cac\u5957\u7528<code>event.actions</code>\u4e2d\u6a19\u793a\u7684\u72c0\u614b/\u7522\u7269\u8b8a\u66f4\u3002\u96d6\u7136 ADK \u670d\u52d9\u81f4\u529b\u65bc\u4fdd\u6301\u4e00\u81f4\u6027\uff0c\u4f46\u82e5\u4f60\u7684\u61c9\u7528\u908f\u8f2f\u91cd\u8907\u8655\u7406\u4e8b\u4ef6\uff0c\u8acb\u8003\u616e\u53ef\u80fd\u7684\u4e0b\u6e38\u5f71\u97ff\u3002</li> <li>\u5584\u7528<code>is_final_response()</code>\uff1a \u5728\u4f60\u7684\u61c9\u7528/UI \u5c64\u4e2d\uff0c\u8acb\u4f9d\u8cf4\u9019\u500b\u8f14\u52a9\u65b9\u6cd5\u4f86\u5224\u65b7\u5b8c\u6574\u3001\u9762\u5411\u4f7f\u7528\u8005\u7684\u6587\u5b57\u56de\u61c9\u3002\u907f\u514d\u624b\u52d5\u91cd\u73fe\u5176\u908f\u8f2f\u3002</li> <li>\u5584\u7528\u6b77\u53f2\u7d00\u9304\uff08Leverage History\uff09\uff1a session \u7684\u4e8b\u4ef6\u5217\u8868\u662f\u4f60\u4e3b\u8981\u7684\u9664\u932f\u5de5\u5177\u3002\u6aa2\u67e5\u4f5c\u8005\u3001\u5167\u5bb9\u8207\u52d5\u4f5c\u7684\u9806\u5e8f\uff0c\u4ee5\u8ffd\u8e64\u57f7\u884c\u6d41\u7a0b\u4e26\u8a3a\u65b7\u554f\u984c\u3002</li> <li>\u4f7f\u7528\u4e2d\u7e7c\u8cc7\u6599\uff08Use Metadata\uff09\uff1a \u8acb\u5229\u7528<code>invocation_id</code>\u4f86\u95dc\u806f\u55ae\u4e00\u4f7f\u7528\u8005\u4e92\u52d5\u4e2d\u7684\u6240\u6709\u4e8b\u4ef6\u3002\u4f7f\u7528<code>event.id</code>\u4f86\u53c3\u7167\u7279\u5b9a\u4e14\u552f\u4e00\u7684\u4e8b\u4ef6\u767c\u751f\u3002</li> </ul> <p>\u5c07\u4e8b\u4ef6\u8996\u70ba\u5177\u5099\u660e\u78ba\u5167\u5bb9\u8207\u52d5\u4f5c\u7d50\u69cb\u7684\u8a0a\u606f\uff0c\u662f\u5728 ADK \u4e2d\u5efa\u69cb\u3001\u9664\u932f\u8207\u7ba1\u7406\u8907\u96dc agent \u884c\u70ba\u7684\u95dc\u9375\u3002</p>"},{"location":"events/index.en/","title":"Events","text":"<p>Events are the fundamental units of information flow within the Agent Development Kit (ADK). They represent every significant occurrence during an agent's interaction lifecycle, from initial user input to the final response and all the steps in between. Understanding events is crucial because they are the primary way components communicate, state is managed, and control flow is directed.</p>"},{"location":"events/index.en/#what-events-are-and-why-they-matter","title":"What Events Are and Why They Matter","text":"<p>An <code>Event</code> in ADK is an immutable record representing a specific point in the agent's execution. It captures user messages, agent replies, requests to use tools (function calls), tool results, state changes, control signals, and errors.</p> PythonJava <p>Technically, it's an instance of the <code>google.adk.events.Event</code> class, which builds upon the basic <code>LlmResponse</code> structure by adding essential ADK-specific metadata and an <code>actions</code> payload.</p> <pre><code># Conceptual Structure of an Event (Python)\n# from google.adk.events import Event, EventActions\n# from google.genai import types\n\n# class Event(LlmResponse): # Simplified view\n#     # --- LlmResponse fields ---\n#     content: Optional[types.Content]\n#     partial: Optional[bool]\n#     # ... other response fields ...\n\n#     # --- ADK specific additions ---\n#     author: str          # 'user' or agent name\n#     invocation_id: str   # ID for the whole interaction run\n#     id: str              # Unique ID for this specific event\n#     timestamp: float     # Creation time\n#     actions: EventActions # Important for side-effects &amp; control\n#     branch: Optional[str] # Hierarchy path\n#     # ...\n</code></pre> <p>In Java, this is an instance of the <code>com.google.adk.events.Event</code> class. It also builds upon a basic response structure by adding essential ADK-specific metadata and an <code>actions</code> payload.</p> <pre><code>// Conceptual Structure of an Event (Java - See com.google.adk.events.Event.java)\n// Simplified view based on the provided com.google.adk.events.Event.java\n// public class Event extends JsonBaseModel {\n//     // --- Fields analogous to LlmResponse ---\n//     private Optional&lt;Content&gt; content;\n//     private Optional&lt;Boolean&gt; partial;\n//     // ... other response fields like errorCode, errorMessage ...\n\n//     // --- ADK specific additions ---\n//     private String author;         // 'user' or agent name\n//     private String invocationId;   // ID for the whole interaction run\n//     private String id;             // Unique ID for this specific event\n//     private long timestamp;        // Creation time (epoch milliseconds)\n//     private EventActions actions;  // Important for side-effects &amp; control\n//     private Optional&lt;String&gt; branch; // Hierarchy path\n//     // ... other fields like turnComplete, longRunningToolIds etc.\n// }\n</code></pre> <p>Events are central to ADK's operation for several key reasons:</p> <ol> <li> <p>Communication: They serve as the standard message format between the user interface, the <code>Runner</code>, agents, the LLM, and tools. Everything flows as an <code>Event</code>.</p> </li> <li> <p>Signaling State &amp; Artifact Changes: Events carry instructions for state modifications and track artifact updates. The <code>SessionService</code> uses these signals to ensure persistence. In Python changes are signaled via <code>event.actions.state_delta</code> and <code>event.actions.artifact_delta</code>.</p> </li> <li> <p>Control Flow: Specific fields like <code>event.actions.transfer_to_agent</code> or <code>event.actions.escalate</code> act as signals that direct the framework, determining which agent runs next or if a loop should terminate.</p> </li> <li> <p>History &amp; Observability: The sequence of events recorded in <code>session.events</code> provides a complete, chronological history of an interaction, invaluable for debugging, auditing, and understanding agent behavior step-by-step.</p> </li> </ol> <p>In essence, the entire process, from a user's query to the agent's final answer, is orchestrated through the generation, interpretation, and processing of <code>Event</code> objects.</p>"},{"location":"events/index.en/#understanding-and-using-events","title":"Understanding and Using Events","text":"<p>As a developer, you'll primarily interact with the stream of events yielded by the <code>Runner</code>. Here's how to understand and extract information from them:</p> <p>Note</p> <p>The specific parameters or method names for the primitives may vary slightly by SDK language (e.g., <code>event.content()</code> in Python, <code>event.content().get().parts()</code> in Java). Refer to the language-specific API documentation for details.</p>"},{"location":"events/index.en/#identifying-event-origin-and-type","title":"Identifying Event Origin and Type","text":"<p>Quickly determine what an event represents by checking:</p> <ul> <li>Who sent it? (<code>event.author</code>)<ul> <li><code>'user'</code>: Indicates input directly from the end-user.</li> <li><code>'AgentName'</code>: Indicates output or action from a specific agent (e.g., <code>'WeatherAgent'</code>, <code>'SummarizerAgent'</code>).</li> </ul> </li> <li> <p>What's the main payload? (<code>event.content</code> and <code>event.content.parts</code>)</p> <ul> <li>Text: Indicates a conversational message. For Python, check if <code>event.content.parts[0].text</code> exists. For Java, check if <code>event.content()</code> is present, its <code>parts()</code> are present and not empty, and the first part's <code>text()</code> is present.</li> <li>Tool Call Request: Check <code>event.get_function_calls()</code>. If not empty, the LLM is asking to execute one or more tools. Each item in the list has <code>.name</code> and <code>.args</code>.</li> <li>Tool Result: Check <code>event.get_function_responses()</code>. If not empty, this event carries the result(s) from tool execution(s). Each item has <code>.name</code> and <code>.response</code> (the dictionary returned by the tool). Note: For history structuring, the <code>role</code> inside the <code>content</code> is often <code>'user'</code>, but the event <code>author</code> is typically the agent that requested the tool call.</li> </ul> </li> <li> <p>Is it streaming output? (<code>event.partial</code>)     Indicates whether this is an incomplete chunk of text from the LLM.</p> <ul> <li><code>True</code>: More text will follow.</li> <li><code>False</code> or <code>None</code>/<code>Optional.empty()</code>: This part of the content is complete (though the overall turn might not be finished if <code>turn_complete</code> is also false).</li> </ul> </li> </ul> PythonJava <pre><code># Pseudocode: Basic event identification (Python)\n# async for event in runner.run_async(...):\n#     print(f\"Event from: {event.author}\")\n#\n#     if event.content and event.content.parts:\n#         if event.get_function_calls():\n#             print(\"  Type: Tool Call Request\")\n#         elif event.get_function_responses():\n#             print(\"  Type: Tool Result\")\n#         elif event.content.parts[0].text:\n#             if event.partial:\n#                 print(\"  Type: Streaming Text Chunk\")\n#             else:\n#                 print(\"  Type: Complete Text Message\")\n#         else:\n#             print(\"  Type: Other Content (e.g., code result)\")\n#     elif event.actions and (event.actions.state_delta or event.actions.artifact_delta):\n#         print(\"  Type: State/Artifact Update\")\n#     else:\n#         print(\"  Type: Control Signal or Other\")\n</code></pre> <pre><code>// Pseudocode: Basic event identification (Java)\n// import com.google.genai.types.Content;\n// import com.google.adk.events.Event;\n// import com.google.adk.events.EventActions;\n\n// runner.runAsync(...).forEach(event -&gt; { // Assuming a synchronous stream or reactive stream\n//     System.out.println(\"Event from: \" + event.author());\n//\n//     if (event.content().isPresent()) {\n//         Content content = event.content().get();\n//         if (!event.functionCalls().isEmpty()) {\n//             System.out.println(\"  Type: Tool Call Request\");\n//         } else if (!event.functionResponses().isEmpty()) {\n//             System.out.println(\"  Type: Tool Result\");\n//         } else if (content.parts().isPresent() &amp;&amp; !content.parts().get().isEmpty() &amp;&amp;\n//                    content.parts().get().get(0).text().isPresent()) {\n//             if (event.partial().orElse(false)) {\n//                 System.out.println(\"  Type: Streaming Text Chunk\");\n//             } else {\n//                 System.out.println(\"  Type: Complete Text Message\");\n//             }\n//         } else {\n//             System.out.println(\"  Type: Other Content (e.g., code result)\");\n//         }\n//     } else if (event.actions() != null &amp;&amp;\n//                ((event.actions().stateDelta() != null &amp;&amp; !event.actions().stateDelta().isEmpty()) ||\n//                 (event.actions().artifactDelta() != null &amp;&amp; !event.actions().artifactDelta().isEmpty()))) {\n//         System.out.println(\"  Type: State/Artifact Update\");\n//     } else {\n//         System.out.println(\"  Type: Control Signal or Other\");\n//     }\n// });\n</code></pre>"},{"location":"events/index.en/#extracting-key-information","title":"Extracting Key Information","text":"<p>Once you know the event type, access the relevant data:</p> <ul> <li> <p>Text Content:     Always check for the presence of content and parts before accessing text. In Python its <code>text = event.content.parts[0].text</code>.</p> </li> <li> <p>Function Call Details:</p> PythonJava <pre><code>calls = event.get_function_calls()\nif calls:\n    for call in calls:\n        tool_name = call.name\n        arguments = call.args # This is usually a dictionary\n        print(f\"  Tool: {tool_name}, Args: {arguments}\")\n        # Application might dispatch execution based on this\n</code></pre> <pre><code>import com.google.genai.types.FunctionCall;\nimport com.google.common.collect.ImmutableList;\nimport java.util.Map;\n\nImmutableList&lt;FunctionCall&gt; calls = event.functionCalls(); // from Event.java\nif (!calls.isEmpty()) {\n  for (FunctionCall call : calls) {\n    String toolName = call.name().get();\n    // args is Optional&lt;Map&lt;String, Object&gt;&gt;\n    Map&lt;String, Object&gt; arguments = call.args().get();\n           System.out.println(\"  Tool: \" + toolName + \", Args: \" + arguments);\n    // Application might dispatch execution based on this\n  }\n}\n</code></pre> </li> <li> <p>Function Response Details:</p> PythonJava <pre><code>responses = event.get_function_responses()\nif responses:\n    for response in responses:\n        tool_name = response.name\n        result_dict = response.response # The dictionary returned by the tool\n        print(f\"  Tool Result: {tool_name} -&gt; {result_dict}\")\n</code></pre> <pre><code>import com.google.genai.types.FunctionResponse;\nimport com.google.common.collect.ImmutableList;\nimport java.util.Map; \n\nImmutableList&lt;FunctionResponse&gt; responses = event.functionResponses(); // from Event.java\nif (!responses.isEmpty()) {\n    for (FunctionResponse response : responses) {\n        String toolName = response.name().get();\n        Map&lt;String, String&gt; result= response.response().get(); // Check before getting the response\n        System.out.println(\"  Tool Result: \" + toolName + \" -&gt; \" + result);\n    }\n}\n</code></pre> </li> <li> <p>Identifiers:</p> <ul> <li><code>event.id</code>: Unique ID for this specific event instance.</li> <li><code>event.invocation_id</code>: ID for the entire user-request-to-final-response cycle this event belongs to. Useful for logging and tracing.</li> </ul> </li> </ul>"},{"location":"events/index.en/#detecting-actions-and-side-effects","title":"Detecting Actions and Side Effects","text":"<p>The <code>event.actions</code> object signals changes that occurred or should occur. Always check if <code>event.actions</code> and it's fields/ methods exists before accessing them.</p> <ul> <li> <p>State Changes: Gives you a collection of key-value pairs that were modified in the session state during the step that produced this event.</p> PythonJava <p><code>delta = event.actions.state_delta</code> (a dictionary of <code>{key: value}</code> pairs). <pre><code>if event.actions and event.actions.state_delta:\n    print(f\"  State changes: {event.actions.state_delta}\")\n    # Update local UI or application state if necessary\n</code></pre></p> <p><code>ConcurrentMap&lt;String, Object&gt; delta = event.actions().stateDelta();</code></p> <pre><code>import java.util.concurrent.ConcurrentMap;\nimport com.google.adk.events.EventActions;\n\nEventActions actions = event.actions(); // Assuming event.actions() is not null\nif (actions != null &amp;&amp; actions.stateDelta() != null &amp;&amp; !actions.stateDelta().isEmpty()) {\n    ConcurrentMap&lt;String, Object&gt; stateChanges = actions.stateDelta();\n    System.out.println(\"  State changes: \" + stateChanges);\n    // Update local UI or application state if necessary\n}\n</code></pre> </li> <li> <p>Artifact Saves: Gives you a collection indicating which artifacts were saved and their new version number (or relevant <code>Part</code> information).</p> PythonJava <p><code>artifact_changes = event.actions.artifact_delta</code> (a dictionary of <code>{filename: version}</code>). <pre><code>if event.actions and event.actions.artifact_delta:\n    print(f\"  Artifacts saved: {event.actions.artifact_delta}\")\n    # UI might refresh an artifact list\n</code></pre></p> <p><code>ConcurrentMap&lt;String, Part&gt; artifactChanges = event.actions().artifactDelta();</code></p> <pre><code>import java.util.concurrent.ConcurrentMap;\nimport com.google.genai.types.Part;\nimport com.google.adk.events.EventActions;\n\nEventActions actions = event.actions(); // Assuming event.actions() is not null\nif (actions != null &amp;&amp; actions.artifactDelta() != null &amp;&amp; !actions.artifactDelta().isEmpty()) {\n    ConcurrentMap&lt;String, Part&gt; artifactChanges = actions.artifactDelta();\n    System.out.println(\"  Artifacts saved: \" + artifactChanges);\n    // UI might refresh an artifact list\n    // Iterate through artifactChanges.entrySet() to get filename and Part details\n}\n</code></pre> </li> <li> <p>Control Flow Signals: Check boolean flags or string values:</p> PythonJava <ul> <li><code>event.actions.transfer_to_agent</code> (string): Control should pass to the named agent.</li> <li><code>event.actions.escalate</code> (bool): A loop should terminate.</li> <li><code>event.actions.skip_summarization</code> (bool): A tool result should not be summarized by the LLM. <pre><code>if event.actions:\n    if event.actions.transfer_to_agent:\n        print(f\"  Signal: Transfer to {event.actions.transfer_to_agent}\")\n    if event.actions.escalate:\n        print(\"  Signal: Escalate (terminate loop)\")\n    if event.actions.skip_summarization:\n        print(\"  Signal: Skip summarization for tool result\")\n</code></pre></li> </ul> <ul> <li><code>event.actions().transferToAgent()</code> (returns <code>Optional&lt;String&gt;</code>): Control should pass to the named agent.</li> <li><code>event.actions().escalate()</code> (returns <code>Optional&lt;Boolean&gt;</code>): A loop should terminate.</li> <li><code>event.actions().skipSummarization()</code> (returns <code>Optional&lt;Boolean&gt;</code>): A tool result should not be summarized by the LLM.</li> </ul> <pre><code>import com.google.adk.events.EventActions;\nimport java.util.Optional;\n\nEventActions actions = event.actions(); // Assuming event.actions() is not null\nif (actions != null) {\n    Optional&lt;String&gt; transferAgent = actions.transferToAgent();\n    if (transferAgent.isPresent()) {\n        System.out.println(\"  Signal: Transfer to \" + transferAgent.get());\n    }\n\n    Optional&lt;Boolean&gt; escalate = actions.escalate();\n    if (escalate.orElse(false)) { // or escalate.isPresent() &amp;&amp; escalate.get()\n        System.out.println(\"  Signal: Escalate (terminate loop)\");\n    }\n\n    Optional&lt;Boolean&gt; skipSummarization = actions.skipSummarization();\n    if (skipSummarization.orElse(false)) { // or skipSummarization.isPresent() &amp;&amp; skipSummarization.get()\n        System.out.println(\"  Signal: Skip summarization for tool result\");\n    }\n}\n</code></pre> </li> </ul>"},{"location":"events/index.en/#determining-if-an-event-is-a-final-response","title":"Determining if an Event is a \"Final\" Response","text":"<p>Use the built-in helper method <code>event.is_final_response()</code> to identify events suitable for display as the agent's complete output for a turn.</p> <ul> <li>Purpose: Filters out intermediate steps (like tool calls, partial streaming text, internal state updates) from the final user-facing message(s).</li> <li>When <code>True</code>?<ol> <li>The event contains a tool result (<code>function_response</code>) and <code>skip_summarization</code> is <code>True</code>.</li> <li>The event contains a tool call (<code>function_call</code>) for a tool marked as <code>is_long_running=True</code>. In Java, check if the <code>longRunningToolIds</code> list is empty: <ul> <li><code>event.longRunningToolIds().isPresent() &amp;&amp; !event.longRunningToolIds().get().isEmpty()</code> is <code>true</code>.</li> </ul> </li> <li>OR, all of the following are met:<ul> <li>No function calls (<code>get_function_calls()</code> is empty).</li> <li>No function responses (<code>get_function_responses()</code> is empty).</li> <li>Not a partial stream chunk (<code>partial</code> is not <code>True</code>).</li> <li>Doesn't end with a code execution result that might need further processing/display.</li> </ul> </li> </ol> </li> <li> <p>Usage: Filter the event stream in your application logic.</p> PythonJava <pre><code># Pseudocode: Handling final responses in application (Python)\n# full_response_text = \"\"\n# async for event in runner.run_async(...):\n#     # Accumulate streaming text if needed...\n#     if event.partial and event.content and event.content.parts and event.content.parts[0].text:\n#         full_response_text += event.content.parts[0].text\n#\n#     # Check if it's a final, displayable event\n#     if event.is_final_response():\n#         print(\"\\n--- Final Output Detected ---\")\n#         if event.content and event.content.parts and event.content.parts[0].text:\n#              # If it's the final part of a stream, use accumulated text\n#              final_text = full_response_text + (event.content.parts[0].text if not event.partial else \"\")\n#              print(f\"Display to user: {final_text.strip()}\")\n#              full_response_text = \"\" # Reset accumulator\n#         elif event.actions and event.actions.skip_summarization and event.get_function_responses():\n#              # Handle displaying the raw tool result if needed\n#              response_data = event.get_function_responses()[0].response\n#              print(f\"Display raw tool result: {response_data}\")\n#         elif hasattr(event, 'long_running_tool_ids') and event.long_running_tool_ids:\n#              print(\"Display message: Tool is running in background...\")\n#         else:\n#              # Handle other types of final responses if applicable\n#              print(\"Display: Final non-textual response or signal.\")\n</code></pre> <pre><code>// Pseudocode: Handling final responses in application (Java)\nimport com.google.adk.events.Event;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.FunctionResponse;\nimport java.util.Map;\n\nStringBuilder fullResponseText = new StringBuilder();\nrunner.run(...).forEach(event -&gt; { // Assuming a stream of events\n     // Accumulate streaming text if needed...\n     if (event.partial().orElse(false) &amp;&amp; event.content().isPresent()) {\n         event.content().flatMap(Content::parts).ifPresent(parts -&gt; {\n             if (!parts.isEmpty() &amp;&amp; parts.get(0).text().isPresent()) {\n                 fullResponseText.append(parts.get(0).text().get());\n            }\n         });\n     }\n\n     // Check if it's a final, displayable event\n     if (event.finalResponse()) { // Using the method from Event.java\n         System.out.println(\"\\n--- Final Output Detected ---\");\n         if (event.content().isPresent() &amp;&amp;\n             event.content().flatMap(Content::parts).map(parts -&gt; !parts.isEmpty() &amp;&amp; parts.get(0).text().isPresent()).orElse(false)) {\n             // If it's the final part of a stream, use accumulated text\n             String eventText = event.content().get().parts().get().get(0).text().get();\n             String finalText = fullResponseText.toString() + (event.partial().orElse(false) ? \"\" : eventText);\n             System.out.println(\"Display to user: \" + finalText.trim());\n             fullResponseText.setLength(0); // Reset accumulator\n         } else if (event.actions() != null &amp;&amp; event.actions().skipSummarization().orElse(false)\n                    &amp;&amp; !event.functionResponses().isEmpty()) {\n             // Handle displaying the raw tool result if needed,\n             // especially if finalResponse() was true due to other conditions\n             // or if you want to display skipped summarization results regardless of finalResponse()\n             Map&lt;String, Object&gt; responseData = event.functionResponses().get(0).response().get();\n             System.out.println(\"Display raw tool result: \" + responseData);\n         } else if (event.longRunningToolIds().isPresent() &amp;&amp; !event.longRunningToolIds().get().isEmpty()) {\n             // This case is covered by event.finalResponse()\n             System.out.println(\"Display message: Tool is running in background...\");\n         } else {\n             // Handle other types of final responses if applicable\n             System.out.println(\"Display: Final non-textual response or signal.\");\n         }\n     }\n });\n</code></pre> </li> </ul> <p>By carefully examining these aspects of an event, you can build robust applications that react appropriately to the rich information flowing through the ADK system.</p>"},{"location":"events/index.en/#how-events-flow-generation-and-processing","title":"How Events Flow: Generation and Processing","text":"<p>Events are created at different points and processed systematically by the framework. Understanding this flow helps clarify how actions and history are managed.</p> <ul> <li> <p>Generation Sources:</p> <ul> <li>User Input: The <code>Runner</code> typically wraps initial user messages or mid-conversation inputs into an <code>Event</code> with <code>author='user'</code>.</li> <li>Agent Logic: Agents (<code>BaseAgent</code>, <code>LlmAgent</code>) explicitly <code>yield Event(...)</code> objects (setting <code>author=self.name</code>) to communicate responses or signal actions.</li> <li>LLM Responses: The ADK model integration layer translates raw LLM output (text, function calls, errors) into <code>Event</code> objects, authored by the calling agent.</li> <li>Tool Results: After a tool executes, the framework generates an <code>Event</code> containing the <code>function_response</code>. The <code>author</code> is typically the agent that requested the tool, while the <code>role</code> inside the <code>content</code> is set to <code>'user'</code> for the LLM history.</li> </ul> </li> <li> <p>Processing Flow:</p> <ol> <li>Yield/Return: An event is generated and yielded (Python) or returned/emitted (Java) by its source.</li> <li>Runner Receives: The main <code>Runner</code> executing the agent receives the event.</li> <li>SessionService Processing: The <code>Runner</code> sends the event to the configured <code>SessionService</code>. This is a critical step:<ul> <li>Applies Deltas: The service merges <code>event.actions.state_delta</code> into <code>session.state</code> and updates internal records based on <code>event.actions.artifact_delta</code>. (Note: The actual artifact saving usually happened earlier when <code>context.save_artifact</code> was called).</li> <li>Finalizes Metadata: Assigns a unique <code>event.id</code> if not present, may update <code>event.timestamp</code>.</li> <li>Persists to History: Appends the processed event to the <code>session.events</code> list.</li> </ul> </li> <li>External Yield: The <code>Runner</code> yields (Python) or returns/emits (Java) the processed event outwards to the calling application (e.g., the code that invoked <code>runner.run_async</code>).</li> </ol> </li> </ul> <p>This flow ensures that state changes and history are consistently recorded alongside the communication content of each event.</p>"},{"location":"events/index.en/#common-event-examples-illustrative-patterns","title":"Common Event Examples (Illustrative Patterns)","text":"<p>Here are concise examples of typical events you might see in the stream:</p> <ul> <li>User Input: <pre><code>{\n  \"author\": \"user\",\n  \"invocation_id\": \"e-xyz...\",\n  \"content\": {\"parts\": [{\"text\": \"Book a flight to London for next Tuesday\"}]}\n  // actions usually empty\n}\n</code></pre></li> <li>Agent Final Text Response: (<code>is_final_response() == True</code>)     <pre><code>{\n  \"author\": \"TravelAgent\",\n  \"invocation_id\": \"e-xyz...\",\n  \"content\": {\"parts\": [{\"text\": \"Okay, I can help with that. Could you confirm the departure city?\"}]},\n  \"partial\": false,\n  \"turn_complete\": true\n  // actions might have state delta, etc.\n}\n</code></pre></li> <li>Agent Streaming Text Response: (<code>is_final_response() == False</code>)     <pre><code>{\n  \"author\": \"SummaryAgent\",\n  \"invocation_id\": \"e-abc...\",\n  \"content\": {\"parts\": [{\"text\": \"The document discusses three main points:\"}]},\n  \"partial\": true,\n  \"turn_complete\": false\n}\n// ... more partial=True events follow ...\n</code></pre></li> <li>Tool Call Request (by LLM): (<code>is_final_response() == False</code>)     <pre><code>{\n  \"author\": \"TravelAgent\",\n  \"invocation_id\": \"e-xyz...\",\n  \"content\": {\"parts\": [{\"function_call\": {\"name\": \"find_airports\", \"args\": {\"city\": \"London\"}}}]}\n  // actions usually empty\n}\n</code></pre></li> <li>Tool Result Provided (to LLM): (<code>is_final_response()</code> depends on <code>skip_summarization</code>)     <pre><code>{\n  \"author\": \"TravelAgent\", // Author is agent that requested the call\n  \"invocation_id\": \"e-xyz...\",\n  \"content\": {\n    \"role\": \"user\", // Role for LLM history\n    \"parts\": [{\"function_response\": {\"name\": \"find_airports\", \"response\": {\"result\": [\"LHR\", \"LGW\", \"STN\"]}}}]\n  }\n  // actions might have skip_summarization=True\n}\n</code></pre></li> <li>State/Artifact Update Only: (<code>is_final_response() == False</code>)     <pre><code>{\n  \"author\": \"InternalUpdater\",\n  \"invocation_id\": \"e-def...\",\n  \"content\": null,\n  \"actions\": {\n    \"state_delta\": {\"user_status\": \"verified\"},\n    \"artifact_delta\": {\"verification_doc.pdf\": 2}\n  }\n}\n</code></pre></li> <li>Agent Transfer Signal: (<code>is_final_response() == False</code>)     <pre><code>{\n  \"author\": \"OrchestratorAgent\",\n  \"invocation_id\": \"e-789...\",\n  \"content\": {\"parts\": [{\"function_call\": {\"name\": \"transfer_to_agent\", \"args\": {\"agent_name\": \"BillingAgent\"}}}]},\n  \"actions\": {\"transfer_to_agent\": \"BillingAgent\"} // Added by framework\n}\n</code></pre></li> <li>Loop Escalation Signal: (<code>is_final_response() == False</code>)     <pre><code>{\n  \"author\": \"CheckerAgent\",\n  \"invocation_id\": \"e-loop...\",\n  \"content\": {\"parts\": [{\"text\": \"Maximum retries reached.\"}]}, // Optional content\n  \"actions\": {\"escalate\": true}\n}\n</code></pre></li> </ul>"},{"location":"events/index.en/#additional-context-and-event-details","title":"Additional Context and Event Details","text":"<p>Beyond the core concepts, here are a few specific details about context and events that are important for certain use cases:</p> <ol> <li> <p><code>ToolContext.function_call_id</code> (Linking Tool Actions):</p> <ul> <li>When an LLM requests a tool (FunctionCall), that request has an ID. The <code>ToolContext</code> provided to your tool function includes this <code>function_call_id</code>.</li> <li>Importance: This ID is crucial for linking actions like authentication back to the specific tool request that initiated them, especially if multiple tools are called in one turn. The framework uses this ID internally.</li> </ul> </li> <li> <p>How State/Artifact Changes are Recorded:</p> <ul> <li>When you modify state or save an artifact using <code>CallbackContext</code> or <code>ToolContext</code>, these changes aren't immediately written to persistent storage.</li> <li>Instead, they populate the <code>state_delta</code> and <code>artifact_delta</code> fields within the <code>EventActions</code> object.</li> <li>This <code>EventActions</code> object is attached to the next event generated after the change (e.g., the agent's response or a tool result event).</li> <li>The <code>SessionService.append_event</code> method reads these deltas from the incoming event and applies them to the session's persistent state and artifact records. This ensures changes are tied chronologically to the event stream.</li> </ul> </li> <li> <p>State Scope Prefixes (<code>app:</code>, <code>user:</code>, <code>temp:</code>):</p> <ul> <li>When managing state via <code>context.state</code>, you can optionally use prefixes:<ul> <li><code>app:my_setting</code>: Suggests state relevant to the entire application (requires a persistent <code>SessionService</code>).</li> <li><code>user:user_preference</code>: Suggests state relevant to the specific user across sessions (requires a persistent <code>SessionService</code>).</li> <li><code>temp:intermediate_result</code> or no prefix: Typically session-specific or temporary state for the current invocation.</li> </ul> </li> <li>The underlying <code>SessionService</code> determines how these prefixes are handled for persistence.</li> </ul> </li> <li> <p>Error Events:</p> <ul> <li>An <code>Event</code> can represent an error. Check the <code>event.error_code</code> and <code>event.error_message</code> fields (inherited from <code>LlmResponse</code>).</li> <li>Errors might originate from the LLM (e.g., safety filters, resource limits) or potentially be packaged by the framework if a tool fails critically. Check tool <code>FunctionResponse</code> content for typical tool-specific errors. <pre><code>// Example Error Event (conceptual)\n{\n  \"author\": \"LLMAgent\",\n  \"invocation_id\": \"e-err...\",\n  \"content\": null,\n  \"error_code\": \"SAFETY_FILTER_TRIGGERED\",\n  \"error_message\": \"Response blocked due to safety settings.\",\n  \"actions\": {}\n}\n</code></pre></li> </ul> </li> </ol> <p>These details provide a more complete picture for advanced use cases involving tool authentication, state persistence scope, and error handling within the event stream.</p>"},{"location":"events/index.en/#best-practices-for-working-with-events","title":"Best Practices for Working with Events","text":"<p>To use events effectively in your ADK applications:</p> <ul> <li> <p>Clear Authorship: When building custom agents, ensure correct attribution for agent actions in the history. The framework generally handles authorship correctly for LLM/tool events.</p> PythonJava <p>Use <code>yield Event(author=self.name, ...)</code> in <code>BaseAgent</code> subclasses.</p> <p>When constructing an <code>Event</code> in your custom agent logic, set the author, for example: <code>Event.builder().author(this.getAgentName()) // ... .build();</code></p> </li> <li> <p>Semantic Content &amp; Actions: Use <code>event.content</code> for the core message/data (text, function call/response). Use <code>event.actions</code> specifically for signaling side effects (state/artifact deltas) or control flow (<code>transfer</code>, <code>escalate</code>, <code>skip_summarization</code>).</p> </li> <li>Idempotency Awareness: Understand that the <code>SessionService</code> is responsible for applying the state/artifact changes signaled in <code>event.actions</code>. While ADK services aim for consistency, consider potential downstream effects if your application logic re-processes events.</li> <li>Use <code>is_final_response()</code>: Rely on this helper method in your application/UI layer to identify complete, user-facing text responses. Avoid manually replicating its logic.</li> <li>Leverage History: The session's event list is your primary debugging tool. Examine the sequence of authors, content, and actions to trace execution and diagnose issues.</li> <li>Use Metadata: Use <code>invocation_id</code> to correlate all events within a single user interaction. Use <code>event.id</code> to reference specific, unique occurrences.</li> </ul> <p>Treating events as structured messages with clear purposes for their content and actions is key to building, debugging, and managing complex agent behaviors in ADK.</p>"},{"location":"get-started/","title":"\u958b\u59cb\u4f7f\u7528","text":"<p>Agent Development Kit (ADK) \u65e8\u5728\u5354\u52a9\u958b\u767c\u8005\u6253\u9020\u3001\u7ba1\u7406\u3001\u8a55\u4f30\u8207\u90e8\u7f72 AI \u9a45\u52d5\u7684 agent\u3002\u5b83\u63d0\u4f9b\u4e00\u500b\u5f37\u5927\u4e14\u9748\u6d3b\u7684\u74b0\u5883\uff0c\u8b93\u4f60\u53ef\u4ee5\u5efa\u7acb\u5177\u5099\u8655\u7406\u8907\u96dc\u4efb\u52d9\u8207\u5de5\u4f5c\u6d41\u7a0b\u80fd\u529b\u7684\u5c0d\u8a71\u5f0f\u8207\u975e\u5c0d\u8a71\u5f0f agent\u3002</p> <ul> <li> <p> \u5b89\u88dd\u6307\u5357</p> <p>\u70ba Python \u6216 Java \u5b89\u88dd <code>google-adk</code>\uff0c\u5e7e\u5206\u9418\u5167\u5373\u53ef\u958b\u59cb\u4f7f\u7528\u3002</p> <p> \u66f4\u591a\u8cc7\u8a0a</p> </li> <li> <p> \u5feb\u901f\u958b\u59cb</p> <p>\u5e7e\u5206\u9418\u5167\u4f7f\u7528 tools \u5efa\u7acb\u4f60\u7684\u7b2c\u4e00\u500b ADK agent\u3002</p> <p> \u66f4\u591a\u8cc7\u8a0a</p> </li> <li> <p> \u5feb\u901f\u958b\u59cb\uff08\u4e32\u6d41\uff09</p> <p>\u5efa\u7acb\u4f60\u7684\u7b2c\u4e00\u500b\u4e32\u6d41 ADK agent\u3002</p> <p> \u66f4\u591a\u8cc7\u8a0a</p> </li> <li> <p> \u6559\u5b78\u8ab2\u7a0b</p> <p>\u5efa\u7acb\u4f60\u7684\u7b2c\u4e00\u500b ADK \u591a agent\u3002</p> <p> \u66f4\u591a\u8cc7\u8a0a</p> </li> <li> <p> \u63a2\u7d22\u7bc4\u4f8b\u4ee3\u7406</p> <p>\u63a2\u7d22\u96f6\u552e\u3001\u65c5\u904a\u3001\u5ba2\u670d\u7b49\u591a\u7a2e\u7bc4\u4f8b\u4ee3\u7406\uff08Sample Agents\uff09\uff01</p> <p> \u7acb\u5373\u63a2\u7d22 adk-samples</p> </li> <li> <p> \u95dc\u65bc</p> <p>\u4e86\u89e3\u5efa\u7acb\u8207\u90e8\u7f72 ADK agent \u7684\u95dc\u9375\u7d44\u4ef6\u3002</p> <p> \u66f4\u591a\u8cc7\u8a0a</p> </li> </ul>"},{"location":"get-started/about.en/","title":"Agent Development Kit (ADK)","text":"<p>  Build, Evaluate and Deploy agents, seamlessly!  </p> <p>ADK is designed to empower developers to build, manage, evaluate and deploy AI-powered agents. It provides a robust and flexible environment for creating both conversational and non-conversational agents, capable of handling complex tasks and workflows.</p> <p></p>"},{"location":"get-started/about.en/#core-concepts","title":"Core Concepts","text":"<p>ADK is built around a few key primitives and concepts that make it powerful and flexible. Here are the essentials:</p> <ul> <li>Agent: The fundamental worker unit designed for specific tasks. Agents can   use language models (<code>LlmAgent</code>) for complex reasoning, or act as deterministic controllers of the execution, which are called \"workflow agents\" (<code>SequentialAgent</code>, <code>ParallelAgent</code>, <code>LoopAgent</code>).</li> <li>Tool: Gives agents abilities beyond conversation, letting them interact   with external APIs, search information, run code, or call other services.</li> <li>Callbacks: Custom code snippets you provide to run at specific points in   the agent's process, allowing for checks, logging, or behavior modifications.</li> <li>Session Management (<code>Session</code> &amp; <code>State</code>): Handles the context of a single   conversation (<code>Session</code>), including its history (<code>Events</code>) and the agent's   working memory for that conversation (<code>State</code>).</li> <li>Memory: Enables agents to recall information about a user across   multiple sessions, providing long-term context (distinct from short-term   session <code>State</code>).</li> <li>Artifact Management (<code>Artifact</code>): Allows agents to save, load, and manage   files or binary data (like images, PDFs) associated with a session or user.</li> <li>Code Execution: The ability for agents (usually via Tools) to generate and   execute code to perform complex calculations or actions.</li> <li>Planning: An advanced capability where agents can break down complex goals   into smaller steps and plan how to achieve them like a ReAct planner.</li> <li>Models: The underlying LLM that powers <code>LlmAgent</code>s, enabling their   reasoning and language understanding abilities.</li> <li>Event: The basic unit of communication representing things that happen   during a session (user message, agent reply, tool use), forming the   conversation history.</li> <li>Runner: The engine that manages the execution flow, orchestrates agent   interactions based on Events, and coordinates with backend services.</li> </ul> <p>Note: Features like Multimodal Streaming, Evaluation, Deployment, Debugging, and Trace are also part of the broader ADK ecosystem, supporting real-time interaction and the development lifecycle.</p>"},{"location":"get-started/about.en/#key-capabilities","title":"Key Capabilities","text":"<p>ADK offers several key advantages for developers building agentic applications:</p> <ol> <li>Multi-Agent System Design: Easily build applications composed of    multiple, specialized agents arranged hierarchically. Agents can coordinate    complex tasks, delegate sub-tasks using LLM-driven transfer or explicit    <code>AgentTool</code> invocation, enabling modular and scalable solutions.</li> <li>Rich Tool Ecosystem: Equip agents with diverse capabilities. ADK    supports integrating custom functions (<code>FunctionTool</code>), using other agents as    tools (<code>AgentTool</code>), leveraging built-in functionalities like code execution,    and interacting with external data sources and APIs (e.g., Search,    Databases). Support for long-running tools allows handling asynchronous    operations effectively.</li> <li>Flexible Orchestration: Define complex agent workflows using built-in    workflow agents (<code>SequentialAgent</code>, <code>ParallelAgent</code>, <code>LoopAgent</code>) alongside    LLM-driven dynamic routing. This allows for both predictable pipelines and    adaptive agent behavior.</li> <li>Integrated Developer Tooling: Develop and iterate locally with ease.    ADK includes tools like a command-line interface (CLI) and a Developer    UI for running agents, inspecting execution steps (events, state changes),    debugging interactions, and visualizing agent definitions.</li> <li>Native Streaming Support: Build real-time, interactive experiences with    native support for bidirectional streaming (text and audio). This integrates    seamlessly with underlying capabilities like the    Multimodal Live API for the Gemini Developer API    (or for    Vertex AI),    often enabled with simple configuration changes.</li> <li>Built-in Agent Evaluation: Assess agent performance systematically. The    framework includes tools to create multi-turn evaluation datasets and run    evaluations locally (via CLI or the dev UI) to measure quality and    guide improvements.</li> <li>Broad LLM Support: While optimized for Google's Gemini models, the    framework is designed for flexibility, allowing integration with various LLMs    (potentially including open-source or fine-tuned models) through its    <code>BaseLlm</code> interface.</li> <li>Artifact Management: Enable agents to handle files and binary data. The    framework provides mechanisms (<code>ArtifactService</code>, context methods) for agents    to save, load, and manage versioned artifacts like images, documents, or    generated reports during their execution.</li> <li>Extensibility and Interoperability: ADK promotes an open    ecosystem. While providing core tools, it allows developers to easily    integrate and reuse tools from other popular agent frameworks including    LangChain and CrewAI.</li> <li>State and Memory Management: Automatically handles short-term     conversational memory (<code>State</code> within a <code>Session</code>) managed by the     <code>SessionService</code>. Provides integration points for longer-term <code>Memory</code>     services, allowing agents to recall user information across multiple     sessions.</li> </ol> <p></p>"},{"location":"get-started/about.en/#get-started","title":"Get Started","text":"<ul> <li>Ready to build your first agent? Try the quickstart</li> </ul>"},{"location":"get-started/about/","title":"Agent Development Kit (ADK)","text":"<p>  \u7121\u7e2b\u6253\u9020\u3001\u8a55\u4f30\u8207\u90e8\u7f72 agent\uff01 </p> <p>Agent Development Kit (ADK) \u5c08\u70ba\u5354\u52a9\u958b\u767c\u8005\u6253\u9020\u3001\u7ba1\u7406\u3001\u8a55\u4f30\u8207\u90e8\u7f72 AI \u9a45\u52d5\u7684 agent \u800c\u8a2d\u8a08\u3002ADK \u63d0\u4f9b\u4e00\u500b\u5f37\u5927\u4e14\u5f48\u6027\u7684\u74b0\u5883\uff0c\u8b93\u4f60\u80fd\u5920\u5efa\u7acb\u5c0d\u8a71\u578b\u8207\u975e\u5c0d\u8a71\u578b agent\uff0c\u8655\u7406\u8907\u96dc\u4efb\u52d9\u8207\u5de5\u4f5c\u6d41\u7a0b\u3002</p> <p></p>"},{"location":"get-started/about/#_1","title":"\u6838\u5fc3\u6982\u5ff5","text":"<p>Agent Development Kit (ADK) \u570d\u7e5e\u5e7e\u500b\u95dc\u9375\u539f\u8a9e\u8207\u6982\u5ff5\u8a2d\u8a08\uff0c\u8b93\u5176\u65e2\u5f37\u5927\u53c8\u9748\u6d3b\u3002\u4ee5\u4e0b\u662f\u91cd\u9ede\u8aaa\u660e\uff1a</p> <ul> <li>agent\uff1a \u91dd\u5c0d\u7279\u5b9a\u4efb\u52d9\u8a2d\u8a08\u7684\u57fa\u672c\u5de5\u4f5c\u55ae\u5143\u3002agent \u53ef\u4ee5\u904b\u7528\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\uff08<code>LlmAgent</code>\uff09\u9032\u884c\u8907\u96dc\u63a8\u7406\uff0c\u6216\u4f5c\u70ba\u57f7\u884c\u6d41\u7a0b\u7684\u78ba\u5b9a\u6027\u63a7\u5236\u5668\uff0c\u9019\u985e agent \u7a31\u70ba\u300cworkflow agent\u300d\uff08<code>SequentialAgent</code>\u3001<code>ParallelAgent</code>\u3001<code>LoopAgent</code>\uff09\u3002</li> <li>tool\uff1a \u8b93 agent \u64c1\u6709\u8d85\u8d8a\u5c0d\u8a71\u7684\u80fd\u529b\uff0c\u80fd\u8207\u5916\u90e8 API \u4e92\u52d5\u3001\u641c\u5c0b\u8cc7\u8a0a\u3001\u57f7\u884c\u7a0b\u5f0f\u78bc\u6216\u547c\u53eb\u5176\u4ed6\u670d\u52d9\u3002</li> <li>Callbacks\uff1a \u4f60\u53ef\u81ea\u8a02\u7684\u7a0b\u5f0f\u78bc\u7247\u6bb5\uff0c\u65bc agent \u57f7\u884c\u904e\u7a0b\u4e2d\u7684\u7279\u5b9a\u6642\u6a5f\u9ede\u57f7\u884c\uff0c\u7528\u65bc\u6aa2\u67e5\u3001\u8a18\u9304\u6216\u4fee\u6539\u884c\u70ba\u3002</li> <li>Session Management\uff08<code>Session</code> &amp; <code>State</code>\uff09\uff1a \u8ca0\u8cac\u8655\u7406\u55ae\u4e00\u5c0d\u8a71\uff08<code>Session</code>\uff09\u7684\u4e0a\u4e0b\u6587\uff0c\u5305\u62ec\u5176\u6b77\u53f2\u7d00\u9304\uff08<code>Events</code>\uff09\u4ee5\u53ca\u8a72\u5c0d\u8a71\u7684 agent \u5de5\u4f5c\u8a18\u61b6\u9ad4\uff08<code>State</code>\uff09\u3002</li> <li>Memory\uff1a \u8b93 agent \u80fd\u5920\u5728\u591a\u500b session \u9593\u8a18\u4f4f\u4f7f\u7528\u8005\u8cc7\u8a0a\uff0c\u63d0\u4f9b\u9577\u671f\u4e0a\u4e0b\u6587\uff08\u6709\u5225\u65bc\u77ed\u671f session <code>State</code>\uff09\u3002</li> <li>Artifact Management\uff08<code>Artifact</code>\uff09\uff1a \u5141\u8a31 agent \u5132\u5b58\u3001\u8f09\u5165\u8207\u7ba1\u7406\u8207 session \u6216\u4f7f\u7528\u8005\u76f8\u95dc\u7684\u6a94\u6848\u6216\u4e8c\u9032\u4f4d\u8cc7\u6599\uff08\u5982\u5716\u7247\u3001PDF\uff09\u3002</li> <li>Code Execution\uff1a \u8b93 agent\uff08\u901a\u5e38\u900f\u904e Tool\uff09\u80fd\u5920\u7522\u751f\u4e26\u57f7\u884c\u7a0b\u5f0f\u78bc\uff0c\u4ee5\u5b8c\u6210\u8907\u96dc\u8a08\u7b97\u6216\u52d5\u4f5c\u3002</li> <li>Planning\uff1a \u9032\u968e\u529f\u80fd\uff0cagent \u80fd\u5c07\u8907\u96dc\u76ee\u6a19\u62c6\u89e3\u70ba\u66f4\u5c0f\u6b65\u9a5f\u4e26\u898f\u5283\u5982\u4f55\u9054\u6210\uff0c\u985e\u4f3c ReAct \u898f\u5283\u5668\u3002</li> <li>Models\uff1a \u63d0\u4f9b agent \u63a8\u7406\u8207\u8a9e\u8a00\u7406\u89e3\u80fd\u529b\u7684\u5e95\u5c64\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\u3002</li> <li>Event\uff1a \u6e9d\u901a\u7684\u57fa\u672c\u55ae\u4f4d\uff0c\u4ee3\u8868 session \u904e\u7a0b\u4e2d\u767c\u751f\u7684\u4e8b\u4ef6\uff08\u5982\u4f7f\u7528\u8005\u8a0a\u606f\u3001agent \u56de\u8986\u3001\u5de5\u5177\u4f7f\u7528\uff09\uff0c\u5171\u540c\u69cb\u6210\u5c0d\u8a71\u6b77\u53f2\u3002</li> <li>Runner\uff1a \u7ba1\u7406\u57f7\u884c\u6d41\u7a0b\u7684\u5f15\u64ce\uff0c\u6839\u64da Event \u5354\u8abf agent \u4e92\u52d5\uff0c\u4e26\u8207\u5f8c\u7aef\u670d\u52d9\u5354\u4f5c\u3002</li> </ul> <p>\u6ce8\u610f\uff1a \u591a\u6a21\u614b\u4e32\u6d41\u3001\u8a55\u4f30\u3001\u90e8\u7f72\u3001\u9664\u932f\u8207\u8ffd\u8e64\u7b49\u529f\u80fd\uff0c\u4e5f\u662f ADK \u751f\u614b\u7cfb\u7684\u4e00\u90e8\u5206\uff0c\u652f\u63f4\u5373\u6642\u4e92\u52d5\u8207\u958b\u767c\u751f\u547d\u9031\u671f\u3002</p>"},{"location":"get-started/about/#_2","title":"\u4e3b\u8981\u529f\u80fd","text":"<p>Agent Development Kit (ADK) \u70ba\u958b\u767c agent \u61c9\u7528\u63d0\u4f9b\u591a\u9805\u95dc\u9375\u512a\u52e2\uff1a</p> <ol> <li>\u591a agent \u7cfb\u7d71\u8a2d\u8a08\uff1a \u8f15\u9b06\u6253\u9020\u7531\u591a\u500b\u5c08\u696d\u5316 agent \u5c64\u7d1a\u7d44\u6210\u7684\u61c9\u7528\u3002agent \u53ef\u5354\u4f5c\u8655\u7406\u8907\u96dc\u4efb\u52d9\uff0c\u900f\u904e LLM \u9a45\u52d5\u7684\u8f49\u79fb\u6216\u660e\u78ba\u7684 <code>AgentTool</code> \u547c\u53eb\u5206\u6d3e\u5b50\u4efb\u52d9\uff0c\u5be6\u73fe\u6a21\u7d44\u5316\u8207\u53ef\u64f4\u5c55\u7684\u89e3\u6c7a\u65b9\u6848\u3002</li> <li>\u8c50\u5bcc\u7684\u5de5\u5177\u751f\u614b\u7cfb\uff1a \u70ba agent \u914d\u5099\u591a\u5143\u80fd\u529b\u3002ADK \u652f\u63f4\u6574\u5408\u81ea\u8a02\u51fd\u5f0f\uff08<code>FunctionTool</code>\uff09\u3001\u5c07\u5176\u4ed6 agent \u4f5c\u70ba\u5de5\u5177\u4f7f\u7528\uff08<code>AgentTool</code>\uff09\u3001\u904b\u7528\u5167\u5efa\u529f\u80fd\u5982\u7a0b\u5f0f\u78bc\u57f7\u884c\uff0c\u4e26\u53ef\u8207\u5916\u90e8\u8cc7\u6599\u4f86\u6e90\u8207 API\uff08\u5982\u641c\u5c0b\u3001\u8cc7\u6599\u5eab\uff09\u4e92\u52d5\u3002\u5c0d\u9577\u6642\u9593\u57f7\u884c\u5de5\u5177\u7684\u652f\u63f4\uff0c\u4ea6\u80fd\u6709\u6548\u8655\u7406\u975e\u540c\u6b65\u64cd\u4f5c\u3002</li> <li>\u5f48\u6027\u7684\u5354\u4f5c\u6d41\u7a0b\uff1a \u53ef\u5229\u7528\u5167\u5efa workflow agent\uff08<code>SequentialAgent</code>\u3001<code>ParallelAgent</code>\u3001<code>LoopAgent</code>\uff09\u8207 LLM \u9a45\u52d5\u7684\u52d5\u614b\u8def\u7531\uff0c\u5b9a\u7fa9\u8907\u96dc agent \u5de5\u4f5c\u6d41\u7a0b\u3002\u9019\u540c\u6642\u652f\u63f4\u53ef\u9810\u6e2c\u7684\u6d41\u7a0b\u7ba1\u7dda\u8207\u81ea\u9069\u61c9 agent \u884c\u70ba\u3002</li> <li>\u6574\u5408\u958b\u767c\u8005\u5de5\u5177\uff1a \u8f15\u9b06\u65bc\u672c\u5730\u958b\u767c\u8207\u8fed\u4ee3\u3002ADK \u5167\u5efa\u547d\u4ee4\u5217\u4ecb\u9762 (Command Line Interface, CLI) \u8207\u958b\u767c\u8005 UI\uff0c\u53ef\u7528\u65bc\u57f7\u884c agent\u3001\u6aa2\u67e5\u57f7\u884c\u6b65\u9a5f\uff08\u4e8b\u4ef6\u3001\u72c0\u614b\u8b8a\u66f4\uff09\u3001\u9664\u932f\u4e92\u52d5\u4e26\u8996\u89ba\u5316 agent \u5b9a\u7fa9\u3002</li> <li>\u539f\u751f\u4e32\u6d41\u652f\u63f4\uff1a \u4ee5\u539f\u751f\u96d9\u5411\u4e32\u6d41\uff08\u6587\u5b57\u8207\u8a9e\u97f3\uff09\u6253\u9020\u5373\u6642\u4e92\u52d5\u9ad4\u9a57\u3002\u9019\u53ef\u7121\u7e2b\u6574\u5408\u5e95\u5c64\u80fd\u529b\uff0c\u5982    Gemini Developer API \u7684 Multimodal Live API    \uff08\u6216    Vertex AI\uff09\uff0c    \u4e14\u901a\u5e38\u50c5\u9700\u7c21\u55ae\u8a2d\u5b9a\u5373\u53ef\u555f\u7528\u3002</li> <li>\u5167\u5efa agent \u8a55\u4f30\uff1a \u7cfb\u7d71\u6027\u8a55\u4f30 agent \u8868\u73fe\u3002\u6846\u67b6\u5167\u5efa\u5de5\u5177\uff0c\u53ef\u5efa\u7acb\u591a\u8f2a\u8a55\u6e2c\u8cc7\u6599\u96c6\uff0c\u4e26\u65bc\u672c\u5730\uff08\u900f\u904e CLI \u6216\u958b\u767c\u8005 UI\uff09\u57f7\u884c\u8a55\u6e2c\uff0c\u91cf\u5316\u54c1\u8cea\u4e26\u6307\u5f15\u6539\u9032\u65b9\u5411\u3002</li> <li>\u5ee3\u6cdb LLM \u652f\u63f4\uff1a \u6846\u67b6\u96d6\u91dd\u5c0d Google \u7684 Gemini \u6a21\u578b\u6700\u4f73\u5316\uff0c\u4f46\u8a2d\u8a08\u4e0a\u5177\u5099\u5f48\u6027\uff0c\u53ef\u900f\u904e <code>BaseLlm</code> \u4ecb\u9762\u6574\u5408\u5404\u7a2e\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\uff08\u5305\u542b\u958b\u6e90\u6216\u5fae\u8abf\u6a21\u578b\uff09\u3002</li> <li>Artifact Management\uff1a \u8b93 agent \u80fd\u8655\u7406\u6a94\u6848\u8207\u4e8c\u9032\u4f4d\u8cc7\u6599\u3002\u6846\u67b6\u63d0\u4f9b\u6a5f\u5236\uff08<code>ArtifactService</code>\u3001context \u65b9\u6cd5\uff09\uff0c\u8b93 agent \u5728\u57f7\u884c\u671f\u9593\u53ef\u5132\u5b58\u3001\u8f09\u5165\u8207\u7ba1\u7406\u5982\u5716\u7247\u3001\u6587\u4ef6\u6216\u7522\u751f\u5831\u544a\u7b49\u5177\u7248\u672c\u63a7\u5236\u7684 artifact\u3002</li> <li>\u53ef\u64f4\u5145\u6027\u8207\u4e92\u901a\u6027\uff1a ADK \u63a8\u52d5\u958b\u653e\u751f\u614b\u7cfb\u3002\u9664\u5167\u5efa\u6838\u5fc3\u5de5\u5177\u5916\uff0c\u4ea6\u5141\u8a31\u958b\u767c\u8005\u8f15\u9b06\u6574\u5408\u8207\u91cd\u7528\u5176\u4ed6\u4e3b\u6d41 agent \u6846\u67b6\uff08\u5982 LangChain\u3001CrewAI\uff09\u7684\u5de5\u5177\u3002</li> <li>\u72c0\u614b\u8207\u8a18\u61b6\u9ad4\u7ba1\u7406\uff1a \u81ea\u52d5\u8655\u7406\u77ed\u671f\u5c0d\u8a71\u8a18\u61b6\u9ad4\uff08<code>State</code> \u65bc <code>Session</code> \u5167\uff09\u7531 <code>SessionService</code> \u7ba1\u7406\u3002\u4ea6\u63d0\u4f9b\u9577\u671f <code>Memory</code> \u670d\u52d9\u6574\u5408\u9ede\uff0c\u8b93 agent \u80fd\u8de8\u591a\u500b session \u8a18\u4f4f\u4f7f\u7528\u8005\u8cc7\u8a0a\u3002</li> </ol> <p></p>"},{"location":"get-started/about/#_3","title":"\u5feb\u901f\u958b\u59cb","text":"<ul> <li>\u6e96\u5099\u597d\u6253\u9020\u4f60\u7684\u7b2c\u4e00\u500b agent \u4e86\u55ce\uff1f\u7acb\u5373\u9ad4\u9a57\u5feb\u901f\u958b\u59cb</li> </ul>"},{"location":"get-started/index.en/","title":"Get Started","text":"<p>Agent Development Kit (ADK) is designed to empower developers to build, manage, evaluate and deploy AI-powered agents. It provides a robust and flexible environment for creating both conversational and non-conversational agents, capable of handling complex tasks and workflows.</p> <ul> <li> <p> Installation</p> <p>Install <code>google-adk</code> for Python or Java and get up and running in minutes.</p> <p> More information</p> </li> <li> <p> Quickstart</p> <p>Create your first ADK agent with tools in minutes.</p> <p> More information</p> </li> <li> <p> Quickstart (streaming)</p> <p>Create your first streaming ADK agent.</p> <p> More information</p> </li> <li> <p> Tutorial</p> <p>Create your first ADK multi-agent.</p> <p> More information</p> </li> <li> <p> Discover sample agents</p> <p>Discover sample agents for retail, travel, customer service, and more!</p> <p> Discover adk-samples</p> </li> <li> <p> About</p> <p>Learn about the key components of building and deploying ADK agents.</p> <p> More information</p> </li> </ul>"},{"location":"get-started/installation.en/","title":"Installing ADK","text":"PythonJava <p>You can either use maven or gradle to add the <code>google-adk</code> and <code>google-adk-dev</code> package.</p> <p><code>google-adk</code> is the core Java ADK library. Java ADK also comes with a pluggable example SpringBoot server to run your agents seamlessly. This optional package is present as part of <code>google-adk-dev</code>.</p> <p>If you are using maven, add the following to your <code>pom.xml</code>:</p> pom.xml<pre><code>&lt;dependencies&gt;\n  &lt;!-- The ADK Core dependency --&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;com.google.adk&lt;/groupId&gt;\n    &lt;artifactId&gt;google-adk&lt;/artifactId&gt;\n    &lt;version&gt;0.2.0&lt;/version&gt;\n  &lt;/dependency&gt;\n\n  &lt;!-- The ADK Dev Web UI to debug your agent (Optional) --&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;com.google.adk&lt;/groupId&gt;\n    &lt;artifactId&gt;google-adk-dev&lt;/artifactId&gt;\n    &lt;version&gt;0.2.0&lt;/version&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n&lt;build&gt;\n  &lt;plugins&gt;\n    &lt;plugin&gt;\n      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n      &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n      &lt;version&gt;3.14.0&lt;/version&gt;\n      &lt;configuration&gt;\n        &lt;compilerArgs&gt;\n          &lt;arg&gt;-parameters&lt;/arg&gt;\n        &lt;/compilerArgs&gt;\n      &lt;/configuration&gt;\n    &lt;/plugin&gt;\n  &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre> <p>Here's a complete pom.xml file for reference.</p> <p>If you are using gradle, add the dependency to your build.gradle:</p> build.gradle<pre><code>dependencies {\n    implementation 'com.google.adk:google-adk:0.2.0'\n    implementation 'com.google.adk:google-adk-dev:0.2.0'\n}\n</code></pre> <p>You should also configure Gradle to pass <code>-parameters</code> to <code>javac</code>. (Alternatively, use <code>@Schema(name = \"...\")</code>).</p>"},{"location":"get-started/installation.en/#create-activate-virtual-environment","title":"Create &amp; activate virtual environment","text":"<p>We recommend creating a virtual Python environment using venv:</p> <pre><code>python -m venv .venv\n</code></pre> <p>Now, you can activate the virtual environment using the appropriate command for your operating system and environment:</p> <pre><code># Mac / Linux\nsource .venv/bin/activate\n\n# Windows CMD:\n.venv\\Scripts\\activate.bat\n\n# Windows PowerShell:\n.venv\\Scripts\\Activate.ps1\n</code></pre>"},{"location":"get-started/installation.en/#install-adk","title":"Install ADK","text":"<pre><code>pip install google-adk\n</code></pre> <p>(Optional) Verify your installation:</p> <pre><code>pip show google-adk\n</code></pre>"},{"location":"get-started/installation.en/#next-steps","title":"Next steps","text":"<ul> <li>Try creating your first agent with the Quickstart</li> </ul>"},{"location":"get-started/installation/","title":"\u5b89\u88dd Agent Development Kit (ADK)","text":"PythonJava <p>You can either use maven or gradle to add the <code>google-adk</code> and <code>google-adk-dev</code> package.</p> <p><code>google-adk</code> is the core Java ADK library. Java ADK also comes with a pluggable example SpringBoot server to run your agents seamlessly. This optional package is present as part of <code>google-adk-dev</code>.</p> <p>If you are using maven, add the following to your <code>pom.xml</code>:</p> pom.xml<pre><code>&lt;dependencies&gt;\n  &lt;!-- The ADK Core dependency --&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;com.google.adk&lt;/groupId&gt;\n    &lt;artifactId&gt;google-adk&lt;/artifactId&gt;\n    &lt;version&gt;0.2.0&lt;/version&gt;\n  &lt;/dependency&gt;\n\n  &lt;!-- The ADK Dev Web UI to debug your agent (Optional) --&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;com.google.adk&lt;/groupId&gt;\n    &lt;artifactId&gt;google-adk-dev&lt;/artifactId&gt;\n    &lt;version&gt;0.2.0&lt;/version&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n&lt;build&gt;\n  &lt;plugins&gt;\n    &lt;plugin&gt;\n      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n      &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n      &lt;version&gt;3.14.0&lt;/version&gt;\n      &lt;configuration&gt;\n        &lt;compilerArgs&gt;\n          &lt;arg&gt;-parameters&lt;/arg&gt;\n        &lt;/compilerArgs&gt;\n      &lt;/configuration&gt;\n    &lt;/plugin&gt;\n  &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre> <p>Here's a complete pom.xml file for reference.</p> <p>If you are using gradle, add the dependency to your build.gradle:</p> build.gradle<pre><code>dependencies {\n    implementation 'com.google.adk:google-adk:0.2.0'\n    implementation 'com.google.adk:google-adk-dev:0.2.0'\n}\n</code></pre> <p>You should also configure Gradle to pass <code>-parameters</code> to <code>javac</code>. (Alternatively, use <code>@Schema(name = \"...\")</code>).</p>"},{"location":"get-started/installation/#create-activate-virtual-environment","title":"Create &amp; activate virtual environment","text":"<p>We recommend creating a virtual Python environment using venv:</p> <pre><code>python -m venv .venv\n</code></pre> <p>Now, you can activate the virtual environment using the appropriate command for your operating system and environment:</p> <pre><code># Mac / Linux\nsource .venv/bin/activate\n\n# Windows CMD:\n.venv\\Scripts\\activate.bat\n\n# Windows PowerShell:\n.venv\\Scripts\\Activate.ps1\n</code></pre>"},{"location":"get-started/installation/#install-adk","title":"Install ADK","text":"<pre><code>pip install google-adk\n</code></pre> <p>(Optional) Verify your installation:</p> <pre><code>pip show google-adk\n</code></pre>"},{"location":"get-started/installation/#_1","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u5617\u8a66\u4f7f\u7528 \u5feb\u901f\u958b\u59cb \u5efa\u7acb\u4f60\u7684\u7b2c\u4e00\u500b agent</li> </ul>"},{"location":"get-started/quickstart.en/","title":"Quickstart","text":"<p>This quickstart guides you through installing the Agent Development Kit (ADK), setting up a basic agent with multiple tools, and running it locally either in the terminal or in the interactive, browser-based dev UI.</p> <p>This quickstart assumes a local IDE (VS Code, PyCharm, IntelliJ IDEA, etc.) with Python 3.9+ or Java 17+ and terminal access. This method runs the application entirely on your machine and is recommended for internal development.</p>"},{"location":"get-started/quickstart.en/#set-up-environment-install-adk","title":"1. Set up Environment &amp; Install ADK","text":"PythonJava <p>Create &amp; Activate Virtual Environment (Recommended):</p> <pre><code># Create\npython -m venv .venv\n# Activate (each new terminal)\n# macOS/Linux: source .venv/bin/activate\n# Windows CMD: .venv\\Scripts\\activate.bat\n# Windows PowerShell: .venv\\Scripts\\Activate.ps1\n</code></pre> <p>Install ADK:</p> <pre><code>pip install google-adk\n</code></pre> <p>To install ADK and setup the environment, proceed to the following steps.</p>"},{"location":"get-started/quickstart.en/#create-agent-project","title":"2. Create Agent Project","text":""},{"location":"get-started/quickstart.en/#project-structure","title":"Project structure","text":"PythonJava <p>You will need to create the following project structure:</p> <pre><code>parent_folder/\n    multi_tool_agent/\n        __init__.py\n        agent.py\n        .env\n</code></pre> <p>Create the folder <code>multi_tool_agent</code>:</p> <pre><code>mkdir multi_tool_agent/\n</code></pre> <p>Note for Windows users</p> <p>When using ADK on Windows for the next few steps, we recommend creating Python files using File Explorer or an IDE because the following commands (<code>mkdir</code>, <code>echo</code>) typically generate files with null bytes and/or incorrect encoding.</p> <p>Java projects generally feature the following project structure:</p> <pre><code>project_folder/\n\u251c\u2500\u2500 pom.xml (or build.gradle)\n\u251c\u2500\u2500 src/\n\u251c\u2500\u2500 \u2514\u2500\u2500 main/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 agents/\n\u2502               \u2514\u2500\u2500 multitool/\n\u2514\u2500\u2500 test/\n</code></pre> <p></p>"},{"location":"get-started/quickstart.en/#__init__py","title":"<code>__init__.py</code>","text":"<p>Now create an <code>__init__.py</code> file in the folder:</p> <pre><code>echo \"from . import agent\" &gt; multi_tool_agent/__init__.py\n</code></pre> <p>Your <code>__init__.py</code> should now look like this:</p> multi_tool_agent/__init__.py<pre><code>from . import agent\n</code></pre>"},{"location":"get-started/quickstart.en/#agentpy","title":"<code>agent.py</code>","text":"<p>Create an <code>agent.py</code> file in the same folder:</p> OS X &amp; LinuxWindows <pre><code>touch multi_tool_agent/agent.py\n</code></pre> <pre><code>type nul &gt; multi_tool_agent/agent.py\n</code></pre> <p>Copy and paste the following code into <code>agent.py</code>:</p> multi_tool_agent/agent.py<pre><code>import datetime\nfrom zoneinfo import ZoneInfo\nfrom google.adk.agents import Agent\n\ndef get_weather(city: str) -&gt; dict:\n    \"\"\"Retrieves the current weather report for a specified city.\n\n    Args:\n        city (str): The name of the city for which to retrieve the weather report.\n\n    Returns:\n        dict: status and result or error msg.\n    \"\"\"\n    if city.lower() == \"new york\":\n        return {\n            \"status\": \"success\",\n            \"report\": (\n                \"The weather in New York is sunny with a temperature of 25 degrees\"\n                \" Celsius (77 degrees Fahrenheit).\"\n            ),\n        }\n    else:\n        return {\n            \"status\": \"error\",\n            \"error_message\": f\"Weather information for '{city}' is not available.\",\n        }\n\n\ndef get_current_time(city: str) -&gt; dict:\n    \"\"\"Returns the current time in a specified city.\n\n    Args:\n        city (str): The name of the city for which to retrieve the current time.\n\n    Returns:\n        dict: status and result or error msg.\n    \"\"\"\n\n    if city.lower() == \"new york\":\n        tz_identifier = \"America/New_York\"\n    else:\n        return {\n            \"status\": \"error\",\n            \"error_message\": (\n                f\"Sorry, I don't have timezone information for {city}.\"\n            ),\n        }\n\n    tz = ZoneInfo(tz_identifier)\n    now = datetime.datetime.now(tz)\n    report = (\n        f'The current time in {city} is {now.strftime(\"%Y-%m-%d %H:%M:%S %Z%z\")}'\n    )\n    return {\"status\": \"success\", \"report\": report}\n\n\nroot_agent = Agent(\n    name=\"weather_time_agent\",\n    model=\"gemini-2.0-flash\",\n    description=(\n        \"Agent to answer questions about the time and weather in a city.\"\n    ),\n    instruction=(\n        \"You are a helpful agent who can answer user questions about the time and weather in a city.\"\n    ),\n    tools=[get_weather, get_current_time],\n)\n</code></pre>"},{"location":"get-started/quickstart.en/#env","title":"<code>.env</code>","text":"<p>Create a <code>.env</code> file in the same folder:</p> OS X &amp; LinuxWindows <pre><code>touch multi_tool_agent/.env\n</code></pre> <pre><code>type nul &gt; multi_tool_agent\\.env\n</code></pre> <p>More instructions about this file are described in the next section on Set up the model.</p>"},{"location":"get-started/quickstart.en/#create-multitoolagentjava","title":"Create <code>MultiToolAgent.java</code>","text":"<p>Create a <code>MultiToolAgent.java</code> source file in the <code>agents.multitool</code> package in the <code>src/main/java/agents/multitool/</code> directory.</p> <p>Copy and paste the following code into <code>MultiToolAgent.java</code>:</p> agents/multitool/MultiToolAgent.java<pre><code>package agents.multitool;\n\nimport com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.nio.charset.StandardCharsets;\nimport java.text.Normalizer;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class MultiToolAgent {\n\n    private static String USER_ID = \"student\";\n    private static String NAME = \"multi_tool_agent\";\n\n    // The run your agent with Dev UI, the ROOT_AGENT should be a global public static final variable.\n    public static final BaseAgent ROOT_AGENT = initAgent();\n\n    public static BaseAgent initAgent() {\n        return LlmAgent.builder()\n            .name(NAME)\n            .model(\"gemini-2.0-flash\")\n            .description(\"Agent to answer questions about the time and weather in a city.\")\n            .instruction(\n                \"You are a helpful agent who can answer user questions about the time and weather\"\n                    + \" in a city.\")\n            .tools(\n                FunctionTool.create(MultiToolAgent.class, \"getCurrentTime\"),\n                FunctionTool.create(MultiToolAgent.class, \"getWeather\"))\n            .build();\n    }\n\n    public static Map&lt;String, String&gt; getCurrentTime(\n        @Schema(name = \"city\",\n                description = \"The name of the city for which to retrieve the current time\")\n        String city) {\n        String normalizedCity =\n            Normalizer.normalize(city, Normalizer.Form.NFD)\n                .trim()\n                .toLowerCase()\n                .replaceAll(\"(\\\\p{IsM}+|\\\\p{IsP}+)\", \"\")\n                .replaceAll(\"\\\\s+\", \"_\");\n\n        return ZoneId.getAvailableZoneIds().stream()\n            .filter(zid -&gt; zid.toLowerCase().endsWith(\"/\" + normalizedCity))\n            .findFirst()\n            .map(\n                zid -&gt;\n                    Map.of(\n                        \"status\",\n                        \"success\",\n                        \"report\",\n                        \"The current time in \"\n                            + city\n                            + \" is \"\n                            + ZonedDateTime.now(ZoneId.of(zid))\n                            .format(DateTimeFormatter.ofPattern(\"HH:mm\"))\n                            + \".\"))\n            .orElse(\n                Map.of(\n                    \"status\",\n                    \"error\",\n                    \"report\",\n                    \"Sorry, I don't have timezone information for \" + city + \".\"));\n    }\n\n    public static Map&lt;String, String&gt; getWeather(\n        @Schema(name = \"city\",\n                description = \"The name of the city for which to retrieve the weather report\")\n        String city) {\n        if (city.toLowerCase().equals(\"new york\")) {\n            return Map.of(\n                \"status\",\n                \"success\",\n                \"report\",\n                \"The weather in New York is sunny with a temperature of 25 degrees Celsius (77 degrees\"\n                    + \" Fahrenheit).\");\n\n        } else {\n            return Map.of(\n                \"status\", \"error\", \"report\", \"Weather information for \" + city + \" is not available.\");\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        InMemoryRunner runner = new InMemoryRunner(ROOT_AGENT);\n\n        Session session =\n            runner\n                .sessionService()\n                .createSession(NAME, USER_ID)\n                .blockingGet();\n\n        try (Scanner scanner = new Scanner(System.in, StandardCharsets.UTF_8)) {\n            while (true) {\n                System.out.print(\"\\nYou &gt; \");\n                String userInput = scanner.nextLine();\n\n                if (\"quit\".equalsIgnoreCase(userInput)) {\n                    break;\n                }\n\n                Content userMsg = Content.fromParts(Part.fromText(userInput));\n                Flowable&lt;Event&gt; events = runner.runAsync(USER_ID, session.id(), userMsg);\n\n                System.out.print(\"\\nAgent &gt; \");\n                events.blockingForEach(event -&gt; System.out.println(event.stringifyContent()));\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"get-started/quickstart.en/#set-up-the-model","title":"3. Set up the model","text":"<p>Your agent's ability to understand user requests and generate responses is powered by a Large Language Model (LLM). Your agent needs to make secure calls to this external LLM service, which requires authentication credentials. Without valid authentication, the LLM service will deny the agent's requests, and the agent will be unable to function.</p> <p>Model Authentication guide</p> <p>For a detailed guide on authenticating to different models, see the Authentication guide. This is a critical step to ensure your agent can make calls to the LLM service.</p> Gemini - Google AI StudioGemini - Google Cloud Vertex AIGemini - Google Cloud Vertex AI with Express Mode <ol> <li>Get an API key from Google AI Studio.</li> <li> <p>When using Python, open the <code>.env</code> file located inside (<code>multi_tool_agent/</code>) and copy-paste the following code.</p> multi_tool_agent/.env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=FALSE\nGOOGLE_API_KEY=PASTE_YOUR_ACTUAL_API_KEY_HERE\n</code></pre> <p>When using Java, define environment variables:</p> terminal<pre><code>export GOOGLE_GENAI_USE_VERTEXAI=FALSE\nexport GOOGLE_API_KEY=PASTE_YOUR_ACTUAL_API_KEY_HERE\n</code></pre> </li> <li> <p>Replace <code>PASTE_YOUR_ACTUAL_API_KEY_HERE</code> with your actual <code>API KEY</code>.</p> </li> </ol> <ol> <li>Set up a Google Cloud project and enable the Vertex AI API.</li> <li>Set up the gcloud CLI.</li> <li>Authenticate to Google Cloud from the terminal by running <code>gcloud auth application-default login</code>.</li> <li> <p>When using Python, open the <code>.env</code> file located inside (<code>multi_tool_agent/</code>). Copy-paste the following code and update the project ID and location.</p> multi_tool_agent/.env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_CLOUD_PROJECT=YOUR_PROJECT_ID\nGOOGLE_CLOUD_LOCATION=LOCATION\n</code></pre> <p>When using Java, define environment variables:</p> terminal<pre><code>export GOOGLE_GENAI_USE_VERTEXAI=TRUE\nexport GOOGLE_CLOUD_PROJECT=YOUR_PROJECT_ID\nexport GOOGLE_CLOUD_LOCATION=LOCATION\n</code></pre> </li> </ol> <ol> <li>You can sign up for a free Google Cloud project and use Gemini for free with an eligible account!<ul> <li>Set up a   Google Cloud project with Vertex AI Express Mode</li> <li>Get an API key from your Express mode project. This key can be used with ADK to use Gemini models for free, as well as access to Agent Engine services.</li> </ul> </li> <li> <p>When using Python, open the <code>.env</code> file located inside (<code>multi_tool_agent/</code>). Copy-paste the following code and update the project ID and location.</p> multi_tool_agent/.env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_API_KEY=PASTE_YOUR_ACTUAL_EXPRESS_MODE_API_KEY_HERE\n</code></pre> <p>When using Java, define environment variables:</p> terminal<pre><code>export GOOGLE_GENAI_USE_VERTEXAI=TRUE\nexport GOOGLE_API_KEY=PASTE_YOUR_ACTUAL_EXPRESS_MODE_API_KEY_HERE\n</code></pre> </li> </ol>"},{"location":"get-started/quickstart.en/#run-your-agent","title":"4. Run Your Agent","text":"PythonJava <p>Using the terminal, navigate to the parent directory of your agent project (e.g. using <code>cd ..</code>):</p> <pre><code>parent_folder/      &lt;-- navigate to this directory\n    multi_tool_agent/\n        __init__.py\n        agent.py\n        .env\n</code></pre> <p>There are multiple ways to interact with your agent:</p> Dev UI (adk web)Terminal (adk run)API Server (adk api_server) <p>Authentication Setup for Vertex AI Users</p> <p>If you selected \"Gemini - Google Cloud Vertex AI\" in the previous step, you must authenticate with Google Cloud before launching the dev UI.</p> <p>Run this command and follow the prompts: <pre><code>gcloud auth application-default login\n</code></pre></p> <p>Note: Skip this step if you're using \"Gemini - Google AI Studio\".</p> <p>Run the following command to launch the dev UI.</p> <pre><code>adk web\n</code></pre> <p>Note for Windows users</p> <p>When hitting the <code>_make_subprocess_transport NotImplementedError</code>, consider using <code>adk web --no-reload</code> instead.</p> <p>Step 1: Open the URL provided (usually <code>http://localhost:8000</code> or <code>http://127.0.0.1:8000</code>) directly in your browser.</p> <p>Step 2. In the top-left corner of the UI, you can select your agent in the dropdown. Select \"multi_tool_agent\".</p> <p>Troubleshooting</p> <p>If you do not see \"multi_tool_agent\" in the dropdown menu, make sure you are running <code>adk web</code> in the parent folder of your agent folder (i.e. the parent folder of multi_tool_agent).</p> <p>Step 3. Now you can chat with your agent using the textbox:</p> <p></p> <p>Step 4.  By using the <code>Events</code> tab at the left, you can inspect individual function calls, responses and model responses by clicking on the actions:</p> <p></p> <p>On the <code>Events</code> tab, you can also click the <code>Trace</code> button to see the trace logs for each event that shows the latency of each function calls:</p> <p></p> <p>Step 5. You can also enable your microphone and talk to your agent:</p> <p>Model support for voice/video streaming</p> <p>In order to use voice/video streaming in ADK, you will need to use Gemini models that support the Live API. You can find the model ID(s) that supports the Gemini Live API in the documentation:</p> <ul> <li>Google AI Studio: Gemini Live API</li> <li>Vertex AI: Gemini Live API</li> </ul> <p>You can then replace the <code>model</code> string in <code>root_agent</code> in the <code>agent.py</code> file you created earlier (jump to section). Your code should look something like:</p> <pre><code>root_agent = Agent(\n    name=\"weather_time_agent\",\n    model=\"replace-me-with-model-id\", #e.g. gemini-2.0-flash-live-001\n    ...\n</code></pre> <p></p> <p>Tip</p> <p>When using <code>adk run</code> you can inject prompts into the agent to start by piping text to the command like so:</p> <pre><code>\"Please start by listing files\" | adk run file_listing_agent\n</code></pre> <p>Run the following command, to chat with your Weather agent.</p> <pre><code>adk run multi_tool_agent\n</code></pre> <p></p> <p>To exit, use Cmd/Ctrl+C.</p> <p><code>adk api_server</code> enables you to create a local FastAPI server in a single command, enabling you to test local cURL requests before you deploy your agent.</p> <p></p> <p>To learn how to use <code>adk api_server</code> for testing, refer to the documentation on testing.</p> <p>Using the terminal, navigate to the parent directory of your agent project (e.g. using <code>cd ..</code>):</p> <pre><code>project_folder/                &lt;-- navigate to this directory\n\u251c\u2500\u2500 pom.xml (or build.gradle)\n\u251c\u2500\u2500 src/\n\u251c\u2500\u2500 \u2514\u2500\u2500 main/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 agents/\n\u2502               \u2514\u2500\u2500 multitool/\n\u2502                   \u2514\u2500\u2500 MultiToolAgent.java\n\u2514\u2500\u2500 test/\n</code></pre> Dev UIMavenGradle <p>Run the following command from the terminal to launch the Dev UI.</p> <p>DO NOT change the main class name of the Dev UI server.</p> terminal<pre><code>mvn exec:java \\\n    -Dexec.mainClass=\"com.google.adk.web.AdkWebServer\" \\\n    -Dexec.args=\"--adk.agents.source-dir=src/main/java\" \\\n    -Dexec.classpathScope=\"compile\"\n</code></pre> <p>Step 1: Open the URL provided (usually <code>http://localhost:8080</code> or <code>http://127.0.0.1:8080</code>) directly in your browser.</p> <p>Step 2. In the top-left corner of the UI, you can select your agent in the dropdown. Select \"multi_tool_agent\".</p> <p>Troubleshooting</p> <p>If you do not see \"multi_tool_agent\" in the dropdown menu, make sure you are running the <code>mvn</code> command at the location where your Java source code is located (usually <code>src/main/java</code>).</p> <p>Step 3. Now you can chat with your agent using the textbox:</p> <p></p> <p>Step 4. You can also inspect individual function calls, responses and model responses by clicking on the actions:</p> <p></p> <p>With Maven, run the <code>main()</code> method of your Java class with the following command:</p> terminal<pre><code>mvn compile exec:java -Dexec.mainClass=\"agents.multitool.MultiToolAgent\"\n</code></pre> <p>With Gradle, the <code>build.gradle</code> or <code>build.gradle.kts</code> build file should have the following Java plugin in its <code>plugins</code> section:</p> <pre><code>plugins {\n    id('java')\n    // other plugins\n}\n</code></pre> <p>Then, elsewhere in the build file, at the top-level, create a new task to run the <code>main()</code> method of your agent:</p> <pre><code>tasks.register('runAgent', JavaExec) {\n    classpath = sourceSets.main.runtimeClasspath\n    mainClass = 'agents.multitool.MultiToolAgent'\n}\n</code></pre> <p>Finally, on the command-line, run the following command:</p> <pre><code>gradle runAgent\n</code></pre>"},{"location":"get-started/quickstart.en/#example-prompts-to-try","title":"\ud83d\udcdd Example prompts to try","text":"<ul> <li>What is the weather in New York?</li> <li>What is the time in New York?</li> <li>What is the weather in Paris?</li> <li>What is the time in Paris?</li> </ul>"},{"location":"get-started/quickstart.en/#congratulations","title":"\ud83c\udf89 Congratulations!","text":"<p>You've successfully created and interacted with your first agent using ADK!</p>"},{"location":"get-started/quickstart.en/#next-steps","title":"\ud83d\udee3\ufe0f Next steps","text":"<ul> <li>Go to the tutorial: Learn how to add memory, session, state to your agent:   tutorial.</li> <li>Delve into advanced configuration: Explore the setup   section for deeper dives into project structure, configuration, and other   interfaces.</li> <li>Understand Core Concepts: Learn about   agents concepts.</li> </ul>"},{"location":"get-started/quickstart/","title":"\u5feb\u901f\u958b\u59cb","text":"<p>\u672c\u5feb\u901f\u958b\u59cb\u5c07\u5f15\u5c0e\u4f60\u5b89\u88dd Agent Development Kit (ADK)\u3001\u8a2d\u5b9a\u4e00\u500b\u5305\u542b\u591a\u500b\u5de5\u5177\uff08tools\uff09\u7684\u57fa\u672c agent\uff0c\u4e26\u5728\u672c\u6a5f\u7aef\u4ee5\u7d42\u7aef\u6a5f\u6216\u4e92\u52d5\u5f0f\u700f\u89bd\u5668\u958b\u767c UI \u57f7\u884c\u3002</p> <p>\u672c\u5feb\u901f\u958b\u59cb\u5047\u8a2d\u4f60\u5df2\u5728\u672c\u6a5f IDE\uff08\u5982 VS Code\u3001PyCharm\u3001IntelliJ IDEA \u7b49\uff09\u5b89\u88dd Python 3.9+ \u6216 Java 17+\uff0c\u4e26\u5177\u5099\u7d42\u7aef\u6a5f\u5b58\u53d6\u6b0a\u9650\u3002\u6b64\u65b9\u6cd5\u6703\u8b93\u61c9\u7528\u7a0b\u5f0f\u5b8c\u5168\u5728\u4f60\u7684\u6a5f\u5668\u4e0a\u57f7\u884c\uff0c\u5efa\u8b70\u7528\u65bc\u5167\u90e8\u958b\u767c\u3002</p>"},{"location":"get-started/quickstart/#set-up-environment-install-adk","title":"1. \u8a2d\u5b9a\u74b0\u5883\u4e26\u5b89\u88dd ADK","text":"PythonJava <p>Create &amp; Activate Virtual Environment (Recommended):</p> <pre><code># Create\npython -m venv .venv\n# Activate (each new terminal)\n# macOS/Linux: source .venv/bin/activate\n# Windows CMD: .venv\\Scripts\\activate.bat\n# Windows PowerShell: .venv\\Scripts\\Activate.ps1\n</code></pre> <p>Install ADK:</p> <pre><code>pip install google-adk\n</code></pre> <p>To install ADK and setup the environment, proceed to the following steps.</p>"},{"location":"get-started/quickstart/#create-agent-project","title":"2. \u5efa\u7acb Agent \u5c08\u6848","text":""},{"location":"get-started/quickstart/#_2","title":"\u5c08\u6848\u7d50\u69cb","text":"PythonJava <p>You will need to create the following project structure:</p> <pre><code>parent_folder/\n    multi_tool_agent/\n        __init__.py\n        agent.py\n        .env\n</code></pre> <p>Create the folder <code>multi_tool_agent</code>:</p> <pre><code>mkdir multi_tool_agent/\n</code></pre> <p>Note for Windows users</p> <p>When using ADK on Windows for the next few steps, we recommend creating Python files using File Explorer or an IDE because the following commands (<code>mkdir</code>, <code>echo</code>) typically generate files with null bytes and/or incorrect encoding.</p> <p>Java projects generally feature the following project structure:</p> <pre><code>project_folder/\n\u251c\u2500\u2500 pom.xml (or build.gradle)\n\u251c\u2500\u2500 src/\n\u251c\u2500\u2500 \u2514\u2500\u2500 main/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 agents/\n\u2502               \u2514\u2500\u2500 multitool/\n\u2514\u2500\u2500 test/\n</code></pre> <p></p>"},{"location":"get-started/quickstart/#__init__py","title":"<code>__init__.py</code>","text":"<p>Now create an <code>__init__.py</code> file in the folder:</p> <pre><code>echo \"from . import agent\" &gt; multi_tool_agent/__init__.py\n</code></pre> <p>Your <code>__init__.py</code> should now look like this:</p> multi_tool_agent/__init__.py<pre><code>from . import agent\n</code></pre>"},{"location":"get-started/quickstart/#agentpy","title":"<code>agent.py</code>","text":"<p>Create an <code>agent.py</code> file in the same folder:</p> OS X &amp; LinuxWindows <pre><code>touch multi_tool_agent/agent.py\n</code></pre> <pre><code>type nul &gt; multi_tool_agent/agent.py\n</code></pre> <p>Copy and paste the following code into <code>agent.py</code>:</p> multi_tool_agent/agent.py<pre><code>import datetime\nfrom zoneinfo import ZoneInfo\nfrom google.adk.agents import Agent\n\ndef get_weather(city: str) -&gt; dict:\n    \"\"\"Retrieves the current weather report for a specified city.\n\n    Args:\n        city (str): The name of the city for which to retrieve the weather report.\n\n    Returns:\n        dict: status and result or error msg.\n    \"\"\"\n    if city.lower() == \"new york\":\n        return {\n            \"status\": \"success\",\n            \"report\": (\n                \"The weather in New York is sunny with a temperature of 25 degrees\"\n                \" Celsius (77 degrees Fahrenheit).\"\n            ),\n        }\n    else:\n        return {\n            \"status\": \"error\",\n            \"error_message\": f\"Weather information for '{city}' is not available.\",\n        }\n\n\ndef get_current_time(city: str) -&gt; dict:\n    \"\"\"Returns the current time in a specified city.\n\n    Args:\n        city (str): The name of the city for which to retrieve the current time.\n\n    Returns:\n        dict: status and result or error msg.\n    \"\"\"\n\n    if city.lower() == \"new york\":\n        tz_identifier = \"America/New_York\"\n    else:\n        return {\n            \"status\": \"error\",\n            \"error_message\": (\n                f\"Sorry, I don't have timezone information for {city}.\"\n            ),\n        }\n\n    tz = ZoneInfo(tz_identifier)\n    now = datetime.datetime.now(tz)\n    report = (\n        f'The current time in {city} is {now.strftime(\"%Y-%m-%d %H:%M:%S %Z%z\")}'\n    )\n    return {\"status\": \"success\", \"report\": report}\n\n\nroot_agent = Agent(\n    name=\"weather_time_agent\",\n    model=\"gemini-2.0-flash\",\n    description=(\n        \"Agent to answer questions about the time and weather in a city.\"\n    ),\n    instruction=(\n        \"You are a helpful agent who can answer user questions about the time and weather in a city.\"\n    ),\n    tools=[get_weather, get_current_time],\n)\n</code></pre>"},{"location":"get-started/quickstart/#env","title":"<code>.env</code>","text":"<p>Create a <code>.env</code> file in the same folder:</p> OS X &amp; LinuxWindows <pre><code>touch multi_tool_agent/.env\n</code></pre> <pre><code>type nul &gt; multi_tool_agent\\.env\n</code></pre> <p>More instructions about this file are described in the next section on Set up the model.</p>"},{"location":"get-started/quickstart/#create-multitoolagentjava","title":"Create <code>MultiToolAgent.java</code>","text":"<p>Create a <code>MultiToolAgent.java</code> source file in the <code>agents.multitool</code> package in the <code>src/main/java/agents/multitool/</code> directory.</p> <p>Copy and paste the following code into <code>MultiToolAgent.java</code>:</p> agents/multitool/MultiToolAgent.java<pre><code>package agents.multitool;\n\nimport com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.nio.charset.StandardCharsets;\nimport java.text.Normalizer;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class MultiToolAgent {\n\n    private static String USER_ID = \"student\";\n    private static String NAME = \"multi_tool_agent\";\n\n    // The run your agent with Dev UI, the ROOT_AGENT should be a global public static final variable.\n    public static final BaseAgent ROOT_AGENT = initAgent();\n\n    public static BaseAgent initAgent() {\n        return LlmAgent.builder()\n            .name(NAME)\n            .model(\"gemini-2.0-flash\")\n            .description(\"Agent to answer questions about the time and weather in a city.\")\n            .instruction(\n                \"You are a helpful agent who can answer user questions about the time and weather\"\n                    + \" in a city.\")\n            .tools(\n                FunctionTool.create(MultiToolAgent.class, \"getCurrentTime\"),\n                FunctionTool.create(MultiToolAgent.class, \"getWeather\"))\n            .build();\n    }\n\n    public static Map&lt;String, String&gt; getCurrentTime(\n        @Schema(name = \"city\",\n                description = \"The name of the city for which to retrieve the current time\")\n        String city) {\n        String normalizedCity =\n            Normalizer.normalize(city, Normalizer.Form.NFD)\n                .trim()\n                .toLowerCase()\n                .replaceAll(\"(\\\\p{IsM}+|\\\\p{IsP}+)\", \"\")\n                .replaceAll(\"\\\\s+\", \"_\");\n\n        return ZoneId.getAvailableZoneIds().stream()\n            .filter(zid -&gt; zid.toLowerCase().endsWith(\"/\" + normalizedCity))\n            .findFirst()\n            .map(\n                zid -&gt;\n                    Map.of(\n                        \"status\",\n                        \"success\",\n                        \"report\",\n                        \"The current time in \"\n                            + city\n                            + \" is \"\n                            + ZonedDateTime.now(ZoneId.of(zid))\n                            .format(DateTimeFormatter.ofPattern(\"HH:mm\"))\n                            + \".\"))\n            .orElse(\n                Map.of(\n                    \"status\",\n                    \"error\",\n                    \"report\",\n                    \"Sorry, I don't have timezone information for \" + city + \".\"));\n    }\n\n    public static Map&lt;String, String&gt; getWeather(\n        @Schema(name = \"city\",\n                description = \"The name of the city for which to retrieve the weather report\")\n        String city) {\n        if (city.toLowerCase().equals(\"new york\")) {\n            return Map.of(\n                \"status\",\n                \"success\",\n                \"report\",\n                \"The weather in New York is sunny with a temperature of 25 degrees Celsius (77 degrees\"\n                    + \" Fahrenheit).\");\n\n        } else {\n            return Map.of(\n                \"status\", \"error\", \"report\", \"Weather information for \" + city + \" is not available.\");\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        InMemoryRunner runner = new InMemoryRunner(ROOT_AGENT);\n\n        Session session =\n            runner\n                .sessionService()\n                .createSession(NAME, USER_ID)\n                .blockingGet();\n\n        try (Scanner scanner = new Scanner(System.in, StandardCharsets.UTF_8)) {\n            while (true) {\n                System.out.print(\"\\nYou &gt; \");\n                String userInput = scanner.nextLine();\n\n                if (\"quit\".equalsIgnoreCase(userInput)) {\n                    break;\n                }\n\n                Content userMsg = Content.fromParts(Part.fromText(userInput));\n                Flowable&lt;Event&gt; events = runner.runAsync(USER_ID, session.id(), userMsg);\n\n                System.out.print(\"\\nAgent &gt; \");\n                events.blockingForEach(event -&gt; System.out.println(event.stringifyContent()));\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"get-started/quickstart/#set-up-the-model","title":"3. \u8a2d\u5b9a\u6a21\u578b","text":"<p>\u4f60\u7684 agent \u80fd\u5920\u7406\u89e3\u4f7f\u7528\u8005\u8acb\u6c42\u4e26\u7522\u751f\u56de\u61c9\uff0c\u662f\u7531\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6240\u9a45\u52d5\u3002\u4f60\u7684 agent \u9700\u8981\u5b89\u5168\u5730\u547c\u53eb\u9019\u500b\u5916\u90e8\u7684 LLM \u670d\u52d9\uff0c\u800c\u9019\u9700\u8981\u9a57\u8b49\u6191\u8b49\u3002\u5982\u679c\u6c92\u6709\u6709\u6548\u7684\u9a57\u8b49\uff0cLLM \u670d\u52d9\u5c07\u6703\u62d2\u7d55 agent \u7684\u8acb\u6c42\uff0c\u5c0e\u81f4 agent \u7121\u6cd5\u904b\u4f5c\u3002</p> <p>\u6a21\u578b\u9a57\u8b49\u6307\u5357</p> <p>\u5982\u9700\u8a73\u7d30\u7684\u6a21\u578b\u9a57\u8b49\u6559\u5b78\uff0c\u8acb\u53c3\u95b1 Authentication guide\u3002 \u9019\u662f\u78ba\u4fdd\u4f60\u7684 agent \u80fd\u5920\u547c\u53eb LLM \u670d\u52d9\u7684\u95dc\u9375\u6b65\u9a5f\u3002</p> Gemini - Google AI StudioGemini - Google Cloud Vertex AIGemini - Google Cloud Vertex AI with Express Mode <ol> <li>\u5f9e Google AI Studio \u53d6\u5f97 API KEY\u3002</li> <li> <p>\u4f7f\u7528 Python \u6642\uff0c\u8acb\u958b\u555f (<code>multi_tool_agent/</code>) \u8cc7\u6599\u593e\u5167\u7684 <code>.env</code> \u6a94\u6848\uff0c    \u4e26\u5c07\u4e0b\u5217\u7a0b\u5f0f\u78bc\u8907\u88fd\u8cbc\u4e0a\u3002</p> multi_tool_agent/.env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=FALSE\nGOOGLE_API_KEY=PASTE_YOUR_ACTUAL_API_KEY_HERE\n</code></pre> <p>When using Java, define environment variables:</p> terminal<pre><code>export GOOGLE_GENAI_USE_VERTEXAI=FALSE\nexport GOOGLE_API_KEY=PASTE_YOUR_ACTUAL_API_KEY_HERE\n</code></pre> </li> <li> <p>Replace <code>PASTE_YOUR_ACTUAL_API_KEY_HERE</code> with your actual <code>API KEY</code>.</p> </li> </ol> <ol> <li>\u5efa\u7acb\u4e00\u500b Google Cloud \u5c08\u6848\uff0c\u4e26\u555f\u7528 Vertex AI API\u3002</li> <li>\u8a2d\u5b9a gcloud \u547d\u4ee4\u5217\u4ecb\u9762 (Command Line Interface)\u3002</li> <li>\u5728\u7d42\u7aef\u6a5f\u57f7\u884c <code>gcloud auth application-default login</code>\uff0c\u4ee5\u9a57\u8b49 Google Cloud \u8eab\u4efd\u3002</li> <li> <p>\u82e5\u4f7f\u7528 Python\uff0c\u8acb\u958b\u555f (<code>multi_tool_agent/</code>) \u8cc7\u6599\u593e\u4e2d\u7684 <code>.env</code> \u6a94\u6848\u3002\u8907\u88fd\u4e26\u8cbc\u4e0a\u4e0b\u5217\u7a0b\u5f0f\u78bc\uff0c\u4e26\u66f4\u65b0\u5c08\u6848 ID \u53ca Location\u3002</p> multi_tool_agent/.env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_CLOUD_PROJECT=YOUR_PROJECT_ID\nGOOGLE_CLOUD_LOCATION=LOCATION\n</code></pre> <p>When using Java, define environment variables:</p> terminal<pre><code>export GOOGLE_GENAI_USE_VERTEXAI=TRUE\nexport GOOGLE_CLOUD_PROJECT=YOUR_PROJECT_ID\nexport GOOGLE_CLOUD_LOCATION=LOCATION\n</code></pre> </li> </ol> <ol> <li>\u4f60\u53ef\u4ee5\u8a3b\u518a\u4e00\u500b\u514d\u8cbb\u7684 Google Cloud \u5c08\u6848\uff0c\u4e26\u4f7f\u7528\u7b26\u5408\u8cc7\u683c\u7684\u5e33\u6236\u514d\u8cbb\u9ad4\u9a57 Gemini\uff01<ul> <li>\u8a2d\u5b9a   Google Cloud \u5c08\u6848\u4e26\u555f\u7528 Vertex AI Express \u6a21\u5f0f</li> <li>\u5f9e\u4f60\u7684 Express \u6a21\u5f0f\u5c08\u6848\u53d6\u5f97 API KEY\u3002\u9019\u500b\u91d1\u9470\u53ef\u4ee5\u642d\u914d Agent Development Kit (ADK) \u4f7f\u7528\uff0c\u514d\u8cbb\u9ad4\u9a57 Gemini \u6a21\u578b\uff0c\u540c\u6642\u4e5f\u80fd\u5b58\u53d6 Agent Engine \u670d\u52d9\u3002</li> </ul> </li> <li> <p>\u4f7f\u7528 Python \u6642\uff0c\u8acb\u958b\u555f (<code>multi_tool_agent/</code>) \u8cc7\u6599\u593e\u5167\u7684 <code>.env</code> \u6a94\u6848\u3002\u8907\u88fd\u4e26\u8cbc\u4e0a\u4e0b\u5217\u7a0b\u5f0f\u78bc\uff0c\u4e26\u66f4\u65b0\u4f60\u7684\u5c08\u6848 ID \u8207 Location\u3002</p> multi_tool_agent/.env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_API_KEY=PASTE_YOUR_ACTUAL_EXPRESS_MODE_API_KEY_HERE\n</code></pre> <p>When using Java, define environment variables:</p> terminal<pre><code>export GOOGLE_GENAI_USE_VERTEXAI=TRUE\nexport GOOGLE_API_KEY=PASTE_YOUR_ACTUAL_EXPRESS_MODE_API_KEY_HERE\n</code></pre> </li> </ol>"},{"location":"get-started/quickstart/#run-your-agent","title":"4. \u57f7\u884c\u4f60\u7684 agent","text":"PythonJava <p>Using the terminal, navigate to the parent directory of your agent project (e.g. using <code>cd ..</code>):</p> <pre><code>parent_folder/      &lt;-- navigate to this directory\n    multi_tool_agent/\n        __init__.py\n        agent.py\n        .env\n</code></pre> <p>There are multiple ways to interact with your agent:</p> Dev UI (adk web)Terminal (adk run)API Server (adk api_server) <p>Authentication Setup for Vertex AI Users</p> <p>If you selected \"Gemini - Google Cloud Vertex AI\" in the previous step, you must authenticate with Google Cloud before launching the dev UI.</p> <p>Run this command and follow the prompts: <pre><code>gcloud auth application-default login\n</code></pre></p> <p>Note: Skip this step if you're using \"Gemini - Google AI Studio\".</p> <p>Run the following command to launch the dev UI.</p> <pre><code>adk web\n</code></pre> <p>Note for Windows users</p> <p>When hitting the <code>_make_subprocess_transport NotImplementedError</code>, consider using <code>adk web --no-reload</code> instead.</p> <p>Step 1: Open the URL provided (usually <code>http://localhost:8000</code> or <code>http://127.0.0.1:8000</code>) directly in your browser.</p> <p>Step 2. In the top-left corner of the UI, you can select your agent in the dropdown. Select \"multi_tool_agent\".</p> <p>Troubleshooting</p> <p>If you do not see \"multi_tool_agent\" in the dropdown menu, make sure you are running <code>adk web</code> in the parent folder of your agent folder (i.e. the parent folder of multi_tool_agent).</p> <p>Step 3. Now you can chat with your agent using the textbox:</p> <p></p> <p>Step 4.  By using the <code>Events</code> tab at the left, you can inspect individual function calls, responses and model responses by clicking on the actions:</p> <p></p> <p>On the <code>Events</code> tab, you can also click the <code>Trace</code> button to see the trace logs for each event that shows the latency of each function calls:</p> <p></p> <p>Step 5. You can also enable your microphone and talk to your agent:</p> <p>Model support for voice/video streaming</p> <p>In order to use voice/video streaming in ADK, you will need to use Gemini models that support the Live API. You can find the model ID(s) that supports the Gemini Live API in the documentation:</p> <ul> <li>Google AI Studio: Gemini Live API</li> <li>Vertex AI: Gemini Live API</li> </ul> <p>You can then replace the <code>model</code> string in <code>root_agent</code> in the <code>agent.py</code> file you created earlier (jump to section). Your code should look something like:</p> <pre><code>root_agent = Agent(\n    name=\"weather_time_agent\",\n    model=\"replace-me-with-model-id\", #e.g. gemini-2.0-flash-live-001\n    ...\n</code></pre> <p></p> <p>Tip</p> <p>When using <code>adk run</code> you can inject prompts into the agent to start by piping text to the command like so:</p> <pre><code>\"Please start by listing files\" | adk run file_listing_agent\n</code></pre> <p>Run the following command, to chat with your Weather agent.</p> <pre><code>adk run multi_tool_agent\n</code></pre> <p></p> <p>To exit, use Cmd/Ctrl+C.</p> <p><code>adk api_server</code> enables you to create a local FastAPI server in a single command, enabling you to test local cURL requests before you deploy your agent.</p> <p></p> <p>To learn how to use <code>adk api_server</code> for testing, refer to the documentation on testing.</p> <p>Using the terminal, navigate to the parent directory of your agent project (e.g. using <code>cd ..</code>):</p> <pre><code>project_folder/                &lt;-- navigate to this directory\n\u251c\u2500\u2500 pom.xml (or build.gradle)\n\u251c\u2500\u2500 src/\n\u251c\u2500\u2500 \u2514\u2500\u2500 main/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 agents/\n\u2502               \u2514\u2500\u2500 multitool/\n\u2502                   \u2514\u2500\u2500 MultiToolAgent.java\n\u2514\u2500\u2500 test/\n</code></pre> Dev UIMavenGradle <p>Run the following command from the terminal to launch the Dev UI.</p> <p>DO NOT change the main class name of the Dev UI server.</p> terminal<pre><code>mvn exec:java \\\n    -Dexec.mainClass=\"com.google.adk.web.AdkWebServer\" \\\n    -Dexec.args=\"--adk.agents.source-dir=src/main/java\" \\\n    -Dexec.classpathScope=\"compile\"\n</code></pre> <p>Step 1: Open the URL provided (usually <code>http://localhost:8080</code> or <code>http://127.0.0.1:8080</code>) directly in your browser.</p> <p>Step 2. In the top-left corner of the UI, you can select your agent in the dropdown. Select \"multi_tool_agent\".</p> <p>Troubleshooting</p> <p>If you do not see \"multi_tool_agent\" in the dropdown menu, make sure you are running the <code>mvn</code> command at the location where your Java source code is located (usually <code>src/main/java</code>).</p> <p>Step 3. Now you can chat with your agent using the textbox:</p> <p></p> <p>Step 4. You can also inspect individual function calls, responses and model responses by clicking on the actions:</p> <p></p> <p>With Maven, run the <code>main()</code> method of your Java class with the following command:</p> terminal<pre><code>mvn compile exec:java -Dexec.mainClass=\"agents.multitool.MultiToolAgent\"\n</code></pre> <p>With Gradle, the <code>build.gradle</code> or <code>build.gradle.kts</code> build file should have the following Java plugin in its <code>plugins</code> section:</p> <pre><code>plugins {\n    id('java')\n    // other plugins\n}\n</code></pre> <p>Then, elsewhere in the build file, at the top-level, create a new task to run the <code>main()</code> method of your agent:</p> <pre><code>tasks.register('runAgent', JavaExec) {\n    classpath = sourceSets.main.runtimeClasspath\n    mainClass = 'agents.multitool.MultiToolAgent'\n}\n</code></pre> <p>Finally, on the command-line, run the following command:</p> <pre><code>gradle runAgent\n</code></pre>"},{"location":"get-started/quickstart/#prompts","title":"\ud83d\udcdd \u7bc4\u4f8b\u63d0\u793a\u8a9e\uff08prompts\uff09\u8a66\u8a66\u770b","text":"<ul> <li>\u7d10\u7d04\u7684\u5929\u6c23\u5982\u4f55\uff1f</li> <li>\u7d10\u7d04\u73fe\u5728\u5e7e\u9ede\uff1f</li> <li>\u5df4\u9ece\u7684\u5929\u6c23\u5982\u4f55\uff1f</li> <li>\u5df4\u9ece\u73fe\u5728\u5e7e\u9ede\uff1f</li> </ul>"},{"location":"get-started/quickstart/#_3","title":"\ud83c\udf89 \u606d\u559c\uff01","text":"<p>\u4f60\u5df2\u7d93\u6210\u529f\u4f7f\u7528 Agent Development Kit (ADK) \u5efa\u7acb\u4e26\u8207\u4f60\u7684\u7b2c\u4e00\u500b agent \u4e92\u52d5\uff01</p>"},{"location":"get-started/quickstart/#_4","title":"\ud83d\udee3\ufe0f \u4e0b\u4e00\u6b65","text":"<ul> <li>\u524d\u5f80\u6559\u5b78\u8ab2\u7a0b\uff1a\u5b78\u7fd2\u5982\u4f55\u70ba\u4f60\u7684 agent \u589e\u52a0\u8a18\u61b6\u9ad4\uff08memory\uff09\u3001session\u3001state\uff1a   tutorial\u3002</li> <li>\u6df1\u5165\u9032\u968e\u8a2d\u5b9a\uff1a \u63a2\u7d22 setup   \u7ae0\u7bc0\uff0c\u6df1\u5165\u4e86\u89e3\u5c08\u6848\u7d50\u69cb\u3001\u8a2d\u5b9a\u65b9\u5f0f\u53ca\u5176\u4ed6\u4ecb\u9762\u3002</li> <li>\u7406\u89e3\u6838\u5fc3\u6982\u5ff5\uff1a \u9032\u4e00\u6b65\u8a8d\u8b58   agents concepts\u3002</li> </ul>"},{"location":"get-started/testing.en/","title":"Testing your Agents","text":"<p>Before you deploy your agent, you should test it to ensure that it is working as intended. The easiest way to test your agent in your development environment is to use the ADK API server.</p> PythonJava <pre><code>adk api_server\n</code></pre> <p>Make sure to update the port number.</p> <p><pre><code>mvn compile exec:java \\\n     -Dexec.args=\"--adk.agents.source-dir=src/main/java/agents --server.port=8080\"\n</code></pre> In Java, both the Dev UI and the API server are bundled together.</p> <p>This command will launch a local web server, where you can run cURL commands or send API requests to test your agent.</p> <p>Advanced Usage and Debugging</p> <p>For a complete reference on all available endpoints, request/response formats, and tips for debugging (including how to use the interactive API documentation), see the ADK API Server Guide below.</p>"},{"location":"get-started/testing.en/#local-testing","title":"Local testing","text":"<p>Local testing involves launching a local web server, creating a session, and sending queries to your agent. First, ensure you are in the correct working directory:</p> <pre><code>parent_folder/\n\u2514\u2500\u2500 my_sample_agent/\n    \u2514\u2500\u2500 agent.py (or Agent.java)\n</code></pre> <p>Launch the Local Server</p> <p>Next, launch the local server using the commands listed above.</p> <p>The output should appear similar to:</p> PythonJava <pre><code>INFO:     Started server process [12345]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://localhost:8000 (Press CTRL+C to quit)\n</code></pre> <pre><code>2025-05-13T23:32:08.972-06:00  INFO 37864 --- [ebServer.main()] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'\n2025-05-13T23:32:08.980-06:00  INFO 37864 --- [ebServer.main()] com.google.adk.web.AdkWebServer          : Started AdkWebServer in 1.15 seconds (process running for 2.877)\n2025-05-13T23:32:08.981-06:00  INFO 37864 --- [ebServer.main()] com.google.adk.web.AdkWebServer          : AdkWebServer application started successfully.\n</code></pre> <p>Your server is now running locally. Ensure you use the correct port number in all the subsequent commands.</p> <p>Create a new session</p> <p>With the API server still running, open a new terminal window or tab and create a new session with the agent using:</p> <pre><code>curl -X POST http://localhost:8000/apps/my_sample_agent/users/u_123/sessions/s_123 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"state\": {\"key1\": \"value1\", \"key2\": 42}}'\n</code></pre> <p>Let's break down what's happening:</p> <ul> <li><code>http://localhost:8000/apps/my_sample_agent/users/u_123/sessions/s_123</code>: This   creates a new session for your agent <code>my_sample_agent</code>, which is the name of   the agent folder, for a user ID (<code>u_123</code>) and for a session ID (<code>s_123</code>). You   can replace <code>my_sample_agent</code> with the name of your agent folder. You can   replace <code>u_123</code> with a specific user ID, and <code>s_123</code> with a specific session   ID.</li> <li><code>{\"state\": {\"key1\": \"value1\", \"key2\": 42}}</code>: This is optional. You can use   this to customize the agent's pre-existing state (dict) when creating the   session.</li> </ul> <p>This should return the session information if it was created successfully. The output should appear similar to:</p> <pre><code>{\"id\":\"s_123\",\"appName\":\"my_sample_agent\",\"userId\":\"u_123\",\"state\":{\"key1\":\"value1\",\"key2\":42},\"events\":[],\"lastUpdateTime\":1743711430.022186}\n</code></pre> <p>Info</p> <p>You cannot create multiple sessions with exactly the same user ID and session ID. If you try to, you may see a response, like: <code>{\"detail\":\"Session already exists: s_123\"}</code>. To fix this, you can either delete that session (e.g., <code>s_123</code>), or choose a different session ID.</p> <p>Send a query</p> <p>There are two ways to send queries via POST to your agent, via the <code>/run</code> or <code>/run_sse</code> routes.</p> <ul> <li><code>POST http://localhost:8000/run</code>: collects all events as a list and returns the   list all at once. Suitable for most users (if you are unsure, we recommend   using this one).</li> <li><code>POST http://localhost:8000/run_sse</code>: returns as Server-Sent-Events, which is a   stream of event objects. Suitable for those who want to be notified as soon as   the event is available. With <code>/run_sse</code>, you can also set <code>streaming</code> to   <code>true</code> to enable token-level streaming.</li> </ul> <p>Using <code>/run</code></p> <pre><code>curl -X POST http://localhost:8000/run \\\n-H \"Content-Type: application/json\" \\\n-d '{\n\"app_name\": \"my_sample_agent\",\n\"user_id\": \"u_123\",\n\"session_id\": \"s_123\",\n\"new_message\": {\n    \"role\": \"user\",\n    \"parts\": [{\n    \"text\": \"Hey whats the weather in new york today\"\n    }]\n}\n}'\n</code></pre> <p>If using <code>/run</code>, you will see the full output of events at the same time, as a list, which should appear similar to:</p> <pre><code>[{\"content\":{\"parts\":[{\"functionCall\":{\"id\":\"af-e75e946d-c02a-4aad-931e-49e4ab859838\",\"args\":{\"city\":\"new york\"},\"name\":\"get_weather\"}}],\"role\":\"model\"},\"invocationId\":\"e-71353f1e-aea1-4821-aa4b-46874a766853\",\"author\":\"weather_time_agent\",\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"longRunningToolIds\":[],\"id\":\"2Btee6zW\",\"timestamp\":1743712220.385936},{\"content\":{\"parts\":[{\"functionResponse\":{\"id\":\"af-e75e946d-c02a-4aad-931e-49e4ab859838\",\"name\":\"get_weather\",\"response\":{\"status\":\"success\",\"report\":\"The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).\"}}}],\"role\":\"user\"},\"invocationId\":\"e-71353f1e-aea1-4821-aa4b-46874a766853\",\"author\":\"weather_time_agent\",\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"id\":\"PmWibL2m\",\"timestamp\":1743712221.895042},{\"content\":{\"parts\":[{\"text\":\"OK. The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).\\n\"}],\"role\":\"model\"},\"invocationId\":\"e-71353f1e-aea1-4821-aa4b-46874a766853\",\"author\":\"weather_time_agent\",\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"id\":\"sYT42eVC\",\"timestamp\":1743712221.899018}]\n</code></pre> <p>Using <code>/run_sse</code></p> <pre><code>curl -X POST http://localhost:8000/run_sse \\\n-H \"Content-Type: application/json\" \\\n-d '{\n\"app_name\": \"my_sample_agent\",\n\"user_id\": \"u_123\",\n\"session_id\": \"s_123\",\n\"new_message\": {\n    \"role\": \"user\",\n    \"parts\": [{\n    \"text\": \"Hey whats the weather in new york today\"\n    }]\n},\n\"streaming\": false\n}'\n</code></pre> <p>You can set <code>streaming</code> to <code>true</code> to enable token-level streaming, which means the response will be returned to you in multiple chunks and the output should appear similar to:</p> <p><pre><code>data: {\"content\":{\"parts\":[{\"functionCall\":{\"id\":\"af-f83f8af9-f732-46b6-8cb5-7b5b73bbf13d\",\"args\":{\"city\":\"new york\"},\"name\":\"get_weather\"}}],\"role\":\"model\"},\"invocationId\":\"e-3f6d7765-5287-419e-9991-5fffa1a75565\",\"author\":\"weather_time_agent\",\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"longRunningToolIds\":[],\"id\":\"ptcjaZBa\",\"timestamp\":1743712255.313043}\n\ndata: {\"content\":{\"parts\":[{\"functionResponse\":{\"id\":\"af-f83f8af9-f732-46b6-8cb5-7b5b73bbf13d\",\"name\":\"get_weather\",\"response\":{\"status\":\"success\",\"report\":\"The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).\"}}}],\"role\":\"user\"},\"invocationId\":\"e-3f6d7765-5287-419e-9991-5fffa1a75565\",\"author\":\"weather_time_agent\",\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"id\":\"5aocxjaq\",\"timestamp\":1743712257.387306}\n\ndata: {\"content\":{\"parts\":[{\"text\":\"OK. The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).\\n\"}],\"role\":\"model\"},\"invocationId\":\"e-3f6d7765-5287-419e-9991-5fffa1a75565\",\"author\":\"weather_time_agent\",\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"id\":\"rAnWGSiV\",\"timestamp\":1743712257.391317}\n</code></pre> Send a query with a base64 encoded file using <code>/run</code> or <code>/run_sse</code></p> <pre><code>curl -X POST http://localhost:8000/run \\\n--H 'Content-Type: application/json' \\\n--d '{\n   \"appName\":\"my_sample_agent\",\n   \"userId\":\"u_123\",\n   \"sessionId\":\"s_123\",\n   \"newMessage\":{\n      \"role\":\"user\",\n      \"parts\":[\n         {\n            \"text\":\"Describe this image\"\n         },\n         {\n            \"inlineData\":{\n               \"displayName\":\"my_image.png\",\n               \"data\":\"iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAACXBIWXMAAAsTAAALEwEAmpw...\",\n               \"mimeType\":\"image/png\"\n            }\n         }\n      ]\n   },\n   \"streaming\":false\n}'\n</code></pre> <p>Info</p> <p>If you are using <code>/run_sse</code>, you should see each event as soon as it becomes available.</p>"},{"location":"get-started/testing.en/#integrations","title":"Integrations","text":"<p>ADK uses Callbacks to integrate with third-party observability tools. These integrations capture detailed traces of agent calls and interactions, which are crucial for understanding behavior, debugging issues, and evaluating performance.</p> <ul> <li>Comet Opik is an open-source LLM   observability and evaluation platform that   natively supports ADK.</li> </ul>"},{"location":"get-started/testing.en/#deploying-your-agent","title":"Deploying your agent","text":"<p>Now that you've verified the local operation of your agent, you're ready to move on to deploying your agent! Here are some ways you can deploy your agent:</p> <ul> <li>Deploy to Agent Engine, the easiest way to deploy   your ADK agents to a managed service in Vertex AI on Google Cloud.</li> <li>Deploy to Cloud Run and have full control over how   you scale and manage your agents using serverless architecture on Google   Cloud.</li> </ul>"},{"location":"get-started/testing.en/#the-adk-api-server","title":"The ADK API Server","text":"<p>The ADK API Server is a pre-packaged FastAPI web server that exposes your agents through a RESTful API. It is the primary tool for local testing and development, allowing you to interact with your agents programmatically before deploying them.</p>"},{"location":"get-started/testing.en/#running-the-server","title":"Running the Server","text":"<p>To start the server, run the following command from your project's root directory:</p> <pre><code>adk api_server\n</code></pre> <p>By default, the server runs on <code>http://localhost:8000</code>. You will see output confirming that the server has started:</p> <pre><code>INFO:     Uvicorn running on http://localhost:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"get-started/testing.en/#debugging-with-interactive-api-docs","title":"Debugging with Interactive API Docs","text":"<p>The API server automatically generates interactive API documentation using Swagger UI. This is an invaluable tool for exploring endpoints, understanding request formats, and testing your agent directly from your browser.</p> <p>To access the interactive docs, start the API server and navigate to http://localhost:8000/docs in your web browser.</p> <p>You will see a complete, interactive list of all available API endpoints, which you can expand to see detailed information about parameters, request bodies, and response schemas. You can even click \"Try it out\" to send live requests to your running agents.</p>"},{"location":"get-started/testing.en/#api-endpoints","title":"API Endpoints","text":"<p>The following sections detail the primary endpoints for interacting with your agents.</p> <p>JSON Naming Convention</p> <ul> <li>Request bodies must use <code>snake_case</code> for field names (e.g., <code>\"app_name\"</code>).</li> <li>Response bodies will use <code>camelCase</code> for field names (e.g., <code>\"appName\"</code>).</li> </ul>"},{"location":"get-started/testing.en/#utility-endpoints","title":"Utility Endpoints","text":""},{"location":"get-started/testing.en/#list-available-agents","title":"List Available Agents","text":"<p>Returns a list of all agent applications discovered by the server.</p> <ul> <li>Method: <code>GET</code></li> <li>Path: <code>/list-apps</code></li> </ul> <p>Example Request <pre><code>curl -X GET http://localhost:8000/list-apps\n</code></pre></p> <p>Example Response <pre><code>[\"my_sample_agent\", \"another_agent\"]\n</code></pre></p>"},{"location":"get-started/testing.en/#session-management","title":"Session Management","text":"<p>Sessions store the state and event history for a specific user's interaction with an agent.</p>"},{"location":"get-started/testing.en/#create-or-update-a-session","title":"Create or Update a Session","text":"<p>Creates a new session or updates an existing one. If a session with the given IDs already exists, its state will be overwritten with the new state provided.</p> <ul> <li>Method: <code>POST</code></li> <li>Path: <code>/apps/{app_name}/users/{user_id}/sessions/{session_id}</code></li> </ul> <p>Request Body <pre><code>{\n  \"state\": {\n    \"key1\": \"value1\",\n    \"key2\": 42\n  }\n}\n</code></pre></p> <p>Example Request <pre><code>curl -X POST http://localhost:8000/apps/my_sample_agent/users/u_123/sessions/s_abc \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"state\": {\"visit_count\": 5}}'\n</code></pre></p> <p>Example Response <pre><code>{\"id\":\"s_abc\",\"appName\":\"my_sample_agent\",\"userId\":\"u_123\",\"state\":{\"visit_count\":5},\"events\":[],\"lastUpdateTime\":1743711430.022186}\n</code></pre></p>"},{"location":"get-started/testing.en/#get-a-session","title":"Get a Session","text":"<p>Retrieves the details of a specific session, including its current state and all associated events.</p> <ul> <li>Method: <code>GET</code></li> <li>Path: <code>/apps/{app_name}/users/{user_id}/sessions/{session_id}</code></li> </ul> <p>Example Request <pre><code>curl -X GET http://localhost:8000/apps/my_sample_agent/users/u_123/sessions/s_abc\n</code></pre></p> <p>Example Response <pre><code>{\"id\":\"s_abc\",\"appName\":\"my_sample_agent\",\"userId\":\"u_123\",\"state\":{\"visit_count\":5},\"events\":[...],\"lastUpdateTime\":1743711430.022186}\n</code></pre></p>"},{"location":"get-started/testing.en/#delete-a-session","title":"Delete a Session","text":"<p>Deletes a session and all of its associated data.</p> <ul> <li>Method: <code>DELETE</code></li> <li>Path: <code>/apps/{app_name}/users/{user_id}/sessions/{session_id}</code></li> </ul> <p>Example Request <pre><code>curl -X DELETE http://localhost:8000/apps/my_sample_agent/users/u_123/sessions/s_abc\n</code></pre></p> <p>Example Response A successful deletion returns an empty response with a <code>204 No Content</code> status code.</p>"},{"location":"get-started/testing.en/#agent-execution","title":"Agent Execution","text":"<p>These endpoints are used to send a new message to an agent and get a response.</p>"},{"location":"get-started/testing.en/#run-agent-single-response","title":"Run Agent (Single Response)","text":"<p>Executes the agent and returns all generated events in a single JSON array after the run is complete.</p> <ul> <li>Method: <code>POST</code></li> <li>Path: <code>/run</code></li> </ul> <p>Request Body <pre><code>{\n  \"app_name\": \"my_sample_agent\",\n  \"user_id\": \"u_123\",\n  \"session_id\": \"s_abc\",\n  \"new_message\": {\n    \"role\": \"user\",\n    \"parts\": [\n      { \"text\": \"What is the capital of France?\" }\n    ]\n  }\n}\n</code></pre></p> <p>Example Request <pre><code>curl -X POST http://localhost:8000/run \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"app_name\": \"my_sample_agent\",\n    \"user_id\": \"u_123\",\n    \"session_id\": \"s_abc\",\n    \"new_message\": {\n      \"role\": \"user\",\n      \"parts\": [{\"text\": \"What is the capital of France?\"}]\n    }\n  }'\n</code></pre></p>"},{"location":"get-started/testing.en/#run-agent-streaming","title":"Run Agent (Streaming)","text":"<p>Executes the agent and streams events back to the client as they are generated using Server-Sent Events (SSE).</p> <ul> <li>Method: <code>POST</code></li> <li>Path: <code>/run_sse</code></li> </ul> <p>Request Body The request body is the same as for <code>/run</code>, with an additional optional <code>streaming</code> flag. <pre><code>{\n  \"app_name\": \"my_sample_agent\",\n  \"user_id\": \"u_123\",\n  \"session_id\": \"s_abc\",\n  \"new_message\": {\n    \"role\": \"user\",\n    \"parts\": [\n      { \"text\": \"What is the weather in New York?\" }\n    ]\n  },\n  \"streaming\": true\n}\n</code></pre> - <code>streaming</code>: (Optional) Set to <code>true</code> to enable token-level streaming for model responses. Defaults to <code>false</code>.</p> <p>Example Request <pre><code>curl -X POST http://localhost:8000/run_sse \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"app_name\": \"my_sample_agent\",\n    \"user_id\": \"u_123\",\n    \"session_id\": \"s_abc\",\n    \"new_message\": {\n      \"role\": \"user\",\n      \"parts\": [{\"text\": \"What is the weather in New York?\"}]\n    },\n    \"streaming\": false\n  }'\n</code></pre></p>"},{"location":"get-started/testing/","title":"\u6e2c\u8a66\u4f60\u7684 agent","text":"<p>\u5728\u90e8\u7f72\u4f60\u7684 agent \u4e4b\u524d\uff0c\u61c9\u8a72\u5148\u9032\u884c\u6e2c\u8a66\uff0c\u4ee5\u78ba\u4fdd\u5176\u904b\u4f5c\u7b26\u5408\u9810\u671f\u3002\u6700\u7c21\u55ae\u7684\u6e2c\u8a66\u65b9\u5f0f\u662f\u5728\u958b\u767c\u74b0\u5883\u4e2d\u4f7f\u7528 ADK API \u4f3a\u670d\u5668\u3002</p> PythonJava <pre><code>adk api_server\n</code></pre> <p>Make sure to update the port number.</p> <p><pre><code>mvn compile exec:java \\\n     -Dexec.args=\"--adk.agents.source-dir=src/main/java/agents --server.port=8080\"\n</code></pre> In Java, both the Dev UI and the API server are bundled together.</p> <p>\u6b64\u6307\u4ee4\u6703\u555f\u52d5\u4e00\u500b\u672c\u6a5f\u7db2\u9801\u4f3a\u670d\u5668\uff0c\u60a8\u53ef\u4ee5\u5728\u8a72\u4f3a\u670d\u5668\u4e0a\u57f7\u884c cURL \u6307\u4ee4\u6216\u767c\u9001 API \u8acb\u6c42\uff0c\u4ee5\u6e2c\u8a66\u60a8\u7684 agent\u3002</p> <p>Advanced Usage and Debugging</p> <p>\u5982\u9700\u5b8c\u6574\u7684\u6240\u6709\u53ef\u7528 API \u7aef\u9ede\u3001\u8acb\u6c42/\u56de\u61c9\u683c\u5f0f\uff0c\u4ee5\u53ca\u9664\u932f\u6280\u5de7\uff08\u5305\u542b\u5982\u4f55\u4f7f\u7528\u4e92\u52d5\u5f0f API \u6587\u4ef6\u8aaa\u660e\uff09\uff0c\u8acb\u53c3\u95b1\u4e0b\u65b9\u7684 ADK API Server Guide\u3002</p>"},{"location":"get-started/testing/#_1","title":"\u672c\u6a5f\u6e2c\u8a66","text":"<p>\u672c\u6a5f\u6e2c\u8a66\u5305\u542b\u555f\u52d5\u672c\u6a5f\u958b\u767c\u4f3a\u670d\u5668\u3001\u5efa\u7acb session\uff0c\u4e26\u5411\u4f60\u7684 agent \u767c\u9001\u67e5\u8a62\u3002\u9996\u5148\uff0c\u8acb\u78ba\u4fdd\u4f60\u5df2\u5728\u6b63\u78ba\u7684\u5de5\u4f5c\u76ee\u9304\u4e0b\uff1a</p> <pre><code>parent_folder/\n\u2514\u2500\u2500 my_sample_agent/\n    \u2514\u2500\u2500 agent.py (or Agent.java)\n</code></pre> <p>\u555f\u52d5\u672c\u6a5f\u958b\u767c\u4f3a\u670d\u5668</p> <p>\u63a5\u4e0b\u4f86\uff0c\u8acb\u4f7f\u7528\u4e0a\u65b9\u5217\u51fa\u7684\u6307\u4ee4\u4f86\u555f\u52d5\u672c\u6a5f\u958b\u767c\u4f3a\u670d\u5668\u3002</p> <p>\u8f38\u51fa\u7d50\u679c\u61c9\u985e\u4f3c\u65bc\uff1a</p> PythonJava <pre><code>INFO:     Started server process [12345]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://localhost:8000 (Press CTRL+C to quit)\n</code></pre> <pre><code>2025-05-13T23:32:08.972-06:00  INFO 37864 --- [ebServer.main()] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'\n2025-05-13T23:32:08.980-06:00  INFO 37864 --- [ebServer.main()] com.google.adk.web.AdkWebServer          : Started AdkWebServer in 1.15 seconds (process running for 2.877)\n2025-05-13T23:32:08.981-06:00  INFO 37864 --- [ebServer.main()] com.google.adk.web.AdkWebServer          : AdkWebServer application started successfully.\n</code></pre> <p>\u60a8\u7684\u4f3a\u670d\u5668\u73fe\u5728\u5df2\u5728\u672c\u6a5f\u904b\u884c\u3002\u8acb\u78ba\u4fdd\u5728\u5f8c\u7e8c\u6240\u6709\u6307\u4ee4\u4e2d\u4f7f\u7528\u6b63\u78ba\u7684\u57e0\u865f\u3002</p> <p>\u5efa\u7acb\u65b0 session</p> <p>\u5728 API \u4f3a\u670d\u5668\u6301\u7e8c\u904b\u884c\u7684\u60c5\u6cc1\u4e0b\uff0c\u8acb\u958b\u555f\u4e00\u500b\u65b0\u7684\u7d42\u7aef\u6a5f\u8996\u7a97\u6216\u5206\u9801\uff0c\u4e26\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u8207 agent \u5efa\u7acb\u65b0\u7684 session\uff1a</p> <pre><code>curl -X POST http://localhost:8000/apps/my_sample_agent/users/u_123/sessions/s_123 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"state\": {\"key1\": \"value1\", \"key2\": 42}}'\n</code></pre> <p>\u8b93\u6211\u5011\u4f86\u62c6\u89e3\u4e00\u4e0b\u9019\u6bb5\u7a0b\u5f0f\u78bc\u7684\u904b\u4f5c\u65b9\u5f0f\uff1a</p> <ul> <li><code>http://localhost:8000/apps/my_sample_agent/users/u_123/sessions/s_123</code>\uff1a\u9019\u6703\u70ba\u4f60\u7684 agent <code>my_sample_agent</code>\uff08\u4e5f\u5c31\u662f agent \u8cc7\u6599\u593e\u7684\u540d\u7a31\uff09\u3001\u4f7f\u7528\u8005 ID\uff08<code>u_123</code>\uff09\u4ee5\u53ca session ID\uff08<code>s_123</code>\uff09\u5efa\u7acb\u4e00\u500b\u65b0\u7684 session\u3002\u4f60\u53ef\u4ee5\u5c07 <code>my_sample_agent</code> \u66ff\u63db\u6210\u4f60\u7684 agent \u8cc7\u6599\u593e\u540d\u7a31\uff0c\u4e5f\u53ef\u4ee5\u5c07 <code>u_123</code> \u66ff\u63db\u6210\u7279\u5b9a\u7684\u4f7f\u7528\u8005 ID\uff0c<code>s_123</code> \u5247\u53ef\u4ee5\u66ff\u63db\u6210\u7279\u5b9a\u7684 session ID\u3002</li> <li><code>{\"state\": {\"key1\": \"value1\", \"key2\": 42}}</code>\uff1a\u9019\u662f\u9078\u586b\u9805\u76ee\u3002\u4f60\u53ef\u4ee5\u5728\u5efa\u7acb session \u6642\uff0c\u900f\u904e\u9019\u500b\u53c3\u6578\u81ea\u8a02 agent \u7684\u9810\u8a2d\u72c0\u614b\uff08dict\uff09\u3002</li> </ul> <p>\u5982\u679c\u5efa\u7acb\u6210\u529f\uff0c\u9019\u61c9\u8a72\u6703\u56de\u50b3 session \u7684\u76f8\u95dc\u8cc7\u8a0a\u3002\u8f38\u51fa\u7d50\u679c\u61c9\u8a72\u6703\u985e\u4f3c\u5982\u4e0b\uff1a</p> <pre><code>{\"id\":\"s_123\",\"appName\":\"my_sample_agent\",\"userId\":\"u_123\",\"state\":{\"key1\":\"value1\",\"key2\":42},\"events\":[],\"lastUpdateTime\":1743711430.022186}\n</code></pre> <p>Info</p> <p>\u4f60\u4e0d\u80fd\u4ee5\u5b8c\u5168\u76f8\u540c\u7684 user ID \u548c session ID \u5efa\u7acb\u591a\u500b session\u3002\u5982\u679c\u4f60\u5617\u8a66\u9019\u9ebc\u505a\uff0c\u53ef\u80fd\u6703\u770b\u5230\u50cf\u9019\u6a23\u7684\u56de\u61c9\uff1a <code>{\"detail\":\"Session already exists: s_123\"}</code>\u3002\u8981\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u4f60\u53ef\u4ee5\u522a\u9664\u8a72 session\uff08\u4f8b\u5982\uff1a<code>s_123</code>\uff09\uff0c\u6216\u9078\u64c7\u4e0d\u540c\u7684 session ID\u3002</p> <p>\u767c\u9001\u67e5\u8a62</p> <p>\u4f60\u53ef\u4ee5\u900f\u904e POST \u8acb\u6c42\uff0c\u4f7f\u7528 <code>/run</code> \u6216 <code>/run_sse</code> \u8def\u7531\u5411\u4f60\u7684 agent \u767c\u9001\u67e5\u8a62\uff0c\u6709\u5169\u7a2e\u65b9\u5f0f\uff1a</p> <ul> <li><code>POST http://localhost:8000/run</code>\uff1a\u5c07\u6240\u6709\u4e8b\u4ef6\u6536\u96c6\u70ba\u4e00\u500b\u5217\u8868\uff0c\u4e26\u4e00\u6b21\u6027\u56de\u50b3\u8a72\u5217\u8868\u3002\u9069\u5408\u5927\u591a\u6578\u4f7f\u7528\u8005\uff08\u5982\u679c\u4f60\u4e0d\u78ba\u5b9a\uff0c\u5efa\u8b70\u4f7f\u7528\u9019\u500b\uff09\u3002</li> <li><code>POST http://localhost:8000/run_sse</code>\uff1a\u4ee5 Server-Sent-Events\uff08SSE\uff09\u7684\u65b9\u5f0f\u56de\u50b3\uff0c\u4e5f\u5c31\u662f\u4e8b\u4ef6\u7269\u4ef6\u7684\u4e32\u6d41\u3002\u9069\u5408\u5e0c\u671b\u5728\u4e8b\u4ef6\u53ef\u7528\u6642\u7acb\u5373\u6536\u5230\u901a\u77e5\u7684\u4f7f\u7528\u8005\u3002\u4f7f\u7528 <code>/run_sse</code> \u6642\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c07 <code>streaming</code> \u8a2d\u70ba <code>true</code>\uff0c\u4ee5\u555f\u7528\u9010\u5b57\u5143\u4e32\u6d41\uff08token-level streaming\uff09\u3002</li> </ul> <p>\u4f7f\u7528 <code>/run</code></p> <pre><code>curl -X POST http://localhost:8000/run \\\n-H \"Content-Type: application/json\" \\\n-d '{\n\"app_name\": \"my_sample_agent\",\n\"user_id\": \"u_123\",\n\"session_id\": \"s_123\",\n\"new_message\": {\n    \"role\": \"user\",\n    \"parts\": [{\n    \"text\": \"Hey whats the weather in new york today\"\n    }]\n}\n}'\n</code></pre> <p>\u5982\u679c\u4f7f\u7528 <code>/run</code>\uff0c\u4f60\u6703\u540c\u6642\u770b\u5230\u6240\u6709\u4e8b\u4ef6\u7684\u5b8c\u6574\u8f38\u51fa\uff0c\u5448\u73fe\u70ba\u4e00\u500b\u6e05\u55ae\uff0c\u986f\u793a\u5167\u5bb9\u61c9\u8a72\u985e\u4f3c\u65bc\uff1a</p> <pre><code>[{\"content\":{\"parts\":[{\"functionCall\":{\"id\":\"af-e75e946d-c02a-4aad-931e-49e4ab859838\",\"args\":{\"city\":\"new york\"},\"name\":\"get_weather\"}}],\"role\":\"model\"},\"invocationId\":\"e-71353f1e-aea1-4821-aa4b-46874a766853\",\"author\":\"weather_time_agent\",\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"longRunningToolIds\":[],\"id\":\"2Btee6zW\",\"timestamp\":1743712220.385936},{\"content\":{\"parts\":[{\"functionResponse\":{\"id\":\"af-e75e946d-c02a-4aad-931e-49e4ab859838\",\"name\":\"get_weather\",\"response\":{\"status\":\"success\",\"report\":\"The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).\"}}}],\"role\":\"user\"},\"invocationId\":\"e-71353f1e-aea1-4821-aa4b-46874a766853\",\"author\":\"weather_time_agent\",\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"id\":\"PmWibL2m\",\"timestamp\":1743712221.895042},{\"content\":{\"parts\":[{\"text\":\"OK. The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).\\n\"}],\"role\":\"model\"},\"invocationId\":\"e-71353f1e-aea1-4821-aa4b-46874a766853\",\"author\":\"weather_time_agent\",\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"id\":\"sYT42eVC\",\"timestamp\":1743712221.899018}]\n</code></pre> <p>\u4f7f\u7528 <code>/run_sse</code></p> <pre><code>curl -X POST http://localhost:8000/run_sse \\\n-H \"Content-Type: application/json\" \\\n-d '{\n\"app_name\": \"my_sample_agent\",\n\"user_id\": \"u_123\",\n\"session_id\": \"s_123\",\n\"new_message\": {\n    \"role\": \"user\",\n    \"parts\": [{\n    \"text\": \"Hey whats the weather in new york today\"\n    }]\n},\n\"streaming\": false\n}'\n</code></pre> <p>\u4f60\u53ef\u4ee5\u5c07 <code>streaming</code> \u8a2d\u70ba <code>true</code> \u4ee5\u555f\u7528\u9010\u5b57\u5143\u4e32\u6d41 (token-level streaming)\uff0c\u9019\u8868\u793a\u56de\u61c9\u6703\u4ee5\u591a\u500b\u5340\u584a\uff08chunk\uff09\u50b3\u56de\u7d66\u4f60\uff0c\u8f38\u51fa\u61c9\u8a72\u6703\u985e\u4f3c\u5982\u4e0b\u6240\u793a\uff1a</p> <p><pre><code>data: {\"content\":{\"parts\":[{\"functionCall\":{\"id\":\"af-f83f8af9-f732-46b6-8cb5-7b5b73bbf13d\",\"args\":{\"city\":\"new york\"},\"name\":\"get_weather\"}}],\"role\":\"model\"},\"invocationId\":\"e-3f6d7765-5287-419e-9991-5fffa1a75565\",\"author\":\"weather_time_agent\",\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"longRunningToolIds\":[],\"id\":\"ptcjaZBa\",\"timestamp\":1743712255.313043}\n\ndata: {\"content\":{\"parts\":[{\"functionResponse\":{\"id\":\"af-f83f8af9-f732-46b6-8cb5-7b5b73bbf13d\",\"name\":\"get_weather\",\"response\":{\"status\":\"success\",\"report\":\"The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).\"}}}],\"role\":\"user\"},\"invocationId\":\"e-3f6d7765-5287-419e-9991-5fffa1a75565\",\"author\":\"weather_time_agent\",\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"id\":\"5aocxjaq\",\"timestamp\":1743712257.387306}\n\ndata: {\"content\":{\"parts\":[{\"text\":\"OK. The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).\\n\"}],\"role\":\"model\"},\"invocationId\":\"e-3f6d7765-5287-419e-9991-5fffa1a75565\",\"author\":\"weather_time_agent\",\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"id\":\"rAnWGSiV\",\"timestamp\":1743712257.391317}\n</code></pre> \u4f7f\u7528 <code>/run</code> \u6216 <code>/run_sse</code> \u50b3\u9001\u5305\u542b base64 \u7de8\u78bc\u6a94\u6848\u7684\u67e5\u8a62</p> <pre><code>curl -X POST http://localhost:8000/run \\\n--H 'Content-Type: application/json' \\\n--d '{\n   \"appName\":\"my_sample_agent\",\n   \"userId\":\"u_123\",\n   \"sessionId\":\"s_123\",\n   \"newMessage\":{\n      \"role\":\"user\",\n      \"parts\":[\n         {\n            \"text\":\"Describe this image\"\n         },\n         {\n            \"inlineData\":{\n               \"displayName\":\"my_image.png\",\n               \"data\":\"iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAACXBIWXMAAAsTAAALEwEAmpw...\",\n               \"mimeType\":\"image/png\"\n            }\n         }\n      ]\n   },\n   \"streaming\":false\n}'\n</code></pre> <p>Info</p> <p>\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 <code>/run_sse</code>\uff0c\u4f60\u61c9\u8a72\u80fd\u5728\u6bcf\u500b\u4e8b\u4ef6\u4e00\u65e6\u53ef\u7528\u6642\u7acb\u5373\u770b\u5230\u5b83\u3002</p>"},{"location":"get-started/testing/#_2","title":"\u6574\u5408","text":"<p>Agent Development Kit (ADK) \u4f7f\u7528 Callbacks \u4f86\u8207\u7b2c\u4e09\u65b9\u53ef\u89c0\u6e2c\u6027\u5de5\u5177\u6574\u5408\u3002\u9019\u4e9b\u6574\u5408\u80fd\u5920\u6355\u6349 agent \u547c\u53eb\u8207\u4e92\u52d5\u7684\u8a73\u7d30\u8ffd\u8e64\u7d00\u9304\uff0c\u9019\u5c0d\u65bc\u7406\u89e3 agent \u884c\u70ba\u3001\u9664\u932f\u554f\u984c\u4ee5\u53ca\u8a55\u4f30\u6548\u80fd\u90fd\u81f3\u95dc\u91cd\u8981\u3002</p> <ul> <li>Comet Opik \u662f\u4e00\u500b\u958b\u6e90\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u53ef\u89c0\u6e2c\u6027\u8207\u8a55\u4f30\u5e73\u53f0\uff0c\u4e26\u4e14   \u539f\u751f\u652f\u63f4 ADK\u3002</li> </ul>"},{"location":"get-started/testing/#agent_1","title":"\u90e8\u7f72\u4f60\u7684 agent","text":"<p>\u73fe\u5728\u4f60\u5df2\u7d93\u9a57\u8b49\u4e86 agent \u5728\u672c\u6a5f\u7684\u904b\u4f5c\uff0c\u63a5\u4e0b\u4f86\u5c31\u53ef\u4ee5\u6e96\u5099\u90e8\u7f72\u4f60\u7684 agent \u4e86\uff01\u4ee5\u4e0b\u662f\u5e7e\u7a2e\u90e8\u7f72 agent \u7684\u65b9\u5f0f\uff1a</p> <ul> <li>\u90e8\u7f72\u5230 Agent Engine\uff0c\u9019\u662f\u5c07\u4f60\u7684 ADK agent \u90e8\u7f72\u5230 Google Cloud \u4e0a Vertex AI \u53d7\u7ba1\u670d\u52d9\u7684\u6700\u7c21\u55ae\u65b9\u5f0f\u3002</li> <li>\u90e8\u7f72\u5230 Cloud Run\uff0c\u8b93\u4f60\u80fd\u5b8c\u5168\u638c\u63a7 agent \u7684\u64f4\u5c55\u8207\u7ba1\u7406\uff0c\u4e26\u5229\u7528 Google Cloud \u7684\u7121\u4f3a\u670d\u5668\u67b6\u69cb\u3002</li> </ul>"},{"location":"get-started/testing/#adk-api","title":"ADK API \u4f3a\u670d\u5668","text":"<p>ADK API \u4f3a\u670d\u5668\u662f\u4e00\u500b\u9810\u5148\u5c01\u88dd\u597d\u7684 FastAPI \u7db2\u9801\u4f3a\u670d\u5668\uff0c\u80fd\u900f\u904e RESTful API \u5c07\u4f60\u7684 agent \u5c0d\u5916\u63d0\u4f9b\u670d\u52d9\u3002\u9019\u662f\u672c\u6a5f\u6e2c\u8a66\u8207\u958b\u767c\u7684\u4e3b\u8981\u5de5\u5177\uff0c\u8b93\u4f60\u5728\u90e8\u7f72\u524d\u53ef\u4ee5\u4ee5\u7a0b\u5f0f\u5316\u65b9\u5f0f\u8207 agent \u4e92\u52d5\u3002</p>"},{"location":"get-started/testing/#_3","title":"\u57f7\u884c\u4f3a\u670d\u5668","text":"<p>\u8981\u555f\u52d5\u4f3a\u670d\u5668\uff0c\u8acb\u5728\u4f60\u7684\u5c08\u6848\u6839\u76ee\u9304\u4e0b\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\uff1a</p> <pre><code>adk api_server\n</code></pre> <p>\u9810\u8a2d\u60c5\u6cc1\u4e0b\uff0c\u4f3a\u670d\u5668\u6703\u5728 <code>http://localhost:8000</code> \u4e0a\u904b\u884c\u3002\u4f60\u6703\u770b\u5230\u4f3a\u670d\u5668\u5df2\u555f\u52d5\u7684\u78ba\u8a8d\u8f38\u51fa\uff1a</p> <pre><code>INFO:     Uvicorn running on http://localhost:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"get-started/testing/#api","title":"\u4f7f\u7528\u4e92\u52d5\u5f0f API \u6587\u4ef6\u9032\u884c\u9664\u932f","text":"<p>API \u4f3a\u670d\u5668\u6703\u81ea\u52d5\u7522\u751f\u4e92\u52d5\u5f0f API \u6587\u4ef6\uff0c\u63a1\u7528 Swagger UI\u3002\u9019\u662f\u4e00\u500b\u6975\u70ba\u5bf6\u8cb4\u7684\u5de5\u5177\uff0c\u53ef\u7528\u65bc\u63a2\u7d22 API \u7aef\u9ede\u3001\u4e86\u89e3\u8acb\u6c42\u683c\u5f0f\uff0c\u4e26\u53ef\u76f4\u63a5\u5f9e\u700f\u89bd\u5668\u6e2c\u8a66\u4f60\u7684 agent\u3002</p> <p>\u8981\u5b58\u53d6\u4e92\u52d5\u5f0f\u6587\u4ef6\uff0c\u8acb\u555f\u52d5 API \u4f3a\u670d\u5668\uff0c\u7136\u5f8c\u5728\u700f\u89bd\u5668\u4e2d\u524d\u5f80 http://localhost:8000/docs\u3002</p> <p>\u4f60\u5c07\u6703\u770b\u5230\u6240\u6709\u53ef\u7528 API \u7aef\u9ede\u7684\u5b8c\u6574\u4e92\u52d5\u6e05\u55ae\uff0c\u9ede\u958b\u5f8c\u53ef\u67e5\u770b\u53c3\u6578\u3001\u8acb\u6c42\u4e3b\u9ad4\uff08request body\uff09\u4ee5\u53ca\u56de\u61c9 schema \u7684\u8a73\u7d30\u8cc7\u8a0a\u3002\u4f60\u751a\u81f3\u53ef\u4ee5\u9ede\u9078\u300cTry it out\u300d\u4f86\u5c0d\u6b63\u5728\u57f7\u884c\u7684 agent \u767c\u9001\u5373\u6642\u8acb\u6c42\u3002</p>"},{"location":"get-started/testing/#api_1","title":"API \u7aef\u9ede","text":"<p>\u4ee5\u4e0b\u7ae0\u7bc0\u5c07\u8a73\u7d30\u8aaa\u660e\u8207\u4f60\u7684 agent \u4e92\u52d5\u7684\u4e3b\u8981 API \u7aef\u9ede\u3002</p> <p>JSON Naming Convention</p> <ul> <li>Request bodies \u5fc5\u9808\u4f7f\u7528 <code>snake_case</code> \u4f5c\u70ba\u6b04\u4f4d\u540d\u7a31\uff08\u4f8b\u5982\uff1a<code>\"app_name\"</code>\uff09\u3002</li> <li>Response bodies \u6703\u4f7f\u7528 <code>camelCase</code> \u4f5c\u70ba\u6b04\u4f4d\u540d\u7a31\uff08\u4f8b\u5982\uff1a<code>\"appName\"</code>\uff09\u3002</li> </ul>"},{"location":"get-started/testing/#utility-endpoints","title":"\u516c\u7528\u7aef\u9ede\uff08Utility Endpoints\uff09","text":""},{"location":"get-started/testing/#agent_2","title":"\u5217\u51fa\u53ef\u7528\u7684 agent","text":"<p>\u56de\u50b3\u7531\u4f3a\u670d\u5668\u767c\u73fe\u7684\u6240\u6709 agent \u61c9\u7528\u7a0b\u5f0f\u6e05\u55ae\u3002</p> <ul> <li>Method\uff1a <code>GET</code></li> <li>Path\uff1a <code>/list-apps</code></li> </ul> <p>\u7bc4\u4f8b\u8acb\u6c42 <pre><code>curl -X GET http://localhost:8000/list-apps\n</code></pre></p> <p>\u7bc4\u4f8b\u56de\u61c9 <pre><code>[\"my_sample_agent\", \"another_agent\"]\n</code></pre></p>"},{"location":"get-started/testing/#session","title":"Session \u7ba1\u7406","text":"<p>Session \u7528\u65bc\u5132\u5b58\u7279\u5b9a\u4f7f\u7528\u8005\u8207 agent \u4e92\u52d5\u6642\u7684 state \u53ca\u4e8b\u4ef6\u6b77\u53f2\u7d00\u9304\u3002</p>"},{"location":"get-started/testing/#session_1","title":"\u5efa\u7acb\u6216\u66f4\u65b0 Session","text":"<p>\u5efa\u7acb\u65b0\u7684 Session\uff0c\u6216\u66f4\u65b0\u73fe\u6709\u7684 Session\u3002\u5982\u679c\u5df2\u5b58\u5728\u5177\u6709\u6307\u5b9a ID \u7684 Session\uff0c\u5176 state \u6703\u88ab\u63d0\u4f9b\u7684\u65b0 state \u8986\u84cb\u3002</p> <ul> <li>Method: <code>POST</code></li> <li>Path: <code>/apps/{app_name}/users/{user_id}/sessions/{session_id}</code></li> </ul> <p>Request Body <pre><code>{\n  \"state\": {\n    \"key1\": \"value1\",\n    \"key2\": 42\n  }\n}\n</code></pre></p> <p>\u7bc4\u4f8b\u8acb\u6c42 <pre><code>curl -X POST http://localhost:8000/apps/my_sample_agent/users/u_123/sessions/s_abc \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"state\": {\"visit_count\": 5}}'\n</code></pre></p> <p>\u7bc4\u4f8b\u56de\u61c9 <pre><code>{\"id\":\"s_abc\",\"appName\":\"my_sample_agent\",\"userId\":\"u_123\",\"state\":{\"visit_count\":5},\"events\":[],\"lastUpdateTime\":1743711430.022186}\n</code></pre></p>"},{"location":"get-started/testing/#session_2","title":"\u53d6\u5f97 Session","text":"<p>\u64f7\u53d6\u7279\u5b9a Session \u7684\u8a73\u7d30\u8cc7\u8a0a\uff0c\u5305\u62ec\u5176\u76ee\u524d\u7684 session state \u4ee5\u53ca\u6240\u6709\u76f8\u95dc\u7684 Event\u3002</p> <ul> <li>Method\uff1a <code>GET</code></li> <li>Path\uff1a <code>/apps/{app_name}/users/{user_id}/sessions/{session_id}</code></li> </ul> <p>\u7bc4\u4f8b\u8acb\u6c42 <pre><code>curl -X GET http://localhost:8000/apps/my_sample_agent/users/u_123/sessions/s_abc\n</code></pre></p> <p>\u7bc4\u4f8b\u56de\u61c9 <pre><code>{\"id\":\"s_abc\",\"appName\":\"my_sample_agent\",\"userId\":\"u_123\",\"state\":{\"visit_count\":5},\"events\":[...],\"lastUpdateTime\":1743711430.022186}\n</code></pre></p>"},{"location":"get-started/testing/#session_3","title":"\u522a\u9664 Session","text":"<p>\u522a\u9664\u4e00\u500b Session \u53ca\u5176\u6240\u6709\u76f8\u95dc\u7684\u8cc7\u6599\u3002</p> <ul> <li>\u65b9\u6cd5 (Method)\uff1a <code>DELETE</code></li> <li>\u8def\u5f91 (Path)\uff1a <code>/apps/{app_name}/users/{user_id}/sessions/{session_id}</code></li> </ul> <p>\u7bc4\u4f8b\u8acb\u6c42 (Example Request) <pre><code>curl -X DELETE http://localhost:8000/apps/my_sample_agent/users/u_123/sessions/s_abc\n</code></pre></p> <p>\u7bc4\u4f8b\u56de\u61c9 \u6210\u529f\u522a\u9664\u6642\u6703\u56de\u50b3\u4e00\u500b\u7a7a\u7684\u56de\u61c9\uff0c\u4e26\u5e36\u6709 <code>204 No Content</code> \u72c0\u614b\u78bc\u3002</p>"},{"location":"get-started/testing/#agent_3","title":"agent \u57f7\u884c","text":"<p>\u9019\u4e9b API \u7aef\u9ede\u7528\u65bc\u5411 agent \u767c\u9001\u65b0\u8a0a\u606f\u4e26\u7372\u53d6\u56de\u61c9\u3002</p>"},{"location":"get-started/testing/#agent_4","title":"\u57f7\u884c agent\uff08\u55ae\u6b21\u56de\u61c9\uff09","text":"<p>\u57f7\u884c agent\uff0c\u4e26\u5728\u904b\u884c\u5b8c\u6210\u5f8c\uff0c\u4ee5\u55ae\u4e00 JSON \u9663\u5217\u56de\u50b3\u6240\u6709\u7522\u751f\u7684\u4e8b\u4ef6\u3002</p> <ul> <li>\u65b9\u6cd5\uff1a <code>POST</code></li> <li>\u8def\u5f91\uff1a <code>/run</code></li> </ul> <p>\u8acb\u6c42\u5167\u5bb9\uff08Request Body\uff09 <pre><code>{\n  \"app_name\": \"my_sample_agent\",\n  \"user_id\": \"u_123\",\n  \"session_id\": \"s_abc\",\n  \"new_message\": {\n    \"role\": \"user\",\n    \"parts\": [\n      { \"text\": \"What is the capital of France?\" }\n    ]\n  }\n}\n</code></pre></p> <p>\u7bc4\u4f8b\u8acb\u6c42 <pre><code>curl -X POST http://localhost:8000/run \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"app_name\": \"my_sample_agent\",\n    \"user_id\": \"u_123\",\n    \"session_id\": \"s_abc\",\n    \"new_message\": {\n      \"role\": \"user\",\n      \"parts\": [{\"text\": \"What is the capital of France?\"}]\n    }\n  }'\n</code></pre></p>"},{"location":"get-started/testing/#agent_5","title":"\u57f7\u884c agent\uff08\u4e32\u6d41\u6a21\u5f0f\uff09","text":"<p>\u57f7\u884c agent\uff0c\u4e26\u5728\u4e8b\u4ef6\u7522\u751f\u6642\uff0c\u900f\u904e Server Sent Events (SSE) \u5c07\u4e8b\u4ef6\u4e32\u6d41\u56de\u50b3\u7d66\u7528\u6236\u7aef\u3002</p> <ul> <li>Method\uff1a <code>POST</code></li> <li>Path\uff1a <code>/run_sse</code></li> </ul> <p>Request Body \u8acb\u6c42\u4e3b\u9ad4\u8207 <code>/run</code> \u76f8\u540c\uff0c\u53e6\u5916\u53ef\u9078\u64c7\u52a0\u5165 <code>streaming</code> \u65d7\u6a19\u3002 <pre><code>{\n  \"app_name\": \"my_sample_agent\",\n  \"user_id\": \"u_123\",\n  \"session_id\": \"s_abc\",\n  \"new_message\": {\n    \"role\": \"user\",\n    \"parts\": [\n      { \"text\": \"What is the weather in New York?\" }\n    ]\n  },\n  \"streaming\": true\n}\n</code></pre> - <code>streaming</code>\uff1a\uff08\u9078\u586b\uff09\u8a2d\u70ba <code>true</code> \u53ef\u555f\u7528\u6a21\u578b\u56de\u61c9\u7684\u9010\u5b57\u5143\u4e32\u6d41 (token-level streaming)\u3002\u9810\u8a2d\u70ba <code>false</code>\u3002</p> <p>\u7bc4\u4f8b\u8acb\u6c42 <pre><code>curl -X POST http://localhost:8000/run_sse \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"app_name\": \"my_sample_agent\",\n    \"user_id\": \"u_123\",\n    \"session_id\": \"s_abc\",\n    \"new_message\": {\n      \"role\": \"user\",\n      \"parts\": [{\"text\": \"What is the weather in New York?\"}]\n    },\n    \"streaming\": false\n  }'\n</code></pre></p>"},{"location":"get-started/streaming/","title":"\u4e32\u6d41\u5feb\u901f\u958b\u59cb","text":"<p>Agent Development Kit (ADK) \u8b93\u4f60\u7684 AI agent \u80fd\u5920\u900f\u904e\u4e32\u6d41\u5be6\u73fe\u5373\u6642\u3001\u4e92\u52d5\u5f0f\u7684\u9ad4\u9a57\u3002\u9019\u4f7f\u4f60\u53ef\u4ee5\u5be6\u73fe\u50cf\u662f\u5373\u6642\u8a9e\u97f3\u5c0d\u8a71\u3001\u5373\u6642\u5de5\u5177\u4f7f\u7528\uff0c\u4ee5\u53ca agent \u7684\u6301\u7e8c\u66f4\u65b0\u7b49\u529f\u80fd\u3002</p> <p>\u672c\u9801\u63d0\u4f9b Python \u8207 Java \u5169\u7a2e ADK \u7684\u4e32\u6d41\u529f\u80fd\u5feb\u901f\u958b\u59cb\u7bc4\u4f8b\uff0c\u5354\u52a9\u4f60\u5feb\u901f\u4e0a\u624b\u3002</p> <ul> <li> <p> Python ADK\uff1a\u4e32\u6d41\u5feb\u901f\u958b\u59cb</p> <p>\u6b64\u7bc4\u4f8b\u8aaa\u660e\u5982\u4f55\u4f7f\u7528 Python ADK \u5efa\u7acb\u8207 agent \u7684\u57fa\u672c\u4e32\u6d41\u4e92\u52d5\u3002\u901a\u5e38\u6703\u4f7f\u7528 <code>Runner.run_live()</code> \u65b9\u6cd5\u4e26\u8655\u7406\u975e\u540c\u6b65\u4e8b\u4ef6\u3002</p> <p> \u67e5\u770b Python \u4e32\u6d41\u5feb\u901f\u958b\u59cb </p> </li> </ul> <ul> <li> <p> Java ADK\uff1a\u4e32\u6d41\u5feb\u901f\u958b\u59cb</p> <p>\u6b64\u7bc4\u4f8b\u8aaa\u660e\u5982\u4f55\u4f7f\u7528 Java ADK \u5efa\u7acb\u8207 agent \u7684\u57fa\u672c\u4e32\u6d41\u4e92\u52d5\u3002\u9019\u6703\u7528\u5230 <code>Runner.runLive()</code> \u65b9\u6cd5\u3001<code>LiveRequestQueue</code>\uff0c\u4ee5\u53ca\u8655\u7406 <code>Flowable&lt;Event&gt;</code> \u4e32\u6d41\u3002</p> <p> \u67e5\u770b Java \u4e32\u6d41\u5feb\u901f\u958b\u59cb </p> </li> </ul>"},{"location":"get-started/streaming/index.en/","title":"Streaming Quickstarts","text":"<p>The Agent Development Kit (ADK) enables real-time, interactive experiences with your AI agents through streaming. This allows for features like live voice conversations, real-time tool use, and continuous updates from your agent.</p> <p>This page provides quickstart examples to get you up and running with streaming capabilities in both Python and Java ADK.</p> <ul> <li> <p> Python ADK: Streaming Quickstart</p> <p>This example demonstrates how to set up a basic streaming interaction with an agent using Python ADK. It typically involves using the <code>Runner.run_live()</code> method and handling asynchronous events.</p> <p> View Python Streaming Quickstart </p> </li> </ul> <ul> <li> <p> Java ADK: Streaming Quickstart</p> <p>This example demonstrates how to set up a basic streaming interaction with an agent using Java ADK. It involves using the <code>Runner.runLive()</code> method, a <code>LiveRequestQueue</code>, and handling the <code>Flowable&lt;Event&gt;</code> stream.</p> <p> View Java Streaming Quickstart </p> </li> </ul>"},{"location":"get-started/streaming/quickstart-streaming-java.en/","title":"Quickstart (Streaming / Java)","text":"<p>This quickstart guide will walk you through the process of creating a basic agent and leveraging ADK Streaming with Java to facilitate low-latency, bidirectional voice interactions.</p> <p>You'll begin by setting up your Java and Maven environment, structuring your project, and defining the necessary dependencies. Following this, you'll create a simple <code>ScienceTeacherAgent</code>, test its text-based streaming capabilities using the Dev UI, and then progress to enabling live audio communication, transforming your agent into an interactive voice-driven application.</p>"},{"location":"get-started/streaming/quickstart-streaming-java.en/#create-your-first-agent","title":"Create your first agent","text":""},{"location":"get-started/streaming/quickstart-streaming-java.en/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>In this getting started guide, you will be programming in Java. Check if Java is installed on your machine. Ideally, you should be using Java 17 or more (you can check that by typing java -version)</p> </li> <li> <p>You\u2019ll also be using the Maven build tool for Java. So be sure to have Maven installed on your machine before going further (this is the case for Cloud Top or Cloud Shell, but not necessarily for your laptop).</p> </li> </ul>"},{"location":"get-started/streaming/quickstart-streaming-java.en/#prepare-the-project-structure","title":"Prepare the project structure","text":"<p>To get started with ADK Java, let\u2019s create a Maven project with the following directory structure:</p> <pre><code>adk-agents/\n\u251c\u2500\u2500 pom.xml\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 main/\n        \u2514\u2500\u2500 java/\n            \u2514\u2500\u2500 agents/\n                \u2514\u2500\u2500 ScienceTeacherAgent.java\n</code></pre> <p>Follow the instructions in Installation page to add <code>pom.xml</code> for using the ADK package.</p> <p>Note</p> <p>Feel free to use whichever name you like for the root directory of your project (instead of adk-agents)</p>"},{"location":"get-started/streaming/quickstart-streaming-java.en/#running-a-compilation","title":"Running a compilation","text":"<p>Let\u2019s see if Maven is happy with this build, by running a compilation (mvn compile command):</p> <pre><code>$ mvn compile\n[INFO] Scanning for projects...\n[INFO]\n[INFO] --------------------&lt; adk-agents:adk-agents &gt;--------------------\n[INFO] Building adk-agents 1.0-SNAPSHOT\n[INFO]   from pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- resources:3.3.1:resources (default-resources) @ adk-demo ---\n[INFO] skip non existing resourceDirectory /home/user/adk-demo/src/main/resources\n[INFO]\n[INFO] --- compiler:3.13.0:compile (default-compile) @ adk-demo ---\n[INFO] Nothing to compile - all classes are up to date.\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  1.347 s\n[INFO] Finished at: 2025-05-06T15:38:08Z\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>Looks like the project is set up properly for compilation!</p>"},{"location":"get-started/streaming/quickstart-streaming-java.en/#creating-an-agent","title":"Creating an agent","text":"<p>Create the ScienceTeacherAgent.java file under the <code>src/main/java/agents/</code> directory with the following content:</p> <pre><code>package samples.liveaudio;\n\nimport com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\n\n/** Science teacher agent. */\npublic class ScienceTeacherAgent {\n\n  // Field expected by the Dev UI to load the agent dynamically\n  // (the agent must be initialized at declaration time)\n  public static final BaseAgent ROOT_AGENT = initAgent();\n\n  public static BaseAgent initAgent() {\n    return LlmAgent.builder()\n        .name(\"science-app\")\n        .description(\"Science teacher agent\")\n        .model(\"gemini-2.0-flash-exp\")\n        .instruction(\"\"\"\n            You are a helpful science teacher that explains\n            science concepts to kids and teenagers.\n            \"\"\")\n        .build();\n  }\n}\n</code></pre> <p>Troubleshooting</p> <p>The model <code>gemini-2.0-flash-exp</code> will be deprecated in the future. If you see any issues on using it, try using <code>gemini-2.0-flash-live-001</code> instead</p> <p>We will use <code>Dev UI</code> to run this agent later. For the tool to automatically recognize the agent, its Java class has to comply with the following two rules:</p> <ul> <li>The agent should be stored in a global public static variable named ROOT_AGENT of type BaseAgent and initialized at declaration time.</li> <li>The agent definition has to be a static method so it can be loaded during the class initialization by the dynamic compiling classloader.</li> </ul>"},{"location":"get-started/streaming/quickstart-streaming-java.en/#run-agent-with-adk-web-server","title":"Run agent with Dev UI","text":"<p><code>Dev UI</code> is a web server where you can quickly run and test your agents for development purpose, without building your own UI application for the agents.</p>"},{"location":"get-started/streaming/quickstart-streaming-java.en/#define-environment-variables","title":"Define environment variables","text":"<p>To run the server, you\u2019ll need to export two environment variables:</p> <ul> <li>a Gemini key that you can get from AI Studio,</li> <li>a variable to specify we\u2019re not using Vertex AI this time.</li> </ul> <pre><code>export GOOGLE_GENAI_USE_VERTEXAI=FALSE\nexport GOOGLE_API_KEY=YOUR_API_KEY\n</code></pre>"},{"location":"get-started/streaming/quickstart-streaming-java.en/#run-dev-ui","title":"Run Dev UI","text":"<p>Run the following command from the terminal to launch the Dev UI.</p> terminal<pre><code>mvn exec:java \\\n    -Dexec.mainClass=\"com.google.adk.web.AdkWebServer\" \\\n    -Dexec.args=\"--adk.agents.source-dir=src/main/java\" \\\n    -Dexec.classpathScope=\"compile\"\n</code></pre> <p>Step 1: Open the URL provided (usually <code>http://localhost:8080</code> or <code>http://127.0.0.1:8080</code>) directly in your browser.</p> <p>Step 2. In the top-left corner of the UI, you can select your agent in the dropdown. Select \"science-app\".</p> <p>Troubleshooting</p> <p>If you do not see \"science-app\" in the dropdown menu, make sure you are running the <code>mvn</code> command at the location where your Java source code is located (usually <code>src/main/java</code>).</p>"},{"location":"get-started/streaming/quickstart-streaming-java.en/#try-dev-ui-with-text","title":"Try Dev UI with text","text":"<p>With your favorite browser, navigate to: http://127.0.0.1:8080/</p> <p>You should see the following interface:</p> <p></p> <p>Click the <code>Token Streaming</code> switch at the top right, and ask any questions for the science teacher such as <code>What's the electron?</code>. Then you should see the output text in streaming on the UI.</p> <p>As we saw, you do not have to write any specific code in the agent itself for the text streaming capability. It is provided as an ADK Agent feature by default.</p>"},{"location":"get-started/streaming/quickstart-streaming-java.en/#try-with-voice-and-video","title":"Try with voice and video","text":"<p>To try with voice, reload the web browser, click the microphone button to enable the voice input, and ask the same question in voice. You will hear the answer in voice in real-time.</p> <p>To try with video, reload the web browser, click the camera button to enable the video input, and ask questions like \"What do you see?\". The agent will answer what they see in the video input.</p>"},{"location":"get-started/streaming/quickstart-streaming-java.en/#stop-the-tool","title":"Stop the tool","text":"<p>Stop the tool by pressing <code>Ctrl-C</code> on the console.</p>"},{"location":"get-started/streaming/quickstart-streaming-java.en/#run-agent-with-live-audio","title":"Run agent with a custom live audio app","text":"<p>Now, let's try audio streaming with the agent and a custom live audio application.</p>"},{"location":"get-started/streaming/quickstart-streaming-java.en/#a-maven-pomxml-build-file-for-live-audio","title":"A Maven pom.xml build file for Live Audio","text":"<p>Replace your existing pom.xml with the following.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n  &lt;groupId&gt;com.google.adk.samples&lt;/groupId&gt;\n  &lt;artifactId&gt;google-adk-sample-live-audio&lt;/artifactId&gt;\n  &lt;version&gt;0.1.0&lt;/version&gt;\n  &lt;name&gt;Google ADK - Sample - Live Audio&lt;/name&gt;\n  &lt;description&gt;\n    A sample application demonstrating a live audio conversation using ADK,\n    runnable via samples.liveaudio.LiveAudioRun.\n  &lt;/description&gt;\n  &lt;packaging&gt;jar&lt;/packaging&gt;\n\n  &lt;properties&gt;\n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n    &lt;java.version&gt;17&lt;/java.version&gt;\n    &lt;auto-value.version&gt;1.11.0&lt;/auto-value.version&gt;\n    &lt;!-- Main class for exec-maven-plugin --&gt;\n    &lt;exec.mainClass&gt;samples.liveaudio.LiveAudioRun&lt;/exec.mainClass&gt;\n    &lt;google-adk.version&gt;0.1.0&lt;/google-adk.version&gt;\n  &lt;/properties&gt;\n\n  &lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n      &lt;dependency&gt;\n        &lt;groupId&gt;com.google.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;libraries-bom&lt;/artifactId&gt;\n        &lt;version&gt;26.53.0&lt;/version&gt;\n        &lt;type&gt;pom&lt;/type&gt;\n        &lt;scope&gt;import&lt;/scope&gt;\n      &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n  &lt;/dependencyManagement&gt;\n\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;com.google.adk&lt;/groupId&gt;\n      &lt;artifactId&gt;google-adk&lt;/artifactId&gt;\n      &lt;version&gt;${google-adk.version}&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;commons-logging&lt;/groupId&gt;\n      &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;\n      &lt;version&gt;1.2&lt;/version&gt; &lt;!-- Or use a property if defined in a parent POM --&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n\n  &lt;build&gt;\n    &lt;plugins&gt;\n      &lt;plugin&gt;\n        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n        &lt;version&gt;3.13.0&lt;/version&gt;\n        &lt;configuration&gt;\n          &lt;source&gt;${java.version}&lt;/source&gt;\n          &lt;target&gt;${java.version}&lt;/target&gt;\n          &lt;parameters&gt;true&lt;/parameters&gt;\n          &lt;annotationProcessorPaths&gt;\n            &lt;path&gt;\n              &lt;groupId&gt;com.google.auto.value&lt;/groupId&gt;\n              &lt;artifactId&gt;auto-value&lt;/artifactId&gt;\n              &lt;version&gt;${auto-value.version}&lt;/version&gt;\n            &lt;/path&gt;\n          &lt;/annotationProcessorPaths&gt;\n        &lt;/configuration&gt;\n      &lt;/plugin&gt;\n      &lt;plugin&gt;\n        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\n        &lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;3.6.0&lt;/version&gt;\n        &lt;executions&gt;\n          &lt;execution&gt;\n            &lt;id&gt;add-source&lt;/id&gt;\n            &lt;phase&gt;generate-sources&lt;/phase&gt;\n            &lt;goals&gt;\n              &lt;goal&gt;add-source&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;configuration&gt;\n              &lt;sources&gt;\n                &lt;source&gt;.&lt;/source&gt;\n              &lt;/sources&gt;\n            &lt;/configuration&gt;\n          &lt;/execution&gt;\n        &lt;/executions&gt;\n      &lt;/plugin&gt;\n      &lt;plugin&gt;\n        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\n        &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;3.2.0&lt;/version&gt;\n        &lt;configuration&gt;\n          &lt;mainClass&gt;${exec.mainClass}&lt;/mainClass&gt;\n          &lt;classpathScope&gt;runtime&lt;/classpathScope&gt;\n        &lt;/configuration&gt;\n      &lt;/plugin&gt;\n    &lt;/plugins&gt;\n  &lt;/build&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"get-started/streaming/quickstart-streaming-java.en/#creating-live-audio-run-tool","title":"Creating Live Audio Run tool","text":"<p>Create the LiveAudioRun.java file under the <code>src/main/java/</code> directory with the following content. This tool runs the agent on it with live audio input and output.</p> <pre><code>package samples.liveaudio;\n\nimport com.google.adk.agents.LiveRequestQueue;\nimport com.google.adk.agents.RunConfig;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.common.collect.ImmutableList;\nimport com.google.genai.types.Blob;\nimport com.google.genai.types.Modality;\nimport com.google.genai.types.PrebuiltVoiceConfig;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport com.google.genai.types.SpeechConfig;\nimport com.google.genai.types.VoiceConfig;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.net.URL;\nimport javax.sound.sampled.AudioFormat;\nimport javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.DataLine;\nimport javax.sound.sampled.LineUnavailableException;\nimport javax.sound.sampled.Mixer;\nimport javax.sound.sampled.SourceDataLine;\nimport javax.sound.sampled.TargetDataLine;\nimport java.util.UUID;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport agents.ScienceTeacherAgent;\n\n/** Main class to demonstrate running the {@link LiveAudioAgent} for a voice conversation. */\npublic final class LiveAudioRun {\n  private final String userId;\n  private final String sessionId;\n  private final Runner runner;\n\n  private static final javax.sound.sampled.AudioFormat MIC_AUDIO_FORMAT =\n      new javax.sound.sampled.AudioFormat(16000.0f, 16, 1, true, false);\n\n  private static final javax.sound.sampled.AudioFormat SPEAKER_AUDIO_FORMAT =\n      new javax.sound.sampled.AudioFormat(24000.0f, 16, 1, true, false);\n\n  private static final int BUFFER_SIZE = 4096;\n\n  public LiveAudioRun() {\n    this.userId = \"test_user\";\n    String appName = \"LiveAudioApp\";\n    this.sessionId = UUID.randomUUID().toString();\n\n    InMemorySessionService sessionService = new InMemorySessionService();\n    this.runner = new Runner(ScienceTeacherAgent.ROOT_AGENT, appName, null, sessionService);\n\n    ConcurrentMap&lt;String, Object&gt; initialState = new ConcurrentHashMap&lt;&gt;();\n    var unused =\n        sessionService.createSession(appName, userId, initialState, sessionId).blockingGet();\n  }\n\n  private void runConversation() throws Exception {\n    System.out.println(\"Initializing microphone input and speaker output...\");\n\n    RunConfig runConfig =\n        RunConfig.builder()\n            .setStreamingMode(RunConfig.StreamingMode.BIDI)\n            .setResponseModalities(ImmutableList.of(new Modality(\"AUDIO\")))\n            .setSpeechConfig(\n                SpeechConfig.builder()\n                    .voiceConfig(\n                        VoiceConfig.builder()\n                            .prebuiltVoiceConfig(\n                                PrebuiltVoiceConfig.builder().voiceName(\"Aoede\").build())\n                            .build())\n                    .languageCode(\"en-US\")\n                    .build())\n            .build();\n\n    LiveRequestQueue liveRequestQueue = new LiveRequestQueue();\n\n    Flowable&lt;Event&gt; eventStream =\n        this.runner.runLive(\n            runner.sessionService().createSession(userId, sessionId).blockingGet(),\n            liveRequestQueue,\n            runConfig);\n\n    AtomicBoolean isRunning = new AtomicBoolean(true);\n    AtomicBoolean conversationEnded = new AtomicBoolean(false);\n    ExecutorService executorService = Executors.newFixedThreadPool(2);\n\n    // Task for capturing microphone input\n    Future&lt;?&gt; microphoneTask =\n        executorService.submit(() -&gt; captureAndSendMicrophoneAudio(liveRequestQueue, isRunning));\n\n    // Task for processing agent responses and playing audio\n    Future&lt;?&gt; outputTask =\n        executorService.submit(\n            () -&gt; {\n              try {\n                processAudioOutput(eventStream, isRunning, conversationEnded);\n              } catch (Exception e) {\n                System.err.println(\"Error processing audio output: \" + e.getMessage());\n                e.printStackTrace();\n                isRunning.set(false);\n              }\n            });\n\n    // Wait for user to press Enter to stop the conversation\n    System.out.println(\"Conversation started. Press Enter to stop...\");\n    System.in.read();\n\n    System.out.println(\"Ending conversation...\");\n    isRunning.set(false);\n\n    try {\n      // Give some time for ongoing processing to complete\n      microphoneTask.get(2, TimeUnit.SECONDS);\n      outputTask.get(2, TimeUnit.SECONDS);\n    } catch (Exception e) {\n      System.out.println(\"Stopping tasks...\");\n    }\n\n    liveRequestQueue.close();\n    executorService.shutdownNow();\n    System.out.println(\"Conversation ended.\");\n  }\n\n  private void captureAndSendMicrophoneAudio(\n      LiveRequestQueue liveRequestQueue, AtomicBoolean isRunning) {\n    TargetDataLine micLine = null;\n    try {\n      DataLine.Info info = new DataLine.Info(TargetDataLine.class, MIC_AUDIO_FORMAT);\n      if (!AudioSystem.isLineSupported(info)) {\n        System.err.println(\"Microphone line not supported!\");\n        return;\n      }\n\n      micLine = (TargetDataLine) AudioSystem.getLine(info);\n      micLine.open(MIC_AUDIO_FORMAT);\n      micLine.start();\n\n      System.out.println(\"Microphone initialized. Start speaking...\");\n\n      byte[] buffer = new byte[BUFFER_SIZE];\n      int bytesRead;\n\n      while (isRunning.get()) {\n        bytesRead = micLine.read(buffer, 0, buffer.length);\n\n        if (bytesRead &gt; 0) {\n          byte[] audioChunk = new byte[bytesRead];\n          System.arraycopy(buffer, 0, audioChunk, 0, bytesRead);\n\n          Blob audioBlob = Blob.builder().data(audioChunk).mimeType(\"audio/pcm\").build();\n\n          liveRequestQueue.realtime(audioBlob);\n        }\n      }\n    } catch (LineUnavailableException e) {\n      System.err.println(\"Error accessing microphone: \" + e.getMessage());\n      e.printStackTrace();\n    } finally {\n      if (micLine != null) {\n        micLine.stop();\n        micLine.close();\n      }\n    }\n  }\n\n  private void processAudioOutput(\n      Flowable&lt;Event&gt; eventStream, AtomicBoolean isRunning, AtomicBoolean conversationEnded) {\n    SourceDataLine speakerLine = null;\n    try {\n      DataLine.Info info = new DataLine.Info(SourceDataLine.class, SPEAKER_AUDIO_FORMAT);\n      if (!AudioSystem.isLineSupported(info)) {\n        System.err.println(\"Speaker line not supported!\");\n        return;\n      }\n\n      final SourceDataLine finalSpeakerLine = (SourceDataLine) AudioSystem.getLine(info);\n      finalSpeakerLine.open(SPEAKER_AUDIO_FORMAT);\n      finalSpeakerLine.start();\n\n      System.out.println(\"Speaker initialized.\");\n\n      for (Event event : eventStream.blockingIterable()) {\n        if (!isRunning.get()) {\n          break;\n        }\n\n        AtomicBoolean audioReceived = new AtomicBoolean(false);\n        processEvent(event, audioReceived);\n\n        event.content().ifPresent(content -&gt; content.parts().ifPresent(parts -&gt; parts.forEach(part -&gt; playAudioData(part, finalSpeakerLine))));\n      }\n\n      speakerLine = finalSpeakerLine; // Assign to outer variable for cleanup in finally block\n    } catch (LineUnavailableException e) {\n      System.err.println(\"Error accessing speaker: \" + e.getMessage());\n      e.printStackTrace();\n    } finally {\n      if (speakerLine != null) {\n        speakerLine.drain();\n        speakerLine.stop();\n        speakerLine.close();\n      }\n      conversationEnded.set(true);\n    }\n  }\n\n  private void playAudioData(Part part, SourceDataLine speakerLine) {\n    part.inlineData()\n        .ifPresent(\n            inlineBlob -&gt;\n                inlineBlob\n                    .data()\n                    .ifPresent(\n                        audioBytes -&gt; {\n                          if (audioBytes.length &gt; 0) {\n                            System.out.printf(\n                                \"Playing audio (%s): %d bytes%n\",\n                                inlineBlob.mimeType(),\n                                audioBytes.length);\n                            speakerLine.write(audioBytes, 0, audioBytes.length);\n                          }\n                        }));\n  }\n\n  private void processEvent(Event event, java.util.concurrent.atomic.AtomicBoolean audioReceived) {\n    event\n        .content()\n        .ifPresent(\n            content -&gt;\n                content\n                    .parts()\n                    .ifPresent(parts -&gt; parts.forEach(part -&gt; logReceivedAudioData(part, audioReceived))));\n  }\n\n  private void logReceivedAudioData(Part part, AtomicBoolean audioReceived) {\n    part.inlineData()\n        .ifPresent(\n            inlineBlob -&gt;\n                inlineBlob\n                    .data()\n                    .ifPresent(\n                        audioBytes -&gt; {\n                          if (audioBytes.length &gt; 0) {\n                            System.out.printf(\n                                \"    Audio (%s): received %d bytes.%n\",\n                                inlineBlob.mimeType(),\n                                audioBytes.length);\n                            audioReceived.set(true);\n                          } else {\n                            System.out.printf(\n                                \"    Audio (%s): received empty audio data.%n\",\n                                inlineBlob.mimeType());\n                          }\n                        }));\n  }\n\n  public static void main(String[] args) throws Exception {\n    LiveAudioRun liveAudioRun = new LiveAudioRun();\n    liveAudioRun.runConversation();\n    System.out.println(\"Exiting Live Audio Run.\");\n  }\n}\n</code></pre>"},{"location":"get-started/streaming/quickstart-streaming-java.en/#run-the-live-audio-run-tool","title":"Run the Live Audio Run tool","text":"<p>To run Live Audio Run tool, use the following command on the <code>adk-agents</code> directory:</p> <pre><code>mvn compile exec:java\n</code></pre> <p>Then you should see:</p> <pre><code>$ mvn compile exec:java\n...\nInitializing microphone input and speaker output...\nConversation started. Press Enter to stop...\nSpeaker initialized.\nMicrophone initialized. Start speaking...\n</code></pre> <p>With this message, the tool is ready to take voice input. Talk to the agent with a question like <code>What's the electron?</code>.</p> <p>Caution</p> <p>When you observe the agent keep speaking by itself and doesn't stop, try using earphones to suppress the echoing.</p>"},{"location":"get-started/streaming/quickstart-streaming-java.en/#summary","title":"Summary","text":"<p>Streaming for ADK enables developers to create agents capable of low-latency, bidirectional voice and video communication, enhancing interactive experiences. The article demonstrates that text streaming is a built-in feature of ADK Agents, requiring no additional specific code, while also showcasing how to implement live audio conversations for real-time voice interaction with an agent. This allows for more natural and dynamic communication, as users can speak to and hear from the agent seamlessly.</p>"},{"location":"get-started/streaming/quickstart-streaming-java/","title":"\u5feb\u901f\u958b\u59cb\uff08\u4e32\u6d41 / Java\uff09","text":"<p>\u672c\u5feb\u901f\u958b\u59cb\u6307\u5357\u5c07\u5f15\u5c0e\u4f60\u5efa\u7acb\u4e00\u500b\u57fa\u790e\u7684 agent\uff0c\u4e26\u5229\u7528 Java \u7248 Agent Development Kit (ADK) Streaming\uff0c\u5be6\u73fe\u4f4e\u5ef6\u9072\u3001\u96d9\u5411\u8a9e\u97f3\u4e92\u52d5\u3002</p> <p>\u4f60\u5c07\u5f9e\u8a2d\u5b9a Java \u8207 Maven \u958b\u767c\u74b0\u5883\u958b\u59cb\uff0c\u5efa\u7acb\u5c08\u6848\u7d50\u69cb\u4e26\u5b9a\u7fa9\u6240\u9700\u7684\u76f8\u4f9d\u5957\u4ef6\u3002\u63a5\u8457\uff0c\u4f60\u6703\u5efa\u7acb\u4e00\u500b\u7c21\u55ae\u7684 <code>ScienceTeacherAgent</code>\uff0c\u900f\u904e Dev UI \u6e2c\u8a66\u5176\u6587\u5b57\u4e32\u6d41\u529f\u80fd\uff0c\u7136\u5f8c\u9032\u4e00\u6b65\u555f\u7528\u5373\u6642\u8a9e\u97f3\u901a\u8a0a\uff0c\u8b93\u4f60\u7684 agent \u8f49\u8b8a\u70ba\u4e92\u52d5\u5f0f\u8a9e\u97f3\u61c9\u7528\u7a0b\u5f0f\u3002</p>"},{"location":"get-started/streaming/quickstart-streaming-java/#create-your-first-agent","title":"\u5efa\u7acb\u4f60\u7684\u7b2c\u4e00\u500b agent","text":""},{"location":"get-started/streaming/quickstart-streaming-java/#_1","title":"\u5148\u6c7a\u689d\u4ef6","text":"<ul> <li> <p>\u5728\u672c\u5165\u9580\u6307\u5357\u4e2d\uff0c\u4f60\u5c07\u4f7f\u7528 Java \u9032\u884c\u958b\u767c\u3002\u8acb\u78ba\u8a8d\u4f60\u7684\u6a5f\u5668\u4e0a\u5df2\u5b89\u88dd Java\u3002\u5efa\u8b70\u4f7f\u7528 Java 17 \u6216\u4ee5\u4e0a\u7248\u672c\uff08\u4f60\u53ef\u4ee5\u8f38\u5165 java -version \u4f86\u6aa2\u67e5\uff09\u3002</p> </li> <li> <p>\u4f60\u4e5f\u6703\u7528\u5230 Java \u7684\u5efa\u7f6e\u5de5\u5177 Maven\u3002\u8acb\u5728\u7e7c\u7e8c\u4e4b\u524d\uff0c\u78ba\u4fdd\u4f60\u7684\u6a5f\u5668\u4e0a\u5df2\u5b89\u88dd Maven\uff08Cloud Top \u6216 Cloud Shell \u9810\u8a2d\u5df2\u5b89\u88dd\uff0c\u4f46\u4f60\u7684\u7b46\u96fb\u53ef\u80fd\u6c92\u6709\uff09\u3002</p> </li> </ul>"},{"location":"get-started/streaming/quickstart-streaming-java/#_2","title":"\u6e96\u5099\u5c08\u6848\u7d50\u69cb","text":"<p>\u8981\u958b\u59cb\u4f7f\u7528 ADK Java\uff0c\u8acb\u5efa\u7acb\u4e00\u500b Maven \u5c08\u6848\uff0c\u4e26\u63a1\u7528\u4ee5\u4e0b\u76ee\u9304\u7d50\u69cb\uff1a</p> <pre><code>adk-agents/\n\u251c\u2500\u2500 pom.xml\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 main/\n        \u2514\u2500\u2500 java/\n            \u2514\u2500\u2500 agents/\n                \u2514\u2500\u2500 ScienceTeacherAgent.java\n</code></pre> <p>\u8acb\u4f9d\u7167 Installation \u9801\u9762\u7684\u6307\u793a\uff0c\u65b0\u589e <code>pom.xml</code> \u4ee5\u4f7f\u7528 Agent Development Kit (ADK) \u5957\u4ef6\u3002</p> <p>Note</p> <p>\u4f60\u53ef\u4ee5\u81ea\u7531\u9078\u64c7\u5c08\u6848\u6839\u76ee\u9304\u7684\u540d\u7a31\uff08\u4e0d\u4e00\u5b9a\u8981\u4f7f\u7528 adk-agents\uff09</p>"},{"location":"get-started/streaming/quickstart-streaming-java/#_3","title":"\u57f7\u884c\u7de8\u8b6f","text":"<p>\u8b93\u6211\u5011\u4f86\u770b\u770b Maven \u662f\u5426\u80fd\u9806\u5229\u7de8\u8b6f\u9019\u500b\u5c08\u6848\uff0c\u8acb\u57f7\u884c\u7de8\u8b6f\u6307\u4ee4\uff08<code>mvn compile</code> \u6307\u4ee4\uff09\uff1a</p> <pre><code>$ mvn compile\n[INFO] Scanning for projects...\n[INFO]\n[INFO] --------------------&lt; adk-agents:adk-agents &gt;--------------------\n[INFO] Building adk-agents 1.0-SNAPSHOT\n[INFO]   from pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- resources:3.3.1:resources (default-resources) @ adk-demo ---\n[INFO] skip non existing resourceDirectory /home/user/adk-demo/src/main/resources\n[INFO]\n[INFO] --- compiler:3.13.0:compile (default-compile) @ adk-demo ---\n[INFO] Nothing to compile - all classes are up to date.\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  1.347 s\n[INFO] Finished at: 2025-05-06T15:38:08Z\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>\u770b\u8d77\u4f86\u5c08\u6848\u5df2\u7d93\u6b63\u78ba\u8a2d\u5b9a\u5b8c\u6210\uff0c\u53ef\u4ee5\u9032\u884c\u7de8\u8b6f\u4e86\uff01</p>"},{"location":"get-started/streaming/quickstart-streaming-java/#agent","title":"\u5efa\u7acb agent","text":"<p>\u8acb\u5728 <code>src/main/java/agents/</code> \u8cc7\u6599\u593e\u4e0b\u5efa\u7acb ScienceTeacherAgent.java \u6a94\u6848\uff0c\u5167\u5bb9\u5982\u4e0b\uff1a</p> <pre><code>package samples.liveaudio;\n\nimport com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\n\n/** Science teacher agent. */\npublic class ScienceTeacherAgent {\n\n  // Field expected by the Dev UI to load the agent dynamically\n  // (the agent must be initialized at declaration time)\n  public static final BaseAgent ROOT_AGENT = initAgent();\n\n  public static BaseAgent initAgent() {\n    return LlmAgent.builder()\n        .name(\"science-app\")\n        .description(\"Science teacher agent\")\n        .model(\"gemini-2.0-flash-exp\")\n        .instruction(\"\"\"\n            You are a helpful science teacher that explains\n            science concepts to kids and teenagers.\n            \"\"\")\n        .build();\n  }\n}\n</code></pre> <p>\u7591\u96e3\u6392\u89e3</p> <p>The model <code>gemini-2.0-flash-exp</code> will be deprecated in the future. If you see any issues on using it, try using <code>gemini-2.0-flash-live-001</code> instead</p> <p>\u6211\u5011\u7a0d\u5f8c\u6703\u4f7f\u7528 <code>Dev UI</code> \u4f86\u57f7\u884c\u9019\u500b agent\u3002\u70ba\u4e86\u8b93\u5de5\u5177\u80fd\u81ea\u52d5\u8b58\u5225\u9019\u500b agent\uff0c\u5176 Java \u985e\u5225\u5fc5\u9808\u9075\u5faa\u4ee5\u4e0b\u5169\u500b\u898f\u5247\uff1a</p> <ul> <li>agent \u5fc5\u9808\u5132\u5b58\u5728\u4e00\u500b\u5168\u57df\u7684 public static \u8b8a\u6578\uff0c\u540d\u7a31\u70ba ROOT_AGENT\uff0c\u578b\u5225\u70ba BaseAgent\uff0c\u4e26\u65bc\u5ba3\u544a\u6642\u521d\u59cb\u5316\u3002</li> <li>agent \u7684\u5b9a\u7fa9\u5fc5\u9808\u662f\u4e00\u500b static \u65b9\u6cd5\uff0c\u9019\u6a23\u52d5\u614b\u7de8\u8b6f\u7684 classloader \u624d\u80fd\u5728\u985e\u5225\u521d\u59cb\u5316\u6642\u8f09\u5165\u3002</li> </ul>"},{"location":"get-started/streaming/quickstart-streaming-java/#run-agent-with-adk-web-server","title":"\u4f7f\u7528 Dev UI \u57f7\u884c agent","text":"<p><code>Dev UI</code> \u662f\u4e00\u500b\u7db2\u9801\u4f3a\u670d\u5668\uff0c\u8b93\u4f60\u53ef\u4ee5\u5feb\u901f\u57f7\u884c\u4e26\u6e2c\u8a66 agent\uff0c\u4ee5\u5229\u958b\u767c\u7528\u9014\uff0c\u7121\u9700\u70ba agent \u5efa\u7acb\u81ea\u5df1\u7684 UI \u61c9\u7528\u7a0b\u5f0f\u3002</p>"},{"location":"get-started/streaming/quickstart-streaming-java/#_4","title":"\u5b9a\u7fa9\u74b0\u5883\u8b8a\u6578","text":"<p>\u8981\u57f7\u884c\u9019\u500b\u4f3a\u670d\u5668\uff0c\u4f60\u9700\u8981\u532f\u51fa\u5169\u500b\u74b0\u5883\u8b8a\u6578\uff1a</p> <ul> <li>\u4e00\u7d44 Gemini \u91d1\u9470\uff0c\u4f60\u53ef\u4ee5\u5f9e AI Studio \u53d6\u5f97\uff0c</li> <li>\u4e00\u500b\u8b8a\u6578\uff0c\u7528\u4f86\u6307\u5b9a\u9019\u6b21\u4e0d\u4f7f\u7528 Vertex AI\u3002</li> </ul> <pre><code>export GOOGLE_GENAI_USE_VERTEXAI=FALSE\nexport GOOGLE_API_KEY=YOUR_API_KEY\n</code></pre>"},{"location":"get-started/streaming/quickstart-streaming-java/#dev-ui","title":"\u555f\u52d5 Dev UI","text":"<p>\u8acb\u5728\u7d42\u7aef\u6a5f\u4e2d\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u4ee5\u555f\u52d5 Dev UI\u3002</p> terminal<pre><code>mvn exec:java \\\n    -Dexec.mainClass=\"com.google.adk.web.AdkWebServer\" \\\n    -Dexec.args=\"--adk.agents.source-dir=src/main/java\" \\\n    -Dexec.classpathScope=\"compile\"\n</code></pre> <p>\u6b65\u9a5f 1\uff1a \u76f4\u63a5\u5728\u700f\u89bd\u5668\u4e2d\u958b\u555f\u63d0\u4f9b\u7684 URL\uff08\u901a\u5e38\u70ba <code>http://localhost:8080</code> \u6216 <code>http://127.0.0.1:8080</code>\uff09\u3002</p> <p>\u6b65\u9a5f 2\uff1a \u5728\u7db2\u9801 UI \u5de6\u4e0a\u89d2\uff0c\u53ef\u4ee5\u5728\u4e0b\u62c9\u9078\u55ae\u4e2d\u9078\u64c7\u4f60\u7684 agent\u3002\u8acb\u9078\u64c7\u300cscience-app\u300d\u3002</p> <p>\u7591\u96e3\u6392\u89e3</p> <p>If you do not see \"science-app\" in the dropdown menu, make sure you are running the <code>mvn</code> command at the location where your Java source code is located (usually <code>src/main/java</code>).</p>"},{"location":"get-started/streaming/quickstart-streaming-java/#dev-ui_1","title":"\u4f7f\u7528\u6587\u5b57\u9ad4\u9a57 Dev UI","text":"<p>\u8acb\u4f7f\u7528\u4f60\u559c\u611b\u7684\u700f\u89bd\u5668\uff0c\u524d\u5f80\uff1ahttp://127.0.0.1:8080/</p> <p>\u4f60\u61c9\u8a72\u6703\u770b\u5230\u4ee5\u4e0b\u4ecb\u9762\uff1a</p> <p></p> <p>\u9ede\u64ca\u53f3\u4e0a\u89d2\u7684 <code>Token Streaming</code> \u958b\u95dc\uff0c\u4e26\u5411\u79d1\u5b78\u8001\u5e2b\u63d0\u554f\u4efb\u4f55\u554f\u984c\uff0c\u4f8b\u5982 <code>What's the electron?</code>\u3002\u63a5\u8457\u4f60\u61c9\u8a72\u6703\u5728 UI \u4e0a\u770b\u5230\u6587\u5b57\u4ee5\u4e32\u6d41\u65b9\u5f0f\u5373\u6642\u986f\u793a\u3002</p> <p>\u5982\u540c\u6211\u5011\u6240\u898b\uff0c\u4f60\u4e0d\u9700\u8981\u5728 agent \u672c\u8eab\u64b0\u5beb\u4efb\u4f55\u7279\u5b9a\u7a0b\u5f0f\u78bc\u4f86\u5be6\u73fe\u6587\u5b57\u4e32\u6d41\u529f\u80fd\u3002\u9019\u9805\u529f\u80fd\u9810\u8a2d\u7531 Agent Development Kit (ADK) agent \u63d0\u4f9b\u3002</p>"},{"location":"get-started/streaming/quickstart-streaming-java/#_5","title":"\u9ad4\u9a57\u8a9e\u97f3\u8207\u8996\u8a0a","text":"<p>\u82e5\u8981\u9ad4\u9a57\u8a9e\u97f3\u529f\u80fd\uff0c\u8acb\u91cd\u65b0\u8f09\u5165\u7db2\u9801\u700f\u89bd\u5668\uff0c\u9ede\u64ca\u9ea5\u514b\u98a8\u6309\u9215\u4ee5\u555f\u7528\u8a9e\u97f3\u8f38\u5165\uff0c\u4e26\u7528\u8a9e\u97f3\u8a62\u554f\u76f8\u540c\u7684\u554f\u984c\u3002\u4f60\u6703\u5373\u6642\u807d\u5230\u8a9e\u97f3\u56de\u8986\u3002</p> <p>\u82e5\u8981\u9ad4\u9a57\u8996\u8a0a\u529f\u80fd\uff0c\u8acb\u91cd\u65b0\u8f09\u5165\u7db2\u9801\u700f\u89bd\u5668\uff0c\u9ede\u64ca\u76f8\u6a5f\u6309\u9215\u4ee5\u555f\u7528\u8996\u8a0a\u8f38\u5165\uff0c\u4e26\u8a62\u554f\u50cf\u662f\u300c\u4f60\u770b\u5230\u4e86\u4ec0\u9ebc\uff1f\u300d\u9019\u985e\u554f\u984c\u3002agent \u6703\u56de\u7b54\u4ed6\u5011\u5728\u8996\u8a0a\u8f38\u5165\u4e2d\u6240\u770b\u5230\u7684\u5167\u5bb9\u3002</p>"},{"location":"get-started/streaming/quickstart-streaming-java/#_6","title":"\u505c\u6b62\u5de5\u5177","text":"<p>\u5728\u4e3b\u63a7\u53f0\u6309\u4e0b <code>Ctrl-C</code> \u4ee5\u505c\u6b62\u6b64\u5de5\u5177\u3002</p>"},{"location":"get-started/streaming/quickstart-streaming-java/#run-agent-with-live-audio","title":"\u4f7f\u7528\u81ea\u8a02\u5373\u6642\u8a9e\u97f3\u61c9\u7528\u7a0b\u5f0f\u57f7\u884c agent","text":"<p>\u73fe\u5728\uff0c\u8b93\u6211\u5011\u5617\u8a66\u5c07 agent \u8207\u81ea\u8a02\u5373\u6642\u8a9e\u97f3\u61c9\u7528\u7a0b\u5f0f\u7d50\u5408\uff0c\u9ad4\u9a57\u8a9e\u97f3\u4e32\u6d41\u3002</p>"},{"location":"get-started/streaming/quickstart-streaming-java/#live-audio-maven-pomxml","title":"Live Audio \u7684 Maven pom.xml \u5efa\u7f6e\u6a94","text":"<p>\u8acb\u5c07\u4f60\u73fe\u6709\u7684 pom.xml \u66ff\u63db\u70ba\u4ee5\u4e0b\u5167\u5bb9\u3002</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n  &lt;groupId&gt;com.google.adk.samples&lt;/groupId&gt;\n  &lt;artifactId&gt;google-adk-sample-live-audio&lt;/artifactId&gt;\n  &lt;version&gt;0.1.0&lt;/version&gt;\n  &lt;name&gt;Google ADK - Sample - Live Audio&lt;/name&gt;\n  &lt;description&gt;\n    A sample application demonstrating a live audio conversation using ADK,\n    runnable via samples.liveaudio.LiveAudioRun.\n  &lt;/description&gt;\n  &lt;packaging&gt;jar&lt;/packaging&gt;\n\n  &lt;properties&gt;\n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n    &lt;java.version&gt;17&lt;/java.version&gt;\n    &lt;auto-value.version&gt;1.11.0&lt;/auto-value.version&gt;\n    &lt;!-- Main class for exec-maven-plugin --&gt;\n    &lt;exec.mainClass&gt;samples.liveaudio.LiveAudioRun&lt;/exec.mainClass&gt;\n    &lt;google-adk.version&gt;0.1.0&lt;/google-adk.version&gt;\n  &lt;/properties&gt;\n\n  &lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n      &lt;dependency&gt;\n        &lt;groupId&gt;com.google.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;libraries-bom&lt;/artifactId&gt;\n        &lt;version&gt;26.53.0&lt;/version&gt;\n        &lt;type&gt;pom&lt;/type&gt;\n        &lt;scope&gt;import&lt;/scope&gt;\n      &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n  &lt;/dependencyManagement&gt;\n\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;com.google.adk&lt;/groupId&gt;\n      &lt;artifactId&gt;google-adk&lt;/artifactId&gt;\n      &lt;version&gt;${google-adk.version}&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;commons-logging&lt;/groupId&gt;\n      &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;\n      &lt;version&gt;1.2&lt;/version&gt; &lt;!-- Or use a property if defined in a parent POM --&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n\n  &lt;build&gt;\n    &lt;plugins&gt;\n      &lt;plugin&gt;\n        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n        &lt;version&gt;3.13.0&lt;/version&gt;\n        &lt;configuration&gt;\n          &lt;source&gt;${java.version}&lt;/source&gt;\n          &lt;target&gt;${java.version}&lt;/target&gt;\n          &lt;parameters&gt;true&lt;/parameters&gt;\n          &lt;annotationProcessorPaths&gt;\n            &lt;path&gt;\n              &lt;groupId&gt;com.google.auto.value&lt;/groupId&gt;\n              &lt;artifactId&gt;auto-value&lt;/artifactId&gt;\n              &lt;version&gt;${auto-value.version}&lt;/version&gt;\n            &lt;/path&gt;\n          &lt;/annotationProcessorPaths&gt;\n        &lt;/configuration&gt;\n      &lt;/plugin&gt;\n      &lt;plugin&gt;\n        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\n        &lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;3.6.0&lt;/version&gt;\n        &lt;executions&gt;\n          &lt;execution&gt;\n            &lt;id&gt;add-source&lt;/id&gt;\n            &lt;phase&gt;generate-sources&lt;/phase&gt;\n            &lt;goals&gt;\n              &lt;goal&gt;add-source&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;configuration&gt;\n              &lt;sources&gt;\n                &lt;source&gt;.&lt;/source&gt;\n              &lt;/sources&gt;\n            &lt;/configuration&gt;\n          &lt;/execution&gt;\n        &lt;/executions&gt;\n      &lt;/plugin&gt;\n      &lt;plugin&gt;\n        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\n        &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;3.2.0&lt;/version&gt;\n        &lt;configuration&gt;\n          &lt;mainClass&gt;${exec.mainClass}&lt;/mainClass&gt;\n          &lt;classpathScope&gt;runtime&lt;/classpathScope&gt;\n        &lt;/configuration&gt;\n      &lt;/plugin&gt;\n    &lt;/plugins&gt;\n  &lt;/build&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"get-started/streaming/quickstart-streaming-java/#live-audio-run","title":"\u5efa\u7acb Live Audio Run \u5de5\u5177","text":"<p>\u5728 <code>src/main/java/</code> \u8cc7\u6599\u593e\u4e0b\u5efa\u7acb LiveAudioRun.java \u6a94\u6848\uff0c\u5167\u5bb9\u5982\u4e0b\u3002\u9019\u500b\u5de5\u5177\u6703\u5728\u5176\u4e0a\u57f7\u884c agent\uff0c\u4e26\u652f\u63f4\u5373\u6642\u8a9e\u97f3\u8f38\u5165\u8207\u8f38\u51fa\u3002</p> <pre><code>package samples.liveaudio;\n\nimport com.google.adk.agents.LiveRequestQueue;\nimport com.google.adk.agents.RunConfig;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.common.collect.ImmutableList;\nimport com.google.genai.types.Blob;\nimport com.google.genai.types.Modality;\nimport com.google.genai.types.PrebuiltVoiceConfig;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport com.google.genai.types.SpeechConfig;\nimport com.google.genai.types.VoiceConfig;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.net.URL;\nimport javax.sound.sampled.AudioFormat;\nimport javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.DataLine;\nimport javax.sound.sampled.LineUnavailableException;\nimport javax.sound.sampled.Mixer;\nimport javax.sound.sampled.SourceDataLine;\nimport javax.sound.sampled.TargetDataLine;\nimport java.util.UUID;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport agents.ScienceTeacherAgent;\n\n/** Main class to demonstrate running the {@link LiveAudioAgent} for a voice conversation. */\npublic final class LiveAudioRun {\n  private final String userId;\n  private final String sessionId;\n  private final Runner runner;\n\n  private static final javax.sound.sampled.AudioFormat MIC_AUDIO_FORMAT =\n      new javax.sound.sampled.AudioFormat(16000.0f, 16, 1, true, false);\n\n  private static final javax.sound.sampled.AudioFormat SPEAKER_AUDIO_FORMAT =\n      new javax.sound.sampled.AudioFormat(24000.0f, 16, 1, true, false);\n\n  private static final int BUFFER_SIZE = 4096;\n\n  public LiveAudioRun() {\n    this.userId = \"test_user\";\n    String appName = \"LiveAudioApp\";\n    this.sessionId = UUID.randomUUID().toString();\n\n    InMemorySessionService sessionService = new InMemorySessionService();\n    this.runner = new Runner(ScienceTeacherAgent.ROOT_AGENT, appName, null, sessionService);\n\n    ConcurrentMap&lt;String, Object&gt; initialState = new ConcurrentHashMap&lt;&gt;();\n    var unused =\n        sessionService.createSession(appName, userId, initialState, sessionId).blockingGet();\n  }\n\n  private void runConversation() throws Exception {\n    System.out.println(\"Initializing microphone input and speaker output...\");\n\n    RunConfig runConfig =\n        RunConfig.builder()\n            .setStreamingMode(RunConfig.StreamingMode.BIDI)\n            .setResponseModalities(ImmutableList.of(new Modality(\"AUDIO\")))\n            .setSpeechConfig(\n                SpeechConfig.builder()\n                    .voiceConfig(\n                        VoiceConfig.builder()\n                            .prebuiltVoiceConfig(\n                                PrebuiltVoiceConfig.builder().voiceName(\"Aoede\").build())\n                            .build())\n                    .languageCode(\"en-US\")\n                    .build())\n            .build();\n\n    LiveRequestQueue liveRequestQueue = new LiveRequestQueue();\n\n    Flowable&lt;Event&gt; eventStream =\n        this.runner.runLive(\n            runner.sessionService().createSession(userId, sessionId).blockingGet(),\n            liveRequestQueue,\n            runConfig);\n\n    AtomicBoolean isRunning = new AtomicBoolean(true);\n    AtomicBoolean conversationEnded = new AtomicBoolean(false);\n    ExecutorService executorService = Executors.newFixedThreadPool(2);\n\n    // Task for capturing microphone input\n    Future&lt;?&gt; microphoneTask =\n        executorService.submit(() -&gt; captureAndSendMicrophoneAudio(liveRequestQueue, isRunning));\n\n    // Task for processing agent responses and playing audio\n    Future&lt;?&gt; outputTask =\n        executorService.submit(\n            () -&gt; {\n              try {\n                processAudioOutput(eventStream, isRunning, conversationEnded);\n              } catch (Exception e) {\n                System.err.println(\"Error processing audio output: \" + e.getMessage());\n                e.printStackTrace();\n                isRunning.set(false);\n              }\n            });\n\n    // Wait for user to press Enter to stop the conversation\n    System.out.println(\"Conversation started. Press Enter to stop...\");\n    System.in.read();\n\n    System.out.println(\"Ending conversation...\");\n    isRunning.set(false);\n\n    try {\n      // Give some time for ongoing processing to complete\n      microphoneTask.get(2, TimeUnit.SECONDS);\n      outputTask.get(2, TimeUnit.SECONDS);\n    } catch (Exception e) {\n      System.out.println(\"Stopping tasks...\");\n    }\n\n    liveRequestQueue.close();\n    executorService.shutdownNow();\n    System.out.println(\"Conversation ended.\");\n  }\n\n  private void captureAndSendMicrophoneAudio(\n      LiveRequestQueue liveRequestQueue, AtomicBoolean isRunning) {\n    TargetDataLine micLine = null;\n    try {\n      DataLine.Info info = new DataLine.Info(TargetDataLine.class, MIC_AUDIO_FORMAT);\n      if (!AudioSystem.isLineSupported(info)) {\n        System.err.println(\"Microphone line not supported!\");\n        return;\n      }\n\n      micLine = (TargetDataLine) AudioSystem.getLine(info);\n      micLine.open(MIC_AUDIO_FORMAT);\n      micLine.start();\n\n      System.out.println(\"Microphone initialized. Start speaking...\");\n\n      byte[] buffer = new byte[BUFFER_SIZE];\n      int bytesRead;\n\n      while (isRunning.get()) {\n        bytesRead = micLine.read(buffer, 0, buffer.length);\n\n        if (bytesRead &gt; 0) {\n          byte[] audioChunk = new byte[bytesRead];\n          System.arraycopy(buffer, 0, audioChunk, 0, bytesRead);\n\n          Blob audioBlob = Blob.builder().data(audioChunk).mimeType(\"audio/pcm\").build();\n\n          liveRequestQueue.realtime(audioBlob);\n        }\n      }\n    } catch (LineUnavailableException e) {\n      System.err.println(\"Error accessing microphone: \" + e.getMessage());\n      e.printStackTrace();\n    } finally {\n      if (micLine != null) {\n        micLine.stop();\n        micLine.close();\n      }\n    }\n  }\n\n  private void processAudioOutput(\n      Flowable&lt;Event&gt; eventStream, AtomicBoolean isRunning, AtomicBoolean conversationEnded) {\n    SourceDataLine speakerLine = null;\n    try {\n      DataLine.Info info = new DataLine.Info(SourceDataLine.class, SPEAKER_AUDIO_FORMAT);\n      if (!AudioSystem.isLineSupported(info)) {\n        System.err.println(\"Speaker line not supported!\");\n        return;\n      }\n\n      final SourceDataLine finalSpeakerLine = (SourceDataLine) AudioSystem.getLine(info);\n      finalSpeakerLine.open(SPEAKER_AUDIO_FORMAT);\n      finalSpeakerLine.start();\n\n      System.out.println(\"Speaker initialized.\");\n\n      for (Event event : eventStream.blockingIterable()) {\n        if (!isRunning.get()) {\n          break;\n        }\n\n        AtomicBoolean audioReceived = new AtomicBoolean(false);\n        processEvent(event, audioReceived);\n\n        event.content().ifPresent(content -&gt; content.parts().ifPresent(parts -&gt; parts.forEach(part -&gt; playAudioData(part, finalSpeakerLine))));\n      }\n\n      speakerLine = finalSpeakerLine; // Assign to outer variable for cleanup in finally block\n    } catch (LineUnavailableException e) {\n      System.err.println(\"Error accessing speaker: \" + e.getMessage());\n      e.printStackTrace();\n    } finally {\n      if (speakerLine != null) {\n        speakerLine.drain();\n        speakerLine.stop();\n        speakerLine.close();\n      }\n      conversationEnded.set(true);\n    }\n  }\n\n  private void playAudioData(Part part, SourceDataLine speakerLine) {\n    part.inlineData()\n        .ifPresent(\n            inlineBlob -&gt;\n                inlineBlob\n                    .data()\n                    .ifPresent(\n                        audioBytes -&gt; {\n                          if (audioBytes.length &gt; 0) {\n                            System.out.printf(\n                                \"Playing audio (%s): %d bytes%n\",\n                                inlineBlob.mimeType(),\n                                audioBytes.length);\n                            speakerLine.write(audioBytes, 0, audioBytes.length);\n                          }\n                        }));\n  }\n\n  private void processEvent(Event event, java.util.concurrent.atomic.AtomicBoolean audioReceived) {\n    event\n        .content()\n        .ifPresent(\n            content -&gt;\n                content\n                    .parts()\n                    .ifPresent(parts -&gt; parts.forEach(part -&gt; logReceivedAudioData(part, audioReceived))));\n  }\n\n  private void logReceivedAudioData(Part part, AtomicBoolean audioReceived) {\n    part.inlineData()\n        .ifPresent(\n            inlineBlob -&gt;\n                inlineBlob\n                    .data()\n                    .ifPresent(\n                        audioBytes -&gt; {\n                          if (audioBytes.length &gt; 0) {\n                            System.out.printf(\n                                \"    Audio (%s): received %d bytes.%n\",\n                                inlineBlob.mimeType(),\n                                audioBytes.length);\n                            audioReceived.set(true);\n                          } else {\n                            System.out.printf(\n                                \"    Audio (%s): received empty audio data.%n\",\n                                inlineBlob.mimeType());\n                          }\n                        }));\n  }\n\n  public static void main(String[] args) throws Exception {\n    LiveAudioRun liveAudioRun = new LiveAudioRun();\n    liveAudioRun.runConversation();\n    System.out.println(\"Exiting Live Audio Run.\");\n  }\n}\n</code></pre>"},{"location":"get-started/streaming/quickstart-streaming-java/#live-audio-run_1","title":"\u57f7\u884c Live Audio Run \u5de5\u5177","text":"<p>\u8981\u57f7\u884c Live Audio Run \u5de5\u5177\uff0c\u8acb\u5728 <code>adk-agents</code> \u76ee\u9304\u4e0b\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\uff1a</p> <pre><code>mvn compile exec:java\n</code></pre> <p>\u7136\u5f8c\u4f60\u61c9\u8a72\u6703\u770b\u5230\uff1a</p> <pre><code>$ mvn compile exec:java\n...\nInitializing microphone input and speaker output...\nConversation started. Press Enter to stop...\nSpeaker initialized.\nMicrophone initialized. Start speaking...\n</code></pre> <p>\u7576\u51fa\u73fe\u6b64\u8a0a\u606f\u6642\uff0c\u8a72\u5de5\u5177\u5df2\u6e96\u5099\u597d\u63a5\u6536\u8a9e\u97f3\u8f38\u5165\u3002\u4f60\u53ef\u4ee5\u50cf\u9019\u6a23\u5411 agent \u63d0\u554f\uff1a<code>What's the electron?</code>\u3002</p> <p>Caution</p> <p>\u7576\u4f60\u767c\u73fe agent \u6301\u7e8c\u81ea\u52d5\u8aaa\u8a71\u4e14\u7121\u6cd5\u505c\u6b62\u6642\uff0c\u8acb\u5617\u8a66\u4f7f\u7528\u8033\u6a5f\u4f86\u6291\u5236\u56de\u97f3\u3002</p>"},{"location":"get-started/streaming/quickstart-streaming-java/#summary","title":"\u6458\u8981","text":"<p>Agent Development Kit (ADK) \u7684\u4e32\u6d41\u529f\u80fd\u8b93\u958b\u767c\u8005\u80fd\u5920\u6253\u9020\u5177\u5099\u4f4e\u5ef6\u9072\u3001\u96d9\u5411\u8a9e\u97f3\u8207\u8996\u8a0a\u901a\u8a0a\u80fd\u529b\u7684 agent\uff0c\u9032\u4e00\u6b65\u63d0\u5347\u4e92\u52d5\u9ad4\u9a57\u3002\u672c\u6587\u8aaa\u660e\u6587\u5b57\u4e32\u6d41\u5df2\u4f5c\u70ba ADK agent \u7684\u5167\u5efa\u529f\u80fd\uff0c\u7121\u9700\u984d\u5916\u64b0\u5beb\u7279\u5b9a\u7a0b\u5f0f\u78bc\uff0c\u540c\u6642\u4e5f\u5c55\u793a\u5982\u4f55\u5be6\u4f5c\u5373\u6642\u8a9e\u97f3\u5c0d\u8a71\uff0c\u8b93\u4f7f\u7528\u8005\u80fd\u5920\u8207 agent \u9032\u884c\u5373\u6642\u8a9e\u97f3\u4e92\u52d5\u3002\u9019\u4f7f\u5f97\u6e9d\u901a\u66f4\u52a0\u81ea\u7136\u4e14\u5177\u52d5\u614b\u6027\uff0c\u4f7f\u7528\u8005\u53ef\u4ee5\u7121\u7e2b\u5730\u8207 agent \u9032\u884c\u8a9e\u97f3\u4ea4\u6d41\u3002</p>"},{"location":"get-started/streaming/quickstart-streaming.en/","title":"Quickstart (Streaming / Python)","text":"<p>With this quickstart, you'll learn to create a simple agent and use ADK Streaming to enable voice and video communication with it that is low-latency and bidirectional. We will install ADK, set up a basic \"Google Search\" agent, try running the agent with Streaming with <code>adk web</code> tool, and then explain how to build a simple asynchronous web app by yourself using ADK Streaming and FastAPI.</p> <p>Note: This guide assumes you have experience using a terminal in Windows, Mac, and Linux environments.</p>"},{"location":"get-started/streaming/quickstart-streaming.en/#supported-models","title":"Supported models for voice/video streaming","text":"<p>In order to use voice/video streaming in ADK, you will need to use Gemini models that support the Live API. You can find the model ID(s) that supports the Gemini Live API in the documentation:</p> <ul> <li>Google AI Studio: Gemini Live API</li> <li>Vertex AI: Gemini Live API</li> </ul>"},{"location":"get-started/streaming/quickstart-streaming.en/#setup-environment-install-adk","title":"1. Setup Environment &amp; Install ADK","text":"<p>Create &amp; Activate Virtual Environment (Recommended):</p> <pre><code># Create\npython -m venv .venv\n# Activate (each new terminal)\n# macOS/Linux: source .venv/bin/activate\n# Windows CMD: .venv\\Scripts\\activate.bat\n# Windows PowerShell: .venv\\Scripts\\Activate.ps1\n</code></pre> <p>Install ADK:</p> <pre><code>pip install google-adk\n</code></pre>"},{"location":"get-started/streaming/quickstart-streaming.en/#project-structure","title":"2. Project Structure","text":"<p>Create the following folder structure with empty files:</p> <pre><code>adk-streaming/  # Project folder\n\u2514\u2500\u2500 app/ # the web app folder\n    \u251c\u2500\u2500 .env # Gemini API key\n    \u2514\u2500\u2500 google_search_agent/ # Agent folder\n        \u251c\u2500\u2500 __init__.py # Python package\n        \u2514\u2500\u2500 agent.py # Agent definition\n</code></pre>"},{"location":"get-started/streaming/quickstart-streaming.en/#agentpy","title":"agent.py","text":"<p>Copy-paste the following code block into the <code>agent.py</code> file.</p> <p>For <code>model</code>, please double check the model ID as described earlier in the Models section.</p> <pre><code>from google.adk.agents import Agent\nfrom google.adk.tools import google_search  # Import the tool\n\nroot_agent = Agent(\n   # A unique name for the agent.\n   name=\"basic_search_agent\",\n   # The Large Language Model (LLM) that agent will use.\n   # Please fill in the latest model id that supports live from\n   # https://google.github.io/adk-docs/get-started/streaming/quickstart-streaming/#supported-models\n   model=\"...\",  # for example: model=\"gemini-2.0-flash-live-001\" or model=\"gemini-2.0-flash-live-preview-04-09\"\n   # A short description of the agent's purpose.\n   description=\"Agent to answer questions using Google Search.\",\n   # Instructions to set the agent's behavior.\n   instruction=\"You are an expert researcher. You always stick to the facts.\",\n   # Add google_search tool to perform grounding with Google search.\n   tools=[google_search]\n)\n</code></pre> <p><code>agent.py</code> is where all your agent(s)' logic will be stored, and you must have a <code>root_agent</code> defined.</p> <p>Notice how easily you integrated grounding with Google Search capabilities.  The <code>Agent</code> class and the <code>google_search</code> tool handle the complex interactions with the LLM and grounding with the search API, allowing you to focus on the agent's purpose and behavior.</p> <p></p> <p>Copy-paste the following code block to <code>__init__.py</code> file.</p> __init__.py<pre><code>from . import agent\n</code></pre>"},{"location":"get-started/streaming/quickstart-streaming.en/#set-up-the-platform","title":"3. Set up the platform","text":"<p>To run the agent, choose a platform from either Google AI Studio or Google Cloud Vertex AI:</p> Gemini - Google AI StudioGemini - Google Cloud Vertex AI <ol> <li>Get an API key from Google AI Studio.</li> <li> <p>Open the <code>.env</code> file located inside (<code>app/</code>) and copy-paste the following code.</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=FALSE\nGOOGLE_API_KEY=PASTE_YOUR_ACTUAL_API_KEY_HERE\n</code></pre> </li> <li> <p>Replace <code>PASTE_YOUR_ACTUAL_API_KEY_HERE</code> with your actual <code>API KEY</code>.</p> </li> </ol> <ol> <li>You need an existing    Google Cloud account and a    project.<ul> <li>Set up a   Google Cloud project</li> <li>Set up the   gcloud CLI</li> <li>Authenticate to Google Cloud, from the terminal by running   <code>gcloud auth login</code>.</li> <li>Enable the Vertex AI API.</li> </ul> </li> <li> <p>Open the <code>.env</code> file located inside (<code>app/</code>). Copy-paste    the following code and update the project ID and location.</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_CLOUD_PROJECT=PASTE_YOUR_ACTUAL_PROJECT_ID\nGOOGLE_CLOUD_LOCATION=us-central1\n</code></pre> </li> </ol>"},{"location":"get-started/streaming/quickstart-streaming.en/#try-the-agent-with-adk-web","title":"4. Try the agent with <code>adk web</code>","text":"<p>Now it's ready to try the agent. Run the following command to launch the dev UI. First, make sure to set the current directory to <code>app</code>:</p> <pre><code>cd app\n</code></pre> <p>Also, set <code>SSL_CERT_FILE</code> variable with the following command. This is required for the voice and video tests later.</p> OS X &amp; LinuxWindows <pre><code>export SSL_CERT_FILE=$(python -m certifi)\n</code></pre> <pre><code>$env:SSL_CERT_FILE = (python -m certifi)\n</code></pre> <p>Then, run the dev UI:</p> <pre><code>adk web\n</code></pre> <p>Note for Windows users</p> <p>When hitting the <code>_make_subprocess_transport NotImplementedError</code>, consider using <code>adk web --no-reload</code> instead.</p> <p>Open the URL provided (usually <code>http://localhost:8000</code> or <code>http://127.0.0.1:8000</code>) directly in your browser. This connection stays entirely on your local machine. Select <code>google_search_agent</code>.</p>"},{"location":"get-started/streaming/quickstart-streaming.en/#try-with-text","title":"Try with text","text":"<p>Try the following prompts by typing them in the UI.</p> <ul> <li>What is the weather in New York?</li> <li>What is the time in New York?</li> <li>What is the weather in Paris?</li> <li>What is the time in Paris?</li> </ul> <p>The agent will use the google_search tool to get the latest information to answer those questions.</p>"},{"location":"get-started/streaming/quickstart-streaming.en/#try-with-voice-and-video","title":"Try with voice and video","text":"<p>To try with voice, reload the web browser, click the microphone button to enable the voice input, and ask the same question in voice. You will hear the answer in voice in real-time.</p> <p>To try with video, reload the web browser, click the camera button to enable the video input, and ask questions like \"What do you see?\". The agent will answer what they see in the video input.</p> <p>(Just clicking the microphone or camera button once is enough. Your voice or video will be streamed to models and the model response will be streamed back continuously. Clicking on the microphone or camera button multiple times is not supported.)</p>"},{"location":"get-started/streaming/quickstart-streaming.en/#stop-the-tool","title":"Stop the tool","text":"<p>Stop <code>adk web</code> by pressing <code>Ctrl-C</code> on the console.</p>"},{"location":"get-started/streaming/quickstart-streaming.en/#note-on-adk-streaming","title":"Note on ADK Streaming","text":"<p>The following features will be supported in the future versions of the ADK Streaming: Callback, LongRunningTool, ExampleTool, and Shell agent (e.g. SequentialAgent).</p> <p>Congratulations! You've successfully created and interacted with your first Streaming agent using ADK!</p>"},{"location":"get-started/streaming/quickstart-streaming.en/#next-steps-build-custom-streaming-app","title":"Next steps: build custom streaming app","text":"<p>In Custom Audio Streaming app tutorial, it overviews the server and client code for a custom asynchronous web app built with ADK Streaming and FastAPI, enabling real-time, bidirectional audio and text communication.</p>"},{"location":"get-started/streaming/quickstart-streaming/","title":"\u5feb\u901f\u958b\u59cb\uff08\u4e32\u6d41 / Python\uff09","text":"<p>\u900f\u904e\u672c\u5feb\u901f\u958b\u59cb\u6559\u5b78\uff0c\u4f60\u5c07\u5b78\u6703\u5982\u4f55\u5efa\u7acb\u4e00\u500b\u7c21\u55ae\u7684 agent\uff0c\u4e26\u4f7f\u7528 Agent Development Kit (ADK) \u4e32\u6d41\u529f\u80fd\uff0c\u5be6\u73fe\u4f4e\u5ef6\u9072\u3001\u96d9\u5411\u7684\u8a9e\u97f3\u8207\u8996\u8a0a\u901a\u8a0a\u3002\u6211\u5011\u5c07\u5b89\u88dd ADK\uff0c\u8a2d\u5b9a\u4e00\u500b\u57fa\u672c\u7684\u300cGoogle Search\u300dagent\uff0c\u5617\u8a66\u4f7f\u7528 <code>adk web</code> \u5de5\u5177\u4ee5\u4e32\u6d41\u65b9\u5f0f\u57f7\u884c agent\uff0c\u4e26\u8aaa\u660e\u5982\u4f55\u81ea\u884c\u5229\u7528 ADK \u4e32\u6d41\u8207 FastAPI \u5efa\u7acb\u4e00\u500b\u7c21\u55ae\u7684\u975e\u540c\u6b65\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\u3002</p> <p>\u6ce8\u610f\uff1a \u672c\u6307\u5357\u5047\u8a2d\u4f60\u5df2\u5177\u5099\u5728 Windows\u3001Mac \u8207 Linux \u74b0\u5883\u4e0b\u4f7f\u7528\u7d42\u7aef\u6a5f\u7684\u7d93\u9a57\u3002</p>"},{"location":"get-started/streaming/quickstart-streaming/#supported-models","title":"\u652f\u63f4\u8a9e\u97f3\uff0f\u8996\u8a0a\u4e32\u6d41\u7684\u6a21\u578b","text":"<p>\u8981\u5728 ADK \u4e2d\u4f7f\u7528\u8a9e\u97f3\uff0f\u8996\u8a0a\u4e32\u6d41\u529f\u80fd\uff0c\u9700\u4f7f\u7528\u652f\u63f4 Gemini Live API \u7684 Gemini \u6a21\u578b\u3002\u4f60\u53ef\u4ee5\u5728\u4e0b\u5217\u6587\u4ef6\u4e2d\u627e\u5230\u652f\u63f4 Gemini Live API \u7684\u6a21\u578b ID\uff1a</p> <ul> <li>Google AI Studio: Gemini Live API</li> <li>Vertex AI: Gemini Live API</li> </ul>"},{"location":"get-started/streaming/quickstart-streaming/#setup-environment-install-adk","title":"1. \u5efa\u7acb\u74b0\u5883\u4e26\u5b89\u88dd ADK","text":"<p>\u5efa\u7acb\u4e26\u555f\u7528\u865b\u64ec\u74b0\u5883\uff08\u5efa\u8b70\uff09\uff1a</p> <pre><code># Create\npython -m venv .venv\n# Activate (each new terminal)\n# macOS/Linux: source .venv/bin/activate\n# Windows CMD: .venv\\Scripts\\activate.bat\n# Windows PowerShell: .venv\\Scripts\\Activate.ps1\n</code></pre> <p>\u5b89\u88dd Agent Development Kit (ADK)\uff1a</p> <pre><code>pip install google-adk\n</code></pre>"},{"location":"get-started/streaming/quickstart-streaming/#project-structure","title":"2. \u5c08\u6848\u7d50\u69cb","text":"<p>\u8acb\u4f9d\u4e0b\u5217\u8cc7\u6599\u593e\u7d50\u69cb\u5efa\u7acb\u7a7a\u7684\u6a94\u6848\uff1a</p> <pre><code>adk-streaming/  # Project folder\n\u2514\u2500\u2500 app/ # the web app folder\n    \u251c\u2500\u2500 .env # Gemini API key\n    \u2514\u2500\u2500 google_search_agent/ # Agent folder\n        \u251c\u2500\u2500 __init__.py # Python package\n        \u2514\u2500\u2500 agent.py # Agent definition\n</code></pre>"},{"location":"get-started/streaming/quickstart-streaming/#agentpy","title":"agent.py","text":"<p>\u8acb\u5c07\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u5340\u584a\u8907\u88fd\u8cbc\u4e0a\u5230 <code>agent.py</code> \u6a94\u6848\u4e2d\u3002</p> <p>\u5c0d\u65bc <code>model</code>\uff0c\u8acb\u4f9d\u7167\u524d\u8ff0\u65bc Models section \u7684\u8aaa\u660e\uff0c\u518d\u6b21\u78ba\u8a8d model ID \u662f\u5426\u6b63\u78ba\u3002</p> <pre><code>from google.adk.agents import Agent\nfrom google.adk.tools import google_search  # Import the tool\n\nroot_agent = Agent(\n   # A unique name for the agent.\n   name=\"basic_search_agent\",\n   # The Large Language Model (LLM) that agent will use.\n   # Please fill in the latest model id that supports live from\n   # https://doggy8088.github.io/adk-docs/get-started/streaming/quickstart-streaming/#supported-models\n   model=\"...\",  # for example: model=\"gemini-2.0-flash-live-001\" or model=\"gemini-2.0-flash-live-preview-04-09\"\n   # A short description of the agent's purpose.\n   description=\"Agent to answer questions using Google Search.\",\n   # Instructions to set the agent's behavior.\n   instruction=\"You are an expert researcher. You always stick to the facts.\",\n   # Add google_search tool to perform grounding with Google search.\n   tools=[google_search]\n)\n</code></pre> <p><code>agent.py</code> \u662f\u5132\u5b58\u6240\u6709 agent \u908f\u8f2f\u7684\u5730\u65b9\uff0c\u4e14\u4f60\u5fc5\u9808\u5b9a\u7fa9 <code>root_agent</code>\u3002</p> <p>\u8acb\u6ce8\u610f\uff0c\u4f60\u5df2\u7d93\u975e\u5e38\u8f15\u9b06\u5730\u6574\u5408\u4e86 \u77e5\u8b58\u63a5\u5730 (grounding) \u8207 Google Search \u7684\u529f\u80fd\u3002<code>Agent</code> \u985e\u5225\u8207 <code>google_search</code> \u5de5\u5177\u8ca0\u8cac\u8655\u7406\u8207\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u53ca Google Search API \u9032\u884c\u77e5\u8b58\u63a5\u5730\u7684\u8907\u96dc\u4e92\u52d5\uff0c\u8b93\u4f60\u80fd\u5c08\u6ce8\u65bc agent \u7684\u76ee\u7684\u8207\u884c\u70ba\u3002</p> <p></p> <p>\u8acb\u5c07\u4e0b\u65b9\u7a0b\u5f0f\u78bc\u5340\u584a\u8907\u88fd\u8cbc\u5230 <code>__init__.py</code> \u6a94\u6848\u4e2d\u3002</p> __init__.py<pre><code>from . import agent\n</code></pre>"},{"location":"get-started/streaming/quickstart-streaming/#set-up-the-platform","title":"3. \u8a2d\u5b9a\u5e73\u53f0","text":"<p>\u8981\u57f7\u884c agent\uff0c\u8acb\u5f9e Google AI Studio \u6216 Google Cloud Vertex AI \u9019\u5169\u500b\u5e73\u53f0\u4e2d\u64c7\u4e00\uff1a</p> Gemini - Google AI StudioGemini - Google Cloud Vertex AI <ol> <li>\u5f9e Google AI Studio \u53d6\u5f97 API KEY\u3002</li> <li> <p>\u958b\u555f\u4f4d\u65bc (<code>app/</code>) \u5167\u7684 <code>.env</code> \u6a94\u6848\uff0c\u4e26\u5c07\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u8907\u88fd\u8cbc\u4e0a\u3002</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=FALSE\nGOOGLE_API_KEY=PASTE_YOUR_ACTUAL_API_KEY_HERE\n</code></pre> </li> <li> <p>\u5c07 <code>PASTE_YOUR_ACTUAL_API_KEY_HERE</code> \u66ff\u63db\u70ba\u4f60\u5be6\u969b\u7684 <code>API KEY</code>\u3002</p> </li> </ol> <ol> <li>\u4f60\u9700\u8981\u4e00\u500b\u5df2\u5b58\u5728\u7684    Google Cloud \u5e33\u6236\u4ee5\u53ca\u4e00\u500b\u5c08\u6848\u3002<ul> <li>\u5efa\u7acb\u4e00\u500b   Google Cloud \u5c08\u6848</li> <li>\u8a2d\u5b9a   gcloud CLI</li> <li>\u5f9e\u7d42\u7aef\u6a5f\u57f7\u884c   <code>gcloud auth login</code> \u4f86\u9a57\u8b49 Google Cloud \u8eab\u4efd\u3002</li> <li>\u555f\u7528 Vertex AI API\u3002</li> </ul> </li> <li> <p>\u958b\u555f\u4f4d\u65bc (<code>app/</code>) \u5167\u7684 <code>.env</code> \u6a94\u6848\u3002\u8907\u88fd\u4e26\u8cbc\u4e0a\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\uff0c\u4e26\u66f4\u65b0\u5c08\u6848 ID \u8207 Location\u3002</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_CLOUD_PROJECT=PASTE_YOUR_ACTUAL_PROJECT_ID\nGOOGLE_CLOUD_LOCATION=us-central1\n</code></pre> </li> </ol>"},{"location":"get-started/streaming/quickstart-streaming/#try-the-agent-with-adk-web","title":"4. \u4f7f\u7528 <code>adk web</code> \u5617\u8a66 agent","text":"<p>\u73fe\u5728\u5df2\u7d93\u53ef\u4ee5\u5617\u8a66\u9019\u500b agent \u4e86\u3002\u8acb\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u4f86\u555f\u52d5\u958b\u767c UI\uff08dev UI\uff09\u3002\u9996\u5148\uff0c\u8acb\u78ba\u4fdd\u76ee\u524d\u7684\u76ee\u9304\u5df2\u8a2d\u70ba <code>app</code>\uff1a</p> <pre><code>cd app\n</code></pre> <p>\u53e6\u5916\uff0c\u8acb\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u8a2d\u5b9a <code>SSL_CERT_FILE</code> \u8b8a\u6578\u3002\u9019\u5728\u5f8c\u7e8c\u9032\u884c\u8a9e\u97f3\u548c\u8996\u8a0a\u6e2c\u8a66\u6642\u662f\u5fc5\u8981\u7684\u3002</p> OS X &amp; LinuxWindows\uff08\u547d\u4ee4\u63d0\u793a\u5b57\u5143\uff09 <pre><code>export SSL_CERT_FILE=$(python -m certifi)\n</code></pre> <pre><code>$env:SSL_CERT_FILE = (python -m certifi)\n</code></pre> <p>\u7136\u5f8c\uff0c\u57f7\u884c\u958b\u767c UI\uff1a</p> <pre><code>adk web\n</code></pre> <p>Windows \u4f7f\u7528\u8005\u6ce8\u610f\u4e8b\u9805</p> <p>When hitting the <code>_make_subprocess_transport NotImplementedError</code>, consider using <code>adk web --no-reload</code> instead.</p> <p>\u8acb\u76f4\u63a5\u5728\u700f\u89bd\u5668\u4e2d\u958b\u555f\u6240\u63d0\u4f9b\u7684 URL\uff08\u901a\u5e38\u70ba <code>http://localhost:8000</code> \u6216 <code>http://127.0.0.1:8000</code>\uff09\u3002\u9019\u500b\u9023\u7dda\u5c07\u5b8c\u5168\u7559\u5728\u60a8\u7684\u672c\u6a5f\u3002\u8acb\u9078\u64c7 <code>google_search_agent</code>\u3002</p>"},{"location":"get-started/streaming/quickstart-streaming/#_1","title":"\u5617\u8a66\u6587\u5b57\u4e92\u52d5","text":"<p>\u8acb\u5728 UI \u4ecb\u9762\u4e2d\u8f38\u5165\u4ee5\u4e0b\u63d0\u793a\u4f86\u9032\u884c\u6e2c\u8a66\u3002</p> <ul> <li>\u7d10\u7d04\u7684\u5929\u6c23\u5982\u4f55\uff1f</li> <li>\u7d10\u7d04\u73fe\u5728\u5e7e\u9ede\uff1f</li> <li>\u5df4\u9ece\u7684\u5929\u6c23\u5982\u4f55\uff1f</li> <li>\u5df4\u9ece\u73fe\u5728\u5e7e\u9ede\uff1f</li> </ul> <p>agent \u6703\u4f7f\u7528 google_search \u5de5\u5177\u4f86\u53d6\u5f97\u6700\u65b0\u8cc7\u8a0a\u4e26\u56de\u7b54\u9019\u4e9b\u554f\u984c\u3002</p>"},{"location":"get-started/streaming/quickstart-streaming/#_2","title":"\u5617\u8a66\u8a9e\u97f3\u8207\u8996\u8a0a\u4e92\u52d5","text":"<p>\u82e5\u8981\u5617\u8a66\u8a9e\u97f3\u4e92\u52d5\uff0c\u8acb\u91cd\u65b0\u8f09\u5165\u7db2\u9801\u700f\u89bd\u5668\uff0c\u9ede\u64ca\u9ea5\u514b\u98a8\u6309\u9215\u4ee5\u555f\u7528\u8a9e\u97f3\u8f38\u5165\uff0c\u7136\u5f8c\u7528\u8a9e\u97f3\u8a62\u554f\u76f8\u540c\u7684\u554f\u984c\u3002\u60a8\u5c07\u6703\u5373\u6642\u807d\u5230\u8a9e\u97f3\u56de\u8986\u3002</p> <p>\u82e5\u8981\u5617\u8a66\u8996\u8a0a\u4e92\u52d5\uff0c\u8acb\u91cd\u65b0\u8f09\u5165\u7db2\u9801\u700f\u89bd\u5668\uff0c\u9ede\u64ca\u76f8\u6a5f\u6309\u9215\u4ee5\u555f\u7528\u8996\u8a0a\u8f38\u5165\uff0c\u7136\u5f8c\u8a62\u554f\u50cf\u662f\u300c\u4f60\u770b\u5230\u4e86\u4ec0\u9ebc\uff1f\u300d\u9019\u985e\u554f\u984c\u3002agent \u6703\u6839\u64da\u8996\u8a0a\u8f38\u5165\u56de\u7b54\u4ed6\u6240\u770b\u5230\u7684\u5167\u5bb9\u3002</p> <p>\uff08\u53ea\u9700\u9ede\u64ca\u4e00\u6b21\u9ea5\u514b\u98a8\u6216\u76f8\u6a5f\u6309\u9215\u5373\u53ef\u3002\u60a8\u7684\u8a9e\u97f3\u6216\u8996\u8a0a\u5c07\u6703\u4e32\u6d41\u50b3\u9001\u81f3\u6a21\u578b\uff0c\u4e26\u4e14\u6a21\u578b\u7684\u56de\u61c9\u4e5f\u6703\u6301\u7e8c\u4e32\u6d41\u56de\u4f86\u3002\u4e0d\u652f\u63f4\u591a\u6b21\u9ede\u64ca\u9ea5\u514b\u98a8\u6216\u76f8\u6a5f\u6309\u9215\u3002\uff09</p>"},{"location":"get-started/streaming/quickstart-streaming/#_3","title":"\u505c\u6b62\u5de5\u5177","text":"<p>\u8acb\u5728\u4e3b\u63a7\u53f0\u6309\u4e0b <code>Ctrl-C</code> \u4f86\u505c\u6b62 <code>adk web</code>\u3002</p>"},{"location":"get-started/streaming/quickstart-streaming/#adk-streaming","title":"\u95dc\u65bc ADK Streaming \u7684\u6ce8\u610f\u4e8b\u9805","text":"<p>\u4ee5\u4e0b\u529f\u80fd\u5c07\u5728\u672a\u4f86\u7248\u672c\u7684 Agent Development Kit (ADK) Streaming \u4e2d\u652f\u63f4\uff1aCallback\u3001LongRunningTool\u3001ExampleTool\uff0c\u4ee5\u53ca Shell agent\uff08\u4f8b\u5982 SequentialAgent\uff09\u3002</p> <p>\u606d\u559c\u60a8\uff01\u60a8\u5df2\u6210\u529f\u4f7f\u7528 Agent Development Kit (ADK) \u5efa\u7acb\u4e26\u4e92\u52d5\u60a8\u7684\u7b2c\u4e00\u500b Streaming agent\uff01</p>"},{"location":"get-started/streaming/quickstart-streaming/#_4","title":"\u4e0b\u4e00\u6b65\uff1a\u6253\u9020\u81ea\u8a02\u4e32\u6d41\u61c9\u7528\u7a0b\u5f0f","text":"<p>\u5728 Custom Audio Streaming app \u6559\u5b78\u4e2d\uff0c\u5c07\u6982\u8ff0\u5982\u4f55\u4f7f\u7528 Agent Development Kit (ADK) Streaming \u8207 FastAPI \u5efa\u7acb\u81ea\u8a02\u7684\u975e\u540c\u6b65\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\uff0c\u5305\u62ec\u4f3a\u670d\u5668\u8207\u7528\u6236\u7aef\u7a0b\u5f0f\u78bc\uff0c\u5be6\u73fe\u5373\u6642\u3001\u96d9\u5411\u7684\u8a9e\u97f3\u8207\u6587\u5b57\u901a\u8a0a\u3002</p>"},{"location":"grounding/google_search_grounding.en/","title":"Understanding Google Search Grounding","text":"<p>Google Search Grounding tool is a powerful feature in the Agent Development Kit (ADK) that enables AI agents to access real-time, authoritative information from the web. By connecting your agents to Google Search, you can provide users with up-to-date answers backed by reliable sources.</p> <p>This feature is particularly valuable for queries requiring current information like weather updates, news events, stock prices, or any facts that may have changed since the model's training data cutoff. When your agent determines that external information is needed, it automatically performs web searches and incorporates the results into its response with proper attribution.</p>"},{"location":"grounding/google_search_grounding.en/#what-youll-learn","title":"What You'll Learn","text":"<p>In this guide, you'll discover:</p> <ul> <li>Quick Setup: How to create and run a Google Search-enabled agent from scratch</li> <li>Grounding Architecture: The data flow and technical process behind web grounding</li> <li>Response Structure: How to interpret grounded responses and their metadata</li> <li>Best Practices: Guidelines for displaying search results and citations to users</li> </ul>"},{"location":"grounding/google_search_grounding.en/#additional-resource","title":"Additional resource","text":"<p>As an additional resource, Gemini Fullstack Agent Development Kit (ADK) Quickstart has a great practical use of the Google Search grounding as a full stack application example.</p>"},{"location":"grounding/google_search_grounding.en/#google-search-grounding-quickstart","title":"Google Search Grounding Quickstart","text":"<p>This quickstart guides you through creating an ADK agent with Google Search grounding feature. This quickstart assumes a local IDE (VS Code or PyCharm, etc.) with Python 3.9+ and terminal access.</p>"},{"location":"grounding/google_search_grounding.en/#set-up-environment-install-adk","title":"1. Set up Environment &amp; Install ADK","text":"<p>Create &amp; Activate Virtual Environment:</p> <pre><code># Create\npython -m venv .venv\n\n# Activate (each new terminal)\n# macOS/Linux: source .venv/bin/activate\n# Windows CMD: .venv\\Scripts\\activate.bat\n# Windows PowerShell: .venv\\Scripts\\Activate.ps1\n</code></pre> <p>Install ADK:</p> <pre><code>pip install google-adk==1.4.2\n</code></pre>"},{"location":"grounding/google_search_grounding.en/#create-agent-project","title":"2. Create Agent Project","text":"<p>Under a project directory, run the following commands:</p> OS X &amp; LinuxWindows <pre><code># Step 1: Create a new directory for your agent\nmkdir google_search_agent\n\n# Step 2: Create __init__.py for the agent\necho \"from . import agent\" &gt; google_search_agent/__init__.py\n\n# Step 3: Create an agent.py (the agent definition) and .env (Gemini authentication config)\ntouch google_search_agent/agent.py .env\n</code></pre> <pre><code># Step 1: Create a new directory for your agent\nmkdir google_search_agent\n\n# Step 2: Create __init__.py for the agent\necho \"from . import agent\" &gt; google_search_agent/__init__.py\n\n# Step 3: Create an agent.py (the agent definition) and .env (Gemini authentication config)\ntype nul &gt; google_search_agent\\agent.py \ntype nul &gt; google_search_agent\\.env\n</code></pre>"},{"location":"grounding/google_search_grounding.en/#edit-agentpy","title":"Edit <code>agent.py</code>","text":"<p>Copy and paste the following code into <code>agent.py</code>:</p> google_search_agent/agent.py<pre><code>from google.adk.agents import Agent\nfrom google.adk.tools import google_search\n\nroot_agent = Agent(\n    name=\"google_search_agent\",\n    model=\"gemini-2.5-flash\",\n    instruction=\"Answer questions using Google Search when needed. Always cite sources.\",\n    description=\"Professional search assistant with Google Search capabilities\",\n    tools=[google_search]\n)\n</code></pre> <p>Now you would have the following directory structure:</p> <pre><code>my_project/\n    google_search_agent/\n        __init__.py\n        agent.py\n    .env\n</code></pre>"},{"location":"grounding/google_search_grounding.en/#choose-a-platform","title":"3. Choose a platform","text":"<p>To run the agent, you need to select a platform that the agent will use for calling the Gemini model. Choose one from Google AI Studio or Vertex AI:</p> Gemini - Google AI StudioGemini - Google Cloud Vertex AI <ol> <li>Get an API key from Google AI Studio.</li> <li> <p>When using Python, open the <code>.env</code> file and copy-paste the following code.</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=FALSE\nGOOGLE_API_KEY=PASTE_YOUR_ACTUAL_API_KEY_HERE\n</code></pre> </li> <li> <p>Replace <code>PASTE_YOUR_ACTUAL_API_KEY_HERE</code> with your actual <code>API KEY</code>.</p> </li> </ol> <ol> <li>You need an existing Google Cloud account and a project.<ul> <li>Set up a   Google Cloud project</li> <li>Set up the   gcloud CLI</li> <li>Authenticate to Google Cloud, from the terminal by running   <code>gcloud auth login</code>.</li> <li>Enable the Vertex AI API.</li> </ul> </li> <li> <p>When using Python, open the <code>.env</code> file and copy-paste the following code and update the project ID and location.</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_CLOUD_PROJECT=YOUR_PROJECT_ID\nGOOGLE_CLOUD_LOCATION=LOCATION\n</code></pre> </li> </ol>"},{"location":"grounding/google_search_grounding.en/#run-your-agent","title":"4. Run Your Agent","text":"<p>There are multiple ways to interact with your agent:</p> Dev UI (adk web)Terminal (adk run) <p>Run the following command to launch the dev UI.</p> <pre><code>adk web\n</code></pre> <p>Note for Windows users</p> <p>When hitting the <code>_make_subprocess_transport NotImplementedError</code>, consider using <code>adk web --no-reload</code> instead.</p> <p>Step 1: Open the URL provided (usually <code>http://localhost:8000</code> or <code>http://127.0.0.1:8000</code>) directly in your browser.</p> <p>Step 2. In the top-left corner of the UI, you can select your agent in the dropdown. Select \"google_search_agent\".</p> <p>Troubleshooting</p> <p>If you do not see \"google_search_agent\" in the dropdown menu, make sure you are running <code>adk web</code> in the parent folder of your agent folder (i.e. the parent folder of google_search_agent).</p> <p>Step 3. Now you can chat with your agent using the textbox.</p> <p>Run the following command, to chat with your Weather agent.</p> <p><pre><code>adk run google_search_agent\n</code></pre> To exit, use Cmd/Ctrl+C.</p>"},{"location":"grounding/google_search_grounding.en/#example-prompts-to-try","title":"\ud83d\udcdd Example prompts to try","text":"<p>With those questions, you can confirm that the agent is actually calling Google Search to get the latest weather and time.</p> <ul> <li>What is the weather in New York?</li> <li>What is the time in New York?</li> <li>What is the weather in Paris?</li> <li>What is the time in Paris?</li> </ul> <p></p> <p>You've successfully created and interacted with your Google Search agent using ADK!</p>"},{"location":"grounding/google_search_grounding.en/#how-grounding-with-google-search-works","title":"How grounding with Google Search works","text":"<p>Grounding is the process that connects your agent to real-time information from the web, allowing it to generate more accurate and current responses. When a user's prompt requires information that the model was not trained on, or that is time-sensitive, the agent's underlying Large Language Model intelligently decides to invoke the google_search tool to find the relevant facts</p>"},{"location":"grounding/google_search_grounding.en/#data-flow-diagram","title":"Data Flow Diagram","text":"<p>This diagram illustrates the step-by-step process of how a user query results in a grounded response.</p> <p></p>"},{"location":"grounding/google_search_grounding.en/#detailed-description","title":"Detailed Description","text":"<p>The grounding agent uses the data flow described in the diagram to retrieve, process, and incorporate external information into the final answer presented to the user.</p> <ol> <li>User Query: An end-user interacts with your agent by asking a question or giving a command.  </li> <li>ADK Orchestration : The Agent Development Kit orchestrates the agent's behavior and passes the user's message to the core of your agent.  </li> <li>LLM Analysis and Tool-Calling : The agent's LLM (e.g., a Gemini model) analyzes the prompt. If it determines that external, up-to-date information is required, it triggers the grounding mechanism by calling the     google_search tool. This is ideal for answering queries about recent news, weather, or facts not present in the model's training data.  </li> <li>Grounding Service Interaction : The google_search tool interacts with an internal grounding service that formulates and sends one or more queries to the Google Search Index.  </li> <li>Context Injection: The grounding service retrieves the relevant web pages and snippets. It then integrates these search results into the model's context     before the final response is generated. This crucial step allows the model to \"reason\" over factual, real-time data.  </li> <li>Grounded Response Generation: The LLM, now informed by the fresh search results, generates a response that incorporates the retrieved information.  </li> <li>Response Presentation with Sources : The ADK receives the final grounded response, which includes the necessary source URLs and     groundingMetadata, and presents it to the user with attribution. This allows end-users to verify the information and builds trust in the agent's answers.</li> </ol>"},{"location":"grounding/google_search_grounding.en/#understanding-grounding-with-google-search-response","title":"Understanding grounding with Google Search response","text":"<p>When the agent uses Google Search to ground a response, it returns a detailed set of information that includes not only the final text answer but also the sources it used to generate that answer. This metadata is crucial for verifying the response and for providing attribution to the original sources.</p>"},{"location":"grounding/google_search_grounding.en/#example-of-a-grounded-response","title":"Example of a Grounded Response","text":"<p>The following is an example of the content object returned by the model after a grounded query.</p> <p>Final Answer Text:</p> <pre><code>\"Yes, Inter Miami won their last game in the FIFA Club World Cup. They defeated FC Porto 2-1 in their second group stage match. Their first game in the tournament was a 0-0 draw against Al Ahly FC. Inter Miami is scheduled to play their third group stage match against Palmeiras on Monday, June 23, 2025.\"\n</code></pre> <p>Grounding Metadata Snippet:</p> <pre><code>\"groundingMetadata\": {\n  \"groundingChunks\": [\n    { \"web\": { \"title\": \"mlssoccer.com\", \"uri\": \"...\" } },\n    { \"web\": { \"title\": \"intermiamicf.com\", \"uri\": \"...\" } },\n    { \"web\": { \"title\": \"mlssoccer.com\", \"uri\": \"...\" } }\n  ],\n  \"groundingSupports\": [\n    {\n      \"groundingChunkIndices\": [0, 1],\n      \"segment\": {\n        \"startIndex\": 65,\n        \"endIndex\": 126,\n        \"text\": \"They defeated FC Porto 2-1 in their second group stage match.\"\n      }\n    },\n    {\n      \"groundingChunkIndices\": [1],\n      \"segment\": {\n        \"startIndex\": 127,\n        \"endIndex\": 196,\n        \"text\": \"Their first game in the tournament was a 0-0 draw against Al Ahly FC.\"\n      }\n    },\n    {\n      \"groundingChunkIndices\": [0, 2],\n      \"segment\": {\n        \"startIndex\": 197,\n        \"endIndex\": 303,\n        \"text\": \"Inter Miami is scheduled to play their third group stage match against Palmeiras on Monday, June 23, 2025.\"\n      }\n    }\n  ],\n  \"searchEntryPoint\": { ... }\n}\n</code></pre>"},{"location":"grounding/google_search_grounding.en/#how-to-interpret-the-response","title":"How to Interpret the Response","text":"<p>The metadata provides a link between the text generated by the model and the sources that support it. Here is a step-by-step breakdown:</p> <ol> <li>groundingChunks: This is a list of the web pages the model consulted. Each chunk contains the title of the webpage and a uri that links to the source.  </li> <li>groundingSupports: This list connects specific sentences in the final answer back to the groundingChunks.  </li> <li>segment: This object identifies a specific portion of the final text answer, defined by its startIndex, endIndex, and the text itself.  </li> <li>groundingChunkIndices: This array contains the index numbers that correspond to the sources listed in the groundingChunks. For example, the sentence \"They defeated FC Porto 2-1...\" is supported by information from groundingChunks at index 0 and 1 (both from mlssoccer.com and intermiamicf.com).</li> </ol>"},{"location":"grounding/google_search_grounding.en/#how-to-display-grounding-responses-with-google-search","title":"How to display grounding responses with Google Search","text":"<p>A critical part of using grounding is to correctly display the information, including citations and search suggestions, to the end-user. This builds trust and allows users to verify the information.</p> <p></p>"},{"location":"grounding/google_search_grounding.en/#displaying-search-suggestions","title":"Displaying Search Suggestions","text":"<p>The <code>searchEntryPoint</code> object in the <code>groundingMetadata</code> contains pre-formatted HTML for displaying search query suggestions. As seen in the example image, these are typically rendered as clickable chips that allow the user to explore related topics.</p> <p>Rendered HTML from searchEntryPoint: The metadata provides the necessary HTML and CSS to render the search suggestions bar, which includes the Google logo and chips for related queries like \"When is the next FIFA Club World Cup\" and \"Inter Miami FIFA Club World Cup history\". Integrating this HTML directly into your application's front end will display the suggestions as intended.</p> <p>For more information, consult using Google Search Suggestions in Vertex AI documentation.</p>"},{"location":"grounding/google_search_grounding.en/#summary","title":"Summary","text":"<p>Google Search Grounding transforms AI agents from static knowledge repositories into dynamic, web-connected assistants capable of providing real-time, accurate information. By integrating this feature into your ADK agents, you enable them to:</p> <ul> <li>Access current information beyond their training data</li> <li>Provide source attribution for transparency and trust</li> <li>Deliver comprehensive answers with verifiable facts</li> <li>Enhance user experience with relevant search suggestions</li> </ul> <p>The grounding process seamlessly connects user queries to Google's vast search index, enriching responses with up-to-date context while maintaining the conversational flow. With proper implementation and display of grounded responses, your agents become powerful tools for information discovery and decision-making.</p>"},{"location":"grounding/google_search_grounding/","title":"\u7406\u89e3 Google Search \u77e5\u8b58\u63a5\u5730 (grounding)","text":"<p>Google Search Grounding \u5de5\u5177 \u662f Agent Development Kit (ADK) \u4e2d\u4e00\u9805\u5f37\u5927\u7684\u529f\u80fd\uff0c\u80fd\u8b93 AI agent \u53d6\u5f97\u4f86\u81ea\u7db2\u8def\u7684\u5373\u6642\u3001\u6b0a\u5a01\u8cc7\u8a0a\u3002\u900f\u904e\u5c07\u4f60\u7684 agent \u9023\u63a5\u5230 Google Search\uff0c\u4f60\u53ef\u4ee5\u70ba\u4f7f\u7528\u8005\u63d0\u4f9b\u4f86\u81ea\u53ef\u9760\u4f86\u6e90\u7684\u6700\u65b0\u7b54\u6848\u3002</p> <p>\u9019\u9805\u529f\u80fd\u5c0d\u65bc\u9700\u8981\u5373\u6642\u8cc7\u8a0a\u7684\u67e5\u8a62\u7279\u5225\u6709\u50f9\u503c\uff0c\u4f8b\u5982\u5929\u6c23\u66f4\u65b0\u3001\u65b0\u805e\u4e8b\u4ef6\u3001\u80a1\u50f9\uff0c\u6216\u662f\u4efb\u4f55\u81ea\u6a21\u578b\u8a13\u7df4\u8cc7\u6599\u622a\u6b62\u65e5\u5f8c\u53ef\u80fd\u5df2\u8b8a\u52d5\u7684\u4e8b\u5be6\u3002\u7576\u4f60\u7684 agent \u5224\u65b7\u9700\u8981\u5916\u90e8\u8cc7\u8a0a\u6642\uff0c\u6703\u81ea\u52d5\u57f7\u884c\u7db2\u8def\u641c\u5c0b\uff0c\u4e26\u5c07\u641c\u5c0b\u7d50\u679c\uff08\u542b\u6b63\u78ba\u51fa\u8655\uff09\u6574\u5408\u9032\u56de\u61c9\u4e2d\u3002</p>"},{"location":"grounding/google_search_grounding/#_1","title":"\u4f60\u5c07\u5b78\u5230\u4ec0\u9ebc","text":"<p>\u5728\u672c\u6307\u5357\u4e2d\uff0c\u4f60\u5c07\u5b78\u7fd2\u5230\uff1a</p> <ul> <li>\u5feb\u901f\u958b\u59cb\uff1a\u5982\u4f55\u5f9e\u96f6\u958b\u59cb\u5efa\u7acb\u4e26\u57f7\u884c\u652f\u63f4 Google Search \u7684 agent</li> <li>\u77e5\u8b58\u63a5\u5730\u67b6\u69cb\uff1a\u7db2\u8def\u77e5\u8b58\u63a5\u5730\u7684\u8cc7\u6599\u6d41\u7a0b\u8207\u6280\u8853\u539f\u7406</li> <li>\u56de\u61c9\u7d50\u69cb\uff1a\u5982\u4f55\u89e3\u8b80\u77e5\u8b58\u63a5\u5730\u56de\u61c9\u53ca\u5176\u4e2d\u7e7c\u8cc7\u6599</li> <li>\u6700\u4f73\u5be6\u8e10\uff1a\u5411\u4f7f\u7528\u8005\u986f\u793a\u641c\u5c0b\u7d50\u679c\u8207\u5f15\u7528\u4f86\u6e90\u7684\u5efa\u8b70\u6307\u5f15</li> </ul>"},{"location":"grounding/google_search_grounding/#_2","title":"\u5176\u4ed6\u8cc7\u6e90","text":"<p>\u4f5c\u70ba\u88dc\u5145\u8cc7\u6e90\uff0cGemini Fullstack Agent Development Kit (ADK) \u5feb\u901f\u958b\u59cb \u63d0\u4f9b\u4e86\u4e00\u500b\u5f88\u597d\u7684 Google Search \u77e5\u8b58\u63a5\u5730\u5be6\u4f5c\u7bc4\u4f8b\uff0c\u4f5c\u70ba\u5168\u7aef\u61c9\u7528\u7684\u5be6\u969b\u6848\u4f8b\u3002</p>"},{"location":"grounding/google_search_grounding/#google-search","title":"Google Search \u77e5\u8b58\u63a5\u5730\u5feb\u901f\u958b\u59cb","text":"<p>\u672c\u5feb\u901f\u958b\u59cb\u5c07\u5e36\u4f60\u5efa\u7acb\u4e00\u500b\u5177\u5099 Google Search \u77e5\u8b58\u63a5\u5730\u529f\u80fd\u7684 ADK agent\u3002\u672c\u5feb\u901f\u958b\u59cb\u5047\u8a2d\u4f60\u5df2\u5728\u672c\u6a5f IDE\uff08\u5982 VS Code \u6216 PyCharm \u7b49\uff09\u5b89\u88dd Python 3.9+ \u4e26\u53ef\u4f7f\u7528\u7d42\u7aef\u6a5f\u3002</p>"},{"location":"grounding/google_search_grounding/#set-up-environment-install-adk","title":"1. \u5efa\u7acb\u74b0\u5883\u4e26\u5b89\u88dd ADK","text":"<p>\u5efa\u7acb\u4e26\u555f\u7528\u865b\u64ec\u74b0\u5883\uff1a</p> <pre><code># Create\npython -m venv .venv\n\n# Activate (each new terminal)\n# macOS/Linux: source .venv/bin/activate\n# Windows CMD: .venv\\Scripts\\activate.bat\n# Windows PowerShell: .venv\\Scripts\\Activate.ps1\n</code></pre> <p>\u5b89\u88dd Agent Development Kit (ADK)\uff1a</p> <pre><code>pip install google-adk==1.4.2\n</code></pre>"},{"location":"grounding/google_search_grounding/#create-agent-project","title":"2. \u5efa\u7acb Agent \u5c08\u6848","text":"<p>\u5728\u5c08\u6848\u76ee\u9304\u4e0b\uff0c\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\uff1a</p> OS X &amp; LinuxWindows\uff08\u547d\u4ee4\u63d0\u793a\u5b57\u5143\uff09 <pre><code># Step 1: Create a new directory for your agent\nmkdir google_search_agent\n\n# Step 2: Create __init__.py for the agent\necho \"from . import agent\" &gt; google_search_agent/__init__.py\n\n# Step 3: Create an agent.py (the agent definition) and .env (Gemini authentication config)\ntouch google_search_agent/agent.py .env\n</code></pre> <pre><code># Step 1: Create a new directory for your agent\nmkdir google_search_agent\n\n# Step 2: Create __init__.py for the agent\necho \"from . import agent\" &gt; google_search_agent/__init__.py\n\n# Step 3: Create an agent.py (the agent definition) and .env (Gemini authentication config)\ntype nul &gt; google_search_agent\\agent.py \ntype nul &gt; google_search_agent\\.env\n</code></pre>"},{"location":"grounding/google_search_grounding/#agentpy","title":"\u7de8\u8f2f <code>agent.py</code>","text":"<p>\u8acb\u5c07\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u8907\u88fd\u4e26\u8cbc\u5230 <code>agent.py</code>\uff1a</p> google_search_agent/agent.py<pre><code>from google.adk.agents import Agent\nfrom google.adk.tools import google_search\n\nroot_agent = Agent(\n    name=\"google_search_agent\",\n    model=\"gemini-2.5-flash\",\n    instruction=\"Answer questions using Google Search when needed. Always cite sources.\",\n    description=\"Professional search assistant with Google Search capabilities\",\n    tools=[google_search]\n)\n</code></pre> <p>\u73fe\u5728\u4f60\u6703\u770b\u5230\u4ee5\u4e0b\u7684\u76ee\u9304\u7d50\u69cb\uff1a</p> <pre><code>my_project/\n    google_search_agent/\n        __init__.py\n        agent.py\n    .env\n</code></pre>"},{"location":"grounding/google_search_grounding/#choose-a-platform","title":"3. \u9078\u64c7\u5e73\u53f0","text":"<p>\u8981\u57f7\u884c agent\uff0c\u60a8\u9700\u8981\u9078\u64c7\u4e00\u500b agent \u7528\u4f86\u547c\u53eb Gemini \u6a21\u578b\u7684\u5e73\u53f0\u3002\u8acb\u5f9e Google AI Studio \u6216 Vertex AI \u4e2d\u64c7\u4e00\uff1a</p> Gemini - Google AI StudioGemini - Google Cloud Vertex AI <ol> <li>\u5f9e Google AI Studio \u53d6\u5f97 API KEY\u3002</li> <li> <p>\u82e5\u4f7f\u7528 Python\uff0c\u8acb\u958b\u555f <code>.env</code> \u6a94\u6848\u4e26\u8907\u88fd\u8cbc\u4e0a\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u3002</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=FALSE\nGOOGLE_API_KEY=PASTE_YOUR_ACTUAL_API_KEY_HERE\n</code></pre> </li> <li> <p>\u5c07 <code>PASTE_YOUR_ACTUAL_API_KEY_HERE</code> \u66ff\u63db\u70ba\u4f60\u5be6\u969b\u7684 <code>API KEY</code>\u3002</p> </li> </ol> <ol> <li>\u4f60\u9700\u8981\u4e00\u500b\u5df2\u5b58\u5728\u7684 Google Cloud \u5e33\u6236\u8207\u4e00\u500b\u5c08\u6848\u3002<ul> <li>\u5efa\u7acb\u4e00\u500b   Google Cloud \u5c08\u6848</li> <li>\u8a2d\u5b9a   gcloud \u547d\u4ee4\u5217\u4ecb\u9762 (Command Line Interface)</li> <li>\u5f9e\u7d42\u7aef\u6a5f\u57f7\u884c   <code>gcloud auth login</code>\uff0c\u4ee5\u9a57\u8b49 Google Cloud \u8eab\u5206\u3002</li> <li>\u555f\u7528 Vertex AI API\u3002</li> </ul> </li> <li> <p>\u82e5\u4f7f\u7528 Python\uff0c\u8acb\u958b\u555f <code>.env</code> \u6a94\u6848\uff0c\u8907\u88fd\u4e26\u8cbc\u4e0a\u4e0b\u5217\u7a0b\u5f0f\u78bc\uff0c\u4e26\u66f4\u65b0\u5c08\u6848 ID \u8207 Location\u3002</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_CLOUD_PROJECT=YOUR_PROJECT_ID\nGOOGLE_CLOUD_LOCATION=LOCATION\n</code></pre> </li> </ol>"},{"location":"grounding/google_search_grounding/#run-your-agent","title":"4. \u57f7\u884c\u4f60\u7684 agent","text":"<p>\u4f60\u53ef\u4ee5\u900f\u904e\u591a\u7a2e\u65b9\u5f0f\u8207\u4f60\u7684 agent \u4e92\u52d5\uff1a</p> Dev UI (adk web)\u7d42\u7aef\u6a5f\uff08adk run\uff09 <p>\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u4ee5\u555f\u52d5 dev UI\u3002</p> <pre><code>adk web\n</code></pre> <p>Note for Windows users</p> <p>When hitting the <code>_make_subprocess_transport NotImplementedError</code>, consider using <code>adk web --no-reload</code> instead.</p> <p>Step 1: Open the URL provided (usually <code>http://localhost:8000</code> or <code>http://127.0.0.1:8000</code>) directly in your browser.</p> <p>Step 2. In the top-left corner of the UI, you can select your agent in the dropdown. Select \"google_search_agent\".</p> <p>Troubleshooting</p> <p>If you do not see \"google_search_agent\" in the dropdown menu, make sure you are running <code>adk web</code> in the parent folder of your agent folder (i.e. the parent folder of google_search_agent).</p> <p>Step 3. Now you can chat with your agent using the textbox.</p> <p>Run the following command, to chat with your Weather agent.</p> <p><pre><code>adk run google_search_agent\n</code></pre> To exit, use Cmd/Ctrl+C.</p>"},{"location":"grounding/google_search_grounding/#prompts","title":"\ud83d\udcdd \u7bc4\u4f8b\u63d0\u793a\u8a9e\uff08prompts\uff09\u53ef\u4f9b\u5617\u8a66","text":"<p>\u900f\u904e\u9019\u4e9b\u554f\u984c\uff0c\u4f60\u53ef\u4ee5\u78ba\u8a8d agent \u662f\u5426\u771f\u7684\u547c\u53eb\u4e86 Google Search \u4f86\u53d6\u5f97\u6700\u65b0\u7684\u5929\u6c23\u8207\u6642\u9593\u8cc7\u8a0a\u3002</p> <ul> <li>\u7d10\u7d04\u7684\u5929\u6c23\u5982\u4f55\uff1f</li> <li>\u7d10\u7d04\u73fe\u5728\u5e7e\u9ede\uff1f</li> <li>\u5df4\u9ece\u7684\u5929\u6c23\u5982\u4f55\uff1f</li> <li>\u5df4\u9ece\u73fe\u5728\u5e7e\u9ede\uff1f</li> </ul> <p></p> <p>\u4f60\u5df2\u7d93\u6210\u529f\u4f7f\u7528 Agent Development Kit (ADK) \u5efa\u7acb\u4e26\u8207\u4f60\u7684 Google Search agent \u4e92\u52d5\uff01</p>"},{"location":"grounding/google_search_grounding/#google-search-grounding_1","title":"Google Search \u77e5\u8b58\u63a5\u5730\uff08grounding\uff09\u904b\u4f5c\u65b9\u5f0f","text":"<p>\u77e5\u8b58\u63a5\u5730\uff08grounding\uff09\u662f\u5c07\u4f60\u7684 agent \u9023\u7d50\u5230\u7db2\u8def\u4e0a\u7684\u5373\u6642\u8cc7\u8a0a\uff0c\u8b93\u5b83\u80fd\u7522\u751f\u66f4\u6e96\u78ba\u4e14\u6700\u65b0\u56de\u61c9\u7684\u904e\u7a0b\u3002\u7576\u4f7f\u7528\u8005\u7684\u63d0\u793a\u8a9e\u9700\u8981\u6a21\u578b\u8a13\u7df4\u6642\u672a\u6db5\u84cb\uff0c\u6216\u662f\u8207\u6642\u9593\u9ad8\u5ea6\u76f8\u95dc\u7684\u8cc7\u8a0a\u6642\uff0cagent \u5e95\u5c64\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (Large Language Model, LLM) \u6703\u667a\u6167\u5730\u6c7a\u5b9a\u662f\u5426\u547c\u53eb <code>google_search</code> \u5de5\u5177\u4f86\u67e5\u627e\u76f8\u95dc\u4e8b\u5be6\u3002</p>"},{"location":"grounding/google_search_grounding/#_3","title":"\u8cc7\u6599\u6d41\u7a0b\u5716","text":"<p>\u4e0b\u5716\u8aaa\u660e\u4e86\u4f7f\u7528\u8005\u67e5\u8a62\u5982\u4f55\u9010\u6b65\u7522\u751f\u77e5\u8b58\u63a5\u5730\u56de\u61c9\u7684\u6d41\u7a0b\u3002</p> <p></p>"},{"location":"grounding/google_search_grounding/#_4","title":"\u8a73\u7d30\u8aaa\u660e","text":"<p>\u77e5\u8b58\u63a5\u5730 agent \u6703\u4f9d\u64da\u5716\u4e2d\u7684\u8cc7\u6599\u6d41\u7a0b\uff0c\u64f7\u53d6\u3001\u8655\u7406\u4e26\u5c07\u5916\u90e8\u8cc7\u8a0a\u6574\u5408\u5230\u6700\u7d42\u5448\u73fe\u7d66\u4f7f\u7528\u8005\u7684\u7b54\u6848\u4e2d\u3002</p> <ol> <li>\u4f7f\u7528\u8005\u67e5\u8a62\uff1a\u7d42\u7aef\u4f7f\u7528\u8005\u900f\u904e\u63d0\u554f\u6216\u4e0b\u6307\u4ee4\u8207\u4f60\u7684 agent \u4e92\u52d5\u3002  </li> <li>ADK \u8abf\u5ea6\uff1aAgent Development Kit (ADK) \u8ca0\u8cac\u8abf\u5ea6 agent \u7684\u884c\u70ba\uff0c\u4e26\u5c07\u4f7f\u7528\u8005\u8a0a\u606f\u50b3\u905e\u7d66 agent \u6838\u5fc3\u3002  </li> <li>LLM \u5206\u6790\u8207\u5de5\u5177\u547c\u53eb\uff1aagent \u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM\uff0c\u4f8b\u5982 Gemini \u6a21\u578b) \u6703\u5206\u6790\u63d0\u793a\u8a9e\u3002\u5982\u679c\u5224\u65b7\u9700\u8981\u5916\u90e8\u4e14\u6700\u65b0\u7684\u8cc7\u8a0a\uff0c\u6703\u900f\u904e\u547c\u53eb <code>google_search</code> \u5de5\u5177\u4f86\u555f\u52d5\u77e5\u8b58\u63a5\u5730\u6a5f\u5236\u3002\u9019\u5c0d\u65bc\u56de\u7b54\u8fd1\u671f\u65b0\u805e\u3001\u5929\u6c23\u6216\u6a21\u578b\u8a13\u7df4\u8cc7\u6599\u4e2d\u672a\u5305\u542b\u7684\u4e8b\u5be6\u7279\u5225\u7406\u60f3\u3002  </li> <li>\u77e5\u8b58\u63a5\u5730\u670d\u52d9\u4e92\u52d5\uff1a<code>google_search</code> \u5de5\u5177\u6703\u8207\u5167\u90e8\u77e5\u8b58\u63a5\u5730\u670d\u52d9\u4e92\u52d5\uff0c\u8a72\u670d\u52d9\u6703\u7d44\u5408\u4e26\u767c\u9001\u4e00\u500b\u6216\u591a\u500b\u67e5\u8a62\u5230 Google Search \u7d22\u5f15\u3002  </li> <li>\u5167\u5bb9\u6ce8\u5165\uff1a\u77e5\u8b58\u63a5\u5730\u670d\u52d9\u6703\u64f7\u53d6\u76f8\u95dc\u7db2\u9801\u8207\u6458\u8981\uff0c\u7136\u5f8c\u5c07\u9019\u4e9b\u641c\u5c0b\u7d50\u679c\u6574\u5408\u5230\u6a21\u578b\u7684 context     \u4e2d\uff0c\u65bc\u7522\u751f\u6700\u7d42\u56de\u61c9\u524d\u5b8c\u6210\u3002\u9019\u500b\u95dc\u9375\u6b65\u9a5f\u8b93\u6a21\u578b\u80fd\u5920\u57fa\u65bc\u5373\u6642\u3001\u5177\u4e8b\u5be6\u6027\u7684\u8cc7\u6599\u9032\u884c\u300c\u63a8\u7406\u300d\u3002  </li> <li>\u77e5\u8b58\u63a5\u5730\u56de\u61c9\u7522\u751f\uff1aLLM \u53d6\u5f97\u6700\u65b0\u641c\u5c0b\u7d50\u679c\u5f8c\uff0c\u6703\u7522\u751f\u7d50\u5408\u64f7\u53d6\u8cc7\u8a0a\u7684\u56de\u61c9\u5167\u5bb9\u3002  </li> <li>\u5e36\u4f86\u6e90\u7684\u56de\u61c9\u5448\u73fe\uff1aADK \u6703\u63a5\u6536\u6700\u7d42\u7684\u77e5\u8b58\u63a5\u5730\u56de\u61c9\uff0c\u5176\u4e2d\u5305\u542b\u5fc5\u8981\u7684\u4f86\u6e90 URL \u53ca    groundingMetadata\uff0c\u4e26\u5c07\u5176\u5e36\u6709\u51fa\u8655\u5730\u5448\u73fe\u7d66\u4f7f\u7528\u8005\u3002\u9019\u8b93\u7d42\u7aef\u4f7f\u7528\u8005\u53ef\u4ee5\u9a57\u8b49\u8cc7\u8a0a\u4f86\u6e90\uff0c\u4e26\u63d0\u5347\u5c0d agent \u56de\u7b54\u7684\u4fe1\u4efb\u3002</li> </ol>"},{"location":"grounding/google_search_grounding/#google-search_1","title":"\u4e86\u89e3 Google Search \u77e5\u8b58\u63a5\u5730\u56de\u61c9","text":"<p>\u7576 agent \u4f7f\u7528 Google Search \u9032\u884c\u77e5\u8b58\u63a5\u5730\u6642\uff0c\u6703\u56de\u50b3\u4e00\u7d44\u8a73\u7d30\u8cc7\u8a0a\uff0c\u9664\u4e86\u6700\u7d42\u7684\u6587\u5b57\u7b54\u6848\u5916\uff0c\u9084\u5305\u542b\u7522\u751f\u8a72\u7b54\u6848\u6240\u7528\u7684\u4f86\u6e90\u3002\u9019\u4e9b\u4e2d\u7e7c\u8cc7\u6599\uff08metadata\uff09\u5c0d\u65bc\u9a57\u8b49\u56de\u61c9\u5167\u5bb9\u8207\u63d0\u4f9b\u539f\u59cb\u4f86\u6e90\u51fa\u8655\u81f3\u95dc\u91cd\u8981\u3002</p>"},{"location":"grounding/google_search_grounding/#_5","title":"\u77e5\u8b58\u63a5\u5730\u56de\u61c9\u7bc4\u4f8b","text":"<p>\u4ee5\u4e0b\u662f\u6a21\u578b\u5728\u77e5\u8b58\u63a5\u5730\u67e5\u8a62\u5f8c\u56de\u50b3\u7684 content \u7269\u4ef6\u7bc4\u4f8b\u3002</p> <p>\u6700\u7d42\u7b54\u6848\u6587\u5b57\uff1a</p> <pre><code>\"Yes, Inter Miami won their last game in the FIFA Club World Cup. They defeated FC Porto 2-1 in their second group stage match. Their first game in the tournament was a 0-0 draw against Al Ahly FC. Inter Miami is scheduled to play their third group stage match against Palmeiras on Monday, June 23, 2025.\"\n</code></pre> <p>\u77e5\u8b58\u63a5\u5730 (grounding) \u4e2d\u7e7c\u8cc7\u6599\u7247\u6bb5\uff1a</p> <pre><code>\"groundingMetadata\": {\n  \"groundingChunks\": [\n    { \"web\": { \"title\": \"mlssoccer.com\", \"uri\": \"...\" } },\n    { \"web\": { \"title\": \"intermiamicf.com\", \"uri\": \"...\" } },\n    { \"web\": { \"title\": \"mlssoccer.com\", \"uri\": \"...\" } }\n  ],\n  \"groundingSupports\": [\n    {\n      \"groundingChunkIndices\": [0, 1],\n      \"segment\": {\n        \"startIndex\": 65,\n        \"endIndex\": 126,\n        \"text\": \"They defeated FC Porto 2-1 in their second group stage match.\"\n      }\n    },\n    {\n      \"groundingChunkIndices\": [1],\n      \"segment\": {\n        \"startIndex\": 127,\n        \"endIndex\": 196,\n        \"text\": \"Their first game in the tournament was a 0-0 draw against Al Ahly FC.\"\n      }\n    },\n    {\n      \"groundingChunkIndices\": [0, 2],\n      \"segment\": {\n        \"startIndex\": 197,\n        \"endIndex\": 303,\n        \"text\": \"Inter Miami is scheduled to play their third group stage match against Palmeiras on Monday, June 23, 2025.\"\n      }\n    }\n  ],\n  \"searchEntryPoint\": { ... }\n}\n</code></pre>"},{"location":"grounding/google_search_grounding/#_6","title":"\u5982\u4f55\u89e3\u8b80\u56de\u61c9\u5167\u5bb9","text":"<p>metadata\uff08\u4e2d\u7e7c\u8cc7\u6599\uff09\u63d0\u4f9b\u4e86\u6a21\u578b\u751f\u6210\u6587\u5b57\u8207\u5176\u6240\u4f9d\u64da\u4f86\u6e90\u4e4b\u9593\u7684\u9023\u7d50\u3002\u4ee5\u4e0b\u662f\u9010\u6b65\u8aaa\u660e\uff1a</p> <ol> <li>groundingChunks\uff1a\u9019\u662f\u4e00\u500b\u6a21\u578b\u6240\u53c3\u8003\u7db2\u9801\u7684\u6e05\u55ae\u3002\u6bcf\u500b chunk \u5305\u542b\u7db2\u9801\u6a19\u984c\uff08title\uff09\u4ee5\u53ca\u6307\u5411\u4f86\u6e90\u7684 uri\u3002  </li> <li>groundingSupports\uff1a\u9019\u500b\u6e05\u55ae\u5c07\u6700\u7d42\u7b54\u6848\u4e2d\u7684\u7279\u5b9a\u53e5\u5b50\u5c0d\u61c9\u56de groundingChunks\u3002  </li> <li>segment\uff1a\u6b64\u7269\u4ef6\u6a19\u8b58\u6700\u7d42\u6587\u5b57\u7b54\u6848\u4e2d\u7684\u7279\u5b9a\u7247\u6bb5\uff0c\u7531 startIndex\u3001endIndex \u53ca\u8a72\u6bb5\u6587\u5b57\u7d44\u6210\u3002  </li> <li>groundingChunkIndices\uff1a\u9019\u500b\u9663\u5217\u5305\u542b\u5c0d\u61c9\u65bc groundingChunks \u6e05\u55ae\u4e2d\u4f86\u6e90\u7684\u7d22\u5f15\u865f\u3002\u4f8b\u5982\uff0c\u53e5\u5b50 \"They defeated FC Porto 2-1...\" \u662f\u7531 groundingChunks \u4e2d\u7d22\u5f15 0 \u548c 1\uff08\u5206\u5225\u4f86\u81ea mlssoccer.com \u548c intermiamicf.com\uff09\u7684\u8cc7\u8a0a\u6240\u652f\u6301\u3002</li> </ol>"},{"location":"grounding/google_search_grounding/#google-search-grounding_2","title":"\u5982\u4f55\u4ee5 Google Search \u5448\u73fe\u77e5\u8b58\u63a5\u5730\uff08grounding\uff09\u56de\u61c9","text":"<p>\u6b63\u78ba\u5730\u5c07\u8cc7\u8a0a\uff08\u5305\u542b\u5f15\u7528\u4f86\u6e90\u8207 Search \u5efa\u8b70\uff09\u5c55\u793a\u7d66\u6700\u7d42\u4f7f\u7528\u8005\uff0c\u662f\u4f7f\u7528\u77e5\u8b58\u63a5\u5730\uff08grounding\uff09\u7684\u95dc\u9375\u4e00\u74b0\u3002\u9019\u80fd\u5efa\u7acb\u4fe1\u4efb\uff0c\u4e26\u8b93\u4f7f\u7528\u8005\u81ea\u884c\u9a57\u8b49\u8cc7\u8a0a\u3002</p> <p></p>"},{"location":"grounding/google_search_grounding/#search","title":"\u986f\u793a Search \u5efa\u8b70","text":"<p><code>groundingMetadata</code> \u4e2d\u7684 <code>searchEntryPoint</code> \u7269\u4ef6\u5305\u542b\u4e86\u7528\u65bc\u986f\u793a\u641c\u5c0b\u67e5\u8a62\u5efa\u8b70\u7684\u9810\u5148\u683c\u5f0f\u5316 HTML\u3002\u5982\u7bc4\u4f8b\u5716\u7247\u6240\u793a\uff0c\u9019\u4e9b\u5efa\u8b70\u901a\u5e38\u6703\u4ee5\u53ef\u9ede\u64ca\u7684 chip \u5448\u73fe\uff0c\u8b93\u4f7f\u7528\u8005\u63a2\u7d22\u76f8\u95dc\u4e3b\u984c\u3002</p> <p>\u4f86\u81ea searchEntryPoint \u7684\u6e32\u67d3 HTML\uff1a metadata \u63d0\u4f9b\u4e86\u6e32\u67d3 Search \u5efa\u8b70\u5217\u6240\u9700\u7684 HTML \u8207 CSS\uff0c\u5176\u4e2d\u5305\u542b Google \u6a19\u8a8c\uff0c\u4ee5\u53ca\u5982\u300cWhen is the next FIFA Club World Cup\u300d\u3001\u300cInter Miami FIFA Club World Cup history\u300d\u7b49\u76f8\u95dc\u67e5\u8a62\u7684 chip\u3002\u5c07\u9019\u6bb5 HTML \u76f4\u63a5\u6574\u5408\u81f3\u61c9\u7528\u7a0b\u5f0f\u524d\u7aef\uff0c\u5373\u53ef\u5982\u9810\u671f\u986f\u793a\u9019\u4e9b\u5efa\u8b70\u3002</p> <p>\u5982\u9700\u66f4\u591a\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 Vertex AI \u6587\u4ef6\u4e2d\u7684 using Google Search Suggestions\u3002</p>"},{"location":"grounding/google_search_grounding/#_7","title":"\u6458\u8981","text":"<p>Google Search Grounding \u8b93 AI agent \u5f9e\u975c\u614b\u77e5\u8b58\u5eab\uff0c\u8f49\u8b8a\u70ba\u80fd\u5920\u5373\u6642\u9023\u7db2\u3001\u63d0\u4f9b\u6e96\u78ba\u8cc7\u8a0a\u7684\u667a\u6167\u52a9\u7406\u3002\u5c07\u6b64\u529f\u80fd\u6574\u5408\u81f3\u60a8\u7684 Agent Development Kit (ADK) agent\uff0c\u53ef\u8b93\u5176\uff1a</p> <ul> <li>\u5b58\u53d6\u8a13\u7df4\u8cc7\u6599\u4ee5\u5916\u7684\u6700\u65b0\u8cc7\u8a0a</li> <li>\u63d0\u4f9b\u4f86\u6e90\u6a19\u8a3b\uff0c\u63d0\u5347\u900f\u660e\u5ea6\u8207\u4fe1\u4efb\u611f</li> <li>\u56de\u7b54\u5167\u5bb9\u8a73\u76e1\u4e14\u53ef\u9a57\u8b49</li> <li>\u900f\u904e\u76f8\u95dc Search \u5efa\u8b70\u63d0\u5347\u4f7f\u7528\u8005\u9ad4\u9a57</li> </ul> <p>\u77e5\u8b58\u63a5\u5730\uff08grounding\uff09\u6d41\u7a0b\u80fd\u7121\u7e2b\u5730\u5c07\u4f7f\u7528\u8005\u67e5\u8a62\u9023\u7d50\u81f3 Google \u7684\u9f90\u5927\u641c\u5c0b\u7d22\u5f15\uff0c\u8b93\u56de\u61c9\u5167\u5bb9\u5177\u5099\u6700\u65b0\u8108\u7d61\uff0c\u540c\u6642\u7dad\u6301\u5c0d\u8a71\u6d41\u66a2\u3002\u53ea\u8981\u6b63\u78ba\u5be6\u4f5c\u4e26\u5448\u73fe\u77e5\u8b58\u63a5\u5730\u56de\u61c9\uff0c\u60a8\u7684 agent \u5c31\u80fd\u6210\u70ba\u5f37\u5927\u7684\u8cc7\u8a0a\u63a2\u7d22\u8207\u6c7a\u7b56\u8f14\u52a9\u5de5\u5177\u3002</p>"},{"location":"grounding/vertex_ai_search_grounding.en/","title":"Understanding Vertex AI Search Grounding","text":"<p>Vertex AI Search Grounding tool is a powerful feature in the Agent Development Kit (ADK) that enables AI agents to access information from your private enterprise documents and data repositories. By connecting your agents to indexed enterprise content, you can provide users with answers grounded in your organization's knowledge base.</p> <p>This feature is particularly valuable for enterprise-specific queries requiring information from internal documentation, policies, research papers, or any proprietary content that has been indexed in your Vertex AI Search datastore. When your agent determines that information from your knowledge base is needed, it automatically searches your indexed documents and incorporates the results into its response with proper attribution.</p>"},{"location":"grounding/vertex_ai_search_grounding.en/#what-youll-learn","title":"What You'll Learn","text":"<p>In this guide, you'll discover:</p> <ul> <li>Quick Setup: How to create and run a Vertex AI Search-enabled agent from scratch</li> <li>Grounding Architecture: The data flow and technical process behind enterprise document grounding</li> <li>Response Structure: How to interpret grounded responses and their metadata</li> <li>Best Practices: Guidelines for displaying citations and document references to users</li> </ul>"},{"location":"grounding/vertex_ai_search_grounding.en/#vertex-ai-search-grounding-quickstart","title":"Vertex AI Search Grounding Quickstart","text":"<p>This quickstart guides you through creating an ADK agent with Vertex AI Search grounding feature. This quickstart assumes a local IDE (VS Code or PyCharm, etc.) with Python 3.9+ and terminal access.</p>"},{"location":"grounding/vertex_ai_search_grounding.en/#prepare-vertex-ai-search","title":"1. Prepare Vertex AI Search","text":"<p>If you already have a Vertex AI Search Data Store and its Data Store ID, you can skip this section. If not, follow the instruction in the Get started with custom search until the end of Create a data store, with selecting the <code>Unstructured data</code> tab. With this instruction, you will build a sample Data Store with earning report PDFs from the Alphabet investor site.</p> <p>After finishing the Create a data store section, open the Data Stores and select the data store you created, and find the <code>Data store ID</code>:</p> <p></p> <p>Note this <code>Data store ID</code> as we will use this later.</p>"},{"location":"grounding/vertex_ai_search_grounding.en/#set-up-environment-install-adk","title":"2. Set up Environment &amp; Install ADK","text":"<p>Create &amp; Activate Virtual Environment:</p> <pre><code># Create\npython -m venv .venv\n\n# Activate (each new terminal)\n# macOS/Linux: source .venv/bin/activate\n# Windows CMD: .venv\\Scripts\\activate.bat\n# Windows PowerShell: .venv\\Scripts\\Activate.ps1\n</code></pre> <p>Install ADK:</p> <pre><code>pip install google-adk==1.5.0\n</code></pre>"},{"location":"grounding/vertex_ai_search_grounding.en/#create-agent-project","title":"3. Create Agent Project","text":"<p>Under a project directory, run the following commands:</p> OS X &amp; LinuxWindows <pre><code># Step 1: Create a new directory for your agent\nmkdir vertex_search_agent\n\n# Step 2: Create __init__.py for the agent\necho \"from . import agent\" &gt; vertex_search_agent/__init__.py\n\n# Step 3: Create an agent.py (the agent definition) and .env (authentication config)\ntouch vertex_search_agent/agent.py .env\n</code></pre> <pre><code># Step 1: Create a new directory for your agent\nmkdir vertex_search_agent\n\n# Step 2: Create __init__.py for the agent\necho \"from . import agent\" &gt; vertex_search_agent/__init__.py\n\n# Step 3: Create an agent.py (the agent definition) and .env (authentication config)\ntype nul &gt; vertex_search_agent\\agent.py \ntype nul &gt; google_search_agent\\.env\n</code></pre>"},{"location":"grounding/vertex_ai_search_grounding.en/#edit-agentpy","title":"Edit <code>agent.py</code>","text":"<p>Copy and paste the following code into <code>agent.py</code>, and replace <code>YOUR_PROJECT_ID</code> and <code>YOUR_DATASTORE_ID</code> at the <code>Configuration</code> part with your project ID and Data Store ID accordingly:</p> vertex_search_agent/agent.py<pre><code>from google.adk.agents import Agent\nfrom google.adk.tools import VertexAiSearchTool\n\n# Configuration\nDATASTORE_ID = \"projects/YOUR_PROJECT_ID/locations/global/collections/default_collection/dataStores/YOUR_DATASTORE_ID\"\n\nroot_agent = Agent(\n    name=\"vertex_search_agent\",\n    model=\"gemini-2.5-flash\",\n    instruction=\"Answer questions using Vertex AI Search to find information from internal documents. Always cite sources when available.\",\n    description=\"Enterprise document search assistant with Vertex AI Search capabilities\",\n    tools=[VertexAiSearchTool(data_store_id=DATASTORE_ID)]\n)\n</code></pre> <p>Now you would have the following directory structure:</p> <pre><code>my_project/\n    vertex_search_agent/\n        __init__.py\n        agent.py\n    .env\n</code></pre>"},{"location":"grounding/vertex_ai_search_grounding.en/#authentication-setup","title":"4. Authentication Setup","text":"<p>Note: Vertex AI Search requires Google Cloud Platform (Vertex AI) authentication. Google AI Studio is not supported for this tool.</p> <ul> <li>Set up the gcloud CLI</li> <li>Authenticate to Google Cloud, from the terminal by running <code>gcloud auth login</code>.</li> <li> <p>Open the <code>.env</code> file and copy-paste the following code and update the project ID and location.</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_CLOUD_PROJECT=YOUR_PROJECT_ID\nGOOGLE_CLOUD_LOCATION=LOCATION\n</code></pre> </li> </ul>"},{"location":"grounding/vertex_ai_search_grounding.en/#run-your-agent","title":"5. Run Your Agent","text":"<p>There are multiple ways to interact with your agent:</p> Dev UI (adk web)Terminal (adk run) <p>Run the following command to launch the dev UI.</p> <pre><code>adk web\n</code></pre> <p>Note for Windows users</p> <p>When hitting the <code>_make_subprocess_transport NotImplementedError</code>, consider using <code>adk web --no-reload</code> instead.</p> <p>Step 1: Open the URL provided (usually <code>http://localhost:8000</code> or <code>http://127.0.0.1:8000</code>) directly in your browser.</p> <p>Step 2. In the top-left corner of the UI, you can select your agent in the dropdown. Select \"vertex_search_agent\".</p> <p>Troubleshooting</p> <p>If you do not see \"vertex_search_agent\" in the dropdown menu, make sure you are running <code>adk web</code> in the parent folder of your agent folder (i.e. the parent folder of vertex_search_agent).</p> <p>Step 3. Now you can chat with your agent using the textbox.</p> <p>Run the following command, to chat with your Vertex AI Search agent.</p> <p><pre><code>adk run vertex_search_agent\n</code></pre> To exit, use Cmd/Ctrl+C.</p>"},{"location":"grounding/vertex_ai_search_grounding.en/#example-prompts-to-try","title":"\ud83d\udcdd Example prompts to try","text":"<p>With those questions, you can confirm that the agent is actually calling Vertex AI Search to get information from the Alphabet reports:</p> <ul> <li>What is the revenue of Google Cloud in 2022 Q1?</li> <li>What about YouTube?</li> </ul> <p></p> <p>You've successfully created and interacted with your Vertex AI Search agent using ADK!</p>"},{"location":"grounding/vertex_ai_search_grounding.en/#how-grounding-with-vertex-ai-search-works","title":"How grounding with Vertex AI Search works","text":"<p>Grounding with Vertex AI Search is the process that connects your agent to your organization's indexed documents and data, allowing it to generate accurate responses based on private enterprise content. When a user's prompt requires information from your internal knowledge base, the agent's underlying LLM intelligently decides to invoke the <code>VertexAiSearchTool</code> to find relevant facts from your indexed documents.</p>"},{"location":"grounding/vertex_ai_search_grounding.en/#data-flow-diagram","title":"Data Flow Diagram","text":"<p>This diagram illustrates the step-by-step process of how a user query results in a grounded response.</p> <p></p>"},{"location":"grounding/vertex_ai_search_grounding.en/#detailed-description","title":"Detailed Description","text":"<p>The grounding agent uses the data flow described in the diagram to retrieve, process, and incorporate enterprise information into the final answer presented to the user.</p> <ol> <li> <p>User Query: An end-user interacts with your agent by asking a question about internal documents or enterprise data.</p> </li> <li> <p>ADK Orchestration: The Agent Development Kit orchestrates the agent's behavior and passes the user's message to the core of your agent.</p> </li> <li> <p>LLM Analysis and Tool-Calling: The agent's LLM (e.g., a Gemini model) analyzes the prompt. If it determines that information from your indexed documents is required, it triggers the grounding mechanism by calling the VertexAiSearchTool. This is ideal for answering queries about company policies, technical documentation, or proprietary research.</p> </li> <li> <p>Vertex AI Search Service Interaction: The VertexAiSearchTool interacts with your configured Vertex AI Search datastore, which contains your indexed enterprise documents. The service formulates and executes search queries against your private content.</p> </li> <li> <p>Document Retrieval &amp; Ranking: Vertex AI Search retrieves and ranks the most relevant document chunks from your datastore based on semantic similarity and relevance scoring.</p> </li> <li> <p>Context Injection: The search service integrates the retrieved document snippets into the model's context before the final response is generated. This crucial step allows the model to \"reason\" over your organization's factual data.</p> </li> <li> <p>Grounded Response Generation: The LLM, now informed by relevant enterprise content, generates a response that incorporates the retrieved information from your documents.</p> </li> <li> <p>Response Presentation with Sources: The ADK receives the final grounded response, which includes the necessary source document references and groundingMetadata, and presents it to the user with attribution. This allows end-users to verify the information against your enterprise sources.</p> </li> </ol>"},{"location":"grounding/vertex_ai_search_grounding.en/#understanding-grounding-with-vertex-ai-search-response","title":"Understanding grounding with Vertex AI Search response","text":"<p>When the agent uses Vertex AI Search to ground a response, it returns detailed information that includes the final text answer and metadata about the documents used to generate that answer. This metadata is crucial for verifying the response and providing attribution to your enterprise sources.</p>"},{"location":"grounding/vertex_ai_search_grounding.en/#example-of-a-grounded-response","title":"Example of a Grounded Response","text":"<p>The following is an example of the content object returned by the model after a grounded query against enterprise documents.</p> <p>Final Answer Text:</p> <pre><code>\"Developing models for a medical scribe presents several significant challenges, primarily due to the complex nature of medical documentation, the sensitive data involved, and the demanding requirements of clinical workflows. Key challenges include: **Accuracy and Reliability:** Medical documentation requires extremely high levels of accuracy, as errors can lead to misdiagnoses, incorrect treatments, and legal repercussions. Ensuring that AI models can reliably capture nuanced medical language, distinguish between subjective and objective information, and accurately transcribe physician-patient interactions is a major hurdle. **Natural Language Understanding (NLU) and Speech Recognition:** Medical conversations are often rapid, involve highly specialized jargon, acronyms, and abbreviations, and can be spoken by individuals with diverse accents or speech patterns... [response continues with detailed analysis of privacy, integration, and technical challenges]\"\n</code></pre> <p>Grounding Metadata Snippet:</p> <p>This is the grounding metadata you will receive. On <code>adk web</code>, you can find this on the <code>Response</code> tab:</p> <pre><code>{\n  \"groundingMetadata\": {\n    \"groundingChunks\": [\n      {\n        \"document\": {\n          \"title\": \"AI in Medical Scribing: Technical Challenges\",\n          \"uri\": \"projects/your-project/locations/global/dataStores/your-datastore-id/documents/doc-medical-scribe-ai-tech-challenges\",\n          \"id\": \"doc-medical-scribe-ai-tech-challenges\"\n        }\n      },\n      {\n        \"document\": {\n          \"title\": \"Regulatory and Ethical Hurdles for AI in Healthcare\",\n          \"uri\": \"projects/your-project/locations/global/dataStores/your-datastore-id/documents/doc-ai-healthcare-ethics\",\n          \"id\": \"doc-ai-healthcare-ethics\"\n        }\n      }\n      // ... additional documents\n    ],\n    \"groundingSupports\": [\n      {\n        \"groundingChunkIndices\": [0, 1],\n        \"segment\": {\n          \"endIndex\": 637,\n          \"startIndex\": 433,\n          \"text\": \"Ensuring that AI models can reliably capture nuanced medical language...\"\n        }\n      }\n      // ... additional supports linking text segments to source documents\n    ],\n    \"retrievalQueries\": [\n      \"challenges in natural language processing medical domain\",\n      \"AI medical scribe challenges\",\n      \"difficulties in developing AI for medical scribes\"\n      // ... additional search queries executed\n    ]\n  }\n}\n</code></pre>"},{"location":"grounding/vertex_ai_search_grounding.en/#how-to-interpret-the-response","title":"How to Interpret the Response","text":"<p>The metadata provides a link between the text generated by the model and the enterprise documents that support it. Here is a step-by-step breakdown:</p> <ul> <li> <p>groundingChunks: This is a list of the enterprise documents the model consulted. Each chunk contains the document title, uri (document path), and id.</p> </li> <li> <p>groundingSupports: This list connects specific sentences in the final answer back to the <code>groundingChunks</code>.</p> </li> <li> <p>segment: This object identifies a specific portion of the final text answer, defined by its <code>startIndex</code>, <code>endIndex</code>, and the <code>text</code> itself.</p> </li> <li> <p>groundingChunkIndices: This array contains the index numbers that correspond to the sources listed in the <code>groundingChunks</code>. For example, the text about \"HIPAA compliance\" is supported by information from <code>groundingChunks</code> at index 1 (the \"Regulatory and Ethical Hurdles\" document).</p> </li> <li> <p>retrievalQueries: This array shows the specific search queries that were executed against your datastore to find relevant information.</p> </li> </ul>"},{"location":"grounding/vertex_ai_search_grounding.en/#how-to-display-grounding-responses-with-vertex-ai-search","title":"How to display grounding responses with Vertex AI Search","text":"<p>Unlike Google Search grounding, Vertex AI Search grounding does not require specific display components. However, displaying citations and document references builds trust and allows users to verify information against your organization's authoritative sources.</p>"},{"location":"grounding/vertex_ai_search_grounding.en/#optional-citation-display","title":"Optional Citation Display","text":"<p>Since grounding metadata is provided, you can choose to implement citation displays based on your application needs:</p> <p>Simple Text Display (Minimal Implementation):</p> <pre><code>for event in events:\n    if event.is_final_response():\n        print(event.content.parts[0].text)\n\n        # Optional: Show source count\n        if event.grounding_metadata:\n            print(f\"\\nBased on {len(event.grounding_metadata.grounding_chunks)} documents\")\n</code></pre> <p>Enhanced Citation Display (Optional): You can implement interactive citations that show which documents support each statement. The grounding metadata provides all necessary information to map text segments to source documents.</p>"},{"location":"grounding/vertex_ai_search_grounding.en/#implementation-considerations","title":"Implementation Considerations","text":"<p>When implementing Vertex AI Search grounding displays:</p> <ol> <li>Document Access: Verify user permissions for referenced documents</li> <li>Simple Integration: Basic text output requires no additional display logic</li> <li>Optional Enhancements: Add citations only if your use case benefits from source attribution</li> <li>Document Links: Convert document URIs to accessible internal links when needed</li> <li>Search Queries: The retrievalQueries array shows what searches were performed against your datastore</li> </ol>"},{"location":"grounding/vertex_ai_search_grounding.en/#summary","title":"Summary","text":"<p>Vertex AI Search Grounding transforms AI agents from general-purpose assistants into enterprise-specific knowledge systems capable of providing accurate, source-attributed information from your organization's private documents. By integrating this feature into your ADK agents, you enable them to:</p> <ul> <li>Access proprietary information from your indexed document repositories</li> <li>Provide source attribution for transparency and trust</li> <li>Deliver comprehensive answers with verifiable enterprise facts</li> <li>Maintain data privacy within your Google Cloud environment</li> </ul> <p>The grounding process seamlessly connects user queries to your organization's knowledge base, enriching responses with relevant context from your private documents while maintaining the conversational flow. With proper implementation, your agents become powerful tools for enterprise information discovery and decision-making.</p>"},{"location":"grounding/vertex_ai_search_grounding/","title":"\u8a8d\u8b58 Vertex AI Search \u77e5\u8b58\u63a5\u5730 (grounding)","text":"<p>Vertex AI Search Grounding \u5de5\u5177 \u662f Agent Development Kit (ADK) \u4e2d\u7684\u4e00\u9805\u5f37\u5927\u529f\u80fd\uff0c\u53ef\u8b93 AI agent \u5b58\u53d6\u60a8\u4f01\u696d\u5167\u90e8\u6587\u4ef6\u8207\u8cc7\u6599\u5eab\u4e2d\u7684\u8cc7\u8a0a\u3002\u900f\u904e\u5c07 agent \u9023\u63a5\u5230\u5df2\u5efa\u7acb\u7d22\u5f15\u7684\u4f01\u696d\u5167\u5bb9\uff0c\u60a8\u53ef\u4ee5\u70ba\u4f7f\u7528\u8005\u63d0\u4f9b\u4ee5\u7d44\u7e54\u77e5\u8b58\u5eab\u70ba\u57fa\u790e\u7684\u7b54\u6848\u3002</p> <p>\u9019\u9805\u529f\u80fd\u7279\u5225\u9069\u7528\u65bc\u9700\u8981\u67e5\u8a62\u5167\u90e8\u6587\u4ef6\u3001\u653f\u7b56\u3001\u7814\u7a76\u8ad6\u6587\u6216\u4efb\u4f55\u5df2\u5728 Vertex AI Search \u8cc7\u6599\u5132\u5b58\u5340\u5efa\u7acb\u7d22\u5f15\u7684\u5c08\u6709\u5167\u5bb9\u7684\u4f01\u696d\u5c08\u5c6c\u554f\u984c\u3002\u7576\u60a8\u7684 agent \u5224\u65b7\u9700\u8981\u4f86\u81ea\u77e5\u8b58\u5eab\u7684\u8cc7\u8a0a\u6642\uff0c\u6703\u81ea\u52d5\u641c\u5c0b\u5df2\u5efa\u7acb\u7d22\u5f15\u7684\u6587\u4ef6\uff0c\u4e26\u5c07\u641c\u5c0b\u7d50\u679c\u7d0d\u5165\u56de\u61c9\u4e2d\uff0c\u4e26\u6b63\u78ba\u6a19\u8a3b\u4f86\u6e90\u3002</p>"},{"location":"grounding/vertex_ai_search_grounding/#_1","title":"\u60a8\u5c07\u5b78\u5230\u4ec0\u9ebc","text":"<p>\u5728\u672c\u6307\u5357\u4e2d\uff0c\u60a8\u5c07\u4e86\u89e3\uff1a</p> <ul> <li>\u5feb\u901f\u958b\u59cb\uff1a\u5982\u4f55\u5f9e\u96f6\u958b\u59cb\u5efa\u7acb\u4e26\u57f7\u884c\u652f\u63f4 Vertex AI Search \u7684 agent</li> <li>\u77e5\u8b58\u63a5\u5730\u67b6\u69cb\uff1a\u4f01\u696d\u6587\u4ef6\u77e5\u8b58\u63a5\u5730\u7684\u8cc7\u6599\u6d41\u7a0b\u8207\u6280\u8853\u7d30\u7bc0</li> <li>\u56de\u61c9\u7d50\u69cb\uff1a\u5982\u4f55\u89e3\u8b80\u77e5\u8b58\u63a5\u5730\u56de\u61c9\u53ca\u5176\u4e2d\u7e7c\u8cc7\u6599</li> <li>\u6700\u4f73\u5be6\u8e10\uff1a\u5411\u4f7f\u7528\u8005\u986f\u793a\u5f15\u7528\u8207\u6587\u4ef6\u53c3\u8003\u7684\u6307\u5f15</li> </ul>"},{"location":"grounding/vertex_ai_search_grounding/#vertex-ai-search","title":"Vertex AI Search \u77e5\u8b58\u63a5\u5730\u5feb\u901f\u958b\u59cb","text":"<p>\u672c\u5feb\u901f\u958b\u59cb\u5c07\u5f15\u5c0e\u60a8\u5efa\u7acb\u4e00\u500b\u5177\u5099 Vertex AI Search \u77e5\u8b58\u63a5\u5730\u529f\u80fd\u7684 ADK agent\u3002\u672c\u5feb\u901f\u958b\u59cb\u5047\u8a2d\u60a8\u5df2\u5728\u672c\u6a5f IDE\uff08\u5982 VS Code \u6216 PyCharm \u7b49\uff09\u5b89\u88dd Python 3.9 \u4ee5\u4e0a\u7248\u672c\uff0c\u4e26\u53ef\u4f7f\u7528\u7d42\u7aef\u6a5f\u3002</p>"},{"location":"grounding/vertex_ai_search_grounding/#prepare-vertex-ai-search","title":"1. \u6e96\u5099 Vertex AI Search","text":"<p>\u5982\u679c\u60a8\u5df2\u7d93\u6709 Vertex AI Search \u8cc7\u6599\u5132\u5b58\u5340\u53ca\u5176\u8cc7\u6599\u5132\u5b58\u5340 ID\uff0c\u53ef\u4ee5\u8df3\u904e\u672c\u7bc0\u3002\u82e5\u5c1a\u672a\u5efa\u7acb\uff0c\u8acb\u4f9d\u7167 Get started with custom search \u7684\u6307\u793a\u64cd\u4f5c\uff0c\u76f4\u5230 Create a data store \u7d50\u675f\uff0c\u4e26\u9078\u64c7 <code>Unstructured data</code> \u5206\u9801\u3002\u4f9d\u7167\u9019\u4e9b\u6307\u793a\uff0c\u60a8\u5c07\u4ee5 Alphabet investor site \u7684\u8ca1\u5831 PDF \u5efa\u7acb\u4e00\u500b\u7bc4\u4f8b\u8cc7\u6599\u5132\u5b58\u5340\u3002</p> <p>\u5b8c\u6210 Create a data store \u6b65\u9a5f\u5f8c\uff0c\u8acb\u958b\u555f Data Stores\uff0c\u9078\u64c7\u60a8\u5efa\u7acb\u7684\u8cc7\u6599\u5132\u5b58\u5340\uff0c\u4e26\u627e\u5230 <code>Data store ID</code>\uff1a</p> <p></p> <p>\u8acb\u8a18\u4e0b\u6b64 <code>Data store ID</code>\uff0c\u7a0d\u5f8c\u6703\u7528\u5230\u3002</p>"},{"location":"grounding/vertex_ai_search_grounding/#set-up-environment-install-adk","title":"2. \u8a2d\u5b9a\u74b0\u5883\u4e26\u5b89\u88dd ADK","text":"<p>\u5efa\u7acb\u4e26\u555f\u7528\u865b\u64ec\u74b0\u5883\uff1a</p> <pre><code># Create\npython -m venv .venv\n\n# Activate (each new terminal)\n# macOS/Linux: source .venv/bin/activate\n# Windows CMD: .venv\\Scripts\\activate.bat\n# Windows PowerShell: .venv\\Scripts\\Activate.ps1\n</code></pre> <p>\u5b89\u88dd Agent Development Kit (ADK)\uff1a</p> <pre><code>pip install google-adk==1.5.0\n</code></pre>"},{"location":"grounding/vertex_ai_search_grounding/#create-agent-project","title":"3. \u5efa\u7acb Agent \u5c08\u6848","text":"<p>\u5728\u5c08\u6848\u76ee\u9304\u4e0b\uff0c\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\uff1a</p> OS X &amp; Linux <pre><code># Step 1: Create a new directory for your agent\nmkdir vertex_search_agent\n\n# Step 2: Create __init__.py for the agent\necho \"from . import agent\" &gt; vertex_search_agent/__init__.py\n\n# Step 3: Create an agent.py (the agent definition) and .env (authentication config)\ntouch vertex_search_agent/agent.py .env\n</code></pre> <p>\u6539\u9032\u5f8c\u7684\u7ffb\u8b6f\uff1a</p> Windows <pre><code># Step 1: Create a new directory for your agent\nmkdir vertex_search_agent\n\n# Step 2: Create __init__.py for the agent\necho \"from . import agent\" &gt; vertex_search_agent/__init__.py\n\n# Step 3: Create an agent.py (the agent definition) and .env (authentication config)\ntype nul &gt; vertex_search_agent\\agent.py \ntype nul &gt; google_search_agent\\.env\n</code></pre>"},{"location":"grounding/vertex_ai_search_grounding/#agentpy","title":"\u7de8\u8f2f <code>agent.py</code>","text":"<p>\u8acb\u5c07\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u8907\u88fd\u4e26\u8cbc\u5230 <code>agent.py</code>\uff0c\u7136\u5f8c\u5c07 <code>Configuration</code> \u90e8\u5206\u7684 <code>YOUR_PROJECT_ID</code> \u548c <code>YOUR_DATASTORE_ID</code> \u5206\u5225\u66ff\u63db\u70ba\u4f60\u7684\u5c08\u6848 ID \u53ca Data Store ID\uff1a</p> vertex_search_agent/agent.py<pre><code>from google.adk.agents import Agent\nfrom google.adk.tools import VertexAiSearchTool\n\n# Configuration\nDATASTORE_ID = \"projects/YOUR_PROJECT_ID/locations/global/collections/default_collection/dataStores/YOUR_DATASTORE_ID\"\n\nroot_agent = Agent(\n    name=\"vertex_search_agent\",\n    model=\"gemini-2.5-flash\",\n    instruction=\"Answer questions using Vertex AI Search to find information from internal documents. Always cite sources when available.\",\n    description=\"Enterprise document search assistant with Vertex AI Search capabilities\",\n    tools=[VertexAiSearchTool(data_store_id=DATASTORE_ID)]\n)\n</code></pre> <p>\u73fe\u5728\u4f60\u61c9\u8a72\u6703\u6709\u4ee5\u4e0b\u7684\u76ee\u9304\u7d50\u69cb\uff1a</p> <pre><code>my_project/\n    vertex_search_agent/\n        __init__.py\n        agent.py\n    .env\n</code></pre>"},{"location":"grounding/vertex_ai_search_grounding/#authentication-setup","title":"4. \u8a8d\u8b49\u8a2d\u5b9a","text":"<p>\u6ce8\u610f\uff1aVertex AI Search \u9700\u8981 Google Cloud Platform\uff08Vertex AI\uff09\u7684\u8a8d\u8b49\u3002\u672c\u5de5\u5177\u4e0d\u652f\u63f4 Google AI Studio\u3002</p> <ul> <li>\u8a2d\u5b9a gcloud CLI</li> <li>\u65bc\u7d42\u7aef\u6a5f\u57f7\u884c <code>gcloud auth login</code>\uff0c\u4ee5\u9a57\u8b49 Google Cloud\u3002</li> <li> <p>\u958b\u555f <code>.env</code> \u6a94\u6848\uff0c\u5c07\u4e0b\u5217\u7a0b\u5f0f\u78bc\u8907\u88fd\u8cbc\u4e0a\uff0c\u4e26\u66f4\u65b0\u5c08\u6848 ID \u53ca Location\u3002</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_CLOUD_PROJECT=YOUR_PROJECT_ID\nGOOGLE_CLOUD_LOCATION=LOCATION\n</code></pre> </li> </ul>"},{"location":"grounding/vertex_ai_search_grounding/#run-your-agent","title":"5. \u57f7\u884c\u4f60\u7684 agent","text":"<p>\u4f60\u53ef\u4ee5\u900f\u904e\u591a\u7a2e\u65b9\u5f0f\u8207\u4f60\u7684 agent \u4e92\u52d5\uff1a</p> Dev UI (adk web)\u7d42\u7aef\u6a5f\uff08adk run\uff09 <p>\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u4ee5\u555f\u52d5 dev UI\u3002</p> <pre><code>adk web\n</code></pre> <p>Note for Windows users</p> <p>When hitting the <code>_make_subprocess_transport NotImplementedError</code>, consider using <code>adk web --no-reload</code> instead.</p> <p>Step 1: Open the URL provided (usually <code>http://localhost:8000</code> or <code>http://127.0.0.1:8000</code>) directly in your browser.</p> <p>Step 2. In the top-left corner of the UI, you can select your agent in the dropdown. Select \"vertex_search_agent\".</p> <p>Troubleshooting</p> <p>If you do not see \"vertex_search_agent\" in the dropdown menu, make sure you are running <code>adk web</code> in the parent folder of your agent folder (i.e. the parent folder of vertex_search_agent).</p> <p>Step 3. Now you can chat with your agent using the textbox.</p> <p>Run the following command, to chat with your Vertex AI Search agent.</p> <p><pre><code>adk run vertex_search_agent\n</code></pre> To exit, use Cmd/Ctrl+C.</p>"},{"location":"grounding/vertex_ai_search_grounding/#prompts","title":"\ud83d\udcdd \u7bc4\u4f8b\u63d0\u793a\u8a5e\uff08prompts\uff09\u53ef\u4f9b\u5617\u8a66","text":"<p>\u900f\u904e\u4ee5\u4e0b\u554f\u984c\uff0c\u4f60\u53ef\u4ee5\u78ba\u8a8d agent \u78ba\u5be6\u6709\u547c\u53eb Vertex AI Search \u4f86\u5f9e Alphabet \u5831\u544a\u4e2d\u53d6\u5f97\u8cc7\u8a0a\uff1a</p> <ul> <li>Google Cloud \u5728 2022 \u5e74\u7b2c\u4e00\u5b63\u7684\u71df\u6536\u662f\u591a\u5c11\uff1f</li> <li>\u90a3 YouTube \u5462\uff1f</li> </ul> <p></p> <p>\u4f60\u5df2\u6210\u529f\u4f7f\u7528 Agent Development Kit (ADK) \u5efa\u7acb\u4e26\u8207\u4f60\u7684 Vertex AI Search agent \u4e92\u52d5\uff01</p>"},{"location":"grounding/vertex_ai_search_grounding/#vertex-ai-search-grounding_1","title":"Vertex AI Search \u77e5\u8b58\u63a5\u5730\uff08grounding\uff09\u904b\u4f5c\u539f\u7406","text":"<p>\u900f\u904e Vertex AI Search \u9032\u884c\u77e5\u8b58\u63a5\u5730\uff08grounding\uff09\uff0c\u662f\u5c07\u4f60\u7684 agent \u9023\u7d50\u5230\u7d44\u7e54\u5167\u5df2\u5efa\u7acb\u7d22\u5f15\u7684\u6587\u4ef6\u8207\u8cc7\u6599\uff0c\u8b93\u5176\u80fd\u6839\u64da\u4f01\u696d\u5167\u90e8\u7684\u5c08\u5c6c\u5167\u5bb9\u7522\u751f\u7cbe\u78ba\u7684\u56de\u61c9\u3002\u7576\u4f7f\u7528\u8005\u7684\u63d0\u793a\u9700\u8981\u4f86\u81ea\u5167\u90e8\u77e5\u8b58\u5eab\u7684\u8cc7\u8a0a\u6642\uff0cagent \u80cc\u5f8c\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6703\u667a\u6167\u5730\u6c7a\u5b9a\u662f\u5426\u8981\u547c\u53eb <code>VertexAiSearchTool</code>\uff0c\u4ee5\u5f9e\u5df2\u5efa\u7acb\u7d22\u5f15\u7684\u6587\u4ef6\u4e2d\u5c0b\u627e\u76f8\u95dc\u4e8b\u5be6\u3002</p>"},{"location":"grounding/vertex_ai_search_grounding/#_2","title":"\u8cc7\u6599\u6d41\u7a0b\u5716","text":"<p>\u4e0b\u5716\u8aaa\u660e\u4e86\u4f7f\u7528\u8005\u67e5\u8a62\u5982\u4f55\u9010\u6b65\u7522\u751f\u4e00\u500b\u77e5\u8b58\u63a5\u5730\uff08grounded\uff09\u7684\u56de\u61c9\u3002</p> <p></p>"},{"location":"grounding/vertex_ai_search_grounding/#_3","title":"\u8a73\u7d30\u8aaa\u660e","text":"<p>\u77e5\u8b58\u63a5\u5730 agent \u6703\u4f9d\u64da\u5716\u4e2d\u7684\u8cc7\u6599\u6d41\u7a0b\uff0c\u6aa2\u7d22\u3001\u8655\u7406\u4e26\u5c07\u4f01\u696d\u8cc7\u8a0a\u6574\u5408\u5230\u6700\u7d42\u5448\u73fe\u7d66\u4f7f\u7528\u8005\u7684\u7b54\u6848\u4e2d\u3002</p> <ol> <li> <p>\u4f7f\u7528\u8005\u67e5\u8a62\uff1a\u6700\u7d42\u4f7f\u7528\u8005\u900f\u904e\u63d0\u554f\u6709\u95dc\u5167\u90e8\u6587\u4ef6\u6216\u4f01\u696d\u8cc7\u6599\u7684\u554f\u984c\u4f86\u8207\u4f60\u7684 agent \u4e92\u52d5\u3002</p> </li> <li> <p>ADK \u5354\u8abf\uff1aAgent Development Kit (ADK) \u8ca0\u8cac\u5354\u8abf agent \u7684\u884c\u70ba\uff0c\u4e26\u5c07\u4f7f\u7528\u8005\u8a0a\u606f\u50b3\u905e\u7d66 agent \u7684\u6838\u5fc3\u3002</p> </li> <li> <p>LLM \u5206\u6790\u8207\u5de5\u5177\u547c\u53eb (tool-calling)\uff1aagent \u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\uff08\u4f8b\u5982 Gemini \u6a21\u578b\uff09\u6703\u5206\u6790\u63d0\u793a\u8a5e\u3002\u5982\u679c\u5224\u65b7\u9700\u8981\u4f86\u81ea\u5df2\u5efa\u7acb\u7d22\u5f15\u6587\u4ef6\u7684\u8cc7\u8a0a\uff0c\u5247\u6703\u900f\u904e\u547c\u53eb VertexAiSearchTool \u555f\u52d5\u77e5\u8b58\u63a5\u5730\u6a5f\u5236\u3002\u9019\u975e\u5e38\u9069\u5408\u56de\u7b54\u95dc\u65bc\u516c\u53f8\u653f\u7b56\u3001\u6280\u8853\u6587\u4ef6\u6216\u5c08\u6709\u7814\u7a76\u7684\u67e5\u8a62\u3002</p> </li> <li> <p>Vertex AI Search \u670d\u52d9\u4e92\u52d5\uff1aVertexAiSearchTool \u6703\u8207\u4f60\u5df2\u8a2d\u5b9a\u7684 Vertex AI Search \u8cc7\u6599\u5132\u5b58\u5eab\u4e92\u52d5\uff0c\u8a72\u5132\u5b58\u5eab\u5305\u542b\u5df2\u5efa\u7acb\u7d22\u5f15\u7684\u4f01\u696d\u6587\u4ef6\u3002\u670d\u52d9\u6703\u91dd\u5c0d\u4f60\u7684\u79c1\u6709\u5167\u5bb9\u7d44\u6210\u4e26\u57f7\u884c\u641c\u5c0b\u67e5\u8a62\u3002</p> </li> <li> <p>\u6587\u4ef6\u6aa2\u7d22\u8207\u6392\u5e8f\uff1aVertex AI Search \u6703\u6839\u64da\u8a9e\u610f\u76f8\u4f3c\u5ea6\u8207\u76f8\u95dc\u6027\u5206\u6578\uff0c\u5f9e\u8cc7\u6599\u5132\u5b58\u5eab\u4e2d\u6aa2\u7d22\u4e26\u6392\u5e8f\u6700\u76f8\u95dc\u7684\u6587\u4ef6\u7247\u6bb5\u3002</p> </li> <li> <p>\u5167\u5bb9\u6ce8\u5165\uff08Context Injection\uff09\uff1a\u641c\u5c0b\u670d\u52d9\u6703\u5728\u7522\u751f\u6700\u7d42\u56de\u61c9\u524d\uff0c\u5c07\u6aa2\u7d22\u5230\u7684\u6587\u4ef6\u7247\u6bb5\u6574\u5408\u9032\u6a21\u578b\u7684\u4e0a\u4e0b\u6587\u4e2d\u3002\u9019\u500b\u95dc\u9375\u6b65\u9a5f\u8b93\u6a21\u578b\u80fd\u5920\u6839\u64da\u4f60\u7d44\u7e54\u7684\u4e8b\u5be6\u8cc7\u6599\u9032\u884c\u300c\u63a8\u7406\u300d\u3002</p> </li> <li> <p>\u7522\u751f\u77e5\u8b58\u63a5\u5730\u56de\u61c9\uff1a\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5728\u53d6\u5f97\u76f8\u95dc\u4f01\u696d\u5167\u5bb9\u5f8c\uff0c\u6703\u7522\u751f\u4e00\u500b\u5305\u542b\u6587\u4ef6\u8cc7\u8a0a\u7684\u56de\u61c9\u3002</p> </li> <li> <p>\u5e36\u4f86\u6e90\u7684\u56de\u61c9\u5448\u73fe\uff1aADK \u6703\u63a5\u6536\u6700\u7d42\u7684\u77e5\u8b58\u63a5\u5730\u56de\u61c9\uff0c\u8a72\u56de\u61c9\u5305\u542b\u5fc5\u8981\u7684\u4f86\u6e90\u6587\u4ef6\u53c3\u8003\u8207 groundingMetadata\uff0c\u4e26\u5c07\u5176\u5e36\u6709\u51fa\u8655\u5730\u5448\u73fe\u7d66\u4f7f\u7528\u8005\u3002\u9019\u8b93\u6700\u7d42\u4f7f\u7528\u8005\u80fd\u5920\u6839\u64da\u4f01\u696d\u4f86\u6e90\u9a57\u8b49\u8cc7\u8a0a\u3002</p> </li> </ol>"},{"location":"grounding/vertex_ai_search_grounding/#vertex-ai-search_1","title":"\u7406\u89e3 Vertex AI Search \u77e5\u8b58\u63a5\u5730\u56de\u61c9","text":"<p>\u7576 agent \u4f7f\u7528 Vertex AI Search \u9032\u884c\u77e5\u8b58\u63a5\u5730\u6642\uff0c\u6703\u56de\u50b3\u5305\u542b\u6700\u7d42\u6587\u5b57\u7b54\u6848\u8207\u7528\u65bc\u7522\u751f\u8a72\u7b54\u6848\u7684\u6587\u4ef6\u76f8\u95dc metadata \u7684\u8a73\u7d30\u8cc7\u8a0a\u3002\u9019\u4e9b metadata \u5c0d\u65bc\u9a57\u8b49\u56de\u61c9\u5167\u5bb9\u4ee5\u53ca\u63d0\u4f9b\u4f01\u696d\u4f86\u6e90\u51fa\u8655\u975e\u5e38\u91cd\u8981\u3002</p>"},{"location":"grounding/vertex_ai_search_grounding/#_4","title":"\u77e5\u8b58\u63a5\u5730\u56de\u61c9\u7bc4\u4f8b","text":"<p>\u4ee5\u4e0b\u662f\u6a21\u578b\u91dd\u5c0d\u4f01\u696d\u6587\u4ef6\u9032\u884c\u77e5\u8b58\u63a5\u5730\u67e5\u8a62\u5f8c\uff0c\u6240\u56de\u50b3\u7684 content \u7269\u4ef6\u7bc4\u4f8b\u3002</p> <p>\u6700\u7d42\u7b54\u6848\u6587\u5b57\uff1a</p> <pre><code>\"Developing models for a medical scribe presents several significant challenges, primarily due to the complex nature of medical documentation, the sensitive data involved, and the demanding requirements of clinical workflows. Key challenges include: **Accuracy and Reliability:** Medical documentation requires extremely high levels of accuracy, as errors can lead to misdiagnoses, incorrect treatments, and legal repercussions. Ensuring that AI models can reliably capture nuanced medical language, distinguish between subjective and objective information, and accurately transcribe physician-patient interactions is a major hurdle. **Natural Language Understanding (NLU) and Speech Recognition:** Medical conversations are often rapid, involve highly specialized jargon, acronyms, and abbreviations, and can be spoken by individuals with diverse accents or speech patterns... [response continues with detailed analysis of privacy, integration, and technical challenges]\"\n</code></pre> <p>\u77e5\u8b58\u63a5\u5730 (grounding) \u4e2d\u7e7c\u8cc7\u6599\u7247\u6bb5\uff1a</p> <p>\u9019\u662f\u4f60\u6703\u6536\u5230\u7684\u77e5\u8b58\u63a5\u5730 (grounding) \u4e2d\u7e7c\u8cc7\u6599\u3002\u5728 <code>adk web</code> \u4e0a\uff0c\u4f60\u53ef\u4ee5\u5728 <code>Response</code> \u5206\u9801\u4e2d\u627e\u5230\u9019\u4e9b\u8cc7\u8a0a\uff1a</p> <pre><code>{\n  \"groundingMetadata\": {\n    \"groundingChunks\": [\n      {\n        \"document\": {\n          \"title\": \"AI in Medical Scribing: Technical Challenges\",\n          \"uri\": \"projects/your-project/locations/global/dataStores/your-datastore-id/documents/doc-medical-scribe-ai-tech-challenges\",\n          \"id\": \"doc-medical-scribe-ai-tech-challenges\"\n        }\n      },\n      {\n        \"document\": {\n          \"title\": \"Regulatory and Ethical Hurdles for AI in Healthcare\",\n          \"uri\": \"projects/your-project/locations/global/dataStores/your-datastore-id/documents/doc-ai-healthcare-ethics\",\n          \"id\": \"doc-ai-healthcare-ethics\"\n        }\n      }\n      // ... additional documents\n    ],\n    \"groundingSupports\": [\n      {\n        \"groundingChunkIndices\": [0, 1],\n        \"segment\": {\n          \"endIndex\": 637,\n          \"startIndex\": 433,\n          \"text\": \"Ensuring that AI models can reliably capture nuanced medical language...\"\n        }\n      }\n      // ... additional supports linking text segments to source documents\n    ],\n    \"retrievalQueries\": [\n      \"challenges in natural language processing medical domain\",\n      \"AI medical scribe challenges\",\n      \"difficulties in developing AI for medical scribes\"\n      // ... additional search queries executed\n    ]\n  }\n}\n</code></pre>"},{"location":"grounding/vertex_ai_search_grounding/#_5","title":"\u5982\u4f55\u89e3\u8b80\u56de\u61c9","text":"<p>metadata\uff08\u4e2d\u7e7c\u8cc7\u6599\uff09\u63d0\u4f9b\u4e86\u6a21\u578b\u751f\u6210\u7684\u6587\u5b57\u8207\u5176\u6240\u4f9d\u64da\u7684\u4f01\u696d\u6587\u4ef6\u4e4b\u9593\u7684\u9023\u7d50\u3002\u4ee5\u4e0b\u662f\u9010\u6b65\u8aaa\u660e\uff1a</p> <ul> <li> <p>groundingChunks\uff1a\u9019\u662f\u4e00\u500b\u6a21\u578b\u6240\u53c3\u8003\u7684\u4f01\u696d\u6587\u4ef6\u6e05\u55ae\u3002\u6bcf\u500b chunk \u5305\u542b\u6587\u4ef6\u6a19\u984c\u3001uri\uff08\u6587\u4ef6\u8def\u5f91\uff09\u4ee5\u53ca id\u3002</p> </li> <li> <p>groundingSupports\uff1a\u6b64\u6e05\u55ae\u5c07\u6700\u7d42\u7b54\u6848\u4e2d\u7684\u7279\u5b9a\u53e5\u5b50\u9023\u7d50\u56de<code>groundingChunks</code>\u3002</p> </li> <li> <p>segment\uff1a\u6b64\u7269\u4ef6\u6a19\u8b58\u6700\u7d42\u6587\u5b57\u7b54\u6848\u4e2d\u7684\u7279\u5b9a\u7247\u6bb5\uff0c\u8a72\u7247\u6bb5\u7531\u5176<code>startIndex</code>\u3001<code>endIndex</code>\u4ee5\u53ca<code>text</code>\u672c\u8eab\u6240\u5b9a\u7fa9\u3002</p> </li> <li> <p>groundingChunkIndices\uff1a\u6b64\u9663\u5217\u5305\u542b\u5c0d\u61c9\u65bc<code>groundingChunks</code>\u4e2d\u6240\u5217\u4f86\u6e90\u7684\u7d22\u5f15\u7de8\u865f\u3002\u4f8b\u5982\uff0c\u6709\u95dc\u300cHIPAA \u5408\u898f\u6027\u300d\u7684\u6587\u5b57\uff0c\u662f\u7531\u7d22\u5f15 1 \u8655\u7684<code>groundingChunks</code>\uff08\"Regulatory and Ethical Hurdles\" \u6587\u4ef6\uff09\u6240\u652f\u6301\u3002</p> </li> <li> <p>retrievalQueries\uff1a\u6b64\u9663\u5217\u986f\u793a\u91dd\u5c0d\u60a8\u7684\u8cc7\u6599\u5132\u5b58\u5340\u6240\u57f7\u884c\u7684\u5177\u9ad4\u641c\u5c0b\u67e5\u8a62\uff0c\u4ee5\u5c0b\u627e\u76f8\u95dc\u8cc7\u8a0a\u3002</p> </li> </ul>"},{"location":"grounding/vertex_ai_search_grounding/#vertex-ai-search-grounding_2","title":"\u5982\u4f55\u4ee5 Vertex AI Search \u986f\u793a\u77e5\u8b58\u63a5\u5730\uff08grounding\uff09\u56de\u61c9","text":"<p>\u8207 Google Search \u77e5\u8b58\u63a5\u5730\u4e0d\u540c\uff0cVertex AI Search \u7684\u77e5\u8b58\u63a5\u5730\u4e0d\u9700\u8981\u7279\u5b9a\u7684\u986f\u793a\u5143\u4ef6\u3002\u7136\u800c\uff0c\u986f\u793a\u5f15\u7528\u8207\u6587\u4ef6\u53c3\u8003\u80fd\u5920\u5efa\u7acb\u4fe1\u4efb\uff0c\u4e26\u8b93\u4f7f\u7528\u8005\u80fd\u5920\u6839\u64da\u60a8\u7d44\u7e54\u7684\u6b0a\u5a01\u4f86\u6e90\u9a57\u8b49\u8cc7\u8a0a\u3002</p>"},{"location":"grounding/vertex_ai_search_grounding/#_6","title":"\u9078\u7528\u7684\u5f15\u7528\u986f\u793a","text":"<p>\u7531\u65bc\u5df2\u63d0\u4f9b\u77e5\u8b58\u63a5\u5730\u7684 metadata\uff0c\u60a8\u53ef\u4ee5\u6839\u64da\u61c9\u7528\u9700\u6c42\u9078\u64c7\u5be6\u4f5c\u5f15\u7528\u986f\u793a\uff1a</p> <p>\u7d14\u6587\u5b57\u986f\u793a\uff08\u6700\u5c0f\u5be6\u4f5c\uff09\uff1a</p> <pre><code>for event in events:\n    if event.is_final_response():\n        print(event.content.parts[0].text)\n\n        # Optional: Show source count\n        if event.grounding_metadata:\n            print(f\"\\nBased on {len(event.grounding_metadata.grounding_chunks)} documents\")\n</code></pre> <p>\u589e\u5f37\u578b\u5f15\u6587\u986f\u793a\uff08\u9078\u7528\uff09\uff1a \u4f60\u53ef\u4ee5\u5be6\u4f5c\u4e92\u52d5\u5f0f\u5f15\u6587\uff0c\u986f\u793a\u6bcf\u500b\u6558\u8ff0\u6240\u4f9d\u64da\u7684\u6587\u4ef6\u3002\u77e5\u8b58\u63a5\u5730\uff08grounding\uff09\u4e2d\u63d0\u4f9b\u7684 metadata \u5305\u542b\u6240\u6709\u5fc5\u8981\u8cc7\u8a0a\uff0c\u53ef\u7528\u4f86\u5c07\u6587\u5b57\u7247\u6bb5\u5c0d\u61c9\u5230\u4f86\u6e90\u6587\u4ef6\u3002</p>"},{"location":"grounding/vertex_ai_search_grounding/#_7","title":"\u5be6\u4f5c\u8003\u91cf","text":"<p>\u5728\u5be6\u4f5c Vertex AI Search \u77e5\u8b58\u63a5\u5730\u986f\u793a\u6642\uff1a</p> <ol> <li>\u6587\u4ef6\u5b58\u53d6\u6b0a\u9650\uff1a\u78ba\u8a8d\u4f7f\u7528\u8005\u5c0d\u88ab\u5f15\u7528\u6587\u4ef6\u7684\u5b58\u53d6\u6b0a\u9650</li> <li>\u7c21\u6613\u6574\u5408\uff1a\u57fa\u790e\u6587\u5b57\u8f38\u51fa\u4e0d\u9700\u8981\u984d\u5916\u7684\u986f\u793a\u908f\u8f2f</li> <li>\u9078\u7528\u589e\u5f37\u529f\u80fd\uff1a\u50c5\u5728\u4f60\u7684\u4f7f\u7528\u60c5\u5883\u9700\u8981\u4f86\u6e90\u6a19\u8a3b\u6642\u624d\u52a0\u5165\u5f15\u6587</li> <li>\u6587\u4ef6\u9023\u7d50\uff1a\u5982\u6709\u9700\u8981\uff0c\u5c07\u6587\u4ef6\u7684 URI \u8f49\u63db\u70ba\u53ef\u5b58\u53d6\u7684\u5167\u90e8\u9023\u7d50</li> <li>\u641c\u5c0b\u67e5\u8a62\uff1a<code>retrievalQueries</code> \u9663\u5217\u986f\u793a\u5c0d\u4f60\u7684\u8cc7\u6599\u5eab\u57f7\u884c\u904e\u54ea\u4e9b\u641c\u5c0b</li> </ol>"},{"location":"grounding/vertex_ai_search_grounding/#_8","title":"\u6458\u8981","text":"<p>Vertex AI Search \u77e5\u8b58\u63a5\u5730\uff08grounding\uff09\u53ef\u5c07 AI agent \u5f9e\u901a\u7528\u578b\u52a9\u7406\u8f49\u8b8a\u70ba\u4f01\u696d\u5c08\u5c6c\u7684\u77e5\u8b58\u7cfb\u7d71\uff0c\u80fd\u5920\u5f9e\u4f60\u7d44\u7e54\u7684\u79c1\u6709\u6587\u4ef6\u4e2d\u63d0\u4f9b\u6e96\u78ba\u4e14\u5e36\u6709\u4f86\u6e90\u6a19\u8a3b\u7684\u8cc7\u8a0a\u3002\u5c07\u6b64\u529f\u80fd\u6574\u5408\u9032\u4f60\u7684 Agent Development Kit (ADK) agent\uff0c\u53ef\u8b93\u4ed6\u5011\uff1a</p> <ul> <li>\u5b58\u53d6\u4f86\u81ea\u4f60\u5df2\u7d22\u5f15\u6587\u4ef6\u5132\u5b58\u5eab\u7684\u5c08\u6709\u8cc7\u8a0a</li> <li>\u63d0\u4f9b\u4f86\u6e90\u6a19\u8a3b\uff0c\u63d0\u5347\u900f\u660e\u5ea6\u8207\u4fe1\u4efb\u611f</li> <li>\u56de\u7b54\u5167\u5bb9\u8a73\u76e1\u4e14\u53ef\u9a57\u8b49\u7684\u4f01\u696d\u4e8b\u5be6</li> <li>\u5728 Google Cloud \u74b0\u5883\u4e2d\u7dad\u8b77\u8cc7\u6599\u96b1\u79c1</li> </ul> <p>\u77e5\u8b58\u63a5\u5730\uff08grounding\uff09\u6d41\u7a0b\u80fd\u7121\u7e2b\u5730\u5c07\u4f7f\u7528\u8005\u67e5\u8a62\u9023\u7d50\u5230\u4f60\u7d44\u7e54\u7684\u77e5\u8b58\u5eab\uff0c\u5728\u7dad\u6301\u5c0d\u8a71\u6d41\u7a0b\u7684\u540c\u6642\uff0c\u70ba\u56de\u61c9\u5167\u5bb9\u88dc\u5145\u4f86\u81ea\u79c1\u6709\u6587\u4ef6\u7684\u76f8\u95dc\u8108\u7d61\u3002\u53ea\u8981\u6b63\u78ba\u5be6\u4f5c\uff0c\u4f60\u7684 agent \u5c31\u80fd\u6210\u70ba\u4f01\u696d\u8cc7\u8a0a\u63a2\u7d22\u8207\u6c7a\u7b56\u7684\u5f37\u5927\u5de5\u5177\u3002</p>"},{"location":"mcp/","title":"Model Context Protocol (MCP)","text":""},{"location":"mcp/#model-context-protocol-mcp_1","title":"\u4ec0\u9ebc\u662f Model Context Protocol (MCP)\uff1f","text":"<p>Model Context Protocol (MCP) \u662f\u4e00\u500b\u958b\u653e\u6a19\u6e96\uff0c\u65e8\u5728\u6a19\u6e96\u5316\u5927\u578b\u8a9e\u8a00\u6a21\u578b (Large Language Model, LLM)\uff08\u5982 Gemini \u548c Claude\uff09\u5982\u4f55\u8207\u5916\u90e8\u61c9\u7528\u7a0b\u5f0f\u3001\u8cc7\u6599\u4f86\u6e90\u548c\u5de5\u5177\u9032\u884c\u901a\u8a0a\u3002\u4f60\u53ef\u4ee5\u5c07\u5b83\u60f3\u50cf\u6210\u4e00\u7a2e\u901a\u7528\u7684\u9023\u63a5\u6a5f\u5236\uff0c\u7c21\u5316 LLM \u53d6\u5f97\u4e0a\u4e0b\u6587\u3001\u57f7\u884c\u52d5\u4f5c\u4ee5\u53ca\u8207\u5404\u7a2e\u7cfb\u7d71\u4e92\u52d5\u7684\u65b9\u5f0f\u3002</p>"},{"location":"mcp/#mcp","title":"MCP \u5982\u4f55\u904b\u4f5c\uff1f","text":"<p>MCP \u63a1\u7528 client-server \u67b6\u69cb\uff0c\u5b9a\u7fa9\u8cc7\u6599\uff08\u8cc7\u6e90\uff09\u3001\u4e92\u52d5\u5f0f\u7bc4\u672c\uff08prompts\uff09\u4ee5\u53ca\u53ef\u57f7\u884c\u529f\u80fd\uff08tools\uff09\u5982\u4f55\u7531 MCP \u4f3a\u670d\u5668\u516c\u958b\uff0c\u4e26\u7531 MCP client\uff08\u53ef\u4ee5\u662f LLM host \u61c9\u7528\u7a0b\u5f0f\u6216 AI agent\uff09\u6d88\u8cbb\u3002</p>"},{"location":"mcp/#adk-mcp","title":"ADK \u4e2d\u7684 MCP \u5de5\u5177","text":"<p>Agent Development Kit (ADK) \u5354\u52a9\u4f60\u5728 agent \u4e2d\u540c\u6642\u4f7f\u7528\u8207\u6d88\u8cbb MCP \u5de5\u5177\uff0c\u7121\u8ad6\u4f60\u662f\u60f3\u5efa\u7acb\u4e00\u500b\u547c\u53eb MCP \u670d\u52d9\u7684\u5de5\u5177\uff0c\u9084\u662f\u5c07 MCP \u4f3a\u670d\u5668\u516c\u958b\u7d66\u5176\u4ed6\u958b\u767c\u8005\u6216 agent \u8207\u4f60\u7684\u5de5\u5177\u4e92\u52d5\u3002</p> <p>\u8acb\u53c3\u95b1 MCP Tools \u6587\u4ef6\u8aaa\u660e\uff0c\u5176\u4e2d\u5305\u542b\u5354\u52a9\u4f60\u5c07 ADK \u8207 MCP \u4f3a\u670d\u5668\u7d50\u5408\u4f7f\u7528\u7684\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u8207\u8a2d\u8a08\u6a21\u5f0f\uff0c\u5305\u62ec\uff1a</p> <ul> <li>\u5728 ADK \u4e2d\u4f7f\u7528\u73fe\u6709\u7684 MCP \u4f3a\u670d\u5668\uff1aADK agent \u53ef\u4ee5\u4f5c\u70ba MCP client\uff0c\u4f7f\u7528\u5916\u90e8 MCP \u4f3a\u670d\u5668\u6240\u63d0\u4f9b\u7684\u5de5\u5177\u3002</li> <li>\u900f\u904e MCP \u4f3a\u670d\u5668\u516c\u958b ADK \u5de5\u5177\uff1a\u8aaa\u660e\u5982\u4f55\u5efa\u7acb\u4e00\u500b MCP \u4f3a\u670d\u5668\uff0c\u5c07 ADK \u5de5\u5177\u5305\u88dd\u5f8c\uff0c\u8b93\u4efb\u4f55 MCP client \u90fd\u80fd\u5b58\u53d6\u3002</li> </ul>"},{"location":"mcp/#mcp-toolbox","title":"\u8cc7\u6599\u5eab\u5c08\u7528 MCP Toolbox","text":"<p>MCP Toolbox for Databases \u662f\u4e00\u500b\u958b\u6e90\u7684 MCP \u4f3a\u670d\u5668\uff0c\u80fd\u5920\u5b89\u5168\u5730\u5c07\u4f60\u7684\u5f8c\u7aef\u8cc7\u6599\u4f86\u6e90\u516c\u958b\u70ba\u4e00\u7d44\u9810\u5148\u5efa\u7f6e\u3001\u53ef\u76f4\u63a5\u7528\u65bc\u751f\u7522\u74b0\u5883\u7684 Gen AI agent \u5de5\u5177\u3002\u5b83\u4f5c\u70ba\u4e00\u500b\u901a\u7528\u62bd\u8c61\u5c64\uff0c\u8b93\u4f60\u7684 ADK agent \u80fd\u5920\u5b89\u5168\u5730\u67e5\u8a62\u3001\u5206\u6790\u4e26\u5f9e\u5404\u7a2e\u8cc7\u6599\u5eab\u4e2d\u64f7\u53d6\u8cc7\u8a0a\uff0c\u4e26\u5167\u5efa\u591a\u7a2e\u652f\u63f4\u3002</p> <p>MCP Toolbox \u4f3a\u670d\u5668\u5167\u5efa\u5b8c\u6574\u7684\u9023\u63a5\u5668\u51fd\u5f0f\u5eab\uff0c\u78ba\u4fdd agent \u80fd\u5920\u5b89\u5168\u5730\u8207\u4f60\u7684\u8907\u96dc\u8cc7\u6599\u8cc7\u7522\u4e92\u52d5\u3002</p>"},{"location":"mcp/#_1","title":"\u652f\u63f4\u7684\u8cc7\u6599\u4f86\u6e90","text":"<p>MCP Toolbox \u91dd\u5c0d\u4e0b\u5217\u8cc7\u6599\u5eab\u8207\u8cc7\u6599\u5e73\u53f0\u63d0\u4f9b\u73fe\u6210\u7684\u5de5\u5177\u7d44\uff1a</p>"},{"location":"mcp/#google-cloud","title":"Google Cloud","text":"<ul> <li>BigQuery\uff08\u5305\u542b SQL \u57f7\u884c\u3001schema \u63a2\u7d22\u53ca\u6a5f\u5668\u5b78\u7fd2\u9810\u6e2c\u5de5\u5177\uff09</li> <li>AlloyDB\uff08\u76f8\u5bb9 PostgreSQL\uff0c\u652f\u63f4\u6a19\u6e96\u67e5\u8a62\u8207\u81ea\u7136\u8a9e\u8a00\u67e5\u8a62\u5de5\u5177\uff09</li> <li>Spanner\uff08\u652f\u63f4 GoogleSQL \u53ca PostgreSQL \u8a9e\u6cd5\uff09</li> <li>Cloud SQL\uff08\u5c08\u70ba Cloud SQL for PostgreSQL\u3001Cloud SQL for MySQL\u3001Cloud SQL for SQL Server \u63d0\u4f9b\u652f\u63f4\uff09</li> <li>Firestore</li> <li>Bigtable</li> <li>Dataplex\uff08\u7528\u65bc\u8cc7\u6599\u63a2\u7d22\u8207\u4e2d\u7e7c\u8cc7\u6599\u641c\u5c0b\uff09</li> </ul>"},{"location":"mcp/#sql","title":"\u95dc\u806f\u5f0f\u8207 SQL \u8cc7\u6599\u5eab","text":"<ul> <li>PostgreSQL\uff08\u901a\u7528\uff09</li> <li>MySQL\uff08\u901a\u7528\uff09</li> <li>Microsoft SQL Server\uff08\u901a\u7528\uff09</li> <li>ClickHouse</li> <li>TiDB</li> <li>OceanBase</li> <li>Firebird</li> <li>SQLite</li> </ul>"},{"location":"mcp/#nosql","title":"NoSQL \u8207\u9375\u503c\u5132\u5b58","text":"<ul> <li>MongoDB</li> <li>Couchbase</li> <li>Redis</li> <li>Valkey</li> </ul>"},{"location":"mcp/#_2","title":"\u5716\u5f62\u8cc7\u6599\u5eab","text":"<ul> <li>Neo4j\uff08\u652f\u63f4 Cypher \u67e5\u8a62\u8207 schema \u6aa2\u67e5\u5de5\u5177\uff09</li> <li>Dgraph</li> </ul>"},{"location":"mcp/#_3","title":"\u8cc7\u6599\u5e73\u53f0\u8207\u806f\u90a6\u67e5\u8a62","text":"<ul> <li>Looker\uff08\u53ef\u900f\u904e Looker API \u57f7\u884c Looks\u3001\u67e5\u8a62\u53ca\u5efa\u7acb\u5100\u8868\u677f\uff09</li> <li>Trino\uff08\u53ef\u8de8\u591a\u500b\u4f86\u6e90\u57f7\u884c\u806f\u90a6\u67e5\u8a62\uff09</li> </ul>"},{"location":"mcp/#_4","title":"\u6587\u4ef6\u8aaa\u660e","text":"<p>\u8acb\u53c3\u95b1 MCP Toolbox for Databases \u6587\u4ef6\u8aaa\u660e\uff0c\u4e86\u89e3\u5982\u4f55\u5c07 ADK \u8207 MCP Toolbox for Databases \u642d\u914d\u4f7f\u7528\u3002\u82e5\u8981\u5feb\u901f\u958b\u59cb\u4f7f\u7528 MCP Toolbox for Databases\uff0c\u53ef\u53c3\u8003\u90e8\u843d\u683c\u6587\u7ae0 Tutorial : MCP Toolbox for Databases - Exposing Big Query Datasets \u4ee5\u53ca Codelab MCP Toolbox for Databases:Making BigQuery datasets available to MCP clients\u3002</p> <p></p>"},{"location":"mcp/#adk-agent-fastmcp","title":"ADK Agent \u8207 FastMCP \u4f3a\u670d\u5668","text":"<p>FastMCP \u8655\u7406\u6240\u6709\u8907\u96dc\u7684 MCP \u5354\u5b9a\u7d30\u7bc0\u8207\u4f3a\u670d\u5668\u7ba1\u7406\uff0c\u8b93\u4f60\u80fd\u5c08\u6ce8\u65bc\u6253\u9020\u512a\u8cea\u5de5\u5177\u3002\u5b83\u8a2d\u8a08\u70ba\u9ad8\u968e\u4e14 Pythonic\uff1b\u5927\u591a\u6578\u60c5\u5883\u4e0b\uff0c\u4f60\u53ea\u9700\u70ba\u51fd\u5f0f\u52a0\u4e0a decorator \u5373\u53ef\u3002</p> <p>\u8acb\u53c3\u95b1 MCP Tools \u6587\u4ef6\u8aaa\u660e\uff0c\u4e86\u89e3\u5982\u4f55\u5c07 ADK \u8207\u90e8\u7f72\u65bc Cloud Run \u7684 FastMCP \u4f3a\u670d\u5668\u7d50\u5408\u4f7f\u7528\u3002</p>"},{"location":"mcp/#google-cloud-genmedia-mcp","title":"Google Cloud Genmedia \u5c08\u7528 MCP \u4f3a\u670d\u5668","text":"<p>MCP Tools for Genmedia Services \u662f\u4e00\u7d44\u958b\u6e90 MCP \u4f3a\u670d\u5668\uff0c\u8b93\u4f60\u80fd\u5c07 Google Cloud \u751f\u6210\u5f0f\u5a92\u9ad4\u670d\u52d9\uff08\u5982 Imagen\u3001Veo\u3001Chirp 3 HD \u8a9e\u97f3\u8207 Lyria\uff09\u6574\u5408\u9032\u4f60\u7684 AI \u61c9\u7528\u7a0b\u5f0f\u3002</p> <p>Agent Development Kit (ADK) \u8207 Genkit \u5167\u5efa\u652f\u63f4\u9019\u4e9b MCP \u5de5\u5177\uff0c\u8b93\u4f60\u7684 AI agent \u80fd\u6709\u6548\u5354\u8abf\u751f\u6210\u5f0f\u5a92\u9ad4\u5de5\u4f5c\u6d41\u7a0b\u3002\u5be6\u4f5c\u6307\u5f15\u8acb\u53c3\u95b1 ADK \u7bc4\u4f8b agent \u53ca Genkit \u7bc4\u4f8b\u3002</p>"},{"location":"mcp/index.en/","title":"Model Context Protocol (MCP)","text":""},{"location":"mcp/index.en/#what-is-model-context-protocol-mcp","title":"What is Model Context Protocol (MCP)?","text":"<p>The Model Context Protocol (MCP) is an open standard designed to standardize how Large Language Models (LLMs) like Gemini and Claude communicate with external applications, data sources, and tools. Think of it as a universal connection mechanism that simplifies how LLMs obtain context, execute actions, and interact with various systems.</p>"},{"location":"mcp/index.en/#how-does-mcp-work","title":"How does MCP work?","text":"<p>MCP follows a client-server architecture, defining how data (resources), interactive templates (prompts), and actionable functions (tools) are exposed by an MCP server and consumed by an MCP client (which could be an LLM host application or an AI agent).</p>"},{"location":"mcp/index.en/#mcp-tools-in-adk","title":"MCP Tools in ADK","text":"<p>ADK helps you both use and consume MCP tools in your agents, whether you're trying to build a tool to call an MCP service, or exposing an MCP server for other developers or agents to interact with your tools.</p> <p>Refer to the MCP Tools documentation for code samples and design patterns that help you use ADK together with MCP servers, including:</p> <ul> <li>Using Existing MCP Servers within ADK: An ADK agent can act as an MCP   client and use tools provided by external MCP servers.</li> <li>Exposing ADK Tools via an MCP Server: How to build an MCP server that   wraps ADK tools, making them accessible to any MCP client.</li> </ul>"},{"location":"mcp/index.en/#mcp-toolbox-for-databases","title":"MCP Toolbox for Databases","text":"<p>MCP Toolbox for Databases is an open-source MCP server that securely exposes your backend data sources as a set of pre-built, production-ready tools for Gen AI agents. It functions as a universal abstraction layer, allowing your ADK agent to securely query, analyze, and retrieve information from a wide array of databases with built-in support.</p> <p>The MCP Toolbox server includes a comprehensive library of connectors, ensuring that agents can safely interact with your complex data estate.</p>"},{"location":"mcp/index.en/#supported-data-sources","title":"Supported Data Sources","text":"<p>MCP Toolbox provides out-of-the-box toolsets for the following databases and data platforms:</p>"},{"location":"mcp/index.en/#google-cloud","title":"Google Cloud","text":"<ul> <li>BigQuery (including tools for SQL execution, schema discovery, and ML forecasting)</li> <li>AlloyDB (PostgreSQL-compatible, with tools for both standard queries and natural language queries)</li> <li>Spanner (supporting both GoogleSQL and PostgreSQL dialects)</li> <li>Cloud SQL (with dedicated support for Cloud SQL for PostgreSQL, Cloud SQL for MySQL, and Cloud SQL for SQL Server)</li> <li>Firestore</li> <li>Bigtable</li> <li>Dataplex (for data discovery and metadata search)</li> </ul>"},{"location":"mcp/index.en/#relational-sql-databases","title":"Relational &amp; SQL Databases","text":"<ul> <li>PostgreSQL (generic)</li> <li>MySQL (generic)</li> <li>Microsoft SQL Server (generic)</li> <li>ClickHouse</li> <li>TiDB</li> <li>OceanBase</li> <li>Firebird</li> <li>SQLite</li> </ul>"},{"location":"mcp/index.en/#nosql-key-value-stores","title":"NoSQL &amp; Key-Value Stores","text":"<ul> <li>MongoDB</li> <li>Couchbase</li> <li>Redis</li> <li>Valkey</li> </ul>"},{"location":"mcp/index.en/#graph-databases","title":"Graph Databases","text":"<ul> <li>Neo4j (with tools for Cypher queries and schema inspection)</li> <li>Dgraph</li> </ul>"},{"location":"mcp/index.en/#data-platforms-federation","title":"Data Platforms &amp; Federation","text":"<ul> <li>Looker (for running Looks, queries, and building dashboards via the Looker API)</li> <li>Trino (for running federated queries across multiple sources)</li> </ul>"},{"location":"mcp/index.en/#documentation","title":"Documentation","text":"<p>Refer to the MCP Toolbox for Databases documentation on how you can use ADK together with the MCP Toolbox for Databases. For getting started with the MCP Toolbox for Databases, a blog post Tutorial : MCP Toolbox for Databases - Exposing Big Query Datasets and Codelab MCP Toolbox for Databases:Making BigQuery datasets available to MCP clients are also available.</p> <p></p>"},{"location":"mcp/index.en/#adk-agent-and-fastmcp-server","title":"ADK Agent and FastMCP server","text":"<p>FastMCP handles all the complex MCP protocol details and server management, so you can focus on building great tools. It's designed to be high-level and Pythonic; in most cases, decorating a function is all you need.</p> <p>Refer to the MCP Tools documentation documentation on how you can use ADK together with the FastMCP server running on Cloud Run.</p>"},{"location":"mcp/index.en/#mcp-servers-for-google-cloud-genmedia","title":"MCP Servers for Google Cloud Genmedia","text":"<p>MCP Tools for Genmedia Services is a set of open-source MCP servers that enable you to integrate Google Cloud generative media services\u2014such as Imagen, Veo, Chirp 3 HD voices, and Lyria\u2014into your AI applications.</p> <p>Agent Development Kit (ADK) and Genkit provide built-in support for these MCP tools, allowing your AI agents to effectively orchestrate generative media workflows. For implementation guidance, refer to the ADK example agent and the Genkit example.</p>"},{"location":"observability/agentops.en/","title":"Agent Observability with AgentOps","text":"<p>With just two lines of code, AgentOps provides session replays, metrics, and monitoring for agents.</p>"},{"location":"observability/agentops.en/#why-agentops-for-adk","title":"Why AgentOps for ADK?","text":"<p>Observability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing, how their agents are interacting with users, and how their agents use external tools and APIs.</p> <p>By integrating AgentOps, developers can gain deep insights into their ADK agent's behavior, LLM interactions, and tool usage.</p> <p>Google ADK includes its own OpenTelemetry-based tracing system, primarily aimed at providing developers with a way to trace the basic flow of execution within their agents. AgentOps enhances this by offering a dedicated and more comprehensive observability platform with:</p> <ul> <li>Unified Tracing and Replay Analytics: Consolidate traces from ADK and other components of your AI stack.</li> <li>Rich Visualization: Intuitive dashboards to visualize agent execution flow, LLM calls, and tool performance.</li> <li>Detailed Debugging: Drill down into specific spans, view prompts, completions, token counts, and errors.</li> <li>LLM Cost and Latency Tracking: Track latencies, costs (via token usage), and identify bottlenecks.</li> <li>Simplified Setup: Get started with just a few lines of code.</li> </ul> <p></p> <p></p> <p>AgentOps dashboard displaying a trace from a multi-step ADK application execution. You can see the hierarchical structure of spans, including the main agent workflow, individual sub-agents, LLM calls, and tool executions. Note the clear hierarchy: the main workflow agent span contains child spans for various sub-agent operations, LLM calls, and tool executions.</p>"},{"location":"observability/agentops.en/#getting-started-with-agentops-and-adk","title":"Getting Started with AgentOps and ADK","text":"<p>Integrating AgentOps into your ADK application is straightforward:</p> <ol> <li> <p>Install AgentOps: <pre><code>pip install -U agentops\n</code></pre></p> </li> <li> <p>Create an API Key     Create a user API key here: Create API Key and configure your environment:</p> <p>Add your API key to your environment variables: <pre><code>AGENTOPS_API_KEY=&lt;YOUR_AGENTOPS_API_KEY&gt;\n</code></pre></p> </li> <li> <p>Initialize AgentOps:     Add the following lines at the beginning of your ADK application script (e.g., your main Python file running the ADK <code>Runner</code>):</p> <pre><code>import agentops\nagentops.init()\n</code></pre> <p>This will initiate an AgentOps session as well as automatically track ADK agents.</p> <p>Detailed example:</p> <pre><code>import agentops\nimport os\nfrom dotenv import load_dotenv\n\n# Load environment variables (optional, if you use a .env file for API keys)\nload_dotenv()\n\nagentops.init(\n    api_key=os.getenv(\"AGENTOPS_API_KEY\"), # Your AgentOps API Key\n    trace_name=\"my-adk-app-trace\"  # Optional: A name for your trace\n    # auto_start_session=True is the default.\n    # Set to False if you want to manually control session start/end.\n)\n</code></pre> <p>\ud83d\udea8 \ud83d\udd11 You can find your AgentOps API key on your AgentOps Dashboard after signing up. It's recommended to set it as an environment variable (<code>AGENTOPS_API_KEY</code>).</p> </li> </ol> <p>Once initialized, AgentOps will automatically begin instrumenting your ADK agent.</p> <p>This is all you need to capture all telemetry data for your ADK agent</p>"},{"location":"observability/agentops.en/#how-agentops-instruments-adk","title":"How AgentOps Instruments ADK","text":"<p>AgentOps employs a sophisticated strategy to provide seamless observability without conflicting with ADK's native telemetry:</p> <ol> <li> <p>Neutralizing ADK's Native Telemetry:     AgentOps detects ADK and intelligently patches ADK's internal OpenTelemetry tracer (typically <code>trace.get_tracer('gcp.vertex.agent')</code>). It replaces it with a <code>NoOpTracer</code>, ensuring that ADK's own attempts to create telemetry spans are effectively silenced. This prevents duplicate traces and allows AgentOps to be the authoritative source for observability data.</p> </li> <li> <p>AgentOps-Controlled Span Creation:     AgentOps takes control by wrapping key ADK methods to create a logical hierarchy of spans:</p> <ul> <li> <p>Agent Execution Spans (e.g., <code>adk.agent.MySequentialAgent</code>):     When an ADK agent (like <code>BaseAgent</code>, <code>SequentialAgent</code>, or <code>LlmAgent</code>) starts its <code>run_async</code> method, AgentOps initiates a parent span for that agent's execution.</p> </li> <li> <p>LLM Interaction Spans (e.g., <code>adk.llm.gemini-pro</code>):     For calls made by an agent to an LLM (via ADK's <code>BaseLlmFlow._call_llm_async</code>), AgentOps creates a dedicated child span, typically named after the LLM model. This span captures request details (prompts, model parameters) and, upon completion (via ADK's <code>_finalize_model_response_event</code>), records response details like completions, token usage, and finish reasons.</p> </li> <li> <p>Tool Usage Spans (e.g., <code>adk.tool.MyCustomTool</code>):     When an agent uses a tool (via ADK's <code>functions.__call_tool_async</code>), AgentOps creates a single, comprehensive child span named after the tool. This span includes the tool's input parameters and the result it returns.</p> </li> </ul> </li> <li> <p>Rich Attribute Collection:     AgentOps reuses ADK's internal data extraction logic. It patches ADK's specific telemetry functions (e.g., <code>google.adk.telemetry.trace_tool_call</code>, <code>trace_call_llm</code>). The AgentOps wrappers for these functions take the detailed information ADK gathers and attach it as attributes to the currently active AgentOps span.</p> </li> </ol>"},{"location":"observability/agentops.en/#visualizing-your-adk-agent-in-agentops","title":"Visualizing Your ADK Agent in AgentOps","text":"<p>When you instrument your ADK application with AgentOps, you gain a clear, hierarchical view of your agent's execution in the AgentOps dashboard.</p> <ol> <li> <p>Initialization:     When <code>agentops.init()</code> is called (e.g., <code>agentops.init(trace_name=\"my_adk_application\")</code>), an initial parent span is created if the init param <code>auto_start_session=True</code> (true by default). This span, often named similar to <code>my_adk_application.session</code>, will be the root for all operations within that trace.</p> </li> <li> <p>ADK Runner Execution:     When an ADK <code>Runner</code> executes a top-level agent (e.g., a <code>SequentialAgent</code> orchestrating a workflow), AgentOps creates a corresponding agent span under the session trace. This span will reflect the name of your top-level ADK agent (e.g., <code>adk.agent.YourMainWorkflowAgent</code>).</p> </li> <li> <p>Sub-Agent and LLM/Tool Calls:     As this main agent executes its logic, including calling sub-agents, LLMs, or tools:</p> <ul> <li>Each sub-agent execution will appear as a nested child span under its parent agent.</li> <li>Calls to Large Language Models will generate further nested child spans (e.g., <code>adk.llm.&lt;model_name&gt;</code>), capturing prompt details, responses, and token usage.</li> <li>Tool invocations will also result in distinct child spans (e.g., <code>adk.tool.&lt;your_tool_name&gt;</code>), showing their parameters and results.</li> </ul> </li> </ol> <p>This creates a waterfall of spans, allowing you to see the sequence, duration, and details of each step in your ADK application. All relevant attributes, such as LLM prompts, completions, token counts, tool inputs/outputs, and agent names, are captured and displayed.</p> <p>For a practical demonstration, you can explore a sample Jupyter Notebook that illustrates a human approval workflow using Google ADK and AgentOps: Google ADK Human Approval Example on GitHub.</p> <p>This example showcases how a multi-step agent process with tool usage is visualized in AgentOps.</p>"},{"location":"observability/agentops.en/#benefits","title":"Benefits","text":"<ul> <li>Effortless Setup: Minimal code changes for comprehensive ADK tracing.</li> <li>Deep Visibility: Understand the inner workings of complex ADK agent flows.</li> <li>Faster Debugging: Quickly pinpoint issues with detailed trace data.</li> <li>Performance Optimization: Analyze latencies and token usage.</li> </ul> <p>By integrating AgentOps, ADK developers can significantly enhance their ability to build, debug, and maintain robust AI agents. </p>"},{"location":"observability/agentops.en/#further-information","title":"Further Information","text":"<p>To get started, create an AgentOps account. For feature requests or bug reports, please reach out to the AgentOps team on the AgentOps Repo.</p>"},{"location":"observability/agentops.en/#extra-links","title":"Extra links","text":"<p>\ud83d\udc26 Twitter   \u2022   \ud83d\udce2 Discord   \u2022   \ud83d\udd87\ufe0f AgentOps Dashboard   \u2022   \ud83d\udcd9 Documentation</p>"},{"location":"observability/agentops/","title":"\u4f7f\u7528 AgentOps \u9032\u884c agent \u53ef\u89c0\u6e2c\u6027","text":"<p>\u53ea\u9700\u5169\u884c\u7a0b\u5f0f\u78bc\uff0cAgentOps \u5373\u53ef\u70ba agent \u63d0\u4f9b session \u91cd\u64ad\u3001\u6307\u6a19\u8207\u76e3\u63a7\u529f\u80fd\u3002</p>"},{"location":"observability/agentops/#adk-agentops","title":"\u70ba\u4ec0\u9ebc\u5728 ADK \u4e2d\u9078\u64c7 AgentOps\uff1f","text":"<p>\u53ef\u89c0\u6e2c\u6027\u662f\u958b\u767c\u8207\u90e8\u7f72\u5c0d\u8a71\u5f0f AI agent \u7684\u95dc\u9375\u8981\u7d20\u3002\u5b83\u8b93\u958b\u767c\u8005\u80fd\u5920\u4e86\u89e3 agent \u7684\u904b\u4f5c\u72c0\u6cc1\u3001agent \u8207\u4f7f\u7528\u8005\u7684\u4e92\u52d5\u65b9\u5f0f\uff0c\u4ee5\u53ca agent \u5982\u4f55\u4f7f\u7528\u5916\u90e8\u5de5\u5177\u8207 API\u3002</p> <p>\u900f\u904e\u6574\u5408 AgentOps\uff0c\u958b\u767c\u8005\u53ef\u4ee5\u6df1\u5165\u6d1e\u5bdf\u5176 ADK agent \u7684\u884c\u70ba\u3001\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u4e92\u52d5\uff0c\u4ee5\u53ca\u5de5\u5177\u7684\u4f7f\u7528\u60c5\u5f62\u3002</p> <p>Google ADK \u5167\u5efa\u57fa\u65bc OpenTelemetry \u7684\u8ffd\u8e64\u7cfb\u7d71\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u8b93\u958b\u767c\u8005\u80fd\u5920\u8ffd\u8e64 agent \u5167\u90e8\u7684\u57fa\u672c\u57f7\u884c\u6d41\u7a0b\u3002\u800c AgentOps \u5247\u9032\u4e00\u6b65\u63d0\u4f9b\u5c08\u9580\u4e14\u66f4\u5b8c\u6574\u7684\u53ef\u89c0\u6e2c\u6027\u5e73\u53f0\uff0c\u5305\u62ec\uff1a</p> <ul> <li>\u7d71\u4e00\u8ffd\u8e64\u8207\u91cd\u64ad\u5206\u6790\uff1a \u5c07 ADK \u53ca AI \u6280\u8853\u5806\u758a\u4e2d\u5176\u4ed6\u5143\u4ef6\u7684\u8ffd\u8e64\u8cc7\u6599\u6574\u5408\u5728\u4e00\u8d77\u3002</li> <li>\u8c50\u5bcc\u7684\u8996\u89ba\u5316\u4ecb\u9762\uff1a \u76f4\u89c0\u7684\u5100\u8868\u677f\uff0c\u80fd\u8996\u89ba\u5316 agent \u57f7\u884c\u6d41\u7a0b\u3001\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb\u8207\u5de5\u5177\u6548\u80fd\u3002</li> <li>\u8a73\u7d30\u9664\u932f\u529f\u80fd\uff1a \u53ef\u6df1\u5165\u6aa2\u8996\u7279\u5b9a span\uff0c\u67e5\u770b\u63d0\u793a\u8a5e\u3001\u56de\u61c9\u5167\u5bb9\u3001token \u6578\u91cf\u8207\u932f\u8aa4\u8cc7\u8a0a\u3002</li> <li>LLM \u6210\u672c\u8207\u5ef6\u9072\u8ffd\u8e64\uff1a \u8ffd\u8e64\u5ef6\u9072\u3001\u6210\u672c\uff08\u4f9d token \u4f7f\u7528\u91cf\u8a08\u7b97\uff09\uff0c\u4e26\u627e\u51fa\u74f6\u9838\u3002</li> <li>\u7c21\u5316\u7684\u8a2d\u5b9a\u6d41\u7a0b\uff1a \u53ea\u9700\u5e7e\u884c\u7a0b\u5f0f\u78bc\u5373\u53ef\u5feb\u901f\u958b\u59cb\u3002</li> </ul> <p></p> <p></p> <p>AgentOps \u5100\u8868\u677f\u986f\u793a\u4e00\u500b\u591a\u6b65\u9a5f ADK \u61c9\u7528\u7a0b\u5f0f\u57f7\u884c\u7684\u8ffd\u8e64\u3002\u4f60\u53ef\u4ee5\u770b\u5230 span \u7684\u968e\u5c64\u7d50\u69cb\uff0c\u5305\u62ec\u4e3b\u8981 agent \u5de5\u4f5c\u6d41\u7a0b\u3001\u5404\u500b\u5b50 agent\u3001\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb\uff0c\u4ee5\u53ca\u5de5\u5177\u57f7\u884c\u3002\u8acb\u6ce8\u610f\u6e05\u695a\u7684\u968e\u5c64\u95dc\u4fc2\uff1a\u4e3b\u8981\u5de5\u4f5c\u6d41\u7a0b agent span \u5167\u542b\u5404\u7a2e\u5b50 agent \u64cd\u4f5c\u3001LLM \u547c\u53eb\u8207\u5de5\u5177\u57f7\u884c\u7684\u5b50 span\u3002</p>"},{"location":"observability/agentops/#adk-agentops_1","title":"\u958b\u59cb\u5728 ADK \u4e2d\u4f7f\u7528 AgentOps","text":"<p>\u5c07 AgentOps \u6574\u5408\u5230\u4f60\u7684 ADK \u61c9\u7528\u7a0b\u5f0f\u4e2d\u975e\u5e38\u7c21\u55ae\uff1a</p> <ol> <li> <p>\u5b89\u88dd AgentOps\uff1a <pre><code>pip install -U agentops\n</code></pre></p> </li> <li> <p>\u5efa\u7acb API \u91d1\u9470     \u8acb\u5728\u6b64\u8655\u5efa\u7acb\u4f7f\u7528\u8005 API \u91d1\u9470\uff1aCreate API Key\uff0c\u4e26\u8a2d\u5b9a\u60a8\u7684\u74b0\u5883\uff1a</p> <p>\u5c07\u60a8\u7684 API \u91d1\u9470\u52a0\u5165\u81f3\u74b0\u5883\u8b8a\u6578\u4e2d\uff1a <pre><code>AGENTOPS_API_KEY=&lt;YOUR_AGENTOPS_API_KEY&gt;\n</code></pre></p> </li> <li> <p>\u521d\u59cb\u5316 AgentOps\uff1a     \u8acb\u5728\u4f60\u7684 Agent Development Kit (ADK) \u61c9\u7528\u7a0b\u5f0f\u8173\u672c\u7684\u958b\u982d\uff08\u4f8b\u5982\uff0c\u57f7\u884c ADK \u7684\u4e3b\u8981 Python \u6a94\u6848 <code>Runner</code>\uff09\u52a0\u5165\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\uff1a</p> <pre><code>import agentops\nagentops.init()\n</code></pre> <p>\u9019\u5c07\u555f\u52d5\u4e00\u500b AgentOps \u5de5\u4f5c\u968e\u6bb5\uff0c\u4e26\u81ea\u52d5\u8ffd\u8e64 Agent Development Kit (ADK) \u7684 agent\u3002</p> <p>\u8a73\u7d30\u7bc4\u4f8b\uff1a</p> <pre><code>import agentops\nimport os\nfrom dotenv import load_dotenv\n\n# Load environment variables (optional, if you use a .env file for API keys)\nload_dotenv()\n\nagentops.init(\n    api_key=os.getenv(\"AGENTOPS_API_KEY\"), # Your AgentOps API Key\n    trace_name=\"my-adk-app-trace\"  # Optional: A name for your trace\n    # auto_start_session=True is the default.\n    # Set to False if you want to manually control session start/end.\n)\n</code></pre> <p>\ud83d\udea8 \ud83d\udd11 \u4f60\u53ef\u4ee5\u5728AgentOps Dashboard\u8a3b\u518a\u5f8c\u627e\u5230\u4f60\u7684 AgentOps API \u91d1\u9470\u3002\u5efa\u8b70\u5c07\u5176\u8a2d\u70ba\u74b0\u5883\u8b8a\u6578\uff08<code>AGENTOPS_API_KEY</code>\uff09\u3002</p> </li> </ol> <p>\u521d\u59cb\u5316\u5f8c\uff0cAgentOps \u6703\u81ea\u52d5\u958b\u59cb\u5c0d\u4f60\u7684 Agent Development Kit (ADK) agent \u9032\u884c\u81ea\u52d5\u5316\u76e3\u63a7\uff08instrumentation\uff09\u3002</p> <p>\u9019\u5c31\u662f\u4f60\u6240\u9700\u7684\u5168\u90e8\u6b65\u9a5f\uff0c\u5373\u53ef\u5b8c\u6574\u64f7\u53d6 ADK agent \u7684\u6240\u6709\u9059\u6e2c\uff08telemetry\uff09\u8cc7\u6599</p>"},{"location":"observability/agentops/#agentops-adk-instrumentation","title":"AgentOps \u5982\u4f55\u5c0d ADK \u9032\u884c\u81ea\u52d5\u5316\u76e3\u63a7\uff08Instrumentation\uff09","text":"<p>AgentOps \u63a1\u7528\u5148\u9032\u7b56\u7565\uff0c\u63d0\u4f9b\u7121\u7e2b\u7684\u53ef\u89c0\u6e2c\u6027\uff0c\u540c\u6642\u4e0d\u6703\u8207 ADK \u5167\u5efa\u7684\u9059\u6e2c\u529f\u80fd\u885d\u7a81\uff1a</p> <ol> <li> <p>\u4e2d\u548c ADK \u539f\u751f\u9059\u6e2c\uff1a     AgentOps \u6703\u5075\u6e2c ADK\uff0c\u4e26\u667a\u6167\u6027\u5730\u4fee\u88dc\uff08patch\uff09ADK \u5167\u90e8\u7684 OpenTelemetry tracer\uff08\u901a\u5e38\u70ba <code>trace.get_tracer('gcp.vertex.agent')</code>\uff09\u3002\u5b83\u6703\u5c07\u5176\u66ff\u63db\u70ba <code>NoOpTracer</code>\uff0c\u78ba\u4fdd ADK \u81ea\u8eab\u7522\u751f\u7684\u9059\u6e2c span \u88ab\u6709\u6548\u975c\u97f3\u3002\u9019\u53ef\u907f\u514d\u91cd\u8907\u8ffd\u8e64\uff08trace\uff09\uff0c\u4e26\u8b93 AgentOps \u6210\u70ba\u552f\u4e00\u6b0a\u5a01\u7684\u53ef\u89c0\u6e2c\u8cc7\u6599\u4f86\u6e90\u3002</p> </li> <li> <p>AgentOps \u63a7\u5236\u7684 Span \u5efa\u7acb\uff1a     AgentOps \u6703\u5305\u88dd\uff08wrap\uff09ADK \u7684\u95dc\u9375\u65b9\u6cd5\uff0c\u5efa\u7acb\u6709\u908f\u8f2f\u5c64\u7d1a\u7684 span \u968e\u5c64\uff1a</p> <ul> <li> <p>Agent \u57f7\u884c Span\uff08\u5982 <code>adk.agent.MySequentialAgent</code>\uff09\uff1a     \u7576 ADK agent\uff08\u4f8b\u5982 <code>BaseAgent</code>\u3001<code>SequentialAgent</code> \u6216 <code>LlmAgent</code>\uff09\u555f\u52d5\u5176 <code>run_async</code> \u65b9\u6cd5\u6642\uff0cAgentOps \u6703\u70ba\u8a72 agent \u7684\u57f7\u884c\u5efa\u7acb\u4e00\u500b\u7236\u5c64 span\u3002</p> </li> <li> <p>\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u4e92\u52d5 Span\uff08\u5982 <code>adk.llm.gemini-pro</code>\uff09\uff1a     \u7576 agent \u900f\u904e ADK \u7684 <code>BaseLlmFlow._call_llm_async</code> \u547c\u53eb\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6642\uff0cAgentOps \u6703\u5efa\u7acb\u4e00\u500b\u5c08\u5c6c\u7684\u5b50 span\uff0c\u901a\u5e38\u4ee5 LLM \u6a21\u578b\u540d\u7a31\u547d\u540d\u3002\u6b64 span \u6703\u64f7\u53d6\u8acb\u6c42\u7d30\u7bc0\uff08\u63d0\u793a\u8a5e\u3001\u6a21\u578b\u53c3\u6578\uff09\uff0c\u4e26\u5728\u5b8c\u6210\u6642\uff08\u900f\u904e ADK \u7684 <code>_finalize_model_response_event</code>\uff09\u8a18\u9304\u56de\u61c9\u7d30\u7bc0\uff0c\u5982\u5b8c\u6210\u5167\u5bb9\u3001token \u4f7f\u7528\u91cf\u8207\u7d50\u675f\u539f\u56e0\u3002</p> </li> <li> <p>\u5de5\u5177\u4f7f\u7528 Span\uff08\u5982 <code>adk.tool.MyCustomTool</code>\uff09\uff1a     \u7576 agent \u900f\u904e ADK \u7684 <code>functions.__call_tool_async</code> \u4f7f\u7528\u5de5\u5177\u6642\uff0cAgentOps \u6703\u4ee5\u8a72\u5de5\u5177\u540d\u7a31\u5efa\u7acb\u4e00\u500b\u5b8c\u6574\u7684\u5b50 span\u3002\u6b64 span \u6703\u5305\u542b\u5de5\u5177\u7684\u8f38\u5165\u53c3\u6578\u53ca\u5176\u56de\u50b3\u7d50\u679c\u3002</p> </li> </ul> </li> <li> <p>\u8c50\u5bcc\u7684\u5c6c\u6027\u6536\u96c6\uff1a     AgentOps \u6703\u91cd\u7528 ADK \u5167\u90e8\u7684\u8cc7\u6599\u64f7\u53d6\u908f\u8f2f\uff0c\u4e26\u4fee\u88dc ADK \u7279\u5b9a\u7684\u9059\u6e2c\u51fd\u5f0f\uff08\u5982 <code>google.adk.telemetry.trace_tool_call</code>\u3001<code>trace_call_llm</code>\uff09\u3002AgentOps \u70ba\u9019\u4e9b\u51fd\u5f0f\u8a2d\u8a08\u7684\u5305\u88dd\u5668\uff0c\u6703\u5c07 ADK \u64f7\u53d6\u7684\u8a73\u7d30\u8cc7\u8a0a\uff0c\u4f5c\u70ba\u5c6c\u6027\u9644\u52a0\u5230\u76ee\u524d\u4f5c\u7528\u4e2d\u7684 AgentOps span\u3002</p> </li> </ol>"},{"location":"observability/agentops/#agentops-adk-agent","title":"\u5728 AgentOps \u4e2d\u8996\u89ba\u5316\u4f60\u7684 ADK agent","text":"<p>\u7576\u4f60\u4f7f\u7528 AgentOps \u5c0d ADK \u61c9\u7528\u7a0b\u5f0f\u9032\u884c\u81ea\u52d5\u5316\u76e3\u63a7\u5f8c\uff0c\u4f60\u53ef\u4ee5\u5728 AgentOps dashboard \u4e0a\uff0c\u6e05\u695a\u5730\u770b\u5230 agent \u57f7\u884c\u7684\u968e\u5c64\u5f0f\u8996\u89ba\u5316\u756b\u9762\u3002</p> <ol> <li> <p>\u521d\u59cb\u5316\uff1a     \u7576\u547c\u53eb <code>agentops.init()</code>\uff08\u4f8b\u5982 <code>agentops.init(trace_name=\"my_adk_application\")</code>\uff09\u6642\uff0c\u5982\u679c\u521d\u59cb\u5316\u53c3\u6578 <code>auto_start_session=True</code>\uff08\u9810\u8a2d\u70ba true\uff09\uff0c\u6703\u5efa\u7acb\u4e00\u500b\u521d\u59cb\u7236\u5c64 span\u3002\u9019\u500b span \u901a\u5e38\u6703\u4ee5\u985e\u4f3c <code>my_adk_application.session</code> \u7684\u540d\u7a31\u5448\u73fe\uff0c\u4e26\u4f5c\u70ba\u8a72\u8ffd\u8e64\uff08trace\uff09\u4e2d\u6240\u6709\u64cd\u4f5c\u7684\u6839\u7bc0\u9ede\u3002</p> </li> <li> <p>ADK Runner \u57f7\u884c\uff1a     \u7576 ADK <code>Runner</code> \u57f7\u884c\u9802\u5c64 agent\uff08\u4f8b\u5982\u8ca0\u8cac\u5354\u8abf\u5de5\u4f5c\u6d41\u7a0b\u7684 <code>SequentialAgent</code>\uff09\u6642\uff0cAgentOps \u6703\u5728 session trace \u4e0b\u5efa\u7acb\u5c0d\u61c9\u7684 agent span\u3002\u9019\u500b span \u6703\u986f\u793a\u4f60\u7684\u9802\u5c64 ADK agent \u540d\u7a31\uff08\u5982 <code>adk.agent.YourMainWorkflowAgent</code>\uff09\u3002</p> </li> <li> <p>\u5b50 agent \u8207 LLM\uff0f\u5de5\u5177\u547c\u53eb\uff1a     \u7576\u4e3b agent \u57f7\u884c\u5176\u908f\u8f2f\uff08\u5305\u542b\u547c\u53eb\u5b50 agent\u3001\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6216\u5de5\u5177\uff09\u6642\uff1a</p> <ul> <li>\u6bcf\u500b\u5b50 agent \u57f7\u884c\u90fd\u6703\u4ee5\u5de2\u72c0\u5b50 span \u986f\u793a\u65bc\u5176\u7236 agent \u4e4b\u4e0b\u3002</li> <li>\u5c0d\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7684\u547c\u53eb\u6703\u7522\u751f\u66f4\u6df1\u5c64\u7684\u5b50 span\uff08\u5982 <code>adk.llm.&lt;model_name&gt;</code>\uff09\uff0c\u4e26\u64f7\u53d6\u63d0\u793a\u8a5e\u7d30\u7bc0\u3001\u56de\u61c9\u5167\u5bb9\u8207 token \u4f7f\u7528\u91cf\u3002</li> <li>\u5de5\u5177\u547c\u53eb\u4e5f\u6703\u7522\u751f\u7368\u7acb\u7684\u5b50 span\uff08\u5982 <code>adk.tool.&lt;your_tool_name&gt;</code>\uff09\uff0c\u986f\u793a\u5176\u53c3\u6578\u8207\u7d50\u679c\u3002</li> </ul> </li> </ol> <p>\u9019\u6703\u5f62\u6210\u7011\u5e03\u5f0f\u7684 span \u7d50\u69cb\uff0c\u8b93\u4f60\u6e05\u695a\u638c\u63e1 ADK \u61c9\u7528\u7a0b\u5f0f\u6bcf\u500b\u6b65\u9a5f\u7684\u9806\u5e8f\u3001\u8017\u6642\u8207\u7d30\u7bc0\u3002\u6240\u6709\u76f8\u95dc\u5c6c\u6027\uff08\u5982 LLM \u63d0\u793a\u8a5e\u3001\u5b8c\u6210\u5167\u5bb9\u3001token \u6578\u91cf\u3001\u5de5\u5177\u8f38\u5165\uff0f\u8f38\u51fa\u3001agent \u540d\u7a31\u7b49\uff09\u90fd\u6703\u88ab\u5b8c\u6574\u64f7\u53d6\u4e26\u5448\u73fe\u3002</p> <p>\u5982\u9700\u5be6\u969b\u64cd\u4f5c\u7bc4\u4f8b\uff0c\u4f60\u53ef\u4ee5\u53c3\u8003\u4e00\u4efd\u5c55\u793a Google ADK \u8207 AgentOps \u7d50\u5408\u4e0b\u300c\u4eba\u5de5\u5be9\u6838\u6d41\u7a0b\u300d\u7684 Jupyter Notebook \u7bc4\u4f8b\uff1a Google ADK Human Approval Example on GitHub\u3002</p> <p>\u6b64\u7bc4\u4f8b\u5c55\u793a\u4e86\u591a\u6b65\u9a5f agent \u6d41\u7a0b\u7d50\u5408\u5de5\u5177\u4f7f\u7528\u6642\uff0c\u5728 AgentOps \u7684\u8996\u89ba\u5316\u6548\u679c\u3002</p>"},{"location":"observability/agentops/#_1","title":"\u512a\u9ede","text":"<ul> <li>\u8f15\u9b06\u8a2d\u5b9a\uff1a \u53ea\u9700\u6975\u5c11\u7a0b\u5f0f\u78bc\u8b8a\u52d5\uff0c\u5373\u53ef\u5b8c\u6574\u8ffd\u8e64 ADK\u3002</li> <li>\u6df1\u5165\u53ef\u8996\u6027\uff1a \u5145\u5206\u7406\u89e3\u8907\u96dc ADK agent \u6d41\u7a0b\u7684\u5167\u90e8\u904b\u4f5c\u3002</li> <li>\u66f4\u5feb\u9664\u932f\uff1a \u900f\u904e\u8a73\u7d30\u8ffd\u8e64\u8cc7\u6599\uff0c\u5feb\u901f\u5b9a\u4f4d\u554f\u984c\u3002</li> <li>\u6548\u80fd\u6700\u4f73\u5316\uff1a \u5206\u6790\u5ef6\u9072\u8207 token \u4f7f\u7528\u60c5\u5f62\u3002</li> </ul> <p>\u6574\u5408 AgentOps \u5f8c\uff0cADK \u958b\u767c\u8005\u80fd\u5927\u5e45\u63d0\u5347\u5efa\u69cb\u3001\u9664\u932f\u8207\u7dad\u8b77\u9ad8\u53ef\u9760\u5ea6 AI agent \u7684\u80fd\u529b\u3002</p>"},{"location":"observability/agentops/#_2","title":"\u9032\u4e00\u6b65\u8cc7\u8a0a","text":"<p>\u7acb\u5373\u5efa\u7acb AgentOps \u5e33\u865f\u958b\u59cb\u9ad4\u9a57\u3002\u5982\u6709\u529f\u80fd\u9700\u6c42\u6216\u932f\u8aa4\u56de\u5831\uff0c\u8acb\u806f\u7e6b AgentOps \u5718\u968a\uff1aAgentOps Repo\u3002</p>"},{"location":"observability/agentops/#_3","title":"\u5176\u4ed6\u9023\u7d50","text":"<p>\ud83d\udc26 Twitter   \u2022   \ud83d\udce2 Discord   \u2022   \ud83d\udd87\ufe0f AgentOps Dashboard   \u2022   \ud83d\udcd9 Documentation</p>"},{"location":"observability/arize-ax.en/","title":"Agent Observability with Arize AX","text":"<p>Arize AX is a production-grade observability platform for monitoring, debugging, and improving LLM applications and AI Agents at scale. It provides comprehensive tracing, evaluation, and monitoring capabilities for your Google ADK applications. To get started, sign up for a free account. </p> <p>For an open-source, self-hosted alternative, check out Phoenix.</p>"},{"location":"observability/arize-ax.en/#overview","title":"Overview","text":"<p>Arize AX can automatically collect traces from Google ADK using OpenInference instrumentation, allowing you to:</p> <ul> <li>Trace agent interactions - Automatically capture every agent run, tool call, model request, and response with context and metadata</li> <li>Evaluate performance - Assess agent behavior using custom or pre-built evaluators and run experiments to test agent configurations</li> <li>Monitor in production - Set up real-time dashboards and alerts to track performance</li> <li>Debug issues - Analyze detailed traces to quickly identify bottlenecks, failed tool calls, and any unexpected agent behavior</li> </ul> <p></p>"},{"location":"observability/arize-ax.en/#installation","title":"Installation","text":"<p>Install the required packages:</p> <pre><code>pip install openinference-instrumentation-google-adk google-adk arize-otel\n</code></pre>"},{"location":"observability/arize-ax.en/#setup","title":"Setup","text":""},{"location":"observability/arize-ax.en/#configure-environment-variables","title":"1. Configure Environment Variables","text":"<p>Set your Google API key:</p> <pre><code>export GOOGLE_API_KEY=[your_key_here]\n</code></pre>"},{"location":"observability/arize-ax.en/#connect-your-application-to-arize-ax","title":"2. Connect your application to Arize AX","text":"<pre><code>from arize.otel import register\n\n# Register with Arize AX\ntracer_provider = register(\n    space_id=\"your-space-id\",      # Found in app space settings page\n    api_key=\"your-api-key\",        # Found in app space settings page\n    project_name=\"your-project-name\"  # Name this whatever you prefer\n)\n\n# Import and configure the automatic instrumentor from OpenInference\nfrom openinference.instrumentation.google_adk import GoogleADKInstrumentor\n\n# Finish automatic instrumentation\nGoogleADKInstrumentor().instrument(tracer_provider=tracer_provider)\n</code></pre>"},{"location":"observability/arize-ax.en/#observe","title":"Observe","text":"<p>Now that you have tracing setup, all Google ADK SDK requests will be streamed to Arize AX for observability and evaluation.</p> <pre><code>import nest_asyncio\nnest_asyncio.apply()\n\nfrom google.adk.agents import Agent\nfrom google.adk.runners import InMemoryRunner\nfrom google.genai import types\n\n# Define a tool function\ndef get_weather(city: str) -&gt; dict:\n    \"\"\"Retrieves the current weather report for a specified city.\n\n    Args:\n        city (str): The name of the city for which to retrieve the weather report.\n\n    Returns:\n        dict: status and result or error msg.\n    \"\"\"\n    if city.lower() == \"new york\":\n        return {\n            \"status\": \"success\",\n            \"report\": (\n                \"The weather in New York is sunny with a temperature of 25 degrees\"\n                \" Celsius (77 degrees Fahrenheit).\"\n            ),\n        }\n    else:\n        return {\n            \"status\": \"error\",\n            \"error_message\": f\"Weather information for '{city}' is not available.\",\n        }\n\n# Create an agent with tools\nagent = Agent(\n    name=\"weather_agent\",\n    model=\"gemini-2.0-flash-exp\",\n    description=\"Agent to answer questions using weather tools.\",\n    instruction=\"You must use the available tools to find an answer.\",\n    tools=[get_weather]\n)\n\napp_name = \"weather_app\"\nuser_id = \"test_user\"\nsession_id = \"test_session\"\nrunner = InMemoryRunner(agent=agent, app_name=app_name)\nsession_service = runner.session_service\n\nawait session_service.create_session(\n    app_name=app_name,\n    user_id=user_id,\n    session_id=session_id\n)\n\n# Run the agent (all interactions will be traced)\nasync for event in runner.run_async(\n    user_id=user_id,\n    session_id=session_id,\n    new_message=types.Content(role=\"user\", parts=[\n        types.Part(text=\"What is the weather in New York?\")]\n    )\n):\n    if event.is_final_response():\n        print(event.content.parts[0].text.strip())\n</code></pre>"},{"location":"observability/arize-ax.en/#view-results-in-arize-ax","title":"View Results in Arize AX","text":""},{"location":"observability/arize-ax.en/#support-and-resources","title":"Support and Resources","text":"<ul> <li>Arize AX Documentation</li> <li>Arize Community Slack</li> <li>OpenInference Package</li> </ul>"},{"location":"observability/arize-ax/","title":"\u4f7f\u7528 Arize AX \u9032\u884c Agent \u53ef\u89c0\u6e2c\u6027","text":"<p>Arize AX \u662f\u4e00\u500b\u5177\u5099\u751f\u7522\u7b49\u7d1a\u7684\u53ef\u89c0\u6e2c\u6027\u5e73\u53f0\uff0c\u53ef\u7528\u65bc\u5927\u898f\u6a21\u76e3\u63a7\u3001\u9664\u932f\u53ca\u512a\u5316\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u61c9\u7528\u7a0b\u5f0f\u8207 AI agent\u3002\u5b83\u70ba\u4f60\u7684 Google Agent Development Kit (ADK) \u61c9\u7528\u7a0b\u5f0f\u63d0\u4f9b\u5b8c\u6574\u7684\u8ffd\u8e64\u3001\u8a55\u4f30\u8207\u76e3\u63a7\u80fd\u529b\u3002\u958b\u59cb\u4f7f\u7528\u524d\uff0c\u8acb\u5148\u8a3b\u518a\u514d\u8cbb\u5e33\u865f\u3002</p> <p>\u82e5\u4f60\u9700\u8981\u958b\u6e90\u4e14\u53ef\u81ea\u6211\u8a17\u7ba1\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u8acb\u53c3\u8003 Phoenix\u3002</p>"},{"location":"observability/arize-ax/#_1","title":"\u6982\u89bd","text":"<p>Arize AX \u53ef\u900f\u904e OpenInference instrumentation \u81ea\u52d5\u5f9e Google Agent Development Kit (ADK) \u6536\u96c6\u8ffd\u8e64\u8cc7\u6599\uff0c\u8b93\u4f60\u80fd\u5920\uff1a</p> <ul> <li>\u8ffd\u8e64 agent \u4e92\u52d5 \u2014 \u81ea\u52d5\u64f7\u53d6\u6bcf\u4e00\u6b21 agent \u57f7\u884c\u3001\u5de5\u5177\u547c\u53eb (tool calls)\u3001\u6a21\u578b\u8acb\u6c42\u8207\u56de\u61c9\uff0c\u4e26\u4fdd\u7559\u76f8\u95dc\u4e0a\u4e0b\u6587\u8207\u4e2d\u7e7c\u8cc7\u6599</li> <li>\u8a55\u4f30\u6548\u80fd \u2014 \u4f7f\u7528\u81ea\u8a02\u6216\u5167\u5efa\u7684\u8a55\u4f30\u5668\u4f86\u8a55\u91cf agent \u884c\u70ba\uff0c\u4e26\u57f7\u884c\u5be6\u9a57\u6e2c\u8a66 agent \u8a2d\u5b9a</li> <li>\u751f\u7522\u74b0\u5883\u76e3\u63a7 \u2014 \u5efa\u7acb\u5373\u6642\u5100\u8868\u677f\u8207\u8b66\u793a\uff0c\u8ffd\u8e64\u6548\u80fd\u72c0\u614b</li> <li>\u9664\u932f\u554f\u984c \u2014 \u5206\u6790\u8a73\u7d30\u8ffd\u8e64\u8cc7\u6599\uff0c\u5feb\u901f\u627e\u51fa\u74f6\u9838\u3001\u5931\u6557\u7684\u5de5\u5177\u547c\u53eb (tool calls) \u53ca\u4efb\u4f55\u7570\u5e38\u7684 agent \u884c\u70ba</li> </ul> <p></p>"},{"location":"observability/arize-ax/#_2","title":"\u5b89\u88dd","text":"<p>\u8acb\u5b89\u88dd\u6240\u9700\u5957\u4ef6\uff1a</p> <pre><code>pip install openinference-instrumentation-google-adk google-adk arize-otel\n</code></pre>"},{"location":"observability/arize-ax/#_3","title":"\u8a2d\u5b9a","text":""},{"location":"observability/arize-ax/#configure-environment-variables","title":"1. \u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578","text":"<p>\u8a2d\u5b9a\u4f60\u7684 Google API \u91d1\u9470\uff1a</p> <pre><code>export GOOGLE_API_KEY=[your_key_here]\n</code></pre>"},{"location":"observability/arize-ax/#connect-your-application-to-arize-ax","title":"2. \u5c07\u60a8\u7684\u61c9\u7528\u7a0b\u5f0f\u9023\u63a5\u5230 Arize AX","text":"<pre><code>from arize.otel import register\n\n# Register with Arize AX\ntracer_provider = register(\n    space_id=\"your-space-id\",      # Found in app space settings page\n    api_key=\"your-api-key\",        # Found in app space settings page\n    project_name=\"your-project-name\"  # Name this whatever you prefer\n)\n\n# Import and configure the automatic instrumentor from OpenInference\nfrom openinference.instrumentation.google_adk import GoogleADKInstrumentor\n\n# Finish automatic instrumentation\nGoogleADKInstrumentor().instrument(tracer_provider=tracer_provider)\n</code></pre>"},{"location":"observability/arize-ax/#observe","title":"\u89c0\u5bdf\uff08Observe\uff09","text":"<p>\u73fe\u5728\u4f60\u5df2\u7d93\u5b8c\u6210\u8ffd\u8e64\uff08tracing\uff09\u8a2d\u5b9a\uff0c\u6240\u6709 Google Agent Development Kit (ADK) SDK \u7684\u8acb\u6c42\u90fd\u6703\u4e32\u6d41\u81f3 Arize AX\uff0c\u4ee5\u9032\u884c\u53ef\u89c0\u5bdf\u6027\uff08observability\uff09\u8207\u8a55\u4f30\u3002</p> <pre><code>import nest_asyncio\nnest_asyncio.apply()\n\nfrom google.adk.agents import Agent\nfrom google.adk.runners import InMemoryRunner\nfrom google.genai import types\n\n# Define a tool function\ndef get_weather(city: str) -&gt; dict:\n    \"\"\"Retrieves the current weather report for a specified city.\n\n    Args:\n        city (str): The name of the city for which to retrieve the weather report.\n\n    Returns:\n        dict: status and result or error msg.\n    \"\"\"\n    if city.lower() == \"new york\":\n        return {\n            \"status\": \"success\",\n            \"report\": (\n                \"The weather in New York is sunny with a temperature of 25 degrees\"\n                \" Celsius (77 degrees Fahrenheit).\"\n            ),\n        }\n    else:\n        return {\n            \"status\": \"error\",\n            \"error_message\": f\"Weather information for '{city}' is not available.\",\n        }\n\n# Create an agent with tools\nagent = Agent(\n    name=\"weather_agent\",\n    model=\"gemini-2.0-flash-exp\",\n    description=\"Agent to answer questions using weather tools.\",\n    instruction=\"You must use the available tools to find an answer.\",\n    tools=[get_weather]\n)\n\napp_name = \"weather_app\"\nuser_id = \"test_user\"\nsession_id = \"test_session\"\nrunner = InMemoryRunner(agent=agent, app_name=app_name)\nsession_service = runner.session_service\n\nawait session_service.create_session(\n    app_name=app_name,\n    user_id=user_id,\n    session_id=session_id\n)\n\n# Run the agent (all interactions will be traced)\nasync for event in runner.run_async(\n    user_id=user_id,\n    session_id=session_id,\n    new_message=types.Content(role=\"user\", parts=[\n        types.Part(text=\"What is the weather in New York?\")]\n    )\n):\n    if event.is_final_response():\n        print(event.content.parts[0].text.strip())\n</code></pre>"},{"location":"observability/arize-ax/#arize-ax","title":"\u5728 Arize AX \u4e2d\u6aa2\u8996\u7d50\u679c","text":""},{"location":"observability/arize-ax/#_4","title":"\u652f\u63f4\u8207\u8cc7\u6e90","text":"<ul> <li>Arize AX \u6587\u4ef6\u8aaa\u660e</li> <li>Arize \u793e\u7fa4 Slack</li> <li>OpenInference \u5957\u4ef6</li> </ul>"},{"location":"observability/cloud-trace.en/","title":"Agent Observability with Cloud Trace","text":"<p>With ADK, you\u2019ve already capable of inspecting and observing your agent interaction locally utilizing the powerful web development UI discussed in here. However, if we aim for cloud deployment, we will need a centralized dashboard to observe real traffic.</p> <p>Cloud Trace is a component of Google Cloud Observability. It is a powerful tool for monitoring, debugging, and improving the performance of your applications by focusing specifically on tracing capabilities. For Agent Development Kit (ADK) applications, Cloud Trace enables comprehensive tracing, helping you understand how requests flow through your agent's interactions and identify performance bottlenecks or errors within your AI agents.</p>"},{"location":"observability/cloud-trace.en/#overview","title":"Overview","text":"<p>Cloud Trace is built on OpenTelemetry, an open-source standard that supports many languages and ingestion methods for generating trace data. This aligns with observability practices for ADK applications, which also leverage OpenTelemetry-compatible instrumentation, allowing you to :</p> <ul> <li>Trace agent interactions : Cloud Trace continuously gathers and analyzes trace data from your project, enabling you to rapidly diagnose latency issues and errors within your ADK applications. This automatic data collection simplifies the process of identifying problems in complex agent workflows.</li> <li>Debug issues : Quickly diagnose latency issues and errors by analyzing detailed traces. Crucial for understanding issues that manifest as increased communication latency across different services or during specific agent actions like tool calls.</li> <li>In-depth Analysis and Visualization: Trace Explorer is the primary tool for analyzing traces, offering visual aids like heatmaps for span duration and line charts for request/error rates. It also provides a spans table, groupable by service and operation, which gives one-click access to representative traces and a waterfall view to easily identify bottlenecks and sources of errors within your agent's execution path</li> </ul> <p>The following example will assume the following agent directory structure</p> <pre><code>working_dir/\n\u251c\u2500\u2500 weather_agent/\n\u2502   \u251c\u2500\u2500 agent.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 deploy_agent_engine.py\n\u2514\u2500\u2500 deploy_fast_api_app.py\n\u2514\u2500\u2500 agent_runner.py\n</code></pre> <pre><code># weather_agent/agent.py\n\nimport os\nfrom google.adk.agents import Agent\n\nos.environ.setdefault(\"GOOGLE_CLOUD_PROJECT\", \"{your-project-id}\")\nos.environ.setdefault(\"GOOGLE_CLOUD_LOCATION\", \"global\")\nos.environ.setdefault(\"GOOGLE_GENAI_USE_VERTEXAI\", \"True\")\n\n\n# Define a tool function\ndef get_weather(city: str) -&gt; dict:\n    \"\"\"Retrieves the current weather report for a specified city.\n\n    Args:\n        city (str): The name of the city for which to retrieve the weather report.\n\n    Returns:\n        dict: status and result or error msg.\n    \"\"\"\n    if city.lower() == \"new york\":\n        return {\n            \"status\": \"success\",\n            \"report\": (\n                \"The weather in New York is sunny with a temperature of 25 degrees\"\n                \" Celsius (77 degrees Fahrenheit).\"\n            ),\n        }\n    else:\n        return {\n            \"status\": \"error\",\n            \"error_message\": f\"Weather information for '{city}' is not available.\",\n        }\n\n\n# Create an agent with tools\nroot_agent = Agent(\n    name=\"weather_agent\",\n    model=\"gemini-2.5-flash\",\n    description=\"Agent to answer questions using weather tools.\",\n    instruction=\"You must use the available tools to find an answer.\",\n    tools=[get_weather],\n)\n</code></pre>"},{"location":"observability/cloud-trace.en/#cloud-trace-setup","title":"Cloud Trace Setup","text":""},{"location":"observability/cloud-trace.en/#setup-for-agent-engine-deployment","title":"Setup for Agent Engine Deployment","text":""},{"location":"observability/cloud-trace.en/#agent-engine-deployment-from-adk-cli","title":"Agent Engine Deployment - from ADK CLI","text":"<p>You can enable cloud tracing by adding <code>--trace_to_cloud</code> flag when deploying your agent using <code>adk deploy agent_engine</code> command for agent engine deployment.</p> <pre><code>adk deploy agent_engine \\\n    --project=$GOOGLE_CLOUD_PROJECT \\\n    --region=$GOOGLE_CLOUD_LOCATION \\\n    --staging_bucket=$STAGING_BUCKET \\\n    --trace_to_cloud \\\n    $AGENT_PATH\n</code></pre>"},{"location":"observability/cloud-trace.en/#agent-engine-deployment-from-python-sdk","title":"Agent Engine Deployment - from Python SDK","text":"<p>If you prefer using Python SDK, you can enable cloud tracing by adding <code>enable_tracing=True</code> when initialize the <code>AdkApp</code> object</p> <pre><code># deploy_agent_engine.py\n\nfrom vertexai.preview import reasoning_engines\nfrom vertexai import agent_engines\nfrom weather_agent.agent import root_agent\n\nimport vertexai\n\nPROJECT_ID = \"{your-project-id}\"\nLOCATION = \"{your-preferred-location}\"\nSTAGING_BUCKET = \"{your-staging-bucket}\"\n\nvertexai.init(\n    project=PROJECT_ID,\n    location=LOCATION,\n    staging_bucket=STAGING_BUCKET,\n)\n\nadk_app = reasoning_engines.AdkApp(\n    agent=root_agent,\n    enable_tracing=True,\n)\n\n\nremote_app = agent_engines.create(\n    agent_engine=adk_app,\n    extra_packages=[\n        \"./weather_agent\",\n    ],\n    requirements=[\n        \"google-cloud-aiplatform[adk,agent_engines]\",\n    ],\n)\n</code></pre>"},{"location":"observability/cloud-trace.en/#setup-for-cloud-run-deployment","title":"Setup for Cloud Run Deployment","text":""},{"location":"observability/cloud-trace.en/#cloud-run-deployment-from-adk-cli","title":"Cloud Run Deployment - from ADK CLI","text":"<p>You can enable cloud tracing by adding <code>--trace_to_cloud</code> flag when deploying your agent using <code>adk deploy cloud_run</code> command for cloud run deployment.</p> <pre><code>adk deploy cloud_run \\\n    --project=$GOOGLE_CLOUD_PROJECT \\\n    --region=$GOOGLE_CLOUD_LOCATION \\\n    --trace_to_cloud \\\n    $AGENT_PATH\n</code></pre> <p>If you want to enable cloud tracing and using a customized agent service deployment on Cloud Run, you can refer to the Setup for Customized Deployment section below</p>"},{"location":"observability/cloud-trace.en/#setup-for-customized-deployment","title":"Setup for Customized Deployment","text":""},{"location":"observability/cloud-trace.en/#from-built-in-get_fast_api_app-module","title":"From Built-in <code>get_fast_api_app</code> Module","text":"<p>If you want to customize your own agent service, you can enable cloud tracing by initialize the FastAPI app using built-in <code>get_fast_api_app</code> module and set <code>trace_to_cloud=True</code></p> <pre><code># deploy_fast_api_app.py\n\nimport os\nfrom google.adk.cli.fast_api import get_fast_api_app\nfrom fastapi import FastAPI\n\n# Set GOOGLE_CLOUD_PROJECT environment variable for cloud tracing\nos.environ.setdefault(\"GOOGLE_CLOUD_PROJECT\", \"alvin-exploratory-2\")\n\n# Discover the `weather_agent` directory in current working dir\nAGENT_DIR = os.path.dirname(os.path.abspath(__file__))\n\n# Create FastAPI app with enabled cloud tracing\napp: FastAPI = get_fast_api_app(\n    agents_dir=AGENT_DIR,\n    web=True,\n    trace_to_cloud=True,\n)\n\napp.title = \"weather-agent\"\napp.description = \"API for interacting with the Agent weather-agent\"\n\n\n# Main execution\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8080)\n</code></pre>"},{"location":"observability/cloud-trace.en/#from-customized-agent-runner","title":"From Customized Agent Runner","text":"<p>If you want to fully customize your ADK agent runtime, you can enable cloud tracing by using <code>CloudTraceSpanExporter</code> module from Opentelemetry.</p> <pre><code># agent_runner.py\n\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom weather_agent.agent import root_agent as weather_agent\nfrom google.genai.types import Content, Part\nfrom opentelemetry import trace\nfrom opentelemetry.exporter.cloud_trace import CloudTraceSpanExporter\nfrom opentelemetry.sdk.trace import export\nfrom opentelemetry.sdk.trace import TracerProvider\n\nAPP_NAME = \"weather_agent\"\nUSER_ID = \"u_123\"\nSESSION_ID = \"s_123\"\n\nprovider = TracerProvider()\nprocessor = export.BatchSpanProcessor(\n    CloudTraceSpanExporter(project_id=\"{your-project-id}\")\n)\nprovider.add_span_processor(processor)\ntrace.set_tracer_provider(provider)\n\nsession_service = InMemorySessionService()\nrunner = Runner(agent=weather_agent, app_name=APP_NAME, session_service=session_service)\n\n\nasync def main():\n    session = await session_service.get_session(\n        app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID\n    )\n    if session is None:\n        session = await session_service.create_session(\n            app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID\n        )\n\n    user_content = Content(\n        role=\"user\", parts=[Part(text=\"what's weather in paris?\")]\n    )\n\n    final_response_content = \"No response\"\n    async for event in runner.run_async(\n        user_id=USER_ID, session_id=SESSION_ID, new_message=user_content\n    ):\n        if event.is_final_response() and event.content and event.content.parts:\n            final_response_content = event.content.parts[0].text\n\n    print(final_response_content)\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"observability/cloud-trace.en/#inspect-cloud-traces","title":"Inspect Cloud Traces","text":"<p>After the setup is complete, whenever you interact with the agent it will automatically send trace data to Cloud Trace. You can inspect the traces by going to console.cloud.google.com and visit the Trace Explorer on the configured Google Cloud Project</p> <p></p> <p>And then you will see all available traces produced by ADK agent which configured in several span names such as <code>invocation</code> , <code>agent_run</code> . <code>call_llm</code> and <code>execute_tool</code></p> <p></p> <p>If you click on one of the traces, you will see the waterfall view of the detailed process, similar to what we see in the web development UI with <code>adk web</code> command.</p> <p></p>"},{"location":"observability/cloud-trace.en/#resources","title":"Resources","text":"<ul> <li>Google Cloud Trace Documentation</li> </ul>"},{"location":"observability/cloud-trace/","title":"\u4f7f\u7528 Cloud Trace \u76e3\u63a7 Agent Observability","text":"<p>\u900f\u904e Agent Development Kit (ADK)\uff0c\u4f60\u5df2\u7d93\u80fd\u5920\u5229\u7528\u9019\u88e1\u4ecb\u7d39\u7684\u5f37\u5927\u7db2\u9801\u958b\u767c UI\uff0c\u5728\u672c\u6a5f\u6aa2\u67e5\u4e26\u89c0\u5bdf agent \u7684\u4e92\u52d5\u3002\u7136\u800c\uff0c\u82e5\u76ee\u6a19\u662f\u96f2\u7aef\u90e8\u7f72\uff0c\u6211\u5011\u5247\u9700\u8981\u4e00\u500b\u96c6\u4e2d\u5f0f\u5100\u8868\u677f\u4f86\u89c0\u5bdf\u5be6\u969b\u6d41\u91cf\u3002</p> <p>Cloud Trace \u662f Google Cloud Observability \u7684\u4e00\u500b\u7d44\u4ef6\u3002\u5b83\u662f\u4e00\u6b3e\u5c08\u6ce8\u65bc\u8ffd\u8e64\uff08tracing\uff09\u529f\u80fd\u7684\u5f37\u5927\u5de5\u5177\uff0c\u53ef\u7528\u65bc\u76e3\u63a7\u3001\u9664\u932f\uff0c\u4ee5\u53ca\u63d0\u5347\u61c9\u7528\u7a0b\u5f0f\u6548\u80fd\u3002\u5c0d\u65bc Agent Development Kit (ADK) \u61c9\u7528\u4f86\u8aaa\uff0cCloud Trace \u80fd\u5920\u63d0\u4f9b\u5b8c\u6574\u7684\u8ffd\u8e64\u80fd\u529b\uff0c\u5354\u52a9\u4f60\u4e86\u89e3\u8acb\u6c42\u5982\u4f55\u6d41\u7d93 agent \u7684\u4e92\u52d5\u6d41\u7a0b\uff0c\u4e26\u627e\u51fa AI agent \u4e2d\u7684\u6548\u80fd\u74f6\u9838\u6216\u932f\u8aa4\u3002</p>"},{"location":"observability/cloud-trace/#_1","title":"\u6982\u89bd","text":"<p>Cloud Trace \u5efa\u69cb\u65bc OpenTelemetry \u4e4b\u4e0a\uff0c\u9019\u662f\u4e00\u500b\u652f\u63f4\u591a\u7a2e\u8a9e\u8a00\u8207\u8cc7\u6599\u6536\u96c6\u65b9\u5f0f\u7684\u958b\u6e90\u6a19\u6e96\u3002\u9019\u8207 Agent Development Kit (ADK) \u61c9\u7528\u7684\u53ef\u89c0\u6e2c\u6027\u5be6\u8e10\u76f8\u7b26\uff0cADK \u4e5f\u63a1\u7528\u8207 OpenTelemetry \u76f8\u5bb9\u7684\u5100\u5668\u5316\u65b9\u5f0f\uff0c\u8b93\u4f60\u53ef\u4ee5\uff1a</p> <ul> <li>\u8ffd\u8e64 agent \u4e92\u52d5\uff1aCloud Trace \u6301\u7e8c\u5f9e\u4f60\u7684\u5c08\u6848\u6536\u96c6\u4e26\u5206\u6790\u8ffd\u8e64\u8cc7\u6599\uff0c\u8b93\u4f60\u80fd\u5feb\u901f\u8a3a\u65b7 ADK \u61c9\u7528\u4e2d\u7684\u5ef6\u9072\u554f\u984c\u8207\u932f\u8aa4\u3002\u9019\u7a2e\u81ea\u52d5\u5316\u8cc7\u6599\u6536\u96c6\uff0c\u7c21\u5316\u4e86\u5728\u8907\u96dc agent \u5de5\u4f5c\u6d41\u7a0b\u4e2d\u627e\u51fa\u554f\u984c\u7684\u904e\u7a0b\u3002</li> <li>\u9664\u932f\u554f\u984c\uff1a\u900f\u904e\u5206\u6790\u8a73\u7d30\u7684\u8ffd\u8e64\u8cc7\u6599\uff0c\u80fd\u5feb\u901f\u8a3a\u65b7\u5ef6\u9072\u554f\u984c\u8207\u932f\u8aa4\u3002\u9019\u5c0d\u65bc\u7406\u89e3\u8de8\u670d\u52d9\u6e9d\u901a\u5ef6\u9072\u589e\u52a0\uff0c\u6216\u5728\u7279\u5b9a agent \u884c\u70ba\uff08\u5982\u5de5\u5177\u547c\u53eb (tool calls)\uff09\u671f\u9593\u51fa\u73fe\u7684\u554f\u984c\u5c24\u5176\u91cd\u8981\u3002</li> <li>\u6df1\u5165\u5206\u6790\u8207\u8996\u89ba\u5316\uff1aTrace Explorer \u662f\u5206\u6790\u8ffd\u8e64\u8cc7\u6599\u7684\u4e3b\u8981\u5de5\u5177\uff0c\u63d0\u4f9b\u5982 span \u6301\u7e8c\u6642\u9593\u71b1\u5716\u3001\u8acb\u6c42/\u932f\u8aa4\u7387\u6298\u7dda\u5716\u7b49\u8996\u89ba\u5316\u8f14\u52a9\u5de5\u5177\u3002\u5b83\u4e5f\u63d0\u4f9b\u53ef\u4f9d\u670d\u52d9\u8207\u64cd\u4f5c\u5206\u7d44\u7684 spans \u8868\u683c\uff0c\u8b93\u4f60\u4e00\u9375\u5b58\u53d6\u4ee3\u8868\u6027\u8ffd\u8e64\uff0c\u4ee5\u53ca\u7011\u5e03\u5716\u8996\u5716\uff0c\u65b9\u4fbf\u5feb\u901f\u627e\u51fa agent \u57f7\u884c\u8def\u5f91\u4e2d\u7684\u74f6\u9838\u8207\u932f\u8aa4\u4f86\u6e90\u3002</li> </ul> <p>\u4ee5\u4e0b\u7bc4\u4f8b\u5c07\u5047\u8a2d\u4f60\u7684 agent \u76ee\u9304\u7d50\u69cb\u5982\u4e0b\uff1a</p> <pre><code>working_dir/\n\u251c\u2500\u2500 weather_agent/\n\u2502   \u251c\u2500\u2500 agent.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 deploy_agent_engine.py\n\u2514\u2500\u2500 deploy_fast_api_app.py\n\u2514\u2500\u2500 agent_runner.py\n</code></pre> <pre><code># weather_agent/agent.py\n\nimport os\nfrom google.adk.agents import Agent\n\nos.environ.setdefault(\"GOOGLE_CLOUD_PROJECT\", \"{your-project-id}\")\nos.environ.setdefault(\"GOOGLE_CLOUD_LOCATION\", \"global\")\nos.environ.setdefault(\"GOOGLE_GENAI_USE_VERTEXAI\", \"True\")\n\n\n# Define a tool function\ndef get_weather(city: str) -&gt; dict:\n    \"\"\"Retrieves the current weather report for a specified city.\n\n    Args:\n        city (str): The name of the city for which to retrieve the weather report.\n\n    Returns:\n        dict: status and result or error msg.\n    \"\"\"\n    if city.lower() == \"new york\":\n        return {\n            \"status\": \"success\",\n            \"report\": (\n                \"The weather in New York is sunny with a temperature of 25 degrees\"\n                \" Celsius (77 degrees Fahrenheit).\"\n            ),\n        }\n    else:\n        return {\n            \"status\": \"error\",\n            \"error_message\": f\"Weather information for '{city}' is not available.\",\n        }\n\n\n# Create an agent with tools\nroot_agent = Agent(\n    name=\"weather_agent\",\n    model=\"gemini-2.5-flash\",\n    description=\"Agent to answer questions using weather tools.\",\n    instruction=\"You must use the available tools to find an answer.\",\n    tools=[get_weather],\n)\n</code></pre>"},{"location":"observability/cloud-trace/#cloud-trace","title":"Cloud Trace \u8a2d\u5b9a","text":""},{"location":"observability/cloud-trace/#agent-engine","title":"Agent Engine \u90e8\u7f72\u8a2d\u5b9a","text":""},{"location":"observability/cloud-trace/#adk-cli-agent-engine","title":"\u900f\u904e ADK CLI \u9032\u884c Agent Engine \u90e8\u7f72","text":"<p>\u7576\u4f60\u4f7f\u7528 <code>adk deploy agent_engine</code> \u6307\u4ee4\u90e8\u7f72 agent engine \u6642\uff0c\u53ef\u4ee5\u52a0\u5165 <code>--trace_to_cloud</code> \u65d7\u6a19\u4f86\u555f\u7528 cloud tracing\u3002</p> <pre><code>adk deploy agent_engine \\\n    --project=$GOOGLE_CLOUD_PROJECT \\\n    --region=$GOOGLE_CLOUD_LOCATION \\\n    --staging_bucket=$STAGING_BUCKET \\\n    --trace_to_cloud \\\n    $AGENT_PATH\n</code></pre>"},{"location":"observability/cloud-trace/#agent-engine-python-sdk","title":"Agent Engine \u90e8\u7f72 - \u4f7f\u7528 Python SDK","text":"<p>\u5982\u679c\u4f60\u504f\u597d\u4f7f\u7528 Python SDK\uff0c\u53ef\u4ee5\u5728\u521d\u59cb\u5316 <code>AdkApp</code> \u7269\u4ef6\u6642\u52a0\u5165 <code>enable_tracing=True</code>\uff0c\u4ee5\u555f\u7528\u96f2\u7aef\u8ffd\u8e64\uff08cloud tracing\uff09\u3002</p> <pre><code># deploy_agent_engine.py\n\nfrom vertexai.preview import reasoning_engines\nfrom vertexai import agent_engines\nfrom weather_agent.agent import root_agent\n\nimport vertexai\n\nPROJECT_ID = \"{your-project-id}\"\nLOCATION = \"{your-preferred-location}\"\nSTAGING_BUCKET = \"{your-staging-bucket}\"\n\nvertexai.init(\n    project=PROJECT_ID,\n    location=LOCATION,\n    staging_bucket=STAGING_BUCKET,\n)\n\nadk_app = reasoning_engines.AdkApp(\n    agent=root_agent,\n    enable_tracing=True,\n)\n\n\nremote_app = agent_engines.create(\n    agent_engine=adk_app,\n    extra_packages=[\n        \"./weather_agent\",\n    ],\n    requirements=[\n        \"google-cloud-aiplatform[adk,agent_engines]\",\n    ],\n)\n</code></pre>"},{"location":"observability/cloud-trace/#cloud-run","title":"Cloud Run \u90e8\u7f72\u8a2d\u5b9a","text":""},{"location":"observability/cloud-trace/#adk-cli-cloud-run","title":"\u900f\u904e ADK CLI \u9032\u884c Cloud Run \u90e8\u7f72","text":"<p>\u7576\u4f60\u4f7f\u7528 <code>adk deploy cloud_run</code> \u547d\u4ee4\u9032\u884c Cloud Run \u90e8\u7f72\u6642\uff0c\u53ea\u9700\u52a0\u4e0a <code>--trace_to_cloud</code> \u65d7\u6a19\uff0c\u5373\u53ef\u555f\u7528\u96f2\u7aef\u8ffd\u8e64\u529f\u80fd\u3002</p> <pre><code>adk deploy cloud_run \\\n    --project=$GOOGLE_CLOUD_PROJECT \\\n    --region=$GOOGLE_CLOUD_LOCATION \\\n    --trace_to_cloud \\\n    $AGENT_PATH\n</code></pre> <p>\u5982\u679c\u4f60\u60f3\u555f\u7528 cloud tracing\uff08\u96f2\u7aef\u8ffd\u8e64\uff09\uff0c\u4e26\u4e14\u5728 Cloud Run \u4e0a\u4f7f\u7528\u81ea\u8a02\u7684 agent \u670d\u52d9\u90e8\u7f72\uff0c\u53ef\u4ee5\u53c3\u8003\u4e0b\u65b9\u7684 Setup for Customized Deployment \u7ae0\u7bc0\u3002</p>"},{"location":"observability/cloud-trace/#setup-for-customized-deployment","title":"Setup for Customized Deployment","text":""},{"location":"observability/cloud-trace/#get_fast_api_app","title":"\u5f9e\u5167\u5efa\u7684 <code>get_fast_api_app</code> \u6a21\u7d44","text":"<p>\u5982\u679c\u4f60\u60f3\u81ea\u8a02\u81ea\u5df1\u7684 agent \u670d\u52d9\uff0c\u53ef\u4ee5\u900f\u904e\u4f7f\u7528\u5167\u5efa\u7684 <code>get_fast_api_app</code> \u6a21\u7d44\u4f86\u521d\u59cb\u5316 FastAPI \u61c9\u7528\u7a0b\u5f0f\uff0c\u4e26\u8a2d\u5b9a <code>trace_to_cloud=True</code>\uff0c\u4ee5\u555f\u7528 cloud tracing\u3002</p> <pre><code># deploy_fast_api_app.py\n\nimport os\nfrom google.adk.cli.fast_api import get_fast_api_app\nfrom fastapi import FastAPI\n\n# Set GOOGLE_CLOUD_PROJECT environment variable for cloud tracing\nos.environ.setdefault(\"GOOGLE_CLOUD_PROJECT\", \"alvin-exploratory-2\")\n\n# Discover the `weather_agent` directory in current working dir\nAGENT_DIR = os.path.dirname(os.path.abspath(__file__))\n\n# Create FastAPI app with enabled cloud tracing\napp: FastAPI = get_fast_api_app(\n    agents_dir=AGENT_DIR,\n    web=True,\n    trace_to_cloud=True,\n)\n\napp.title = \"weather-agent\"\napp.description = \"API for interacting with the Agent weather-agent\"\n\n\n# Main execution\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8080)\n</code></pre>"},{"location":"observability/cloud-trace/#agent-runner","title":"\u5f9e\u81ea\u8a02 Agent Runner","text":"<p>\u5982\u679c\u4f60\u5e0c\u671b\u5b8c\u5168\u81ea\u8a02\u4f60\u7684 Agent Development Kit (ADK) agent \u57f7\u884c\u74b0\u5883\uff0c\u53ef\u4ee5\u900f\u904e\u4f7f\u7528 Opentelemetry \u7684 <code>CloudTraceSpanExporter</code> \u6a21\u7d44\u4f86\u555f\u7528\u96f2\u7aef\u8ffd\u8e64\uff08cloud tracing\uff09\u3002</p> <pre><code># agent_runner.py\n\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom weather_agent.agent import root_agent as weather_agent\nfrom google.genai.types import Content, Part\nfrom opentelemetry import trace\nfrom opentelemetry.exporter.cloud_trace import CloudTraceSpanExporter\nfrom opentelemetry.sdk.trace import export\nfrom opentelemetry.sdk.trace import TracerProvider\n\nAPP_NAME = \"weather_agent\"\nUSER_ID = \"u_123\"\nSESSION_ID = \"s_123\"\n\nprovider = TracerProvider()\nprocessor = export.BatchSpanProcessor(\n    CloudTraceSpanExporter(project_id=\"{your-project-id}\")\n)\nprovider.add_span_processor(processor)\ntrace.set_tracer_provider(provider)\n\nsession_service = InMemorySessionService()\nrunner = Runner(agent=weather_agent, app_name=APP_NAME, session_service=session_service)\n\n\nasync def main():\n    session = await session_service.get_session(\n        app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID\n    )\n    if session is None:\n        session = await session_service.create_session(\n            app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID\n        )\n\n    user_content = Content(\n        role=\"user\", parts=[Part(text=\"what's weather in paris?\")]\n    )\n\n    final_response_content = \"No response\"\n    async for event in runner.run_async(\n        user_id=USER_ID, session_id=SESSION_ID, new_message=user_content\n    ):\n        if event.is_final_response() and event.content and event.content.parts:\n            final_response_content = event.content.parts[0].text\n\n    print(final_response_content)\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"observability/cloud-trace/#cloud-trace_1","title":"\u6aa2\u8996 Cloud Trace \u8ffd\u8e64\u7d00\u9304","text":"<p>\u5b8c\u6210\u8a2d\u5b9a\u5f8c\uff0c\u6bcf\u7576\u4f60\u8207 agent \u4e92\u52d5\u6642\uff0c\u7cfb\u7d71\u6703\u81ea\u52d5\u5c07\u8ffd\u8e64\u8cc7\u6599\u50b3\u9001\u5230 Cloud Trace\u3002\u4f60\u53ef\u4ee5\u524d\u5f80 console.cloud.google.com\uff0c\u4e26\u5728\u5df2\u8a2d\u5b9a\u7684 Google Cloud \u5c08\u6848\u4e2d\u9020\u8a2a Trace Explorer \u4f86\u6aa2\u8996\u9019\u4e9b\u8ffd\u8e64\u7d00\u9304\u3002</p> <p></p> <p>\u63a5\u8457\uff0c\u4f60\u5c07\u6703\u770b\u5230\u6240\u6709\u7531 Agent Development Kit (ADK) agent \u6240\u7522\u751f\u7684\u53ef\u7528\u8ffd\u8e64\u7d00\u9304\uff0c\u9019\u4e9b\u8ffd\u8e64\u6703\u4ee5\u591a\u500b span \u540d\u7a31\u986f\u793a\uff0c\u4f8b\u5982 <code>invocation</code>\u3001<code>agent_run</code>\u3001<code>call_llm</code> \u548c <code>execute_tool</code>\u3002</p> <p></p> <p>\u5982\u679c\u4f60\u9ede\u64ca\u5176\u4e2d\u4e00\u7b46\u8ffd\u8e64\u7d00\u9304\uff0c\u5c07\u6703\u770b\u5230\u8a73\u7d30\u6d41\u7a0b\u7684\u7011\u5e03\u5716\uff08waterfall view\uff09\uff0c\u9019\u8207\u6211\u5011\u5728\u7db2\u9801\u958b\u767c UI \u4e2d\u4f7f\u7528 <code>adk web</code> \u6307\u4ee4\u6642\u6240\u898b\u7684\u756b\u9762\u985e\u4f3c\u3002</p> <p></p>"},{"location":"observability/cloud-trace/#_2","title":"\u76f8\u95dc\u8cc7\u6e90","text":"<ul> <li>Google Cloud Trace \u6587\u4ef6\u8aaa\u660e</li> </ul>"},{"location":"observability/logging.en/","title":"Logging in the Agent Development Kit (ADK)","text":"<p>The Agent Development Kit (ADK) uses Python's standard <code>logging</code> module to provide flexible and powerful logging capabilities. Understanding how to configure and interpret these logs is crucial for monitoring agent behavior and debugging issues effectively.</p>"},{"location":"observability/logging.en/#logging-philosophy","title":"Logging Philosophy","text":"<p>ADK's approach to logging is to provide detailed diagnostic information without being overly verbose by default. It is designed to be configured by the application developer, allowing you to tailor the log output to your specific needs, whether in a development or production environment.</p> <ul> <li>Standard Library: It uses the standard <code>logging</code> library, so any configuration or handler that works with it will work with ADK.</li> <li>Hierarchical Loggers: Loggers are named hierarchically based on the module path (e.g., <code>google_adk.google.adk.agents.llm_agent</code>), allowing for fine-grained control over which parts of the framework produce logs.</li> <li>User-Configured: The framework does not configure logging itself. It is the responsibility of the developer using the framework to set up the desired logging configuration in their application's entry point.</li> </ul>"},{"location":"observability/logging.en/#how-to-configure-logging","title":"How to Configure Logging","text":"<p>You can configure logging in your main application script (e.g., <code>main.py</code>) before you initialize and run your agent. The simplest way is to use <code>logging.basicConfig</code>.</p>"},{"location":"observability/logging.en/#example-configuration","title":"Example Configuration","text":"<p>To enable detailed logging, including <code>DEBUG</code> level messages, add the following to the top of your script:</p> <pre><code>import logging\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'\n)\n\n# Your ADK agent code follows...\n# from google.adk.agents import LlmAgent\n# ...\n</code></pre>"},{"location":"observability/logging.en/#configuring-logging-with-the-adk-cli","title":"Configuring Logging with the ADK CLI","text":"<p>When running agents using the ADK's built-in web or API servers, you can easily control the log verbosity directly from the command line. The <code>adk web</code>, <code>adk api_server</code>, and <code>adk deploy cloud_run</code> commands all accept a <code>--log_level</code> option.</p> <p>This provides a convenient way to set the logging level without modifying your agent's source code.</p> <p>Note: The command-line setting always takes precedence over the programmatic configuration (like <code>logging.basicConfig</code>) for ADK's loggers. It's recommended to use <code>INFO</code> or <code>WARNING</code> in production and enable <code>DEBUG</code> only when troubleshooting.</p> <p>Example using <code>adk web</code>:</p> <p>To start the web server with <code>DEBUG</code> level logging, run:</p> <pre><code>adk web --log_level DEBUG path/to/your/agents_dir\n</code></pre> <p>The available log levels for the <code>--log_level</code> option are:</p> <ul> <li><code>DEBUG</code></li> <li><code>INFO</code> (default)</li> <li><code>WARNING</code></li> <li><code>ERROR</code></li> <li><code>CRITICAL</code></li> </ul> <p>You can also use <code>-v</code> or <code>--verbose</code> as a a shortcut for <code>--log_level DEBUG</code>.</p> <pre><code>adk web -v path/to/your/agents_dir\n</code></pre>"},{"location":"observability/logging.en/#log-levels","title":"Log Levels","text":"<p>ADK uses standard log levels to categorize messages. The configured level determines what information gets logged.</p> Level Description Type of Information Logged <code>DEBUG</code> Crucial for debugging. The most verbose level for fine-grained diagnostic information. <ul><li>Full LLM Prompts: The complete request sent to the language model, including system instructions, history, and tools.</li><li>Detailed API responses from services.</li><li>Internal state transitions and variable values.</li></ul> <code>INFO</code> General information about the agent's lifecycle. <ul><li>Agent initialization and startup.</li><li>Session creation and deletion events.</li><li>Execution of a tool, including its name and arguments.</li></ul> <code>WARNING</code> Indicates a potential issue or deprecated feature use. The agent continues to function, but attention may be required. <ul><li>Use of deprecated methods or parameters.</li><li>Non-critical errors that the system recovered from.</li></ul> <code>ERROR</code> A serious error that prevented an operation from completing. <ul><li>Failed API calls to external services (e.g., LLM, Session Service).</li><li>Unhandled exceptions during agent execution.</li><li>Configuration errors.</li></ul> <p>Note: It is recommended to use <code>INFO</code> or <code>WARNING</code> in production environments. Only enable <code>DEBUG</code> when actively troubleshooting an issue, as <code>DEBUG</code> logs can be very verbose and may contain sensitive information.</p>"},{"location":"observability/logging.en/#reading-and-understanding-the-logs","title":"Reading and Understanding the Logs","text":"<p>The <code>format</code> string in the <code>basicConfig</code> example determines the structure of each log message.  </p> <p>Here\u2019s a sample log entry:</p> <pre><code>2025-07-08 11:22:33,456 - DEBUG - google_adk.google.adk.models.google_llm - LLM Request: contents { ... }\n</code></pre> Log Segment Format Specifier Meaning <code>2025-07-08 11:22:33,456</code> <code>%(asctime)s</code> Timestamp <code>DEBUG</code> <code>%(levelname)s</code> Severity level <code>google_adk.models.google_llm</code> <code>%(name)s</code> Logger name (the module that produced the log) <code>LLM Request: contents { ... }</code> <code>%(message)s</code> The actual log message <p>By reading the logger name, you can immediately pinpoint the source of the log and understand its context within the agent's architecture.</p>"},{"location":"observability/logging.en/#debugging-with-logs-a-practical-example","title":"Debugging with Logs: A Practical Example","text":"<p>Scenario: Your agent is not producing the expected output, and you suspect the prompt being sent to the LLM is incorrect or missing information.</p> <p>Steps:</p> <ol> <li> <p>Enable DEBUG Logging: In your <code>main.py</code>, set the logging level to <code>DEBUG</code> as shown in the configuration example.</p> <pre><code>logging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'\n)\n</code></pre> </li> <li> <p>Run Your Agent: Execute your agent's task as you normally would.</p> </li> <li> <p>Inspect the Logs: Look through the console output for a message from the <code>google.adk.models.google_llm</code> logger that starts with <code>LLM Request:</code>.</p> <pre><code>...\n2025-07-10 15:26:13,778 - DEBUG - google_adk.google.adk.models.google_llm - Sending out request, model: gemini-2.0-flash, backend: GoogleLLMVariant.GEMINI_API, stream: False\n2025-07-10 15:26:13,778 - DEBUG - google_adk.google.adk.models.google_llm - \nLLM Request:\n-----------------------------------------------------------\nSystem Instruction:\n\n      You roll dice and answer questions about the outcome of the dice rolls.\n      You can roll dice of different sizes.\n      You can use multiple tools in parallel by calling functions in parallel(in one request and in one round).\n      It is ok to discuss previous dice roles, and comment on the dice rolls.\n      When you are asked to roll a die, you must call the roll_die tool with the number of sides. Be sure to pass in an integer. Do not pass in a string.\n      You should never roll a die on your own.\n      When checking prime numbers, call the check_prime tool with a list of integers. Be sure to pass in a list of integers. You should never pass in a string.\n      You should not check prime numbers before calling the tool.\n      When you are asked to roll a die and check prime numbers, you should always make the following two function calls:\n      1. You should first call the roll_die tool to get a roll. Wait for the function response before calling the check_prime tool.\n      2. After you get the function response from roll_die tool, you should call the check_prime tool with the roll_die result.\n        2.1 If user asks you to check primes based on previous rolls, make sure you include the previous rolls in the list.\n      3. When you respond, you must include the roll_die result from step 1.\n      You should always perform the previous 3 steps when asking for a roll and checking prime numbers.\n      You should not rely on the previous history on prime results.\n\n\nYou are an agent. Your internal name is \"hello_world_agent\".\n\nThe description about you is \"hello world agent that can roll a dice of 8 sides and check prime numbers.\"\n-----------------------------------------------------------\nContents:\n{\"parts\":[{\"text\":\"Roll a 6 sided dice\"}],\"role\":\"user\"}\n{\"parts\":[{\"function_call\":{\"args\":{\"sides\":6},\"name\":\"roll_die\"}}],\"role\":\"model\"}\n{\"parts\":[{\"function_response\":{\"name\":\"roll_die\",\"response\":{\"result\":2}}}],\"role\":\"user\"}\n-----------------------------------------------------------\nFunctions:\nroll_die: {'sides': {'type': &lt;Type.INTEGER: 'INTEGER'&gt;}} \ncheck_prime: {'nums': {'items': {'type': &lt;Type.INTEGER: 'INTEGER'&gt;}, 'type': &lt;Type.ARRAY: 'ARRAY'&gt;}} \n-----------------------------------------------------------\n\n2025-07-10 15:26:13,779 - INFO - google_genai.models - AFC is enabled with max remote calls: 10.\n2025-07-10 15:26:14,309 - INFO - google_adk.google.adk.models.google_llm - \nLLM Response:\n-----------------------------------------------------------\nText:\nI have rolled a 6 sided die, and the result is 2.\n...\n</code></pre> </li> <li> <p>Analyze the Prompt: By examining the <code>System Instruction</code>, <code>contents</code>, <code>functions</code> sections of the logged request, you can verify:</p> <ul> <li>Is the system instruction correct?</li> <li>Is the conversation history (<code>user</code> and <code>model</code> turns) accurate?</li> <li>Is the most recent user query included?</li> <li>Are the correct tools being provided to the model?</li> <li>Are the tools correctly called by the model?</li> <li>How long it takes for the model to respond?</li> </ul> </li> </ol> <p>This detailed output allows you to diagnose a wide range of issues, from incorrect prompt engineering to problems with tool definitions, directly from the log files.</p>"},{"location":"observability/logging/","title":"Agent Development Kit (ADK) \u7684\u65e5\u8a8c\u7d00\u9304","text":"<p>Agent Development Kit (ADK) \u63a1\u7528 Python \u6a19\u6e96\u7684 <code>logging</code> \u6a21\u7d44\uff0c\u63d0\u4f9b\u9748\u6d3b\u4e14\u5f37\u5927\u7684\u65e5\u8a8c\u7d00\u9304\u529f\u80fd\u3002\u4e86\u89e3\u5982\u4f55\u8a2d\u5b9a\u8207\u89e3\u8b80\u9019\u4e9b\u65e5\u8a8c\uff0c\u5c0d\u65bc\u76e3\u63a7 agent \u884c\u70ba\u8207\u6709\u6548\u9664\u932f\u554f\u984c\u81f3\u95dc\u91cd\u8981\u3002</p>"},{"location":"observability/logging/#_1","title":"\u65e5\u8a8c\u7d00\u9304\u7406\u5ff5","text":"<p>ADK \u7684\u65e5\u8a8c\u7d00\u9304\u8a2d\u8a08\u7406\u5ff5\uff0c\u662f\u5728\u4e0d\u904e\u5ea6\u5197\u9577\u7684\u524d\u63d0\u4e0b\uff0c\u63d0\u4f9b\u8a73\u7d30\u7684\u8a3a\u65b7\u8cc7\u8a0a\u3002\u65e5\u8a8c\u7d00\u9304\u53ef\u7531\u61c9\u7528\u7a0b\u5f0f\u958b\u767c\u8005\u81ea\u884c\u8a2d\u5b9a\uff0c\u8b93\u4f60\u80fd\u6839\u64da\u958b\u767c\u6216\u751f\u7522\u74b0\u5883\u7684\u9700\u6c42\uff0c\u8abf\u6574\u65e5\u8a8c\u8f38\u51fa\u5167\u5bb9\u3002</p> <ul> <li>\u6a19\u6e96\u51fd\u5f0f\u5eab\uff1a \u63a1\u7528\u6a19\u6e96\u7684 <code>logging</code> \u51fd\u5f0f\u5eab\uff0c\u56e0\u6b64\u4efb\u4f55\u9069\u7528\u65bc\u8a72\u51fd\u5f0f\u5eab\u7684\u8a2d\u5b9a\u6216 handler\uff0c\u90fd\u80fd\u7528\u65bc ADK\u3002</li> <li>\u968e\u5c64\u5f0f Logger\uff1a Logger \u6703\u4f9d\u64da\u6a21\u7d44\u8def\u5f91\uff08\u4f8b\u5982 <code>google_adk.google.adk.agents.llm_agent</code>\uff09\u4ee5\u968e\u5c64\u5f0f\u547d\u540d\uff0c\u8b93\u4f60\u80fd\u7d30\u7dfb\u63a7\u5236\u6846\u67b6\u4e2d\u54ea\u4e9b\u90e8\u5206\u6703\u7522\u751f\u65e5\u8a8c\u3002</li> <li>\u4f7f\u7528\u8005\u81ea\u8a02\u8a2d\u5b9a\uff1a \u6846\u67b6\u672c\u8eab\u4e0d\u6703\u81ea\u52d5\u8a2d\u5b9a\u65e5\u8a8c\u7d00\u9304\u3002\u958b\u767c\u8005\u9700\u5728\u61c9\u7528\u7a0b\u5f0f\u7684\u9032\u5165\u9ede\u81ea\u884c\u8a2d\u5b9a\u6240\u9700\u7684\u65e5\u8a8c\u7d00\u9304\u7d44\u614b\u3002</li> </ul>"},{"location":"observability/logging/#_2","title":"\u5982\u4f55\u8a2d\u5b9a\u65e5\u8a8c\u7d00\u9304","text":"<p>\u4f60\u53ef\u4ee5\u5728\u4e3b\u8981\u61c9\u7528\u7a0b\u5f0f\u8173\u672c\uff08\u4f8b\u5982 <code>main.py</code>\uff09\u4e2d\uff0c\u5728\u521d\u59cb\u5316\u8207\u57f7\u884c agent \u4e4b\u524d\u8a2d\u5b9a\u65e5\u8a8c\u7d00\u9304\u3002\u6700\u7c21\u55ae\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 <code>logging.basicConfig</code>\u3002</p>"},{"location":"observability/logging/#_3","title":"\u7bc4\u4f8b\u8a2d\u5b9a","text":"<p>\u82e5\u8981\u555f\u7528\u8a73\u7d30\u65e5\u8a8c\u7d00\u9304\uff08\u5305\u542b <code>DEBUG</code> \u7b49\u7d1a\u7684\u8a0a\u606f\uff09\uff0c\u8acb\u5728\u8173\u672c\u6700\u4e0a\u65b9\u52a0\u5165\u4ee5\u4e0b\u5167\u5bb9\uff1a</p> <pre><code>import logging\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'\n)\n\n# Your ADK agent code follows...\n# from google.adk.agents import LlmAgent\n# ...\n</code></pre>"},{"location":"observability/logging/#adk-cli-logging","title":"\u4f7f\u7528 ADK CLI \u8a2d\u5b9a\u65e5\u8a8c\uff08Logging\uff09","text":"<p>\u7576\u4f60\u4f7f\u7528 Agent Development Kit (ADK) \u5167\u5efa\u7684\u7db2\u9801\u4f3a\u670d\u5668\u6216 API \u4f3a\u670d\u5668\u4f86\u57f7\u884c agent \u6642\uff0c\u53ef\u4ee5\u76f4\u63a5\u900f\u904e\u547d\u4ee4\u5217\uff08command line\uff09\u8f15\u9b06\u63a7\u5236\u65e5\u8a8c\u8a73\u7d30\u7a0b\u5ea6\u3002<code>adk web</code>\u3001<code>adk api_server</code> \u548c <code>adk deploy cloud_run</code> \u6307\u4ee4\u7686\u652f\u63f4 <code>--log_level</code> \u9078\u9805\u3002</p> <p>\u9019\u63d0\u4f9b\u4e86\u4e00\u7a2e\u65b9\u4fbf\u7684\u65b9\u5f0f\uff0c\u8b93\u4f60\u7121\u9700\u4fee\u6539 agent \u539f\u59cb\u78bc\u5373\u53ef\u8a2d\u5b9a\u65e5\u8a8c\u7b49\u7d1a\u3002</p> <p>\u6ce8\u610f\uff1a \u5c0d\u65bc ADK \u7684 logger\uff0c\u547d\u4ee4\u5217\u8a2d\u5b9a\u6c38\u9060\u512a\u5148\u65bc\u7a0b\u5f0f\u5167\u8a2d\u5b9a\uff08\u4f8b\u5982 <code>logging.basicConfig</code>\uff09\u3002\u5efa\u8b70\u5728\u6b63\u5f0f\u74b0\u5883\uff08production\uff09\u4e2d\u4f7f\u7528 <code>INFO</code> \u6216 <code>WARNING</code>\uff0c\u50c5\u5728\u9664\u932f\u6642\u555f\u7528 <code>DEBUG</code>\u3002</p> <p>\u4f7f\u7528 <code>adk web</code> \u7684\u7bc4\u4f8b\uff1a</p> <p>\u82e5\u8981\u4ee5 <code>DEBUG</code> \u7b49\u7d1a\u7684\u65e5\u8a8c\u555f\u52d5\u7db2\u9801\u4f3a\u670d\u5668\uff0c\u8acb\u57f7\u884c\uff1a</p> <pre><code>adk web --log_level DEBUG path/to/your/agents_dir\n</code></pre> <p><code>--log_level</code> \u9078\u9805\u53ef\u7528\u7684\u65e5\u8a8c\u7b49\u7d1a\u6709\uff1a</p> <ul> <li><code>DEBUG</code></li> <li><code>INFO</code>\uff08\u9810\u8a2d\u503c\uff09</li> <li><code>WARNING</code></li> <li><code>ERROR</code></li> <li><code>CRITICAL</code></li> </ul> <p>\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>-v</code> \u6216 <code>--verbose</code> \u4f5c\u70ba <code>--log_level DEBUG</code> \u7684\u5feb\u6377\u65b9\u5f0f\u3002</p> <pre><code>adk web -v path/to/your/agents_dir\n</code></pre>"},{"location":"observability/logging/#_4","title":"\u65e5\u8a8c\u7b49\u7d1a","text":"<p>Agent Development Kit (ADK) \u63a1\u7528\u6a19\u6e96\u65e5\u8a8c\u7b49\u7d1a\u4f86\u5206\u985e\u8a0a\u606f\u3002\u6240\u8a2d\u5b9a\u7684\u7b49\u7d1a\u6703\u6c7a\u5b9a\u54ea\u4e9b\u8cc7\u8a0a\u6703\u88ab\u8a18\u9304\u4e0b\u4f86\u3002</p> \u7b49\u7d1a \u8aaa\u660e \u8a18\u9304\u7684\u8cc7\u8a0a\u985e\u578b <code>DEBUG</code> \u9664\u932f\u6642\u81f3\u95dc\u91cd\u8981\u3002 \u9019\u662f\u6700\u8a73\u7d30\u7684\u7b49\u7d1a\uff0c\u9069\u7528\u65bc\u7d30\u7dfb\u7684\u8a3a\u65b7\u8cc7\u8a0a\u3002 <ul><li>\u5b8c\u6574\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u63d0\u793a\u8a5e\uff1a \u767c\u9001\u7d66\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7684\u5b8c\u6574\u8acb\u6c42\uff0c\u5305\u62ec\u7cfb\u7d71\u6307\u4ee4\u3001\u6b77\u53f2\u7d00\u9304\u8207\u5de5\u5177\u3002</li><li>\u4f86\u81ea\u670d\u52d9\u7684\u8a73\u7d30 API \u56de\u61c9\u3002</li><li>\u5167\u90e8\u72c0\u614b\u8f49\u63db\u8207\u8b8a\u6578\u503c\u3002</li></ul> <code>INFO</code> \u95dc\u65bc agent \u751f\u547d\u9031\u671f\u7684\u4e00\u822c\u8cc7\u8a0a\u3002 <ul><li>agent \u521d\u59cb\u5316\u8207\u555f\u52d5\u3002</li><li>session \u5efa\u7acb\u8207\u522a\u9664\u4e8b\u4ef6\u3002</li><li>\u5de5\u5177\u7684\u57f7\u884c\uff0c\u5305\u62ec\u5176\u540d\u7a31\u8207\u53c3\u6578\u3002</li></ul> <code>WARNING</code> \u6307\u793a\u6f5b\u5728\u554f\u984c\u6216\u5df2\u68c4\u7528\u529f\u80fd\u7684\u4f7f\u7528\u3002agent \u4ecd\u53ef\u904b\u4f5c\uff0c\u4f46\u53ef\u80fd\u9700\u8981\u6ce8\u610f\u3002 <ul><li>\u4f7f\u7528\u5df2\u68c4\u7528\u7684\u65b9\u6cd5\u6216\u53c3\u6578\u3002</li><li>\u7cfb\u7d71\u5df2\u5fa9\u539f\u7684\u975e\u95dc\u9375\u6027\u932f\u8aa4\u3002</li></ul> <code>ERROR</code> \u56b4\u91cd\u932f\u8aa4\uff0c\u5c0e\u81f4\u64cd\u4f5c\u7121\u6cd5\u5b8c\u6210\u3002 <ul><li>\u5c0d\u5916\u90e8\u670d\u52d9\uff08\u5982 LLM\u3001Session Service\uff09\u7684 API \u547c\u53eb\u5931\u6557\u3002</li><li>agent \u57f7\u884c\u671f\u9593\u672a\u8655\u7406\u7684\u4f8b\u5916\u72c0\u6cc1\u3002</li><li>\u8a2d\u5b9a\u932f\u8aa4\u3002</li></ul> <p>\u6ce8\u610f\uff1a \u5efa\u8b70\u5728\u6b63\u5f0f\u74b0\u5883\u4e2d\u4f7f\u7528 <code>INFO</code> \u6216 <code>WARNING</code>\u3002\u50c5\u5728\u7a4d\u6975\u9032\u884c\u554f\u984c\u6392\u67e5\u6642\u555f\u7528 <code>DEBUG</code>\uff0c\u56e0\u70ba <code>DEBUG</code> \u65e5\u8a8c\u975e\u5e38\u8a73\u7d30\uff0c\u4e14\u53ef\u80fd\u5305\u542b\u654f\u611f\u8cc7\u8a0a\u3002</p>"},{"location":"observability/logging/#_5","title":"\u95b1\u8b80\u8207\u7406\u89e3\u65e5\u8a8c","text":"<p><code>basicConfig</code> \u7bc4\u4f8b\u4e2d\u7684 <code>format</code> \u5b57\u4e32\u6c7a\u5b9a\u4e86\u6bcf\u5247\u65e5\u8a8c\u8a0a\u606f\u7684\u7d50\u69cb\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u5247\u65e5\u8a8c\u7bc4\u4f8b\uff1a</p> <pre><code>2025-07-08 11:22:33,456 - DEBUG - google_adk.google.adk.models.google_llm - LLM Request: contents { ... }\n</code></pre> \u65e5\u8a8c\u5340\u6bb5 \u683c\u5f0f\u6307\u5b9a\u7b26 \u610f\u7fa9 <code>2025-07-08 11:22:33,456</code> <code>%(asctime)s</code> \u6642\u9593\u6233\u8a18 <code>DEBUG</code> <code>%(levelname)s</code> \u56b4\u91cd\u6027\u7b49\u7d1a <code>google_adk.models.google_llm</code> <code>%(name)s</code> \u8a18\u9304\u5668\u540d\u7a31\uff08\u7522\u751f\u6b64\u65e5\u8a8c\u7684\u6a21\u7d44\uff09 <code>LLM Request: contents { ... }</code> <code>%(message)s</code> \u5be6\u969b\u7684\u65e5\u8a8c\u8a0a\u606f <p>\u900f\u904e\u67e5\u770b\u8a18\u9304\u5668\u540d\u7a31\uff0c\u4f60\u53ef\u4ee5\u7acb\u5373\u5b9a\u4f4d\u65e5\u8a8c\u7684\u4f86\u6e90\uff0c\u4e26\u4e86\u89e3\u5176\u5728 agent \u67b6\u69cb\u4e2d\u7684\u4e0a\u4e0b\u6587\u3002</p>"},{"location":"observability/logging/#_6","title":"\u4f7f\u7528\u65e5\u8a8c\u9032\u884c\u9664\u932f\uff1a\u5be6\u52d9\u7bc4\u4f8b","text":"<p>\u60c5\u5883\uff1a \u4f60\u7684 agent \u6c92\u6709\u7522\u751f\u9810\u671f\u7684\u8f38\u51fa\uff0c\u4f60\u61f7\u7591\u50b3\u9001\u7d66\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7684\u63d0\u793a\u8a5e\uff08prompt\uff09\u6709\u8aa4\u6216\u7f3a\u5c11\u8cc7\u8a0a\u3002</p> <p>\u6b65\u9a5f\uff1a</p> <ol> <li> <p>\u555f\u7528 DEBUG \u65e5\u8a8c\u7b49\u7d1a\uff1a \u5728\u4f60\u7684 <code>main.py</code> \u4e2d\uff0c\u5c07\u65e5\u8a8c\u7b49\u7d1a\u8a2d\u5b9a\u70ba <code>DEBUG</code>\uff0c\u5982\u8a2d\u5b9a\u7bc4\u4f8b\u6240\u793a\u3002</p> <pre><code>logging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'\n)\n</code></pre> </li> <li> <p>\u57f7\u884c\u4f60\u7684 agent\uff1a \u5982\u540c\u5e73\u5e38\u4e00\u6a23\u57f7\u884c\u4f60\u7684 agent \u4efb\u52d9\u3002</p> </li> <li> <p>\u6aa2\u67e5\u65e5\u8a8c\uff1a \u5728\u4e3b\u63a7\u53f0\u8f38\u51fa\u4e2d\uff0c\u5c0b\u627e\u4f86\u81ea <code>google.adk.models.google_llm</code> logger \u4e14\u4ee5 <code>LLM Request:</code> \u958b\u982d\u7684\u8a0a\u606f\u3002</p> <pre><code>...\n2025-07-10 15:26:13,778 - DEBUG - google_adk.google.adk.models.google_llm - Sending out request, model: gemini-2.0-flash, backend: GoogleLLMVariant.GEMINI_API, stream: False\n2025-07-10 15:26:13,778 - DEBUG - google_adk.google.adk.models.google_llm - \nLLM Request:\n-----------------------------------------------------------\nSystem Instruction:\n\n      You roll dice and answer questions about the outcome of the dice rolls.\n      You can roll dice of different sizes.\n      You can use multiple tools in parallel by calling functions in parallel(in one request and in one round).\n      It is ok to discuss previous dice roles, and comment on the dice rolls.\n      When you are asked to roll a die, you must call the roll_die tool with the number of sides. Be sure to pass in an integer. Do not pass in a string.\n      You should never roll a die on your own.\n      When checking prime numbers, call the check_prime tool with a list of integers. Be sure to pass in a list of integers. You should never pass in a string.\n      You should not check prime numbers before calling the tool.\n      When you are asked to roll a die and check prime numbers, you should always make the following two function calls:\n      1. You should first call the roll_die tool to get a roll. Wait for the function response before calling the check_prime tool.\n      2. After you get the function response from roll_die tool, you should call the check_prime tool with the roll_die result.\n        2.1 If user asks you to check primes based on previous rolls, make sure you include the previous rolls in the list.\n      3. When you respond, you must include the roll_die result from step 1.\n      You should always perform the previous 3 steps when asking for a roll and checking prime numbers.\n      You should not rely on the previous history on prime results.\n\n\nYou are an agent. Your internal name is \"hello_world_agent\".\n\nThe description about you is \"hello world agent that can roll a dice of 8 sides and check prime numbers.\"\n-----------------------------------------------------------\nContents:\n{\"parts\":[{\"text\":\"Roll a 6 sided dice\"}],\"role\":\"user\"}\n{\"parts\":[{\"function_call\":{\"args\":{\"sides\":6},\"name\":\"roll_die\"}}],\"role\":\"model\"}\n{\"parts\":[{\"function_response\":{\"name\":\"roll_die\",\"response\":{\"result\":2}}}],\"role\":\"user\"}\n-----------------------------------------------------------\nFunctions:\nroll_die: {'sides': {'type': &lt;Type.INTEGER: 'INTEGER'&gt;}} \ncheck_prime: {'nums': {'items': {'type': &lt;Type.INTEGER: 'INTEGER'&gt;}, 'type': &lt;Type.ARRAY: 'ARRAY'&gt;}} \n-----------------------------------------------------------\n\n2025-07-10 15:26:13,779 - INFO - google_genai.models - AFC is enabled with max remote calls: 10.\n2025-07-10 15:26:14,309 - INFO - google_adk.google.adk.models.google_llm - \nLLM Response:\n-----------------------------------------------------------\nText:\nI have rolled a 6 sided die, and the result is 2.\n...\n</code></pre> </li> <li> <p>\u5206\u6790 Prompt\uff1a \u900f\u904e\u6aa2\u67e5\u5df2\u8a18\u9304\u8acb\u6c42\u4e2d\u7684 <code>System Instruction</code>\u3001<code>contents</code>\u3001<code>functions</code> \u5340\u6bb5\uff0c\u4f60\u53ef\u4ee5\u9a57\u8b49\u4ee5\u4e0b\u5167\u5bb9\uff1a</p> <ul> <li>\u7cfb\u7d71\u6307\u4ee4\u662f\u5426\u6b63\u78ba\uff1f</li> <li>\u5c0d\u8a71\u6b77\u53f2\uff08<code>user</code> \u548c <code>model</code> \u56de\u5408\uff09\u662f\u5426\u6e96\u78ba\uff1f</li> <li>\u662f\u5426\u5305\u542b\u6700\u65b0\u7684\u4f7f\u7528\u8005\u67e5\u8a62\uff1f</li> <li>\u662f\u5426\u6b63\u78ba\u63d0\u4f9b tools \u7d66\u6a21\u578b\uff1f</li> <li>\u6a21\u578b\u662f\u5426\u6b63\u78ba\u547c\u53eb tools\uff1f</li> <li>\u6a21\u578b\u56de\u61c9\u6240\u9700\u7684\u6642\u9593\u70ba\u591a\u5c11\uff1f</li> </ul> </li> </ol> <p>\u9019\u4e9b\u8a73\u7d30\u7684\u8f38\u51fa\u8b93\u4f60\u80fd\u5920\u76f4\u63a5\u5f9e\u65e5\u8a8c\u6a94\u6848\u4e2d\u8a3a\u65b7\u5404\u7a2e\u554f\u984c\uff0c\u5f9e prompt \u5de5\u7a0b\u932f\u8aa4\u5230\u5de5\u5177\u5b9a\u7fa9\u554f\u984c\u90fd\u80fd\u8ffd\u8e64\u5206\u6790\u3002</p>"},{"location":"observability/phoenix.en/","title":"Agent Observability with Phoenix","text":"<p>Phoenix is an open-source, self-hosted observability platform for monitoring, debugging, and improving LLM applications and AI Agents at scale. It provides comprehensive tracing and evaluation capabilities for your Google ADK applications. To get started, sign up for a free account. </p>"},{"location":"observability/phoenix.en/#overview","title":"Overview","text":"<p>Phoenix can automatically collect traces from Google ADK using OpenInference instrumentation, allowing you to:</p> <ul> <li>Trace agent interactions - Automatically capture every agent run, tool call, model request, and response with full context and metadata</li> <li>Evaluate performance - Assess agent behavior using custom or pre-built evaluators and run experiments to test agent configurations</li> <li>Debug issues - Analyze detailed traces to quickly identify bottlenecks, failed tool calls, and unexpected agent behavior</li> <li>Self-hosted control - Keep your data on your own infrastructure</li> </ul>"},{"location":"observability/phoenix.en/#installation","title":"Installation","text":""},{"location":"observability/phoenix.en/#install-required-packages","title":"1. Install Required Packages","text":"<pre><code>pip install openinference-instrumentation-google-adk google-adk arize-phoenix-otel\n</code></pre>"},{"location":"observability/phoenix.en/#setup","title":"Setup","text":""},{"location":"observability/phoenix.en/#launch-phoenix","title":"1. Launch Phoenix","text":"<p>These instructions show you how to use Phoenix Cloud. You can also launch Phoenix in a notebook, from your terminal, or self-host it using a container. </p> <ol> <li>Sign up for a free Phoenix account. </li> <li>From the Settings page of your new Phoenix Space, create your API key</li> <li>Copy your endpoint which should look like: https://app.phoenix.arize.com/s/[your-space-name]</li> </ol> <p>Set your Phoenix endpoint and API Key:</p> <pre><code>import os\n\nos.environ[\"PHOENIX_API_KEY\"] = \"ADD YOUR PHOENIX API KEY\"\nos.environ[\"PHOENIX_COLLECTOR_ENDPOINT\"] = \"ADD YOUR PHOENIX COLLECTOR ENDPOINT\"\n\n# If you created your Phoenix Cloud instance before June 24th, 2025, set the API key as a header:\n# os.environ[\"PHOENIX_CLIENT_HEADERS\"] = f\"api_key={os.getenv('PHOENIX_API_KEY')}\"\n</code></pre>"},{"location":"observability/phoenix.en/#connect-your-application-to-phoenix","title":"2.  Connect your application to Phoenix","text":"<pre><code>from phoenix.otel import register\n\n# Configure the Phoenix tracer\ntracer_provider = register(\n    project_name=\"my-llm-app\",  # Default is 'default'\n    auto_instrument=True        # Auto-instrument your app based on installed OI dependencies\n)\n</code></pre>"},{"location":"observability/phoenix.en/#observe","title":"Observe","text":"<p>Now that you have tracing setup, all Google ADK SDK requests will be streamed to Phoenix for observability and evaluation.</p> <pre><code>import nest_asyncio\nnest_asyncio.apply()\n\nfrom google.adk.agents import Agent\nfrom google.adk.runners import InMemoryRunner\nfrom google.genai import types\n\n# Define a tool function\ndef get_weather(city: str) -&gt; dict:\n    \"\"\"Retrieves the current weather report for a specified city.\n\n    Args:\n        city (str): The name of the city for which to retrieve the weather report.\n\n    Returns:\n        dict: status and result or error msg.\n    \"\"\"\n    if city.lower() == \"new york\":\n        return {\n            \"status\": \"success\",\n            \"report\": (\n                \"The weather in New York is sunny with a temperature of 25 degrees\"\n                \" Celsius (77 degrees Fahrenheit).\"\n            ),\n        }\n    else:\n        return {\n            \"status\": \"error\",\n            \"error_message\": f\"Weather information for '{city}' is not available.\",\n        }\n\n# Create an agent with tools\nagent = Agent(\n    name=\"weather_agent\",\n    model=\"gemini-2.0-flash-exp\",\n    description=\"Agent to answer questions using weather tools.\",\n    instruction=\"You must use the available tools to find an answer.\",\n    tools=[get_weather]\n)\n\napp_name = \"weather_app\"\nuser_id = \"test_user\"\nsession_id = \"test_session\"\nrunner = InMemoryRunner(agent=agent, app_name=app_name)\nsession_service = runner.session_service\n\nawait session_service.create_session(\n    app_name=app_name,\n    user_id=user_id,\n    session_id=session_id\n)\n\n# Run the agent (all interactions will be traced)\nasync for event in runner.run_async(\n    user_id=user_id,\n    session_id=session_id,\n    new_message=types.Content(role=\"user\", parts=[\n        types.Part(text=\"What is the weather in New York?\")]\n    )\n):\n    if event.is_final_response():\n        print(event.content.parts[0].text.strip())\n</code></pre>"},{"location":"observability/phoenix.en/#support-and-resources","title":"Support and Resources","text":"<ul> <li>Phoenix Documentation</li> <li>Community Slack</li> <li>OpenInference Package</li> </ul>"},{"location":"observability/phoenix/","title":"\u4f7f\u7528 Phoenix \u9032\u884c Agent Observability","text":"<p>Phoenix \u662f\u4e00\u500b\u958b\u6e90\u3001\u81ea\u884c\u67b6\u8a2d\u7684\u53ef\u89c0\u6e2c\u6027\u5e73\u53f0\uff0c\u53ef\u7528\u65bc\u5927\u898f\u6a21\u76e3\u63a7\u3001\u9664\u932f\u8207\u512a\u5316\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u61c9\u7528\u7a0b\u5f0f\u8207 AI agent\u3002Phoenix \u70ba\u4f60\u7684 Google Agent Development Kit (ADK) \u61c9\u7528\u7a0b\u5f0f\u63d0\u4f9b\u5b8c\u6574\u7684\u8ffd\u8e64\u8207\u8a55\u4f30\u529f\u80fd\u3002\u4f60\u53ef\u4ee5\u5148\u8a3b\u518a\u4e00\u500b\u514d\u8cbb\u5e33\u865f\u958b\u59cb\u4f7f\u7528\u3002</p>"},{"location":"observability/phoenix/#_1","title":"\u6982\u89bd","text":"<p>Phoenix \u80fd\u5920\u900f\u904e OpenInference instrumentation \u81ea\u52d5\u5f9e Google Agent Development Kit (ADK) \u6536\u96c6\u8ffd\u8e64\u8cc7\u6599\uff0c\u8b93\u4f60\u53ef\u4ee5\uff1a</p> <ul> <li>\u8ffd\u8e64 agent \u4e92\u52d5 \u2014 \u81ea\u52d5\u64f7\u53d6\u6bcf\u4e00\u6b21 agent \u57f7\u884c\u3001\u5de5\u5177\u547c\u53eb (tool calls)\u3001\u6a21\u578b\u8acb\u6c42\u8207\u56de\u61c9\uff0c\u4e26\u4fdd\u7559\u5b8c\u6574\u4e0a\u4e0b\u6587\u8207\u4e2d\u7e7c\u8cc7\u6599</li> <li>\u8a55\u4f30\u6548\u80fd \u2014 \u4f7f\u7528\u81ea\u8a02\u6216\u5167\u5efa\u8a55\u4f30\u5668\u4f86\u8a55\u4f30 agent \u884c\u70ba\uff0c\u4e26\u57f7\u884c\u5be6\u9a57\u4ee5\u6e2c\u8a66 agent \u8a2d\u5b9a</li> <li>\u9664\u932f\u554f\u984c \u2014 \u5206\u6790\u8a73\u7d30\u7684\u8ffd\u8e64\u8cc7\u6599\uff0c\u5feb\u901f\u627e\u51fa\u74f6\u9838\u3001\u5931\u6557\u7684\u5de5\u5177\u547c\u53eb (tool calls) \u4ee5\u53ca\u975e\u9810\u671f\u7684 agent \u884c\u70ba</li> <li>\u81ea\u884c\u67b6\u8a2d\u63a7\u5236 \u2014 \u5c07\u8cc7\u6599\u4fdd\u7559\u5728\u4f60\u81ea\u5df1\u7684\u57fa\u790e\u67b6\u69cb\u4e0a</li> </ul>"},{"location":"observability/phoenix/#_2","title":"\u5b89\u88dd","text":""},{"location":"observability/phoenix/#install-required-packages","title":"1. \u5b89\u88dd\u5fc5\u8981\u5957\u4ef6","text":"<pre><code>pip install openinference-instrumentation-google-adk google-adk arize-phoenix-otel\n</code></pre>"},{"location":"observability/phoenix/#_3","title":"\u8a2d\u5b9a","text":""},{"location":"observability/phoenix/#launch-phoenix","title":"1. \u555f\u52d5 Phoenix","text":"<p>\u4ee5\u4e0b\u8aaa\u660e\u5c07\u6307\u5f15\u4f60\u5982\u4f55\u4f7f\u7528 Phoenix Cloud\u3002\u4f60\u4e5f\u53ef\u4ee5\u5728 notebook\u3001\u7d42\u7aef\u6a5f\u4e2d \u555f\u52d5 Phoenix\uff0c\u6216\u662f\u900f\u904e\u5bb9\u5668\u81ea\u884c\u67b6\u8a2d\u3002</p> <ol> <li>\u8a3b\u518a\u4e00\u500b \u514d\u8cbb\u7684 Phoenix \u5e33\u865f\u3002</li> <li>\u5728\u65b0\u7684 Phoenix Space \u7684\u8a2d\u5b9a\u9801\u9762\u4e2d\uff0c\u5efa\u7acb\u4f60\u7684 API KEY\u3002</li> <li>\u8907\u88fd\u4f60\u7684 endpoint\uff0c\u683c\u5f0f\u61c9\u5982\u4e0b\u6240\u793a\uff1ahttps://app.phoenix.arize.com/s/[your-space-name]</li> </ol> <p>\u8a2d\u5b9a\u4f60\u7684 Phoenix endpoint \u8207 API KEY\uff1a</p> <pre><code>import os\n\nos.environ[\"PHOENIX_API_KEY\"] = \"ADD YOUR PHOENIX API KEY\"\nos.environ[\"PHOENIX_COLLECTOR_ENDPOINT\"] = \"ADD YOUR PHOENIX COLLECTOR ENDPOINT\"\n\n# If you created your Phoenix Cloud instance before June 24th, 2025, set the API key as a header:\n# os.environ[\"PHOENIX_CLIENT_HEADERS\"] = f\"api_key={os.getenv('PHOENIX_API_KEY')}\"\n</code></pre>"},{"location":"observability/phoenix/#connect-your-application-to-phoenix","title":"2.  \u5c07\u60a8\u7684\u61c9\u7528\u7a0b\u5f0f\u9023\u63a5\u81f3 Phoenix","text":"<pre><code>from phoenix.otel import register\n\n# Configure the Phoenix tracer\ntracer_provider = register(\n    project_name=\"my-llm-app\",  # Default is 'default'\n    auto_instrument=True        # Auto-instrument your app based on installed OI dependencies\n)\n</code></pre>"},{"location":"observability/phoenix/#observe","title":"\u89c0\u5bdf\uff08Observe\uff09","text":"<p>\u73fe\u5728\u4f60\u5df2\u7d93\u5b8c\u6210\u8ffd\u8e64\uff08tracing\uff09\u8a2d\u5b9a\uff0c\u6240\u6709 Google Agent Development Kit (ADK) SDK \u7684\u8acb\u6c42\u90fd\u6703\u88ab\u4e32\u6d41\u81f3 Phoenix \u9032\u884c\u53ef\u89c0\u5bdf\u6027\uff08observability\uff09\u8207\u8a55\u4f30\u3002</p> <pre><code>import nest_asyncio\nnest_asyncio.apply()\n\nfrom google.adk.agents import Agent\nfrom google.adk.runners import InMemoryRunner\nfrom google.genai import types\n\n# Define a tool function\ndef get_weather(city: str) -&gt; dict:\n    \"\"\"Retrieves the current weather report for a specified city.\n\n    Args:\n        city (str): The name of the city for which to retrieve the weather report.\n\n    Returns:\n        dict: status and result or error msg.\n    \"\"\"\n    if city.lower() == \"new york\":\n        return {\n            \"status\": \"success\",\n            \"report\": (\n                \"The weather in New York is sunny with a temperature of 25 degrees\"\n                \" Celsius (77 degrees Fahrenheit).\"\n            ),\n        }\n    else:\n        return {\n            \"status\": \"error\",\n            \"error_message\": f\"Weather information for '{city}' is not available.\",\n        }\n\n# Create an agent with tools\nagent = Agent(\n    name=\"weather_agent\",\n    model=\"gemini-2.0-flash-exp\",\n    description=\"Agent to answer questions using weather tools.\",\n    instruction=\"You must use the available tools to find an answer.\",\n    tools=[get_weather]\n)\n\napp_name = \"weather_app\"\nuser_id = \"test_user\"\nsession_id = \"test_session\"\nrunner = InMemoryRunner(agent=agent, app_name=app_name)\nsession_service = runner.session_service\n\nawait session_service.create_session(\n    app_name=app_name,\n    user_id=user_id,\n    session_id=session_id\n)\n\n# Run the agent (all interactions will be traced)\nasync for event in runner.run_async(\n    user_id=user_id,\n    session_id=session_id,\n    new_message=types.Content(role=\"user\", parts=[\n        types.Part(text=\"What is the weather in New York?\")]\n    )\n):\n    if event.is_final_response():\n        print(event.content.parts[0].text.strip())\n</code></pre>"},{"location":"observability/phoenix/#_4","title":"\u652f\u63f4\u8207\u8cc7\u6e90","text":"<ul> <li>Phoenix \u6587\u4ef6\u8aaa\u660e</li> <li>\u793e\u7fa4 Slack</li> <li>OpenInference \u5957\u4ef6</li> </ul>"},{"location":"observability/weave.en/","title":"Agent Observability with Weave by WandB","text":"<p>Weave by Weights &amp; Biases (WandB) provides a powerful platform for logging and visualizing model calls. By integrating Google ADK with Weave, you can track and analyze your agent's performance and behavior using OpenTelemetry (OTEL) traces.</p>"},{"location":"observability/weave.en/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Sign up for an account at WandB.</p> </li> <li> <p>Obtain your API key from WandB Authorize.</p> </li> <li> <p>Configure your environment with the required API keys:</p> </li> </ol> <pre><code>export WANDB_API_KEY=&lt;your-wandb-api-key&gt;\nexport GOOGLE_API_KEY=&lt;your-google-api-key&gt;\n</code></pre>"},{"location":"observability/weave.en/#install-dependencies","title":"Install Dependencies","text":"<p>Ensure you have the necessary packages installed:</p> <pre><code>pip install google-adk opentelemetry-sdk opentelemetry-exporter-otlp-proto-http\n</code></pre>"},{"location":"observability/weave.en/#sending-traces-to-weave","title":"Sending Traces to Weave","text":"<p>This example demonstrates how to configure OpenTelemetry to send Google ADK traces to Weave.</p> <pre><code># math_agent/agent.py\n\nimport base64\nimport os\nfrom opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter\nfrom opentelemetry.sdk import trace as trace_sdk\nfrom opentelemetry.sdk.trace.export import SimpleSpanProcessor\nfrom opentelemetry import trace\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.tools import FunctionTool\n\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# Configure Weave endpoint and authentication\nWANDB_BASE_URL = \"https://trace.wandb.ai\"\nPROJECT_ID = \"your-entity/your-project\"  # e.g., \"teamid/projectid\"\nOTEL_EXPORTER_OTLP_ENDPOINT = f\"{WANDB_BASE_URL}/otel/v1/traces\"\n\n# Set up authentication\nWANDB_API_KEY = os.getenv(\"WANDB_API_KEY\")\nAUTH = base64.b64encode(f\"api:{WANDB_API_KEY}\".encode()).decode()\n\nOTEL_EXPORTER_OTLP_HEADERS = {\n    \"Authorization\": f\"Basic {AUTH}\",\n    \"project_id\": PROJECT_ID,\n}\n\n# Create the OTLP span exporter with endpoint and headers\nexporter = OTLPSpanExporter(\n    endpoint=OTEL_EXPORTER_OTLP_ENDPOINT,\n    headers=OTEL_EXPORTER_OTLP_HEADERS,\n)\n\n# Create a tracer provider and add the exporter\ntracer_provider = trace_sdk.TracerProvider()\ntracer_provider.add_span_processor(SimpleSpanProcessor(exporter))\n\n# Set the global tracer provider BEFORE importing/using ADK\ntrace.set_tracer_provider(tracer_provider)\n\n# Define a simple tool for demonstration\ndef calculator(a: float, b: float) -&gt; str:\n    \"\"\"Add two numbers and return the result.\n\n    Args:\n        a: First number\n        b: Second number\n\n    Returns:\n        The sum of a and b\n    \"\"\"\n    return str(a + b)\n\ncalculator_tool = FunctionTool(func=calculator)\n\n# Create an LLM agent\nroot_agent = LlmAgent(\n    name=\"MathAgent\",\n    model=\"gemini-2.0-flash-exp\",\n    instruction=(\n        \"You are a helpful assistant that can do math. \"\n        \"When asked a math problem, use the calculator tool to solve it.\"\n    ),\n    tools=[calculator_tool],\n)\n</code></pre>"},{"location":"observability/weave.en/#view-traces-in-weave-dashboard","title":"View Traces in Weave dashboard","text":"<p>Once the agent runs, all its traces are logged to the corresponding project on the Weave dashboard.</p> <p></p> <p>You can view a timeline of calls that your ADK agent made during execution -</p> <p></p>"},{"location":"observability/weave.en/#notes","title":"Notes","text":"<ul> <li>Environment Variables: Ensure your environment variables are correctly set for both WandB and Google API keys.</li> <li>Project Configuration: Replace <code>&lt;your-entity&gt;/&lt;your-project&gt;</code> with your actual WandB entity and project name.</li> <li>Entity Name: You can find your entity name by visiting your WandB dashboard and checking the Teams field in the left sidebar.</li> <li>Tracer Provider: It's critical to set the global tracer provider before using any ADK components to ensure proper tracing.</li> </ul> <p>By following these steps, you can effectively integrate Google ADK with Weave, enabling comprehensive logging and visualization of your AI agents' model calls, tool invocations, and reasoning processes.</p>"},{"location":"observability/weave.en/#resources","title":"Resources","text":"<ul> <li> <p>Send OpenTelemetry Traces to Weave - Comprehensive guide on configuring OTEL with Weave, including authentication and advanced configuration options.</p> </li> <li> <p>Navigate the Trace View - Learn how to effectively analyze and debug your traces in the Weave UI, including understanding trace hierarchies and span details.</p> </li> <li> <p>Weave Integrations - Explore other framework integrations and see how Weave can work with your entire AI stack.</p> </li> </ul>"},{"location":"observability/weave/","title":"\u4f7f\u7528 Weave by WandB \u9032\u884c Agent Observability","text":"<p>Weave by Weights &amp; Biases (WandB) \u63d0\u4f9b\u4e86\u4e00\u500b\u5f37\u5927\u7684\u5e73\u53f0\uff0c\u7528\u65bc\u8a18\u9304\u8207\u8996\u89ba\u5316\u6a21\u578b\u547c\u53eb\u3002\u900f\u904e\u5c07 Google Agent Development Kit (ADK) \u8207 Weave \u6574\u5408\uff0c\u60a8\u53ef\u4ee5\u5229\u7528 OpenTelemetry (OTEL) trace \u4f86\u8ffd\u8e64\u4e26\u5206\u6790 agent \u7684\u6548\u80fd\u8207\u884c\u70ba\u3002</p>"},{"location":"observability/weave/#_1","title":"\u5148\u6c7a\u689d\u4ef6","text":"<ol> <li> <p>\u524d\u5f80 WandB \u8a3b\u518a\u5e33\u865f\u3002</p> </li> <li> <p>\u5f9e WandB Authorize \u53d6\u5f97\u60a8\u7684 API KEY\u3002</p> </li> <li> <p>\u5728\u60a8\u7684\u74b0\u5883\u4e2d\u8a2d\u5b9a\u6240\u9700\u7684 API KEY\uff1a</p> </li> </ol> <pre><code>export WANDB_API_KEY=&lt;your-wandb-api-key&gt;\nexport GOOGLE_API_KEY=&lt;your-google-api-key&gt;\n</code></pre>"},{"location":"observability/weave/#_2","title":"\u5b89\u88dd\u76f8\u4f9d\u5957\u4ef6","text":"<p>\u8acb\u78ba\u4fdd\u60a8\u5df2\u5b89\u88dd\u5fc5\u8981\u7684\u5957\u4ef6\uff1a</p> <pre><code>pip install google-adk opentelemetry-sdk opentelemetry-exporter-otlp-proto-http\n</code></pre>"},{"location":"observability/weave/#weave","title":"\u50b3\u9001\u8ffd\u8e64\u8cc7\u6599\u81f3 Weave","text":"<p>\u672c\u7bc4\u4f8b\u8aaa\u660e\u5982\u4f55\u8a2d\u5b9a OpenTelemetry\uff0c\u5c07 Google Agent Development Kit (ADK) \u7684\u8ffd\u8e64\u8cc7\u6599\u50b3\u9001\u81f3 Weave\u3002</p> <pre><code># math_agent/agent.py\n\nimport base64\nimport os\nfrom opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter\nfrom opentelemetry.sdk import trace as trace_sdk\nfrom opentelemetry.sdk.trace.export import SimpleSpanProcessor\nfrom opentelemetry import trace\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.tools import FunctionTool\n\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# Configure Weave endpoint and authentication\nWANDB_BASE_URL = \"https://trace.wandb.ai\"\nPROJECT_ID = \"your-entity/your-project\"  # e.g., \"teamid/projectid\"\nOTEL_EXPORTER_OTLP_ENDPOINT = f\"{WANDB_BASE_URL}/otel/v1/traces\"\n\n# Set up authentication\nWANDB_API_KEY = os.getenv(\"WANDB_API_KEY\")\nAUTH = base64.b64encode(f\"api:{WANDB_API_KEY}\".encode()).decode()\n\nOTEL_EXPORTER_OTLP_HEADERS = {\n    \"Authorization\": f\"Basic {AUTH}\",\n    \"project_id\": PROJECT_ID,\n}\n\n# Create the OTLP span exporter with endpoint and headers\nexporter = OTLPSpanExporter(\n    endpoint=OTEL_EXPORTER_OTLP_ENDPOINT,\n    headers=OTEL_EXPORTER_OTLP_HEADERS,\n)\n\n# Create a tracer provider and add the exporter\ntracer_provider = trace_sdk.TracerProvider()\ntracer_provider.add_span_processor(SimpleSpanProcessor(exporter))\n\n# Set the global tracer provider BEFORE importing/using ADK\ntrace.set_tracer_provider(tracer_provider)\n\n# Define a simple tool for demonstration\ndef calculator(a: float, b: float) -&gt; str:\n    \"\"\"Add two numbers and return the result.\n\n    Args:\n        a: First number\n        b: Second number\n\n    Returns:\n        The sum of a and b\n    \"\"\"\n    return str(a + b)\n\ncalculator_tool = FunctionTool(func=calculator)\n\n# Create an LLM agent\nroot_agent = LlmAgent(\n    name=\"MathAgent\",\n    model=\"gemini-2.0-flash-exp\",\n    instruction=(\n        \"You are a helpful assistant that can do math. \"\n        \"When asked a math problem, use the calculator tool to solve it.\"\n    ),\n    tools=[calculator_tool],\n)\n</code></pre>"},{"location":"observability/weave/#weave_1","title":"\u5728 Weave \u5100\u8868\u677f\u4e2d\u6aa2\u8996\u8ffd\u8e64\u7d00\u9304","text":"<p>\u7576 agent \u57f7\u884c\u5f8c\uff0c\u6240\u6709\u7684\u8ffd\u8e64\u7d00\u9304\u90fd\u6703\u88ab\u8a18\u9304\u5230 Weave \u5100\u8868\u677f \u4e2d\u5c0d\u61c9\u7684\u5c08\u6848\u3002</p> <p></p> <p>\u4f60\u53ef\u4ee5\u5728\u9019\u88e1\u67e5\u770b\u4f60\u7684 Agent Development Kit (ADK) agent \u57f7\u884c\u671f\u9593\u6240\u7522\u751f\u547c\u53eb\u7684\u6642\u9593\u8ef8\u8996\u5716\u2014\u2014</p> <p></p>"},{"location":"observability/weave/#_3","title":"\u6ce8\u610f\u4e8b\u9805","text":"<ul> <li>\u74b0\u5883\u8b8a\u6578\uff1a\u8acb\u78ba\u4fdd\u4f60\u7684\u74b0\u5883\u8b8a\u6578\u5df2\u6b63\u78ba\u8a2d\u5b9a\uff0c\u5305\u62ec WandB \u53ca Google API \u91d1\u9470\u3002</li> <li>\u5c08\u6848\u8a2d\u5b9a\uff1a\u8acb\u5c07 <code>&lt;your-entity&gt;/&lt;your-project&gt;</code> \u66ff\u63db\u70ba\u4f60\u5be6\u969b\u7684 WandB entity \u8207\u5c08\u6848\u540d\u7a31\u3002</li> <li>Entity \u540d\u7a31\uff1a\u4f60\u53ef\u4ee5\u524d\u5f80 WandB \u5100\u8868\u677f\uff0c\u5728\u5de6\u5074\u6b04\u4f4d\u7684 Teams \u6b04\u4f4d\u4e2d\u627e\u5230\u4f60\u7684 entity \u540d\u7a31\u3002</li> <li>Tracer Provider\uff1a\u5728\u4f7f\u7528\u4efb\u4f55 ADK \u5143\u4ef6\u524d\uff0c\u52d9\u5fc5\u5148\u8a2d\u5b9a\u5168\u57df tracer provider\uff0c\u4ee5\u78ba\u4fdd\u8ffd\u8e64\u529f\u80fd\u6b63\u5e38\u904b\u4f5c\u3002</li> </ul> <p>\u4f9d\u7167\u4e0a\u8ff0\u6b65\u9a5f\u64cd\u4f5c\uff0c\u5373\u53ef\u5c07 Google Agent Development Kit (ADK) \u6709\u6548\u6574\u5408\u81f3 Weave\uff0c\u5be6\u73fe AI agent \u7684\u6a21\u578b\u547c\u53eb\u3001\u5de5\u5177\u547c\u53eb (tool calls) \u53ca\u63a8\u7406\u904e\u7a0b\u7684\u5b8c\u6574\u65e5\u8a8c\u7d00\u9304\u8207\u8996\u89ba\u5316\u3002</p>"},{"location":"observability/weave/#_4","title":"\u76f8\u95dc\u8cc7\u6e90","text":"<ul> <li> <p>Send OpenTelemetry Traces to Weave - \u8a73\u7d30\u8aaa\u660e\u5982\u4f55\u5c07 OTEL \u8207 Weave \u6574\u5408\uff0c\u5305\u62ec\u9a57\u8b49\u8207\u9032\u968e\u8a2d\u5b9a\u9078\u9805\u3002</p> </li> <li> <p>Navigate the Trace View - \u5b78\u7fd2\u5982\u4f55\u5728 Weave UI \u4e2d\u6709\u6548\u5206\u6790\u8207\u9664\u932f\u4f60\u7684\u8ffd\u8e64\u7d00\u9304\uff0c\u5305\u542b\u7406\u89e3\u8ffd\u8e64\u968e\u5c64\u8207 span \u7d30\u7bc0\u3002</p> </li> <li> <p>Weave Integrations - \u63a2\u7d22\u5176\u4ed6\u6846\u67b6\u6574\u5408\u65b9\u5f0f\uff0c\u4e86\u89e3 Weave \u5982\u4f55\u8207\u4f60\u7684\u5b8c\u6574 AI \u6280\u8853\u5806\u758a\u5354\u540c\u904b\u4f5c\u3002</p> </li> </ul>"},{"location":"plugins/","title":"\u63d2\u4ef6","text":""},{"location":"plugins/#plugin","title":"\u4ec0\u9ebc\u662f Plugin\uff1f","text":"<p>\u5728 Agent Development Kit (ADK) \u4e2d\uff0cPlugin \u662f\u4e00\u7a2e\u81ea\u8a02\u7a0b\u5f0f\u78bc\u6a21\u7d44\uff0c\u53ef\u4ee5\u900f\u904e callback hooks \u5728 agent \u5de5\u4f5c\u6d41\u7a0b\u751f\u547d\u9031\u671f\u7684\u4e0d\u540c\u968e\u6bb5\u57f7\u884c\u3002\u4f60\u53ef\u4ee5\u5229\u7528 Plugin \u4f86\u5be6\u73fe\u9069\u7528\u65bc\u6574\u500b agent \u5de5\u4f5c\u6d41\u7a0b\u7684\u529f\u80fd\u3002\u4ee5\u4e0b\u662f Plugin \u7684\u4e00\u4e9b\u5178\u578b\u61c9\u7528\u5834\u666f\uff1a</p> <ul> <li>\u65e5\u8a8c\u8207\u8ffd\u8e64\uff08Logging and tracing\uff09\uff1a\u5efa\u7acb\u8a73\u7d30\u7684 agent\u3001\u5de5\u5177\uff08tools\uff09\u4ee5\u53ca\u751f\u6210\u5f0f AI \u6a21\u578b\u6d3b\u52d5\u65e5\u8a8c\uff0c\u4fbf\u65bc\u9664\u932f\u8207\u6548\u80fd\u5206\u6790\u3002</li> <li>\u653f\u7b56\u57f7\u884c\uff08Policy enforcement\uff09\uff1a\u5be6\u4f5c\u5b89\u5168\u9632\u8b77\u63aa\u65bd\uff0c\u4f8b\u5982\u6aa2\u67e5\u4f7f\u7528\u8005\u662f\u5426\u6709\u6b0a\u9650\u4f7f\u7528\u7279\u5b9a\u5de5\u5177\u7684\u51fd\u5f0f\uff0c\u82e5\u7121\u6b0a\u9650\u5247\u963b\u6b62\u5176\u57f7\u884c\u3002</li> <li>\u76e3\u63a7\u8207\u6307\u6a19\uff08Monitoring and metrics\uff09\uff1a\u6536\u96c6\u4e26\u532f\u51fa token \u4f7f\u7528\u91cf\u3001\u57f7\u884c\u6642\u9593\u53ca\u547c\u53eb\u6b21\u6578\u7b49\u6307\u6a19\uff0c\u50b3\u9001\u81f3\u76e3\u63a7\u7cfb\u7d71\u5982 Prometheus \u6216     Google Cloud Observability     \uff08\u524d\u7a31 Stackdriver\uff09\u3002</li> <li>\u56de\u61c9\u5feb\u53d6\uff08Response caching\uff09\uff1a\u6aa2\u67e5\u8acb\u6c42\u662f\u5426\u5df2\u767c\u751f\u904e\uff0c\u82e5\u662f\u5247\u53ef\u56de\u50b3\u5feb\u53d6\u56de\u61c9\uff0c\u7701\u7565\u8017\u6642\u6216\u9ad8\u6210\u672c\u7684 AI \u6a21\u578b\u6216\u5de5\u5177\u547c\u53eb\u3002</li> <li>\u8acb\u6c42\u6216\u56de\u61c9\u4fee\u6539\uff08Request or response modification\uff09\uff1a\u52d5\u614b\u65b0\u589e\u8cc7\u8a0a\u81f3 AI \u6a21\u578b\u63d0\u793a\u8a5e\uff0c\u6216\u6a19\u6e96\u5316\u5de5\u5177\u7684\u8f38\u51fa\u56de\u61c9\u3002</li> </ul> <p>Tip</p> <p>\u5728\u5be6\u4f5c\u5b89\u5168\u9632\u8b77\u63aa\u65bd\u8207\u653f\u7b56\u6642\uff0c\u5efa\u8b70\u4f7f\u7528 Agent Development Kit (ADK) \u63d2\u4ef6\uff08ADK Plugins\uff09\uff0c\u5176\u6a21\u7d44\u5316\u8207\u5f48\u6027\u5747\u512a\u65bc Callbacks\u3002\u66f4\u591a\u8a73\u60c5\u8acb\u53c3\u95b1 Callbacks and Plugins for Security Guardrails\u3002</p> <p>Caution</p> <p>ADK \u7db2\u9801 UI \u4e0d\u652f\u63f4\u63d2\u4ef6\uff08Plugins\uff09\u3002</p> <p>\u5982\u679c\u4f60\u7684 Agent Development Kit (ADK) \u5de5\u4f5c\u6d41\u7a0b\u4f7f\u7528\u4e86\u63d2\u4ef6\uff08Plugins\uff09\uff0c\u4f60\u5fc5\u9808\u5728\u6c92\u6709\u7db2\u9801 UI \u7684\u60c5\u6cc1\u4e0b\u57f7\u884c\u4f60\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002</p> <p>\u63d0\u793a\uff1a\u5728\u5be6\u4f5c\u5b89\u5168\u9632\u8b77\u63aa\u65bd\u8207\u653f\u7b56\u6642\uff0c\u5efa\u8b70\u4f7f\u7528 ADK \u63d2\u4ef6\uff08Plugins\uff09\uff0c\u5176\u6a21\u7d44\u5316\u8207\u5f48\u6027\u512a\u65bc Callbacks\u3002\u8a73\u60c5\u8acb\u53c3\u95b1\u5b89\u5168\u9632\u8b77\u7684 Callbacks \u8207 Plugins\u3002</p>"},{"location":"plugins/#plugins","title":"\u63d2\u4ef6\uff08Plugins\uff09\u5982\u4f55\u904b\u4f5c\uff1f","text":"<p>ADK \u63d2\u4ef6\uff08Plugin\uff09\u6703\u7e7c\u627f <code>BasePlugin</code> \u985e\u5225\uff0c\u4e26\u5305\u542b\u4e00\u500b\u6216\u591a\u500b <code>callback</code> \u65b9\u6cd5\uff0c\u7528\u4ee5\u6307\u5b9a\u8a72\u63d2\u4ef6\u61c9\u5728 agent \u751f\u547d\u9031\u671f\u7684\u54ea\u4e9b\u968e\u6bb5\u57f7\u884c\u3002\u4f60\u53ef\u4ee5\u900f\u904e\u5728 agent \u7684 <code>Runner</code> \u985e\u5225\u4e2d\u8a3b\u518a\u63d2\u4ef6\uff0c\u5c07\u5176\u6574\u5408\u9032 agent\u3002\u95dc\u65bc\u5982\u4f55\u4ee5\u53ca\u5728\u54ea\u4e9b\u5730\u65b9\u89f8\u767c\u63d2\u4ef6\uff0c\u8acb\u53c3\u95b1\u63d2\u4ef6 Callback hooks\u3002</p> <p>\u63d2\u4ef6\u529f\u80fd\u662f\u5efa\u7acb\u5728Callbacks \u57fa\u790e\u4e4b\u4e0a\uff0c\u9019\u662f ADK \u53ef\u64f4\u5c55\u67b6\u69cb\u7684\u95dc\u9375\u8a2d\u8a08\u5143\u7d20\u3002\u4e00\u822c\u4f86\u8aaa\uff0cAgent Callback \u6703\u8a2d\u5b9a\u65bc\u300c\u55ae\u4e00 agent\u3001\u55ae\u4e00\u5de5\u5177\u300d\u91dd\u5c0d\u300c\u7279\u5b9a\u4efb\u52d9\u300d\uff1b\u800c\u63d2\u4ef6\uff08Plugin\uff09\u5247\u662f\u5728 <code>Runner</code> \u4e0a\u8a3b\u518a\u4e00\u6b21\uff0c\u5176 callbacks \u6703\u5168\u57df\u5957\u7528\u81f3\u8a72 runner \u7ba1\u7406\u7684\u6bcf\u4e00\u500b agent\u3001\u5de5\u5177\u8207\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb\u3002\u63d2\u4ef6\u8b93\u4f60\u80fd\u5c07\u76f8\u95dc\u7684 callback \u51fd\u5f0f\u6253\u5305\uff0c\u65b9\u4fbf\u65bc\u6574\u500b\u5de5\u4f5c\u6d41\u7a0b\u4e2d\u91cd\u8907\u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u63d2\u4ef6\u662f\u5be6\u4f5c\u6a6b\u8de8\u6574\u500b agent \u61c9\u7528\u7a0b\u5f0f\u529f\u80fd\u7684\u7406\u60f3\u65b9\u6848\u3002</p>"},{"location":"plugins/#plugins_1","title":"\u5b9a\u7fa9\u8207\u8a3b\u518a\u63d2\u4ef6\uff08Plugins\uff09","text":"<p>\u672c\u7bc0\u8aaa\u660e\u5982\u4f55\u5b9a\u7fa9 Plugin \u985e\u5225\uff0c\u4e26\u5c07\u5176\u8a3b\u518a\u81f3 agent \u5de5\u4f5c\u6d41\u7a0b\u3002\u5b8c\u6574\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\u8acb\u53c3\u95b1 Plugin Basic \u65bc\u539f\u59cb\u78bc\u5eab\u4e2d\u3002</p>"},{"location":"plugins/#plugin_1","title":"\u5efa\u7acb Plugin \u985e\u5225","text":"<p>\u9996\u5148\uff0c\u7e7c\u627f <code>BasePlugin</code> \u985e\u5225\uff0c\u4e26\u65b0\u589e\u4e00\u500b\u6216\u591a\u500b <code>callback</code> \u65b9\u6cd5\uff0c\u5982\u4e0b\u65b9\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\u6240\u793a\uff1a</p> count_plugin.py<pre><code>from google.adk.agents.base_agent import BaseAgent\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.models.llm_request import LlmRequest\nfrom google.adk.plugins.base_plugin import BasePlugin\n\nclass CountInvocationPlugin(BasePlugin):\n  \"\"\"A custom plugin that counts agent and tool invocations.\"\"\"\n\n  def __init__(self) -&gt; None:\n    \"\"\"Initialize the plugin with counters.\"\"\"\n    super().__init__(name=\"count_invocation\")\n    self.agent_count: int = 0\n    self.tool_count: int = 0\n    self.llm_request_count: int = 0\n\n  async def before_agent_callback(\n      self, *, agent: BaseAgent, callback_context: CallbackContext\n  ) -&gt; None:\n    \"\"\"Count agent runs.\"\"\"\n    self.agent_count += 1\n    print(f\"[Plugin] Agent run count: {self.agent_count}\")\n\n  async def before_model_callback(\n      self, *, callback_context: CallbackContext, llm_request: LlmRequest\n  ) -&gt; None:\n    \"\"\"Count LLM requests.\"\"\"\n    self.llm_request_count += 1\n    print(f\"[Plugin] LLM request count: {self.llm_request_count}\")\n</code></pre> <p>\u6b64\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u5be6\u4f5c\u4e86 <code>before_agent_callback</code> \u548c <code>before_model_callback</code> \u7684 callbacks\uff0c\u7528\u65bc\u5728 agent \u7684\u751f\u547d\u9031\u671f\u4e2d\u7d71\u8a08\u9019\u4e9b\u4efb\u52d9\u7684\u57f7\u884c\u6b21\u6578\u3002</p>"},{"location":"plugins/#plugin_2","title":"\u8a3b\u518a Plugin \u985e\u5225","text":"<p>\u5c07\u4f60\u7684 Plugin \u985e\u5225\u6574\u5408\u9032\u4f86\uff0c\u53ef\u4ee5\u5728 agent \u521d\u59cb\u5316\u6642\uff0c\u65bc <code>Runner</code> \u985e\u5225\u4e2d\uff0c\u900f\u904e <code>plugins</code> \u53c3\u6578\u9032\u884c\u8a3b\u518a\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u6b64\u53c3\u6578\u6307\u5b9a\u591a\u500b Plugin\u3002\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\u5c55\u793a\u5982\u4f55\u5c07\u524d\u4e00\u7bc0\u5b9a\u7fa9\u7684 <code>CountInvocationPlugin</code> plugin \u8a3b\u518a\u5230\u4e00\u500b\u7c21\u55ae\u7684 Agent Development Kit (ADK) agent \u4e2d\u3002</p> <pre><code>from google.adk.runners import InMemoryRunner\nfrom google.adk import Agent\nfrom google.adk.tools.tool_context import ToolContext\nfrom google.genai import types\nimport asyncio\n\n# Import the plugin.\nfrom .count_plugin import CountInvocationPlugin\n\nasync def hello_world(tool_context: ToolContext, query: str):\n  print(f'Hello world: query is [{query}]')\n\nroot_agent = Agent(\n    model='gemini-2.0-flash',\n    name='hello_world',\n    description='Prints hello world with user query.',\n    instruction=\"\"\"Use hello_world tool to print hello world and user query.\n    \"\"\",\n    tools=[hello_world],\n)\n\nasync def main():\n  \"\"\"Main entry point for the agent.\"\"\"\n  prompt = 'hello world'\n  runner = InMemoryRunner(\n      agent=root_agent,\n      app_name='test_app_with_plugin',\n\n      # Add your plugin here. You can add multiple plugins.\n      plugins=[CountInvocationPlugin()],\n  )\n\n  # The rest is the same as starting a regular ADK runner.\n  session = await runner.session_service.create_session(\n      user_id='user',\n      app_name='test_app_with_plugin',\n  )\n\n  async for event in runner.run_async(\n      user_id='user',\n      session_id=session.id,\n      new_message=types.Content(\n        role='user', parts=[types.Part.from_text(text=prompt)]\n      )\n  ):\n    print(f'** Got event from {event.author}')\n\nif __name__ == \"__main__\":\n  asyncio.run(main())\n</code></pre>"},{"location":"plugins/#plugin-agent","title":"\u4f7f\u7528 Plugin \u57f7\u884c agent","text":"<p>\u5982\u540c\u4e00\u822c\u64cd\u4f5c\u65b9\u5f0f\u57f7\u884c Plugin\u3002\u4ee5\u4e0b\u7bc4\u4f8b\u986f\u793a\u5982\u4f55\u5728\u547d\u4ee4\u5217\u57f7\u884c\uff1a</p> <pre><code>python3 -m path.to.main\n</code></pre> <p>ADK web interface \u4e0d\u652f\u63f4 ADK \u63d2\u4ef6\uff08Plugins\uff09\u3002 \u5982\u679c\u4f60\u7684 Agent Development Kit (ADK) \u5de5\u4f5c\u6d41\u7a0b\u4f7f\u7528\u4e86 ADK \u63d2\u4ef6\uff0c\u5247\u5fc5\u9808\u5728\u6c92\u6709\u7db2\u9801 UI \u7684\u60c5\u6cc1\u4e0b\u57f7\u884c\u4f60\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002</p> <p>\u524d\u8ff0 agent \u7684\u8f38\u51fa\u61c9\u8a72\u6703\u985e\u4f3c\u65bc\u4ee5\u4e0b\u5167\u5bb9\uff1a</p> <pre><code>[Plugin] Agent run count: 1\n[Plugin] LLM request count: 1\n** Got event from hello_world\nHello world: query is [hello world]\n** Got event from hello_world\n[Plugin] LLM request count: 2\n** Got event from hello_world\n</code></pre> <p>\u5982\u9700\u6709\u95dc\u57f7\u884c ADK agent \u7684\u66f4\u591a\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 \u5feb\u901f\u958b\u59cb \u6307\u5357\u3002</p>"},{"location":"plugins/#plugin_3","title":"\u4f7f\u7528\u63d2\u4ef6\uff08Plugin\uff09\u69cb\u5efa\u5de5\u4f5c\u6d41\u7a0b","text":"<p>Plugin \u56de\u547c\uff08callback\uff09\u639b\u9264\u662f\u4e00\u7a2e\u5be6\u73fe\u908f\u8f2f\u7684\u6a5f\u5236\uff0c\u53ef\u6514\u622a\u3001\u4fee\u6539\uff0c\u751a\u81f3\u63a7\u5236 agent \u57f7\u884c\u751f\u547d\u9031\u671f\u3002\u6bcf\u500b\u639b\u9264\u90fd\u662f\u4f60 Plugin \u985e\u5225\u4e2d\u7684\u7279\u5b9a\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u5be6\u4f5c\u9019\u4e9b\u65b9\u6cd5\uff0c\u8b93\u7a0b\u5f0f\u78bc\u5728\u95dc\u9375\u6642\u523b\u57f7\u884c\u3002\u6839\u64da\u4f60\u7684\u639b\u9264\u56de\u50b3\u503c\uff0c\u4f60\u53ef\u4ee5\u9078\u64c7\u4ee5\u4e0b\u5169\u7a2e\u904b\u4f5c\u6a21\u5f0f\uff1a</p> <ul> <li>\u89c0\u5bdf\uff08Observe\uff09\uff1a \u5be6\u4f5c\u4e00\u500b\u6c92\u6709\u56de\u50b3\u503c\u7684\u639b\u9264\uff08<code>None</code>\uff09\u3002\u9019\u7a2e\u65b9\u5f0f\u9069\u5408\u7528\u65bc\u7d00\u9304\u65e5\u8a8c\u6216\u6536\u96c6\u6307\u6a19\u7b49\u4efb\u52d9\uff0c\u56e0\u70ba\u5b83\u5141\u8a31 agent \u7684\u5de5\u4f5c\u6d41\u7a0b\u4e0d\u53d7\u5e72\u64fe\u5730\u9032\u884c\u5230\u4e0b\u4e00\u6b65\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5728 Plugin \u4e2d\u4f7f\u7528 <code>after_tool_callback</code> \u4f86\u8a18\u9304\u6bcf\u500b\u5de5\u5177\u7684\u7d50\u679c\u4ee5\u4fbf\u9664\u932f\u3002</li> <li>\u4ecb\u5165\uff08Intervene\uff09\uff1a \u5be6\u4f5c\u4e00\u500b\u639b\u9264\u4e26\u56de\u50b3\u503c\u3002\u9019\u7a2e\u65b9\u5f0f\u6703\u4e2d\u65b7\uff08short-circuit\uff09\u5de5\u4f5c\u6d41\u7a0b\u3002<code>Runner</code> \u6703\u505c\u6b62\u8655\u7406\uff0c\u8df3\u904e\u4efb\u4f55\u5f8c\u7e8c\u7684\u63d2\u4ef6\u548c\u539f\u672c\u9810\u671f\u8981\u57f7\u884c\u7684\u52d5\u4f5c\uff08\u5982 Model \u547c\u53eb\uff09\uff0c\u4e26\u5c07 Plugin \u56de\u547c\u7684\u56de\u50b3\u503c\u4f5c\u70ba\u7d50\u679c\u3002\u5e38\u898b\u7684\u7528\u4f8b\u662f\u5be6\u4f5c <code>before_model_callback</code> \u4f86\u56de\u50b3\u5feb\u53d6\u7684 <code>LlmResponse</code>\uff0c\u907f\u514d\u91cd\u8907\u4e14\u6602\u8cb4\u7684 API \u547c\u53eb\u3002</li> <li>\u4fee\u6b63\uff08Amend\uff09\uff1a \u5be6\u4f5c\u4e00\u500b\u639b\u9264\u4e26\u4fee\u6539 Context \u7269\u4ef6\u3002\u9019\u7a2e\u65b9\u5f0f\u5141\u8a31\u4f60\u4fee\u6539\u5c07\u8981\u57f7\u884c\u4e4b\u6a21\u7d44\u7684 context \u8cc7\u6599\uff0c\u4f46\u4e0d\u6703\u4e2d\u65b7\u8a72\u6a21\u7d44\u7684\u57f7\u884c\u3002\u4f8b\u5982\uff0c\u70ba Model \u7269\u4ef6\u57f7\u884c\u6642\u65b0\u589e\u984d\u5916\u3001\u6a19\u6e96\u5316\u7684\u63d0\u793a\u6587\u5b57\u3002</li> </ul> <p>\u6ce8\u610f\uff1a Plugin \u56de\u547c\u51fd\u5f0f\u7684\u512a\u5148\u9806\u5e8f\u9ad8\u65bc\u7269\u4ef6\u5c64\u7d1a\u6240\u5be6\u4f5c\u7684\u56de\u547c\u3002\u9019\u8868\u793a\u4efb\u4f55 Plugin \u56de\u547c\u7a0b\u5f0f\u78bc\u90fd\u6703\u5728 Agent\u3001Model \u6216 Tool \u7269\u4ef6\u7684\u56de\u547c\u57f7\u884c\u4e4b\u524d\u57f7\u884c\u3002\u6b64\u5916\uff0c\u5982\u679c Plugin \u5c64\u7d1a\u7684 agent \u56de\u547c\u6709\u56de\u50b3\u4efb\u4f55\u503c\uff08\u975e\u7a7a\u7684 <code>None</code> \u56de\u61c9\uff09\uff0c\u5247 Agent\u3001Model \u6216 Tool \u5c64\u7d1a\u7684\u56de\u547c\u5c07\u4e0d\u6703\u57f7\u884c\uff08\u6703\u88ab\u8df3\u904e\uff09\u3002</p> <p>Plugin \u7684\u8a2d\u8a08\u5efa\u7acb\u4e86\u7a0b\u5f0f\u78bc\u57f7\u884c\u7684\u968e\u5c64\uff0c\u4e26\u5c07\u5168\u57df\u95dc\u6ce8\u4e8b\u9805\u8207\u672c\u5730 agent \u908f\u8f2f\u5206\u96e2\u3002Plugin \u662f\u4f60\u6240\u5efa\u7acb\u7684\u6709\u72c0\u614b\u6a21\u7d44\uff08\u4f8b\u5982 <code>PerformanceMonitoringPlugin</code>\uff09\uff0c\u800c\u56de\u547c\u639b\u9264\u5247\u662f\u8a72\u6a21\u7d44\u5167\u6703\u88ab\u57f7\u884c\u7684\u7279\u5b9a\u51fd\u5f0f\u3002\u9019\u7a2e\u67b6\u69cb\u8207\u6a19\u6e96 Agent \u56de\u547c\u6709\u4ee5\u4e0b\u5e7e\u9ede\u6839\u672c\u5dee\u7570\uff1a</p> <ul> <li>\u4f5c\u7528\u7bc4\u570d\uff08Scope\uff09\uff1a Plugin \u639b\u9264\u662f\u5168\u57df\u7684\u3002\u4f60\u53ea\u9700\u5728 <code>Runner</code> \u4e0a\u8a3b\u518a\u4e00\u6b21 Plugin\uff0c\u5176\u639b\u9264\u5c31\u6703\u666e\u904d\u9069\u7528\u65bc\u5b83\u6240\u7ba1\u7406\u7684\u6bcf\u500b Agent\u3001Model \u548c Tool\u3002\u76f8\u8f03\u4e4b\u4e0b\uff0cAgent \u56de\u547c\u662f\u672c\u5730\u7684\uff0c\u9700\u91dd\u5c0d\u7279\u5b9a agent \u5be6\u4f8b\u500b\u5225\u8a2d\u5b9a\u3002</li> <li>\u57f7\u884c\u9806\u5e8f\uff08Execution Order\uff09\uff1a Plugin \u64c1\u6709\u512a\u5148\u6b0a\u3002\u5c0d\u65bc\u4efb\u4f55\u4e8b\u4ef6\uff0cPlugin \u639b\u9264\u90fd\u6703\u5728\u5c0d\u61c9\u7684 Agent \u56de\u547c\u4e4b\u524d\u57f7\u884c\u3002\u9019\u7a2e\u7cfb\u7d71\u884c\u70ba\u4f7f Plugin \u6210\u70ba\u5be6\u4f5c\u6a6b\u5411\u529f\u80fd\uff08\u5982\u5b89\u5168\u653f\u7b56\u3001\u5168\u57df\u5feb\u53d6\u3001\u4e00\u81f4\u6027\u65e5\u8a8c\uff09\u65bc\u6574\u500b\u61c9\u7528\u7a0b\u5f0f\u4e2d\u7684\u6b63\u78ba\u67b6\u69cb\u9078\u64c7\u3002</li> </ul>"},{"location":"plugins/#agent-plugin","title":"Agent \u56de\u547c\u8207 Plugin","text":"<p>\u5982\u524d\u4e00\u7bc0\u6240\u8ff0\uff0cPlugin \u8207 Agent \u56de\u547c\u5728\u529f\u80fd\u4e0a\u6709\u4e00\u4e9b\u76f8\u4f3c\u4e4b\u8655\u3002\u4e0b\u8868\u66f4\u8a73\u7d30\u5730\u6bd4\u8f03\u4e86 Plugin \u8207 Agent \u56de\u547c\u4e4b\u9593\u7684\u5dee\u7570\u3002</p> Plugin Agent \u56de\u547c \u4f5c\u7528\u7bc4\u570d\uff08Scope\uff09 \u5168\u57df\uff1a\u9069\u7528\u65bc \u6240\u6709 <code>Runner</code> \u4e2d\u7684 agent/tool/LLM\u3002 \u672c\u5730\uff1a\u50c5\u9069\u7528\u65bc \u5176\u6240\u8a2d\u5b9a\u7684\u7279\u5b9a agent \u5be6\u4f8b\u3002 \u4e3b\u8981\u7528\u9014 \u6a6b\u5411\u529f\u80fd\uff1a\u65e5\u8a8c\u3001\u653f\u7b56\u3001\u76e3\u63a7\u3001\u5168\u57df\u5feb\u53d6\u3002 \u7279\u5b9a agent \u908f\u8f2f\uff1a\u4fee\u6539\u55ae\u4e00 agent \u7684\u884c\u70ba\u6216\u72c0\u614b\u3002 \u8a2d\u5b9a\u65b9\u5f0f \u5728 <code>Runner</code> \u4e0a\u8a2d\u5b9a\u4e00\u6b21\u3002 \u5728\u6bcf\u500b <code>BaseAgent</code> \u5be6\u4f8b\u4e0a\u500b\u5225\u8a2d\u5b9a\u3002 \u57f7\u884c\u9806\u5e8f Plugin \u56de\u547c\u6703\u5728 Agent \u56de\u547c\u4e4b\u524d\u57f7\u884c\u3002 Agent \u56de\u547c\u6703\u5728 Plugin \u56de\u547c\u4e4b\u5f8c\u57f7\u884c\u3002"},{"location":"plugins/#plugin_4","title":"Plugin \u56de\u547c\u639b\u9264","text":"<p>\u4f60\u53ef\u4ee5\u5728 Plugin \u985e\u5225\u4e2d\u5b9a\u7fa9\u56de\u547c\u51fd\u5f0f\uff0c\u4ee5\u6c7a\u5b9a Plugin \u4f55\u6642\u88ab\u547c\u53eb\u3002\u7576\u6536\u5230\u4f7f\u7528\u8005\u8a0a\u606f\u3001\u5728\u547c\u53eb <code>Runner</code>\u3001<code>Agent</code>\u3001<code>Model</code> \u6216 <code>Tool</code> \u524d\u5f8c\u3001\u91dd\u5c0d <code>Events</code>\uff0c\u4ee5\u53ca\u767c\u751f <code>Model</code> \u6216 <code>Tool</code> \u932f\u8aa4\u6642\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528\u9019\u4e9b\u56de\u547c\u3002\u9019\u4e9b\u56de\u547c\u6703\u8986\u84cb\u4e26\u512a\u5148\u65bc\u4f60\u5728 Agent\u3001Model \u548c Tool \u985e\u5225\u4e2d\u6240\u5b9a\u7fa9\u7684\u4efb\u4f55\u56de\u547c\u3002</p> <p>\u4e0b\u5716\u8aaa\u660e\u4e86\u4f60\u53ef\u4ee5\u5728 agent \u5de5\u4f5c\u6d41\u7a0b\u4e2d\u639b\u63a5\u4e26\u57f7\u884c Plugin \u529f\u80fd\u7684\u56de\u547c\u9ede\uff1a</p> <p> \u5716 1. ADK agent \u5de5\u4f5c\u6d41\u7a0b\u4e2d Plugin \u56de\u547c\u639b\u9264\u7684\u4f4d\u7f6e\u793a\u610f\u5716\u3002</p> <p>\u4ee5\u4e0b\u5404\u7bc0\u5c07\u66f4\u8a73\u7d30\u8aaa\u660e Plugin \u53ef\u7528\u7684\u56de\u547c\u639b\u9264\uff1a</p> <ul> <li>\u4f7f\u7528\u8005\u8a0a\u606f\u56de\u547c</li> <li>Runner \u555f\u52d5\u56de\u547c</li> <li>Agent \u57f7\u884c\u56de\u547c</li> <li>Model \u56de\u547c</li> <li>Tool \u56de\u547c</li> <li>Runner \u7d50\u675f\u56de\u547c</li> </ul>"},{"location":"plugins/#_2","title":"\u4f7f\u7528\u8005\u8a0a\u606f\u56de\u547c","text":"<p>\u4f7f\u7528\u8005\u8a0a\u606f\u56de\u547c\uff08<code>on_user_message_callback</code>\uff09\u6703\u5728\u4f7f\u7528\u8005\u50b3\u9001\u8a0a\u606f\u6642\u89f8\u767c\u3002<code>on_user_message_callback</code> \u662f\u6700\u65e9\u57f7\u884c\u7684\u639b\u9264\uff0c\u8b93\u4f60\u6709\u6a5f\u6703\u6aa2\u67e5\u6216\u4fee\u6539\u521d\u59cb\u8f38\u5165\u3002</p> <ul> <li>\u89f8\u767c\u6642\u6a5f\uff1a \u6b64\u56de\u547c\u6703\u5728 <code>runner.run()</code> \u4e4b\u5f8c\u3001\u5176\u4ed6\u4efb\u4f55\u8655\u7406\u4e4b\u524d\u7acb\u5373\u767c\u751f\u3002</li> <li>\u7528\u9014\uff1a \u7b2c\u4e00\u500b\u6aa2\u67e5\u6216\u4fee\u6539\u4f7f\u7528\u8005\u539f\u59cb\u8f38\u5165\u7684\u6a5f\u6703\u3002</li> <li>\u6d41\u7a0b\u63a7\u5236\uff1a \u56de\u50b3 <code>types.Content</code> \u7269\u4ef6\u4ee5\u53d6\u4ee3\u4f7f\u7528\u8005\u539f\u672c\u7684\u8a0a\u606f\u3002</li> </ul> <p>\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\u5c55\u793a\u4e86\u6b64\u56de\u547c\u7684\u57fa\u672c\u8a9e\u6cd5\uff1a</p> <pre><code>async def on_user_message_callback(\n    self,\n    *,\n    invocation_context: InvocationContext,\n    user_message: types.Content,\n) -&gt; Optional[types.Content]:\n</code></pre>"},{"location":"plugins/#runner-runner-start-callbacks","title":"Runner \u555f\u52d5\u56de\u547c\uff08Runner start callbacks\uff09","text":"<p>Runner \u555f\u52d5 \u56de\u547c\uff08<code>before_run_callback</code>\uff09\u6703\u5728 <code>Runner</code> \u7269\u4ef6\u53d6\u5f97\uff08\u53ef\u80fd\u5df2\u4fee\u6539\u904e\u7684\uff09\u4f7f\u7528\u8005\u8a0a\u606f\u4e26\u6e96\u5099\u57f7\u884c\u6642\u89f8\u767c\u3002\u6b64\u6642\u6703\u89f8\u767c <code>before_run_callback</code>\uff0c\u8b93\u4f60\u80fd\u5728\u4efb\u4f55 agent \u908f\u8f2f\u958b\u59cb\u524d\u9032\u884c\u5168\u57df\u8a2d\u5b9a\u3002</p> <ul> <li>\u89f8\u767c\u6642\u6a5f\uff1a \u7576 <code>runner.run()</code> \u88ab\u547c\u53eb\u5f8c\u7acb\u5373\u57f7\u884c\uff0c\u5728\u4efb\u4f55\u5176\u4ed6\u8655\u7406\u4e4b\u524d\u3002</li> <li>\u76ee\u7684\uff1a \u9019\u662f\u6aa2\u67e5\u6216\u4fee\u6539\u4f7f\u7528\u8005\u539f\u59cb\u8f38\u5165\u7684\u7b2c\u4e00\u500b\u6a5f\u6703\u3002</li> <li>\u6d41\u7a0b\u63a7\u5236\uff1a \u56de\u50b3 <code>types.Content</code> \u7269\u4ef6\u5373\u53ef\u53d6\u4ee3\u4f7f\u7528\u8005\u7684\u539f\u59cb\u8a0a\u606f\u3002</li> </ul> <p>\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\u5c55\u793a\u4e86\u6b64\u56de\u547c\u7684\u57fa\u672c\u8a9e\u6cd5\uff1a</p> <pre><code>async def before_run_callback(\n    self, *, invocation_context: InvocationContext\n) -&gt; Optional[types.Content]:\n</code></pre>"},{"location":"plugins/#agent-agent-execution-callbacks","title":"agent \u57f7\u884c\u56de\u547c\uff08Agent execution callbacks\uff09","text":"<p>agent \u57f7\u884c\u56de\u547c\uff08<code>before_agent</code>\u3001<code>after_agent</code>\uff09\u6703\u5728<code>Runner</code> \u7269\u4ef6\u547c\u53eb agent \u6642\u767c\u751f\u3002<code>before_agent_callback</code> \u6703\u5728 agent \u4e3b\u8981\u5de5\u4f5c\u958b\u59cb\u524d\u7acb\u5373\u57f7\u884c\u3002\u4e3b\u8981\u5de5\u4f5c\u5305\u542b agent \u8655\u7406\u8acb\u6c42\u7684\u6574\u500b\u6d41\u7a0b\uff0c\u9019\u53ef\u80fd\u6703\u6d89\u53ca\u547c\u53eb\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6216 tools\u3002\u7576 agent \u5b8c\u6210\u6240\u6709\u6b65\u9a5f\u4e26\u6e96\u5099\u597d\u7d50\u679c\u5f8c\uff0c<code>after_agent_callback</code> \u6703\u88ab\u57f7\u884c\u3002</p> <p>\u6ce8\u610f\uff1a \u5be6\u4f5c\u9019\u4e9b\u56de\u547c\u7684 Plugin \u6703\u5728 Agent \u5c64\u7d1a\u7684\u56de\u547c\u57f7\u884c\u4e4b\u524d\u88ab\u57f7\u884c\u3002\u6b64\u5916\uff0c\u5982\u679c Plugin \u5c64\u7d1a\u7684 agent \u56de\u547c\u56de\u50b3\u7684\u4e0d\u662f <code>None</code> \u6216 null \u56de\u61c9\uff0c\u5247 Agent \u5c64\u7d1a\u7684\u56de\u547c\u4e0d\u6703\u88ab\u57f7\u884c\uff08\u6703\u88ab\u7565\u904e\uff09\u3002</p> <p>\u5982\u9700\u6709\u95dc\u4f5c\u70ba agent \u7269\u4ef6\u4e00\u90e8\u5206\u6240\u5b9a\u7fa9\u7684 agent \u56de\u547c\u7684\u8a73\u7d30\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 Types of Callbacks\u3002</p>"},{"location":"plugins/#model-callbacks","title":"\u6a21\u578b\u56de\u547c\uff08Model callbacks\uff09","text":"<p>\u6a21\u578b\u56de\u547c \uff08<code>before_model</code>\u3001<code>after_model</code>\u3001<code>on_model_error</code>\uff09 \u6703\u5728 Model \u7269\u4ef6\u57f7\u884c\u524d\u5f8c\u767c\u751f\u3002Plugins \u529f\u80fd\u4e5f\u652f\u63f4\u5728\u767c\u751f\u932f\u8aa4\u6642\u7684\u56de\u547c\uff0c\u8a73\u60c5\u5982\u4e0b\uff1a</p> <ul> <li>\u5982\u679c agent \u9700\u8981\u547c\u53eb AI \u6a21\u578b\uff0c\u6703\u5148\u57f7\u884c <code>before_model_callback</code>\u3002</li> <li>\u5982\u679c\u6a21\u578b\u547c\u53eb\u6210\u529f\uff0c\u63a5\u8457\u6703\u57f7\u884c <code>after_model_callback</code>\u3002</li> <li>\u5982\u679c\u6a21\u578b\u547c\u53eb\u56e0\u4f8b\u5916\uff08exception\uff09\u5931\u6557\uff0c\u5247\u6703\u89f8\u767c <code>on_model_error_callback</code>\uff0c\u53ef\u7528\u65bc\u512a\u96c5\u5730\u8655\u7406\u932f\u8aa4\u3002</li> </ul> <p>\u6ce8\u610f\uff1a \u5be6\u4f5c <code>before_model</code> \u548c <code>**after_model</code> \u56de\u547c\u65b9\u6cd5\u7684 Plugin \u6703\u5728 Model \u5c64\u7d1a\u7684\u56de\u547c\u57f7\u884c\u4e4b\u524d\u88ab\u57f7\u884c\u3002\u6b64\u5916\uff0c\u5982\u679c Plugin \u5c64\u7d1a\u7684\u6a21\u578b\u56de\u547c\u56de\u50b3\u7684\u4e0d\u662f <code>None</code> \u6216 null \u56de\u61c9\uff0c\u5247 Model \u5c64\u7d1a\u7684\u56de\u547c\u4e0d\u6703\u88ab\u57f7\u884c\uff08\u6703\u88ab\u7565\u904e\uff09\u3002</p>"},{"location":"plugins/#model-on-error-callback-details","title":"\u6a21\u578b\u932f\u8aa4\u56de\u547c\u7d30\u7bc0\uff08Model on error callback details\uff09","text":"<p>Model \u7269\u4ef6\u7684 on error \u56de\u547c\u50c5\u7531 Plugins \u529f\u80fd\u652f\u63f4\uff0c\u904b\u4f5c\u65b9\u5f0f\u5982\u4e0b\uff1a</p> <ul> <li>\u89f8\u767c\u6642\u6a5f\uff1a \u5728\u6a21\u578b\u547c\u53eb\u671f\u9593\u767c\u751f\u4f8b\u5916\uff08exception\uff09\u6642\u57f7\u884c\u3002</li> <li>\u5e38\u898b\u7528\u9014\uff1a \u512a\u96c5\u7684\u932f\u8aa4\u8655\u7406\u3001\u8a18\u9304\u7279\u5b9a\u932f\u8aa4\uff0c\u6216\u56de\u50b3\u5099\u7528\u56de\u61c9\uff0c\u4f8b\u5982\u300cAI \u670d\u52d9\u76ee\u524d\u7121\u6cd5\u4f7f\u7528\u300d\u3002</li> <li>\u6d41\u7a0b\u63a7\u5236\uff1a<ul> <li>\u56de\u50b3 <code>LlmResponse</code> \u7269\u4ef6\u53ef\u6291\u5236\u4f8b\u5916\u4e26\u63d0\u4f9b\u5099\u7528\u7d50\u679c\u3002</li> <li>\u56de\u50b3 <code>None</code> \u5247\u6703\u8b93\u539f\u59cb\u4f8b\u5916\u7e7c\u7e8c\u62cb\u51fa\u3002</li> </ul> </li> </ul> <p>\u6ce8\u610f\uff1a \u5982\u679c Model \u7269\u4ef6\u7684\u57f7\u884c\u56de\u50b3 <code>LlmResponse</code>\uff0c\u7cfb\u7d71\u6703\u7e7c\u7e8c\u57f7\u884c\u6d41\u7a0b\uff0c\u4e26\u6b63\u5e38\u89f8\u767c <code>after_model_callback</code>\u3002</p> <p>\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\u986f\u793a\u6b64\u56de\u547c\u7684\u57fa\u672c\u8a9e\u6cd5\uff1a</p> <pre><code>async def on_model_error_callback(\n    self,\n    *,\n    callback_context: CallbackContext,\n    llm_request: LlmRequest,\n    error: Exception,\n) -&gt; Optional[LlmResponse]:\n</code></pre>"},{"location":"plugins/#_3","title":"\u5de5\u5177\u56de\u547c\u51fd\u5f0f","text":"<p>\u63d2\u4ef6\u7684\u5de5\u5177\u56de\u547c\u51fd\u5f0f (<code>before_tool</code>, <code>after_tool</code>, <code>on_tool_error</code>) \u6703\u5728\u5de5\u5177\u57f7\u884c\u524d\u5f8c\uff0c\u6216\u767c\u751f\u932f\u8aa4\u6642\u89f8\u767c\u3002Plugins \u529f\u80fd\u540c\u6642\u652f\u63f4\u932f\u8aa4\u4e8b\u4ef6\u7684\u56de\u547c\uff0c\u5982\u4e0b\u6240\u8ff0\uff1a\\</p> <ul> <li>\u7576 agent \u57f7\u884c\u5de5\u5177\u6642\uff0c\u6703\u5148\u57f7\u884c <code>before_tool_callback</code>\u3002</li> <li>\u5982\u679c\u5de5\u5177\u57f7\u884c\u6210\u529f\uff0c\u63a5\u8457\u6703\u57f7\u884c <code>after_tool_callback</code>\u3002</li> <li>\u5982\u679c\u5de5\u5177\u57f7\u884c\u6642\u767c\u751f\u4f8b\u5916\u72c0\u6cc1\uff0c\u5247\u6703\u89f8\u767c <code>on_tool_error_callback</code>\uff0c\u8b93\u4f60\u6709\u6a5f\u6703\u8655\u7406\u5931\u6557\u60c5\u5f62\u3002\u5982\u679c     <code>on_tool_error_callback</code> \u56de\u50b3\u4e00\u500b dict\uff0c<code>after_tool_callback</code>     \u6703\u6b63\u5e38\u88ab\u89f8\u767c\u3002</li> </ul> <p>\u6ce8\u610f\uff1a \u5be6\u4f5c\u9019\u4e9b\u56de\u547c\u51fd\u5f0f\u7684\u63d2\u4ef6\uff0c\u6703\u5728\u5de5\u5177\u5c64\u7d1a\u7684\u56de\u547c\u51fd\u5f0f\u57f7\u884c\u4e4b\u524d\u88ab\u57f7\u884c\u3002\u6b64\u5916\uff0c\u5982\u679c\u63d2\u4ef6\u5c64\u7d1a\u7684\u5de5\u5177\u56de\u547c\u51fd\u5f0f\u56de\u50b3\u7684\u5167\u5bb9\u4e0d\u662f <code>None</code> \u6216 null\uff0c\u5247\u5de5\u5177\u5c64\u7d1a\u7684\u56de\u547c\u51fd\u5f0f\u5c07\u4e0d\u6703\u88ab\u57f7\u884c\uff08\u6703\u88ab\u7565\u904e\uff09\u3002</p>"},{"location":"plugins/#_4","title":"\u5de5\u5177\u932f\u8aa4\u56de\u547c\u51fd\u5f0f\u7d30\u7bc0","text":"<p>Tool \u7269\u4ef6\u7684\u932f\u8aa4\u56de\u547c\u51fd\u5f0f\u50c5\u7531 Plugins \u529f\u80fd\u652f\u63f4\uff0c\u904b\u4f5c\u65b9\u5f0f\u5982\u4e0b\uff1a</p> <ul> <li>\u89f8\u767c\u6642\u6a5f\uff1a \u7576\u5de5\u5177\u7684 <code>run</code> \u65b9\u6cd5\u57f7\u884c\u6642\u767c\u751f\u4f8b\u5916\u72c0\u6cc1\u3002</li> <li>\u7528\u9014\uff1a \u6355\u6349\u7279\u5b9a\u5de5\u5177\u4f8b\u5916\uff08\u5982 <code>APIError</code>\uff09\u3001\u8a18\u9304\u5931\u6557\uff0c\u4e26\u5c07\u66f4\u53cb\u5584\u7684\u932f\u8aa4\u8a0a\u606f\u56de\u50b3\u7d66\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\u3002</li> <li>\u6d41\u7a0b\u63a7\u5236\uff1a \u56de\u50b3 <code>dict</code> \u53ef\u6291\u5236\u4f8b\u5916\uff0c\u4e26\u63d0\u4f9b\u5099\u7528\u7d50\u679c\u3002\u56de\u50b3 <code>None</code> \u5247\u6703\u8b93\u539f\u59cb\u4f8b\u5916\u7e7c\u7e8c\u62cb\u51fa\u3002</li> </ul> <p>\u6ce8\u610f\uff1a \u82e5\u56de\u50b3 <code>dict</code>\uff0c\u5c07\u6703\u6062\u5fa9\u57f7\u884c\u6d41\u7a0b\uff0c\u4e26\u4e14 <code>after_tool_callback</code> \u6703\u6b63\u5e38\u88ab\u89f8\u767c\u3002</p> <p>\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\u5c55\u793a\u6b64\u56de\u547c\u51fd\u5f0f\u7684\u57fa\u672c\u8a9e\u6cd5\uff1a</p> <pre><code>async def on_tool_error_callback(\n    self,\n    *,\n    tool: BaseTool,\n    tool_args: dict[str, Any],\n    tool_context: ToolContext,\n    error: Exception,\n) -&gt; Optional[dict]:\n</code></pre>"},{"location":"plugins/#event-callbacks","title":"\u4e8b\u4ef6\u56de\u547c\uff08Event callbacks\uff09","text":"<p>\u4e8b\u4ef6\u56de\u547c\uff08<code>on_event_callback</code>\uff09\u6703\u5728 agent \u7522\u751f\u8f38\u51fa\u6642\u89f8\u767c\uff0c\u4f8b\u5982\u6587\u5b57\u56de\u61c9\u6216\u5de5\u5177\u547c\u53eb (tool call) \u7d50\u679c\uff0c\u9019\u4e9b\u8f38\u51fa\u6703\u4ee5 <code>Event</code> \u7269\u4ef6\u7684\u5f62\u5f0f\u8b93\u6e21\uff08yield\uff09\u3002<code>on_event_callback</code> \u6703\u91dd\u5c0d\u6bcf\u500b\u4e8b\u4ef6\u89f8\u767c\uff0c\u8b93\u4f60\u80fd\u5728\u4e8b\u4ef6\u4e32\u6d41\u5230\u7528\u6236\u7aef\u4e4b\u524d\u9032\u884c\u4fee\u6539\u3002</p> <ul> <li>\u89f8\u767c\u6642\u6a5f\uff1a \u5728 agent \u8b93\u6e21\uff08yield\uff09<code>Event</code> \u4e4b\u5f8c\u3001\u50b3\u9001\u7d66\u4f7f\u7528\u8005\u4e4b\u524d\u3002\u4e00\u6b21 agent \u57f7\u884c\u53ef\u80fd\u7522\u751f\u591a\u500b\u4e8b\u4ef6\u3002</li> <li>\u7528\u9014\uff1a \u9069\u5408\u7528\u65bc\u4fee\u6539\u6216\u8c50\u5bcc\u4e8b\u4ef6\uff08\u4f8b\u5982\u65b0\u589e\u4e2d\u7e7c\u8cc7\u6599\uff09\uff0c\u6216\u6839\u64da\u7279\u5b9a\u4e8b\u4ef6\u89f8\u767c\u526f\u4f5c\u7528\u3002</li> <li>\u6d41\u7a0b\u63a7\u5236\uff1a \u56de\u50b3 <code>Event</code> \u7269\u4ef6\u53ef\u53d6\u4ee3\u539f\u672c\u7684\u4e8b\u4ef6\u3002</li> </ul> <p>\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\u5c55\u793a\u4e86\u6b64\u56de\u547c\u7684\u57fa\u672c\u8a9e\u6cd5\uff1a</p> <pre><code>async def on_event_callback(\n    self, *, invocation_context: InvocationContext, event: Event\n) -&gt; Optional[Event]:\n</code></pre>"},{"location":"plugins/#runner","title":"Runner \u7d50\u675f\u56de\u547c","text":"<p>Runner end \u56de\u547c (<code>after_run_callback</code>) \u6703\u5728 agent \u5b8c\u6210\u5176\u6574\u500b\u6d41\u7a0b\u4e14\u6240\u6709\u4e8b\u4ef6\u90fd\u8655\u7406\u5b8c\u7562\u6642\u89f8\u767c\uff0c<code>Runner</code> \u5b8c\u6210\u5176\u57f7\u884c\u5f8c\u7d50\u675f\u3002<code>after_run_callback</code> \u662f\u6700\u5f8c\u4e00\u500b hook\uff0c\u975e\u5e38\u9069\u5408\u7528\u65bc\u6e05\u7406\uff08cleanup\uff09\u8207\u6700\u7d42\u5831\u544a\u3002</p> <ul> <li>\u89f8\u767c\u6642\u6a5f\uff1a \u7576 <code>Runner</code> \u5b8c\u6574\u57f7\u884c\u4e26\u5b8c\u6210\u8acb\u6c42\u5f8c\u3002</li> <li>\u7528\u9014\uff1a \u9069\u5408\u7528\u65bc\u5168\u57df\u6e05\u7406\u4efb\u52d9\uff0c\u4f8b\u5982\u95dc\u9589\u9023\u7dda\u3001\u6700\u7d42\u7d00\u9304\u65e5\u8a8c\u6216\u5f59\u6574\u6307\u6a19\u8cc7\u6599\u3002</li> <li>\u6d41\u7a0b\u63a7\u5236\uff1a \u6b64\u56de\u547c\u50c5\u7528\u65bc\u7d50\u675f\u968e\u6bb5\u7684\u6e05\u7406\uff0c\u7121\u6cd5\u8b8a\u66f4\u6700\u7d42\u7d50\u679c\u3002</li> </ul> <p>\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\u5c55\u793a\u4e86\u6b64\u56de\u547c\u7684\u57fa\u672c\u8a9e\u6cd5\uff1a</p> <pre><code>async def after_run_callback(\n    self, *, invocation_context: InvocationContext\n) -&gt; Optional[None]:\n</code></pre>"},{"location":"plugins/index.en/","title":"Plugins","text":""},{"location":"plugins/index.en/#what-is-a-plugin","title":"What is a Plugin?","text":"<p>A Plugin in Agent Development Kit (ADK) is a custom code module that can be executed at various stages of an agent workflow lifecycle using callback hooks. You use Plugins for functionality that is applicable across your agent workflow. Some typical applications of Plugins are as follows:</p> <ul> <li>Logging and tracing: Create detailed logs of agent, tool, and     generative AI model activity for debugging and performance analysis.</li> <li>Policy enforcement: Implement security guardrails, such as a     function that checks if users are authorized to use a specific tool and     prevent its execution if they do not have permission.</li> <li>Monitoring and metrics: Collect and export metrics on token usage,     execution times, and invocation counts to monitoring systems such as     Prometheus or      Google Cloud Observability      (formerly Stackdriver).</li> <li>Response caching: Check if a request has been made before, so you     can return a cached response, skipping expensive or time consuming AI model     or tool calls.</li> <li>Request or response modification: Dynamically add information to AI     model prompts or standardize tool output responses.</li> </ul> <p>Tip</p> <p>When implementing security guardrails and policies, use ADK Plugins for better modularity and flexibility than Callbacks. For more details, see  Callbacks and Plugins for Security Guardrails.</p> <p>Caution</p> <p>Plugins are not supported by the  ADK web interface.  If your ADK workflow uses Plugins, you must run your workflow without the  web interface.</p> <p>Tip: When implementing security guardrails and policies, use ADK Plugins for better modularity and flexibility than Callbacks. For more details, see Callbacks and Plugins for Security Guardrails.</p>"},{"location":"plugins/index.en/#how-do-plugins-work","title":"How do Plugins work?","text":"<p>An ADK Plugin extends the <code>BasePlugin</code> class and contains one or more <code>callback</code> methods, indicating where in the agent lifecycle the Plugin should be executed. You integrate Plugins into an agent by registering them in your agent's <code>Runner</code> class. For more information on how and where you can trigger Plugins in your agent application, see Plugin callback hooks.</p> <p>Plugin functionality builds on Callbacks, which is a key design element of the ADK's extensible architecture. While a typical Agent Callback is configured on a single agent, a single tool for a specific task, a Plugin is registered once on the <code>Runner</code> and its callbacks apply globally to every agent, tool, and LLM call managed by that runner. Plugins let you package related callback functions together to be used across a workflow. This makes Plugins an ideal solution for implementing features that cut across your entire agent application.</p>"},{"location":"plugins/index.en/#define-and-register-plugins","title":"Define and register Plugins","text":"<p>This section explains how to define Plugin classes and register them as part of your agent workflow. For a complete code example, see Plugin Basic in the repository.</p>"},{"location":"plugins/index.en/#create-plugin-class","title":"Create Plugin class","text":"<p>Start by extending the <code>BasePlugin</code> class and add one or more <code>callback</code> methods, as shown in the following code example:</p> count_plugin.py<pre><code>from google.adk.agents.base_agent import BaseAgent\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.models.llm_request import LlmRequest\nfrom google.adk.plugins.base_plugin import BasePlugin\n\nclass CountInvocationPlugin(BasePlugin):\n  \"\"\"A custom plugin that counts agent and tool invocations.\"\"\"\n\n  def __init__(self) -&gt; None:\n    \"\"\"Initialize the plugin with counters.\"\"\"\n    super().__init__(name=\"count_invocation\")\n    self.agent_count: int = 0\n    self.tool_count: int = 0\n    self.llm_request_count: int = 0\n\n  async def before_agent_callback(\n      self, *, agent: BaseAgent, callback_context: CallbackContext\n  ) -&gt; None:\n    \"\"\"Count agent runs.\"\"\"\n    self.agent_count += 1\n    print(f\"[Plugin] Agent run count: {self.agent_count}\")\n\n  async def before_model_callback(\n      self, *, callback_context: CallbackContext, llm_request: LlmRequest\n  ) -&gt; None:\n    \"\"\"Count LLM requests.\"\"\"\n    self.llm_request_count += 1\n    print(f\"[Plugin] LLM request count: {self.llm_request_count}\")\n</code></pre> <p>This example code implements callbacks for <code>before_agent_callback</code> and <code>before_model_callback</code> to count execution of these tasks during the lifecycle of the agent.</p>"},{"location":"plugins/index.en/#register-plugin-class","title":"Register Plugin class","text":"<p>Integrate your Plugin class by registering it during your agent initialization as part of your <code>Runner</code> class, using the <code>plugins</code> parameter. You can specify multiple Plugins with this parameter. The following code example shows how to register the <code>CountInvocationPlugin</code> plugin defined in the previous section with a simple ADK agent.</p> <pre><code>from google.adk.runners import InMemoryRunner\nfrom google.adk import Agent\nfrom google.adk.tools.tool_context import ToolContext\nfrom google.genai import types\nimport asyncio\n\n# Import the plugin.\nfrom .count_plugin import CountInvocationPlugin\n\nasync def hello_world(tool_context: ToolContext, query: str):\n  print(f'Hello world: query is [{query}]')\n\nroot_agent = Agent(\n    model='gemini-2.0-flash',\n    name='hello_world',\n    description='Prints hello world with user query.',\n    instruction=\"\"\"Use hello_world tool to print hello world and user query.\n    \"\"\",\n    tools=[hello_world],\n)\n\nasync def main():\n  \"\"\"Main entry point for the agent.\"\"\"\n  prompt = 'hello world'\n  runner = InMemoryRunner(\n      agent=root_agent,\n      app_name='test_app_with_plugin',\n\n      # Add your plugin here. You can add multiple plugins.\n      plugins=[CountInvocationPlugin()],\n  )\n\n  # The rest is the same as starting a regular ADK runner.\n  session = await runner.session_service.create_session(\n      user_id='user',\n      app_name='test_app_with_plugin',\n  )\n\n  async for event in runner.run_async(\n      user_id='user',\n      session_id=session.id,\n      new_message=types.Content(\n        role='user', parts=[types.Part.from_text(text=prompt)]\n      )\n  ):\n    print(f'** Got event from {event.author}')\n\nif __name__ == \"__main__\":\n  asyncio.run(main())\n</code></pre>"},{"location":"plugins/index.en/#run-the-agent-with-the-plugin","title":"Run the agent with the Plugin","text":"<p>Run the plugin as you typically would. The following shows how to run the command line:</p> <pre><code>python3 -m path.to.main\n</code></pre> <p>Plugins are not supported by the ADK web interface. If your ADK workflow uses Plugins, you must run your workflow without the web interface.</p> <p>The output of this previously described agent should look similar to the following:</p> <pre><code>[Plugin] Agent run count: 1\n[Plugin] LLM request count: 1\n** Got event from hello_world\nHello world: query is [hello world]\n** Got event from hello_world\n[Plugin] LLM request count: 2\n** Got event from hello_world\n</code></pre> <p>For more information on running ADK agents, see the Quickstart guide.</p>"},{"location":"plugins/index.en/#build-workflows-with-plugins","title":"Build workflows with Plugins","text":"<p>Plugin callback hooks are a mechanism for implementing logic that intercepts, modifies, and even controls the agent's execution lifecycle. Each hook is a specific method in your Plugin class that you can implement to run code at a key moment. You have a choice between two modes of operation based on your hook's return value:</p> <ul> <li>To Observe: Implement a hook with no return value (<code>None</code>). This     approach is for tasks such as logging or collecting metrics, as it allows     the agent's workflow to proceed to the next step without interruption. For     example, you could use <code>after_tool_callback</code> in a Plugin to log every     tool's result for debugging.</li> <li>To Intervene: Implement a hook and return a value. This approach     short-circuits the workflow. The <code>Runner</code> halts processing, skips any     subsequent plugins and the original intended action, like a Model call, and     use a Plugin callback's return value as the result. A common use case is     implementing <code>before_model_callback</code> to return a cached <code>LlmResponse</code>,     preventing a redundant and costly API call.</li> <li>To Amend: Implement a hook and modify the Context object. This     approach allows you to modify the context data for the module to be     executed without otherwise interrupting the execution of that module. For     example, adding additional, standardized prompt text for Model object execution.</li> </ul> <p>Caution: Plugin callback functions have precedence over callbacks implemented at the object level. This behavior means that Any Plugin callbacks code is executed before any Agent, Model, or Tool objects callbacks are executed. Furthermore, if a Plugin-level agent callback returns any value, and not an empty (<code>None</code>) response, the Agent, Model, or Tool-level callback is not executed (skipped).</p> <p>The Plugin design establishes a hierarchy of code execution and separates global concerns from local agent logic. A Plugin is the stateful module you build, such as <code>PerformanceMonitoringPlugin</code>, while the callback hooks are the specific functions within that module that get executed. This architecture differs fundamentally from standard Agent Callbacks in these critical ways:</p> <ul> <li>Scope: Plugin hooks are global. You register a Plugin once on the     <code>Runner</code>, and its hooks apply universally to every Agent, Model, and Tool     it manages. In contrast, Agent Callbacks are local, configured     individually on a specific agent instance.</li> <li>Execution Order: Plugins have precedence. For any given event, the     Plugin hooks always run before any corresponding Agent Callback. This     system behavior makes Plugins the correct architectural choice for     implementing cross-cutting features like security policies, universal     caching, and consistent logging across your entire application.</li> </ul>"},{"location":"plugins/index.en/#agent-callbacks-and-plugins","title":"Agent Callbacks and Plugins","text":"<p>As mentioned in the previous section, there are some functional similarities between Plugins and Agent Callbacks. The following table compares the differences between Plugins and Agent Callbacks in more detail.</p> Plugins Agent Callbacks Scope Global: Apply to all agents/tools/LLMs in the <code>Runner</code>. Local: Apply only to the specific agent instance they are configured on. Primary Use Case Horizontal Features: Logging, policy, monitoring, global caching. Specific Agent Logic: Modifying the behavior or state of a single agent. Configuration Configure once on the <code>Runner</code>. Configure individually on each <code>BaseAgent</code> instance. Execution Order Plugin callbacks run before Agent Callbacks. Agent callbacks run after Plugin callbacks."},{"location":"plugins/index.en/#plugin-callback-hooks","title":"Plugin callback hooks","text":"<p>You define when a Plugin is called with the callback functions to define in your Plugin class. Callbacks are available when a user message is received, before and after an <code>Runner</code>, <code>Agent</code>, <code>Model</code>, or <code>Tool</code> is called, for <code>Events</code>, and when a <code>Model</code>, or <code>Tool</code> error occurs. These callbacks include, and take precedence over, the any callbacks defined within your Agent, Model, and Tool classes.</p> <p>The following diagram illustrates callback points where you can attach and run Plugin functionality during your agents workflow:</p> <p> Figure 1. Diagram of ADK agent workflow with Plugin callback hook locations.</p> <p>The following sections describe the available callback hooks for Plugins in more detail.</p> <ul> <li>User Message callbacks</li> <li>Runner start callbacks</li> <li>Agent execution callbacks</li> <li>Model callbacks</li> <li>Tool callbacks</li> <li>Runner end callbacks</li> </ul>"},{"location":"plugins/index.en/#user-message-callbacks","title":"User Message callbacks","text":"<p>A User Message callback (<code>on_user_message_callback</code>) happens when a user sends a message. The <code>on_user_message_callback</code> is the very first hook to run, giving you a chance to inspect or modify the initial input.\\</p> <ul> <li>When It Runs: This callback happens immediately after     <code>runner.run()</code>, before any other processing.</li> <li>Purpose: The first opportunity to inspect or modify the user's raw     input.</li> <li>Flow Control: Returns a <code>types.Content</code> object to replace the     user's original message.</li> </ul> <p>The following code example shows the basic syntax of this callback:</p> <pre><code>async def on_user_message_callback(\n    self,\n    *,\n    invocation_context: InvocationContext,\n    user_message: types.Content,\n) -&gt; Optional[types.Content]:\n</code></pre>"},{"location":"plugins/index.en/#runner-start-callbacks","title":"Runner start callbacks","text":"<p>A Runner start callback (<code>before_run_callback</code>) happens when the <code>Runner</code> object takes the potentially modified user message and prepares for execution. The <code>before_run_callback</code> fires here, allowing for global setup before any agent logic begins.</p> <ul> <li>When It Runs: Immediately after <code>runner.run()</code> is called, before     any other processing.</li> <li>Purpose: The first opportunity to inspect or modify the user's raw     input.</li> <li>Flow Control: Return a <code>types.Content</code> object to replace the     user's original message.</li> </ul> <p>The following code example shows the basic syntax of this callback:</p> <pre><code>async def before_run_callback(\n    self, *, invocation_context: InvocationContext\n) -&gt; Optional[types.Content]:\n</code></pre>"},{"location":"plugins/index.en/#agent-execution-callbacks","title":"Agent execution callbacks","text":"<p>Agent execution callbacks (<code>before_agent</code>, <code>after_agent</code>) happen when a <code>Runner</code> object invokes an agent. The <code>before_agent_callback</code> runs immediately before the agent's main work begins. The main work encompasses the agent's entire process for handling the request, which could involve calling models or tools. After the agent has finished all its steps and prepared a result, the <code>after_agent_callback</code> runs.</p> <p>Caution: Plugins that implement these callbacks are executed before the Agent-level callbacks are executed. Furthermore, if a Plugin-level agent callback returns anything other than a <code>None</code> or null response, the Agent-level callback is not executed (skipped).</p> <p>For more information about Agent callbacks defined as part of an Agent object, see Types of Callbacks.</p>"},{"location":"plugins/index.en/#model-callbacks","title":"Model callbacks","text":"<p>Model callbacks (<code>before_model</code>, <code>after_model</code>, <code>on_model_error</code>) happen before and after a Model object executes. The Plugins feature also supports a callback in the event of an error, as detailed below:</p> <ul> <li>If an agent needs to call an AI model, <code>before_model_callback</code> runs first.</li> <li>If the model call is successful, <code>after_model_callback</code> runs next.</li> <li>If the model call fails with an exception, the <code>on_model_error_callback</code>     is triggered instead, allowing for graceful recovery.</li> </ul> <p>Caution: Plugins that implement the <code>before_model</code> and  <code>**after_model</code> callback methods are executed before the Model-level callbacks are executed. Furthermore, if a Plugin-level model callback returns anything other than a <code>None</code> or null response, the Model-level callback is not executed (skipped).</p>"},{"location":"plugins/index.en/#model-on-error-callback-details","title":"Model on error callback details","text":"<p>The on error callback for Model objects is only supported by the Plugins feature works as follows:</p> <ul> <li>When It Runs: When an exception is raised during the model call.</li> <li>Common Use Cases: Graceful error handling, logging the specific     error, or returning a fallback response, such as \"The AI service is     currently unavailable.\"</li> <li>Flow Control:<ul> <li>Returns an <code>LlmResponse</code> object to suppress the exception     and provide a fallback result.</li> <li>Returns <code>None</code> to allow the original exception to be raised.</li> </ul> </li> </ul> <p>Note: If the execution of the Model object returns a <code>LlmResponse</code>, the system resumes the execution flow, and <code>after_model_callback</code> will be triggered normally.****</p> <p>The following code example shows the basic syntax of this callback:</p> <pre><code>async def on_model_error_callback(\n    self,\n    *,\n    callback_context: CallbackContext,\n    llm_request: LlmRequest,\n    error: Exception,\n) -&gt; Optional[LlmResponse]:\n</code></pre>"},{"location":"plugins/index.en/#tool-callbacks","title":"Tool callbacks","text":"<p>Tool callbacks (<code>before_tool</code>, <code>after_tool</code>, <code>on_tool_error</code>) for Plugins happen before or after the execution of a tool, or when an error occurs. The Plugins feature also supports a callback in the event of an error, as detailed below:\\</p> <ul> <li>When an agent executes a Tool, <code>before_tool_callback</code> runs first.</li> <li>If the tool executes successfully, <code>after_tool_callback</code> runs next.</li> <li>If the tool raises an exception, the <code>on_tool_error_callback</code> is     triggered instead, giving you a chance to handle the failure. If     <code>on_tool_error_callback</code> returns a dict, <code>after_tool_callback</code> will be     triggered normally.</li> </ul> <p>Caution: Plugins that implement these callbacks are executed before the Tool-level callbacks are executed. Furthermore, if a Plugin-level tool callback returns anything other than a <code>None</code> or null response, the Tool-level callback is not executed (skipped).</p>"},{"location":"plugins/index.en/#tool-on-error-callback-details","title":"Tool on error callback details","text":"<p>The on error callback for Tool objects is only supported by the Plugins feature works as follows:</p> <ul> <li>When It Runs: When an exception is raised during the execution of a     tool's <code>run</code> method.</li> <li>Purpose: Catching specific tool exceptions (like <code>APIError</code>),     logging the failure, and providing a user-friendly error message back to     the LLM.</li> <li>Flow Control: Return a <code>dict</code> to suppress the exception, provide     a fallback result. Return <code>None</code> to allow the original exception to be raised.</li> </ul> <p>Note: By returning a <code>dict</code>, this resumes the execution flow, and <code>after_tool_callback</code> will be triggered normally.</p> <p>The following code example shows the basic syntax of this callback:</p> <pre><code>async def on_tool_error_callback(\n    self,\n    *,\n    tool: BaseTool,\n    tool_args: dict[str, Any],\n    tool_context: ToolContext,\n    error: Exception,\n) -&gt; Optional[dict]:\n</code></pre>"},{"location":"plugins/index.en/#event-callbacks","title":"Event callbacks","text":"<p>An Event callback (<code>on_event_callback</code>) happens when an agent produces outputs such as a text response or a tool call result, it yields them as <code>Event</code> objects. The <code>on_event_callback</code> fires for each event, allowing you to modify it before it's streamed to the client.</p> <ul> <li>When It Runs: After an agent yields an <code>Event</code> but before it's sent     to the user. An agent's run may produce multiple events.</li> <li>Purpose: Useful for modifying or enriching events (e.g., adding     metadata) or for triggering side effects based on specific events.</li> <li>Flow Control: Return an <code>Event</code> object to replace the original     event.</li> </ul> <p>The following code example shows the basic syntax of this callback:</p> <pre><code>async def on_event_callback(\n    self, *, invocation_context: InvocationContext, event: Event\n) -&gt; Optional[Event]:\n</code></pre>"},{"location":"plugins/index.en/#runner-end-callbacks","title":"Runner end callbacks","text":"<p>The Runner end callback (<code>after_run_callback</code>) happens when the agent has finished its entire process and all events have been handled, the <code>Runner</code> completes its run. The <code>after_run_callback</code> is the final hook, perfect for cleanup and final reporting.</p> <ul> <li>When It Runs: After the <code>Runner</code> fully completes the execution of a     request.</li> <li>Purpose: Ideal for global cleanup tasks, such as closing connections     or finalizing logs and metrics data.</li> <li>Flow Control: This callback is for teardown only and cannot alter     the final result.</li> </ul> <p>The following code example shows the basic syntax of this callback:</p> <pre><code>async def after_run_callback(\n    self, *, invocation_context: InvocationContext\n) -&gt; Optional[None]:\n</code></pre>"},{"location":"runtime/","title":"\u57f7\u884c\u968e\u6bb5\uff08Runtime\uff09","text":""},{"location":"runtime/#runtime_1","title":"\u4ec0\u9ebc\u662f\u57f7\u884c\u968e\u6bb5\uff08Runtime\uff09\uff1f","text":"<p>Agent Development Kit (ADK) \u57f7\u884c\u968e\u6bb5\uff08Runtime\uff09\u662f\u652f\u63f4\u60a8\u7684 agent \u61c9\u7528\u7a0b\u5f0f\u5728\u4f7f\u7528\u8005\u4e92\u52d5\u904e\u7a0b\u4e2d\u904b\u4f5c\u7684\u5e95\u5c64\u5f15\u64ce\u3002\u5b83\u8ca0\u8cac\u5c07\u60a8\u6240\u5b9a\u7fa9\u7684 agent\u3001tools \u4ee5\u53ca Callbacks \u7d44\u7e54\u8d77\u4f86\uff0c\u4e26\u5728\u56de\u61c9\u4f7f\u7528\u8005\u8f38\u5165\u6642\u5354\u8abf\u5b83\u5011\u7684\u57f7\u884c\uff0c\u7ba1\u7406\u8cc7\u8a0a\u6d41\u3001\u72c0\u614b\u8b8a\u66f4\uff0c\u4ee5\u53ca\u8207\u5916\u90e8\u670d\u52d9\uff08\u5982\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6216\u5132\u5b58\u7a7a\u9593\uff09\u7684\u4e92\u52d5\u3002</p> <p>\u60a8\u53ef\u4ee5\u5c07 Runtime \u60f3\u50cf\u6210 agent \u61c9\u7528\u7a0b\u5f0f\u7684\u300c\u5f15\u64ce\u300d\u3002\u60a8\u8ca0\u8cac\u5b9a\u7fa9\u5404\u500b\u96f6\u4ef6\uff08agent\u3001tools\uff09\uff0c\u800c Runtime \u5247\u8ca0\u8cac\u5c07\u9019\u4e9b\u96f6\u4ef6\u4e32\u63a5\u4e26\u5354\u540c\u904b\u4f5c\uff0c\u4ee5\u6eff\u8db3\u4f7f\u7528\u8005\u7684\u9700\u6c42\u3002</p>"},{"location":"runtime/#event-loop","title":"\u6838\u5fc3\u6982\u5ff5\uff1a\u4e8b\u4ef6\u8ff4\u5708\uff08Event Loop\uff09","text":"<p>\u5728\u6838\u5fc3\u8a2d\u8a08\u4e0a\uff0cAgent Development Kit (ADK) \u57f7\u884c\u968e\u6bb5\uff08Runtime\uff09\u904b\u4f5c\u65bc\u4e8b\u4ef6\u8ff4\u5708\uff08Event Loop\uff09\u4e4b\u4e0a\u3002\u9019\u500b\u8ff4\u5708\u4fc3\u6210\u4e86 <code>Runner</code> \u5143\u4ef6\u8207\u60a8\u6240\u5b9a\u7fa9\u7684\u300c\u57f7\u884c\u908f\u8f2f\u300d\uff08\u5305\u542b\u60a8\u7684 Agents\u3001\u5b83\u5011\u6240\u767c\u8d77\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb\u3001Callbacks \u53ca Tools\uff09\u4e4b\u9593\u7684\u96d9\u5411\u6e9d\u901a\u3002</p> <p></p> <p>\u7c21\u55ae\u4f86\u8aaa\uff1a</p> <ol> <li><code>Runner</code> \u63a5\u6536\u5230\u4f7f\u7528\u8005\u67e5\u8a62\u5f8c\uff0c\u6703\u8acb\u6c42\u4e3b\u8981\u7684 <code>Agent</code> \u958b\u59cb\u8655\u7406\u3002</li> <li><code>Agent</code>\uff08\u4ee5\u53ca\u5176\u76f8\u95dc\u908f\u8f2f\uff09\u6703\u6301\u7e8c\u57f7\u884c\uff0c\u76f4\u5230\u6709\u8cc7\u8a0a\u9700\u8981\u56de\u5831\uff08\u4f8b\u5982\u56de\u61c9\u3001\u8acb\u6c42\u4f7f\u7528\u5de5\u5177\u3001\u6216\u72c0\u614b\u8b8a\u66f4\uff09\u2014\u2014\u9019\u6642\u5b83\u6703\u8b93\u6e21\uff08yield\uff09\u6216\u767c\u51fa\uff08emit\uff09\u4e00\u500b <code>Event</code>\u3002</li> <li><code>Runner</code> \u6703\u63a5\u6536\u5230\u9019\u500b <code>Event</code>\uff0c\u8655\u7406\u4efb\u4f55\u76f8\u95dc\u52d5\u4f5c\uff08\u4f8b\u5982\u900f\u904e <code>Services</code> \u5132\u5b58\u72c0\u614b\u8b8a\u66f4\uff09\uff0c\u4e26\u5c07\u4e8b\u4ef6\u8f49\u767c\u51fa\u53bb\uff08\u4f8b\u5982\u50b3\u9001\u5230\u4f7f\u7528\u8005\u4ecb\u9762\uff09\u3002</li> <li>\u53ea\u6709\u5728 <code>Runner</code> \u8655\u7406\u5b8c\u8a72\u4e8b\u4ef6\u4e4b\u5f8c\uff0c<code>Agent</code> \u7684\u908f\u8f2f\u624d\u6703\u5f9e\u66ab\u505c\u8655\u7e7c\u7e8c\u57f7\u884c\uff0c\u6b64\u6642\u5b83\u53ef\u80fd\u5df2\u7d93\u770b\u5230 Runner \u6240\u63d0\u4ea4\u7684\u8b8a\u66f4\u7d50\u679c\u3002</li> <li>\u9019\u500b\u5faa\u74b0\u6703\u91cd\u8907\u9032\u884c\uff0c\u76f4\u5230 agent \u5c0d\u65bc\u76ee\u524d\u7684\u4f7f\u7528\u8005\u67e5\u8a62\u6c92\u6709\u66f4\u591a\u4e8b\u4ef6\u9700\u8981\u8b93\u6e21\u3002</li> </ol> <p>\u9019\u7a2e\u4e8b\u4ef6\u9a45\u52d5\u7684\u8ff4\u5708\uff0c\u662f ADK \u57f7\u884c\u60a8\u7684 agent \u7a0b\u5f0f\u78bc\u6642\u7684\u57fa\u672c\u904b\u4f5c\u6a21\u5f0f\u3002</p>"},{"location":"runtime/#event-loop_1","title":"\u6838\u5fc3\u8108\u52d5\uff1a\u4e8b\u4ef6\u8ff4\u5708\uff08Event Loop\uff09\u2014 \u5167\u90e8\u904b\u4f5c","text":"<p>\u4e8b\u4ef6\u8ff4\u5708\uff08Event Loop\uff09\u662f\u5b9a\u7fa9 <code>Runner</code> \u8207\u60a8\u7684\u81ea\u8a02\u7a0b\u5f0f\u78bc\uff08Agents\u3001Tools\u3001Callbacks\uff0c\u8a2d\u8a08\u6587\u4ef6\u4e2d\u7d71\u7a31\u70ba\u300c\u57f7\u884c\u908f\u8f2f\u300d\u6216\u300c\u908f\u8f2f\u5143\u4ef6\u300d\uff09\u4e4b\u9593\u4e92\u52d5\u7684\u6838\u5fc3\u904b\u4f5c\u6a21\u5f0f\u3002\u5b83\u5efa\u7acb\u4e86\u660e\u78ba\u7684\u8cac\u4efb\u5206\u5de5\uff1a</p> <p>Note</p> <p>\u5177\u9ad4\u7684\u65b9\u6cd5\u540d\u7a31\u8207\u53c3\u6578\u540d\u7a31\u53ef\u80fd\u6703\u4f9d\u4e0d\u540c SDK \u8a9e\u8a00\u7565\u6709\u5dee\u7570\uff08\u4f8b\u5982\uff1aJava \u4e2d\u7684 <code>agent_to_run.runAsync(...)</code>\uff0cPython \u4e2d\u7684 <code>agent_to_run.run_async(...)</code>\uff09\u3002\u8a73\u7d30\u8cc7\u8a0a\u8acb\u53c3\u95b1\u5404\u8a9e\u8a00\u7684 API \u6587\u4ef6\u8aaa\u660e\u3002</p>"},{"location":"runtime/#runner","title":"Runner \u7684\u89d2\u8272\uff08\u5354\u8abf\u8005\uff09","text":"<p><code>Runner</code> \u4f5c\u70ba\u55ae\u4e00\u4f7f\u7528\u8005\u547c\u53eb\u7684\u4e2d\u592e\u5354\u8abf\u8005\u3002\u5176\u5728\u8ff4\u5708\u4e2d\u7684\u8077\u8cac\u5305\u62ec\uff1a</p> <ol> <li>\u555f\u52d5\uff1a\u63a5\u6536\u7d42\u7aef\u4f7f\u7528\u8005\u7684\u67e5\u8a62\uff08<code>new_message</code>\uff09\uff0c\u4e26\u901a\u5e38\u900f\u904e <code>SessionService</code> \u5c07\u5176\u9644\u52a0\u5230 session history\u3002</li> <li>\u555f\u52d5\u6d41\u7a0b\uff1a\u547c\u53eb\u4e3b\u8981 agent \u7684\u57f7\u884c\u65b9\u6cd5\uff08\u4f8b\u5982 <code>agent_to_run.run_async(...)</code>\uff09\u4ee5\u555f\u52d5\u4e8b\u4ef6\u7522\u751f\u6d41\u7a0b\u3002</li> <li>\u63a5\u6536\u8207\u8655\u7406\uff1a\u7b49\u5f85 agent \u908f\u8f2f<code>yield</code> \u6216 <code>emit</code> \u4e00\u500b <code>Event</code>\u3002\u6536\u5230\u4e8b\u4ef6\u5f8c\uff0cRunner \u6703\u7acb\u5373\u8655\u7406\u8a72\u4e8b\u4ef6\u3002\u9019\u5305\u542b\uff1a<ul> <li>\u4f7f\u7528\u5df2\u8a2d\u5b9a\u7684 <code>Services</code>\uff08<code>SessionService</code>\u3001<code>ArtifactService</code>\u3001<code>MemoryService</code>\uff09\u4f86\u63d0\u4ea4 <code>event.actions</code> \u4e2d\u6240\u6307\u793a\u7684\u8b8a\u66f4\uff08\u5982 <code>state_delta</code>\u3001<code>artifact_delta</code>\uff09\u3002</li> <li>\u57f7\u884c\u5176\u4ed6\u5167\u90e8\u8a18\u9304\u4f5c\u696d\u3002</li> </ul> </li> <li>\u5411\u4e0a\u6e38\u8b93\u6e21\uff1a\u5c07\u5df2\u8655\u7406\u7684\u4e8b\u4ef6\u8f49\u767c\uff08\u4f8b\u5982\u7d66\u547c\u53eb\u61c9\u7528\u7a0b\u5f0f\u6216 UI \u9032\u884c\u6e32\u67d3\uff09\u3002</li> <li>\u8fed\u4ee3\uff1a\u901a\u77e5 agent \u908f\u8f2f\u8a72\u8b93\u6e21\u4e8b\u4ef6\u7684\u8655\u7406\u5df2\u5b8c\u6210\uff0c\u4f7f\u5176\u80fd\u7e7c\u7e8c\u4e26\u7522\u751f\u4e0b\u4e00\u500b\u4e8b\u4ef6\u3002</li> </ol> <p>\u6982\u5ff5\u6027 Runner \u8ff4\u5708\uff1a</p> PythonJava <pre><code># Simplified view of Runner's main loop logic\ndef run(new_query, ...) -&gt; Generator[Event]:\n    # 1. Append new_query to session event history (via SessionService)\n    session_service.append_event(session, Event(author='user', content=new_query))\n\n    # 2. Kick off event loop by calling the agent\n    agent_event_generator = agent_to_run.run_async(context)\n\n    async for event in agent_event_generator:\n        # 3. Process the generated event and commit changes\n        session_service.append_event(session, event) # Commits state/artifact deltas etc.\n        # memory_service.update_memory(...) # If applicable\n        # artifact_service might have already been called via context during agent run\n\n        # 4. Yield event for upstream processing (e.g., UI rendering)\n        yield event\n        # Runner implicitly signals agent generator can continue after yielding\n</code></pre> <pre><code>// Simplified conceptual view of the Runner's main loop logic in Java.\npublic Flowable&lt;Event&gt; runConceptual(\n    Session session,                  \n    InvocationContext invocationContext, \n    Content newQuery                \n    ) {\n\n    // 1. Append new_query to session event history (via SessionService)\n    // ...\n    sessionService.appendEvent(session, userEvent).blockingGet();\n\n    // 2. Kick off event stream by calling the agent\n    Flowable&lt;Event&gt; agentEventStream = agentToRun.runAsync(invocationContext);\n\n    // 3. Process each generated event, commit changes, and \"yield\" or \"emit\"\n    return agentEventStream.map(event -&gt; {\n        // This mutates the session object (adds event, applies stateDelta).\n        // The return value of appendEvent (a Single&lt;Event&gt;) is conceptually\n        // just the event itself after processing.\n        sessionService.appendEvent(session, event).blockingGet(); // Simplified blocking call\n\n        // memory_service.update_memory(...) // If applicable - conceptual\n        // artifact_service might have already been called via context during agent run\n\n        // 4. \"Yield\" event for upstream processing\n        //    In RxJava, returning the event in map effectively yields it to the next operator or subscriber.\n        return event;\n    });\n}\n</code></pre>"},{"location":"runtime/#agenttoolcallback","title":"\u57f7\u884c\u908f\u8f2f\u7684\u89d2\u8272\uff08Agent\u3001Tool\u3001Callback\uff09","text":"<p>\u4f60\u5728 agent\u3001tools \u548c callbacks \u4e2d\u64b0\u5beb\u7684\u7a0b\u5f0f\u78bc\uff0c\u8ca0\u8cac\u5be6\u969b\u7684\u904b\u7b97\u8207\u6c7a\u7b56\u3002\u5b83\u8207\u5faa\u74b0\uff08loop\uff09\u7684\u4e92\u52d5\u5305\u542b\uff1a</p> <ol> <li>\u57f7\u884c\uff08Execute\uff09\uff1a \u6839\u64da\u7576\u524d\u7684 <code>InvocationContext</code> \u57f7\u884c\u5176\u908f\u8f2f\uff0c\u5305\u62ec\u300c\u57f7\u884c\u6062\u5fa9\u6642\u300d\u7684 session state\u3002</li> <li>\u8b93\u6e21\uff08Yield\uff09\uff1a \u7576\u908f\u8f2f\u9700\u8981\u9032\u884c\u6e9d\u901a\uff08\u4f8b\u5982\u50b3\u9001\u8a0a\u606f\u3001\u547c\u53eb\u5de5\u5177\u3001\u56de\u5831\u72c0\u614b\u8b8a\u66f4\uff09\u6642\uff0c\u6703\u5efa\u69cb\u4e00\u500b\u5305\u542b\u76f8\u95dc\u5167\u5bb9\u8207\u52d5\u4f5c\u7684 <code>Event</code>\uff0c\u7136\u5f8c\u5c07\u6b64\u4e8b\u4ef6 <code>yield</code> \u56de <code>Runner</code>\u3002</li> <li>\u66ab\u505c\uff08Pause\uff09\uff1a \u91cd\u8981\u7684\u662f\uff0cagent \u908f\u8f2f\u7684\u57f7\u884c\u6703\u5728 <code>yield</code> \u9673\u8ff0\u5f0f\uff08\u6216 RxJava \u4e2d\u7684 <code>return</code>\uff09\u4e4b\u5f8c\u7acb\u5373\u66ab\u505c\u3002\u6b64\u6642\u6703\u7b49\u5f85 <code>Runner</code> \u5b8c\u6210\u6b65\u9a5f 3\uff08\u8655\u7406\u8207\u63d0\u4ea4\uff09\u3002</li> <li>\u6062\u5fa9\uff08Resume\uff09\uff1a \u50c5\u5728 <code>Runner</code> \u8655\u7406\u5b8c\u8b93\u6e21\u7684\u4e8b\u4ef6\u5f8c\uff0cagent \u908f\u8f2f\u624d\u6703\u5f9e\u7dca\u63a5\u5728 <code>yield</code> \u4e4b\u5f8c\u7684\u9673\u8ff0\u5f0f\u7e7c\u7e8c\u57f7\u884c\u3002</li> <li>\u53d6\u5f97\u66f4\u65b0\u5f8c\u7684\u72c0\u614b\uff08See Updated State\uff09\uff1a \u6062\u5fa9\u57f7\u884c\u6642\uff0cagent \u908f\u8f2f\u73fe\u5728\u53ef\u4ee5\u53ef\u9760\u5730\u5b58\u53d6 session state\uff08<code>ctx.session.state</code>\uff09\uff0c\u6b64\u72c0\u614b\u53cd\u6620\u4e86\u7531 <code>Runner</code> \u91dd\u5c0d\u5148\u524d\u8b93\u6e21\u4e8b\u4ef6\u6240\u63d0\u4ea4\u7684\u8b8a\u66f4\u3002</li> </ol> <p>\u6982\u5ff5\u6027\u57f7\u884c\u908f\u8f2f\uff1a</p> PythonJava <pre><code># Simplified view of logic inside Agent.run_async, callbacks, or tools\n\n# ... previous code runs based on current state ...\n\n# 1. Determine a change or output is needed, construct the event\n# Example: Updating state\nupdate_data = {'field_1': 'value_2'}\nevent_with_state_change = Event(\n    author=self.name,\n    actions=EventActions(state_delta=update_data),\n    content=types.Content(parts=[types.Part(text=\"State updated.\")])\n    # ... other event fields ...\n)\n\n# 2. Yield the event to the Runner for processing &amp; commit\nyield event_with_state_change\n# &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; EXECUTION PAUSES HERE &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\n# &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; RUNNER PROCESSES &amp; COMMITS THE EVENT &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\n# 3. Resume execution ONLY after Runner is done processing the above event.\n# Now, the state committed by the Runner is reliably reflected.\n# Subsequent code can safely assume the change from the yielded event happened.\nval = ctx.session.state['field_1']\n# here `val` is guaranteed to be \"value_2\" (assuming Runner committed successfully)\nprint(f\"Resumed execution. Value of field_1 is now: {val}\")\n\n# ... subsequent code continues ...\n# Maybe yield another event later...\n</code></pre> <pre><code>// Simplified view of logic inside Agent.runAsync, callbacks, or tools\n// ... previous code runs based on current state ...\n\n// 1. Determine a change or output is needed, construct the event\n// Example: Updating state\nConcurrentMap&lt;String, Object&gt; updateData = new ConcurrentHashMap&lt;&gt;();\nupdateData.put(\"field_1\", \"value_2\");\n\nEventActions actions = EventActions.builder().stateDelta(updateData).build();\nContent eventContent = Content.builder().parts(Part.fromText(\"State updated.\")).build();\n\nEvent eventWithStateChange = Event.builder()\n    .author(self.name())\n    .actions(actions)\n    .content(Optional.of(eventContent))\n    // ... other event fields ...\n    .build();\n\n// 2. \"Yield\" the event. In RxJava, this means emitting it into the stream.\n//    The Runner (or upstream consumer) will subscribe to this Flowable.\n//    When the Runner receives this event, it will process it (e.g., call sessionService.appendEvent).\n//    The 'appendEvent' in Java ADK mutates the 'Session' object held within 'ctx' (InvocationContext).\n\n// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; CONCEPTUAL PAUSE POINT &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n// In RxJava, the emission of 'eventWithStateChange' happens, and then the stream\n// might continue with a 'flatMap' or 'concatMap' operator that represents\n// the logic *after* the Runner has processed this event.\n\n// To model the \"resume execution ONLY after Runner is done processing\":\n// The Runner's `appendEvent` is usually an async operation itself (returns Single&lt;Event&gt;).\n// The agent's flow needs to be structured such that subsequent logic\n// that depends on the committed state runs *after* that `appendEvent` completes.\n\n// This is how the Runner typically orchestrates it:\n// Runner:\n//   agent.runAsync(ctx)\n//     .concatMapEager(eventFromAgent -&gt;\n//         sessionService.appendEvent(ctx.session(), eventFromAgent) // This updates ctx.session().state()\n//             .toFlowable() // Emits the event after it's processed\n//     )\n//     .subscribe(processedEvent -&gt; { /* UI renders processedEvent */ });\n\n// So, within the agent's own logic, if it needs to do something *after* an event it yielded\n// has been processed and its state changes are reflected in ctx.session().state(),\n// that subsequent logic would typically be in another step of its reactive chain.\n\n// For this conceptual example, we'll emit the event, and then simulate the \"resume\"\n// as a subsequent operation in the Flowable chain.\n\nreturn Flowable.just(eventWithStateChange) // Step 2: Yield the event\n    .concatMap(yieldedEvent -&gt; {\n        // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; RUNNER CONCEPTUALLY PROCESSES &amp; COMMITS THE EVENT &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n        // At this point, in a real runner, ctx.session().appendEvent(yieldedEvent) would have been called\n        // by the Runner, and ctx.session().state() would be updated.\n        // Since we are *inside* the agent's conceptual logic trying to model this,\n        // we assume the Runner's action has implicitly updated our 'ctx.session()'.\n\n        // 3. Resume execution.\n        // Now, the state committed by the Runner (via sessionService.appendEvent)\n        // is reliably reflected in ctx.session().state().\n        Object val = ctx.session().state().get(\"field_1\");\n        // here `val` is guaranteed to be \"value_2\" because the `sessionService.appendEvent`\n        // called by the Runner would have updated the session state within the `ctx` object.\n\n        System.out.println(\"Resumed execution. Value of field_1 is now: \" + val);\n\n        // ... subsequent code continues ...\n        // If this subsequent code needs to yield another event, it would do so here.\n</code></pre> <p>\u9019\u7a2e\u7531 <code>Runner</code> \u8207\u4f60\u7684\u57f7\u884c\u908f\u8f2f\uff08Execution Logic\uff09\u4e4b\u9593\u5354\u4f5c\u7684\u8b93\u6e21\uff08yield\uff09\uff0f\u66ab\u505c\uff08pause\uff09\uff0f\u6062\u5fa9\uff08resume\uff09\u5faa\u74b0\uff0c\u4e26\u900f\u904e <code>Event</code> \u7269\u4ef6\u9032\u884c\u8abf\u7bc0\uff0c\u69cb\u6210\u4e86 Agent Development Kit (ADK) Runtime \u7684\u6838\u5fc3\u3002</p>"},{"location":"runtime/#runtime_2","title":"Runtime \u7684\u4e3b\u8981\u7d44\u4ef6","text":"<p>\u5728 Agent Development Kit (ADK) Runtime \u4e2d\uff0c\u6709\u591a\u500b\u7d44\u4ef6\u5354\u540c\u904b\u4f5c\u4ee5\u57f7\u884c agent \u7684\u547c\u53eb\uff08invocation\uff09\u3002\u4e86\u89e3\u5b83\u5011\u7684\u89d2\u8272\u6709\u52a9\u65bc\u91d0\u6e05\u4e8b\u4ef6\u8ff4\u5708\uff08event loop\uff09\u5982\u4f55\u904b\u4f5c\uff1a</p> <p>\u9019\u4e9b\u89d2\u8272\u6703\u900f\u904e\u4e8b\u4ef6\u8ff4\u5708\u6301\u7e8c\u4e92\u52d5\uff0c\u4ee5\u8655\u7406\u4f7f\u7528\u8005\u7684\u8acb\u6c42\u3002</p>"},{"location":"runtime/#runner_1","title":"<code>Runner</code>","text":"<ul> <li>\u89d2\u8272\uff1a \u55ae\u4e00\u4f7f\u7528\u8005\u67e5\u8a62\uff08<code>run_async</code>\uff09\u7684\u4e3b\u8981\u9032\u5165\u9ede\u8207\u5354\u8abf\u8005\u3002</li> <li>\u529f\u80fd\uff1a \u8ca0\u8cac\u6574\u9ad4\u4e8b\u4ef6\u8ff4\u5708\u7684\u7ba1\u7406\uff0c\u63a5\u6536\u57f7\u884c\u908f\u8f2f\u8b93\u6e21\u7684\u4e8b\u4ef6\uff0c\u5354\u8abf\u5404\u670d\u52d9\uff08Services\uff09\u8655\u7406\u4e26\u63d0\u4ea4\u4e8b\u4ef6\u52d5\u4f5c\uff08\u72c0\u614b\uff0fartifact \u8b8a\u66f4\uff09\uff0c\u4e26\u5c07\u8655\u7406\u5f8c\u7684\u4e8b\u4ef6\u5411\u4e0a\u6e38\u50b3\u905e\uff08\u4f8b\u5982\u50b3\u7d66 UI\uff09\u3002\u5b83\u57fa\u672c\u4e0a\u6839\u64da\u8b93\u6e21\u7684\u4e8b\u4ef6\u9010\u6b65\u63a8\u9032\u5c0d\u8a71\u56de\u5408\uff08conversation turn\uff09\u3002\uff08\u5b9a\u7fa9\u65bc <code>google.adk.runners.runner</code>\uff09</li> </ul>"},{"location":"runtime/#execution-logic-components","title":"\u57f7\u884c\u908f\u8f2f\u7d44\u4ef6\uff08Execution Logic Components\uff09","text":"<ul> <li>\u89d2\u8272\uff1a \u5305\u542b\u4f60\u81ea\u8a02\u7a0b\u5f0f\u78bc\u8207 agent \u6838\u5fc3\u80fd\u529b\u7684\u90e8\u5206\u3002</li> <li>\u7d44\u4ef6\uff1a</li> <li><code>Agent</code>\uff08<code>BaseAgent</code>\u3001<code>LlmAgent</code> \u7b49\uff09\uff1a\u4f60\u7684\u4e3b\u8981\u908f\u8f2f\u55ae\u5143\uff0c\u8ca0\u8cac\u8655\u7406\u8cc7\u8a0a\u4e26\u6c7a\u5b9a\u8981\u63a1\u53d6\u7684\u884c\u52d5\u3002\u5b83\u5011\u5be6\u4f5c <code>_run_async_impl</code> \u65b9\u6cd5\uff0c\u4e26\u8b93\u6e21\u4e8b\u4ef6\u3002</li> <li><code>Tools</code>\uff08<code>BaseTool</code>\u3001<code>FunctionTool</code>\u3001<code>AgentTool</code> \u7b49\uff09\uff1aagent \u7528\u4f86\u8207\u5916\u90e8\u4e16\u754c\u4e92\u52d5\u6216\u57f7\u884c\u7279\u5b9a\u4efb\u52d9\u7684\u5916\u90e8\u51fd\u5f0f\u6216\u80fd\u529b\uff08\u901a\u5e38\u70ba <code>LlmAgent</code>\uff09\u3002\u5b83\u5011\u57f7\u884c\u5f8c\u56de\u50b3\u7d50\u679c\uff0c\u7d50\u679c\u6703\u88ab\u5305\u88dd\u6210\u4e8b\u4ef6\u3002</li> <li><code>Callbacks</code>\uff08Functions\uff09\uff1a\u9644\u52a0\u65bc agent \u7684\u4f7f\u7528\u8005\u81ea\u8a02\u51fd\u5f0f\uff08\u5982 <code>before_agent_callback</code>\u3001<code>after_model_callback</code>\uff09\uff0c\u53ef\u639b\u8f09\u65bc\u57f7\u884c\u6d41\u7a0b\u7684\u7279\u5b9a\u9ede\uff0c\u53ef\u80fd\u6703\u4fee\u6539\u884c\u70ba\u6216\u72c0\u614b\uff0c\u5176\u5f71\u97ff\u6703\u88ab\u4e8b\u4ef6\u6240\u6355\u6349\u3002</li> <li>\u529f\u80fd\uff1a \u57f7\u884c\u5be6\u969b\u7684\u63a8\u7406\u3001\u8a08\u7b97\u6216\u5916\u90e8\u4e92\u52d5\u3002\u5b83\u5011\u900f\u904e\u8b93\u6e21 <code>Event</code> \u7269\u4ef6\u4f86\u50b3\u905e\u7d50\u679c\u6216\u9700\u6c42\uff0c\u4e26\u5728 Runner \u8655\u7406\u5b8c\u7562\u524d\u66ab\u505c\u3002</li> </ul>"},{"location":"runtime/#event","title":"<code>Event</code>","text":"<ul> <li>\u89d2\u8272\uff1a \u5728 <code>Runner</code> \u8207\u57f7\u884c\u908f\u8f2f\u4e4b\u9593\u4f86\u56de\u50b3\u905e\u7684\u8a0a\u606f\u3002</li> <li>\u529f\u80fd\uff1a \u4ee3\u8868\u4e00\u500b\u539f\u5b50\u7684\u4e8b\u4ef6\uff08\u5982\u4f7f\u7528\u8005\u8f38\u5165\u3001agent \u8f38\u51fa\u6587\u5b57\u3001\u5de5\u5177\u547c\u53eb\uff0f\u7d50\u679c\u3001\u72c0\u614b\u8b8a\u66f4\u8acb\u6c42\u3001\u63a7\u5236\u8a0a\u865f\uff09\u3002\u5b83\u540c\u6642\u651c\u5e36\u4e8b\u4ef6\u5167\u5bb9\u8207\u9810\u671f\u7684\u526f\u4f5c\u7528\uff08<code>actions</code>\uff0c\u5982 <code>state_delta</code>\uff09\u3002</li> </ul>"},{"location":"runtime/#services","title":"<code>Services</code>","text":"<ul> <li>\u89d2\u8272\uff1a \u8ca0\u8cac\u7ba1\u7406\u6301\u4e45\u6027\u6216\u5171\u4eab\u8cc7\u6e90\u7684\u5f8c\u7aef\u7d44\u4ef6\u3002\u4e3b\u8981\u7531 <code>Runner</code> \u5728\u4e8b\u4ef6\u8655\u7406\u904e\u7a0b\u4e2d\u4f7f\u7528\u3002</li> <li>\u7d44\u4ef6\uff1a</li> <li><code>SessionService</code>\uff08<code>BaseSessionService</code>\u3001<code>InMemorySessionService</code> \u7b49\uff09\uff1a\u7ba1\u7406 <code>Session</code> \u7269\u4ef6\uff0c\u5305\u62ec\u5132\u5b58\uff0f\u8f09\u5165\u3001\u5c07 <code>state_delta</code> \u61c9\u7528\u81f3 session state\uff0c\u4ee5\u53ca\u5c07\u4e8b\u4ef6\u9644\u52a0\u5230 <code>event history</code>\u3002</li> <li><code>ArtifactService</code>\uff08<code>BaseArtifactService</code>\u3001<code>InMemoryArtifactService</code>\u3001<code>GcsArtifactService</code> \u7b49\uff09\uff1a\u8ca0\u8cac\u4e8c\u9032\u4f4d artifact \u8cc7\u6599\u7684\u5132\u5b58\u8207\u8b80\u53d6\u3002\u96d6\u7136 <code>save_artifact</code> \u6703\u5728\u57f7\u884c\u908f\u8f2f\u4e2d\u900f\u904e context \u547c\u53eb\uff0c\u4f46\u4e8b\u4ef6\u4e2d\u7684 <code>artifact_delta</code> \u6703\u78ba\u8a8d\u8a72\u52d5\u4f5c\u5df2\u4ea4\u7531 Runner\uff0fSessionService \u8655\u7406\u3002</li> <li><code>MemoryService</code>\uff08<code>BaseMemoryService</code> \u7b49\uff09\uff1a\uff08\u53ef\u9078\uff09\u7ba1\u7406\u4f7f\u7528\u8005\u8de8 session \u7684\u9577\u671f\u8a9e\u610f\u8a18\u61b6\u3002</li> <li>\u529f\u80fd\uff1a \u63d0\u4f9b\u6301\u4e45\u5316\u5c64\u3002<code>Runner</code> \u6703\u8207\u9019\u4e9b\u7d44\u4ef6\u4e92\u52d5\uff0c\u78ba\u4fdd\u7531 <code>event.actions</code> \u6240\u89f8\u767c\u7684\u8b8a\u66f4\u5728\u57f7\u884c\u908f\u8f2f\u6062\u5fa9\u524d\u5df2\u88ab\u53ef\u9760\u5730\u5132\u5b58\u3002</li> </ul>"},{"location":"runtime/#session","title":"<code>Session</code>","text":"<ul> <li>\u89d2\u8272\uff1a \u7528\u4f86\u5132\u5b58\u55ae\u4e00\u7279\u5b9a\u5c0d\u8a71\u4e4b\u72c0\u614b\u8207\u6b77\u53f2\u7d00\u9304\u7684\u8cc7\u6599\u5bb9\u5668\u3002</li> <li>\u529f\u80fd\uff1a \u4fdd\u5b58\u76ee\u524d\u7684 <code>state</code> \u5b57\u5178\u3001\u6240\u6709\u904e\u53bb\u7684 <code>events</code>\uff08<code>event history</code>\uff09\u6e05\u55ae\uff0c\u4ee5\u53ca\u76f8\u95dc artifact \u7684\u53c3\u8003\u3002\u5b83\u662f\u4e92\u52d5\u904e\u7a0b\u7684\u4e3b\u8981\u7d00\u9304\uff0c\u7531 <code>SessionService</code> \u6240\u7ba1\u7406\u3002</li> </ul>"},{"location":"runtime/#invocation","title":"<code>Invocation</code>","text":"<ul> <li>\u89d2\u8272\uff1a \u6982\u5ff5\u4e0a\u4ee3\u8868\u91dd\u5c0d\u55ae\u4e00\u4f7f\u7528\u8005\u67e5\u8a62\uff0c\u5f9e <code>Runner</code> \u6536\u5230\u67e5\u8a62\u5230 agent \u908f\u8f2f\u5b8c\u6210\u8a72\u67e5\u8a62\u6240\u6709\u4e8b\u4ef6\u8b93\u6e21\u7684\u6574\u500b\u904e\u7a0b\u3002</li> <li>\u529f\u80fd\uff1a \u4e00\u6b21 invocation \u53ef\u80fd\u5305\u542b\u591a\u6b21 agent \u57f7\u884c\uff08\u4f8b\u5982\u4f7f\u7528 agent \u8f49\u79fb\u6216 <code>AgentTool</code>\uff09\u3001\u591a\u6b21\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb\u3001\u5de5\u5177\u57f7\u884c\u8207 callback \u57f7\u884c\uff0c\u9019\u4e9b\u90fd\u6703\u7531\u55ae\u4e00 <code>invocation_id</code> \u5728 <code>InvocationContext</code> \u5167\u4e32\u806f\u3002\u4ee5 <code>temp:</code> \u70ba\u524d\u7db4\u7684\u72c0\u614b\u8b8a\u6578\u50c5\u9650\u65bc\u55ae\u4e00 invocation \u7bc4\u570d\uff0c\u7d50\u675f\u5f8c\u5373\u4e1f\u68c4\u3002</li> </ul>"},{"location":"runtime/#invocation_1","title":"\u904b\u4f5c\u6d41\u7a0b\uff1a\u7c21\u5316\u7684 Invocation \u7bc4\u4f8b","text":"<p>\u4ee5\u4e0b\u8ffd\u8e64\u4e00\u500b\u5178\u578b\u4f7f\u7528\u8005\u67e5\u8a62\u7684\u7c21\u5316\u6d41\u7a0b\uff0c\u8a72\u67e5\u8a62\u6d89\u53ca\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) agent \u547c\u53eb\u5de5\u5177\uff1a</p> <p></p>"},{"location":"runtime/#_1","title":"\u6b65\u9a5f\u5206\u89e3","text":"<ol> <li>\u4f7f\u7528\u8005\u8f38\u5165\uff1a \u4f7f\u7528\u8005\u767c\u9001\u67e5\u8a62\uff08\u4f8b\u5982\uff1a\u300c\u6cd5\u570b\u7684\u9996\u90fd\u662f\u54ea\u88e1\uff1f\u300d\uff09\u3002</li> <li>Runner \u555f\u52d5\uff1a <code>Runner.run_async</code> \u958b\u59cb\u904b\u4f5c\u3002\u5b83\u8207 <code>SessionService</code> \u4e92\u52d5\u4ee5\u8f09\u5165\u76f8\u95dc <code>Session</code>\uff0c\u4e26\u5c07\u4f7f\u7528\u8005\u67e5\u8a62\u4f5c\u70ba\u7b2c\u4e00\u500b <code>Event</code> \u52a0\u5165 session \u6b77\u53f2\u3002\u6e96\u5099\u597d <code>InvocationContext</code>\uff08<code>ctx</code>\uff09\u3002</li> <li>Agent \u57f7\u884c\uff1a <code>Runner</code> \u5728\u6307\u5b9a\u7684 root agent\uff08\u4f8b\u5982 <code>LlmAgent</code>\uff09\u4e0a\u547c\u53eb <code>agent.run_async(ctx)</code>\u3002</li> <li>LLM \u547c\u53eb\uff08\u7bc4\u4f8b\uff09\uff1a <code>Agent_Llm</code> \u5224\u65b7\u9700\u8981\u8cc7\u8a0a\uff0c\u53ef\u80fd\u6703\u547c\u53eb\u5de5\u5177\u3002\u5b83\u6e96\u5099\u4e00\u500b\u7d66 <code>LLM</code> \u7684\u8acb\u6c42\u3002\u5047\u8a2d LLM \u6c7a\u5b9a\u547c\u53eb <code>MyTool</code>\u3002</li> <li>\u8b93\u6e21 FunctionCall \u4e8b\u4ef6\uff1a <code>Agent_Llm</code> \u63a5\u6536\u5230 LLM \u7684 <code>FunctionCall</code> \u56de\u61c9\uff0c\u5c07\u5176\u5305\u88dd\u6210 <code>Event(author='Agent_Llm', content=Content(parts=[Part(function_call=...)]))</code>\uff0c\u4e26 <code>yields</code> \u6216 <code>emits</code> \u6b64\u4e8b\u4ef6\u3002</li> <li>Agent \u66ab\u505c\uff1a <code>Agent_Llm</code> \u7684\u57f7\u884c\u5728 <code>yield</code> \u4e4b\u5f8c\u7acb\u5373\u66ab\u505c\u3002</li> <li>Runner \u8655\u7406\uff1a <code>Runner</code> \u6536\u5230 FunctionCall \u4e8b\u4ef6\uff0c\u50b3\u905e\u7d66 <code>SessionService</code> \u4ee5\u8a18\u9304\u5230\u6b77\u53f2\u3002<code>Runner</code> \u96a8\u5f8c\u5c07\u4e8b\u4ef6\u5411\u4e0a\u6e38\u50b3\u905e\u7d66 <code>User</code>\uff08\u6216\u61c9\u7528\u7a0b\u5f0f\uff09\u3002</li> <li>Agent \u6062\u5fa9\uff1a <code>Runner</code> \u767c\u51fa\u4e8b\u4ef6\u5df2\u8655\u7406\u7684\u8a0a\u865f\uff0c<code>Agent_Llm</code> \u6062\u5fa9\u57f7\u884c\u3002</li> <li>\u5de5\u5177\u57f7\u884c\uff1a <code>Agent_Llm</code> \u7684\u5167\u90e8\u6d41\u7a0b\u63a5\u8457\u57f7\u884c\u6240\u8acb\u6c42\u7684 <code>MyTool</code>\uff0c\u547c\u53eb <code>tool.run_async(...)</code>\u3002</li> <li>\u5de5\u5177\u56de\u50b3\u7d50\u679c\uff1a <code>MyTool</code> \u57f7\u884c\u4e26\u56de\u50b3\u7d50\u679c\uff08\u4f8b\u5982 <code>{'result': 'Paris'}</code>\uff09\u3002</li> <li>\u8b93\u6e21 FunctionResponse \u4e8b\u4ef6\uff1a agent\uff08<code>Agent_Llm</code>\uff09\u5c07\u5de5\u5177\u7d50\u679c\u5305\u88dd\u6210\u542b\u6709 <code>FunctionResponse</code> \u90e8\u5206\uff08\u5982 <code>Event(author='Agent_Llm', content=Content(role='user', parts=[Part(function_response=...)]))</code>\uff09\u7684 <code>Event</code>\u3002\u82e5\u5de5\u5177\u6709\u4fee\u6539\u72c0\u614b\uff08<code>state_delta</code>\uff09\u6216\u5132\u5b58 artifact\uff08<code>artifact_delta</code>\uff09\uff0c\u6b64\u4e8b\u4ef6\u4e5f\u6703\u5305\u542b <code>actions</code>\u3002agent \u6703 <code>yield</code> \u6b64\u4e8b\u4ef6\u3002</li> <li>Agent \u66ab\u505c\uff1a <code>Agent_Llm</code> \u518d\u6b21\u66ab\u505c\u3002</li> <li>Runner \u8655\u7406\uff1a <code>Runner</code> \u6536\u5230 FunctionResponse \u4e8b\u4ef6\uff0c\u50b3\u905e\u7d66 <code>SessionService</code>\uff0c\u61c9\u7528\u6240\u6709 <code>state_delta</code>\uff0f<code>artifact_delta</code> \u4e26\u5c07\u4e8b\u4ef6\u52a0\u5165\u6b77\u53f2\u3002<code>Runner</code> \u5411\u4e0a\u6e38\u8b93\u6e21\u4e8b\u4ef6\u3002</li> <li>Agent \u6062\u5fa9\uff1a <code>Agent_Llm</code> \u6062\u5fa9\uff0c\u6b64\u6642\u5df2\u77e5\u5de5\u5177\u7d50\u679c\u8207\u4efb\u4f55\u72c0\u614b\u8b8a\u66f4\u90fd\u5df2\u63d0\u4ea4\u3002</li> <li>\u6700\u7d42 LLM \u547c\u53eb\uff08\u7bc4\u4f8b\uff09\uff1a <code>Agent_Llm</code> \u5c07\u5de5\u5177\u7d50\u679c\u50b3\u56de <code>LLM</code>\uff0c\u4ee5\u7522\u751f\u81ea\u7136\u8a9e\u8a00\u56de\u61c9\u3002</li> <li>\u8b93\u6e21\u6700\u7d42\u6587\u5b57\u4e8b\u4ef6\uff1a <code>Agent_Llm</code> \u5f9e <code>LLM</code> \u6536\u5230\u6700\u7d42\u6587\u5b57\uff0c\u5305\u88dd\u6210 <code>Event(author='Agent_Llm', content=Content(parts=[Part(text=...)]))</code>\uff0c\u4e26 <code>yield</code>\u3002</li> <li>Agent \u66ab\u505c\uff1a <code>Agent_Llm</code> \u66ab\u505c\u3002</li> <li>Runner \u8655\u7406\uff1a <code>Runner</code> \u6536\u5230\u6700\u7d42\u6587\u5b57\u4e8b\u4ef6\uff0c\u50b3\u7d66 <code>SessionService</code> \u4ee5\u8a18\u9304\u6b77\u53f2\uff0c\u4e26\u5c07\u5176\u5411\u4e0a\u6e38\u8b93\u6e21\u7d66 <code>User</code>\u3002\u9019\u901a\u5e38\u6703\u6a19\u8a18\u70ba <code>is_final_response()</code>\u3002</li> <li>Agent \u6062\u5fa9\u4e26\u7d50\u675f\uff1a <code>Agent_Llm</code> \u6062\u5fa9\u3002\u5b8c\u6210\u672c\u6b21 invocation \u7684\u4efb\u52d9\u5f8c\uff0c\u5176 <code>run_async</code> \u7522\u751f\u5668\u7d50\u675f\u3002</li> <li>Runner \u5b8c\u6210\uff1a <code>Runner</code> \u767c\u73fe agent \u7684\u7522\u751f\u5668\u5df2\u8017\u76e1\uff0c\u7d50\u675f\u672c\u6b21 invocation \u7684\u4e8b\u4ef6\u8ff4\u5708\u3002</li> </ol> <p>\u9019\u500b\u8b93\u6e21\uff0f\u66ab\u505c\uff0f\u8655\u7406\uff0f\u6062\u5fa9\u7684\u5faa\u74b0\uff0c\u78ba\u4fdd\u72c0\u614b\u8b8a\u66f4\u80fd\u4e00\u81f4\u5730\u88ab\u61c9\u7528\uff0c\u4e26\u8b93\u57f7\u884c\u908f\u8f2f\u5728\u6bcf\u6b21\u8b93\u6e21\u4e8b\u4ef6\u5f8c\u90fd\u80fd\u4ee5\u6700\u65b0\u5df2\u63d0\u4ea4\u7684\u72c0\u614b\u7e7c\u7e8c\u904b\u4f5c\u3002</p>"},{"location":"runtime/#runtime_3","title":"\u91cd\u8981\u7684 Runtime \u884c\u70ba","text":"<p>\u7406\u89e3 Agent Development Kit (ADK) Runtime \u5982\u4f55\u8655\u7406\u72c0\u614b\u3001\u4e32\u6d41\u8207\u975e\u540c\u6b65\u64cd\u4f5c\u7684\u5e7e\u500b\u95dc\u9375\u9762\u5411\uff0c\u5c0d\u65bc\u6253\u9020\u53ef\u9810\u671f\u4e14\u9ad8\u6548\u7684 agent \u81f3\u95dc\u91cd\u8981\u3002</p>"},{"location":"runtime/#_2","title":"\u72c0\u614b\u66f4\u65b0\u8207\u63d0\u4ea4\u6642\u6a5f","text":"<ul> <li> <p>\u898f\u5247\uff1a \u7576\u4f60\u7684\u7a0b\u5f0f\u78bc\uff08\u5728 agent\u3001\u5de5\u5177\u6216 callback \u4e2d\uff09\u4fee\u6539 session state\uff08\u4f8b\u5982 <code>context.state['my_key'] = 'new_value'</code>\uff09\u6642\uff0c\u6b64\u8b8a\u66f4\u6700\u521d\u53ea\u6703\u5728\u7576\u524d <code>InvocationContext</code> \u5167\u90e8\u88ab\u672c\u5730\u8a18\u9304\u3002\u53ea\u6709\u5728\u5c0d\u61c9\u7684 <code>Event</code>\uff08\u5176 <code>actions</code> \u5305\u542b\u8a72 <code>state_delta</code>\uff09\u88ab\u4f60\u7684\u7a0b\u5f0f\u78bc <code>yield</code> \u8b93\u6e21\uff0c\u4e26\u96a8\u5f8c\u7531 <code>Runner</code> \u8655\u7406\u5f8c\uff0c\u8a72\u8b8a\u66f4\u624d\u4fdd\u8b49\u6703\u88ab\u6301\u4e45\u5316**\uff08\u7531 <code>SessionService</code> \u5132\u5b58\uff09\u3002</p> </li> <li> <p>\u610f\u6db5\uff1a \u5728\u5f9e <code>yield</code> \u6062\u5fa9\u4e4b\u5f8c\u57f7\u884c\u7684\u7a0b\u5f0f\u78bc\uff0c\u53ef\u4ee5\u53ef\u9760\u5730\u5047\u8a2d yielded event \u4e2d\u6240\u6a19\u8a18\u7684\u72c0\u614b\u8b8a\u66f4\u5df2\u7d93\u88ab\u63d0\u4ea4\u3002</p> </li> </ul> PythonJava <pre><code># Inside agent logic (conceptual)\n\n# 1. Modify state\nctx.session.state['status'] = 'processing'\nevent1 = Event(..., actions=EventActions(state_delta={'status': 'processing'}))\n\n# 2. Yield event with the delta\nyield event1\n# --- PAUSE --- Runner processes event1, SessionService commits 'status' = 'processing' ---\n\n# 3. Resume execution\n# Now it's safe to rely on the committed state\ncurrent_status = ctx.session.state['status'] # Guaranteed to be 'processing'\nprint(f\"Status after resuming: {current_status}\")\n</code></pre> <pre><code>// Inside agent logic (conceptual)\n// ... previous code runs based on current state ...\n\n// 1. Prepare state modification and construct the event\nConcurrentHashMap&lt;String, Object&gt; stateChanges = new ConcurrentHashMap&lt;&gt;();\nstateChanges.put(\"status\", \"processing\");\n\nEventActions actions = EventActions.builder().stateDelta(stateChanges).build();\nContent content = Content.builder().parts(Part.fromText(\"Status update: processing\")).build();\n\nEvent event1 = Event.builder()\n    .actions(actions)\n    // ...\n    .build();\n\n// 2. Yield event with the delta\nreturn Flowable.just(event1)\n    .map(\n        emittedEvent -&gt; {\n            // --- CONCEPTUAL PAUSE &amp; RUNNER PROCESSING ---\n            // 3. Resume execution (conceptually)\n            // Now it's safe to rely on the committed state.\n            String currentStatus = (String) ctx.session().state().get(\"status\");\n            System.out.println(\"Status after resuming (inside agent logic): \" + currentStatus); // Guaranteed to be 'processing'\n\n            // The event itself (event1) is passed on.\n            // If subsequent logic within this agent step produced *another* event,\n            // you'd use concatMap to emit that new event.\n            return emittedEvent;\n        });\n\n// ... subsequent agent logic might involve further reactive operators\n// or emitting more events based on the now-updated `ctx.session().state()`.\n</code></pre>"},{"location":"runtime/#session-state-dirty-reads","title":"session state \u7684\u300c\u9ad2\u8b80 (Dirty Reads)\u300d","text":"<ul> <li>\u5b9a\u7fa9\uff1a \u7531\u65bc\u63d0\u4ea4\u767c\u751f\u5728 \u8b93\u6e21\uff08yield\uff09\u4e4b\u5f8c\uff0c\u5728\u540c\u4e00\u6b21\u547c\u53eb\u4e2d\u7a0d\u5f8c\u57f7\u884c\u4f46\u5be6\u969b\u8b93\u6e21\u4e26\u8655\u7406\u72c0\u614b\u8b8a\u66f4\u4e8b\u4ef6\u4e4b\u524d\u7684\u7a0b\u5f0f\u78bc\uff0c\u901a\u5e38\u53ef\u4ee5\u770b\u5230\u672c\u5730\u5c1a\u672a\u63d0\u4ea4\u7684\u8b8a\u66f4\u3002\u9019\u7a2e\u60c5\u6cc1\u6709\u6642\u7a31\u70ba\u300c\u9ad2\u8b80 (Dirty Read)\u300d\u3002</li> <li>\u7bc4\u4f8b\uff1a</li> </ul> PythonJava <pre><code># Code in before_agent_callback\ncallback_context.state['field_1'] = 'value_1'\n# State is locally set to 'value_1', but not yet committed by Runner\n\n# ... agent runs ...\n\n# Code in a tool called later *within the same invocation*\n# Readable (dirty read), but 'value_1' isn't guaranteed persistent yet.\nval = tool_context.state['field_1'] # 'val' will likely be 'value_1' here\nprint(f\"Dirty read value in tool: {val}\")\n\n# Assume the event carrying the state_delta={'field_1': 'value_1'}\n# is yielded *after* this tool runs and is processed by the Runner.\n</code></pre> <pre><code>// Modify state - Code in BeforeAgentCallback\n// AND stages this change in callbackContext.eventActions().stateDelta().\ncallbackContext.state().put(\"field_1\", \"value_1\");\n\n// --- agent runs ... ---\n\n// --- Code in a tool called later *within the same invocation* ---\n// Readable (dirty read), but 'value_1' isn't guaranteed persistent yet.\nObject val = toolContext.state().get(\"field_1\"); // 'val' will likely be 'value_1' here\nSystem.out.println(\"Dirty read value in tool: \" + val);\n// Assume the event carrying the state_delta={'field_1': 'value_1'}\n// is yielded *after* this tool runs and is processed by the Runner.\n</code></pre> <ul> <li>\u5f71\u97ff\u8aaa\u660e\uff1a</li> <li>\u512a\u9ede\uff1a \u5141\u8a31\u5728\u55ae\u4e00\u8907\u96dc\u6b65\u9a5f\u4e2d\u7684\u4e0d\u540c\u908f\u8f2f\u90e8\u5206\uff08\u4f8b\u5982\u5728\u4e0b\u4e00\u6b21\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u56de\u5408\u524d\u9032\u884c\u591a\u6b21\u56de\u547c\uff08callback\uff09\u6216\u5de5\u5177\u547c\u53eb (tool calls)\uff09\u80fd\u5920\u5229\u7528 state \u9032\u884c\u5354\u8abf\uff0c\u800c\u7121\u9700\u7b49\u5f85\u5b8c\u6574\u7684\u8b93\u6e21\uff08yield\uff09/\u63d0\u4ea4\uff08commit\uff09\u5faa\u74b0\u3002</li> <li>\u6ce8\u610f\u4e8b\u9805\uff1a \u82e5\u5728\u95dc\u9375\u908f\u8f2f\u4e0a\u904e\u5ea6\u4f9d\u8cf4\u9ad2\u8b80 (Dirty Reads) \u53ef\u80fd\u5b58\u5728\u98a8\u96aa\u3002\u5982\u679c\u5728\u651c\u5e36 <code>state_delta</code> \u7684\u4e8b\u4ef6\u88ab\u8b93\u6e21\u4e26\u7531 <code>Runner</code> \u8655\u7406\u4e4b\u524d\uff0c\u6b64\u6b21\u547c\u53eb\u5931\u6557\uff0c\u5247\u672a\u63d0\u4ea4\u7684 state \u8b8a\u66f4\u5c07\u6703\u907a\u5931\u3002\u5c0d\u65bc\u95dc\u9375\u7684 state \u8f49\u63db\uff0c\u8acb\u78ba\u4fdd\u9019\u4e9b\u8b8a\u66f4\u8207\u80fd\u5920\u6210\u529f\u8655\u7406\u7684\u4e8b\u4ef6\u7d81\u5b9a\u3002</li> </ul>"},{"location":"runtime/#partialtrue","title":"\u4e32\u6d41\u8207\u975e\u4e32\u6d41\u8f38\u51fa\uff08<code>partial=True</code>\uff09","text":"<p>\u9019\u4e3b\u8981\u95dc\u806f\u65bc\u5982\u4f55\u8655\u7406\u4f86\u81ea\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7684\u56de\u61c9\uff0c\u7279\u5225\u662f\u5728\u4f7f\u7528\u4e32\u6d41\u751f\u6210 API \u6642\u3002</p> <ul> <li>\u4e32\u6d41 (Streaming)\uff1a LLM \u6703\u9010\u5b57\u5143\uff08token-by-token\uff09\u6216\u4ee5\u5c0f\u5340\u584a\u65b9\u5f0f\u7522\u751f\u56de\u61c9\u3002</li> <li>\u6846\u67b6\uff08\u901a\u5e38\u5728 <code>BaseLlmFlow</code> \u5167\uff09\u6703\u91dd\u5c0d\u55ae\u4e00\u6982\u5ff5\u56de\u61c9\u8b93\u6e21\u591a\u500b <code>Event</code> \u7269\u4ef6\u3002\u9019\u4e9b\u4e8b\u4ef6\u5927\u591a\u6703\u5e36\u6709 <code>partial=True</code>\u3002</li> <li><code>Runner</code> \u5728\u6536\u5230\u5e36\u6709 <code>partial=True</code> \u7684\u4e8b\u4ef6\u6642\uff0c\u901a\u5e38\u6703\u7acb\u5373\u5c07\u5176\u8f49\u767c\u81f3\u4e0a\u6e38\uff08\u4f8b\u5982 UI \u986f\u793a\uff09\uff0c\u4f46\u6703\u7565\u904e\u8655\u7406\u5176 <code>actions</code>\uff08\u5982 <code>state_delta</code>\uff09\u3002</li> <li>\u6700\u7d42\uff0c\u6846\u67b6\u6703\u91dd\u5c0d\u8a72\u56de\u61c9\u8b93\u6e21\u4e00\u500b\u6a19\u8a18\u70ba\u975e partial\uff08<code>partial=False</code> \u6216\u900f\u904e <code>turn_complete=True</code> \u96b1\u542b\uff09\u7684\u6700\u7d42\u4e8b\u4ef6\u3002</li> <li><code>Runner</code> \u50c5\u6703\u5b8c\u6574\u8655\u7406\u9019\u500b\u6700\u7d42\u4e8b\u4ef6\uff0c\u4e26\u63d0\u4ea4\u6240\u6709\u76f8\u95dc\u7684 <code>state_delta</code> \u6216 <code>artifact_delta</code>\u3002</li> <li>\u975e\u4e32\u6d41 (Non-Streaming)\uff1a LLM \u6703\u4e00\u6b21\u7522\u751f\u5b8c\u6574\u56de\u61c9\u3002\u6846\u67b6\u6703\u8b93\u6e21\u4e00\u500b\u6a19\u8a18\u70ba\u975e partial \u7684\u55ae\u4e00\u4e8b\u4ef6\uff0c<code>Runner</code> \u6703\u5b8c\u6574\u8655\u7406\u8a72\u4e8b\u4ef6\u3002</li> <li>\u91cd\u8981\u6027\uff1a \u9019\u78ba\u4fdd\u4e86 state \u8b8a\u66f4\u662f\u4ee5\u539f\u5b50\u6027\u4e14\u50c5\u4e00\u6b21\u7684\u65b9\u5f0f\uff0c\u6839\u64da LLM \u7684\u5b8c\u6574\u56de\u61c9\u4f86\u5957\u7528\uff0c\u540c\u6642\u4ecd\u5141\u8a31 UI \u96a8\u751f\u6210\u9032\u5ea6\u9010\u6b65\u986f\u793a\u6587\u5b57\u3002</li> </ul>"},{"location":"runtime/#run_async","title":"\u975e\u540c\u6b65\u70ba\u6838\u5fc3\uff08<code>run_async</code>\uff09","text":"<ul> <li>\u6838\u5fc3\u8a2d\u8a08\uff1a Agent Development Kit (ADK) Runtime \u57fa\u672c\u4e0a\u662f\u5efa\u7acb\u5728\u975e\u540c\u6b65\u51fd\u5f0f\u5eab\uff08\u5982 Python \u7684 <code>asyncio</code> \u8207 Java \u7684 <code>RxJava</code>\uff09\u4e4b\u4e0a\uff0c\u80fd\u6709\u6548\u8655\u7406\u4e26\u884c\u64cd\u4f5c\uff08\u5982\u7b49\u5f85 LLM \u56de\u61c9\u6216\u5de5\u5177\u57f7\u884c\uff09\uff0c\u4e14\u4e0d\u6703\u963b\u585e\u3002</li> <li>\u4e3b\u8981\u9032\u5165\u9ede\uff1a <code>Runner.run_async</code> \u662f\u57f7\u884c agent \u547c\u53eb\u7684\u4e3b\u8981\u65b9\u6cd5\u3002\u6240\u6709\u6838\u5fc3\u53ef\u57f7\u884c\u5143\u4ef6\uff08Agents\u3001\u7279\u5b9a\u6d41\u7a0b\uff09\u5167\u90e8\u7686\u4f7f\u7528 <code>asynchronous</code> \u65b9\u6cd5\u3002</li> <li>\u540c\u6b65\u4fbf\u5229\u6027\uff08<code>run</code>\uff09\uff1a \u540c\u6b65\u7684 <code>Runner.run</code> \u65b9\u6cd5\u4e3b\u8981\u662f\u70ba\u4e86\u4fbf\u5229\uff08\u4f8b\u5982\u5728\u7c21\u55ae\u8173\u672c\u6216\u6e2c\u8a66\u74b0\u5883\u4e2d\uff09\u3002\u4f46\u5728\u5167\u90e8\uff0c<code>Runner.run</code> \u901a\u5e38\u50c5\u547c\u53eb <code>Runner.run_async</code>\uff0c\u4e26\u70ba\u4f60\u7ba1\u7406\u975e\u540c\u6b65\u4e8b\u4ef6\u8ff4\u5708\u7684\u57f7\u884c\u3002</li> <li>\u958b\u767c\u8005\u9ad4\u9a57\uff1a \u6211\u5011\u5efa\u8b70\u4f60\u8a2d\u8a08\u7684\u61c9\u7528\u7a0b\u5f0f\uff08\u4f8b\u5982\u4f7f\u7528 ADK \u7684\u7db2\u9801\u4f3a\u670d\u5668\uff09\u61c9\u4ee5\u975e\u540c\u6b65\u70ba\u4e3b\uff0c\u4ee5\u7372\u5f97\u6700\u4f73\u6548\u80fd\u3002\u5728 Python \u4e2d\uff0c\u9019\u8868\u793a\u8981\u4f7f\u7528 <code>asyncio</code>\uff1b\u5728 Java \u4e2d\uff0c\u5247\u5efa\u8b70\u5229\u7528 <code>RxJava</code> \u7684 reactive programming \u6a21\u578b\u3002</li> <li>\u540c\u6b65\u56de\u547c/\u5de5\u5177\uff1a Agent Development Kit (ADK) \u6846\u67b6\u540c\u6642\u652f\u63f4\u5de5\u5177\u8207\u56de\u547c\u7684\u975e\u540c\u6b65\u8207\u540c\u6b65\u51fd\u5f0f\u3002<ul> <li>\u963b\u585e\u5f0f I/O\uff1a \u5c0d\u65bc\u9577\u6642\u9593\u57f7\u884c\u7684\u540c\u6b65 I/O \u64cd\u4f5c\uff0c\u6846\u67b6\u6703\u5617\u8a66\u907f\u514d\u963b\u585e\u3002Python ADK \u53ef\u80fd\u6703\u4f7f\u7528 asyncio.to_thread\uff0c\u800c Java ADK \u5247\u5e38\u4f9d\u8cf4\u9069\u7576\u7684 RxJava scheduler \u6216\u5305\u88dd\u5668\u4f86\u8655\u7406\u963b\u585e\u547c\u53eb\u3002</li> <li>CPU \u5bc6\u96c6\u578b\u5de5\u4f5c\uff1a \u7d14\u7cb9 CPU \u5bc6\u96c6\u7684\u540c\u6b65\u4efb\u52d9\uff0c\u5728\u5169\u7a2e\u74b0\u5883\u4e0b\u90fd\u6703\u963b\u585e\u5176\u57f7\u884c\u7dd2\u3002</li> </ul> </li> </ul> <p>\u7406\u89e3\u9019\u4e9b\u884c\u70ba\u6709\u52a9\u65bc\u4f60\u64b0\u5beb\u66f4\u5065\u58ef\u7684 ADK \u61c9\u7528\u7a0b\u5f0f\uff0c\u4e26\u5354\u52a9\u9664\u932f\u8207 state \u4e00\u81f4\u6027\u3001\u4e32\u6d41\u66f4\u65b0\u3001\u975e\u540c\u6b65\u57f7\u884c\u76f8\u95dc\u7684\u554f\u984c\u3002</p>"},{"location":"runtime/index.en/","title":"Runtime","text":""},{"location":"runtime/index.en/#what-is-runtime","title":"What is runtime?","text":"<p>The ADK Runtime is the underlying engine that powers your agent application during user interactions. It's the system that takes your defined agents, tools, and callbacks and orchestrates their execution in response to user input, managing the flow of information, state changes, and interactions with external services like LLMs or storage.</p> <p>Think of the Runtime as the \"engine\" of your agentic application. You define the parts (agents, tools), and the Runtime handles how they connect and run together to fulfill a user's request.</p>"},{"location":"runtime/index.en/#core-idea-the-event-loop","title":"Core Idea: The Event Loop","text":"<p>At its heart, the ADK Runtime operates on an Event Loop. This loop facilitates a back-and-forth communication between the <code>Runner</code> component and your defined \"Execution Logic\" (which includes your Agents, the LLM calls they make, Callbacks, and Tools).</p> <p></p> <p>In simple terms:</p> <ol> <li>The <code>Runner</code> receives a user query and asks the main <code>Agent</code> to start processing.</li> <li>The <code>Agent</code> (and its associated logic) runs until it has something to report (like a response, a request to use a tool, or a state change) \u2013 it then yields or emits an <code>Event</code>.</li> <li>The <code>Runner</code> receives this <code>Event</code>, processes any associated actions (like saving state changes via <code>Services</code>), and forwards the event onwards (e.g., to the user interface).</li> <li>Only after the <code>Runner</code> has processed the event does the <code>Agent</code>'s logic resume from where it paused, now potentially seeing the effects of the changes committed by the Runner.</li> <li>This cycle repeats until the agent has no more events to yield for the current user query.</li> </ol> <p>This event-driven loop is the fundamental pattern governing how ADK executes your agent code.</p>"},{"location":"runtime/index.en/#the-heartbeat-the-event-loop-inner-workings","title":"The Heartbeat: The Event Loop - Inner workings","text":"<p>The Event Loop is the core operational pattern defining the interaction between the <code>Runner</code> and your custom code (Agents, Tools, Callbacks, collectively referred to as \"Execution Logic\" or \"Logic Components\" in the design document). It establishes a clear division of responsibilities:</p> <p>Note</p> <p>The specific method names and parameter names may vary slightly by SDK language (e.g., <code>agent_to_run.runAsync(...)</code> in Java, <code>agent_to_run.run_async(...)</code> in Python). Refer to the language-specific API documentation for details.</p>"},{"location":"runtime/index.en/#runners-role-orchestrator","title":"Runner's Role (Orchestrator)","text":"<p>The <code>Runner</code> acts as the central coordinator for a single user invocation. Its responsibilities in the loop are:</p> <ol> <li>Initiation: Receives the end user's query (<code>new_message</code>) and typically appends it to the session history via the <code>SessionService</code>.</li> <li>Kick-off: Starts the event generation process by calling the main agent's execution method (e.g., <code>agent_to_run.run_async(...)</code>).</li> <li>Receive &amp; Process: Waits for the agent logic to <code>yield</code> or <code>emit</code> an <code>Event</code>. Upon receiving an event, the Runner promptly processes it. This involves:<ul> <li>Using configured <code>Services</code> (<code>SessionService</code>, <code>ArtifactService</code>, <code>MemoryService</code>) to commit changes indicated in <code>event.actions</code> (like <code>state_delta</code>, <code>artifact_delta</code>).</li> <li>Performing other internal bookkeeping.</li> </ul> </li> <li>Yield Upstream: Forwards the processed event onwards (e.g., to the calling application or UI for rendering).</li> <li>Iterate: Signals the agent logic that processing is complete for the yielded event, allowing it to resume and generate the next event.</li> </ol> <p>Conceptual Runner Loop:</p> PythonJava <pre><code># Simplified view of Runner's main loop logic\ndef run(new_query, ...) -&gt; Generator[Event]:\n    # 1. Append new_query to session event history (via SessionService)\n    session_service.append_event(session, Event(author='user', content=new_query))\n\n    # 2. Kick off event loop by calling the agent\n    agent_event_generator = agent_to_run.run_async(context)\n\n    async for event in agent_event_generator:\n        # 3. Process the generated event and commit changes\n        session_service.append_event(session, event) # Commits state/artifact deltas etc.\n        # memory_service.update_memory(...) # If applicable\n        # artifact_service might have already been called via context during agent run\n\n        # 4. Yield event for upstream processing (e.g., UI rendering)\n        yield event\n        # Runner implicitly signals agent generator can continue after yielding\n</code></pre> <pre><code>// Simplified conceptual view of the Runner's main loop logic in Java.\npublic Flowable&lt;Event&gt; runConceptual(\n    Session session,                  \n    InvocationContext invocationContext, \n    Content newQuery                \n    ) {\n\n    // 1. Append new_query to session event history (via SessionService)\n    // ...\n    sessionService.appendEvent(session, userEvent).blockingGet();\n\n    // 2. Kick off event stream by calling the agent\n    Flowable&lt;Event&gt; agentEventStream = agentToRun.runAsync(invocationContext);\n\n    // 3. Process each generated event, commit changes, and \"yield\" or \"emit\"\n    return agentEventStream.map(event -&gt; {\n        // This mutates the session object (adds event, applies stateDelta).\n        // The return value of appendEvent (a Single&lt;Event&gt;) is conceptually\n        // just the event itself after processing.\n        sessionService.appendEvent(session, event).blockingGet(); // Simplified blocking call\n\n        // memory_service.update_memory(...) // If applicable - conceptual\n        // artifact_service might have already been called via context during agent run\n\n        // 4. \"Yield\" event for upstream processing\n        //    In RxJava, returning the event in map effectively yields it to the next operator or subscriber.\n        return event;\n    });\n}\n</code></pre>"},{"location":"runtime/index.en/#execution-logics-role-agent-tool-callback","title":"Execution Logic's Role (Agent, Tool, Callback)","text":"<p>Your code within agents, tools, and callbacks is responsible for the actual computation and decision-making. Its interaction with the loop involves:</p> <ol> <li>Execute: Runs its logic based on the current <code>InvocationContext</code>, including the session state as it was when execution resumed.</li> <li>Yield: When the logic needs to communicate (send a message, call a tool, report a state change), it constructs an <code>Event</code> containing the relevant content and actions, and then <code>yield</code>s this event back to the <code>Runner</code>.</li> <li>Pause: Crucially, execution of the agent logic pauses immediately after the <code>yield</code> statement (or <code>return</code> in RxJava). It waits for the <code>Runner</code> to complete step 3 (processing and committing).</li> <li>Resume: Only after the <code>Runner</code> has processed the yielded event does the agent logic resume execution from the statement immediately following the <code>yield</code>.</li> <li>See Updated State: Upon resumption, the agent logic can now reliably access the session state (<code>ctx.session.state</code>) reflecting the changes that were committed by the <code>Runner</code> from the previously yielded event.</li> </ol> <p>Conceptual Execution Logic:</p> PythonJava <pre><code># Simplified view of logic inside Agent.run_async, callbacks, or tools\n\n# ... previous code runs based on current state ...\n\n# 1. Determine a change or output is needed, construct the event\n# Example: Updating state\nupdate_data = {'field_1': 'value_2'}\nevent_with_state_change = Event(\n    author=self.name,\n    actions=EventActions(state_delta=update_data),\n    content=types.Content(parts=[types.Part(text=\"State updated.\")])\n    # ... other event fields ...\n)\n\n# 2. Yield the event to the Runner for processing &amp; commit\nyield event_with_state_change\n# &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; EXECUTION PAUSES HERE &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\n# &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; RUNNER PROCESSES &amp; COMMITS THE EVENT &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\n# 3. Resume execution ONLY after Runner is done processing the above event.\n# Now, the state committed by the Runner is reliably reflected.\n# Subsequent code can safely assume the change from the yielded event happened.\nval = ctx.session.state['field_1']\n# here `val` is guaranteed to be \"value_2\" (assuming Runner committed successfully)\nprint(f\"Resumed execution. Value of field_1 is now: {val}\")\n\n# ... subsequent code continues ...\n# Maybe yield another event later...\n</code></pre> <pre><code>// Simplified view of logic inside Agent.runAsync, callbacks, or tools\n// ... previous code runs based on current state ...\n\n// 1. Determine a change or output is needed, construct the event\n// Example: Updating state\nConcurrentMap&lt;String, Object&gt; updateData = new ConcurrentHashMap&lt;&gt;();\nupdateData.put(\"field_1\", \"value_2\");\n\nEventActions actions = EventActions.builder().stateDelta(updateData).build();\nContent eventContent = Content.builder().parts(Part.fromText(\"State updated.\")).build();\n\nEvent eventWithStateChange = Event.builder()\n    .author(self.name())\n    .actions(actions)\n    .content(Optional.of(eventContent))\n    // ... other event fields ...\n    .build();\n\n// 2. \"Yield\" the event. In RxJava, this means emitting it into the stream.\n//    The Runner (or upstream consumer) will subscribe to this Flowable.\n//    When the Runner receives this event, it will process it (e.g., call sessionService.appendEvent).\n//    The 'appendEvent' in Java ADK mutates the 'Session' object held within 'ctx' (InvocationContext).\n\n// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; CONCEPTUAL PAUSE POINT &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n// In RxJava, the emission of 'eventWithStateChange' happens, and then the stream\n// might continue with a 'flatMap' or 'concatMap' operator that represents\n// the logic *after* the Runner has processed this event.\n\n// To model the \"resume execution ONLY after Runner is done processing\":\n// The Runner's `appendEvent` is usually an async operation itself (returns Single&lt;Event&gt;).\n// The agent's flow needs to be structured such that subsequent logic\n// that depends on the committed state runs *after* that `appendEvent` completes.\n\n// This is how the Runner typically orchestrates it:\n// Runner:\n//   agent.runAsync(ctx)\n//     .concatMapEager(eventFromAgent -&gt;\n//         sessionService.appendEvent(ctx.session(), eventFromAgent) // This updates ctx.session().state()\n//             .toFlowable() // Emits the event after it's processed\n//     )\n//     .subscribe(processedEvent -&gt; { /* UI renders processedEvent */ });\n\n// So, within the agent's own logic, if it needs to do something *after* an event it yielded\n// has been processed and its state changes are reflected in ctx.session().state(),\n// that subsequent logic would typically be in another step of its reactive chain.\n\n// For this conceptual example, we'll emit the event, and then simulate the \"resume\"\n// as a subsequent operation in the Flowable chain.\n\nreturn Flowable.just(eventWithStateChange) // Step 2: Yield the event\n    .concatMap(yieldedEvent -&gt; {\n        // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; RUNNER CONCEPTUALLY PROCESSES &amp; COMMITS THE EVENT &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n        // At this point, in a real runner, ctx.session().appendEvent(yieldedEvent) would have been called\n        // by the Runner, and ctx.session().state() would be updated.\n        // Since we are *inside* the agent's conceptual logic trying to model this,\n        // we assume the Runner's action has implicitly updated our 'ctx.session()'.\n\n        // 3. Resume execution.\n        // Now, the state committed by the Runner (via sessionService.appendEvent)\n        // is reliably reflected in ctx.session().state().\n        Object val = ctx.session().state().get(\"field_1\");\n        // here `val` is guaranteed to be \"value_2\" because the `sessionService.appendEvent`\n        // called by the Runner would have updated the session state within the `ctx` object.\n\n        System.out.println(\"Resumed execution. Value of field_1 is now: \" + val);\n\n        // ... subsequent code continues ...\n        // If this subsequent code needs to yield another event, it would do so here.\n</code></pre> <p>This cooperative yield/pause/resume cycle between the <code>Runner</code> and your Execution Logic, mediated by <code>Event</code> objects, forms the core of the ADK Runtime.</p>"},{"location":"runtime/index.en/#key-components-of-the-runtime","title":"Key components of the Runtime","text":"<p>Several components work together within the ADK Runtime to execute an agent invocation. Understanding their roles clarifies how the event loop functions:</p> <p>These players interact continuously through the Event Loop to process a user's request.</p>"},{"location":"runtime/index.en/#runner","title":"<code>Runner</code>","text":"<ul> <li>Role: The main entry point and orchestrator for a single user query (<code>run_async</code>).</li> <li>Function: Manages the overall Event Loop, receives events yielded by the Execution Logic, coordinates with Services to process and commit event actions (state/artifact changes), and forwards processed events upstream (e.g., to the UI). It essentially drives the conversation turn by turn based on yielded events. (Defined in <code>google.adk.runners.runner</code>).</li> </ul>"},{"location":"runtime/index.en/#execution-logic-components","title":"Execution Logic Components","text":"<ul> <li>Role: The parts containing your custom code and the core agent capabilities.</li> <li>Components:</li> <li><code>Agent</code> (<code>BaseAgent</code>, <code>LlmAgent</code>, etc.): Your primary logic units that process information and decide on actions. They implement the <code>_run_async_impl</code> method which yields events.</li> <li><code>Tools</code> (<code>BaseTool</code>, <code>FunctionTool</code>, <code>AgentTool</code>, etc.): External functions or capabilities used by agents (often <code>LlmAgent</code>) to interact with the outside world or perform specific tasks. They execute and return results, which are then wrapped in events.</li> <li><code>Callbacks</code> (Functions): User-defined functions attached to agents (e.g., <code>before_agent_callback</code>, <code>after_model_callback</code>) that hook into specific points in the execution flow, potentially modifying behavior or state, whose effects are captured in events.</li> <li>Function: Perform the actual thinking, calculation, or external interaction. They communicate their results or needs by yielding <code>Event</code> objects and pausing until the Runner processes them.</li> </ul>"},{"location":"runtime/index.en/#event","title":"<code>Event</code>","text":"<ul> <li>Role: The message passed back and forth between the <code>Runner</code> and the Execution Logic.</li> <li>Function: Represents an atomic occurrence (user input, agent text, tool call/result, state change request, control signal). It carries both the content of the occurrence and the intended side effects (<code>actions</code> like <code>state_delta</code>).</li> </ul>"},{"location":"runtime/index.en/#services","title":"<code>Services</code>","text":"<ul> <li>Role: Backend components responsible for managing persistent or shared resources. Used primarily by the <code>Runner</code> during event processing.</li> <li>Components:</li> <li><code>SessionService</code> (<code>BaseSessionService</code>, <code>InMemorySessionService</code>, etc.): Manages <code>Session</code> objects, including saving/loading them, applying <code>state_delta</code> to the session state, and appending events to the <code>event history</code>.</li> <li><code>ArtifactService</code> (<code>BaseArtifactService</code>, <code>InMemoryArtifactService</code>, <code>GcsArtifactService</code>, etc.): Manages the storage and retrieval of binary artifact data. Although <code>save_artifact</code> is called via context during execution logic, the <code>artifact_delta</code> in the event confirms the action for the Runner/SessionService.</li> <li><code>MemoryService</code> (<code>BaseMemoryService</code>, etc.): (Optional) Manages long-term semantic memory across sessions for a user.</li> <li>Function: Provide the persistence layer. The <code>Runner</code> interacts with them to ensure changes signaled by <code>event.actions</code> are reliably stored before the Execution Logic resumes.</li> </ul>"},{"location":"runtime/index.en/#session","title":"<code>Session</code>","text":"<ul> <li>Role: A data container holding the state and history for one specific conversation between a user and the application.</li> <li>Function: Stores the current <code>state</code> dictionary, the list of all past <code>events</code> (<code>event history</code>), and references to associated artifacts. It's the primary record of the interaction, managed by the <code>SessionService</code>.</li> </ul>"},{"location":"runtime/index.en/#invocation","title":"<code>Invocation</code>","text":"<ul> <li>Role: A conceptual term representing everything that happens in response to a single user query, from the moment the <code>Runner</code> receives it until the agent logic finishes yielding events for that query.</li> <li>Function: An invocation might involve multiple agent runs (if using agent transfer or <code>AgentTool</code>), multiple LLM calls, tool executions, and callback executions, all tied together by a single <code>invocation_id</code> within the <code>InvocationContext</code>. State variables prefixed with <code>temp:</code> are strictly scoped to a single invocation and discarded afterwards.</li> </ul>"},{"location":"runtime/index.en/#how-it-works-a-simplified-invocation","title":"How It Works: A Simplified Invocation","text":"<p>Let's trace a simplified flow for a typical user query that involves an LLM agent calling a tool:</p> <p></p>"},{"location":"runtime/index.en/#step-by-step-breakdown","title":"Step-by-Step Breakdown","text":"<ol> <li>User Input: The User sends a query (e.g., \"What's the capital of France?\").</li> <li>Runner Starts: <code>Runner.run_async</code> begins. It interacts with the <code>SessionService</code> to load the relevant <code>Session</code> and adds the user query as the first <code>Event</code> to the session history. An <code>InvocationContext</code> (<code>ctx</code>) is prepared.</li> <li>Agent Execution: The <code>Runner</code> calls <code>agent.run_async(ctx)</code> on the designated root agent (e.g., an <code>LlmAgent</code>).</li> <li>LLM Call (Example): The <code>Agent_Llm</code> determines it needs information, perhaps by calling a tool. It prepares a request for the <code>LLM</code>. Let's assume the LLM decides to call <code>MyTool</code>.</li> <li>Yield FunctionCall Event: The <code>Agent_Llm</code> receives the <code>FunctionCall</code> response from the LLM, wraps it in an <code>Event(author='Agent_Llm', content=Content(parts=[Part(function_call=...)]))</code>, and <code>yields</code> or <code>emits</code> this event.</li> <li>Agent Pauses: The <code>Agent_Llm</code>'s execution pauses immediately after the <code>yield</code>.</li> <li>Runner Processes: The <code>Runner</code> receives the FunctionCall event. It passes it to the <code>SessionService</code> to record it in the history. The <code>Runner</code> then yields the event upstream to the <code>User</code> (or application).</li> <li>Agent Resumes: The <code>Runner</code> signals that the event is processed, and <code>Agent_Llm</code> resumes execution.</li> <li>Tool Execution: The <code>Agent_Llm</code>'s internal flow now proceeds to execute the requested <code>MyTool</code>. It calls <code>tool.run_async(...)</code>.</li> <li>Tool Returns Result: <code>MyTool</code> executes and returns its result (e.g., <code>{'result': 'Paris'}</code>).</li> <li>Yield FunctionResponse Event: The agent (<code>Agent_Llm</code>) wraps the tool result into an <code>Event</code> containing a <code>FunctionResponse</code> part (e.g., <code>Event(author='Agent_Llm', content=Content(role='user', parts=[Part(function_response=...)]))</code>). This event might also contain <code>actions</code> if the tool modified state (<code>state_delta</code>) or saved artifacts (<code>artifact_delta</code>). The agent <code>yield</code>s this event.</li> <li>Agent Pauses: <code>Agent_Llm</code> pauses again.</li> <li>Runner Processes: <code>Runner</code> receives the FunctionResponse event. It passes it to <code>SessionService</code> which applies any <code>state_delta</code>/<code>artifact_delta</code> and adds the event to history. <code>Runner</code> yields the event upstream.</li> <li>Agent Resumes: <code>Agent_Llm</code> resumes, now knowing the tool result and any state changes are committed.</li> <li>Final LLM Call (Example): <code>Agent_Llm</code> sends the tool result back to the <code>LLM</code> to generate a natural language response.</li> <li>Yield Final Text Event: <code>Agent_Llm</code> receives the final text from the <code>LLM</code>, wraps it in an <code>Event(author='Agent_Llm', content=Content(parts=[Part(text=...)]))</code>, and <code>yield</code>s it.</li> <li>Agent Pauses: <code>Agent_Llm</code> pauses.</li> <li>Runner Processes: <code>Runner</code> receives the final text event, passes it to <code>SessionService</code> for history, and yields it upstream to the <code>User</code>. This is likely marked as the <code>is_final_response()</code>.</li> <li>Agent Resumes &amp; Finishes: <code>Agent_Llm</code> resumes. Having completed its task for this invocation, its <code>run_async</code> generator finishes.</li> <li>Runner Completes: The <code>Runner</code> sees the agent's generator is exhausted and finishes its loop for this invocation.</li> </ol> <p>This yield/pause/process/resume cycle ensures that state changes are consistently applied and that the execution logic always operates on the most recently committed state after yielding an event.</p>"},{"location":"runtime/index.en/#important-runtime-behaviors","title":"Important Runtime Behaviors","text":"<p>Understanding a few key aspects of how the ADK Runtime handles state, streaming, and asynchronous operations is crucial for building predictable and efficient agents.</p>"},{"location":"runtime/index.en/#state-updates-commitment-timing","title":"State Updates &amp; Commitment Timing","text":"<ul> <li> <p>The Rule: When your code (in an agent, tool, or callback) modifies the session state (e.g., <code>context.state['my_key'] = 'new_value'</code>), this change is initially recorded locally within the current <code>InvocationContext</code>. The change is only guaranteed to be persisted (saved by the <code>SessionService</code>) after the <code>Event</code> carrying the corresponding <code>state_delta</code> in its <code>actions</code> has been <code>yield</code>-ed by your code and subsequently processed by the <code>Runner</code>.</p> </li> <li> <p>Implication: Code that runs after resuming from a <code>yield</code> can reliably assume that the state changes signaled in the yielded event have been committed.</p> </li> </ul> PythonJava <pre><code># Inside agent logic (conceptual)\n\n# 1. Modify state\nctx.session.state['status'] = 'processing'\nevent1 = Event(..., actions=EventActions(state_delta={'status': 'processing'}))\n\n# 2. Yield event with the delta\nyield event1\n# --- PAUSE --- Runner processes event1, SessionService commits 'status' = 'processing' ---\n\n# 3. Resume execution\n# Now it's safe to rely on the committed state\ncurrent_status = ctx.session.state['status'] # Guaranteed to be 'processing'\nprint(f\"Status after resuming: {current_status}\")\n</code></pre> <pre><code>// Inside agent logic (conceptual)\n// ... previous code runs based on current state ...\n\n// 1. Prepare state modification and construct the event\nConcurrentHashMap&lt;String, Object&gt; stateChanges = new ConcurrentHashMap&lt;&gt;();\nstateChanges.put(\"status\", \"processing\");\n\nEventActions actions = EventActions.builder().stateDelta(stateChanges).build();\nContent content = Content.builder().parts(Part.fromText(\"Status update: processing\")).build();\n\nEvent event1 = Event.builder()\n    .actions(actions)\n    // ...\n    .build();\n\n// 2. Yield event with the delta\nreturn Flowable.just(event1)\n    .map(\n        emittedEvent -&gt; {\n            // --- CONCEPTUAL PAUSE &amp; RUNNER PROCESSING ---\n            // 3. Resume execution (conceptually)\n            // Now it's safe to rely on the committed state.\n            String currentStatus = (String) ctx.session().state().get(\"status\");\n            System.out.println(\"Status after resuming (inside agent logic): \" + currentStatus); // Guaranteed to be 'processing'\n\n            // The event itself (event1) is passed on.\n            // If subsequent logic within this agent step produced *another* event,\n            // you'd use concatMap to emit that new event.\n            return emittedEvent;\n        });\n\n// ... subsequent agent logic might involve further reactive operators\n// or emitting more events based on the now-updated `ctx.session().state()`.\n</code></pre>"},{"location":"runtime/index.en/#dirty-reads-of-session-state","title":"\"Dirty Reads\" of Session State","text":"<ul> <li>Definition: While commitment happens after the yield, code running later within the same invocation, but before the state-changing event is actually yielded and processed, can often see the local, uncommitted changes. This is sometimes called a \"dirty read\".</li> <li>Example:</li> </ul> PythonJava <pre><code># Code in before_agent_callback\ncallback_context.state['field_1'] = 'value_1'\n# State is locally set to 'value_1', but not yet committed by Runner\n\n# ... agent runs ...\n\n# Code in a tool called later *within the same invocation*\n# Readable (dirty read), but 'value_1' isn't guaranteed persistent yet.\nval = tool_context.state['field_1'] # 'val' will likely be 'value_1' here\nprint(f\"Dirty read value in tool: {val}\")\n\n# Assume the event carrying the state_delta={'field_1': 'value_1'}\n# is yielded *after* this tool runs and is processed by the Runner.\n</code></pre> <pre><code>// Modify state - Code in BeforeAgentCallback\n// AND stages this change in callbackContext.eventActions().stateDelta().\ncallbackContext.state().put(\"field_1\", \"value_1\");\n\n// --- agent runs ... ---\n\n// --- Code in a tool called later *within the same invocation* ---\n// Readable (dirty read), but 'value_1' isn't guaranteed persistent yet.\nObject val = toolContext.state().get(\"field_1\"); // 'val' will likely be 'value_1' here\nSystem.out.println(\"Dirty read value in tool: \" + val);\n// Assume the event carrying the state_delta={'field_1': 'value_1'}\n// is yielded *after* this tool runs and is processed by the Runner.\n</code></pre> <ul> <li>Implications:</li> <li>Benefit: Allows different parts of your logic within a single complex step (e.g., multiple callbacks or tool calls before the next LLM turn) to coordinate using state without waiting for a full yield/commit cycle.</li> <li>Caveat: Relying heavily on dirty reads for critical logic can be risky. If the invocation fails before the event carrying the <code>state_delta</code> is yielded and processed by the <code>Runner</code>, the uncommitted state change will be lost. For critical state transitions, ensure they are associated with an event that gets successfully processed.</li> </ul>"},{"location":"runtime/index.en/#streaming-vs-non-streaming-output-partialtrue","title":"Streaming vs. Non-Streaming Output (<code>partial=True</code>)","text":"<p>This primarily relates to how responses from the LLM are handled, especially when using streaming generation APIs.</p> <ul> <li>Streaming: The LLM generates its response token-by-token or in small chunks.</li> <li>The framework (often within <code>BaseLlmFlow</code>) yields multiple <code>Event</code> objects for a single conceptual response. Most of these events will have <code>partial=True</code>.</li> <li>The <code>Runner</code>, upon receiving an event with <code>partial=True</code>, typically forwards it immediately upstream (for UI display) but skips processing its <code>actions</code> (like <code>state_delta</code>).</li> <li>Eventually, the framework yields a final event for that response, marked as non-partial (<code>partial=False</code> or implicitly via <code>turn_complete=True</code>).</li> <li>The <code>Runner</code> fully processes only this final event, committing any associated <code>state_delta</code> or <code>artifact_delta</code>.</li> <li>Non-Streaming: The LLM generates the entire response at once. The framework yields a single event marked as non-partial, which the <code>Runner</code> processes fully.</li> <li>Why it Matters: Ensures that state changes are applied atomically and only once based on the complete response from the LLM, while still allowing the UI to display text progressively as it's generated.</li> </ul>"},{"location":"runtime/index.en/#async-is-primary-run_async","title":"Async is Primary (<code>run_async</code>)","text":"<ul> <li>Core Design: The ADK Runtime is fundamentally built on asynchronous libraries (like Python's <code>asyncio</code> and Java's <code>RxJava</code>) to handle concurrent operations (like waiting for LLM responses or tool executions) efficiently without blocking.</li> <li>Main Entry Point: <code>Runner.run_async</code> is the primary method for executing agent invocations. All core runnable components (Agents, specific flows) use <code>asynchronous</code> methods internally.</li> <li>Synchronous Convenience (<code>run</code>): A synchronous <code>Runner.run</code> method exists mainly for convenience (e.g., in simple scripts or testing environments). However, internally, <code>Runner.run</code> typically just calls <code>Runner.run_async</code> and manages the async event loop execution for you.</li> <li>Developer Experience: We recommend designing your applications (e.g., web servers using ADK) to be asynchronous for best performance. In Python, this means using <code>asyncio</code>; in Java, leverage <code>RxJava</code>'s reactive programming model.</li> <li>Sync Callbacks/Tools: The ADK framework supports both asynchronous and synchronous functions for tools and callbacks.<ul> <li>Blocking I/O: For long-running synchronous I/O operations, the framework attempts to prevent stalls. Python ADK may use asyncio.to_thread, while Java ADK often relies on appropriate RxJava schedulers or wrappers for blocking calls.</li> <li>CPU-Bound Work: Purely CPU-intensive synchronous tasks will still block their execution thread in both environments.</li> </ul> </li> </ul> <p>Understanding these behaviors helps you write more robust ADK applications and debug issues related to state consistency, streaming updates, and asynchronous execution.</p>"},{"location":"runtime/runconfig.en/","title":"Runtime Configuration","text":"<p><code>RunConfig</code> defines runtime behavior and options for agents in the ADK. It controls speech and streaming settings, function calling, artifact saving, and limits on LLM calls.</p> <p>When constructing an agent run, you can pass a <code>RunConfig</code> to customize how the agent interacts with models, handles audio, and streams responses. By default, no streaming is enabled and inputs aren\u2019t retained as artifacts. Use <code>RunConfig</code> to override these defaults.</p>"},{"location":"runtime/runconfig.en/#class-definition","title":"Class Definition","text":"<p>The <code>RunConfig</code> class holds configuration parameters for an agent's runtime behavior.</p> <ul> <li> <p>Python ADK uses Pydantic for this validation.</p> </li> <li> <p>Java ADK typically uses immutable data classes.</p> </li> </ul> PythonJava <pre><code>class RunConfig(BaseModel):\n    \"\"\"Configs for runtime behavior of agents.\"\"\"\n\n    model_config = ConfigDict(\n        extra='forbid',\n    )\n\n    speech_config: Optional[types.SpeechConfig] = None\n    response_modalities: Optional[list[str]] = None\n    save_input_blobs_as_artifacts: bool = False\n    support_cfc: bool = False\n    streaming_mode: StreamingMode = StreamingMode.NONE\n    output_audio_transcription: Optional[types.AudioTranscriptionConfig] = None\n    max_llm_calls: int = 500\n</code></pre> <pre><code>public abstract class RunConfig {\n\n  public enum StreamingMode {\n    NONE,\n    SSE,\n    BIDI\n  }\n\n  public abstract @Nullable SpeechConfig speechConfig();\n\n  public abstract ImmutableList&lt;Modality&gt; responseModalities();\n\n  public abstract boolean saveInputBlobsAsArtifacts();\n\n  public abstract @Nullable AudioTranscriptionConfig outputAudioTranscription();\n\n  public abstract int maxLlmCalls();\n\n  // ...\n}\n</code></pre>"},{"location":"runtime/runconfig.en/#runtime-parameters","title":"Runtime Parameters","text":"Parameter Python Type Java Type Default (Py / Java) Description <code>speech_config</code> <code>Optional[types.SpeechConfig]</code> <code>SpeechConfig</code> (nullable via <code>@Nullable</code>) <code>None</code> / <code>null</code> Configures speech synthesis (voice, language) using the <code>SpeechConfig</code> type. <code>response_modalities</code> <code>Optional[list[str]]</code> <code>ImmutableList&lt;Modality&gt;</code> <code>None</code> / Empty <code>ImmutableList</code> List of desired output modalities (e.g., Python: <code>[\"TEXT\", \"AUDIO\"]</code>; Java: uses structured <code>Modality</code> objects). <code>save_input_blobs_as_artifacts</code> <code>bool</code> <code>boolean</code> <code>False</code> / <code>false</code> If <code>true</code>, saves input blobs (e.g., uploaded files) as run artifacts for debugging/auditing. <code>streaming_mode</code> <code>StreamingMode</code> Currently not supported <code>StreamingMode.NONE</code> / N/A Sets the streaming behavior: <code>NONE</code> (default), <code>SSE</code> (server-sent events), or <code>BIDI</code> (bidirectional). <code>output_audio_transcription</code> <code>Optional[types.AudioTranscriptionConfig]</code> <code>AudioTranscriptionConfig</code> (nullable via <code>@Nullable</code>) <code>None</code> / <code>null</code> Configures transcription of generated audio output using the <code>AudioTranscriptionConfig</code> type. <code>max_llm_calls</code> <code>int</code> <code>int</code> <code>500</code> / <code>500</code> Limits total LLM calls per run. <code>0</code> or negative means unlimited (warned); <code>sys.maxsize</code> raises <code>ValueError</code>. <code>support_cfc</code> <code>bool</code> Currently not supported <code>False</code> / N/A Python: Enables Compositional Function Calling. Requires <code>streaming_mode=SSE</code> and uses the LIVE API. Experimental."},{"location":"runtime/runconfig.en/#speech_config","title":"<code>speech_config</code>","text":"<p>Note</p> <p>The interface or definition of <code>SpeechConfig</code> is the same, irrespective of the language.</p> <p>Speech configuration settings for live agents with audio capabilities. The <code>SpeechConfig</code> class has the following structure:</p> <pre><code>class SpeechConfig(_common.BaseModel):\n    \"\"\"The speech generation configuration.\"\"\"\n\n    voice_config: Optional[VoiceConfig] = Field(\n        default=None,\n        description=\"\"\"The configuration for the speaker to use.\"\"\",\n    )\n    language_code: Optional[str] = Field(\n        default=None,\n        description=\"\"\"Language code (ISO 639. e.g. en-US) for the speech synthesization.\n        Only available for Live API.\"\"\",\n    )\n</code></pre> <p>The <code>voice_config</code> parameter uses the <code>VoiceConfig</code> class:</p> <pre><code>class VoiceConfig(_common.BaseModel):\n    \"\"\"The configuration for the voice to use.\"\"\"\n\n    prebuilt_voice_config: Optional[PrebuiltVoiceConfig] = Field(\n        default=None,\n        description=\"\"\"The configuration for the speaker to use.\"\"\",\n    )\n</code></pre> <p>And <code>PrebuiltVoiceConfig</code> has the following structure:</p> <pre><code>class PrebuiltVoiceConfig(_common.BaseModel):\n    \"\"\"The configuration for the prebuilt speaker to use.\"\"\"\n\n    voice_name: Optional[str] = Field(\n        default=None,\n        description=\"\"\"The name of the prebuilt voice to use.\"\"\",\n    )\n</code></pre> <p>These nested configuration classes allow you to specify:</p> <ul> <li><code>voice_config</code>: The name of the prebuilt voice to use (in the <code>PrebuiltVoiceConfig</code>)</li> <li><code>language_code</code>: ISO 639 language code (e.g., \"en-US\") for speech synthesis</li> </ul> <p>When implementing voice-enabled agents, configure these parameters to control how your agent sounds when speaking.</p>"},{"location":"runtime/runconfig.en/#response_modalities","title":"<code>response_modalities</code>","text":"<p>Defines the output modalities for the agent. If not set, defaults to AUDIO. Response modalities determine how the agent communicates with users through various channels (e.g., text, audio).</p>"},{"location":"runtime/runconfig.en/#save_input_blobs_as_artifacts","title":"<code>save_input_blobs_as_artifacts</code>","text":"<p>When enabled, input blobs will be saved as artifacts during agent execution. This is useful for debugging and audit purposes, allowing developers to review the exact data received by agents.</p>"},{"location":"runtime/runconfig.en/#support_cfc","title":"<code>support_cfc</code>","text":"<p>Enables Compositional Function Calling (CFC) support. Only applicable when using StreamingMode.SSE. When enabled, the LIVE API will be invoked as only it supports CFC functionality.</p> <p>Warning</p> <p>The <code>support_cfc</code> feature is experimental and its API or behavior might change in future releases.</p>"},{"location":"runtime/runconfig.en/#streaming_mode","title":"<code>streaming_mode</code>","text":"<p>Configures the streaming behavior of the agent. Possible values:</p> <ul> <li><code>StreamingMode.NONE</code>: No streaming; responses delivered as complete units</li> <li><code>StreamingMode.SSE</code>: Server-Sent Events streaming; one-way streaming from server to client</li> <li><code>StreamingMode.BIDI</code>: Bidirectional streaming; simultaneous communication in both directions</li> </ul> <p>Streaming modes affect both performance and user experience. SSE streaming lets users see partial responses as they're generated, while BIDI streaming enables real-time interactive experiences.</p>"},{"location":"runtime/runconfig.en/#output_audio_transcription","title":"<code>output_audio_transcription</code>","text":"<p>Configuration for transcribing audio outputs from live agents with audio response capability. This enables automatic transcription of audio responses for accessibility, record-keeping, and multi-modal applications.</p>"},{"location":"runtime/runconfig.en/#max_llm_calls","title":"<code>max_llm_calls</code>","text":"<p>Sets a limit on the total number of LLM calls for a given agent run.</p> <ul> <li>Values greater than 0 and less than <code>sys.maxsize</code>: Enforces a bound on LLM calls</li> <li>Values less than or equal to 0: Allows unbounded LLM calls (not recommended for production)</li> </ul> <p>This parameter prevents excessive API usage and potential runaway processes. Since LLM calls often incur costs and consume resources, setting appropriate limits is crucial.</p>"},{"location":"runtime/runconfig.en/#validation-rules","title":"Validation Rules","text":"<p>The <code>RunConfig</code> class validates its parameters to ensure proper agent operation. While Python ADK uses <code>Pydantic</code> for automatic type validation, Java ADK relies on its static typing and may include explicit checks in the RunConfig's construction. For the <code>max_llm_calls</code> parameter specifically:</p> <ol> <li> <p>Extremely large values (like <code>sys.maxsize</code> in Python or <code>Integer.MAX_VALUE</code> in Java) are typically disallowed to prevent issues.</p> </li> <li> <p>Values of zero or less will usually trigger a warning about unlimited LLM interactions.</p> </li> </ol>"},{"location":"runtime/runconfig.en/#examples","title":"Examples","text":""},{"location":"runtime/runconfig.en/#basic-runtime-configuration","title":"Basic runtime configuration","text":"PythonJava <pre><code>from google.genai.adk import RunConfig, StreamingMode\n\nconfig = RunConfig(\n    streaming_mode=StreamingMode.NONE,\n    max_llm_calls=100\n)\n</code></pre> <pre><code>import com.google.adk.agents.RunConfig;\nimport com.google.adk.agents.RunConfig.StreamingMode;\n\nRunConfig config = RunConfig.builder()\n        .setStreamingMode(StreamingMode.NONE)\n        .setMaxLlmCalls(100)\n        .build();\n</code></pre> <p>This configuration creates a non-streaming agent with a limit of 100 LLM calls, suitable for simple task-oriented agents where complete responses are preferable.</p>"},{"location":"runtime/runconfig.en/#enabling-streaming","title":"Enabling streaming","text":"PythonJava <pre><code>from google.genai.adk import RunConfig, StreamingMode\n\nconfig = RunConfig(\n    streaming_mode=StreamingMode.SSE,\n    max_llm_calls=200\n)\n</code></pre> <pre><code>import com.google.adk.agents.RunConfig;\nimport com.google.adk.agents.RunConfig.StreamingMode;\n\nRunConfig config = RunConfig.builder()\n    .setStreamingMode(StreamingMode.SSE)\n    .setMaxLlmCalls(200)\n    .build();\n</code></pre> <p>Using SSE streaming allows users to see responses as they're generated, providing a more responsive feel for chatbots and assistants.</p>"},{"location":"runtime/runconfig.en/#enabling-speech-support","title":"Enabling speech support","text":"PythonJava <pre><code>from google.genai.adk import RunConfig, StreamingMode\nfrom google.genai import types\n\nconfig = RunConfig(\n    speech_config=types.SpeechConfig(\n        language_code=\"en-US\",\n        voice_config=types.VoiceConfig(\n            prebuilt_voice_config=types.PrebuiltVoiceConfig(\n                voice_name=\"Kore\"\n            )\n        ),\n    ),\n    response_modalities=[\"AUDIO\", \"TEXT\"],\n    save_input_blobs_as_artifacts=True,\n    support_cfc=True,\n    streaming_mode=StreamingMode.SSE,\n    max_llm_calls=1000,\n)\n</code></pre> <pre><code>import com.google.adk.agents.RunConfig;\nimport com.google.adk.agents.RunConfig.StreamingMode;\nimport com.google.common.collect.ImmutableList;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Modality;\nimport com.google.genai.types.Part;\nimport com.google.genai.types.PrebuiltVoiceConfig;\nimport com.google.genai.types.SpeechConfig;\nimport com.google.genai.types.VoiceConfig;\n\nRunConfig runConfig =\n    RunConfig.builder()\n        .setStreamingMode(StreamingMode.SSE)\n        .setMaxLlmCalls(1000)\n        .setSaveInputBlobsAsArtifacts(true)\n        .setResponseModalities(ImmutableList.of(new Modality(\"AUDIO\"), new Modality(\"TEXT\")))\n        .setSpeechConfig(\n            SpeechConfig.builder()\n                .voiceConfig(\n                    VoiceConfig.builder()\n                        .prebuiltVoiceConfig(\n                            PrebuiltVoiceConfig.builder().voiceName(\"Kore\").build())\n                        .build())\n                .languageCode(\"en-US\")\n                .build())\n        .build();\n</code></pre> <p>This comprehensive example configures an agent with:</p> <ul> <li>Speech capabilities using the \"Kore\" voice (US English)</li> <li>Both audio and text output modalities</li> <li>Artifact saving for input blobs (useful for debugging)</li> <li>Experimental CFC support enabled (Python only)</li> <li>SSE streaming for responsive interaction</li> <li>A limit of 1000 LLM calls</li> </ul>"},{"location":"runtime/runconfig.en/#enabling-experimental-cfc-support","title":"Enabling Experimental CFC Support","text":"<pre><code>from google.genai.adk import RunConfig, StreamingMode\n\nconfig = RunConfig(\n    streaming_mode=StreamingMode.SSE,\n    support_cfc=True,\n    max_llm_calls=150\n)\n</code></pre> <p>Enabling Compositional Function Calling creates an agent that can dynamically execute functions based on model outputs, powerful for applications requiring complex workflows.</p>"},{"location":"runtime/runconfig/","title":"\u57f7\u884c\u968e\u6bb5\u7d44\u614b\uff08Runtime Configuration\uff09","text":"<p><code>RunConfig</code> \u5b9a\u7fa9\u4e86 Agent Development Kit (ADK) \u4e2d agent \u7684\u57f7\u884c\u968e\u6bb5\u884c\u70ba\u8207\u9078\u9805\u3002\u5b83\u63a7\u5236\u8a9e\u97f3\u8207\u4e32\u6d41\u8a2d\u5b9a\u3001\u51fd\u5f0f\u547c\u53eb\u3001\u7522\u7269\uff08artifact\uff09\u5132\u5b58\uff0c\u4ee5\u53ca\u5c0d\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb\u7684\u9650\u5236\u3002</p> <p>\u5728\u5efa\u7acb agent \u57f7\u884c\u6642\uff0c\u4f60\u53ef\u4ee5\u50b3\u5165 <code>RunConfig</code> \u4f86\u81ea\u8a02 agent \u5982\u4f55\u8207\u6a21\u578b\u4e92\u52d5\u3001\u8655\u7406\u97f3\u8a0a\uff0c\u4ee5\u53ca\u4e32\u6d41\u56de\u61c9\u3002\u9810\u8a2d\u60c5\u6cc1\u4e0b\uff0c\u672a\u555f\u7528\u4efb\u4f55\u4e32\u6d41\uff0c\u4e14\u8f38\u5165\u4e0d\u6703\u88ab\u4fdd\u7559\u70ba\u7522\u7269\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>RunConfig</code> \u4f86\u8986\u5beb\u9019\u4e9b\u9810\u8a2d\u503c\u3002</p>"},{"location":"runtime/runconfig/#_1","title":"\u985e\u5225\u5b9a\u7fa9","text":"<p><code>RunConfig</code> \u985e\u5225\u7528\u65bc\u4fdd\u5b58 agent \u57f7\u884c\u968e\u6bb5\u884c\u70ba\u7684\u7d44\u614b\u53c3\u6578\u3002</p> <ul> <li> <p>Python ADK \u4f7f\u7528 Pydantic \u9032\u884c\u6b64\u9a57\u8b49\u3002</p> </li> <li> <p>Java ADK \u901a\u5e38\u4f7f\u7528\u4e0d\u53ef\u8b8a\uff08immutable\uff09\u8cc7\u6599\u985e\u5225\u3002</p> </li> </ul> PythonJava <pre><code>class RunConfig(BaseModel):\n    \"\"\"Configs for runtime behavior of agents.\"\"\"\n\n    model_config = ConfigDict(\n        extra='forbid',\n    )\n\n    speech_config: Optional[types.SpeechConfig] = None\n    response_modalities: Optional[list[str]] = None\n    save_input_blobs_as_artifacts: bool = False\n    support_cfc: bool = False\n    streaming_mode: StreamingMode = StreamingMode.NONE\n    output_audio_transcription: Optional[types.AudioTranscriptionConfig] = None\n    max_llm_calls: int = 500\n</code></pre> <pre><code>public abstract class RunConfig {\n\n  public enum StreamingMode {\n    NONE,\n    SSE,\n    BIDI\n  }\n\n  public abstract @Nullable SpeechConfig speechConfig();\n\n  public abstract ImmutableList&lt;Modality&gt; responseModalities();\n\n  public abstract boolean saveInputBlobsAsArtifacts();\n\n  public abstract @Nullable AudioTranscriptionConfig outputAudioTranscription();\n\n  public abstract int maxLlmCalls();\n\n  // ...\n}\n</code></pre>"},{"location":"runtime/runconfig/#_2","title":"\u57f7\u884c\u6642\u53c3\u6578","text":"\u53c3\u6578 Python \u985e\u578b Java \u985e\u578b \u9810\u8a2d\u503c (Py / Java) \u8aaa\u660e <code>speech_config</code> <code>Optional[types.SpeechConfig]</code> <code>SpeechConfig</code>\uff08\u53ef\u900f\u904e <code>@Nullable</code> \u8a2d\u70ba null\uff09 <code>None</code> / <code>null</code> \u4f7f\u7528 <code>SpeechConfig</code> \u985e\u578b\u8a2d\u5b9a\u8a9e\u97f3\u5408\u6210\uff08\u8a9e\u97f3\u3001\u8a9e\u8a00\uff09\u3002 <code>response_modalities</code> <code>Optional[list[str]]</code> <code>ImmutableList&lt;Modality&gt;</code> <code>None</code> / \u7a7a <code>ImmutableList</code> \u6307\u5b9a\u6240\u9700\u7684\u8f38\u51fa\u6a21\u614b\u5217\u8868\uff08\u4f8b\u5982\uff0cPython\uff1a<code>[\"TEXT\", \"AUDIO\"]</code>\uff1bJava\uff1a\u4f7f\u7528\u7d50\u69cb\u5316\u7684 <code>Modality</code> \u7269\u4ef6\uff09\u3002 <code>save_input_blobs_as_artifacts</code> <code>bool</code> <code>boolean</code> <code>False</code> / <code>false</code> \u82e5\u70ba <code>true</code>\uff0c\u5247\u5c07\u8f38\u5165 blob\uff08\u5982\u4e0a\u50b3\u6a94\u6848\uff09\u5132\u5b58\u70ba\u57f7\u884c\u6642\u7522\u7269\uff0c\u4fbf\u65bc\u9664\u932f\uff0f\u7a3d\u6838\u3002 <code>streaming_mode</code> <code>StreamingMode</code> \u76ee\u524d\u5c1a\u672a\u652f\u63f4 <code>StreamingMode.NONE</code> / N/A \u8a2d\u5b9a\u4e32\u6d41\u884c\u70ba\uff1a<code>NONE</code>\uff08\u9810\u8a2d\uff09\u3001<code>SSE</code>\uff08Server Sent Events, SSE\uff09\u3001\u6216 <code>BIDI</code>\uff08\u96d9\u5411\u4e32\u6d41\uff09\u3002 <code>output_audio_transcription</code> <code>Optional[types.AudioTranscriptionConfig]</code> <code>AudioTranscriptionConfig</code>\uff08\u53ef\u900f\u904e <code>@Nullable</code> \u8a2d\u70ba null\uff09 <code>None</code> / <code>null</code> \u4f7f\u7528 <code>AudioTranscriptionConfig</code> \u985e\u578b\u8a2d\u5b9a\u7522\u751f\u8a9e\u97f3\u8f38\u51fa\u7684\u8f49\u9304\u3002 <code>max_llm_calls</code> <code>int</code> <code>int</code> <code>500</code> / <code>500</code> \u9650\u5236\u6bcf\u6b21\u57f7\u884c\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb\u7e3d\u6578\u3002<code>0</code> \u6216\u8ca0\u6578\u4ee3\u8868\u7121\u9650\u5236\uff08\u6703\u8b66\u544a\uff09\uff1b<code>sys.maxsize</code> \u5247\u6703\u62cb\u51fa <code>ValueError</code>\u3002 <code>support_cfc</code> <code>bool</code> \u76ee\u524d\u5c1a\u672a\u652f\u63f4 <code>False</code> / N/A Python\uff1a\u555f\u7528\u7d44\u5408\u5f0f\u51fd\u5f0f\u547c\u53eb\uff08Compositional Function Calling\uff09\u3002\u9700\u642d\u914d <code>streaming_mode=SSE</code> \u4e26\u4f7f\u7528 LIVE API\u3002\u5be6\u9a57\u6027\u529f\u80fd\u3002"},{"location":"runtime/runconfig/#speech_config","title":"<code>speech_config</code>","text":"<p>Note</p> <p><code>SpeechConfig</code> \u7684\u4ecb\u9762\u6216\u5b9a\u7fa9\u5728\u4efb\u4f55\u8a9e\u8a00\u4e2d\u90fd\u662f\u76f8\u540c\u7684\u3002</p> <p>\u91dd\u5c0d\u5177\u5099\u8a9e\u97f3\u529f\u80fd\u7684\u5373\u6642 agent \u7684\u8a9e\u97f3\u8a2d\u5b9a\u3002<code>SpeechConfig</code> \u985e\u5225\u5177\u6709\u4ee5\u4e0b\u7d50\u69cb\uff1a</p> <pre><code>class SpeechConfig(_common.BaseModel):\n    \"\"\"The speech generation configuration.\"\"\"\n\n    voice_config: Optional[VoiceConfig] = Field(\n        default=None,\n        description=\"\"\"The configuration for the speaker to use.\"\"\",\n    )\n    language_code: Optional[str] = Field(\n        default=None,\n        description=\"\"\"Language code (ISO 639. e.g. en-US) for the speech synthesization.\n        Only available for Live API.\"\"\",\n    )\n</code></pre> <p><code>voice_config</code> \u53c3\u6578\u6703\u4f7f\u7528 <code>VoiceConfig</code> \u985e\u5225\uff1a</p> <pre><code>class VoiceConfig(_common.BaseModel):\n    \"\"\"The configuration for the voice to use.\"\"\"\n\n    prebuilt_voice_config: Optional[PrebuiltVoiceConfig] = Field(\n        default=None,\n        description=\"\"\"The configuration for the speaker to use.\"\"\",\n    )\n</code></pre> <p><code>PrebuiltVoiceConfig</code> \u5177\u6709\u4ee5\u4e0b\u7d50\u69cb\uff1a</p> <pre><code>class PrebuiltVoiceConfig(_common.BaseModel):\n    \"\"\"The configuration for the prebuilt speaker to use.\"\"\"\n\n    voice_name: Optional[str] = Field(\n        default=None,\n        description=\"\"\"The name of the prebuilt voice to use.\"\"\",\n    )\n</code></pre> <p>\u9019\u4e9b\u5de2\u72c0\u7684\u8a2d\u5b9a\u985e\u5225\u5141\u8a31\u4f60\u6307\u5b9a\uff1a</p> <ul> <li><code>voice_config</code>\uff1a\u8981\u4f7f\u7528\u7684\u9810\u5efa\u8a9e\u97f3\u540d\u7a31\uff08\u65bc<code>PrebuiltVoiceConfig</code>\u4e2d\uff09</li> <li><code>language_code</code>\uff1a\u8a9e\u97f3\u5408\u6210\u6240\u7528\u7684 ISO 639 \u8a9e\u8a00\u4ee3\u78bc\uff08\u4f8b\u5982\uff1a\"en-US\"\uff09</li> </ul> <p>\u7576\u4f60\u5be6\u4f5c\u8a9e\u97f3\u529f\u80fd\u7684 agent \u6642\uff0c\u53ef\u4ee5\u900f\u904e\u9019\u4e9b\u53c3\u6578\u4f86\u63a7\u5236 agent \u8aaa\u8a71\u6642\u7684\u8a9e\u97f3\u8868\u73fe\u3002</p>"},{"location":"runtime/runconfig/#response_modalities","title":"<code>response_modalities</code>","text":"<p>\u5b9a\u7fa9 agent \u7684\u56de\u61c9\u8f38\u51fa\u6a21\u5f0f\u3002\u5982\u679c\u672a\u8a2d\u5b9a\uff0c\u9810\u8a2d\u70ba AUDIO\u3002\u56de\u61c9\u6a21\u5f0f\u6c7a\u5b9a agent \u5982\u4f55\u900f\u904e\u4e0d\u540c\u901a\u9053\uff08\u4f8b\u5982\u6587\u5b57\u3001\u8a9e\u97f3\uff09\u8207\u4f7f\u7528\u8005\u4e92\u52d5\u3002</p>"},{"location":"runtime/runconfig/#save_input_blobs_as_artifacts","title":"<code>save_input_blobs_as_artifacts</code>","text":"<p>\u555f\u7528\u5f8c\uff0c\u8f38\u5165\u7684 blob \u6703\u5728 agent \u57f7\u884c\u671f\u9593\u88ab\u5132\u5b58\u70ba artifact\u3002\u9019\u5c0d\u65bc\u9664\u932f\u8207\u7a3d\u6838\u975e\u5e38\u6709\u7528\uff0c\u8b93\u958b\u767c\u8005\u53ef\u4ee5\u6aa2\u8996 agent \u5be6\u969b\u6536\u5230\u7684\u539f\u59cb\u8cc7\u6599\u3002</p>"},{"location":"runtime/runconfig/#support_cfc","title":"<code>support_cfc</code>","text":"<p>\u555f\u7528\u5f8c\uff0c\u5c07\u652f\u63f4 Compositional Function Calling\uff08CFC\uff0c\u7d44\u5408\u5f0f\u51fd\u5f0f\u547c\u53eb\uff09\u3002\u50c5\u9069\u7528\u65bc\u4f7f\u7528 StreamingMode.SSE \u6642\u3002\u555f\u7528\u6642\uff0c\u50c5\u6703\u547c\u53eb LIVE API\uff0c\u56e0\u70ba\u53ea\u6709\u5b83\u652f\u63f4 CFC \u529f\u80fd\u3002</p> <p>Warning</p> <p><code>support_cfc</code> \u529f\u80fd\u70ba\u5be6\u9a57\u6027\u529f\u80fd\uff0c\u5176 API \u6216\u884c\u70ba\u5728\u672a\u4f86\u7248\u672c\u4e2d\u53ef\u80fd\u6703\u6709\u6240\u8b8a\u52d5\u3002</p>"},{"location":"runtime/runconfig/#streaming_mode","title":"<code>streaming_mode</code>","text":"<p>\u7528\u65bc\u8a2d\u5b9a agent \u7684\u4e32\u6d41\u884c\u70ba\u3002\u53ef\u7528\u7684\u503c\u6709\uff1a</p> <ul> <li><code>StreamingMode.NONE</code>\uff1a\u7121\u4e32\u6d41\uff1b\u56de\u61c9\u6703\u4ee5\u5b8c\u6574\u55ae\u4f4d\u4e00\u6b21\u50b3\u9001</li> <li><code>StreamingMode.SSE</code>\uff1aServer Sent Events (SSE) \u4e32\u6d41\uff1b\u4f3a\u670d\u5668\u5230\u7528\u6236\u7aef\u7684\u55ae\u5411\u4e32\u6d41</li> <li><code>StreamingMode.BIDI</code>\uff1a\u96d9\u5411\u4e32\u6d41\uff08bidirectional streaming\uff09\uff1b\u652f\u63f4\u96d9\u5411\u5373\u6642\u901a\u8a0a</li> </ul> <p>\u4e32\u6d41\u6a21\u5f0f\u6703\u5f71\u97ff\u6548\u80fd\u8207\u4f7f\u7528\u8005\u9ad4\u9a57\u3002SSE \u4e32\u6d41\u53ef\u8b93\u4f7f\u7528\u8005\u5728\u56de\u61c9\u7522\u751f\u904e\u7a0b\u4e2d\u5373\u6642\u770b\u5230\u90e8\u5206\u5167\u5bb9\uff0c\u800c\u96d9\u5411\u4e32\u6d41\u5247\u80fd\u5be6\u73fe\u5373\u6642\u4e92\u52d5\u9ad4\u9a57\u3002</p>"},{"location":"runtime/runconfig/#output_audio_transcription","title":"<code>output_audio_transcription</code>","text":"<p>\u91dd\u5c0d\u5177\u5099\u8a9e\u97f3\u529f\u80fd\u7684\u5373\u6642 agent\uff0c\u8a2d\u5b9a\u8a9e\u97f3\u56de\u61c9\u7684\u81ea\u52d5\u8f49\u9304\u3002\u555f\u7528\u5f8c\uff0c\u7cfb\u7d71\u6703\u81ea\u52d5\u5c07\u8a9e\u97f3\u56de\u61c9\u8f49\u70ba\u6587\u5b57\uff0c\u65b9\u4fbf\u7121\u969c\u7919\u5b58\u53d6\u3001\u7d00\u9304\u4fdd\u5b58\u53ca\u591a\u6a21\u614b\u61c9\u7528\u3002</p>"},{"location":"runtime/runconfig/#max_llm_calls","title":"<code>max_llm_calls</code>","text":"<p>\u8a2d\u5b9a\u55ae\u6b21 agent \u57f7\u884c\u6642\uff0c\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb\u7684\u7e3d\u6b21\u6578\u4e0a\u9650\u3002</p> <ul> <li>\u5927\u65bc 0 \u4e14\u5c0f\u65bc <code>sys.maxsize</code> \u7684\u503c\uff1a\u9650\u5236 LLM \u547c\u53eb\u6b21\u6578</li> <li>\u5c0f\u65bc\u6216\u7b49\u65bc 0 \u7684\u503c\uff1a\u4e0d\u9650\u5236 LLM \u547c\u53eb\u6b21\u6578\uff08\u4e0d\u5efa\u8b70\u65bc\u6b63\u5f0f\u74b0\u5883\u4f7f\u7528\uff09</li> </ul> <p>\u6b64\u53c3\u6578\u53ef\u9632\u6b62\u904e\u5ea6 API \u4f7f\u7528\u53ca\u6f5b\u5728\u7684\u7121\u9650\u57f7\u884c\u3002\u7531\u65bc LLM \u547c\u53eb\u901a\u5e38\u6703\u7522\u751f\u8cbb\u7528\u4e26\u6d88\u8017\u8cc7\u6e90\uff0c\u8a2d\u5b9a\u9069\u7576\u7684\u4e0a\u9650\u5341\u5206\u91cd\u8981\u3002</p>"},{"location":"runtime/runconfig/#_3","title":"\u9a57\u8b49\u898f\u5247","text":"<p><code>RunConfig</code> \u985e\u5225\u6703\u9a57\u8b49\u5176\u53c3\u6578\uff0c\u4ee5\u78ba\u4fdd agent \u6b63\u5e38\u904b\u4f5c\u3002Python Agent Development Kit (ADK) \u4f7f\u7528 <code>Pydantic</code> \u9032\u884c\u81ea\u52d5\u578b\u5225\u9a57\u8b49\uff0c\u800c Java Agent Development Kit (ADK) \u5247\u4f9d\u8cf4\u975c\u614b\u578b\u5225\uff0c\u4e26\u53ef\u80fd\u5728 RunConfig \u5efa\u69cb\u904e\u7a0b\u4e2d\u52a0\u5165\u660e\u78ba\u6aa2\u67e5\u3002 \u91dd\u5c0d <code>max_llm_calls</code> \u53c3\u6578\uff0c\u7279\u5225\u6ce8\u610f\uff1a</p> <ol> <li> <p>\u6975\u5927\u503c\uff08\u5982 Python \u7684 <code>sys.maxsize</code> \u6216 Java \u7684 <code>Integer.MAX_VALUE</code>\uff09\u901a\u5e38\u6703\u88ab\u7981\u6b62\uff0c\u4ee5\u907f\u514d\u554f\u984c\u767c\u751f\u3002</p> </li> <li> <p>\u82e5\u503c\u70ba\u96f6\u6216\u66f4\u5c0f\uff0c\u901a\u5e38\u6703\u51fa\u73fe\u8b66\u544a\uff0c\u63d0\u793a LLM \u4e92\u52d5\u6b21\u6578\u7121\u9650\u5236\u3002</p> </li> </ol>"},{"location":"runtime/runconfig/#_4","title":"\u7bc4\u4f8b","text":""},{"location":"runtime/runconfig/#_5","title":"\u57fa\u672c\u57f7\u884c\u968e\u6bb5\u8a2d\u5b9a","text":"PythonJava <pre><code>from google.genai.adk import RunConfig, StreamingMode\n\nconfig = RunConfig(\n    streaming_mode=StreamingMode.NONE,\n    max_llm_calls=100\n)\n</code></pre> <pre><code>import com.google.adk.agents.RunConfig;\nimport com.google.adk.agents.RunConfig.StreamingMode;\n\nRunConfig config = RunConfig.builder()\n        .setStreamingMode(StreamingMode.NONE)\n        .setMaxLlmCalls(100)\n        .build();\n</code></pre> <p>\u6b64\u8a2d\u5b9a\u6703\u5efa\u7acb\u4e00\u500b\u975e\u4e32\u6d41\uff08non-streaming\uff09agent\uff0c\u4e26\u9650\u5236\u6700\u591a 100 \u6b21\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb\uff0c\u9069\u5408\u7528\u65bc\u9700\u8981\u5b8c\u6574\u56de\u61c9\u7684\u7c21\u55ae\u4efb\u52d9\u5c0e\u5411\u578b agent\u3002</p>"},{"location":"runtime/runconfig/#_6","title":"\u555f\u7528\u4e32\u6d41","text":"PythonJava <pre><code>from google.genai.adk import RunConfig, StreamingMode\n\nconfig = RunConfig(\n    streaming_mode=StreamingMode.SSE,\n    max_llm_calls=200\n)\n</code></pre> <pre><code>import com.google.adk.agents.RunConfig;\nimport com.google.adk.agents.RunConfig.StreamingMode;\n\nRunConfig config = RunConfig.builder()\n    .setStreamingMode(StreamingMode.SSE)\n    .setMaxLlmCalls(200)\n    .build();\n</code></pre> <p>\u4f7f\u7528 Server Sent Events (SSE) \u4e32\u6d41\u53ef\u4ee5\u8b93\u4f7f\u7528\u8005\u5373\u6642\u770b\u5230\u56de\u61c9\u7684\u7522\u751f\u904e\u7a0b\uff0c\u70ba\u804a\u5929\u6a5f\u5668\u4eba\u8207\u52a9\u7406\u5e36\u4f86\u66f4\u5373\u6642\u3001\u6d41\u66a2\u7684\u4e92\u52d5\u9ad4\u9a57\u3002</p>"},{"location":"runtime/runconfig/#_7","title":"\u555f\u7528\u8a9e\u97f3\u652f\u63f4","text":"PythonJava <pre><code>from google.genai.adk import RunConfig, StreamingMode\nfrom google.genai import types\n\nconfig = RunConfig(\n    speech_config=types.SpeechConfig(\n        language_code=\"en-US\",\n        voice_config=types.VoiceConfig(\n            prebuilt_voice_config=types.PrebuiltVoiceConfig(\n                voice_name=\"Kore\"\n            )\n        ),\n    ),\n    response_modalities=[\"AUDIO\", \"TEXT\"],\n    save_input_blobs_as_artifacts=True,\n    support_cfc=True,\n    streaming_mode=StreamingMode.SSE,\n    max_llm_calls=1000,\n)\n</code></pre> <pre><code>import com.google.adk.agents.RunConfig;\nimport com.google.adk.agents.RunConfig.StreamingMode;\nimport com.google.common.collect.ImmutableList;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Modality;\nimport com.google.genai.types.Part;\nimport com.google.genai.types.PrebuiltVoiceConfig;\nimport com.google.genai.types.SpeechConfig;\nimport com.google.genai.types.VoiceConfig;\n\nRunConfig runConfig =\n    RunConfig.builder()\n        .setStreamingMode(StreamingMode.SSE)\n        .setMaxLlmCalls(1000)\n        .setSaveInputBlobsAsArtifacts(true)\n        .setResponseModalities(ImmutableList.of(new Modality(\"AUDIO\"), new Modality(\"TEXT\")))\n        .setSpeechConfig(\n            SpeechConfig.builder()\n                .voiceConfig(\n                    VoiceConfig.builder()\n                        .prebuiltVoiceConfig(\n                            PrebuiltVoiceConfig.builder().voiceName(\"Kore\").build())\n                        .build())\n                .languageCode(\"en-US\")\n                .build())\n        .build();\n</code></pre> <p>\u9019\u500b\u5b8c\u6574\u7bc4\u4f8b\u70ba agent \u8a2d\u5b9a\u4e86\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ul> <li>\u4f7f\u7528\u300cKore\u300d\u8a9e\u97f3\uff08\u7f8e\u5f0f\u82f1\u8a9e\uff09\u7684\u8a9e\u97f3\u529f\u80fd</li> <li>\u540c\u6642\u652f\u63f4\u8a9e\u97f3\u8207\u6587\u5b57\u7684\u8f38\u51fa\u6a21\u5f0f</li> <li>\u8f38\u5165 blob \u7684 artifact \u5132\u5b58\uff08\u6709\u52a9\u65bc\u9664\u932f\uff09</li> <li>\u555f\u7528\u5be6\u9a57\u6027 CFC \u652f\u63f4 \uff08\u50c5\u9650 Python\uff09</li> <li>\u4f7f\u7528 SSE \u4f3a\u670d\u5668\u7aef\u4e32\u6d41\uff08Server Sent Events, SSE\uff09\u4ee5\u63d0\u5347\u4e92\u52d5\u5373\u6642\u6027</li> <li>\u9650\u5236\u6700\u591a 1000 \u6b21\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb</li> </ul>"},{"location":"runtime/runconfig/#cfc","title":"\u555f\u7528\u5be6\u9a57\u6027 CFC \u652f\u63f4","text":"<pre><code>from google.genai.adk import RunConfig, StreamingMode\n\nconfig = RunConfig(\n    streaming_mode=StreamingMode.SSE,\n    support_cfc=True,\n    max_llm_calls=150\n)\n</code></pre> <p>\u555f\u7528 Compositional Function Calling\uff08\u7d44\u5408\u5f0f\u51fd\u5f0f\u547c\u53eb\uff09\u6703\u5efa\u7acb\u4e00\u500b agent\uff0c\u8a72 agent \u80fd\u6839\u64da\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7684\u8f38\u51fa\u52d5\u614b\u57f7\u884c\u51fd\u5f0f\uff0c\u9019\u5c0d\u65bc\u9700\u8981\u8907\u96dc\u5de5\u4f5c\u6d41\u7a0b\u7684\u61c9\u7528\u7a0b\u5f0f\u4f86\u8aaa\u975e\u5e38\u5f37\u5927\u3002</p>"},{"location":"safety/","title":"AI Agents \u7684\u5b89\u5168\u6027\u8207\u8cc7\u5b89","text":""},{"location":"safety/#_1","title":"\u6982\u89bd","text":"<p>\u96a8\u8457 AI agents \u80fd\u529b\u65e5\u76ca\u63d0\u5347\uff0c\u78ba\u4fdd\u5176\u904b\u4f5c\u5b89\u5168\u3001\u8cc7\u5b89\u7121\u865e\u4e26\u7b26\u5408\u60a8\u7684\u54c1\u724c\u50f9\u503c\u89c0\u8b8a\u5f97\u81f3\u95dc\u91cd\u8981\u3002\u672a\u53d7\u63a7\u7684 agent \u53ef\u80fd\u5e36\u4f86\u98a8\u96aa\uff0c\u5305\u62ec\u57f7\u884c\u4e0d\u7b26\u9810\u671f\u6216\u6709\u5bb3\u7684\u884c\u70ba\uff08\u5982\u8cc7\u6599\u5916\u6d29\uff09\u3001\u7522\u751f\u4e0d\u7576\u5167\u5bb9\uff0c\u9032\u800c\u5f71\u97ff\u54c1\u724c\u8072\u8b7d\u3002\u98a8\u96aa\u4f86\u6e90\u5305\u62ec\u6307\u4ee4\u4e0d\u660e\u78ba\u3001\u6a21\u578b\u5e7b\u89ba\u3001\u60e1\u610f\u7528\u6236\u7684 jailbreak \u8207 prompt injection\uff0c\u4ee5\u53ca\u900f\u904e\u5de5\u5177\u9593\u63a5\u6ce8\u5165\u7684 prompt\u3002</p> <p>Google Cloud Vertex AI \u63a1\u7528\u591a\u5c64\u9632\u8b77\u6a5f\u5236\u4f86\u964d\u4f4e\u9019\u4e9b\u98a8\u96aa\uff0c\u5354\u52a9\u60a8\u6253\u9020\u5f37\u5927\u4e14\u503c\u5f97\u4fe1\u8cf4\u7684 agent\u3002\u5b83\u63d0\u4f9b\u591a\u7a2e\u6a5f\u5236\u4f86\u5efa\u7acb\u56b4\u683c\u7684\u908a\u754c\uff0c\u78ba\u4fdd agent \u53ea\u57f7\u884c\u60a8\u660e\u78ba\u5141\u8a31\u7684\u884c\u70ba\uff1a</p> <ol> <li>\u8eab\u4efd\u8207\u6388\u6b0a\uff08Identity and Authorization\uff09\uff1a\u900f\u904e\u8a2d\u5b9a agent \u8207\u7528\u6236\u7684\u6388\u6b0a\uff0c\u63a7\u5236 agent \u4ee5\u8ab0\u7684\u8eab\u4efd\u57f7\u884c\u884c\u70ba\u3002</li> <li> <p>\u8f38\u5165\u8207\u8f38\u51fa\u9632\u8b77\u6b04\uff08Guardrails\uff09\uff1a\u7cbe\u78ba\u63a7\u7ba1\u60a8\u7684\u6a21\u578b\u8207\u5de5\u5177\u547c\u53eb (tool calls)\u3002</p> <ul> <li>\u5de5\u5177\u5167\u9632\u8b77\u6b04\uff08In-Tool Guardrails\uff09\uff1a \u4ee5\u9632\u79a6\u6027\u601d\u7dad\u8a2d\u8a08\u5de5\u5177\uff0c\u5229\u7528\u958b\u767c\u8005\u8a2d\u5b9a\u7684 Tool Context \u5f37\u5236\u57f7\u884c\u653f\u7b56\uff08\u4f8b\u5982\u50c5\u5141\u8a31\u67e5\u8a62\u7279\u5b9a\u8cc7\u6599\u8868\uff09\u3002</li> <li>\u5167\u5efa Gemini \u5b89\u5168\u529f\u80fd\uff1a \u82e5\u4f7f\u7528 Gemini \u6a21\u578b\uff0c\u53ef\u5229\u7528\u5167\u5bb9\u904e\u6ffe\u5668\u963b\u64cb\u6709\u5bb3\u8f38\u51fa\uff0c\u4e26\u900f\u904e\u7cfb\u7d71\u6307\u4ee4\u5f15\u5c0e\u6a21\u578b\u884c\u70ba\u8207\u5b89\u5168\u6e96\u5247\u3002</li> <li>Callbacks \u8207\u63d2\u4ef6\uff08Plugins\uff09\uff1a \u5728\u57f7\u884c\u524d\u5f8c\u9a57\u8b49\u6a21\u578b\u8207\u5de5\u5177\u547c\u53eb (tool calls)\uff0c\u6839\u64da agent \u72c0\u614b\u6216\u5916\u90e8\u653f\u7b56\u6aa2\u67e5\u53c3\u6578\u3002</li> <li>\u4ee5 Gemini \u4f5c\u70ba\u5b89\u5168\u9632\u8b77\u6b04\uff1a \u900f\u904e Callbacks \u914d\u7f6e\u4e00\u500b\u5ec9\u50f9\u4e14\u5feb\u901f\u7684\u6a21\u578b\uff08\u5982 Gemini Flash Lite\uff09\u4f5c\u70ba\u984d\u5916\u7684\u5b89\u5168\u5c64\uff0c\u7be9\u9078\u8f38\u5165\u8207\u8f38\u51fa\u3002</li> </ul> </li> <li> <p>\u6c99\u76d2\u5316\u7a0b\u5f0f\u78bc\u57f7\u884c\uff1a\u5c07\u6a21\u578b\u7522\u751f\u7684\u7a0b\u5f0f\u78bc\u57f7\u884c\u65bc\u6c99\u76d2\u74b0\u5883\uff0c\u9632\u6b62\u8cc7\u5b89\u554f\u984c\u767c\u751f\u3002</p> </li> <li>\u8a55\u4f30\u8207\u8ffd\u8e64\uff08Evaluation and Tracing\uff09\uff1a\u5229\u7528\u8a55\u4f30\u5de5\u5177\u6aa2\u67e5 agent \u6700\u7d42\u8f38\u51fa\u7684\u54c1\u8cea\u3001\u76f8\u95dc\u6027\u8207\u6b63\u78ba\u6027\u3002\u900f\u904e\u8ffd\u8e64\u529f\u80fd\u638c\u63e1 agent \u884c\u70ba\uff0c\u5206\u6790 agent \u89e3\u6c7a\u554f\u984c\u7684\u6b65\u9a5f\uff0c\u5305\u62ec\u5176\u5de5\u5177\u9078\u64c7\u3001\u7b56\u7565\u8207\u6548\u7387\u3002</li> <li>\u7db2\u8def\u63a7\u7ba1\u8207 VPC-SC\uff1a\u5c07 agent \u6d3b\u52d5\u9650\u5236\u65bc\u5b89\u5168\u908a\u754c\uff08\u5982 VPC Service Controls\uff09\uff0c\u9632\u6b62\u8cc7\u6599\u5916\u6d29\u4e26\u964d\u4f4e\u6f5b\u5728\u5f71\u97ff\u7bc4\u570d\u3002</li> </ol>"},{"location":"safety/#_2","title":"\u5b89\u5168\u6027\u8207\u8cc7\u5b89\u98a8\u96aa","text":"<p>\u5728\u5be6\u65bd\u5b89\u5168\u63aa\u65bd\u524d\uff0c\u8acb\u91dd\u5c0d\u60a8\u7684 agent \u80fd\u529b\u3001\u9818\u57df\u53ca\u90e8\u7f72\u60c5\u5883\u9032\u884c\u5168\u9762\u7684\u98a8\u96aa\u8a55\u4f30\u3002</p> <p>\u98a8\u96aa \u4f86\u6e90 \u5305\u62ec\uff1a</p> <ul> <li>agent \u6307\u4ee4\u4e0d\u660e\u78ba</li> <li>\u60e1\u610f\u7528\u6236\u9032\u884c prompt injection \u8207 jailbreak \u5617\u8a66</li> <li>\u900f\u904e\u5de5\u5177\u4f7f\u7528\u9593\u63a5\u9032\u884c prompt injection</li> </ul> <p>\u98a8\u96aa\u985e\u578b \u5305\u62ec\uff1a</p> <ul> <li>\u76ee\u6a19\u504f\u96e2\u8207\u76ee\u6a19\u8150\u5316\uff08Misalignment &amp; goal corruption\uff09<ul> <li>\u8ffd\u6c42\u975e\u9810\u671f\u6216\u4ee3\u7406\u76ee\u6a19\uff0c\u5c0e\u81f4\u6709\u5bb3\u7d50\u679c\uff08\u5982\u300c\u734e\u52f5\u99ed\u5ba2\u300dreward hacking\uff09</li> <li>\u8aa4\u89e3\u8907\u96dc\u6216\u6a21\u7cca\u7684\u6307\u4ee4</li> </ul> </li> <li>\u6709\u5bb3\u5167\u5bb9\u7522\u751f\uff0c\u5305\u542b\u54c1\u724c\u5b89\u5168<ul> <li>\u7522\u751f\u6709\u6bd2\u3001\u4ec7\u6068\u3001\u504f\u898b\u3001\u8272\u60c5\u3001\u6b67\u8996\u6216\u975e\u6cd5\u5167\u5bb9</li> <li>\u54c1\u724c\u5b89\u5168\u98a8\u96aa\uff0c\u4f8b\u5982\u4f7f\u7528\u9055\u53cd\u54c1\u724c\u50f9\u503c\u89c0\u7684\u8a9e\u8a00\u6216\u96e2\u984c\u5c0d\u8a71</li> </ul> </li> <li>\u4e0d\u5b89\u5168\u7684\u884c\u70ba<ul> <li>\u57f7\u884c\u640d\u5bb3\u7cfb\u7d71\u7684\u6307\u4ee4</li> <li>\u9032\u884c\u672a\u6388\u6b0a\u7684\u8cfc\u8cb7\u6216\u91d1\u878d\u4ea4\u6613</li> <li>\u6d29\u6f0f\u654f\u611f\u500b\u8cc7\uff08PII\uff09</li> <li>\u8cc7\u6599\u5916\u6d29</li> </ul> </li> </ul>"},{"location":"safety/#_3","title":"\u6700\u4f73\u5be6\u8e10","text":""},{"location":"safety/#identity-and-authorization","title":"\u8eab\u4efd\u8207\u6388\u6b0a\uff08Identity and Authorization\uff09","text":"<p>\u5f9e\u8cc7\u5b89\u89d2\u5ea6\u4f86\u770b\uff0c\u5de5\u5177 \u5728\u5916\u90e8\u7cfb\u7d71\u57f7\u884c\u884c\u70ba\u6642\u6240\u4f7f\u7528\u7684\u8eab\u4efd\uff0c\u662f\u8a2d\u8a08\u4e0a\u7684\u95dc\u9375\u8003\u91cf\u3002\u5373\u4f7f\u540c\u4e00\u500b agent \u5167\u7684\u4e0d\u540c\u5de5\u5177\u53ef\u4ee5\u63a1\u7528\u4e0d\u540c\u7b56\u7565\uff0c\u8a0e\u8ad6 agent \u8a2d\u5b9a\u6642\u4ecd\u9700\u8b39\u614e\u3002</p>"},{"location":"safety/#agent-auth","title":"Agent-Auth","text":"<p>\u5de5\u5177\u4ee5 agent \u81ea\u8eab\u7684\u8eab\u4efd\uff08\u4f8b\u5982\u670d\u52d9\u5e33\u6236\uff09\u8207\u5916\u90e8\u7cfb\u7d71\u4e92\u52d5\u3002 \u5fc5\u9808\u5728\u5916\u90e8\u7cfb\u7d71\u7684\u5b58\u53d6\u653f\u7b56\u4e2d\u660e\u78ba\u6388\u6b0a\u8a72 agent \u8eab\u4efd\uff0c\u4f8b\u5982\u5c07 agent \u7684\u670d\u52d9\u5e33\u6236\u52a0\u5165\u8cc7\u6599\u5eab\u7684 IAM \u653f\u7b56\u4ee5\u53d6\u5f97\u8b80\u53d6\u6b0a\u9650\u3002\u9019\u985e\u653f\u7b56\u80fd\u9650\u5236 agent \u50c5\u57f7\u884c\u958b\u767c\u8005\u9810\u671f\u7684\u884c\u70ba\uff1a\u4f8b\u5982\u50c5\u7d66\u4e88\u8cc7\u6e90\u7684\u552f\u8b80\u6b0a\u9650\uff0c\u7121\u8ad6\u6a21\u578b\u5982\u4f55\u6c7a\u7b56\uff0c\u5de5\u5177\u90fd\u7121\u6cd5\u57f7\u884c\u5beb\u5165\u64cd\u4f5c\u3002</p> <p>\u9019\u7a2e\u65b9\u5f0f\u5be6\u4f5c\u7c21\u55ae\uff0c\u9069\u5408\u6240\u6709\u7528\u6236\u5b58\u53d6\u5c64\u7d1a\u76f8\u540c\u7684 agent\u3002 \u82e5\u4e26\u975e\u6240\u6709\u7528\u6236\u90fd\u64c1\u6709\u76f8\u540c\u5b58\u53d6\u5c64\u7d1a\uff0c\u50c5\u63a1\u7528\u6b64\u65b9\u5f0f\u4e26\u4e0d\u8db3\u4ee5\u4fdd\u8b77\uff0c\u9700\u642d\u914d\u4e0b\u8ff0\u5176\u4ed6\u6280\u8853\u3002\u5728\u5de5\u5177\u5be6\u4f5c\u6642\uff0c\u8acb\u78ba\u4fdd\u7522\u751f\u65e5\u8a8c\u4ee5\u4fbf\u8ffd\u8e64\u884c\u70ba\u6b78\u5c6c\uff0c\u56e0\u70ba\u6240\u6709 agent \u884c\u70ba\u90fd\u6703\u4ee5 agent \u8eab\u4efd\u51fa\u73fe\u3002</p>"},{"location":"safety/#user-auth","title":"User Auth","text":"<p>\u5de5\u5177\u4ee5\u300c\u63a7\u5236\u7528\u6236\u300d\u7684\u8eab\u4efd\uff08\u4f8b\u5982\u5728\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\u524d\u7aef\u4e92\u52d5\u7684\u4eba\u985e\uff09\u8207\u5916\u90e8\u7cfb\u7d71\u4e92\u52d5\u3002\u5728 Agent Development Kit (ADK) \u4e2d\uff0c\u9019\u901a\u5e38\u900f\u904e OAuth \u5be6\u4f5c\uff1aagent \u8207\u524d\u7aef\u4e92\u52d5\u4ee5\u53d6\u5f97 OAuth token\uff0c\u7136\u5f8c\u5de5\u5177\u5728\u57f7\u884c\u5916\u90e8\u884c\u70ba\u6642\u4f7f\u7528\u8a72 token\uff1b\u82e5\u63a7\u5236\u7528\u6236\u672c\u8eab\u6709\u6b0a\u57f7\u884c\u8a72\u884c\u70ba\uff0c\u5916\u90e8\u7cfb\u7d71\u5c31\u6703\u6388\u6b0a\u3002</p> <p>User auth \u7684\u512a\u9ede\u5728\u65bc agent \u53ea\u6703\u57f7\u884c\u7528\u6236\u672c\u8eab\u53ef\u57f7\u884c\u7684\u884c\u70ba\uff0c\u5927\u5e45\u964d\u4f4e\u60e1\u610f\u7528\u6236\u6feb\u7528 agent \u5b58\u53d6\u984d\u5916\u8cc7\u6599\u7684\u98a8\u96aa\u3002\u7136\u800c\uff0c\u591a\u6578\u5e38\u898b\u7684\u59d4\u6d3e\u5be6\u4f5c\uff08\u5982 OAuth scope\uff09\u50c5\u80fd\u59d4\u6d3e\u56fa\u5b9a\u6b0a\u9650\u7bc4\u570d\uff0c\u9019\u4e9b\u7bc4\u570d\u901a\u5e38\u6bd4 agent \u5be6\u969b\u9700\u6c42\u66f4\u5bec\uff0c\u56e0\u6b64\u4ecd\u9700\u642d\u914d\u4e0b\u8ff0\u6280\u8853\u9032\u4e00\u6b65\u9650\u5236 agent \u884c\u70ba\u3002</p>"},{"location":"safety/#guardrails-to-screen-inputs-and-outputs","title":"\u8f38\u5165\u8207\u8f38\u51fa\u9632\u8b77\u6b04\uff08Guardrails to screen inputs and outputs\uff09","text":""},{"location":"safety/#in-tool-guardrails","title":"\u5de5\u5177\u5167\u9632\u8b77\u6b04\uff08In-tool guardrails\uff09","text":"<p>\u5de5\u5177\u8a2d\u8a08\u6642\u53ef\u7d0d\u5165\u8cc7\u5b89\u8003\u91cf\uff1a\u6211\u5011\u80fd\u6253\u9020\u50c5\u66b4\u9732\u671f\u671b\u6a21\u578b\u57f7\u884c\u884c\u70ba\u7684\u5de5\u5177\uff0c\u5176\u4ed6\u884c\u70ba\u4e00\u5f8b\u4e0d\u958b\u653e\u3002\u900f\u904e\u9650\u5236 agent \u53ef\u7528\u7684\u884c\u70ba\u7bc4\u570d\uff0c\u53ef\u6c7a\u5b9a\u6027\u5730\u6d88\u9664\u6211\u5011\u4e0d\u5e0c\u671b agent \u57f7\u884c\u7684\u7279\u5b9a\u985e\u578b\u884c\u70ba\u3002</p> <p>\u5de5\u5177\u5167\u9632\u8b77\u6b04\u662f\u4e00\u7a2e\u8a2d\u8a08\u901a\u7528\u4e14\u53ef\u91cd\u8907\u4f7f\u7528\u5de5\u5177\u7684\u65b9\u5f0f\uff0c\u9019\u4e9b\u5de5\u5177\u66b4\u9732\u6c7a\u5b9a\u6027\u63a7\u5236\u9805\uff0c\u8b93\u958b\u767c\u8005\u80fd\u91dd\u5c0d\u6bcf\u6b21\u5de5\u5177\u5be6\u4f8b\u8a2d\u5b9a\u9650\u5236\u3002</p> <p>\u6b64\u65b9\u6cd5\u4ef0\u8cf4\u5de5\u5177\u6703\u63a5\u6536\u5169\u7a2e\u8f38\u5165\uff1a\u7531\u6a21\u578b\u8a2d\u5b9a\u7684\u53c3\u6578\uff08arguments\uff09\uff0c\u4ee5\u53ca\u7531\u958b\u767c\u8005\u53ef\u6c7a\u5b9a\u6027\u8a2d\u5b9a\u7684 <code>Tool Context</code>\u3002\u6211\u5011\u53ef\u4ee5\u4f9d\u8cf4\u9019\u4e9b\u6c7a\u5b9a\u6027\u8cc7\u8a0a\u4f86\u9a57\u8b49\u6a21\u578b\u884c\u70ba\u662f\u5426\u5982\u9810\u671f\u3002</p> <p>\u4f8b\u5982\uff0c\u4e00\u500b\u67e5\u8a62\u5de5\u5177\u53ef\u8a2d\u8a08\u6210\u5f9e Tool Context \u8b80\u53d6\u653f\u7b56\u3002</p> PythonJava <pre><code># Conceptual example: Setting policy data intended for tool context\n# In a real ADK app, this might be set in InvocationContext.session.state\n# or passed during tool initialization, then retrieved via ToolContext.\n\npolicy = {} # Assuming policy is a dictionary\npolicy['select_only'] = True\npolicy['tables'] = ['mytable1', 'mytable2']\n\n# Conceptual: Storing policy where the tool can access it via ToolContext later.\n# This specific line might look different in practice.\n# For example, storing in session state:\ninvocation_context.session.state[\"query_tool_policy\"] = policy\n\n# Or maybe passing during tool init:\nquery_tool = QueryTool(policy=policy)\n# For this example, we'll assume it gets stored somewhere accessible.\n</code></pre> <pre><code>// Conceptual example: Setting policy data intended for tool context\n// In a real ADK app, this might be set in InvocationContext.session.state\n// or passed during tool initialization, then retrieved via ToolContext.\n\npolicy = new HashMap&lt;String, Object&gt;(); // Assuming policy is a Map\npolicy.put(\"select_only\", true);\npolicy.put(\"tables\", new ArrayList&lt;&gt;(\"mytable1\", \"mytable2\"));\n\n// Conceptual: Storing policy where the tool can access it via ToolContext later.\n// This specific line might look different in practice.\n// For example, storing in session state:\ninvocationContext.session().state().put(\"query_tool_policy\", policy);\n\n// Or maybe passing during tool init:\nquery_tool = QueryTool(policy);\n// For this example, we'll assume it gets stored somewhere accessible.\n</code></pre> <p>\u5728\u5de5\u5177\u57f7\u884c\u671f\u9593\uff0c<code>Tool Context</code> \u6703\u88ab\u50b3\u905e\u7d66\u8a72\u5de5\u5177\uff1a</p> PythonJava <pre><code>def query(query: str, tool_context: ToolContext) -&gt; str | dict:\n  # Assume 'policy' is retrieved from context, e.g., via session state:\n  # policy = tool_context.invocation_context.session.state.get('query_tool_policy', {})\n\n  # --- Placeholder Policy Enforcement ---\n  policy = tool_context.invocation_context.session.state.get('query_tool_policy', {}) # Example retrieval\n  actual_tables = explainQuery(query) # Hypothetical function call\n\n  if not set(actual_tables).issubset(set(policy.get('tables', []))):\n    # Return an error message for the model\n    allowed = \", \".join(policy.get('tables', ['(None defined)']))\n    return f\"Error: Query targets unauthorized tables. Allowed: {allowed}\"\n\n  if policy.get('select_only', False):\n       if not query.strip().upper().startswith(\"SELECT\"):\n           return \"Error: Policy restricts queries to SELECT statements only.\"\n  # --- End Policy Enforcement ---\n\n  print(f\"Executing validated query (hypothetical): {query}\")\n  return {\"status\": \"success\", \"results\": [...]} # Example successful return\n</code></pre> <pre><code>import com.google.adk.tools.ToolContext;\nimport java.util.*;\n\nclass ToolContextQuery {\n\n  public Object query(String query, ToolContext toolContext) {\n\n    // Assume 'policy' is retrieved from context, e.g., via session state:\n    Map&lt;String, Object&gt; queryToolPolicy =\n        toolContext.invocationContext.session().state().getOrDefault(\"query_tool_policy\", null);\n    List&lt;String&gt; actualTables = explainQuery(query);\n\n    // --- Placeholder Policy Enforcement ---\n    if (!queryToolPolicy.get(\"tables\").containsAll(actualTables)) {\n      List&lt;String&gt; allowedPolicyTables =\n          (List&lt;String&gt;) queryToolPolicy.getOrDefault(\"tables\", new ArrayList&lt;String&gt;());\n\n      String allowedTablesString =\n          allowedPolicyTables.isEmpty() ? \"(None defined)\" : String.join(\", \", allowedPolicyTables);\n\n      return String.format(\n          \"Error: Query targets unauthorized tables. Allowed: %s\", allowedTablesString);\n    }\n\n    if (!queryToolPolicy.get(\"select_only\")) {\n      if (!query.trim().toUpperCase().startswith(\"SELECT\")) {\n        return \"Error: Policy restricts queries to SELECT statements only.\";\n      }\n    }\n    // --- End Policy Enforcement ---\n\n    System.out.printf(\"Executing validated query (hypothetical) %s:\", query);\n    Map&lt;String, Object&gt; successResult = new HashMap&lt;&gt;();\n    successResult.put(\"status\", \"success\");\n    successResult.put(\"results\", Arrays.asList(\"result_item1\", \"result_item2\"));\n    return successResult;\n  }\n}\n</code></pre>"},{"location":"safety/#gemini","title":"\u5167\u5efa Gemini \u5b89\u5168\u529f\u80fd","text":"<p>Gemini \u6a21\u578b\u5167\u5efa\u591a\u9805\u5b89\u5168\u6a5f\u5236\uff0c\u53ef\u7528\u65bc\u63d0\u5347\u5167\u5bb9\u8207\u54c1\u724c\u5b89\u5168\u6027\u3002</p> <ul> <li>\u5167\u5bb9\u5b89\u5168\u904e\u6ffe\u5668\uff1a\u5167\u5bb9\u904e\u6ffe\u5668 \u53ef\u5354\u52a9\u963b\u64cb\u6709\u5bb3\u5167\u5bb9\u7684\u8f38\u51fa\u3002\u9019\u4e9b\u904e\u6ffe\u5668\u7368\u7acb\u65bc Gemini \u6a21\u578b\u904b\u4f5c\uff0c\u4f5c\u70ba\u591a\u5c64\u9632\u79a6\u7684\u4e00\u74b0\uff0c\u7528\u4ee5\u9632\u7bc4\u8a66\u5716\u7834\u89e3\u6a21\u578b\u7684\u5a01\u8105\u884c\u70ba\u8005\u3002\u90e8\u7f72\u65bc Vertex AI \u7684 Gemini \u6a21\u578b\u4f7f\u7528\u5169\u7a2e\u985e\u578b\u7684\u5167\u5bb9\u904e\u6ffe\u5668\uff1a  </li> <li>\u4e0d\u53ef\u8a2d\u5b9a\u7684\u5b89\u5168\u904e\u6ffe\u5668 \u6703\u81ea\u52d5\u963b\u64cb\u5305\u542b\u9055\u7981\u5167\u5bb9\u7684\u8f38\u51fa\uff0c\u4f8b\u5982\u5152\u7ae5\u6027\u8650\u5f85\u6750\u6599\uff08CSAM\uff09\u53ca\u500b\u4eba\u53ef\u8b58\u5225\u8cc7\u8a0a\uff08PII\uff09\u3002  </li> <li>\u53ef\u8a2d\u5b9a\u7684\u5167\u5bb9\u904e\u6ffe\u5668 \u5141\u8a31\u4f60\u6839\u64da\u56db\u7a2e\u50b7\u5bb3\u985e\u5225\uff08\u4ec7\u6068\u8a00\u8ad6\u3001\u9a37\u64fe\u3001\u9732\u9aa8\u6027\u5167\u5bb9\u8207\u5371\u96aa\u5167\u5bb9\uff09\u7684\u6a5f\u7387\u8207\u56b4\u91cd\u7a0b\u5ea6\u5206\u6578\uff0c\u81ea\u884c\u5b9a\u7fa9\u963b\u64cb\u9580\u6abb\u3002\u9019\u4e9b\u904e\u6ffe\u5668\u9810\u8a2d\u70ba\u95dc\u9589\uff0c\u4f46\u4f60\u53ef\u4ee5\u4f9d\u9700\u6c42\u9032\u884c\u8a2d\u5b9a\u3002  </li> <li>\u5b89\u5168\u6027\u7cfb\u7d71\u6307\u4ee4\uff1a\u7cfb\u7d71\u6307\u4ee4 \u53ef\u91dd\u5c0d Vertex AI \u4e0a\u7684 Gemini \u6a21\u578b\uff0c\u76f4\u63a5\u6307\u5f15\u6a21\u578b\u5982\u4f55\u884c\u70ba\uff0c\u4ee5\u53ca\u61c9\u7522\u751f\u4f55\u7a2e\u985e\u578b\u7684\u5167\u5bb9\u3002\u900f\u904e\u660e\u78ba\u7684\u6307\u4ee4\uff0c\u4f60\u53ef\u4ee5\u4e3b\u52d5\u5f15\u5c0e\u6a21\u578b\u907f\u514d\u7522\u751f\u4e0d\u7b26\u5408\u7d44\u7e54\u9700\u6c42\u7684\u4e0d\u826f\u5167\u5bb9\u3002\u4f60\u53ef\u4ee5\u64b0\u5beb\u7cfb\u7d71\u6307\u4ee4\uff0c\u8a02\u5b9a\u5167\u5bb9\u5b89\u5168\u898f\u7bc4\uff0c\u4f8b\u5982\u7981\u6b62\u8207\u654f\u611f\u4e3b\u984c\u3001\u514d\u8cac\u8072\u660e\u8a9e\u53e5\uff0c\u4ee5\u53ca\u54c1\u724c\u5b89\u5168\u6307\u5f15\uff0c\u78ba\u4fdd\u6a21\u578b\u8f38\u51fa\u7b26\u5408\u4f60\u54c1\u724c\u7684\u8a9e\u8abf\u3001\u50f9\u503c\u89c0\u8207\u76ee\u6a19\u53d7\u773e\u3002</li> </ul> <p>\u96d6\u7136\u9019\u4e9b\u63aa\u65bd\u5c0d\u5167\u5bb9\u5b89\u5168\u6709\u5f37\u529b\u9632\u8b77\uff0c\u4f46\u4f60\u4ecd\u9700\u984d\u5916\u6aa2\u67e5\uff0c\u4ee5\u964d\u4f4e agent \u4e0d\u7b26\u9810\u671f\u884c\u70ba\u3001\u4e0d\u5b89\u5168\u64cd\u4f5c\u53ca\u54c1\u724c\u5b89\u5168\u98a8\u96aa\u3002</p>"},{"location":"safety/#callbacks","title":"Callbacks \u8207\u63d2\u4ef6\u7684\u5b89\u5168\u9632\u8b77","text":"<p>Callbacks \u63d0\u4f9b\u4e00\u7a2e\u7c21\u55ae\u3001\u91dd\u5c0d agent \u7684\u65b9\u6cd5\uff0c\u53ef\u70ba\u5de5\u5177\u8207\u6a21\u578b\u7684 I/O \u589e\u52a0\u524d\u7f6e\u9a57\u8b49\uff1b\u800c\u63d2\u4ef6\u5247\u80fd\u5728\u591a\u500b agent \u9593\u5be6\u73fe\u901a\u7528\u5b89\u5168\u653f\u7b56\u7684\u53ef\u91cd\u7528\u89e3\u6c7a\u65b9\u6848\u3002</p> <p>\u7576\u7121\u6cd5\u76f4\u63a5\u4fee\u6539\u5de5\u5177\u4ee5\u52a0\u5165\u9632\u8b77\u63aa\u65bd\u6642\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>Before Tool Callback</code> \u51fd\u5f0f\u4f86\u70ba\u547c\u53eb\u65b0\u589e\u524d\u7f6e\u9a57\u8b49\u3002Callback \u53ef\u5b58\u53d6 agent \u7684\u72c0\u614b\u3001\u6240\u8acb\u6c42\u7684\u5de5\u5177\u8207\u53c3\u6578\u3002\u9019\u7a2e\u65b9\u5f0f\u975e\u5e38\u901a\u7528\uff0c\u751a\u81f3\u53ef\u4ee5\u7528\u4f86\u5efa\u7acb\u53ef\u91cd\u8907\u4f7f\u7528\u7684\u5de5\u5177\u653f\u7b56\u5171\u7528\u7a0b\u5f0f\u5eab\u3002\u7136\u800c\uff0c\u82e5\u5f37\u5236\u57f7\u884c\u9632\u8b77\u63aa\u65bd\u6240\u9700\u7684\u8cc7\u8a0a\u672a\u76f4\u63a5\u986f\u793a\u65bc\u53c3\u6578\u4e2d\uff0c\u5247\u4e0d\u4e00\u5b9a\u9069\u7528\u65bc\u6240\u6709\u5de5\u5177\u3002</p> PythonJava <pre><code># Hypothetical callback function\ndef validate_tool_params(\n    callback_context: CallbackContext, # Correct context type\n    tool: BaseTool,\n    args: Dict[str, Any],\n    tool_context: ToolContext\n    ) -&gt; Optional[Dict]: # Correct return type for before_tool_callback\n\n  print(f\"Callback triggered for tool: {tool.name}, args: {args}\")\n\n  # Example validation: Check if a required user ID from state matches an arg\n  expected_user_id = callback_context.state.get(\"session_user_id\")\n  actual_user_id_in_args = args.get(\"user_id_param\") # Assuming tool takes 'user_id_param'\n\n  if actual_user_id_in_args != expected_user_id:\n      print(\"Validation Failed: User ID mismatch!\")\n      # Return a dictionary to prevent tool execution and provide feedback\n      return {\"error\": f\"Tool call blocked: User ID mismatch.\"}\n\n  # Return None to allow the tool call to proceed if validation passes\n  print(\"Callback validation passed.\")\n  return None\n\n# Hypothetical Agent setup\nroot_agent = LlmAgent( # Use specific agent type\n    model='gemini-2.0-flash',\n    name='root_agent',\n    instruction=\"...\",\n    before_tool_callback=validate_tool_params, # Assign the callback\n    tools = [\n      # ... list of tool functions or Tool instances ...\n      # e.g., query_tool_instance\n    ]\n)\n</code></pre> <pre><code>// Hypothetical callback function\npublic Optional&lt;Map&lt;String, Object&gt;&gt; validateToolParams(\n  CallbackContext callbackContext,\n  Tool baseTool,\n  Map&lt;String, Object&gt; input,\n  ToolContext toolContext) {\n\nSystem.out.printf(\"Callback triggered for tool: %s, Args: %s\", baseTool.name(), input);\n\n// Example validation: Check if a required user ID from state matches an input parameter\nObject expectedUserId = callbackContext.state().get(\"session_user_id\");\nObject actualUserIdInput = input.get(\"user_id_param\"); // Assuming tool takes 'user_id_param'\n\nif (!actualUserIdInput.equals(expectedUserId)) {\n  System.out.println(\"Validation Failed: User ID mismatch!\");\n  // Return to prevent tool execution and provide feedback\n  return Optional.of(Map.of(\"error\", \"Tool call blocked: User ID mismatch.\"));\n}\n\n// Return to allow the tool call to proceed if validation passes\nSystem.out.println(\"Callback validation passed.\");\nreturn Optional.empty();\n}\n\n// Hypothetical Agent setup\npublic void runAgent() {\nLlmAgent agent =\n    LlmAgent.builder()\n        .model(\"gemini-2.0-flash\")\n        .name(\"AgentWithBeforeToolCallback\")\n        .instruction(\"...\")\n        .beforeToolCallback(this::validateToolParams) // Assign the callback\n        .tools(anyToolToUse) // Define the tool to be used\n        .build();\n}\n</code></pre> <p>\u7136\u800c\uff0c\u7576\u4f60\u8981\u70ba agent \u61c9\u7528\u7a0b\u5f0f\u52a0\u5165\u5b89\u5168\u9632\u8b77\u63aa\u65bd\u6642\uff0c\u5efa\u8b70\u4f7f\u7528\u63d2\u4ef6\uff08Plugin\uff09\u4f86\u5be6\u4f5c\u4e0d\u7279\u5b9a\u65bc\u55ae\u4e00 agent \u7684\u653f\u7b56\u3002\u63d2\u4ef6\u8a2d\u8a08\u70ba\u81ea\u7d66\u81ea\u8db3\u4e14\u6a21\u7d44\u5316\uff0c\u8b93\u4f60\u53ef\u4ee5\u91dd\u5c0d\u7279\u5b9a\u5b89\u5168\u653f\u7b56\u5efa\u7acb\u7368\u7acb\u7684\u63d2\u4ef6\uff0c\u4e26\u5728 Runner \u5c64\u7d1a\u5168\u57df\u5957\u7528\u3002\u9019\u8868\u793a\u5b89\u5168\u63d2\u4ef6\u53ea\u9700\u8a2d\u5b9a\u4e00\u6b21\uff0c\u5373\u53ef\u5957\u7528\u5230\u6240\u6709\u4f7f\u7528\u8a72 Runner \u7684 agent\uff0c\u78ba\u4fdd\u6574\u500b\u61c9\u7528\u7a0b\u5f0f\u7684\u4e00\u81f4\u5b89\u5168\u9632\u8b77\uff0c\u7121\u9700\u91cd\u8907\u64b0\u5beb\u7a0b\u5f0f\u78bc\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e9b\u7bc4\u4f8b\uff1a</p> <ul> <li> <p>Gemini as a Judge Plugin\uff1a\u6b64\u63d2\u4ef6\u4f7f\u7528 Gemini Flash Lite \u4f86\u8a55\u4f30\u4f7f\u7528\u8005\u8f38\u5165\u3001\u5de5\u5177\u8f38\u5165\u8207\u8f38\u51fa\uff0c\u4ee5\u53ca agent \u7684\u56de\u61c9\uff0c\u6aa2\u67e5\u5176\u9069\u7576\u6027\u3001\u63d0\u793a\u8a5e\u6ce8\u5165\uff08prompt injection\uff09\u8207\u8d8a\u7344\uff08jailbreak\uff09\u5075\u6e2c\u3002\u8a72\u63d2\u4ef6\u5c07 Gemini \u914d\u7f6e\u70ba\u5b89\u5168\u904e\u6ffe\u5668\uff0c\u4ee5\u964d\u4f4e\u5167\u5bb9\u5b89\u5168\u3001\u54c1\u724c\u5b89\u5168\u53ca agent \u884c\u70ba\u504f\u96e2\u7684\u98a8\u96aa\u3002\u63d2\u4ef6\u6703\u5c07\u4f7f\u7528\u8005\u8f38\u5165\u3001\u5de5\u5177\u8f38\u5165\u8207\u8f38\u51fa\u3001\u6a21\u578b\u8f38\u51fa\u50b3\u905e\u7d66 Gemini Flash Lite\uff0c\u7531\u5176\u5224\u65b7\u50b3\u7d66 agent \u7684\u8f38\u5165\u662f\u5426\u5b89\u5168\u3002\u5982\u679c Gemini \u5224\u65b7\u8f38\u5165\u4e0d\u5b89\u5168\uff0cagent \u6703\u56de\u50b3\u9810\u8a2d\u56de\u61c9\uff1a\u300c\u5f88\u62b1\u6b49\uff0c\u6211\u7121\u6cd5\u5354\u52a9\u9019\u500b\u554f\u984c\u3002\u9084\u6709\u5176\u4ed6\u6211\u53ef\u4ee5\u5e6b\u5fd9\u7684\u55ce\uff1f\u300d</p> </li> <li> <p>Model Armor Plugin\uff1a\u9019\u500b\u63d2\u4ef6\u6703\u5728 agent \u57f7\u884c\u7684\u7279\u5b9a\u968e\u6bb5\u67e5\u8a62 model armor API\uff0c\u4ee5\u6aa2\u67e5\u6f5b\u5728\u7684\u5167\u5bb9\u5b89\u5168\u9055\u898f\u3002\u8207 Gemini as a Judge \u63d2\u4ef6\u985e\u4f3c\uff0c\u82e5 Model Armor \u5075\u6e2c\u5230\u6709\u5bb3\u5167\u5bb9\uff0c\u5247\u6703\u56de\u50b3\u9810\u8a2d\u56de\u61c9\u7d66\u4f7f\u7528\u8005\u3002</p> </li> <li> <p>PII Redaction Plugin\uff1a\u9019\u662f\u4e00\u500b\u5c08\u70ba Before Tool Callback \u8a2d\u8a08\u7684\u63d2\u4ef6\uff0c\u5c08\u9580\u7528\u65bc\u5728\u8cc7\u6599\u88ab\u5de5\u5177\u8655\u7406\u6216\u50b3\u9001\u5230\u5916\u90e8\u670d\u52d9\u524d\uff0c\u5148\u5c07\u500b\u4eba\u53ef\u8b58\u5225\u8cc7\u8a0a\uff08PII\uff09\u906e\u853d\u3002</p> </li> </ul>"},{"location":"safety/#sandboxed-code-execution","title":"\u6c99\u7bb1\u5316\u7a0b\u5f0f\u78bc\u57f7\u884c\uff08Sandboxed Code Execution\uff09","text":"<p>\u7a0b\u5f0f\u78bc\u57f7\u884c\u662f\u4e00\u9805\u5177\u6709\u984d\u5916\u5b89\u5168\u8003\u91cf\u7684\u7279\u6b8a\u5de5\u5177\uff1a\u5fc5\u9808\u4f7f\u7528\u6c99\u7bb1\uff08sandboxing\uff09\u4f86\u9632\u6b62\u6a21\u578b\u7522\u751f\u7684\u7a0b\u5f0f\u78bc\u5371\u53ca\u672c\u5730\u74b0\u5883\uff0c\u907f\u514d\u6f5b\u5728\u7684\u5b89\u5168\u554f\u984c\u3002</p> <p>Google \u8207 Agent Development Kit (ADK) \u63d0\u4f9b\u591a\u7a2e\u5b89\u5168\u57f7\u884c\u7a0b\u5f0f\u78bc\u7684\u9078\u9805\u3002Vertex Gemini Enterprise API \u7a0b\u5f0f\u78bc\u57f7\u884c\u529f\u80fd \u8b93 agent \u80fd\u5920\u555f\u7528 <code>tool_execution</code> \u5de5\u5177\uff0c\u5728\u4f3a\u670d\u5668\u7aef\u5229\u7528\u6c99\u7bb1\u5316\u7684\u7a0b\u5f0f\u78bc\u57f7\u884c\u3002\u82e5\u9700\u9032\u884c\u8cc7\u6599\u5206\u6790\u7684\u7a0b\u5f0f\u78bc\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 ADK \u5167\u5efa\u7684 Code Executor \u5de5\u5177\u4f86\u547c\u53eb Vertex Code Interpreter Extension\u3002</p> <p>\u5982\u679c\u4e0a\u8ff0\u9078\u9805\u90fd\u7121\u6cd5\u6eff\u8db3\u4f60\u7684\u9700\u6c42\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5229\u7528 ADK \u63d0\u4f9b\u7684\u57fa\u790e\u5143\u4ef6\u81ea\u884c\u5efa\u69cb\u7a0b\u5f0f\u78bc\u57f7\u884c\u5668\u3002\u6211\u5011\u5efa\u8b70\u5efa\u7acb\u5177\u5099\u5bc6\u9589\u6027\uff08hermetic\uff09\u7684\u57f7\u884c\u74b0\u5883\uff1a\u4e0d\u5141\u8a31\u7db2\u8def\u9023\u7dda\u8207 API \u547c\u53eb\uff0c\u4ee5\u907f\u514d\u8cc7\u6599\u5916\u6d29\uff1b\u4e26\u4e14\u5728\u6bcf\u6b21\u57f7\u884c\u5f8c\u5fb9\u5e95\u6e05\u9664\u8cc7\u6599\uff0c\u907f\u514d\u8de8\u4f7f\u7528\u8005\u8cc7\u6599\u5916\u6d29\u7684\u7591\u616e\u3002</p>"},{"location":"safety/#evaluations","title":"\u8a55\u4f30\uff08Evaluations\uff09","text":"<p>\u8acb\u53c3\u95b1 Evaluate Agents\u3002</p>"},{"location":"safety/#vpc-sc","title":"VPC-SC \u908a\u754c\u8207\u7db2\u8def\u7ba1\u63a7","text":"<p>\u5982\u679c\u4f60\u5728 VPC-SC \u908a\u754c\u5167\u57f7\u884c agent\uff0c\u9019\u5c07\u78ba\u4fdd\u6240\u6709 API \u547c\u53eb\u50c5\u64cd\u4f5c\u908a\u754c\u5167\u7684\u8cc7\u6e90\uff0c\u964d\u4f4e\u8cc7\u6599\u5916\u6d29\u7684\u98a8\u96aa\u3002</p> <p>\u7136\u800c\uff0c\u8eab\u4efd\u8207\u908a\u754c\u50c5\u80fd\u5c0d agent \u884c\u70ba\u63d0\u4f9b\u7c97\u7565\u7684\u63a7\u7ba1\u3002\u5de5\u5177\u4f7f\u7528\u9632\u8b77\u63aa\u65bd\uff08tool-use guardrails\uff09\u53ef\u5f4c\u88dc\u9019\u4e9b\u9650\u5236\uff0c\u8b93 agent \u958b\u767c\u8005\u80fd\u66f4\u7d30\u7dfb\u5730\u63a7\u5236\u5141\u8a31\u54ea\u4e9b\u884c\u70ba\u3002</p>"},{"location":"safety/#_4","title":"\u5176\u4ed6\u5b89\u5168\u98a8\u96aa","text":""},{"location":"safety/#ui","title":"\u5728 UI \u4e2d\u52d9\u5fc5\u8df3\u812b\u6a21\u578b\u7522\u751f\u7684\u5167\u5bb9","text":"<p>\u7576 agent \u8f38\u51fa\u5167\u5bb9\u5728\u700f\u89bd\u5668\u4e2d\u986f\u793a\u6642\u5fc5\u9808\u7279\u5225\u5c0f\u5fc3\uff1a\u5982\u679c HTML \u6216 JS \u5167\u5bb9\u5728 UI \u4e2d\u672a\u6b63\u78ba\u8df3\u812b\uff0c\u6a21\u578b\u56de\u50b3\u7684\u6587\u5b57\u53ef\u80fd\u6703\u88ab\u57f7\u884c\uff0c\u5c0e\u81f4\u8cc7\u6599\u5916\u6d29\u3002\u4f8b\u5982\uff0c\u9593\u63a5\u63d0\u793a\u8a5e\u6ce8\u5165\uff08indirect prompt injection\uff09\u53ef\u80fd\u8a98\u4f7f\u6a21\u578b\u63d2\u5165 img \u6a19\u7c64\uff0c\u8b93\u700f\u89bd\u5668\u5c07 session \u5167\u5bb9\u50b3\u9001\u5230\u7b2c\u4e09\u65b9\u7db2\u7ad9\uff1b\u6216\u662f\u69cb\u9020 URL\uff0c\u82e5\u88ab\u9ede\u64ca\u5247\u5c07\u8cc7\u6599\u9001\u5f80\u5916\u90e8\u7db2\u7ad9\u3002\u6b63\u78ba\u8df3\u812b\u9019\u985e\u5167\u5bb9\uff0c\u5fc5\u9808\u78ba\u4fdd\u6a21\u578b\u7522\u751f\u7684\u6587\u5b57\u4e0d\u6703\u88ab\u700f\u89bd\u5668\u89e3\u8b80\u70ba\u7a0b\u5f0f\u78bc\u3002</p>"},{"location":"safety/index.en/","title":"Safety and Security for AI Agents","text":""},{"location":"safety/index.en/#overview","title":"Overview","text":"<p>As AI agents grow in capability, ensuring they operate safely, securely, and align with your brand values is paramount. Uncontrolled agents can pose risks, including executing misaligned or harmful actions, such as data exfiltration, and generating inappropriate content that can impact your brand\u2019s reputation. Sources of risk include vague instructions, model hallucination, jailbreaks and prompt injections from adversarial users, and indirect prompt injections via tool use.</p> <p>Google Cloud Vertex AI provides a multi-layered approach to mitigate these risks, enabling you to build powerful and trustworthy agents. It offers several mechanisms to establish strict boundaries, ensuring agents only perform actions you've explicitly allowed:</p> <ol> <li>Identity and Authorization: Control who the agent acts as by defining agent and user auth.</li> <li> <p>Guardrails to screen inputs and outputs: Control your model and tool calls precisely.</p> <ul> <li>In-Tool Guardrails: Design tools defensively, using developer-set tool context to enforce policies (e.g., allowing queries only on specific tables).  </li> <li>Built-in Gemini Safety Features: If using Gemini models, benefit from content filters to block harmful outputs and system Instructions to guide the model's behavior and safety guidelines  </li> <li>Callbacks and Plugins: Validate model and tool calls before or after execution, checking parameters against agent state or external policies.</li> <li>Using Gemini as a safety guardrail: Implement an additional safety layer using a cheap and fast model (like Gemini Flash Lite) configured via callbacks  to screen inputs and outputs.</li> </ul> </li> <li> <p>Sandboxed code execution: Prevent model-generated code to cause security issues by sandboxing the environment  </p> </li> <li>Evaluation and tracing: Use evaluation tools to assess the quality, relevance, and correctness of the agent's final output. Use tracing to gain visibility into agent actions to analyze the steps an agent takes to reach a solution, including its choice of tools, strategies, and the efficiency of its approach.</li> <li>Network Controls and VPC-SC: Confine agent activity within secure perimeters (like VPC Service Controls) to prevent data exfiltration and limit the potential impact radius.</li> </ol>"},{"location":"safety/index.en/#safety-and-security-risks","title":"Safety and Security Risks","text":"<p>Before implementing safety measures, perform a thorough risk assessment specific to your agent's capabilities, domain, and deployment context.</p> <p>Sources of risk include:</p> <ul> <li>Ambiguous agent instructions</li> <li>Prompt injection and jailbreak attempts from adversarial users  </li> <li>Indirect prompt injections via tool use</li> </ul> <p>Risk categories include:</p> <ul> <li>Misalignment &amp; goal corruption <ul> <li>Pursuing unintended or proxy goals that lead to harmful outcomes (\"reward hacking\")  </li> <li>Misinterpreting complex or ambiguous instructions  </li> </ul> </li> <li>Harmful content generation, including brand safety<ul> <li>Generating toxic, hateful, biased, sexually explicit, discriminatory, or illegal content  </li> <li>Brand safety risks such as Using language that goes against the brand\u2019s values or off-topic conversations  </li> </ul> </li> <li>Unsafe actions <ul> <li>Executing commands that damage systems</li> <li>Making unauthorized purchases or financial transactions.  </li> <li>Leaking sensitive personal data (PII)</li> <li>Data exfiltration</li> </ul> </li> </ul>"},{"location":"safety/index.en/#best-practices","title":"Best practices","text":""},{"location":"safety/index.en/#identity-and-authorization","title":"Identity and Authorization","text":"<p>The identity that a tool uses to perform actions on external systems is a crucial design consideration from a security perspective. Different tools in the same agent can be configured with different strategies, so care is needed when talking about the agent's configurations.</p>"},{"location":"safety/index.en/#agent-auth","title":"Agent-Auth","text":"<p>The tool interacts with external systems using the agent's own identity (e.g., a service account). The agent identity must be explicitly authorized in the external system access policies, like adding an agent's service account to a database's IAM policy for read access. Such policies constrain the agent in only performing actions that the developer intended as possible: by giving read-only permissions to a resource, no matter what the model decides, the tool will be prohibited from performing write actions.</p> <p>This approach is simple to implement, and it is appropriate for agents where all users share the same level of access. If not all users have the same level of access, such an approach alone doesn't provide enough protection and must be complemented with other techniques below. In tool implementation, ensure that logs are created to maintain attribution of actions to users, as all agents' actions will appear as coming from the agent.</p>"},{"location":"safety/index.en/#user-auth","title":"User Auth","text":"<p>The tool interacts with an external system using the identity of the \"controlling user\" (e.g., the human interacting with the frontend in a web application). In ADK, this is typically implemented using OAuth: the agent interacts with the frontend to acquire a OAuth token, and then the tool uses the token when performing external actions: the external system authorizes the action if the controlling user is authorized to perform it on its own.</p> <p>User auth has the advantage that agents only perform actions that the user could have performed themselves. This greatly reduces the risk that a malicious user could abuse the agent to obtain access to additional data. However, most common implementations of delegation have a fixed set permissions to delegate (i.e., OAuth scopes). Often, such scopes are broader than the access that the agent actually requires, and the techniques below are required to further constrain agent actions.</p>"},{"location":"safety/index.en/#guardrails-to-screen-inputs-and-outputs","title":"Guardrails to screen inputs and outputs","text":""},{"location":"safety/index.en/#in-tool-guardrails","title":"In-tool guardrails","text":"<p>Tools can be designed with security in mind: we can create tools that expose the actions we want the model to take and nothing else. By limiting the range of actions we provide to the agents, we can deterministically eliminate classes of rogue actions that we never want the agent to take.</p> <p>In-tool guardrails is an approach to create common and re-usable tools that expose deterministic controls that can be used by developers to set limits on each tool instantiation.</p> <p>This approach relies on the fact that tools receive two types of input: arguments,  which are set by the model, and <code>Tool Context</code>, which can be set deterministically by the agent developer. We can rely on the deterministically set information to validate that the model is behaving as-expected.</p> <p>For example, a query tool can be designed to expect a policy to be read from the Tool Context.</p> PythonJava <pre><code># Conceptual example: Setting policy data intended for tool context\n# In a real ADK app, this might be set in InvocationContext.session.state\n# or passed during tool initialization, then retrieved via ToolContext.\n\npolicy = {} # Assuming policy is a dictionary\npolicy['select_only'] = True\npolicy['tables'] = ['mytable1', 'mytable2']\n\n# Conceptual: Storing policy where the tool can access it via ToolContext later.\n# This specific line might look different in practice.\n# For example, storing in session state:\ninvocation_context.session.state[\"query_tool_policy\"] = policy\n\n# Or maybe passing during tool init:\nquery_tool = QueryTool(policy=policy)\n# For this example, we'll assume it gets stored somewhere accessible.\n</code></pre> <pre><code>// Conceptual example: Setting policy data intended for tool context\n// In a real ADK app, this might be set in InvocationContext.session.state\n// or passed during tool initialization, then retrieved via ToolContext.\n\npolicy = new HashMap&lt;String, Object&gt;(); // Assuming policy is a Map\npolicy.put(\"select_only\", true);\npolicy.put(\"tables\", new ArrayList&lt;&gt;(\"mytable1\", \"mytable2\"));\n\n// Conceptual: Storing policy where the tool can access it via ToolContext later.\n// This specific line might look different in practice.\n// For example, storing in session state:\ninvocationContext.session().state().put(\"query_tool_policy\", policy);\n\n// Or maybe passing during tool init:\nquery_tool = QueryTool(policy);\n// For this example, we'll assume it gets stored somewhere accessible.\n</code></pre> <p>During the tool execution, <code>Tool Context</code> will be passed to the tool:</p> PythonJava <pre><code>def query(query: str, tool_context: ToolContext) -&gt; str | dict:\n  # Assume 'policy' is retrieved from context, e.g., via session state:\n  # policy = tool_context.invocation_context.session.state.get('query_tool_policy', {})\n\n  # --- Placeholder Policy Enforcement ---\n  policy = tool_context.invocation_context.session.state.get('query_tool_policy', {}) # Example retrieval\n  actual_tables = explainQuery(query) # Hypothetical function call\n\n  if not set(actual_tables).issubset(set(policy.get('tables', []))):\n    # Return an error message for the model\n    allowed = \", \".join(policy.get('tables', ['(None defined)']))\n    return f\"Error: Query targets unauthorized tables. Allowed: {allowed}\"\n\n  if policy.get('select_only', False):\n       if not query.strip().upper().startswith(\"SELECT\"):\n           return \"Error: Policy restricts queries to SELECT statements only.\"\n  # --- End Policy Enforcement ---\n\n  print(f\"Executing validated query (hypothetical): {query}\")\n  return {\"status\": \"success\", \"results\": [...]} # Example successful return\n</code></pre> <pre><code>import com.google.adk.tools.ToolContext;\nimport java.util.*;\n\nclass ToolContextQuery {\n\n  public Object query(String query, ToolContext toolContext) {\n\n    // Assume 'policy' is retrieved from context, e.g., via session state:\n    Map&lt;String, Object&gt; queryToolPolicy =\n        toolContext.invocationContext.session().state().getOrDefault(\"query_tool_policy\", null);\n    List&lt;String&gt; actualTables = explainQuery(query);\n\n    // --- Placeholder Policy Enforcement ---\n    if (!queryToolPolicy.get(\"tables\").containsAll(actualTables)) {\n      List&lt;String&gt; allowedPolicyTables =\n          (List&lt;String&gt;) queryToolPolicy.getOrDefault(\"tables\", new ArrayList&lt;String&gt;());\n\n      String allowedTablesString =\n          allowedPolicyTables.isEmpty() ? \"(None defined)\" : String.join(\", \", allowedPolicyTables);\n\n      return String.format(\n          \"Error: Query targets unauthorized tables. Allowed: %s\", allowedTablesString);\n    }\n\n    if (!queryToolPolicy.get(\"select_only\")) {\n      if (!query.trim().toUpperCase().startswith(\"SELECT\")) {\n        return \"Error: Policy restricts queries to SELECT statements only.\";\n      }\n    }\n    // --- End Policy Enforcement ---\n\n    System.out.printf(\"Executing validated query (hypothetical) %s:\", query);\n    Map&lt;String, Object&gt; successResult = new HashMap&lt;&gt;();\n    successResult.put(\"status\", \"success\");\n    successResult.put(\"results\", Arrays.asList(\"result_item1\", \"result_item2\"));\n    return successResult;\n  }\n}\n</code></pre>"},{"location":"safety/index.en/#built-in-gemini-safety-features","title":"Built-in Gemini Safety Features","text":"<p>Gemini models come with in-built safety mechanisms that can be leveraged to improve content and brand safety.</p> <ul> <li>Content safety filters:  Content filters can help block the output of harmful content. They function independently from Gemini models as part of a layered defense against threat actors who attempt to jailbreak the model. Gemini models on Vertex AI use two types of content filters:  </li> <li>Non-configurable safety filters automatically block outputs containing prohibited content, such as child sexual abuse material (CSAM) and personally identifiable information (PII).  </li> <li>Configurable content filters allow you to define blocking thresholds in four harm categories (hate speech, harassment, sexually explicit, and dangerous content,) based on probability and severity scores. These filters are default off but you can configure them according to your needs.  </li> <li>System instructions for safety: System instructions for Gemini models in Vertex AI provide direct guidance to the model on how to behave and what type of content to generate. By providing specific instructions, you can proactively steer the model away from generating undesirable content to meet your organization\u2019s unique needs. You can craft system instructions to define content safety guidelines, such as prohibited and sensitive topics, and disclaimer language, as well as brand safety guidelines to ensure the model's outputs align with your brand's voice, tone, values, and target audience.</li> </ul> <p>While these measures are robust against content safety, you need additional checks to reduce agent misalignment, unsafe actions, and brand safety risks.</p>"},{"location":"safety/index.en/#callbacks-and-plugins-for-security-guardrails","title":"Callbacks and Plugins for Security Guardrails","text":"<p>Callbacks provide a simple, agent-specific method for adding pre-validation to tool and model I/O, whereas plugins offer a reusable solution for implementing general security policies across multiple agents.</p> <p>When modifications to the tools to add guardrails aren't possible, the <code>Before Tool Callback</code> function can be used to add pre-validation of calls. The callback has access to the agent's state, the requested tool and parameters. This approach is very general and can even be created to create a common library of re-usable tool policies. However, it might not be applicable for all tools if the information to enforce the guardrails isn't directly visible in the parameters.</p> PythonJava <pre><code># Hypothetical callback function\ndef validate_tool_params(\n    callback_context: CallbackContext, # Correct context type\n    tool: BaseTool,\n    args: Dict[str, Any],\n    tool_context: ToolContext\n    ) -&gt; Optional[Dict]: # Correct return type for before_tool_callback\n\n  print(f\"Callback triggered for tool: {tool.name}, args: {args}\")\n\n  # Example validation: Check if a required user ID from state matches an arg\n  expected_user_id = callback_context.state.get(\"session_user_id\")\n  actual_user_id_in_args = args.get(\"user_id_param\") # Assuming tool takes 'user_id_param'\n\n  if actual_user_id_in_args != expected_user_id:\n      print(\"Validation Failed: User ID mismatch!\")\n      # Return a dictionary to prevent tool execution and provide feedback\n      return {\"error\": f\"Tool call blocked: User ID mismatch.\"}\n\n  # Return None to allow the tool call to proceed if validation passes\n  print(\"Callback validation passed.\")\n  return None\n\n# Hypothetical Agent setup\nroot_agent = LlmAgent( # Use specific agent type\n    model='gemini-2.0-flash',\n    name='root_agent',\n    instruction=\"...\",\n    before_tool_callback=validate_tool_params, # Assign the callback\n    tools = [\n      # ... list of tool functions or Tool instances ...\n      # e.g., query_tool_instance\n    ]\n)\n</code></pre> <pre><code>// Hypothetical callback function\npublic Optional&lt;Map&lt;String, Object&gt;&gt; validateToolParams(\n  CallbackContext callbackContext,\n  Tool baseTool,\n  Map&lt;String, Object&gt; input,\n  ToolContext toolContext) {\n\nSystem.out.printf(\"Callback triggered for tool: %s, Args: %s\", baseTool.name(), input);\n\n// Example validation: Check if a required user ID from state matches an input parameter\nObject expectedUserId = callbackContext.state().get(\"session_user_id\");\nObject actualUserIdInput = input.get(\"user_id_param\"); // Assuming tool takes 'user_id_param'\n\nif (!actualUserIdInput.equals(expectedUserId)) {\n  System.out.println(\"Validation Failed: User ID mismatch!\");\n  // Return to prevent tool execution and provide feedback\n  return Optional.of(Map.of(\"error\", \"Tool call blocked: User ID mismatch.\"));\n}\n\n// Return to allow the tool call to proceed if validation passes\nSystem.out.println(\"Callback validation passed.\");\nreturn Optional.empty();\n}\n\n// Hypothetical Agent setup\npublic void runAgent() {\nLlmAgent agent =\n    LlmAgent.builder()\n        .model(\"gemini-2.0-flash\")\n        .name(\"AgentWithBeforeToolCallback\")\n        .instruction(\"...\")\n        .beforeToolCallback(this::validateToolParams) // Assign the callback\n        .tools(anyToolToUse) // Define the tool to be used\n        .build();\n}\n</code></pre> <p>However, when adding security guardrails to your agent applications, plugins are the recommended approach for implementing policies that are not specific to a single agent. Plugins are designed to be self-contained and modular, allowing you to create individual plugins for specific security policies, and apply them globally at the runner level. This means that a security plugin can be configured once and applied to every agent that uses the runner, ensuring consistent security guardrails across your entire application without repetitive code.</p> <p>Some examples include:</p> <ul> <li> <p>Gemini as a Judge Plugin: This plugin uses Gemini Flash Lite to evaluate user inputs, tool input and output, and agent's response for appropriateness, prompt injection, and jailbreak detection. The plugin configures Gemini to act as a safety filter to mitigate against content safety, brand safety, and agent misalignment. The plugin is configured to pass user input, tool input and output, and model output to Gemini Flash Lite, who decides if the input to the agent is safe or unsafe. If Gemini decides the input is unsafe, the agent returns a predetermined response: \"Sorry I cannot help with that. Can I help you with something else?\".</p> </li> <li> <p>Model Armor Plugin: A plugin that queries the model armor API to check for potential content safety violations at specified points of agent execution. Similar to the Gemini as a Judge plugin, if Model Armor finds matches of harmful content, it returns a predetermined response to the user.</p> </li> <li> <p>PII Redaction Plugin: A specialized plugin with design for the Before Tool Callback and specifically created to redact personally identifiable information before it\u2019s processed by a tool or sent to an external service.</p> </li> </ul>"},{"location":"safety/index.en/#sandboxed-code-execution","title":"Sandboxed Code Execution","text":"<p>Code execution is a special tool that has extra security implications: sandboxing must be used to prevent model-generated code to compromise the local environment, potentially creating security issues.</p> <p>Google and the ADK provide several options for safe code execution. Vertex Gemini Enterprise API code execution feature enables agents to take advantage of sandboxed code execution server-side by enabling the tool_execution tool. For code performing data analysis, you can use the built-in Code Executor tool in ADK to call the Vertex Code Interpreter Extension.</p> <p>If none of these options satisfy your requirements, you can build your own code executor using the building blocks provided by the ADK. We recommend creating execution environments that are hermetic: no network connections and API calls permitted to avoid uncontrolled data exfiltration; and full clean up of data across execution to not create cross-user exfiltration concerns.</p>"},{"location":"safety/index.en/#evaluations","title":"Evaluations","text":"<p>See Evaluate Agents.</p>"},{"location":"safety/index.en/#vpc-sc-perimeters-and-network-controls","title":"VPC-SC Perimeters and Network Controls","text":"<p>If you are executing your agent into a VPC-SC perimeter, that will guarantee that all API calls will only be manipulating resources within the perimeter, reducing the chance of data exfiltration.</p> <p>However, identity and perimeters only provide coarse controls around agent actions. Tool-use guardrails mitigate such limitations, and give more power to agent developers to finely control which actions to allow.</p>"},{"location":"safety/index.en/#other-security-risks","title":"Other Security Risks","text":""},{"location":"safety/index.en/#always-escape-model-generated-content-in-uis","title":"Always Escape Model-Generated Content in UIs","text":"<p>Care must be taken when agent output is visualized in a browser: if HTML or JS content isn't properly escaped in the UI, the text returned by the model could be executed, leading to data exfiltration. For example, an indirect prompt injection can trick a model to include an img tag tricking the browser to send the session content to a 3rd party site; or construct URLs that, if clicked, send data to external sites. Proper escaping of such content must ensure that model-generated text isn't interpreted as code by browsers.</p>"},{"location":"sessions/","title":"\u5c0d\u8a71\u8108\u7d61\u4ecb\u7d39\uff1aSession\u3001State \u8207 Memory","text":""},{"location":"sessions/#_1","title":"\u70ba\u4ec0\u9ebc\u8108\u7d61\u5f88\u91cd\u8981","text":"<p>\u6709\u610f\u7fa9\u7684\u591a\u8f2a\u5c0d\u8a71\u9700\u8981 agent \u80fd\u5920\u7406\u89e3\u8108\u7d61\u3002\u5c31\u50cf\u4eba\u985e\u4e00\u6a23\uff0cagent \u9700\u8981\u8a18\u4f4f\u5c0d\u8a71\u6b77\u53f2\uff1a\u5df2\u7d93\u8aaa\u904e\u4ec0\u9ebc\u3001\u505a\u904e\u4ec0\u9ebc\uff0c\u624d\u80fd\u7dad\u6301\u9023\u8cab\u6027\u4e26\u907f\u514d\u91cd\u8907\u3002Agent Development Kit (ADK) \u63d0\u4f9b\u4e86\u7d50\u69cb\u5316\u7684\u65b9\u5f0f\uff0c\u900f\u904e <code>Session</code>\u3001<code>State</code> \u548c <code>Memory</code> \u4f86\u7ba1\u7406\u9019\u4e9b\u8108\u7d61\u3002</p>"},{"location":"sessions/#_2","title":"\u6838\u5fc3\u6982\u5ff5","text":"<p>\u4f60\u53ef\u4ee5\u5c07\u8207 agent \u7684\u4e0d\u540c\u5c0d\u8a71\u5be6\u4f8b\u60f3\u50cf\u6210\u7368\u7acb\u7684\u5c0d\u8a71\u7dda\u7a0b\uff0c\u9019\u4e9b\u7dda\u7a0b\u53ef\u80fd\u6703\u5f15\u7528\u9577\u671f\u77e5\u8b58\u3002</p> <ol> <li> <p><code>Session</code>\uff1a\u76ee\u524d\u7684\u5c0d\u8a71\u7dda\u7a0b</p> <ul> <li>\u4ee3\u8868\u4f7f\u7528\u8005\u8207\u4f60\u7684 agent \u7cfb\u7d71\u4e4b\u9593\u55ae\u4e00\u4e14\u6301\u7e8c\u9032\u884c\u4e2d\u7684\u4e92\u52d5\u3002</li> <li>\u5305\u542b agent \u5728\u8a72\u6b21\u4e92\u52d5\u671f\u9593\uff0c\u4f9d\u6642\u9593\u9806\u5e8f\u7684\u8a0a\u606f\u8207\u52d5\u4f5c\uff08\u7a31\u70ba <code>Events</code>\uff09\u3002</li> <li><code>Session</code> \u4e5f\u53ef\u4ee5\u5132\u5b58\u50c5\u5728\u672c\u6b21\u5c0d\u8a71\u671f\u9593\u6709\u6548\u7684\u66ab\u5b58\u8cc7\u6599\uff08<code>State</code>\uff09\u3002</li> </ul> </li> <li> <p><code>State</code>\uff08<code>session.state</code>\uff09\uff1a\u76ee\u524d\u5c0d\u8a71\u4e2d\u7684\u8cc7\u6599</p> <ul> <li>\u5132\u5b58\u5728\u7279\u5b9a <code>Session</code> \u5167\u7684\u8cc7\u6599\u3002</li> <li>\u7528\u65bc\u7ba1\u7406\u50c5\u8207\u76ee\u524d\u3001\u9032\u884c\u4e2d\u5c0d\u8a71\u7dda\u7a0b\u76f8\u95dc\u7684\u8cc7\u8a0a\uff08\u4f8b\u5982\uff1a\u672c\u6b21\u804a\u5929\u4e2d\u7684\u8cfc\u7269\u8eca\u9805\u76ee\u3001\u672c\u6b21 session\u4e2d\u63d0\u53ca\u7684\u4f7f\u7528\u8005\u504f\u597d\uff09\u3002</li> </ul> </li> <li> <p><code>Memory</code>\uff1a\u53ef\u641c\u5c0b\u3001\u8de8 session \u7684\u8cc7\u8a0a</p> <ul> <li>\u4ee3\u8868\u4e00\u500b\u8cc7\u8a0a\u5132\u5b58\u5eab\uff0c\u53ef\u80fd\u6db5\u84cb\u591a\u500b\u904e\u53bb\u7684 session\uff0c\u6216\u5305\u542b\u5916\u90e8\u8cc7\u6599\u4f86\u6e90\u3002</li> <li>\u5b83\u4f5c\u70ba agent \u53ef\u641c\u5c0b\u7684\u77e5\u8b58\u5eab\uff0c\u7528\u65bc\u56de\u61b6\u8d85\u8d8a\u7576\u524d\u5c0d\u8a71\u7684\u8cc7\u8a0a\u6216\u8108\u7d61\u3002</li> </ul> </li> </ol>"},{"location":"sessions/#_3","title":"\u8108\u7d61\u7ba1\u7406\uff1a\u670d\u52d9","text":"<p>ADK \u63d0\u4f9b\u670d\u52d9\u4f86\u7ba1\u7406\u9019\u4e9b\u6982\u5ff5\uff1a</p> <ol> <li> <p><code>SessionService</code>\uff1a\u7ba1\u7406\u4e0d\u540c\u7684\u5c0d\u8a71\u7dda\u7a0b\uff08<code>Session</code> \u7269\u4ef6\uff09</p> <ul> <li>\u8655\u7406\u751f\u547d\u9031\u671f\uff1a\u5efa\u7acb\u3001\u64f7\u53d6\u3001\u66f4\u65b0\uff08\u9644\u52a0 <code>Events</code>\u3001\u4fee\u6539 <code>State</code>\uff09\u4ee5\u53ca\u522a\u9664\u500b\u5225 <code>Session</code>\u3002</li> </ul> </li> <li> <p><code>MemoryService</code>\uff1a\u7ba1\u7406\u9577\u671f\u77e5\u8b58\u5132\u5b58\uff08<code>Memory</code>\uff09</p> <ul> <li>\u8655\u7406\u5c07\u8cc7\u8a0a\uff08\u901a\u5e38\u4f86\u81ea\u5df2\u5b8c\u6210\u7684 <code>Session</code>\uff09\u532f\u5165\u9577\u671f\u5132\u5b58\u5eab\u3002</li> <li>\u63d0\u4f9b\u6839\u64da\u67e5\u8a62\u641c\u5c0b\u9019\u4e9b\u5132\u5b58\u77e5\u8b58\u7684\u65b9\u6cd5\u3002</li> </ul> </li> </ol> <p>\u5be6\u4f5c\u65b9\u5f0f\uff1aADK \u70ba <code>SessionService</code> \u8207 <code>MemoryService</code> \u90fd\u63d0\u4f9b\u4e86\u591a\u7a2e\u5be6\u4f5c\uff0c\u8b93\u4f60\u53ef\u4ee5\u9078\u64c7\u6700\u9069\u5408\u61c9\u7528\u9700\u6c42\u7684\u5132\u5b58\u5f8c\u7aef\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5169\u7a2e\u670d\u52d9\u90fd\u63d0\u4f9b\u4e86\u8a18\u61b6\u9ad4\u5167\uff08in-memory\uff09\u5be6\u4f5c\uff0c\u9019\u4e9b\u7279\u5225\u9069\u5408\u7528\u65bc\u672c\u5730\u6e2c\u8a66\u8207\u5feb\u901f\u958b\u767c\u3002\u8acb\u6ce8\u610f\uff0c\u6240\u6709\u4f7f\u7528\u9019\u4e9b\u8a18\u61b6\u9ad4\u5167\u9078\u9805\u5132\u5b58\u7684\u8cc7\u6599\uff08sessions\u3001state \u6216\u9577\u671f\u77e5\u8b58\uff09\u5728\u61c9\u7528\u7a0b\u5f0f\u91cd\u555f\u6642\u90fd\u6703\u907a\u5931\u3002\u82e5\u9700\u6301\u4e45\u5316\u8207\u53ef\u64f4\u5c55\u6027\u8d85\u8d8a\u672c\u5730\u6e2c\u8a66\uff0cADK \u4e5f\u63d0\u4f9b\u96f2\u7aef\u8207\u8cc7\u6599\u5eab\u670d\u52d9\u9078\u9805\u3002</p> <p>\u7e3d\u7d50\uff1a</p> <ul> <li><code>Session</code> &amp; <code>State</code>\uff1a\u5c08\u6ce8\u65bc\u7576\u524d\u4e92\u52d5\u2014\u2014\u55ae\u4e00\u3001\u9032\u884c\u4e2d\u5c0d\u8a71\u7684\u6b77\u53f2\u8207\u8cc7\u6599\u3002\u4e3b\u8981\u7531 <code>SessionService</code> \u7ba1\u7406\u3002</li> <li>Memory\uff1a\u5c08\u6ce8\u65bc\u904e\u53bb\u8207\u5916\u90e8\u8cc7\u8a0a\u2014\u2014\u4e00\u500b\u53ef\u641c\u5c0b\u7684\u8cc7\u6599\u5eab\uff0c\u53ef\u80fd\u8de8\u8d8a\u591a\u500b\u5c0d\u8a71\u3002\u7531 <code>MemoryService</code> \u7ba1\u7406\u3002</li> </ul>"},{"location":"sessions/#_4","title":"\u63a5\u4e0b\u4f86\uff1f","text":"<p>\u5728\u63a5\u4e0b\u4f86\u7684\u7ae0\u7bc0\uff0c\u6211\u5011\u5c07\u66f4\u6df1\u5165\u63a2\u8a0e\u9019\u4e9b\u5143\u4ef6\uff1a</p> <ul> <li><code>Session</code>\uff1a\u4e86\u89e3\u5176\u7d50\u69cb\u8207 <code>Events</code>\u3002</li> <li><code>State</code>\uff1a\u5982\u4f55\u6709\u6548\u8b80\u53d6\u3001\u5beb\u5165\u53ca\u7ba1\u7406 session \u5c08\u5c6c\u8cc7\u6599\u3002</li> <li><code>SessionService</code>\uff1a\u5982\u4f55\u70ba\u4f60\u7684 session \u9078\u64c7\u5408\u9069\u7684\u5132\u5b58\u5f8c\u7aef\u3002</li> <li><code>MemoryService</code>\uff1a\u63a2\u7d22\u5132\u5b58\u8207\u64f7\u53d6\u66f4\u5ee3\u6cdb\u8108\u7d61\u7684\u9078\u9805\u3002</li> </ul> <p>\u7406\u89e3\u9019\u4e9b\u6982\u5ff5\u662f\u6253\u9020\u80fd\u5920\u9032\u884c\u8907\u96dc\u3001\u6709\u72c0\u614b\u4e14\u5177\u8108\u7d61\u611f\u77e5\u5c0d\u8a71 agent \u7684\u57fa\u790e\u3002</p>"},{"location":"sessions/express-mode.en/","title":"Vertex AI Express Mode: Using Vertex AI Sessions and Memory for Free","text":"<p>If you are interested in using either the <code>VertexAiSessionService</code> or <code>VertexAiMemoryBankService</code> but you don't have a Google Cloud Project, you can sign up for Vertex AI Express Mode and get access for free and try out these services! You can sign up with an eligible gmail account here. For more details about Vertex AI Express mode, see the overview page. Once you sign up, get an API key and you can get started using your local ADK agent with Vertex AI Session and Memory services!</p> <p>Info</p> <p>Vertex AI Express Mode has certain limitations in the free tier. Free Express mode projects are only valid for 90 days and only select services are available to be used with limited quota. For example, the number of Agent Engines is restricted to 10 and deployment to Agent Engine is reserved for the paid tier only. To remove the quota restrictions and use all of Vertex AI's services, add a billing account to your Express Mode project.</p>"},{"location":"sessions/express-mode.en/#create-an-agent-engine","title":"Create an Agent Engine","text":"<p><code>Session</code> objects are children of an <code>AgentEngine</code>. When using Vertex AI Express Mode, we can create an empty <code>AgentEngine</code> parent to manage all of our <code>Session</code> and <code>Memory</code> objects. First, ensure that your environment variables are set correctly. For example, in Python:</p> weather_agent/.env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_API_KEY=PASTE_YOUR_ACTUAL_EXPRESS_MODE_API_KEY_HERE\n</code></pre> <p>Next, we can create our Agent Engine instance. You can use the Gen AI SDK.</p> Gen AI SDK <ol> <li> <p>Import Gen AI SDK.</p> <pre><code>from google import genai\n</code></pre> </li> <li> <p>Set Vertex AI to be True, then use a <code>POST</code> request to create the Agent Engine</p> <pre><code># Create Agent Engine with Gen AI SDK\nclient = genai.Client(vertexai=True)._api_client\n\nresponse = client.request(\n    http_method='POST',\n    path=f'reasoningEngines',\n    request_dict={\"displayName\": \"YOUR_AGENT_ENGINE_DISPLAY_NAME\", \"description\": \"YOUR_AGENT_ENGINE_DESCRIPTION\"},\n)\nresponse\n</code></pre> </li> <li> <p>Replace <code>YOUR_AGENT_ENGINE_DISPLAY_NAME</code> and <code>YOUR_AGENT_ENGINE_DESCRIPTION</code> with your use case.</p> </li> <li> <p>Get the Agent Engine name and ID from the response</p> <pre><code>APP_NAME = \"/\".join(response['name'].split(\"/\")[:6])\nAPP_ID = APP_NAME.split('/')[-1]\n</code></pre> </li> </ol>"},{"location":"sessions/express-mode.en/#managing-sessions-with-a-vertexaisessionservice","title":"Managing Sessions with a <code>VertexAiSessionService</code>","text":"<p><code>VertexAiSessionService</code> is compatible with Vertex AI Express mode API Keys. We can  instead initialize the session object without any project or location.</p> <pre><code># Requires: pip install google-adk[vertexai]\n# Plus environment variable setup:\n# GOOGLE_GENAI_USE_VERTEXAI=TRUE\n# GOOGLE_API_KEY=PASTE_YOUR_ACTUAL_EXPRESS_MODE_API_KEY_HERE\nfrom google.adk.sessions import VertexAiSessionService\n\n# The app_name used with this service should be the Reasoning Engine ID or name\nAPP_ID = \"your-reasoning-engine-id\"\n\n# Project and location are not required when initializing with Vertex Express Mode\nsession_service = VertexAiSessionService(agent_engine_id=APP_ID)\n# Use REASONING_ENGINE_APP_ID when calling service methods, e.g.:\n# session = await session_service.create_session(app_name=REASONING_ENGINE_APP_ID, user_id= ...)\n</code></pre> <p>Info</p> <p>For Free Express Mode Projects, <code>VertexAiSessionService</code> has the following quota:</p> <ul> <li>100 Session Entities</li> <li>10,000 Event Entities</li> </ul>"},{"location":"sessions/express-mode.en/#managing-memories-with-a-vertexaimemorybankservice","title":"Managing Memories with a <code>VertexAiMemoryBankService</code>","text":"<p><code>VertexAiMemoryBankService</code> is compatible with Vertex AI Express mode API Keys. We can  instead initialize the memory object without any project or location.</p> <pre><code># Requires: pip install google-adk[vertexai]\n# Plus environment variable setup:\n# GOOGLE_GENAI_USE_VERTEXAI=TRUE\n# GOOGLE_API_KEY=PASTE_YOUR_ACTUAL_EXPRESS_MODE_API_KEY_HERE\nfrom google.adk.sessions import VertexAiMemoryBankService\n\n# The app_name used with this service should be the Reasoning Engine ID or name\nAPP_ID = \"your-reasoning-engine-id\"\n\n# Project and location are not required when initializing with Vertex Express Mode\nmemory_service = VertexAiMemoryBankService(agent_engine_id=APP_ID)\n# Generate a memory from that session so the Agent can remember relevant details about the user\n# memory = await memory_service.add_session_to_memory(session)\n</code></pre> <p>Info</p> <p>For Free Express Mode Projects, <code>VertexAiMemoryBankService</code> has the following quota:</p> <ul> <li>200 Memory Entities</li> </ul>"},{"location":"sessions/express-mode.en/#code-sample-weather-agent-with-session-and-memory-using-vertex-ai-express-mode","title":"Code Sample: Weather Agent with Session and Memory using Vertex AI Express Mode","text":"<p>In this sample, we create a weather agent that utilizes both <code>VertexAiSessionService</code> and <code>VertexAiMemoryBankService</code> for context management, allowing our agent to recall user preferences and conversations!</p> <p>Weather Agent with Session and Memory using Vertex AI Express Mode</p>"},{"location":"sessions/express-mode/","title":"Vertex AI Express \u6a21\u5f0f\uff1a\u514d\u8cbb\u4f7f\u7528 Vertex AI Sessions \u8207 Memory","text":"<p>\u5982\u679c\u4f60\u6709\u8208\u8da3\u4f7f\u7528 <code>VertexAiSessionService</code> \u6216 <code>VertexAiMemoryBankService</code>\uff0c\u4f46\u5c1a\u672a\u64c1\u6709 Google Cloud \u5c08\u6848\uff0c\u53ef\u4ee5\u8a3b\u518a Vertex AI Express \u6a21\u5f0f\uff0c\u514d\u8cbb\u5b58\u53d6\u4e26\u9ad4\u9a57\u9019\u4e9b\u670d\u52d9\uff01\u4f60\u53ef\u4ee5\u4f7f\u7528\u7b26\u5408\u8cc7\u683c\u7684 gmail \u5e33\u865f\u5728\u9019\u88e1\u8a3b\u518a\u3002\u5982\u9700\u66f4\u591a Vertex AI Express \u6a21\u5f0f\u7684\u8a73\u7d30\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1\u7e3d\u89bd\u9801\u9762\u3002 \u8a3b\u518a\u5b8c\u6210\u5f8c\uff0c\u53d6\u5f97API key\uff0c\u5373\u53ef\u958b\u59cb\u5728\u672c\u6a5f\u4f7f\u7528\u4f60\u7684 Agent Development Kit (ADK) agent \u642d\u914d Vertex AI Session \u8207 Memory \u670d\u52d9\uff01</p> <p>Info</p> <p>Vertex AI Express \u6a21\u5f0f\u5728\u514d\u8cbb\u65b9\u6848\u4e2d\u6709\u4e00\u4e9b\u9650\u5236\u3002\u514d\u8cbb\u7684 Express \u6a21\u5f0f\u5c08\u6848\u50c5\u6709\u6548 90 \u5929\uff0c\u4e14\u50c5\u80fd\u4f7f\u7528\u90e8\u5206\u670d\u52d9\uff0c\u4e14\u914d\u984d\u6709\u9650\u3002\u4f8b\u5982\uff0cAgent Engine \u7684\u6578\u91cf\u9650\u5236\u70ba 10 \u500b\uff0c\u4e14\u50c5\u4ed8\u8cbb\u65b9\u6848\u624d\u80fd\u90e8\u7f72\u5230 Agent Engine\u3002\u82e5\u8981\u89e3\u9664\u914d\u984d\u9650\u5236\u4e26\u4f7f\u7528 Vertex AI \u7684\u6240\u6709\u670d\u52d9\uff0c\u8acb\u5c07\u5e33\u55ae\u5e33\u6236\u65b0\u589e\u81f3\u60a8\u7684 Express \u6a21\u5f0f\u5c08\u6848\u3002</p>"},{"location":"sessions/express-mode/#agent-engine","title":"\u5efa\u7acb Agent Engine","text":"<p><code>Session</code> \u7269\u4ef6\u662f <code>AgentEngine</code> \u7684\u5b50\u7269\u4ef6\u3002\u5728\u4f7f\u7528 Vertex AI Express \u6a21\u5f0f\u6642\uff0c\u6211\u5011\u53ef\u4ee5\u5efa\u7acb\u4e00\u500b\u7a7a\u7684 <code>AgentEngine</code> \u7236\u7269\u4ef6\u4f86\u7ba1\u7406\u6240\u6709\u7684 <code>Session</code> \u548c <code>Memory</code> \u7269\u4ef6\u3002 \u9996\u5148\uff0c\u8acb\u78ba\u4fdd\u60a8\u7684\u74b0\u5883\u8b8a\u6578\u8a2d\u5b9a\u6b63\u78ba\u3002\u4f8b\u5982\uff0c\u5728 Python \u4e2d\uff1a</p> weather_agent/.env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_API_KEY=PASTE_YOUR_ACTUAL_EXPRESS_MODE_API_KEY_HERE\n</code></pre> <p>\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u53ef\u4ee5\u5efa\u7acb Agent Engine \u5be6\u4f8b\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 Gen AI SDK\u3002</p> Gen AI SDK <ol> <li> <p>\u532f\u5165 Gen AI SDK\u3002</p> <pre><code>from google import genai\n</code></pre> </li> <li> <p>\u5c07 Vertex AI \u8a2d\u70ba True\uff0c\u7136\u5f8c\u4f7f\u7528<code>POST</code>\u8acb\u6c42\u4f86\u5efa\u7acb Agent Engine</p> <pre><code># Create Agent Engine with Gen AI SDK\nclient = genai.Client(vertexai=True)._api_client\n\nresponse = client.request(\n    http_method='POST',\n    path=f'reasoningEngines',\n    request_dict={\"displayName\": \"YOUR_AGENT_ENGINE_DISPLAY_NAME\", \"description\": \"YOUR_AGENT_ENGINE_DESCRIPTION\"},\n)\nresponse\n</code></pre> </li> <li> <p>\u5c07 <code>YOUR_AGENT_ENGINE_DISPLAY_NAME</code> \u548c <code>YOUR_AGENT_ENGINE_DESCRIPTION</code> \u66ff\u63db\u70ba\u4f60\u7684\u4f7f\u7528\u60c5\u5883\u3002</p> </li> <li> <p>\u5f9e\u56de\u61c9\u4e2d\u53d6\u5f97 Agent Engine \u7684\u540d\u7a31\u8207 ID</p> <pre><code>APP_NAME = \"/\".join(response['name'].split(\"/\")[:6])\nAPP_ID = APP_NAME.split('/')[-1]\n</code></pre> </li> </ol>"},{"location":"sessions/express-mode/#vertexaisessionservice-session","title":"\u4f7f\u7528 <code>VertexAiSessionService</code> \u7ba1\u7406 Session","text":"<p><code>VertexAiSessionService</code> \u76f8\u5bb9\u65bc Vertex AI Express \u6a21\u5f0f API KEY\u3002\u6211\u5011\u53ef\u4ee5\u5728\u521d\u59cb\u5316 session \u7269\u4ef6\u6642\uff0c\u4e0d\u9700\u8981\u6307\u5b9a\u4efb\u4f55\u5c08\u6848\uff08project\uff09\u6216\u4f4d\u7f6e\uff08location\uff09\u3002</p> <pre><code># Requires: pip install google-adk[vertexai]\n# Plus environment variable setup:\n# GOOGLE_GENAI_USE_VERTEXAI=TRUE\n# GOOGLE_API_KEY=PASTE_YOUR_ACTUAL_EXPRESS_MODE_API_KEY_HERE\nfrom google.adk.sessions import VertexAiSessionService\n\n# The app_name used with this service should be the Reasoning Engine ID or name\nAPP_ID = \"your-reasoning-engine-id\"\n\n# Project and location are not required when initializing with Vertex Express Mode\nsession_service = VertexAiSessionService(agent_engine_id=APP_ID)\n# Use REASONING_ENGINE_APP_ID when calling service methods, e.g.:\n# session = await session_service.create_session(app_name=REASONING_ENGINE_APP_ID, user_id= ...)\n</code></pre> <p>Info</p> <p>\u5c0d\u65bc\u514d\u8cbb Vertex AI Express \u6a21\u5f0f\u5c08\u6848\uff0c<code>VertexAiSessionService</code> \u64c1\u6709\u4ee5\u4e0b\u914d\u984d\uff1a</p> <ul> <li>100 \u500b Session \u5be6\u9ad4</li> <li>10,000 \u500b Event \u5be6\u9ad4</li> </ul>"},{"location":"sessions/express-mode/#vertexaimemorybankservice","title":"\u4f7f\u7528 <code>VertexAiMemoryBankService</code> \u7ba1\u7406\u8a18\u61b6\u9ad4","text":"<p><code>VertexAiMemoryBankService</code> \u76f8\u5bb9\u65bc Vertex AI Express \u6a21\u5f0f API KEY\u3002\u6211\u5011\u53ef\u4ee5\u5728\u521d\u59cb\u5316\u8a18\u61b6\u9ad4\u7269\u4ef6\u6642\uff0c\u4e0d\u9700\u8981\u6307\u5b9a\u4efb\u4f55\u5c08\u6848\u6216\u4f4d\u7f6e\u3002</p> <pre><code># Requires: pip install google-adk[vertexai]\n# Plus environment variable setup:\n# GOOGLE_GENAI_USE_VERTEXAI=TRUE\n# GOOGLE_API_KEY=PASTE_YOUR_ACTUAL_EXPRESS_MODE_API_KEY_HERE\nfrom google.adk.sessions import VertexAiMemoryBankService\n\n# The app_name used with this service should be the Reasoning Engine ID or name\nAPP_ID = \"your-reasoning-engine-id\"\n\n# Project and location are not required when initializing with Vertex Express Mode\nmemory_service = VertexAiMemoryBankService(agent_engine_id=APP_ID)\n# Generate a memory from that session so the Agent can remember relevant details about the user\n# memory = await memory_service.add_session_to_memory(session)\n</code></pre> <p>Info</p> <p>\u5c0d\u65bc\u514d\u8cbb\u7684 Vertex AI Express \u6a21\u5f0f\u5c08\u6848\uff0c<code>VertexAiMemoryBankService</code> \u6709\u4ee5\u4e0b\u914d\u984d\uff1a</p> <ul> <li>200 \u500b\u8a18\u61b6\u9ad4\u5be6\u9ad4\uff08Memory Entities\uff09</li> </ul>"},{"location":"sessions/express-mode/#session-memory-weather-agent-vertex-ai-express","title":"\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\uff1a\u4f7f\u7528 Session \u8207 Memory \u7684\u5929\u6c23\u4ee3\u7406\uff08Weather Agent\uff09\uff0c\u63a1\u7528 Vertex AI Express \u6a21\u5f0f","text":"<p>\u5728\u6b64\u7bc4\u4f8b\u4e2d\uff0c\u6211\u5011\u5efa\u7acb\u4e86\u4e00\u500b\u5929\u6c23\u4ee3\u7406\uff08weather agent\uff09\uff0c\u540c\u6642\u904b\u7528 <code>VertexAiSessionService</code> \u8207 <code>VertexAiMemoryBankService</code> \u9032\u884c\u60c5\u5883\u7ba1\u7406\uff08context management\uff09\uff0c\u8b93\u6211\u5011\u7684 agent \u80fd\u5920\u8a18\u4f4f\u4f7f\u7528\u8005\u504f\u597d\u8207\u5c0d\u8a71\u5167\u5bb9\uff01</p> <p>\u4f7f\u7528 Vertex AI Express \u6a21\u5f0f\u7684 Session \u8207 Memory \u5efa\u7acb\u5929\u6c23\u4ee3\u7406</p>"},{"location":"sessions/index.en/","title":"Introduction to Conversational Context: Session, State, and Memory","text":""},{"location":"sessions/index.en/#why-context-matters","title":"Why Context Matters","text":"<p>Meaningful, multi-turn conversations require agents to understand context. Just like humans, they need to recall the conversation history: what's been said and done to maintain continuity and avoid repetition. The Agent Development Kit (ADK) provides structured ways to manage this context through <code>Session</code>, <code>State</code>, and <code>Memory</code>.</p>"},{"location":"sessions/index.en/#core-concepts","title":"Core Concepts","text":"<p>Think of different instances of your conversations with the agent as distinct conversation threads, potentially drawing upon long-term knowledge.</p> <ol> <li> <p><code>Session</code>: The Current Conversation Thread</p> <ul> <li>Represents a single, ongoing interaction between a user and your agent     system.</li> <li>Contains the chronological sequence of messages and actions taken by the     agent (referred to <code>Events</code>) during that specific interaction.</li> <li>A <code>Session</code> can also hold temporary data (<code>State</code>) relevant only during     this conversation.</li> </ul> </li> <li> <p><code>State</code> (<code>session.state</code>): Data Within the Current Conversation</p> <ul> <li>Data stored within a specific <code>Session</code>.</li> <li>Used to manage information relevant only to the current, active     conversation thread (e.g., items in a shopping cart during this chat,     user preferences mentioned in this session).</li> </ul> </li> <li> <p><code>Memory</code>: Searchable, Cross-Session Information</p> <ul> <li>Represents a store of information that might span multiple past     sessions or include external data sources.</li> <li>It acts as a knowledge base the agent can search to recall information     or context beyond the immediate conversation.</li> </ul> </li> </ol>"},{"location":"sessions/index.en/#managing-context-services","title":"Managing Context: Services","text":"<p>ADK provides services to manage these concepts:</p> <ol> <li> <p><code>SessionService</code>: Manages the different conversation threads (<code>Session</code>     objects)</p> <ul> <li>Handles the lifecycle: creating, retrieving, updating (appending     <code>Events</code>, modifying <code>State</code>), and deleting individual <code>Session</code>s.</li> </ul> </li> <li> <p><code>MemoryService</code>: Manages the Long-Term Knowledge Store (<code>Memory</code>)</p> <ul> <li>Handles ingesting information (often from completed <code>Session</code>s) into the     long-term store.</li> <li>Provides methods to search this stored knowledge based on queries.</li> </ul> </li> </ol> <p>Implementations: ADK offers different implementations for both <code>SessionService</code> and <code>MemoryService</code>, allowing you to choose the storage backend that best fits your application's needs. Notably, in-memory implementations are provided for both services; these are designed specifically for local testing and fast development. It's important to remember that all data stored using these in-memory options (sessions, state, or long-term knowledge) is lost when your application restarts. For persistence and scalability beyond local testing, ADK also offers cloud-based and database service options.</p> <p>In Summary:</p> <ul> <li><code>Session</code> &amp; <code>State</code>: Focus on the current interaction \u2013 the history     and data of the single, active conversation. Managed primarily by a     <code>SessionService</code>.</li> <li>Memory: Focuses on the past and external information \u2013 a searchable     archive potentially spanning across conversations. Managed by a     <code>MemoryService</code>.</li> </ul>"},{"location":"sessions/index.en/#whats-next","title":"What's Next?","text":"<p>In the following sections, we'll dive deeper into each of these components:</p> <ul> <li><code>Session</code>: Understanding its structure and <code>Events</code>.</li> <li><code>State</code>: How to effectively read, write, and manage session-specific     data.</li> <li><code>SessionService</code>: Choosing the right storage backend for your sessions.</li> <li><code>MemoryService</code>: Exploring options for storing and retrieving broader     context.</li> </ul> <p>Understanding these concepts is fundamental to building agents that can engage in complex, stateful, and context-aware conversations.</p>"},{"location":"sessions/memory.en/","title":"Memory: Long-Term Knowledge with <code>MemoryService</code>","text":"<p>We've seen how <code>Session</code> tracks the history (<code>events</code>) and temporary data (<code>state</code>) for a single, ongoing conversation. But what if an agent needs to recall information from past conversations or access external knowledge bases? This is where the concept of Long-Term Knowledge and the <code>MemoryService</code> come into play.</p> <p>Think of it this way:</p> <ul> <li><code>Session</code> / <code>State</code>: Like your short-term memory during one specific chat.  </li> <li>Long-Term Knowledge (<code>MemoryService</code>): Like a searchable archive or knowledge library the agent can consult, potentially containing information from many past chats or other sources.</li> </ul>"},{"location":"sessions/memory.en/#the-memoryservice-role","title":"The <code>MemoryService</code> Role","text":"<p>The <code>BaseMemoryService</code> defines the interface for managing this searchable, long-term knowledge store. Its primary responsibilities are:</p> <ol> <li>Ingesting Information (<code>add_session_to_memory</code>): Taking the contents of a (usually completed) <code>Session</code> and adding relevant information to the long-term knowledge store.  </li> <li>Searching Information (<code>search_memory</code>): Allowing an agent (typically via a <code>Tool</code>) to query the knowledge store and retrieve relevant snippets or context based on a search query.</li> </ol>"},{"location":"sessions/memory.en/#choosing-the-right-memory-service","title":"Choosing the Right Memory Service","text":"<p>The ADK offers two distinct <code>MemoryService</code> implementations, each tailored to different use cases. Use the table below to decide which is the best fit for your agent.</p> Feature InMemoryMemoryService [NEW!] VertexAiMemoryBankService Persistence None (data is lost on restart) Yes (Managed by Vertex AI) Primary Use Case Prototyping, local development, and simple testing. Building meaningful, evolving memories from user conversations. Memory Extraction Stores full conversation Extracts meaningful information from conversations and consolidates it with existing memories (powered by LLM) Search Capability Basic keyword matching. Advanced semantic search. Setup Complexity None. It's the default. Low. Requires an Agent Engine in Vertex AI. Dependencies None. Google Cloud Project, Vertex AI API When to use it When you want to search across multiple sessions\u2019 chat histories for prototyping. When you want your agent to remember and learn from past interactions."},{"location":"sessions/memory.en/#in-memory-memory","title":"In-Memory Memory","text":"<p>The <code>InMemoryMemoryService</code> stores session information in the application's memory and performs basic keyword matching for searches. It requires no setup and is best for prototyping and simple testing scenarios where persistence isn't required.</p> <pre><code>from google.adk.memory import InMemoryMemoryService\nmemory_service = InMemoryMemoryService()\n</code></pre> <p>Example: Adding and Searching Memory</p> <p>This example demonstrates the basic flow using the <code>InMemoryMemoryService</code> for simplicity.</p> Full Code <pre><code>import asyncio\nfrom google.adk.agents import LlmAgent\nfrom google.adk.sessions import InMemorySessionService, Session\nfrom google.adk.memory import InMemoryMemoryService # Import MemoryService\nfrom google.adk.runners import Runner\nfrom google.adk.tools import load_memory # Tool to query memory\nfrom google.genai.types import Content, Part\n\n# --- Constants ---\nAPP_NAME = \"memory_example_app\"\nUSER_ID = \"mem_user\"\nMODEL = \"gemini-2.0-flash\" # Use a valid model\n\n# --- Agent Definitions ---\n# Agent 1: Simple agent to capture information\ninfo_capture_agent = LlmAgent(\n    model=MODEL,\n    name=\"InfoCaptureAgent\",\n    instruction=\"Acknowledge the user's statement.\",\n)\n\n# Agent 2: Agent that can use memory\nmemory_recall_agent = LlmAgent(\n    model=MODEL,\n    name=\"MemoryRecallAgent\",\n    instruction=\"Answer the user's question. Use the 'load_memory' tool \"\n                \"if the answer might be in past conversations.\",\n    tools=[load_memory] # Give the agent the tool\n)\n\n# --- Services ---\n# Services must be shared across runners to share state and memory\nsession_service = InMemorySessionService()\nmemory_service = InMemoryMemoryService() # Use in-memory for demo\n\nasync def run_scenario():\n    # --- Scenario ---\n\n    # Turn 1: Capture some information in a session\n    print(\"--- Turn 1: Capturing Information ---\")\n    runner1 = Runner(\n        # Start with the info capture agent\n        agent=info_capture_agent,\n        app_name=APP_NAME,\n        session_service=session_service,\n        memory_service=memory_service # Provide the memory service to the Runner\n    )\n    session1_id = \"session_info\"\n    await runner1.session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=session1_id)\n    user_input1 = Content(parts=[Part(text=\"My favorite project is Project Alpha.\")], role=\"user\")\n\n    # Run the agent\n    final_response_text = \"(No final response)\"\n    async for event in runner1.run_async(user_id=USER_ID, session_id=session1_id, new_message=user_input1):\n        if event.is_final_response() and event.content and event.content.parts:\n            final_response_text = event.content.parts[0].text\n    print(f\"Agent 1 Response: {final_response_text}\")\n\n    # Get the completed session\n    completed_session1 = await runner1.session_service.get_session(app_name=APP_NAME, user_id=USER_ID, session_id=session1_id)\n\n    # Add this session's content to the Memory Service\n    print(\"\\n--- Adding Session 1 to Memory ---\")\n    await memory_service.add_session_to_memory(completed_session1)\n    print(\"Session added to memory.\")\n\n    # Turn 2: Recall the information in a new session\n    print(\"\\n--- Turn 2: Recalling Information ---\")\n    runner2 = Runner(\n        # Use the second agent, which has the memory tool\n        agent=memory_recall_agent,\n        app_name=APP_NAME,\n        session_service=session_service, # Reuse the same service\n        memory_service=memory_service   # Reuse the same service\n    )\n    session2_id = \"session_recall\"\n    await runner2.session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=session2_id)\n    user_input2 = Content(parts=[Part(text=\"What is my favorite project?\")], role=\"user\")\n\n    # Run the second agent\n    final_response_text_2 = \"(No final response)\"\n    async for event in runner2.run_async(user_id=USER_ID, session_id=session2_id, new_message=user_input2):\n        if event.is_final_response() and event.content and event.content.parts:\n            final_response_text_2 = event.content.parts[0].text\n    print(f\"Agent 2 Response: {final_response_text_2}\")\n\n# To run this example, you can use the following snippet:\n# asyncio.run(run_scenario())\n\n# await run_scenario()\n</code></pre>"},{"location":"sessions/memory.en/#vertex-ai-memory-bank","title":"Vertex AI Memory Bank","text":"<p>The <code>VertexAiMemoryBankService</code> connects your agent to Vertex AI Memory Bank, a fully managed Google Cloud service that provides sophisticated, persistent memory capabilities for conversational agents.</p>"},{"location":"sessions/memory.en/#how-it-works","title":"How It Works","text":"<p>The service automatically handles two key operations:</p> <ul> <li>Generating Memories: At the end of a conversation, the ADK sends the session's events to the Memory Bank, which intelligently processes and stores the information as \"memories.\"</li> <li>Retrieving Memories: Your agent code can issue a search query against the Memory Bank to retrieve relevant memories from past conversations.</li> </ul>"},{"location":"sessions/memory.en/#prerequisites","title":"Prerequisites","text":"<p>Before you can use this feature, you must have:</p> <ol> <li>A Google Cloud Project: With the Vertex AI API enabled.</li> <li>An Agent Engine: You need to create an Agent Engine in Vertex AI. This will provide you with the Agent Engine ID required for configuration.</li> <li>Authentication: Ensure your local environment is authenticated to access Google Cloud services. The simplest way is to run:     <pre><code>gcloud auth application-default login\n</code></pre></li> <li>Environment Variables: The service requires your Google Cloud Project ID and Location. Set them as environment variables:     <pre><code>export GOOGLE_CLOUD_PROJECT=\"your-gcp-project-id\"\nexport GOOGLE_CLOUD_LOCATION=\"your-gcp-location\"\n</code></pre></li> </ol>"},{"location":"sessions/memory.en/#configuration","title":"Configuration","text":"<p>To connect your agent to the Memory Bank, you use the <code>--memory_service_uri</code> flag when starting the ADK server (<code>adk web</code> or <code>adk api_server</code>). The URI must be in the format <code>agentengine://&lt;agent_engine_id&gt;</code>.</p> bash<pre><code>adk web path/to/your/agents_dir --memory_service_uri=\"agentengine://1234567890\"\n</code></pre> <p>Or, you can configure your agent to use the Memory Bank by manually instantiating the <code>VertexAiMemoryBankService</code> and passing it to the <code>Runner</code>.</p> <pre><code>from google.adk.memory import VertexAiMemoryBankService\n\nagent_engine_id = agent_engine.api_resource.name.split(\"/\")[-1]\n\nmemory_service = VertexAiMemoryBankService(\n    project=\"PROJECT_ID\",\n    location=\"LOCATION\",\n    agent_engine_id=agent_engine_id\n)\n\nrunner = adk.Runner(\n    ...\n    memory_service=memory_service\n)\n</code></pre>"},{"location":"sessions/memory.en/#using-memory-in-your-agent","title":"Using Memory in Your Agent","text":"<p>With the service configured, the ADK automatically saves session data to the Memory Bank. To make your agent use this memory, you need to call the <code>search_memory</code> method from your agent's code.</p> <p>This is typically done at the beginning of a turn to fetch relevant context before generating a response.</p> <p>Example:</p> <pre><code>from google.adk.agents import Agent\nfrom google.genai import types\n\nclass MyAgent(Agent):\n    async def run(self, request: types.Content, **kwargs) -&gt; types.Content:\n        # Get the user's latest message\n        user_query = request.parts[0].text\n\n        # Search the memory for context related to the user's query\n        search_result = await self.search_memory(query=user_query)\n\n        # Create a prompt that includes the retrieved memories\n        prompt = f\"Based on my memory, here's what I recall about your query: {search_result.memories}\\n\\nNow, please respond to: {user_query}\"\n\n        # Call the LLM with the enhanced prompt\n        return await self.llm.generate_content_async(prompt)\n</code></pre>"},{"location":"sessions/memory.en/#advanced-concepts","title":"Advanced Concepts","text":""},{"location":"sessions/memory.en/#how-memory-works-in-practice","title":"How Memory Works in Practice","text":"<p>The memory workflow internally involves these steps:</p> <ol> <li>Session Interaction: A user interacts with an agent via a <code>Session</code>, managed by a <code>SessionService</code>. Events are added, and state might be updated.  </li> <li>Ingestion into Memory: At some point (often when a session is considered complete or has yielded significant information), your application calls <code>memory_service.add_session_to_memory(session)</code>. This extracts relevant information from the session's events and adds it to the long-term knowledge store (in-memory dictionary or RAG Corpus).  </li> <li>Later Query: In a different (or the same) session, the user might ask a question requiring past context (e.g., \"What did we discuss about project X last week?\").  </li> <li>Agent Uses Memory Tool: An agent equipped with a memory-retrieval tool (like the built-in <code>load_memory</code> tool) recognizes the need for past context. It calls the tool, providing a search query (e.g., \"discussion project X last week\").  </li> <li>Search Execution: The tool internally calls <code>memory_service.search_memory(app_name, user_id, query)</code>.  </li> <li>Results Returned: The <code>MemoryService</code> searches its store (using keyword matching or semantic search) and returns relevant snippets as a <code>SearchMemoryResponse</code> containing a list of <code>MemoryResult</code> objects (each potentially holding events from a relevant past session).  </li> <li>Agent Uses Results: The tool returns these results to the agent, usually as part of the context or function response. The agent can then use this retrieved information to formulate its final answer to the user.</li> </ol>"},{"location":"sessions/memory.en/#can-an-agent-have-access-to-more-than-one-memory-service","title":"Can an agent have access to more than one memory service?","text":"<ul> <li> <p>Through Standard Configuration: No. The framework (<code>adk web</code>, <code>adk api_server</code>) is designed to be configured with one single memory service at a time via the <code>--memory_service_uri</code> flag. This single service is then provided to the agent and accessed through the built-in <code>self.search_memory()</code> method. From a configuration standpoint, you can only choose one backend (<code>InMemory</code>, <code>VertexAiMemoryBankService</code>) for all agents served by that process.</p> </li> <li> <p>Within Your Agent's Code: Yes, absolutely. There is nothing preventing you from manually importing and instantiating another memory service directly inside your agent's code. This allows you to access multiple memory sources within a single agent turn.</p> </li> </ul> <p>For example, your agent could use the framework-configured <code>VertexAiMemoryBankService</code> to recall conversational history, and also manually instantiate a <code>InMemoryMemoryService</code> to look up information in a technical manual.</p>"},{"location":"sessions/memory.en/#example-using-two-memory-services","title":"Example: Using Two Memory Services","text":"<p>Here\u2019s how you could implement that in your agent's code:</p> <pre><code>from google.adk.agents import Agent\nfrom google.adk.memory import InMemoryMemoryService, VertexAiMemoryBankService\nfrom google.genai import types\n\nclass MultiMemoryAgent(Agent):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self.memory_service = InMemoryMemoryService()\n        # Manually instantiate a second memory service for document lookups\n        self.vertexai_memorybank_service = VertexAiMemoryBankService(\n            project=\"PROJECT_ID\",\n            location=\"LOCATION\",\n            agent_engine_id=\"AGENT_ENGINE_ID\"\n        )\n\n    async def run(self, request: types.Content, **kwargs) -&gt; types.Content:\n        user_query = request.parts[0].text\n\n        # 1. Search conversational history using the framework-provided memory\n        #    (This would be InMemoryMemoryService if configured)\n        conversation_context = await self.memory_service.search_memory(query=user_query)\n\n        # 2. Search the document knowledge base using the manually created service\n        document_context = await self.vertexai_memorybank_service.search_memory(query=user_query)\n\n        # Combine the context from both sources to generate a better response\n        prompt = \"From our past conversations, I remember:\\n\"\n        prompt += f\"{conversation_context.memories}\\n\\n\"\n        prompt += \"From the technical manuals, I found:\\n\"\n        prompt += f\"{document_context.memories}\\n\\n\"\n        prompt += f\"Based on all this, here is my answer to '{user_query}':\"\n\n        return await self.llm.generate_content_async(prompt)\n</code></pre>"},{"location":"sessions/memory/","title":"\u8a18\u61b6\u9ad4\uff1a\u4f7f\u7528 <code>MemoryService</code> \u5be6\u73fe\u9577\u671f\u77e5\u8b58","text":"<p>\u6211\u5011\u5df2\u7d93\u4e86\u89e3 <code>Session</code> \u5982\u4f55\u8ffd\u8e64\u55ae\u4e00\u9032\u884c\u4e2d\u5c0d\u8a71\u7684\u6b77\u53f2\u7d00\u9304\uff08<code>events</code>\uff09\u8207\u66ab\u5b58\u8cc7\u6599\uff08<code>state</code>\uff09\u3002\u4f46\u5982\u679c agent \u9700\u8981\u56de\u61b6\u904e\u53bb\u5c0d\u8a71\u4e2d\u7684\u8cc7\u8a0a\uff0c\u6216\u662f\u5b58\u53d6\u5916\u90e8\u77e5\u8b58\u5eab\uff0c\u8a72\u600e\u9ebc\u8fa6\uff1f\u9019\u6642\u5c31\u9700\u8981\u9577\u671f\u77e5\u8b58\uff08Long-Term Knowledge\uff09\u4ee5\u53ca<code>MemoryService</code> \u7684\u6982\u5ff5\u3002</p> <p>\u53ef\u4ee5\u9019\u6a23\u7406\u89e3\uff1a</p> <ul> <li><code>Session</code> / <code>State</code>\uff1a \u5c31\u50cf\u4f60\u5728\u55ae\u4e00\u804a\u5929\u4e2d\u7684\u77ed\u671f\u8a18\u61b6\u3002  </li> <li>\u9577\u671f\u77e5\u8b58\uff08Long-Term Knowledge\uff0c<code>MemoryService</code>\uff09\uff1a \u5c31\u50cf agent \u53ef\u4ee5\u67e5\u8a62\u7684\u53ef\u641c\u5c0b\u6a94\u6848\u5eab\u6216\u77e5\u8b58\u5716\u66f8\u9928\uff0c\u88e1\u9762\u53ef\u80fd\u5305\u542b\u8a31\u591a\u904e\u53bb\u5c0d\u8a71\u6216\u5176\u4ed6\u4f86\u6e90\u7684\u8cc7\u8a0a\u3002</li> </ul>"},{"location":"sessions/memory/#memoryservice_1","title":"<code>MemoryService</code> \u7684\u89d2\u8272","text":"<p><code>BaseMemoryService</code> \u5b9a\u7fa9\u4e86\u7ba1\u7406\u9019\u500b\u53ef\u641c\u5c0b\u9577\u671f\u77e5\u8b58\u5eab\u7684\u4ecb\u9762\u3002\u5176\u4e3b\u8981\u8077\u8cac\u5305\u62ec\uff1a</p> <ol> <li>\u8cc7\u8a0a\u64f7\u53d6\uff08<code>add_session_to_memory</code>\uff09\uff1a \u5c07\uff08\u901a\u5e38\u5df2\u5b8c\u6210\u7684\uff09<code>Session</code> \u5167\u5bb9\u64f7\u53d6\u4e26\u52a0\u5165\u9577\u671f\u77e5\u8b58\u5eab\u4e2d\u3002  </li> <li>\u8cc7\u8a0a\u641c\u5c0b\uff08<code>search_memory</code>\uff09\uff1a \u5141\u8a31 agent\uff08\u901a\u5e38\u900f\u904e <code>Tool</code>\uff09\u67e5\u8a62\u77e5\u8b58\u5eab\uff0c\u6839\u64da\u641c\u5c0b\u67e5\u8a62\u53d6\u5f97\u76f8\u95dc\u7247\u6bb5\u6216\u4e0a\u4e0b\u6587\u3002</li> </ol>"},{"location":"sessions/memory/#_1","title":"\u9078\u64c7\u5408\u9069\u7684\u8a18\u61b6\u9ad4\u670d\u52d9","text":"<p>Agent Development Kit (ADK) \u63d0\u4f9b\u5169\u7a2e\u4e0d\u540c\u7684 <code>MemoryService</code> \u5be6\u4f5c\uff0c\u5206\u5225\u9069\u7528\u65bc\u4e0d\u540c\u7684\u4f7f\u7528\u60c5\u5883\u3002\u8acb\u53c3\u8003\u4e0b\u8868\uff0c\u9078\u64c7\u6700\u9069\u5408\u4f60 agent \u7684\u65b9\u6848\u3002</p> \u529f\u80fd InMemoryMemoryService [\u5168\u65b0\uff01] VertexAiMemoryBankService \u6301\u4e45\u6027 \u7121\uff08\u91cd\u555f\u5f8c\u8cc7\u6599\u6703\u907a\u5931\uff09 \u6709\uff08\u7531 Vertex AI \u7ba1\u7406\uff09 \u4e3b\u8981\u4f7f\u7528\u60c5\u5883 \u539f\u578b\u958b\u767c\u3001\u672c\u6a5f\u958b\u767c\u8207\u7c21\u55ae\u6e2c\u8a66 \u5f9e\u4f7f\u7528\u8005\u5c0d\u8a71\u4e2d\u5efa\u7acb\u6709\u610f\u7fa9\u3001\u53ef\u6f14\u9032\u7684\u8a18\u61b6 \u8a18\u61b6\u9ad4\u64f7\u53d6 \u5132\u5b58\u5b8c\u6574\u5c0d\u8a71\u5167\u5bb9 \u5f9e\u5c0d\u8a71\u4e2d\u64f7\u53d6\u6709\u610f\u7fa9\u7684\u8cc7\u8a0a\uff0c\u4e26\u8207\u73fe\u6709\u8a18\u61b6\u6574\u5408\uff08\u7531\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u9a45\u52d5\uff09 \u641c\u5c0b\u80fd\u529b \u57fa\u672c\u95dc\u9375\u5b57\u6bd4\u5c0d \u9032\u968e\u8a9e\u610f\u641c\u5c0b \u8a2d\u5b9a\u8907\u96dc\u5ea6 \u7121\uff0c\u9810\u8a2d\u5373\u555f\u7528 \u4f4e\uff0c\u9700\u8981\u5728 Vertex AI \u4e0a\u6709 Agent Engine \u76f8\u4f9d\u5957\u4ef6 \u7121 Google Cloud \u5c08\u6848\u3001Vertex AI API \u9069\u7528\u6642\u6a5f \u9700\u8981\u8de8\u591a\u500b session \u804a\u5929\u8a18\u9304\u9032\u884c\u641c\u5c0b\u3001\u539f\u578b\u958b\u767c\u6642 \u5e0c\u671b agent \u80fd\u8a18\u4f4f\u4e26\u5b78\u7fd2\u904e\u53bb\u4e92\u52d5\u5167\u5bb9\u6642"},{"location":"sessions/memory/#in-memory","title":"In-Memory \u8a18\u61b6\u9ad4","text":"<p><code>InMemoryMemoryService</code> \u6703\u5c07 session \u8cc7\u8a0a\u5132\u5b58\u5728\u61c9\u7528\u7a0b\u5f0f\u7684\u8a18\u61b6\u9ad4\u4e2d\uff0c\u4e26\u4ee5\u57fa\u672c\u95dc\u9375\u5b57\u6bd4\u5c0d\u65b9\u5f0f\u9032\u884c\u641c\u5c0b\u3002\u5b83\u4e0d\u9700\u8981\u4efb\u4f55\u8a2d\u5b9a\uff0c\u6700\u9069\u5408\u7528\u65bc\u4e0d\u9700\u6301\u4e45\u5316\u7684\u539f\u578b\u958b\u767c\u8207\u7c21\u55ae\u6e2c\u8a66\u60c5\u5883\u3002</p> <pre><code>from google.adk.memory import InMemoryMemoryService\nmemory_service = InMemoryMemoryService()\n</code></pre> <p>\u7bc4\u4f8b\uff1a\u65b0\u589e\u8207\u641c\u5c0b\u8a18\u61b6\u9ad4</p> <p>\u672c\u7bc4\u4f8b\u70ba\u7c21\u5316\u8aaa\u660e\uff0c\u5c55\u793a\u4f7f\u7528 <code>InMemoryMemoryService</code> \u7684\u57fa\u672c\u6d41\u7a0b\u3002</p> \u5b8c\u6574\u7a0b\u5f0f\u78bc <pre><code>import asyncio\nfrom google.adk.agents import LlmAgent\nfrom google.adk.sessions import InMemorySessionService, Session\nfrom google.adk.memory import InMemoryMemoryService # Import MemoryService\nfrom google.adk.runners import Runner\nfrom google.adk.tools import load_memory # Tool to query memory\nfrom google.genai.types import Content, Part\n\n# --- Constants ---\nAPP_NAME = \"memory_example_app\"\nUSER_ID = \"mem_user\"\nMODEL = \"gemini-2.0-flash\" # Use a valid model\n\n# --- Agent Definitions ---\n# Agent 1: Simple agent to capture information\ninfo_capture_agent = LlmAgent(\n    model=MODEL,\n    name=\"InfoCaptureAgent\",\n    instruction=\"Acknowledge the user's statement.\",\n)\n\n# Agent 2: Agent that can use memory\nmemory_recall_agent = LlmAgent(\n    model=MODEL,\n    name=\"MemoryRecallAgent\",\n    instruction=\"Answer the user's question. Use the 'load_memory' tool \"\n                \"if the answer might be in past conversations.\",\n    tools=[load_memory] # Give the agent the tool\n)\n\n# --- Services ---\n# Services must be shared across runners to share state and memory\nsession_service = InMemorySessionService()\nmemory_service = InMemoryMemoryService() # Use in-memory for demo\n\nasync def run_scenario():\n    # --- Scenario ---\n\n    # Turn 1: Capture some information in a session\n    print(\"--- Turn 1: Capturing Information ---\")\n    runner1 = Runner(\n        # Start with the info capture agent\n        agent=info_capture_agent,\n        app_name=APP_NAME,\n        session_service=session_service,\n        memory_service=memory_service # Provide the memory service to the Runner\n    )\n    session1_id = \"session_info\"\n    await runner1.session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=session1_id)\n    user_input1 = Content(parts=[Part(text=\"My favorite project is Project Alpha.\")], role=\"user\")\n\n    # Run the agent\n    final_response_text = \"(No final response)\"\n    async for event in runner1.run_async(user_id=USER_ID, session_id=session1_id, new_message=user_input1):\n        if event.is_final_response() and event.content and event.content.parts:\n            final_response_text = event.content.parts[0].text\n    print(f\"Agent 1 Response: {final_response_text}\")\n\n    # Get the completed session\n    completed_session1 = await runner1.session_service.get_session(app_name=APP_NAME, user_id=USER_ID, session_id=session1_id)\n\n    # Add this session's content to the Memory Service\n    print(\"\\n--- Adding Session 1 to Memory ---\")\n    await memory_service.add_session_to_memory(completed_session1)\n    print(\"Session added to memory.\")\n\n    # Turn 2: Recall the information in a new session\n    print(\"\\n--- Turn 2: Recalling Information ---\")\n    runner2 = Runner(\n        # Use the second agent, which has the memory tool\n        agent=memory_recall_agent,\n        app_name=APP_NAME,\n        session_service=session_service, # Reuse the same service\n        memory_service=memory_service   # Reuse the same service\n    )\n    session2_id = \"session_recall\"\n    await runner2.session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=session2_id)\n    user_input2 = Content(parts=[Part(text=\"What is my favorite project?\")], role=\"user\")\n\n    # Run the second agent\n    final_response_text_2 = \"(No final response)\"\n    async for event in runner2.run_async(user_id=USER_ID, session_id=session2_id, new_message=user_input2):\n        if event.is_final_response() and event.content and event.content.parts:\n            final_response_text_2 = event.content.parts[0].text\n    print(f\"Agent 2 Response: {final_response_text_2}\")\n\n# To run this example, you can use the following snippet:\n# asyncio.run(run_scenario())\n\n# await run_scenario()\n</code></pre>"},{"location":"sessions/memory/#vertex-ai-memory-bank","title":"Vertex AI Memory Bank","text":"<p><code>VertexAiMemoryBankService</code> \u8b93\u4f60\u7684 agent \u80fd\u5920\u9023\u63a5\u5230 Vertex AI Memory Bank\uff0c\u9019\u662f\u4e00\u9805\u7531 Google Cloud \u5b8c\u5168\u8a17\u7ba1\u7684\u670d\u52d9\uff0c\u70ba\u5c0d\u8a71\u578b agent \u63d0\u4f9b\u5148\u9032\u4e14\u6301\u4e45\u7684\u8a18\u61b6\u9ad4\u529f\u80fd\u3002</p>"},{"location":"sessions/memory/#_2","title":"\u904b\u4f5c\u65b9\u5f0f","text":"<p>\u6b64\u670d\u52d9\u6703\u81ea\u52d5\u8655\u7406\u5169\u9805\u95dc\u9375\u64cd\u4f5c\uff1a</p> <ul> <li>\u7522\u751f\u8a18\u61b6\uff08Generating Memories\uff09\uff1a \u5728\u6bcf\u6b21\u5c0d\u8a71\u7d50\u675f\u6642\uff0cAgent Development Kit (ADK) \u6703\u5c07\u8a72 session \u7684\u4e8b\u4ef6\u50b3\u9001\u5230 Memory Bank\uff0cMemory Bank \u6703\u667a\u6167\u5730\u8655\u7406\u4e26\u5c07\u8cc7\u8a0a\u5132\u5b58\u70ba\u300c\u8a18\u61b6\u300d\u3002</li> <li>\u6aa2\u7d22\u8a18\u61b6\uff08Retrieving Memories\uff09\uff1a \u4f60\u7684 agent \u7a0b\u5f0f\u78bc\u53ef\u4ee5\u5c0d Memory Bank \u767c\u51fa\u641c\u5c0b\u67e5\u8a62\uff0c\u4ee5\u5f9e\u904e\u53bb\u7684\u5c0d\u8a71\u4e2d\u6aa2\u7d22\u76f8\u95dc\u8a18\u61b6\u3002</li> </ul>"},{"location":"sessions/memory/#_3","title":"\u5148\u6c7a\u689d\u4ef6","text":"<p>\u5728\u4f7f\u7528\u6b64\u529f\u80fd\u4e4b\u524d\uff0c\u4f60\u5fc5\u9808\u5177\u5099\uff1a</p> <ol> <li>Google Cloud \u5c08\u6848\uff1a \u4e26\u5df2\u555f\u7528 Vertex AI API\u3002</li> <li>Agent Engine\uff1a \u4f60\u9700\u8981\u5728 Vertex AI \u4e2d\u5efa\u7acb\u4e00\u500b Agent Engine\u3002\u9019\u5c07\u63d0\u4f9b\u4f60\u8a2d\u5b9a\u6240\u9700\u7684 Agent Engine ID\u3002</li> <li>\u9a57\u8b49\uff08Authentication\uff09\uff1a \u78ba\u4fdd\u4f60\u7684\u672c\u6a5f\u74b0\u5883\u5df2\u901a\u904e\u9a57\u8b49\uff0c\u53ef\u4ee5\u5b58\u53d6 Google Cloud \u670d\u52d9\u3002\u6700\u7c21\u55ae\u7684\u65b9\u5f0f\u662f\u57f7\u884c\uff1a     <pre><code>gcloud auth application-default login\n</code></pre></li> <li>\u74b0\u5883\u8b8a\u6578\uff1a \u6b64\u670d\u52d9\u9700\u8981\u4f60\u7684 Google Cloud \u5c08\u6848 ID \u4ee5\u53ca Location\u3002\u8acb\u5c07\u5b83\u5011\u8a2d\u70ba\u74b0\u5883\u8b8a\u6578\uff1a     <pre><code>export GOOGLE_CLOUD_PROJECT=\"your-gcp-project-id\"\nexport GOOGLE_CLOUD_LOCATION=\"your-gcp-location\"\n</code></pre></li> </ol>"},{"location":"sessions/memory/#_4","title":"\u8a2d\u5b9a","text":"<p>\u8981\u5c07\u4f60\u7684 agent \u9023\u63a5\u5230 Memory Bank\uff0c\u53ef\u4ee5\u5728\u555f\u52d5 Agent Development Kit (ADK) \u4f3a\u670d\u5668\u6642\u4f7f\u7528 <code>--memory_service_uri</code> \u65d7\u6a19\uff08<code>adk web</code> \u6216 <code>adk api_server</code>\uff09\u3002URI \u5fc5\u9808\u7b26\u5408 <code>agentengine://&lt;agent_engine_id&gt;</code> \u7684\u683c\u5f0f\u3002</p> bash<pre><code>adk web path/to/your/agents_dir --memory_service_uri=\"agentengine://1234567890\"\n</code></pre> <p>\u6216\u8005\uff0c\u4f60\u4e5f\u53ef\u4ee5\u624b\u52d5\u5be6\u4f8b\u5316<code>VertexAiMemoryBankService</code>\uff0c\u4e26\u5c07\u5176\u50b3\u905e\u7d66<code>Runner</code>\uff0c\u4ee5\u5c07 agent \u8a2d\u5b9a\u70ba\u4f7f\u7528 Memory Bank\u3002</p> <pre><code>from google.adk.memory import VertexAiMemoryBankService\n\nagent_engine_id = agent_engine.api_resource.name.split(\"/\")[-1]\n\nmemory_service = VertexAiMemoryBankService(\n    project=\"PROJECT_ID\",\n    location=\"LOCATION\",\n    agent_engine_id=agent_engine_id\n)\n\nrunner = adk.Runner(\n    ...\n    memory_service=memory_service\n)\n</code></pre>"},{"location":"sessions/memory/#agent-memory","title":"\u5728 Agent \u4e2d\u4f7f\u7528 Memory","text":"<p>\u5b8c\u6210\u670d\u52d9\u8a2d\u5b9a\u5f8c\uff0cAgent Development Kit (ADK) \u6703\u81ea\u52d5\u5c07 session state \u5132\u5b58\u5230 Memory Bank\u3002\u82e5\u8981\u8b93\u4f60\u7684 agent \u4f7f\u7528\u9019\u4e9b\u8a18\u61b6\u8cc7\u6599\uff0c\u4f60\u9700\u8981\u5728 agent \u7684\u7a0b\u5f0f\u78bc\u4e2d\u547c\u53eb <code>search_memory</code> \u65b9\u6cd5\u3002</p> <p>\u9019\u901a\u5e38\u6703\u5728\u6bcf\u500b agent \u56de\u5408\u7684\u958b\u59cb\u968e\u6bb5\u57f7\u884c\uff0c\u4ee5\u4fbf\u5728\u7522\u751f\u56de\u61c9\u524d\u53d6\u5f97\u76f8\u95dc\u7684\u4e0a\u4e0b\u6587\u8cc7\u8a0a\u3002</p> <p>\u7bc4\u4f8b\uff1a</p> <pre><code>from google.adk.agents import Agent\nfrom google.genai import types\n\nclass MyAgent(Agent):\n    async def run(self, request: types.Content, **kwargs) -&gt; types.Content:\n        # Get the user's latest message\n        user_query = request.parts[0].text\n\n        # Search the memory for context related to the user's query\n        search_result = await self.search_memory(query=user_query)\n\n        # Create a prompt that includes the retrieved memories\n        prompt = f\"Based on my memory, here's what I recall about your query: {search_result.memories}\\n\\nNow, please respond to: {user_query}\"\n\n        # Call the LLM with the enhanced prompt\n        return await self.llm.generate_content_async(prompt)\n</code></pre>"},{"location":"sessions/memory/#_5","title":"\u9032\u968e\u6982\u5ff5","text":""},{"location":"sessions/memory/#_6","title":"\u8a18\u61b6\u9ad4\u5728\u5be6\u52d9\u4e0a\u7684\u904b\u4f5c\u65b9\u5f0f","text":"<p>\u8a18\u61b6\u9ad4\u5de5\u4f5c\u6d41\u7a0b\u5728\u5167\u90e8\u5305\u542b\u4ee5\u4e0b\u6b65\u9a5f\uff1a</p> <ol> <li>Session \u4e92\u52d5\uff1a \u4f7f\u7528\u8005\u900f\u904e<code>Session</code>\u8207 agent \u4e92\u52d5\uff0c\u8a72 session \u7531<code>SessionService</code>\u7ba1\u7406\u3002\u4e8b\u4ef6\uff08Event\uff09\u6703\u88ab\u52a0\u5165\uff0c\u4e26\u4e14 state \u53ef\u80fd\u6703\u88ab\u66f4\u65b0\u3002  </li> <li>\u5beb\u5165\u8a18\u61b6\u9ad4\uff1a \u5728\u67d0\u500b\u6642\u9ede\uff08\u901a\u5e38\u662f\u5728 session \u7d50\u675f\u6216\u7522\u751f\u4e86\u91cd\u8981\u8cc7\u8a0a\u6642\uff09\uff0c\u4f60\u7684\u61c9\u7528\u7a0b\u5f0f\u6703\u547c\u53eb<code>memory_service.add_session_to_memory(session)</code>\u3002\u9019\u500b\u65b9\u6cd5\u6703\u5f9e session \u7684\u4e8b\u4ef6\u4e2d\u64f7\u53d6\u76f8\u95dc\u8cc7\u8a0a\uff0c\u4e26\u5c07\u5176\u52a0\u5165\u9577\u671f\u77e5\u8b58\u5132\u5b58\u5340\uff08\u8a18\u61b6\u9ad4\u4e2d\u7684\u5b57\u5178\u6216 RAG Corpus\uff09\u3002  </li> <li>\u5f8c\u7e8c\u67e5\u8a62\uff1a \u5728\u4e0d\u540c\uff08\u6216\u540c\u4e00\uff09\u500b session \u4e2d\uff0c\u4f7f\u7528\u8005\u53ef\u80fd\u6703\u63d0\u51fa\u9700\u8981\u904e\u53bb\u8108\u7d61\u7684\u554f\u984c\uff08\u4f8b\u5982\uff1a\u300c\u6211\u5011\u4e0a\u9031\u8a0e\u8ad6\u904e project X \u4ec0\u9ebc\u5167\u5bb9\uff1f\u300d\uff09\u3002  </li> <li>Agent \u4f7f\u7528\u8a18\u61b6\u9ad4\u5de5\u5177\uff1a \u914d\u5099\u8a18\u61b6\u9ad4\u6aa2\u7d22\u5de5\u5177\uff08\u5982\u5167\u5efa\u7684<code>load_memory</code>\u5de5\u5177\uff09\u7684 agent \u6703\u8fa8\u8b58\u51fa\u9700\u8981\u904e\u53bb\u8108\u7d61\uff0c\u4e26\u547c\u53eb\u8a72\u5de5\u5177\uff0c\u50b3\u5165\u67e5\u8a62\u5b57\u4e32\uff08\u4f8b\u5982\uff1a\u300cdiscussion project X last week\u300d\uff09\u3002  </li> <li>\u57f7\u884c\u641c\u5c0b\uff1a \u8a72\u5de5\u5177\u5167\u90e8\u6703\u547c\u53eb<code>memory_service.search_memory(app_name, user_id, query)</code>\u3002  </li> <li>\u56de\u50b3\u7d50\u679c\uff1a <code>MemoryService</code>\u6703\u5728\u5176\u5132\u5b58\u5340\u4e2d\uff08\u4f7f\u7528\u95dc\u9375\u5b57\u6bd4\u5c0d\u6216\u8a9e\u610f\u641c\u5c0b\uff09\u641c\u5c0b\uff0c\u4e26\u4ee5<code>SearchMemoryResponse</code>\u5f62\u5f0f\u56de\u50b3\u76f8\u95dc\u7247\u6bb5\uff0c\u5167\u5bb9\u5305\u542b<code>MemoryResult</code>\u7269\u4ef6\u7684\u5217\u8868\uff08\u6bcf\u500b\u7269\u4ef6\u53ef\u80fd\u5305\u542b\u4f86\u81ea\u76f8\u95dc\u904e\u53bb session \u7684\u4e8b\u4ef6\uff09\u3002  </li> <li>Agent \u4f7f\u7528\u7d50\u679c\uff1a \u5de5\u5177\u6703\u5c07\u9019\u4e9b\u7d50\u679c\u56de\u50b3\u7d66 agent\uff0c\u901a\u5e38\u4f5c\u70ba context \u6216 function response \u7684\u4e00\u90e8\u5206\u3002agent \u4fbf\u53ef\u5229\u7528\u9019\u4e9b\u6aa2\u7d22\u5230\u7684\u8cc7\u8a0a\uff0c\u4f86\u7d44\u6210\u6700\u7d42\u56de\u8986\u7d66\u4f7f\u7528\u8005\u7684\u7b54\u6848\u3002</li> </ol>"},{"location":"sessions/memory/#agent","title":"agent \u53ef\u4ee5\u5b58\u53d6\u591a\u500b\u8a18\u61b6\u9ad4\u670d\u52d9\u55ce\uff1f","text":"<ul> <li> <p>\u6a19\u6e96\u8a2d\u5b9a\u4e0b\uff1a\u4e0d\u884c\u3002 \u9019\u500b framework\uff08<code>adk web</code>\u3001<code>adk api_server</code>\uff09\u8a2d\u8a08\u4e0a\u4e00\u6b21\u53ea\u80fd\u900f\u904e<code>--memory_service_uri</code>\u65d7\u6a19\u8a2d\u5b9a\u4e00\u500b\u8a18\u61b6\u9ad4\u670d\u52d9\u3002\u9019\u500b\u55ae\u4e00\u670d\u52d9\u6703\u63d0\u4f9b\u7d66 agent\uff0c\u4e26\u900f\u904e\u5167\u5efa\u7684<code>self.search_memory()</code>\u65b9\u6cd5\u5b58\u53d6\u3002\u5f9e\u8a2d\u5b9a\u7684\u89d2\u5ea6\u4f86\u770b\uff0c\u4f60\u53ea\u80fd\u70ba\u8a72 process \u4e0b\u6240\u6709 agent \u9078\u64c7\u4e00\u500b\u5f8c\u7aef\uff08<code>InMemory</code>\u3001<code>VertexAiMemoryBankService</code>\uff09\u3002</p> </li> <li> <p>\u5728\u4f60\u7684 agent \u7a0b\u5f0f\u78bc\u4e2d\uff1a\u53ef\u4ee5\uff0c\u7d55\u5c0d\u53ef\u4ee5\u3002 \u6c92\u6709\u4efb\u4f55\u9650\u5236\u963b\u6b62\u4f60\u5728 agent \u7684\u7a0b\u5f0f\u78bc\u5167\u624b\u52d5 import \u4e26\u5be6\u4f8b\u5316\u53e6\u4e00\u500b\u8a18\u61b6\u9ad4\u670d\u52d9\u3002\u9019\u8b93\u4f60\u80fd\u5728\u55ae\u4e00 agent \u56de\u5408\u4e2d\u5b58\u53d6\u591a\u500b\u8a18\u61b6\u9ad4\u4f86\u6e90\u3002</p> </li> </ul> <p>\u8209\u4f8b\u4f86\u8aaa\uff0c\u4f60\u7684 agent \u53ef\u4ee5\u5229\u7528 framework \u8a2d\u5b9a\u7684<code>VertexAiMemoryBankService</code>\u4f86\u56de\u61b6\u5c0d\u8a71\u6b77\u53f2\uff0c\u540c\u6642\u624b\u52d5\u5be6\u4f8b\u5316<code>InMemoryMemoryService</code>\u4f86\u67e5\u8a62\u6280\u8853\u624b\u518a\u4e2d\u7684\u8cc7\u8a0a\u3002</p>"},{"location":"sessions/memory/#_7","title":"\u7bc4\u4f8b\uff1a\u540c\u6642\u4f7f\u7528\u5169\u500b\u8a18\u61b6\u9ad4\u670d\u52d9","text":"<p>\u4ee5\u4e0b\u662f\u5728\u4f60\u7684 agent \u7a0b\u5f0f\u78bc\u4e2d\u5be6\u4f5c\u6b64\u529f\u80fd\u7684\u65b9\u6cd5\uff1a</p> <pre><code>from google.adk.agents import Agent\nfrom google.adk.memory import InMemoryMemoryService, VertexAiMemoryBankService\nfrom google.genai import types\n\nclass MultiMemoryAgent(Agent):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self.memory_service = InMemoryMemoryService()\n        # Manually instantiate a second memory service for document lookups\n        self.vertexai_memorybank_service = VertexAiMemoryBankService(\n            project=\"PROJECT_ID\",\n            location=\"LOCATION\",\n            agent_engine_id=\"AGENT_ENGINE_ID\"\n        )\n\n    async def run(self, request: types.Content, **kwargs) -&gt; types.Content:\n        user_query = request.parts[0].text\n\n        # 1. Search conversational history using the framework-provided memory\n        #    (This would be InMemoryMemoryService if configured)\n        conversation_context = await self.memory_service.search_memory(query=user_query)\n\n        # 2. Search the document knowledge base using the manually created service\n        document_context = await self.vertexai_memorybank_service.search_memory(query=user_query)\n\n        # Combine the context from both sources to generate a better response\n        prompt = \"From our past conversations, I remember:\\n\"\n        prompt += f\"{conversation_context.memories}\\n\\n\"\n        prompt += \"From the technical manuals, I found:\\n\"\n        prompt += f\"{document_context.memories}\\n\\n\"\n        prompt += f\"Based on all this, here is my answer to '{user_query}':\"\n\n        return await self.llm.generate_content_async(prompt)\n</code></pre>"},{"location":"sessions/session.en/","title":"Session: Tracking Individual Conversations","text":"<p>Following our Introduction, let's dive into the <code>Session</code>. Think back to the idea of a \"conversation thread.\" Just like you wouldn't start every text message from scratch, agents need context regarding the ongoing interaction. <code>Session</code> is the ADK object designed specifically to track and manage these individual conversation threads.</p>"},{"location":"sessions/session.en/#the-session-object","title":"The <code>Session</code> Object","text":"<p>When a user starts interacting with your agent, the <code>SessionService</code> creates a <code>Session</code> object (<code>google.adk.sessions.Session</code>). This object acts as the container holding everything related to that one specific chat thread. Here are its key properties:</p> <ul> <li>Identification (<code>id</code>, <code>appName</code>, <code>userId</code>): Unique labels for the     conversation.<ul> <li><code>id</code>: A unique identifier for this specific conversation thread, essential for retrieving it later. A SessionService object can handle multiple <code>Session</code>(s). This field identifies which particular session object are we referring to. For example, \"test_id_modification\".</li> <li><code>app_name</code>: Identifies which agent application this conversation belongs to. For example, \"id_modifier_workflow\". </li> <li><code>userId</code>: Links the conversation to a particular user.</li> </ul> </li> <li>History (<code>events</code>): A chronological sequence of all interactions     (<code>Event</code> objects \u2013 user messages, agent responses, tool actions) that have     occurred within this specific thread.</li> <li>Session State (<code>state</code>): A place to store temporary data relevant only     to this specific, ongoing conversation. This acts as a scratchpad for the     agent during the interaction. We will cover how to use and manage <code>state</code> in     detail in the next section.</li> <li>Activity Tracking (<code>lastUpdateTime</code>): A timestamp indicating the last     time an event occurred in this conversation thread.</li> </ul>"},{"location":"sessions/session.en/#example-examining-session-properties","title":"Example: Examining Session Properties","text":"PythonJava <pre><code> from google.adk.sessions import InMemorySessionService, Session\n\n # Create a simple session to examine its properties\n temp_service = InMemorySessionService()\n example_session = await temp_service.create_session(\n     app_name=\"my_app\",\n     user_id=\"example_user\",\n     state={\"initial_key\": \"initial_value\"} # State can be initialized\n )\n\n print(f\"--- Examining Session Properties ---\")\n print(f\"ID (`id`):                {example_session.id}\")\n print(f\"Application Name (`app_name`): {example_session.app_name}\")\n print(f\"User ID (`user_id`):         {example_session.user_id}\")\n print(f\"State (`state`):           {example_session.state}\") # Note: Only shows initial state here\n print(f\"Events (`events`):         {example_session.events}\") # Initially empty\n print(f\"Last Update (`last_update_time`): {example_session.last_update_time:.2f}\")\n print(f\"---------------------------------\")\n\n # Clean up (optional for this example)\n temp_service = await temp_service.delete_session(app_name=example_session.app_name,\n                             user_id=example_session.user_id, session_id=example_session.id)\n print(\"The final status of temp_service - \", temp_service)\n</code></pre> <pre><code> import com.google.adk.sessions.InMemorySessionService;\n import com.google.adk.sessions.Session;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.ConcurrentHashMap;\n\n String sessionId = \"123\";\n String appName = \"example-app\"; // Example app name\n String userId = \"example-user\"; // Example user id\n ConcurrentMap&lt;String, Object&gt; initialState = new ConcurrentHashMap&lt;&gt;(Map.of(\"newKey\", \"newValue\"));\n InMemorySessionService exampleSessionService = new InMemorySessionService();\n\n // Create Session\n Session exampleSession = exampleSessionService.createSession(\n     appName, userId, initialState, Optional.of(sessionId)).blockingGet();\n System.out.println(\"Session created successfully.\");\n\n System.out.println(\"--- Examining Session Properties ---\");\n System.out.printf(\"ID (`id`): %s%n\", exampleSession.id());\n System.out.printf(\"Application Name (`appName`): %s%n\", exampleSession.appName());\n System.out.printf(\"User ID (`userId`): %s%n\", exampleSession.userId());\n System.out.printf(\"State (`state`): %s%n\", exampleSession.state());\n System.out.println(\"------------------------------------\");\n\n\n // Clean up (optional for this example)\n var unused = exampleSessionService.deleteSession(appName, userId, sessionId);\n</code></pre> <p>(Note: The state shown above is only the initial state. State updates happen via events, as discussed in the State section.)</p>"},{"location":"sessions/session.en/#managing-sessions-with-a-sessionservice","title":"Managing Sessions with a <code>SessionService</code>","text":"<p>As seen above, you don't typically create or manage <code>Session</code> objects directly. Instead, you use a <code>SessionService</code>. This service acts as the central manager responsible for the entire lifecycle of your conversation sessions.</p> <p>Its core responsibilities include:</p> <ul> <li>Starting New Conversations: Creating fresh <code>Session</code> objects when a user     begins an interaction.</li> <li>Resuming Existing Conversations: Retrieving a specific <code>Session</code> (using     its ID) so the agent can continue where it left off.</li> <li>Saving Progress: Appending new interactions (<code>Event</code> objects) to a     session's history. This is also the mechanism through which session <code>state</code>     gets updated (more in the <code>State</code> section).</li> <li>Listing Conversations: Finding the active session threads for a     particular user and application.</li> <li>Cleaning Up: Deleting <code>Session</code> objects and their associated data when     conversations are finished or no longer needed.</li> </ul>"},{"location":"sessions/session.en/#sessionservice-implementations","title":"<code>SessionService</code> Implementations","text":"<p>ADK provides different <code>SessionService</code> implementations, allowing you to choose the storage backend that best suits your needs:</p> <ol> <li> <p><code>InMemorySessionService</code></p> <ul> <li>How it works: Stores all session data directly in the application's     memory.</li> <li>Persistence: None. All conversation data is lost if the     application restarts.</li> <li>Requires: Nothing extra.</li> <li>Best for: Quick development, local testing, examples, and scenarios     where long-term persistence isn't required.</li> </ul> PythonJava <pre><code> from google.adk.sessions import InMemorySessionService\n session_service = InMemorySessionService()\n</code></pre> <pre><code> import com.google.adk.sessions.InMemorySessionService;\n InMemorySessionService exampleSessionService = new InMemorySessionService();\n</code></pre> </li> <li> <p><code>VertexAiSessionService</code></p> <ul> <li>How it works: Uses Google Cloud Vertex AI infrastructure via API     calls for session management.</li> <li>Persistence: Yes. Data is managed reliably and scalably via     Vertex AI Agent Engine.</li> <li>Requires:<ul> <li>A Google Cloud project (<code>pip install vertexai</code>)</li> <li>A Google Cloud storage bucket that can be configured by this     step.</li> <li>A Reasoning Engine resource name/ID that can setup following this     tutorial.</li> <li>If you do not have a Google Cloud project and you want to try the VertexAiSessionService for free, see how to try Session and Memory for free.</li> </ul> </li> <li>Best for: Scalable production applications deployed on Google Cloud,     especially when integrating with other Vertex AI features.</li> </ul> PythonJava <pre><code># Requires: pip install google-adk[vertexai]\n# Plus GCP setup and authentication\nfrom google.adk.sessions import VertexAiSessionService\n\nPROJECT_ID = \"your-gcp-project-id\"\nLOCATION = \"us-central1\"\n# The app_name used with this service should be the Reasoning Engine ID or name\nREASONING_ENGINE_APP_NAME = \"projects/your-gcp-project-id/locations/us-central1/reasoningEngines/your-engine-id\"\n\nsession_service = VertexAiSessionService(project=PROJECT_ID, location=LOCATION)\n# Use REASONING_ENGINE_APP_NAME when calling service methods, e.g.:\n# session_service = await session_service.create_session(app_name=REASONING_ENGINE_APP_NAME, ...)\n</code></pre> <pre><code>// Please look at the set of requirements above, consequently export the following in your bashrc file:\n// export GOOGLE_CLOUD_PROJECT=my_gcp_project\n// export GOOGLE_CLOUD_LOCATION=us-central1\n// export GOOGLE_API_KEY=my_api_key\n\nimport com.google.adk.sessions.VertexAiSessionService;\nimport java.util.UUID;\n\nString sessionId = UUID.randomUUID().toString();\nString reasoningEngineAppName = \"123456789\";\nString userId = \"u_123\"; // Example user id\nConcurrentMap&lt;String, Object&gt; initialState = new\n    ConcurrentHashMap&lt;&gt;(); // No initial state needed for this example\n\nVertexAiSessionService sessionService = new VertexAiSessionService();\nSession mySession =\n    sessionService\n        .createSession(reasoningEngineAppName, userId, initialState, Optional.of(sessionId))\n        .blockingGet();\n</code></pre> </li> <li> <p><code>DatabaseSessionService</code></p> <p></p> <ul> <li>How it works: Connects to a relational database (e.g., PostgreSQL,     MySQL, SQLite) to store session data persistently in tables.</li> <li>Persistence: Yes. Data survives application restarts.</li> <li>Requires: A configured database.</li> <li>Best for: Applications needing reliable, persistent storage that you     manage yourself.</li> </ul> <pre><code>from google.adk.sessions import DatabaseSessionService\n# Example using a local SQLite file:\ndb_url = \"sqlite:///./my_agent_data.db\"\nsession_service = DatabaseSessionService(db_url=db_url)\n</code></pre> </li> </ol> <p>Choosing the right <code>SessionService</code> is key to defining how your agent's conversation history and temporary data are stored and persist.</p>"},{"location":"sessions/session.en/#the-session-lifecycle","title":"The Session Lifecycle","text":"<p>Here\u2019s a simplified flow of how <code>Session</code> and <code>SessionService</code> work together during a conversation turn:</p> <ol> <li>Start or Resume: Your application needs to use the <code>SessionService</code> to     either <code>create_session</code> (for a new chat) or use an existing session id.</li> <li>Context Provided: The <code>Runner</code> gets the appropriate <code>Session</code> object     from the appropriate service method, providing the agent with access to the     corresponding Session's <code>state</code> and <code>events</code>.</li> <li>Agent Processing: The user prompts the agent with a query. The agent     analyzes the query and potentially the session <code>state</code> and <code>events</code> history     to determine the response.</li> <li>Response &amp; State Update: The agent generates a response (and potentially     flags data to be updated in the <code>state</code>). The <code>Runner</code> packages this as an     <code>Event</code>.</li> <li>Save Interaction: The <code>Runner</code> calls     <code>sessionService.append_event(session, event)</code> with the <code>session</code> and the new     <code>event</code> as the arguments. The service adds the <code>Event</code> to the history and     updates the session's <code>state</code> in storage based on information within the     event. The session's <code>last_update_time</code> also get updated.</li> <li>Ready for Next: The agent's response goes to the user. The updated     <code>Session</code> is now stored by the <code>SessionService</code>, ready for the next turn     (which restarts the cycle at step 1, usually with the continuation of the     conversation in the current session).</li> <li>End Conversation: When the conversation is over, your application calls     <code>sessionService.delete_session(...)</code> to clean up the stored session data if     it is no longer required.</li> </ol> <p>This cycle highlights how the <code>SessionService</code> ensures conversational continuity by managing the history and state associated with each <code>Session</code> object.</p>"},{"location":"sessions/session/","title":"Session\uff1a\u8ffd\u8e64\u500b\u5225\u5c0d\u8a71","text":"<p>\u5728\u95b1\u8b80\u5b8c\u524d\u8a00\u5f8c\uff0c\u8b93\u6211\u5011\u6df1\u5165\u4e86\u89e3<code>Session</code>\u3002\u56de\u60f3\u4e00\u4e0b\u300c\u5c0d\u8a71\u4e32\u300d\u9019\u500b\u6982\u5ff5\u3002\u5c31\u50cf\u4f60\u4e0d\u6703\u6bcf\u6b21\u50b3\u9001\u7c21\u8a0a\u90fd\u5f9e\u982d\u958b\u59cb\uff0cagent \u4e5f\u9700\u8981\u4e86\u89e3\u6301\u7e8c\u4e92\u52d5\u7684\u4e0a\u4e0b\u6587\u3002<code>Session</code> \u662f\u5c08\u70ba\u8ffd\u8e64\u8207\u7ba1\u7406\u9019\u4e9b\u500b\u5225\u5c0d\u8a71\u4e32\u800c\u8a2d\u8a08\u7684 Agent Development Kit (ADK) \u7269\u4ef6\u3002</p>"},{"location":"sessions/session/#session_1","title":"<code>Session</code> \u7269\u4ef6","text":"<p>\u7576\u4f7f\u7528\u8005\u958b\u59cb\u8207\u4f60\u7684 agent \u4e92\u52d5\u6642\uff0c<code>SessionService</code> \u6703\u5efa\u7acb\u4e00\u500b <code>Session</code> \u7269\u4ef6\uff08<code>google.adk.sessions.Session</code>\uff09\u3002\u9019\u500b\u7269\u4ef6\u5c31\u50cf\u662f\u4e00\u500b\u5bb9\u5668\uff0c\u5c08\u9580\u5132\u5b58\u8207\u8a72\u7279\u5b9a\u5c0d\u8a71\u4e32\u76f8\u95dc\u7684\u6240\u6709\u8cc7\u8a0a\u3002\u4ee5\u4e0b\u662f\u5b83\u7684\u4e3b\u8981\u5c6c\u6027\uff1a</p> <ul> <li>\u8b58\u5225\u8cc7\u8a0a\uff08<code>id</code>\u3001<code>appName</code>\u3001<code>userId</code>\uff09\uff1a \u5c0d\u8a71\u7684\u552f\u4e00\u6a19\u7c64\u3002<ul> <li><code>id</code>\uff1a\u6b64\u7279\u5b9a\u5c0d\u8a71\u4e32\u7684\u552f\u4e00\u8b58\u5225\u78bc\uff0c\u5c0d\u65bc\u5f8c\u7e8c\u64f7\u53d6\u975e\u5e38\u91cd\u8981\u3002\u4e00\u500b SessionService \u7269\u4ef6\u53ef\u4ee5\u7ba1\u7406\u591a\u500b <code>Session</code>\u3002\u6b64\u6b04\u4f4d\u7528\u4f86\u6a19\u793a\u6211\u5011\u6307\u7684\u662f\u54ea\u4e00\u500b session \u7269\u4ef6\u3002\u4f8b\u5982\uff1a\"test_id_modification\"\u3002</li> <li><code>app_name</code>\uff1a\u6a19\u793a\u6b64\u5c0d\u8a71\u5c6c\u65bc\u54ea\u500b agent \u61c9\u7528\u7a0b\u5f0f\u3002\u4f8b\u5982\uff1a\"id_modifier_workflow\"\u3002</li> <li><code>userId</code>\uff1a\u5c07\u5c0d\u8a71\u4e32\u9023\u7d50\u5230\u7279\u5b9a\u4f7f\u7528\u8005\u3002</li> </ul> </li> <li>\u6b77\u53f2\u7d00\u9304\uff08<code>events</code>\uff09\uff1a \u4f9d\u6642\u9593\u6392\u5e8f\u7684\u6240\u6709\u4e92\u52d5\u7d00\u9304\uff08<code>Event</code> \u7269\u4ef6\u2014\u2014\u5305\u542b\u4f7f\u7528\u8005\u8a0a\u606f\u3001agent \u56de\u61c9\u3001\u5de5\u5177\u52d5\u4f5c\uff09\uff0c\u90fd\u767c\u751f\u5728\u9019\u500b\u7279\u5b9a\u5c0d\u8a71\u4e32\u4e2d\u3002</li> <li>session state\uff08<code>state</code>\uff09\uff1a \u7528\u4f86\u66ab\u5b58\u50c5\u8207\u9019\u500b\u7279\u5b9a\u9032\u884c\u4e2d\u5c0d\u8a71\u76f8\u95dc\u7684\u81e8\u6642\u8cc7\u6599\u3002\u9019\u5c31\u50cf\u662f agent \u5728\u4e92\u52d5\u904e\u7a0b\u4e2d\u7684\u5099\u5fd8\u9304\u3002\u6211\u5011\u6703\u5728\u4e0b\u4e00\u7bc0\u8a73\u7d30\u4ecb\u7d39\u5982\u4f55\u4f7f\u7528\u8207\u7ba1\u7406 <code>state</code>\u3002</li> <li>\u6d3b\u52d5\u8ffd\u8e64\uff08<code>lastUpdateTime</code>\uff09\uff1a \u8a18\u9304\u6b64\u5c0d\u8a71\u4e32\u6700\u5f8c\u4e00\u6b21\u4e8b\u4ef6\u767c\u751f\u6642\u9593\u7684\u6642\u9593\u6233\u8a18\u3002</li> </ul>"},{"location":"sessions/session/#session_2","title":"\u7bc4\u4f8b\uff1a\u6aa2\u8996 Session \u5c6c\u6027","text":"PythonJava <pre><code> from google.adk.sessions import InMemorySessionService, Session\n\n # Create a simple session to examine its properties\n temp_service = InMemorySessionService()\n example_session = await temp_service.create_session(\n     app_name=\"my_app\",\n     user_id=\"example_user\",\n     state={\"initial_key\": \"initial_value\"} # State can be initialized\n )\n\n print(f\"--- Examining Session Properties ---\")\n print(f\"ID (`id`):                {example_session.id}\")\n print(f\"Application Name (`app_name`): {example_session.app_name}\")\n print(f\"User ID (`user_id`):         {example_session.user_id}\")\n print(f\"State (`state`):           {example_session.state}\") # Note: Only shows initial state here\n print(f\"Events (`events`):         {example_session.events}\") # Initially empty\n print(f\"Last Update (`last_update_time`): {example_session.last_update_time:.2f}\")\n print(f\"---------------------------------\")\n\n # Clean up (optional for this example)\n temp_service = await temp_service.delete_session(app_name=example_session.app_name,\n                             user_id=example_session.user_id, session_id=example_session.id)\n print(\"The final status of temp_service - \", temp_service)\n</code></pre> <pre><code> import com.google.adk.sessions.InMemorySessionService;\n import com.google.adk.sessions.Session;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.ConcurrentHashMap;\n\n String sessionId = \"123\";\n String appName = \"example-app\"; // Example app name\n String userId = \"example-user\"; // Example user id\n ConcurrentMap&lt;String, Object&gt; initialState = new ConcurrentHashMap&lt;&gt;(Map.of(\"newKey\", \"newValue\"));\n InMemorySessionService exampleSessionService = new InMemorySessionService();\n\n // Create Session\n Session exampleSession = exampleSessionService.createSession(\n     appName, userId, initialState, Optional.of(sessionId)).blockingGet();\n System.out.println(\"Session created successfully.\");\n\n System.out.println(\"--- Examining Session Properties ---\");\n System.out.printf(\"ID (`id`): %s%n\", exampleSession.id());\n System.out.printf(\"Application Name (`appName`): %s%n\", exampleSession.appName());\n System.out.printf(\"User ID (`userId`): %s%n\", exampleSession.userId());\n System.out.printf(\"State (`state`): %s%n\", exampleSession.state());\n System.out.println(\"------------------------------------\");\n\n\n // Clean up (optional for this example)\n var unused = exampleSessionService.deleteSession(appName, userId, sessionId);\n</code></pre> <p>(\u6ce8\u610f\uff1a \u4e0a\u8ff0\u6240\u986f\u793a\u7684 state \u50c5\u70ba\u521d\u59cb\u72c0\u614b\u3002\u72c0\u614b\u7684\u66f4\u65b0\u6703\u900f\u904e\u4e8b\u4ef6\uff08Event\uff09\u767c\u751f\uff0c\u8a73\u898b State \u7ae0\u7bc0\u8aaa\u660e\u3002)</p>"},{"location":"sessions/session/#sessionservice-session","title":"\u4f7f\u7528 <code>SessionService</code> \u7ba1\u7406 Session","text":"<p>\u5982\u4e0a\u6240\u793a\uff0c\u4f60\u901a\u5e38\u4e0d\u6703\u76f4\u63a5\u5efa\u7acb\u6216\u7ba1\u7406 <code>Session</code> \u7269\u4ef6\u3002\u76f8\u53cd\u5730\uff0c\u4f60\u6703\u4f7f\u7528 <code>SessionService</code>\u3002\u9019\u500b\u670d\u52d9\u6703\u4f5c\u70ba\u96c6\u4e2d\u7ba1\u7406\u8005\uff0c\u8ca0\u8cac\u6574\u500b\u5c0d\u8a71 session \u7684\u751f\u547d\u9031\u671f\u3002</p> <p>\u5176\u6838\u5fc3\u8077\u8cac\u5305\u62ec\uff1a</p> <ul> <li>\u555f\u52d5\u65b0\u5c0d\u8a71\uff1a \u7576\u4f7f\u7528\u8005\u958b\u59cb\u4e92\u52d5\u6642\uff0c\u5efa\u7acb\u65b0\u7684 <code>Session</code> \u7269\u4ef6\u3002</li> <li>\u7e7c\u7e8c\u73fe\u6709\u5c0d\u8a71\uff1a \u6839\u64da ID \u53d6\u5f97\u7279\u5b9a\u7684 <code>Session</code>\uff0c\u8b93 agent \u80fd\u5f9e\u4e2d\u65b7\u8655\u7e7c\u7e8c\u5c0d\u8a71\u3002</li> <li>\u5132\u5b58\u9032\u5ea6\uff1a \u5c07\u65b0\u7684\u4e92\u52d5\uff08<code>Event</code> \u7269\u4ef6\uff09\u52a0\u5165 session \u6b77\u53f2\u7d00\u9304\u3002\u9019\u4e5f\u662f session <code>state</code> \u66f4\u65b0\u7684\u6a5f\u5236\uff08\u8a73\u898b <code>State</code> \u7ae0\u7bc0\uff09\u3002</li> <li>\u5217\u51fa\u5c0d\u8a71\uff1a \u627e\u51fa\u7279\u5b9a\u4f7f\u7528\u8005\u8207\u61c9\u7528\u7a0b\u5f0f\u7684\u6240\u6709\u6d3b\u8e8d session \u57f7\u884c\u7dd2\u3002</li> <li>\u6e05\u7406\uff1a \u7576\u5c0d\u8a71\u7d50\u675f\u6216\u4e0d\u518d\u9700\u8981\u6642\uff0c\u522a\u9664 <code>Session</code> \u7269\u4ef6\u53ca\u5176\u76f8\u95dc\u8cc7\u6599\u3002</li> </ul>"},{"location":"sessions/session/#sessionservice","title":"<code>SessionService</code> \u7684\u5be6\u4f5c","text":"<p>Agent Development Kit (ADK) \u63d0\u4f9b\u591a\u7a2e <code>SessionService</code> \u5be6\u4f5c\uff0c\u8b93\u4f60\u53ef\u4ee5\u6839\u64da\u9700\u6c42\u9078\u64c7\u6700\u5408\u9069\u7684\u5132\u5b58\u5f8c\u7aef\uff1a</p> <ol> <li> <p><code>InMemorySessionService</code></p> <ul> <li>\u904b\u4f5c\u65b9\u5f0f\uff1a \u5c07\u6240\u6709 session \u8cc7\u6599\u76f4\u63a5\u5132\u5b58\u5728\u61c9\u7528\u7a0b\u5f0f\u8a18\u61b6\u9ad4\u4e2d\u3002</li> <li>\u6301\u4e45\u6027\uff1a \u7121\u3002\u5982\u679c\u61c9\u7528\u7a0b\u5f0f\u91cd\u65b0\u555f\u52d5\uff0c\u6240\u6709\u5c0d\u8a71\u8cc7\u6599\u90fd\u6703\u907a\u5931\u3002</li> <li>\u984d\u5916\u9700\u6c42\uff1a \u7121\u9700\u984d\u5916\u5b89\u88dd\u3002</li> <li>\u9069\u7528\u65bc\uff1a \u5feb\u901f\u958b\u767c\u3001\u672c\u6a5f\u6e2c\u8a66\u3001\u7bc4\u4f8b\uff0c\u4ee5\u53ca\u4e0d\u9700\u8981\u9577\u671f\u4fdd\u5b58\u8cc7\u6599\u7684\u60c5\u5883\u3002</li> </ul> PythonJava <pre><code> from google.adk.sessions import InMemorySessionService\n session_service = InMemorySessionService()\n</code></pre> <pre><code> import com.google.adk.sessions.InMemorySessionService;\n InMemorySessionService exampleSessionService = new InMemorySessionService();\n</code></pre> </li> <li> <p><code>VertexAiSessionService</code></p> <ul> <li>\u904b\u4f5c\u65b9\u5f0f\uff1a \u900f\u904e API \u547c\u53eb\uff0c\u4f7f\u7528 Google Cloud Vertex AI \u57fa\u790e\u8a2d\u65bd\u9032\u884c session \u7ba1\u7406\u3002</li> <li>\u6301\u4e45\u6027\uff1a \u6709\u3002\u8cc7\u6599\u6703\u900f\u904e Vertex AI Agent Engine \u4ee5\u53ef\u9760\u4e14\u53ef\u64f4\u5c55\u7684\u65b9\u5f0f\u9032\u884c\u7ba1\u7406\u3002</li> <li>\u9700\u6c42\uff1a<ul> <li>\u4e00\u500b Google Cloud \u5c08\u6848\uff08<code>pip install vertexai</code>\uff09</li> <li>\u4e00\u500b Google Cloud \u5132\u5b58 bucket\uff0c\u53ef\u4f9d\u7167\u6b64 \u6b65\u9a5f \u9032\u884c\u8a2d\u5b9a\u3002</li> <li>\u4e00\u500b Reasoning Engine \u8cc7\u6e90\u540d\u7a31/ID\uff0c\u53ef\u4f9d\u7167\u6b64 \u6559\u5b78 \u9032\u884c\u8a2d\u5b9a\u3002</li> <li>\u5982\u679c\u4f60\u5c1a\u672a\u64c1\u6709 Google Cloud \u5c08\u6848\uff0c\u4e14\u60f3\u8981\u514d\u8cbb\u8a66\u7528 VertexAiSessionService\uff0c\u8acb\u53c3\u8003\u5982\u4f55 \u514d\u8cbb\u8a66\u7528 Session \u548c Memory\u3002</li> </ul> </li> <li>\u6700\u9069\u7528\u65bc\uff1a \u90e8\u7f72\u65bc Google Cloud \u4e0a\u3001\u9700\u8981\u9ad8\u64f4\u5c55\u6027\u7684\u6b63\u5f0f\u74b0\u5883\u61c9\u7528\uff0c\u7279\u5225\u662f\u9700\u8981\u6574\u5408\u5176\u4ed6 Vertex AI \u529f\u80fd\u6642\u3002</li> </ul> PythonJava <pre><code># Requires: pip install google-adk[vertexai]\n# Plus GCP setup and authentication\nfrom google.adk.sessions import VertexAiSessionService\n\nPROJECT_ID = \"your-gcp-project-id\"\nLOCATION = \"us-central1\"\n# The app_name used with this service should be the Reasoning Engine ID or name\nREASONING_ENGINE_APP_NAME = \"projects/your-gcp-project-id/locations/us-central1/reasoningEngines/your-engine-id\"\n\nsession_service = VertexAiSessionService(project=PROJECT_ID, location=LOCATION)\n# Use REASONING_ENGINE_APP_NAME when calling service methods, e.g.:\n# session_service = await session_service.create_session(app_name=REASONING_ENGINE_APP_NAME, ...)\n</code></pre> <pre><code>// Please look at the set of requirements above, consequently export the following in your bashrc file:\n// export GOOGLE_CLOUD_PROJECT=my_gcp_project\n// export GOOGLE_CLOUD_LOCATION=us-central1\n// export GOOGLE_API_KEY=my_api_key\n\nimport com.google.adk.sessions.VertexAiSessionService;\nimport java.util.UUID;\n\nString sessionId = UUID.randomUUID().toString();\nString reasoningEngineAppName = \"123456789\";\nString userId = \"u_123\"; // Example user id\nConcurrentMap&lt;String, Object&gt; initialState = new\n    ConcurrentHashMap&lt;&gt;(); // No initial state needed for this example\n\nVertexAiSessionService sessionService = new VertexAiSessionService();\nSession mySession =\n    sessionService\n        .createSession(reasoningEngineAppName, userId, initialState, Optional.of(sessionId))\n        .blockingGet();\n</code></pre> </li> <li> <p><code>DatabaseSessionService</code></p> <p></p> <ul> <li>\u904b\u4f5c\u65b9\u5f0f\uff1a \u9023\u63a5\u5230\u95dc\u806f\u5f0f\u8cc7\u6599\u5eab\uff08\u4f8b\u5982\uff1aPostgreSQL\u3001MySQL\u3001SQLite\uff09\uff0c\u5c07 session data \u6301\u4e45\u6027\u5730\u5132\u5b58\u5728\u8cc7\u6599\u8868\u4e2d\u3002</li> <li>\u6301\u4e45\u6027\uff1a \u6709\u3002\u8cc7\u6599\u5728\u61c9\u7528\u7a0b\u5f0f\u91cd\u555f\u5f8c\u4ecd\u6703\u4fdd\u7559\u3002</li> <li>\u9700\u6c42\uff1a \u9700\u8a2d\u5b9a\u597d\u7684\u8cc7\u6599\u5eab\u3002</li> <li>\u9069\u7528\u60c5\u5883\uff1a \u9069\u5408\u9700\u8981\u81ea\u884c\u7ba1\u7406\u3001\u53ef\u9760\u4e14\u6301\u4e45\u6027\u5132\u5b58\u7684\u61c9\u7528\u7a0b\u5f0f\u3002</li> </ul> <pre><code>from google.adk.sessions import DatabaseSessionService\n# Example using a local SQLite file:\ndb_url = \"sqlite:///./my_agent_data.db\"\nsession_service = DatabaseSessionService(db_url=db_url)\n</code></pre> </li> </ol> <p>\u9078\u64c7\u6b63\u78ba\u7684 <code>SessionService</code> \u662f\u6c7a\u5b9a agent \u5c0d\u8a71\u6b77\u53f2\u8207\u66ab\u5b58\u8cc7\u6599\u5982\u4f55\u5132\u5b58\u8207\u6301\u7e8c\u5b58\u5728\u7684\u95dc\u9375\u3002</p>"},{"location":"sessions/session/#session_3","title":"Session \u751f\u547d\u9031\u671f","text":"<p>\u4ee5\u4e0b\u662f <code>Session</code> \u8207 <code>SessionService</code> \u5728\u4e00\u6b21\u5c0d\u8a71\u56de\u5408\u4e2d\u5982\u4f55\u5354\u4f5c\u7684\u7c21\u5316\u6d41\u7a0b\uff1a</p> <ol> <li>\u958b\u59cb\u6216\u7e7c\u7e8c\uff1a \u4f60\u7684\u61c9\u7528\u7a0b\u5f0f\u9700\u8981\u4f7f\u7528 <code>SessionService</code> \u4f86<code>create_session</code>\uff08\u91dd\u5c0d\u65b0\u804a\u5929\uff09\u6216\u4f7f\u7528\u73fe\u6709\u7684 session id\u3002</li> <li>\u63d0\u4f9b Context\uff1a <code>Runner</code> \u6703\u5f9e\u9069\u7576\u7684\u670d\u52d9\u65b9\u6cd5\u53d6\u5f97\u5c0d\u61c9\u7684 <code>Session</code> \u7269\u4ef6\uff0c\u8b93 agent \u80fd\u5920\u5b58\u53d6\u8a72 Session \u7684 <code>state</code> \u8207 <code>events</code>\u3002</li> <li>agent \u8655\u7406\uff1a \u4f7f\u7528\u8005\u5411 agent \u767c\u51fa\u67e5\u8a62\u3002agent \u6703\u5206\u6790\u67e5\u8a62\u5167\u5bb9\uff0c\u4e26\u53ef\u80fd\u53c3\u8003 session <code>state</code> \u53ca <code>events</code> \u6b77\u53f2\u4f86\u6c7a\u5b9a\u56de\u61c9\u3002</li> <li>\u56de\u61c9\u8207\u72c0\u614b\u66f4\u65b0\uff1a agent \u7522\u751f\u56de\u61c9\uff08\u4e26\u53ef\u80fd\u6a19\u8a18\u9700\u8981\u5728 <code>state</code> \u4e2d\u66f4\u65b0\u7684\u8cc7\u6599\uff09\u3002<code>Runner</code> \u6703\u5c07\u9019\u4e9b\u5305\u88dd\u6210 <code>Event</code>\u3002</li> <li>\u5132\u5b58\u4e92\u52d5\u7d00\u9304\uff1a <code>Runner</code> \u6703\u547c\u53eb <code>sessionService.append_event(session, event)</code>\uff0c\u4e26\u4ee5 <code>session</code> \u53ca\u65b0\u7684 <code>event</code> \u4f5c\u70ba\u53c3\u6578\u3002\u8a72\u670d\u52d9\u6703\u5c07 <code>Event</code> \u52a0\u5165\u6b77\u53f2\u7d00\u9304\uff0c\u4e26\u6839\u64da event \u5167\u7684\u8cc7\u8a0a\uff0c\u66f4\u65b0\u5132\u5b58\u4e2d\u7684 session <code>state</code>\u3002session \u7684 <code>last_update_time</code> \u4e5f\u6703\u88ab\u66f4\u65b0\u3002</li> <li>\u6e96\u5099\u4e0b\u4e00\u6b65\uff1a agent \u7684\u56de\u61c9\u6703\u50b3\u9001\u7d66\u4f7f\u7528\u8005\u3002\u66f4\u65b0\u5f8c\u7684 <code>Session</code> \u73fe\u5df2\u7531 <code>SessionService</code> \u5132\u5b58\uff0c\u6e96\u5099\u9032\u5165\u4e0b\u4e00\u56de\u5408\uff08\u901a\u5e38\u6703\u5728\u76ee\u524d session \u4e2d\u7e7c\u7e8c\u5c0d\u8a71\uff0c\u91cd\u65b0\u958b\u59cb\u7b2c 1 \u6b65\uff09\u3002</li> <li>\u7d50\u675f\u5c0d\u8a71\uff1a \u7576\u5c0d\u8a71\u7d50\u675f\u6642\uff0c\u82e5\u4e0d\u518d\u9700\u8981\uff0c\u61c9\u7528\u7a0b\u5f0f\u6703\u547c\u53eb <code>sessionService.delete_session(...)</code> \u4f86\u6e05\u9664\u5df2\u5132\u5b58\u7684 session \u8cc7\u6599\u3002</li> </ol> <p>\u9019\u500b\u6d41\u7a0b\u8aaa\u660e\u4e86 <code>SessionService</code> \u5982\u4f55\u900f\u904e\u7ba1\u7406\u6bcf\u500b <code>Session</code> \u7269\u4ef6\u76f8\u95dc\u7684\u6b77\u53f2\u8207\u72c0\u614b\uff0c\u78ba\u4fdd\u5c0d\u8a71\u7684\u9023\u8cab\u6027\u3002</p>"},{"location":"sessions/state.en/","title":"State: The Session's Scratchpad","text":"<p>Within each <code>Session</code> (our conversation thread), the <code>state</code> attribute acts like the agent's dedicated scratchpad for that specific interaction. While <code>session.events</code> holds the full history, <code>session.state</code> is where the agent stores and updates dynamic details needed during the conversation.</p>"},{"location":"sessions/state.en/#what-is-sessionstate","title":"What is <code>session.state</code>?","text":"<p>Conceptually, <code>session.state</code> is a collection (dictionary or Map) holding key-value pairs. It's designed for information the agent needs to recall or track to make the current conversation effective:</p> <ul> <li>Personalize Interaction: Remember user preferences mentioned earlier (e.g., <code>'user_preference_theme': 'dark'</code>).</li> <li>Track Task Progress: Keep tabs on steps in a multi-turn process (e.g., <code>'booking_step': 'confirm_payment'</code>).</li> <li>Accumulate Information: Build lists or summaries (e.g., <code>'shopping_cart_items': ['book', 'pen']</code>).</li> <li>Make Informed Decisions: Store flags or values influencing the next response (e.g., <code>'user_is_authenticated': True</code>).</li> </ul>"},{"location":"sessions/state.en/#key-characteristics-of-state","title":"Key Characteristics of <code>State</code>","text":"<ol> <li> <p>Structure: Serializable Key-Value Pairs</p> <ul> <li>Data is stored as <code>key: value</code>.</li> <li>Keys: Always strings (<code>str</code>). Use clear names (e.g., <code>'departure_city'</code>, <code>'user:language_preference'</code>).</li> <li>Values: Must be serializable. This means they can be easily saved and loaded by the <code>SessionService</code>. Stick to basic types in the specific languages (Python/ Java) like strings, numbers, booleans, and simple lists or dictionaries containing only these basic types. (See API documentation for precise details).</li> <li>\u26a0\ufe0f Avoid Complex Objects: Do not store non-serializable objects (custom class instances, functions, connections, etc.) directly in the state. Store simple identifiers if needed, and retrieve the complex object elsewhere.</li> </ul> </li> <li> <p>Mutability: It Changes</p> <ul> <li>The contents of the <code>state</code> are expected to change as the conversation evolves.</li> </ul> </li> <li> <p>Persistence: Depends on <code>SessionService</code></p> <ul> <li>Whether state survives application restarts depends on your chosen service:</li> <li><code>InMemorySessionService</code>: Not Persistent. State is lost on restart.</li> <li><code>DatabaseSessionService</code> / <code>VertexAiSessionService</code>: Persistent. State is saved reliably.</li> </ul> </li> </ol> <p>Note</p> <p>The specific parameters or method names for the primitives may vary slightly by SDK language (e.g., <code>session.state['current_intent'] = 'book_flight'</code> in Python, <code>session.state().put(\"current_intent\", \"book_flight)</code> in Java). Refer to the language-specific API documentation for details.</p>"},{"location":"sessions/state.en/#organizing-state-with-prefixes-scope-matters","title":"Organizing State with Prefixes: Scope Matters","text":"<p>Prefixes on state keys define their scope and persistence behavior, especially with persistent services:</p> <ul> <li> <p>No Prefix (Session State):</p> <ul> <li>Scope: Specific to the current session (<code>id</code>).</li> <li>Persistence: Only persists if the <code>SessionService</code> is persistent (<code>Database</code>, <code>VertexAI</code>).</li> <li>Use Cases: Tracking progress within the current task (e.g., <code>'current_booking_step'</code>), temporary flags for this interaction (e.g., <code>'needs_clarification'</code>).</li> <li>Example: <code>session.state['current_intent'] = 'book_flight'</code></li> </ul> </li> <li> <p><code>user:</code> Prefix (User State):</p> <ul> <li>Scope: Tied to the <code>user_id</code>, shared across all sessions for that user (within the same <code>app_name</code>).</li> <li>Persistence: Persistent with <code>Database</code> or <code>VertexAI</code>. (Stored by <code>InMemory</code> but lost on restart).</li> <li>Use Cases: User preferences (e.g., <code>'user:theme'</code>), profile details (e.g., <code>'user:name'</code>).</li> <li>Example: <code>session.state['user:preferred_language'] = 'fr'</code></li> </ul> </li> <li> <p><code>app:</code> Prefix (App State):</p> <ul> <li>Scope: Tied to the <code>app_name</code>, shared across all users and sessions for that application.</li> <li>Persistence: Persistent with <code>Database</code> or <code>VertexAI</code>. (Stored by <code>InMemory</code> but lost on restart).</li> <li>Use Cases: Global settings (e.g., <code>'app:api_endpoint'</code>), shared templates.</li> <li>Example: <code>session.state['app:global_discount_code'] = 'SAVE10'</code></li> </ul> </li> <li> <p><code>temp:</code> Prefix (Temporary Invocation State):</p> <ul> <li>Scope: Specific to the current invocation (the entire process from an agent receiving user input to generating the final output for that input).</li> <li>Persistence: Not Persistent. Discarded after the invocation completes and does not carry over to the next one.</li> <li>Use Cases: Storing intermediate calculations, flags, or data passed between tool calls within a single invocation.</li> <li>When Not to Use: For information that must persist across different invocations, such as user preferences, conversation history summaries, or accumulated data.</li> <li>Example: <code>session.state['temp:raw_api_response'] = {...}</code></li> </ul> </li> </ul> <p>Sub-Agents and Invocation Context</p> <p>When a parent agent calls a sub-agent (e.g., using <code>SequentialAgent</code> or <code>ParallelAgent</code>), it passes its <code>InvocationContext</code> to the sub-agent. This means the entire chain of agent calls shares the same invocation ID and, therefore, the same <code>temp:</code> state.</p> <p>How the Agent Sees It: Your agent code interacts with the combined state through the single <code>session.state</code> collection (dict/ Map). The <code>SessionService</code> handles fetching/merging state from the correct underlying storage based on prefixes.</p>"},{"location":"sessions/state.en/#accessing-session-state-in-agent-instructions","title":"Accessing Session State in Agent Instructions","text":"<p>When working with <code>LlmAgent</code> instances, you can directly inject session state values into the agent's instruction string using a simple templating syntax. This allows you to create dynamic and context-aware instructions without relying solely on natural language directives.</p>"},{"location":"sessions/state.en/#using-key-templating","title":"Using <code>{key}</code> Templating","text":"<p>To inject a value from the session state, enclose the key of the desired state variable within curly braces: <code>{key}</code>. The framework will automatically replace this placeholder with the corresponding value from <code>session.state</code> before passing the instruction to the LLM.</p> <p>Example:</p> <pre><code>from google.adk.agents import LlmAgent\n\nstory_generator = LlmAgent(\n    name=\"StoryGenerator\",\n    model=\"gemini-2.0-flash\",\n    instruction=\"\"\"Write a short story about a cat, focusing on the theme: {topic}.\"\"\"\n)\n\n# Assuming session.state['topic'] is set to \"friendship\", the LLM \n# will receive the following instruction:\n# \"Write a short story about a cat, focusing on the theme: friendship.\"\n</code></pre>"},{"location":"sessions/state.en/#important-considerations","title":"Important Considerations","text":"<ul> <li>Key Existence: Ensure that the key you reference in the instruction string exists in the session.state. If the key is missing, the agent will throw an error. To use a key that may or may not be present, you can include a question mark (?) after the key (e.g. {topic?}).</li> <li>Data Types: The value associated with the key should be a string or a type that can be easily converted to a string.</li> <li>Escaping: If you need to use literal curly braces in your instruction (e.g., for JSON formatting), you'll need to escape them.</li> </ul>"},{"location":"sessions/state.en/#bypassing-state-injection-with-instructionprovider","title":"Bypassing State Injection with <code>InstructionProvider</code>","text":"<p>In some cases, you might want to use <code>{{</code> and <code>}}</code> literally in your instructions without triggering the state injection mechanism. For example, you might be writing instructions for an agent that helps with a templating language that uses the same syntax.</p> <p>To achieve this, you can provide a function to the <code>instruction</code> parameter instead of a string. This function is called an <code>InstructionProvider</code>. When you use an <code>InstructionProvider</code>, the ADK will not attempt to inject state, and your instruction string will be passed to the model as-is.</p> <p>The <code>InstructionProvider</code> function receives a <code>ReadonlyContext</code> object, which you can use to access session state or other contextual information if you need to build the instruction dynamically.</p> Python <pre><code>from google.adk.agents import LlmAgent\nfrom google.adk.agents.readonly_context import ReadonlyContext\n\n# This is an InstructionProvider\ndef my_instruction_provider(context: ReadonlyContext) -&gt; str:\n    # You can optionally use the context to build the instruction\n    # For this example, we'll return a static string with literal braces.\n    return \"This is an instruction with {{literal_braces}} that will not be replaced.\"\n\nagent = LlmAgent(\n    model=\"gemini-2.0-flash\",\n    name=\"template_helper_agent\",\n    instruction=my_instruction_provider\n)\n</code></pre> <p>If you want to both use an <code>InstructionProvider</code> and inject state into your instructions, you can use the <code>inject_session_state</code> utility function.</p> Python <pre><code>from google.adk.agents import LlmAgent\nfrom google.adk.agents.readonly_context import ReadonlyContext\nfrom google.adk.utils import instructions_utils\n\nasync def my_dynamic_instruction_provider(context: ReadonlyContext) -&gt; str:\n    template = \"This is a {adjective} instruction with {{literal_braces}}.\"\n    # This will inject the 'adjective' state variable but leave the literal braces.\n    return await instructions_utils.inject_session_state(template, context)\n\nagent = LlmAgent(\n    model=\"gemini-2.0-flash\",\n    name=\"dynamic_template_helper_agent\",\n    instruction=my_dynamic_instruction_provider\n)\n</code></pre> <p>Benefits of Direct Injection</p> <ul> <li>Clarity: Makes it explicit which parts of the instruction are dynamic and based on session state.</li> <li>Reliability: Avoids relying on the LLM to correctly interpret natural language instructions to access state.</li> <li>Maintainability: Simplifies instruction strings and reduces the risk of errors when updating state variable names.</li> </ul> <p>Relation to Other State Access Methods</p> <p>This direct injection method is specific to LlmAgent instructions. Refer to the following section for more information on other state access methods.</p>"},{"location":"sessions/state.en/#how-state-is-updated-recommended-methods","title":"How State is Updated: Recommended Methods","text":"<p>The Right Way to Modify State</p> <p>When you need to change the session state, the correct and safest method is to directly modify the <code>state</code> object on the <code>Context</code> provided to your function (e.g., <code>callback_context.state['my_key'] = 'new_value'</code>). This is considered \"direct state manipulation\" in the right way, as the framework automatically tracks these changes.</p> <p>This is critically different from directly modifying the <code>state</code> on a <code>Session</code> object you retrieve from the <code>SessionService</code> (e.g., <code>my_session.state['my_key'] = 'new_value'</code>). You should avoid this, as it bypasses the ADK's event tracking and can lead to lost data. The \"Warning\" section at the end of this page has more details on this important distinction.</p> <p>State should always be updated as part of adding an <code>Event</code> to the session history using <code>session_service.append_event()</code>. This ensures changes are tracked, persistence works correctly, and updates are thread-safe.</p> <p>1. The Easy Way: <code>output_key</code> (for Agent Text Responses)</p> <p>This is the simplest method for saving an agent's final text response directly into the state. When defining your <code>LlmAgent</code>, specify the <code>output_key</code>:</p> PythonJava <pre><code>from google.adk.agents import LlmAgent\nfrom google.adk.sessions import InMemorySessionService, Session\nfrom google.adk.runners import Runner\nfrom google.genai.types import Content, Part\n\n# Define agent with output_key\ngreeting_agent = LlmAgent(\n    name=\"Greeter\",\n    model=\"gemini-2.0-flash\", # Use a valid model\n    instruction=\"Generate a short, friendly greeting.\",\n    output_key=\"last_greeting\" # Save response to state['last_greeting']\n)\n\n# --- Setup Runner and Session ---\napp_name, user_id, session_id = \"state_app\", \"user1\", \"session1\"\nsession_service = InMemorySessionService()\nrunner = Runner(\n    agent=greeting_agent,\n    app_name=app_name,\n    session_service=session_service\n)\nsession = await session_service.create_session(app_name=app_name,\n                                    user_id=user_id,\n                                    session_id=session_id)\nprint(f\"Initial state: {session.state}\")\n\n# --- Run the Agent ---\n# Runner handles calling append_event, which uses the output_key\n# to automatically create the state_delta.\nuser_message = Content(parts=[Part(text=\"Hello\")])\nfor event in runner.run(user_id=user_id,\n                        session_id=session_id,\n                        new_message=user_message):\n    if event.is_final_response():\n      print(f\"Agent responded.\") # Response text is also in event.content\n\n# --- Check Updated State ---\nupdated_session = await session_service.get_session(app_name=APP_NAME, user_id=USER_ID, session_id=session_id)\nprint(f\"State after agent run: {updated_session.state}\")\n# Expected output might include: {'last_greeting': 'Hello there! How can I help you today?'}\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.RunConfig;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.sessions.Session;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class GreetingAgentExample {\n\n  public static void main(String[] args) {\n    // Define agent with output_key\n    LlmAgent greetingAgent =\n        LlmAgent.builder()\n            .name(\"Greeter\")\n            .model(\"gemini-2.0-flash\")\n            .instruction(\"Generate a short, friendly greeting.\")\n            .description(\"Greeting agent\")\n            .outputKey(\"last_greeting\") // Save response to state['last_greeting']\n            .build();\n\n    // --- Setup Runner and Session ---\n    String appName = \"state_app\";\n    String userId = \"user1\";\n    String sessionId = \"session1\";\n\n    InMemorySessionService sessionService = new InMemorySessionService();\n    Runner runner = new Runner(greetingAgent, appName, null, sessionService); // artifactService can be null if not used\n\n    Session session =\n        sessionService.createSession(appName, userId, null, sessionId).blockingGet();\n    System.out.println(\"Initial state: \" + session.state().entrySet());\n\n    // --- Run the Agent ---\n    // Runner handles calling appendEvent, which uses the output_key\n    // to automatically create the stateDelta.\n    Content userMessage = Content.builder().parts(List.of(Part.fromText(\"Hello\"))).build();\n\n    // RunConfig is needed for runner.runAsync in Java\n    RunConfig runConfig = RunConfig.builder().build();\n\n    for (Event event : runner.runAsync(userId, sessionId, userMessage, runConfig).blockingIterable()) {\n      if (event.finalResponse()) {\n        System.out.println(\"Agent responded.\"); // Response text is also in event.content\n      }\n    }\n\n    // --- Check Updated State ---\n    Session updatedSession =\n        sessionService.getSession(appName, userId, sessionId, Optional.empty()).blockingGet();\n    assert updatedSession != null;\n    System.out.println(\"State after agent run: \" + updatedSession.state().entrySet());\n    // Expected output might include: {'last_greeting': 'Hello there! How can I help you today?'}\n  }\n}\n</code></pre> <p>Behind the scenes, the <code>Runner</code> uses the <code>output_key</code> to create the necessary <code>EventActions</code> with a <code>state_delta</code> and calls <code>append_event</code>.</p> <p>2. The Standard Way: <code>EventActions.state_delta</code> (for Complex Updates)</p> <p>For more complex scenarios (updating multiple keys, non-string values, specific scopes like <code>user:</code> or <code>app:</code>, or updates not tied directly to the agent's final text), you manually construct the <code>state_delta</code> within <code>EventActions</code>.</p> PythonJava <pre><code>from google.adk.sessions import InMemorySessionService, Session\nfrom google.adk.events import Event, EventActions\nfrom google.genai.types import Part, Content\nimport time\n\n# --- Setup ---\nsession_service = InMemorySessionService()\napp_name, user_id, session_id = \"state_app_manual\", \"user2\", \"session2\"\nsession = await session_service.create_session(\n    app_name=app_name,\n    user_id=user_id,\n    session_id=session_id,\n    state={\"user:login_count\": 0, \"task_status\": \"idle\"}\n)\nprint(f\"Initial state: {session.state}\")\n\n# --- Define State Changes ---\ncurrent_time = time.time()\nstate_changes = {\n    \"task_status\": \"active\",              # Update session state\n    \"user:login_count\": session.state.get(\"user:login_count\", 0) + 1, # Update user state\n    \"user:last_login_ts\": current_time,   # Add user state\n    \"temp:validation_needed\": True        # Add temporary state (will be discarded)\n}\n\n# --- Create Event with Actions ---\nactions_with_update = EventActions(state_delta=state_changes)\n# This event might represent an internal system action, not just an agent response\nsystem_event = Event(\n    invocation_id=\"inv_login_update\",\n    author=\"system\", # Or 'agent', 'tool' etc.\n    actions=actions_with_update,\n    timestamp=current_time\n    # content might be None or represent the action taken\n)\n\n# --- Append the Event (This updates the state) ---\nawait session_service.append_event(session, system_event)\nprint(\"`append_event` called with explicit state delta.\")\n\n# --- Check Updated State ---\nupdated_session = await session_service.get_session(app_name=app_name,\n                                            user_id=user_id,\n                                            session_id=session_id)\nprint(f\"State after event: {updated_session.state}\")\n# Expected: {'user:login_count': 1, 'task_status': 'active', 'user:last_login_ts': &lt;timestamp&gt;}\n# Note: 'temp:validation_needed' is NOT present.\n</code></pre> <pre><code>import com.google.adk.events.Event;\nimport com.google.adk.events.EventActions;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.sessions.Session;\nimport java.time.Instant;\nimport java.util.Optional;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class ManualStateUpdateExample {\n\n  public static void main(String[] args) {\n    // --- Setup ---\n    InMemorySessionService sessionService = new InMemorySessionService();\n    String appName = \"state_app_manual\";\n    String userId = \"user2\";\n    String sessionId = \"session2\";\n\n    ConcurrentMap&lt;String, Object&gt; initialState = new ConcurrentHashMap&lt;&gt;();\n    initialState.put(\"user:login_count\", 0);\n    initialState.put(\"task_status\", \"idle\");\n\n    Session session =\n        sessionService.createSession(appName, userId, initialState, sessionId).blockingGet();\n    System.out.println(\"Initial state: \" + session.state().entrySet());\n\n    // --- Define State Changes ---\n    long currentTimeMillis = Instant.now().toEpochMilli(); // Use milliseconds for Java Event\n\n    ConcurrentMap&lt;String, Object&gt; stateChanges = new ConcurrentHashMap&lt;&gt;();\n    stateChanges.put(\"task_status\", \"active\"); // Update session state\n\n    // Retrieve and increment login_count\n    Object loginCountObj = session.state().get(\"user:login_count\");\n    int currentLoginCount = 0;\n    if (loginCountObj instanceof Number) {\n      currentLoginCount = ((Number) loginCountObj).intValue();\n    }\n    stateChanges.put(\"user:login_count\", currentLoginCount + 1); // Update user state\n\n    stateChanges.put(\"user:last_login_ts\", currentTimeMillis); // Add user state (as long milliseconds)\n    stateChanges.put(\"temp:validation_needed\", true); // Add temporary state\n\n    // --- Create Event with Actions ---\n    EventActions actionsWithUpdate = EventActions.builder().stateDelta(stateChanges).build();\n\n    // This event might represent an internal system action, not just an agent response\n    Event systemEvent =\n        Event.builder()\n            .invocationId(\"inv_login_update\")\n            .author(\"system\") // Or 'agent', 'tool' etc.\n            .actions(actionsWithUpdate)\n            .timestamp(currentTimeMillis)\n            // content might be None or represent the action taken\n            .build();\n\n    // --- Append the Event (This updates the state) ---\n    sessionService.appendEvent(session, systemEvent).blockingGet();\n    System.out.println(\"`appendEvent` called with explicit state delta.\");\n\n    // --- Check Updated State ---\n    Session updatedSession =\n        sessionService.getSession(appName, userId, sessionId, Optional.empty()).blockingGet();\n    assert updatedSession != null;\n    System.out.println(\"State after event: \" + updatedSession.state().entrySet());\n    // Expected: {'user:login_count': 1, 'task_status': 'active', 'user:last_login_ts': &lt;timestamp_millis&gt;}\n    // Note: 'temp:validation_needed' is NOT present because InMemorySessionService's appendEvent\n    // applies delta to its internal user/app state maps IF keys have prefixes,\n    // and to the session's own state map (which is then merged on getSession).\n  }\n}\n</code></pre> <p>3. Via <code>CallbackContext</code> or <code>ToolContext</code> (Recommended for Callbacks and Tools)</p> <p>Modifying state within agent callbacks (e.g., <code>on_before_agent_call</code>, <code>on_after_agent_call</code>) or tool functions is best done using the <code>state</code> attribute of the <code>CallbackContext</code> or <code>ToolContext</code> provided to your function.</p> <ul> <li><code>callback_context.state['my_key'] = my_value</code></li> <li><code>tool_context.state['my_key'] = my_value</code></li> </ul> <p>These context objects are specifically designed to manage state changes within their respective execution scopes. When you modify <code>context.state</code>, the ADK framework ensures that these changes are automatically captured and correctly routed into the <code>EventActions.state_delta</code> for the event being generated by the callback or tool. This delta is then processed by the <code>SessionService</code> when the event is appended, ensuring proper persistence and tracking.</p> <p>This method abstracts away the manual creation of <code>EventActions</code> and <code>state_delta</code> for most common state update scenarios within callbacks and tools, making your code cleaner and less error-prone.</p> <p>For more comprehensive details on context objects, refer to the Context documentation.</p> PythonJava <pre><code># In an agent callback or tool function\nfrom google.adk.agents import CallbackContext # or ToolContext\n\ndef my_callback_or_tool_function(context: CallbackContext, # Or ToolContext\n                                 # ... other parameters ...\n                                ):\n    # Update existing state\n    count = context.state.get(\"user_action_count\", 0)\n    context.state[\"user_action_count\"] = count + 1\n\n    # Add new state\n    context.state[\"temp:last_operation_status\"] = \"success\"\n\n    # State changes are automatically part of the event's state_delta\n    # ... rest of callback/tool logic ...\n</code></pre> <pre><code>// In an agent callback or tool method\nimport com.google.adk.agents.CallbackContext; // or ToolContext\n// ... other imports ...\n\npublic class MyAgentCallbacks {\n    public void onAfterAgent(CallbackContext callbackContext) {\n        // Update existing state\n        Integer count = (Integer) callbackContext.state().getOrDefault(\"user_action_count\", 0);\n        callbackContext.state().put(\"user_action_count\", count + 1);\n\n        // Add new state\n        callbackContext.state().put(\"temp:last_operation_status\", \"success\");\n\n        // State changes are automatically part of the event's state_delta\n        // ... rest of callback logic ...\n    }\n}\n</code></pre> <p>What <code>append_event</code> Does:</p> <ul> <li>Adds the <code>Event</code> to <code>session.events</code>.</li> <li>Reads the <code>state_delta</code> from the event's <code>actions</code>.</li> <li>Applies these changes to the state managed by the <code>SessionService</code>, correctly handling prefixes and persistence based on the service type.</li> <li>Updates the session's <code>last_update_time</code>.</li> <li>Ensures thread-safety for concurrent updates.</li> </ul>"},{"location":"sessions/state.en/#a-warning-about-direct-state-modification","title":"\u26a0\ufe0f A Warning About Direct State Modification","text":"<p>Avoid directly modifying the <code>session.state</code> collection (dictionary/Map) on a <code>Session</code> object that was obtained directly from the <code>SessionService</code> (e.g., via <code>session_service.get_session()</code> or <code>session_service.create_session()</code>) outside of the managed lifecycle of an agent invocation (i.e., not through a <code>CallbackContext</code> or <code>ToolContext</code>). For example, code like <code>retrieved_session = await session_service.get_session(...); retrieved_session.state['key'] = value</code> is problematic.</p> <p>State modifications within callbacks or tools using <code>CallbackContext.state</code> or <code>ToolContext.state</code> are the correct way to ensure changes are tracked, as these context objects handle the necessary integration with the event system.</p> <p>Why direct modification (outside of contexts) is strongly discouraged:</p> <ol> <li>Bypasses Event History: The change isn't recorded as an <code>Event</code>, losing auditability.</li> <li>Breaks Persistence: Changes made this way will likely NOT be saved by <code>DatabaseSessionService</code> or <code>VertexAiSessionService</code>. They rely on <code>append_event</code> to trigger saving.</li> <li>Not Thread-Safe: Can lead to race conditions and lost updates.</li> <li>Ignores Timestamps/Logic: Doesn't update <code>last_update_time</code> or trigger related event logic.</li> </ol> <p>Recommendation: Stick to updating state via <code>output_key</code>, <code>EventActions.state_delta</code> (when manually creating events), or by modifying the <code>state</code> property of <code>CallbackContext</code> or <code>ToolContext</code> objects when within their respective scopes. These methods ensure reliable, trackable, and persistent state management. Use direct access to <code>session.state</code> (from a <code>SessionService</code>-retrieved session) only for reading state.</p>"},{"location":"sessions/state.en/#best-practices-for-state-design-recap","title":"Best Practices for State Design Recap","text":"<ul> <li>Minimalism: Store only essential, dynamic data.</li> <li>Serialization: Use basic, serializable types.</li> <li>Descriptive Keys &amp; Prefixes: Use clear names and appropriate prefixes (<code>user:</code>, <code>app:</code>, <code>temp:</code>, or none).</li> <li>Shallow Structures: Avoid deep nesting where possible.</li> <li>Standard Update Flow: Rely on <code>append_event</code>.</li> </ul>"},{"location":"sessions/state/","title":"State\uff1aSession \u7684\u66ab\u5b58\u5340","text":"<p>\u5728\u6bcf\u500b <code>Session</code>\uff08\u5373\u6211\u5011\u7684\u5c0d\u8a71\u57f7\u884c\u7dd2\uff09\u4e2d\uff0c<code>state</code> \u5c6c\u6027\u5c31\u50cf\u662f agent \u5c08\u5c6c\u65bc\u8a72\u6b21\u4e92\u52d5\u7684\u66ab\u5b58\u5340\u3002<code>session.events</code> \u5132\u5b58\u5b8c\u6574\u7684\u6b77\u53f2\u7d00\u9304\uff0c\u800c <code>session.state</code> \u5247\u662f agent \u5728\u5c0d\u8a71\u904e\u7a0b\u4e2d\u5132\u5b58\u8207\u66f4\u65b0\u52d5\u614b\u7d30\u7bc0\u7684\u5730\u65b9\u3002</p>"},{"location":"sessions/state/#sessionstate","title":"\u4ec0\u9ebc\u662f <code>session.state</code>\uff1f","text":"<p>\u5f9e\u6982\u5ff5\u4e0a\u4f86\u8aaa\uff0c<code>session.state</code> \u662f\u4e00\u500b\u96c6\u5408\uff08dictionary \u6216 Map\uff09\uff0c\u7528\u4f86\u5b58\u653e\u9375\u503c\u5c0d\u3002\u5b83\u5c08\u70ba agent \u9700\u8981\u8a18\u4f4f\u6216\u8ffd\u8e64\u7684\u8cc7\u8a0a\u8a2d\u8a08\uff0c\u4ee5\u63d0\u5347\u7576\u524d\u5c0d\u8a71\u7684\u6548\u7387\uff1a</p> <ul> <li>\u500b\u4eba\u5316\u4e92\u52d5\uff1a \u8a18\u4f4f\u4f7f\u7528\u8005\u5148\u524d\u63d0\u5230\u7684\u504f\u597d\uff08\u4f8b\u5982\uff1a<code>'user_preference_theme': 'dark'</code>\uff09\u3002</li> <li>\u8ffd\u8e64\u4efb\u52d9\u9032\u5ea6\uff1a \u8ffd\u8e64\u591a\u8f2a\u6d41\u7a0b\u4e2d\u7684\u6b65\u9a5f\uff08\u4f8b\u5982\uff1a<code>'booking_step': 'confirm_payment'</code>\uff09\u3002</li> <li>\u7d2f\u7a4d\u8cc7\u8a0a\uff1a \u5efa\u7acb\u6e05\u55ae\u6216\u6458\u8981\uff08\u4f8b\u5982\uff1a<code>'shopping_cart_items': ['book', 'pen']</code>\uff09\u3002</li> <li>\u505a\u51fa\u660e\u667a\u6c7a\u7b56\uff1a \u5132\u5b58\u5f71\u97ff\u4e0b\u500b\u56de\u61c9\u7684\u65d7\u6a19\u6216\u6578\u503c\uff08\u4f8b\u5982\uff1a<code>'user_is_authenticated': True</code>\uff09\u3002</li> </ul>"},{"location":"sessions/state/#state","title":"<code>State</code> \u7684\u4e3b\u8981\u7279\u6027","text":"<ol> <li> <p>\u7d50\u69cb\uff1a\u53ef\u5e8f\u5217\u5316\u7684\u9375\u503c\u5c0d</p> <ul> <li>\u8cc7\u6599\u4ee5 <code>key: value</code> \u5f62\u5f0f\u5132\u5b58\u3002</li> <li>\u9375\uff08Keys\uff09\uff1a \u4e00\u5f8b\u70ba\u5b57\u4e32\uff08<code>str</code>\uff09\u3002\u5efa\u8b70\u4f7f\u7528\u6e05\u695a\u6613\u61c2\u7684\u540d\u7a31\uff08\u4f8b\u5982\uff1a<code>'departure_city'</code>\u3001<code>'user:language_preference'</code>\uff09\u3002</li> <li>\u503c\uff08Values\uff09\uff1a \u5fc5\u9808\u662f\u53ef\u5e8f\u5217\u5316\uff08serializable\uff09\u7684\u3002\u4e5f\u5c31\u662f\u8aaa\uff0c\u9019\u4e9b\u503c\u53ef\u4ee5\u88ab <code>SessionService</code> \u8f15\u9b06\u5132\u5b58\u8207\u8f09\u5165\u3002\u8acb\u50c5\u4f7f\u7528\u7279\u5b9a\u8a9e\u8a00\uff08Python/Java\uff09\u4e2d\u7684\u57fa\u672c\u578b\u5225\uff0c\u5982\u5b57\u4e32\u3001\u6578\u5b57\u3001\u5e03\u6797\u503c\uff0c\u4ee5\u53ca\u50c5\u5305\u542b\u9019\u4e9b\u57fa\u672c\u578b\u5225\u7684\u7c21\u55ae list \u6216 dictionary\u3002\uff08\u8a73\u7d30\u8cc7\u8a0a\u8acb\u53c3\u8003 API \u6587\u4ef6\u8aaa\u660e\uff09</li> <li>\u26a0\ufe0f \u907f\u514d\u8907\u96dc\u7269\u4ef6\uff1a \u8acb\u52ff\u76f4\u63a5\u5728 state \u4e2d\u5132\u5b58\u4e0d\u53ef\u5e8f\u5217\u5316\u7684\u7269\u4ef6\uff08\u81ea\u8a02\u985e\u5225\u5be6\u4f8b\u3001\u51fd\u5f0f\u3001\u9023\u7dda\u7b49\uff09\u3002\u5982\u6709\u9700\u8981\uff0c\u8acb\u50c5\u5132\u5b58\u7c21\u55ae\u7684\u8b58\u5225\u78bc\uff0c\u4e26\u5728\u5176\u4ed6\u5730\u65b9\u53d6\u5f97\u8907\u96dc\u7269\u4ef6\u3002</li> </ul> </li> <li> <p>\u53ef\u8b8a\u6027\uff1a\u5167\u5bb9\u6703\u8b8a\u52d5</p> <ul> <li><code>state</code> \u7684\u5167\u5bb9\u6703\u96a8\u8457\u5c0d\u8a71\u9032\u884c\u800c\u8b8a\u5316\u3002</li> </ul> </li> <li> <p>\u6301\u4e45\u6027\uff1a\u53d6\u6c7a\u65bc <code>SessionService</code></p> <ul> <li>state \u662f\u5426\u80fd\u5728\u61c9\u7528\u7a0b\u5f0f\u91cd\u555f\u5f8c\u4fdd\u7559\uff0c\u53d6\u6c7a\u65bc\u4f60\u9078\u7528\u7684\u670d\u52d9\uff1a</li> <li><code>InMemorySessionService</code>\uff1a\u4e0d\u5177\u6301\u4e45\u6027\u3002 \u91cd\u555f\u5f8c state \u6703\u907a\u5931\u3002</li> <li><code>DatabaseSessionService</code> / <code>VertexAiSessionService</code>\uff1a\u5177\u6301\u4e45\u6027\u3002 state \u6703\u88ab\u53ef\u9760\u5730\u5132\u5b58\u3002</li> </ul> </li> </ol> <p>Note</p> <p>\u5177\u9ad4\u7684\u539f\u8a9e\uff08primitives\uff09\u53c3\u6578\u6216\u65b9\u6cd5\u540d\u7a31\u6703\u4f9d\u4e0d\u540c SDK \u8a9e\u8a00\u7565\u6709\u5dee\u7570\uff08\u4f8b\u5982\uff1aPython \u4e2d\u7684 <code>session.state['current_intent'] = 'book_flight'</code>\uff0cJava \u4e2d\u7684 <code>session.state().put(\"current_intent\", \"book_flight)</code>\uff09\u3002\u8a73\u7d30\u8cc7\u8a0a\u8acb\u53c3\u95b1\u5404\u8a9e\u8a00\u7684 API \u6587\u4ef6\u8aaa\u660e\u3002</p>"},{"location":"sessions/state/#_1","title":"\u4f7f\u7528\u524d\u7db4\u7d44\u7e54\u72c0\u614b\uff1a\u7bc4\u570d\u5f88\u91cd\u8981","text":"<p>\u72c0\u614b\u9375\uff08state key\uff09\u4e0a\u7684\u524d\u7db4\u6703\u5b9a\u7fa9\u5176\u7bc4\u570d\u8207\u6301\u4e45\u5316\u884c\u70ba\uff0c\u9019\u5728\u4f7f\u7528\u6301\u4e45\u5316\u670d\u52d9\u6642\u5c24\u5176\u91cd\u8981\uff1a</p> <ul> <li> <p>\u7121\u524d\u7db4\uff08Session State\uff09\uff1a</p> <ul> <li>\u7bc4\u570d\uff08Scope\uff09\uff1a \u53ea\u91dd\u5c0d\u76ee\u524d\u7684 session\uff08<code>id</code>\uff09\u3002</li> <li>\u6301\u4e45\u5316\uff08Persistence\uff09\uff1a \u50c5\u7576 <code>SessionService</code> \u70ba\u6301\u4e45\u5316\uff08<code>Database</code>\u3001<code>VertexAI</code>\uff09\u6642\u624d\u6703\u4fdd\u5b58\u3002</li> <li>\u4f7f\u7528\u60c5\u5883\uff08Use Cases\uff09\uff1a \u8ffd\u8e64\u7576\u524d\u4efb\u52d9\u9032\u5ea6\uff08\u4f8b\u5982\uff1a<code>'current_booking_step'</code>\uff09\u3001\u6b64\u6b21\u4e92\u52d5\u7684\u81e8\u6642\u65d7\u6a19\uff08\u4f8b\u5982\uff1a<code>'needs_clarification'</code>\uff09\u3002</li> <li>\u7bc4\u4f8b\uff08Example\uff09\uff1a <code>session.state['current_intent'] = 'book_flight'</code></li> </ul> </li> <li> <p><code>user:</code> \u524d\u7db4\uff08User State\uff09\uff1a</p> <ul> <li>\u7bc4\u570d\uff08Scope\uff09\uff1a \u7d81\u5b9a\u65bc <code>user_id</code>\uff0c\u4e26\u5728\u8a72\u4f7f\u7528\u8005\u65bc\u540c\u4e00 <code>app_name</code> \u4e0b\u7684\u6240\u6709 session \u4e2d\u5171\u7528\u3002</li> <li>\u6301\u4e45\u5316\uff08Persistence\uff09\uff1a \u900f\u904e <code>Database</code> \u6216 <code>VertexAI</code> \u6301\u4e45\u5316\u3002\uff08\u7531 <code>InMemory</code> \u5132\u5b58\uff0c\u4f46\u91cd\u555f\u5f8c\u6703\u907a\u5931\uff09</li> <li>\u4f7f\u7528\u60c5\u5883\uff08Use Cases\uff09\uff1a \u4f7f\u7528\u8005\u504f\u597d\u8a2d\u5b9a\uff08\u4f8b\u5982\uff1a<code>'user:theme'</code>\uff09\u3001\u500b\u4eba\u8cc7\u6599\u7d30\u7bc0\uff08\u4f8b\u5982\uff1a<code>'user:name'</code>\uff09\u3002</li> <li>\u7bc4\u4f8b\uff08Example\uff09\uff1a <code>session.state['user:preferred_language'] = 'fr'</code></li> </ul> </li> <li> <p><code>app:</code> \u524d\u7db4\uff08App State\uff09\uff1a</p> <ul> <li>\u7bc4\u570d\uff08Scope\uff09\uff1a \u7d81\u5b9a\u65bc <code>app_name</code>\uff0c\u4e26\u5728\u8a72\u61c9\u7528\u7a0b\u5f0f\u7684\u6240\u6709\u4f7f\u7528\u8005\u8207 session \u9593\u5171\u7528\u3002</li> <li>\u6301\u4e45\u5316\uff08Persistence\uff09\uff1a \u900f\u904e <code>Database</code> \u6216 <code>VertexAI</code> \u6301\u4e45\u5316\u3002\uff08\u7531 <code>InMemory</code> \u5132\u5b58\uff0c\u4f46\u91cd\u555f\u5f8c\u6703\u907a\u5931\uff09</li> <li>\u4f7f\u7528\u60c5\u5883\uff08Use Cases\uff09\uff1a \u5168\u57df\u8a2d\u5b9a\uff08\u4f8b\u5982\uff1a<code>'app:api_endpoint'</code>\uff09\u3001\u5171\u7528\u7bc4\u672c\u3002</li> <li>\u7bc4\u4f8b\uff08Example\uff09\uff1a <code>session.state['app:global_discount_code'] = 'SAVE10'</code></li> </ul> </li> <li> <p><code>temp:</code> \u524d\u7db4\uff08Temporary Invocation State\uff09\uff1a</p> <ul> <li>\u7bc4\u570d\uff08Scope\uff09\uff1a \u50c5\u9650\u65bc\u76ee\u524dinvocation\uff08\u5f9e agent \u63a5\u6536\u4f7f\u7528\u8005\u8f38\u5165\u5230\u70ba\u8a72\u8f38\u5165\u7522\u751f\u6700\u7d42\u8f38\u51fa\u7684\u6574\u500b\u904e\u7a0b\uff09\u3002</li> <li>\u6301\u4e45\u5316\uff08Persistence\uff09\uff1a \u4e0d\u6703\u6301\u4e45\u5316\u3002 invocation \u7d50\u675f\u5f8c\u5373\u6703\u4e1f\u68c4\uff0c\u4e0d\u6703\u5ef6\u7e8c\u5230\u4e0b\u4e00\u6b21\u3002</li> <li>\u4f7f\u7528\u60c5\u5883\uff08Use Cases\uff09\uff1a \u5728\u55ae\u6b21 invocation \u5167\u5132\u5b58\u4e2d\u9593\u904b\u7b97\u7d50\u679c\u3001\u65d7\u6a19\u6216\u5728\u5de5\u5177\u547c\u53eb\uff08tool calls\uff09\u9593\u50b3\u905e\u7684\u8cc7\u6599\u3002</li> <li>\u4e0d\u5efa\u8b70\u4f7f\u7528\u6642\u6a5f\uff08When Not to Use\uff09\uff1a \u9700\u8981\u8de8\u591a\u6b21 invocation \u4fdd\u7559\u7684\u8cc7\u8a0a\uff0c\u4f8b\u5982\u4f7f\u7528\u8005\u504f\u597d\u3001\u5c0d\u8a71\u6b77\u53f2\u6458\u8981\u6216\u7d2f\u7a4d\u8cc7\u6599\u3002</li> <li>\u7bc4\u4f8b\uff08Example\uff09\uff1a <code>session.state['temp:raw_api_response'] = {...}</code></li> </ul> </li> </ul> <p>Sub-Agents and Invocation Context</p> <p>\u7576\u7236 agent \u547c\u53eb\u5b50 agent\uff08\u4f8b\u5982\uff0c\u4f7f\u7528 <code>SequentialAgent</code> \u6216 <code>ParallelAgent</code>\uff09\u6642\uff0c\u6703\u5c07\u5176 <code>InvocationContext</code> \u50b3\u905e\u7d66\u5b50 agent\u3002\u9019\u8868\u793a\u6574\u500b agent \u547c\u53eb\u93c8\u6703\u5171\u7528\u76f8\u540c\u7684 invocation ID\uff0c\u56e0\u6b64\u4e5f\u5171\u7528\u76f8\u540c\u7684 <code>temp:</code> session state\u3002</p> <p>Agent \u7aef\u7684\u8996\u89d2\uff1a \u4f60\u7684 agent \u7a0b\u5f0f\u78bc\u6703\u900f\u904e\u55ae\u4e00\u7684 <code>session.state</code> \u96c6\u5408\uff08dict/Map\uff09\u8207\u5408\u4f75\u5f8c\u7684 state \u4e92\u52d5\u3002<code>SessionService</code> \u6703\u6839\u64da\u524d\u7db4\u81ea\u52d5\u5f9e\u6b63\u78ba\u7684\u5e95\u5c64\u5132\u5b58\u7a7a\u9593\u64f7\u53d6/\u5408\u4f75 state\u3002</p>"},{"location":"sessions/state/#agent-session-state","title":"\u5728 Agent \u6307\u4ee4\u4e2d\u5b58\u53d6 Session State","text":"<p>\u7576\u4f60\u4f7f\u7528 <code>LlmAgent</code> \u5be6\u4f8b\u6642\uff0c\u53ef\u4ee5\u76f4\u63a5\u900f\u904e\u7c21\u55ae\u7684\u6a23\u677f\u8a9e\u6cd5\uff0c\u5c07 session state \u7684\u503c\u6ce8\u5165\u5230 agent \u7684\u6307\u4ee4\u5b57\u4e32\u4e2d\u3002\u9019\u8b93\u4f60\u80fd\u5920\u5efa\u7acb\u52d5\u614b\u4e14\u5177\u5099\u60c5\u5883\u611f\u77e5\u7684\u6307\u4ee4\uff0c\u800c\u4e0d\u5fc5\u50c5\u4f9d\u8cf4\u81ea\u7136\u8a9e\u8a00\u6307\u793a\u3002</p>"},{"location":"sessions/state/#key","title":"\u4f7f\u7528 <code>{key}</code> \u6a23\u677f\u8a9e\u6cd5","text":"<p>\u82e5\u8981\u5f9e session state \u6ce8\u5165\u8b8a\u6578\u503c\uff0c\u53ea\u9700\u5c07\u6b32\u53d6\u5f97\u7684 state \u8b8a\u6578 key \u5305\u5728\u5927\u62ec\u865f\u5167\uff1a<code>{key}</code>\u3002\u6846\u67b6\u6703\u5728\u5c07\u6307\u4ee4\u50b3\u905e\u7d66\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u524d\uff0c\u81ea\u52d5\u4ee5 <code>session.state</code> \u4e2d\u5c0d\u61c9\u7684\u503c\u53d6\u4ee3\u9019\u500b\u4f54\u4f4d\u7b26\u3002</p> <p>\u7bc4\u4f8b\uff1a</p> <pre><code>from google.adk.agents import LlmAgent\n\nstory_generator = LlmAgent(\n    name=\"StoryGenerator\",\n    model=\"gemini-2.0-flash\",\n    instruction=\"\"\"Write a short story about a cat, focusing on the theme: {topic}.\"\"\"\n)\n\n# Assuming session.state['topic'] is set to \"friendship\", the LLM \n# will receive the following instruction:\n# \"Write a short story about a cat, focusing on the theme: friendship.\"\n</code></pre>"},{"location":"sessions/state/#_2","title":"\u91cd\u8981\u6ce8\u610f\u4e8b\u9805","text":"<ul> <li>\u9375\u503c\u5b58\u5728\u6027\uff1a\u8acb\u78ba\u4fdd\u4f60\u5728\u6307\u4ee4\u5b57\u4e32\u4e2d\u5f15\u7528\u7684\u9375\u503c\u5df2\u5b58\u5728\u65bc session.state \u4e2d\u3002\u5982\u679c\u8a72\u9375\u503c\u4e0d\u5b58\u5728\uff0cagent \u6703\u62cb\u51fa\u932f\u8aa4\u3002\u82e5\u4f60\u60f3\u4f7f\u7528\u4e00\u500b\u53ef\u80fd\u5b58\u5728\u4e5f\u53ef\u80fd\u4e0d\u5b58\u5728\u7684\u9375\u503c\uff0c\u53ef\u4ee5\u5728\u9375\u503c\u5f8c\u9762\u52a0\u4e0a\u4e00\u500b\u554f\u865f\uff08?\uff09\uff0c\u4f8b\u5982 <code>{topic?}</code>\u3002</li> <li>\u8cc7\u6599\u578b\u5225\uff1a\u8207\u9375\u503c\u95dc\u806f\u7684\u503c\u61c9\u8a72\u662f\u5b57\u4e32\uff0c\u6216\u662f\u53ef\u4ee5\u8f15\u9b06\u8f49\u63db\u70ba\u5b57\u4e32\u7684\u578b\u5225\u3002</li> <li>\u8df3\u812b\u5b57\u5143\uff1a\u5982\u679c\u4f60\u9700\u8981\u5728\u6307\u4ee4\u4e2d\u4f7f\u7528\u5b57\u9762\u4e0a\u7684\u5927\u62ec\u865f\uff08\u4f8b\u5982\u7528\u65bc JSON \u683c\u5f0f\u5316\uff09\uff0c\u5247\u9700\u8981\u9032\u884c\u8df3\u812b\u8655\u7406\u3002</li> </ul>"},{"location":"sessions/state/#instructionprovider-state","title":"\u4f7f\u7528 <code>InstructionProvider</code> \u8df3\u904e state \u6ce8\u5165","text":"<p>\u5728\u67d0\u4e9b\u60c5\u5883\u4e0b\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u5728\u6307\u4ee4\u4e2d\u76f4\u63a5\u4f7f\u7528 <code>{{</code> \u548c <code>}}</code>\uff0c\u800c\u4e0d\u89f8\u767c state \u6ce8\u5165\u6a5f\u5236\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u6b63\u5728\u70ba\u4e00\u500b\u4f7f\u7528\u76f8\u540c\u8a9e\u6cd5\u7684\u6a21\u677f\u8a9e\u8a00\u8a2d\u8a08 agent \u6307\u4ee4\u3002</p> <p>\u70ba\u9054\u5230\u6b64\u76ee\u7684\uff0c\u4f60\u53ef\u4ee5\u5c07 <code>instruction</code> \u53c3\u6578\u8a2d\u70ba\u4e00\u500b\u51fd\u5f0f\uff0c\u800c\u975e\u5b57\u4e32\u3002\u9019\u500b\u51fd\u5f0f\u7a31\u70ba <code>InstructionProvider</code>\u3002\u7576\u4f60\u4f7f\u7528 <code>InstructionProvider</code> \u6642\uff0cAgent Development Kit (ADK) \u4e0d\u6703\u5617\u8a66\u6ce8\u5165 state\uff0c\u4e14\u4f60\u7684\u6307\u4ee4\u5b57\u4e32\u6703\u539f\u5c01\u4e0d\u52d5\u5730\u50b3\u905e\u7d66\u6a21\u578b\u3002</p> <p><code>InstructionProvider</code> \u51fd\u5f0f\u6703\u63a5\u6536\u4e00\u500b <code>ReadonlyContext</code> \u7269\u4ef6\uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u8a72\u7269\u4ef6\u5b58\u53d6 session state \u6216\u5176\u4ed6\u60c5\u5883\u8cc7\u8a0a\uff0c\u4ee5\u52d5\u614b\u7522\u751f\u6307\u4ee4\u5167\u5bb9\u3002</p> Python <pre><code>from google.adk.agents import LlmAgent\nfrom google.adk.agents.readonly_context import ReadonlyContext\n\n# This is an InstructionProvider\ndef my_instruction_provider(context: ReadonlyContext) -&gt; str:\n    # You can optionally use the context to build the instruction\n    # For this example, we'll return a static string with literal braces.\n    return \"This is an instruction with {{literal_braces}} that will not be replaced.\"\n\nagent = LlmAgent(\n    model=\"gemini-2.0-flash\",\n    name=\"template_helper_agent\",\n    instruction=my_instruction_provider\n)\n</code></pre> <p>\u5982\u679c\u4f60\u60f3\u540c\u6642\u4f7f\u7528<code>InstructionProvider</code> \u4e26\u4e14\u5c07 session state \u6ce8\u5165\u5230\u4f60\u7684\u6307\u4ee4\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528<code>inject_session_state</code> \u8f14\u52a9\u51fd\u5f0f\u3002</p> Python <pre><code>from google.adk.agents import LlmAgent\nfrom google.adk.agents.readonly_context import ReadonlyContext\nfrom google.adk.utils import instructions_utils\n\nasync def my_dynamic_instruction_provider(context: ReadonlyContext) -&gt; str:\n    template = \"This is a {adjective} instruction with {{literal_braces}}.\"\n    # This will inject the 'adjective' state variable but leave the literal braces.\n    return await instructions_utils.inject_session_state(template, context)\n\nagent = LlmAgent(\n    model=\"gemini-2.0-flash\",\n    name=\"dynamic_template_helper_agent\",\n    instruction=my_dynamic_instruction_provider\n)\n</code></pre> <p>\u76f4\u63a5\u6ce8\u5165 (Direct Injection) \u7684\u512a\u9ede</p> <ul> <li>\u6e05\u6670\u6027\uff1a\u660e\u78ba\u6307\u51fa\u6307\u4ee4\u4e2d\u54ea\u4e9b\u90e8\u5206\u662f\u52d5\u614b\u7684\uff0c\u4e26\u4e14\u57fa\u65bc session state\u3002</li> <li>\u53ef\u9760\u6027\uff1a\u907f\u514d\u4f9d\u8cf4\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6b63\u78ba\u89e3\u8b80\u81ea\u7136\u8a9e\u8a00\u6307\u4ee4\u4ee5\u5b58\u53d6 state\u3002</li> <li>\u7dad\u8b77\u6027\uff1a\u7c21\u5316\u6307\u4ee4\u5b57\u4e32\uff0c\u4e26\u5728\u66f4\u65b0 state \u8b8a\u6578\u540d\u7a31\u6642\u964d\u4f4e\u932f\u8aa4\u98a8\u96aa\u3002</li> </ul> <p>\u8207\u5176\u4ed6 state \u5b58\u53d6\u65b9\u6cd5\u7684\u95dc\u4fc2</p> <p>\u6b64\u76f4\u63a5\u6ce8\u5165\u65b9\u6cd5\u50c5\u9069\u7528\u65bc LlmAgent \u6307\u4ee4\u3002\u95dc\u65bc\u5176\u4ed6 state \u5b58\u53d6\u65b9\u6cd5\uff0c\u8acb\u53c3\u8003\u4e0b\u65b9\u7ae0\u7bc0\u4ee5\u7372\u5f97\u66f4\u591a\u8cc7\u8a0a\u3002</p>"},{"location":"sessions/state/#state_1","title":"State \u5982\u4f55\u88ab\u66f4\u65b0\uff1a\u5efa\u8b70\u7684\u65b9\u6cd5","text":"<p>The Right Way to Modify State</p> <p>\u7576\u4f60\u9700\u8981\u8b8a\u66f4 session state \u6642\uff0c\u6b63\u78ba\u4e14\u6700\u5b89\u5168\u7684\u65b9\u6cd5\u662f\u76f4\u63a5\u4fee\u6539\u63d0\u4f9b\u7d66\u4f60\u51fd\u5f0f\uff08\u4f8b\u5982 <code>callback_context.state['my_key'] = 'new_value'</code>\uff09\u7684 <code>Context</code> \u4e0a\u7684 <code>state</code> \u7269\u4ef6\u3002\u9019\u88ab\u8a8d\u70ba\u662f\u300c\u6b63\u78ba\u7684\u76f4\u63a5\u72c0\u614b\u64cd\u4f5c\u300d\uff0c\u56e0\u70ba\u6846\u67b6\u6703\u81ea\u52d5\u8ffd\u8e64\u9019\u4e9b\u8b8a\u66f4\u3002</p> <p>\u9019\u9ede\u8207\u4f60\u76f4\u63a5\u4fee\u6539\u5f9e <code>SessionService</code>\uff08\u4f8b\u5982 <code>my_session.state['my_key'] = 'new_value'</code>\uff09\u53d6\u5f97\u7684 <code>Session</code> \u7269\u4ef6\u4e0a\u7684 <code>state</code> \u6709\u6839\u672c\u4e0a\u7684\u4e0d\u540c\u3002\u4f60\u61c9\u8a72\u907f\u514d\u9019\u9ebc\u505a\uff0c\u56e0\u70ba\u9019\u6703\u7e5e\u904e Agent Development Kit (ADK) \u7684\u4e8b\u4ef6\u8ffd\u8e64\u6a5f\u5236\uff0c\u53ef\u80fd\u5c0e\u81f4\u8cc7\u6599\u907a\u5931\u3002\u95dc\u65bc\u9019\u500b\u91cd\u8981\u5dee\u7570\uff0c\u8acb\u53c3\u95b1\u672c\u9801\u7d50\u5c3e\u7684\u300c\u8b66\u544a\u300d\u7ae0\u7bc0\u4ee5\u53d6\u5f97\u66f4\u591a\u7d30\u7bc0\u3002</p> <p>session state \u61c9\u8a72\u6c38\u9060\u5728\u4f7f\u7528 <code>session_service.append_event()</code> \u5c07 <code>Event</code> \u65b0\u589e\u5230 session \u6b77\u53f2\u7d00\u9304\u6642\u4e00\u4f75\u66f4\u65b0\u3002\u9019\u6a23\u624d\u80fd\u78ba\u4fdd\u8b8a\u66f4\u88ab\u6b63\u78ba\u8ffd\u8e64\u3001\u8cc7\u6599\u6301\u4e45\u5316\u904b\u4f5c\u6b63\u5e38\uff0c\u4e26\u4e14\u66f4\u65b0\u5177\u5099\u57f7\u884c\u7dd2\u5b89\u5168\u6027\u3002</p> <p>1. \u6700\u7c21\u55ae\u7684\u65b9\u6cd5\uff1a<code>output_key</code>\uff08\u9069\u7528\u65bc agent \u6587\u5b57\u56de\u61c9\uff09</p> <p>\u9019\u662f\u5c07 agent \u6700\u7d42\u6587\u5b57\u56de\u61c9\u76f4\u63a5\u5132\u5b58\u5230 state \u4e2d\u6700\u7c21\u55ae\u7684\u65b9\u6cd5\u3002\u7576\u4f60\u5b9a\u7fa9 <code>LlmAgent</code> \u6642\uff0c\u8acb\u6307\u5b9a <code>output_key</code>\uff1a</p> PythonJava <pre><code>from google.adk.agents import LlmAgent\nfrom google.adk.sessions import InMemorySessionService, Session\nfrom google.adk.runners import Runner\nfrom google.genai.types import Content, Part\n\n# Define agent with output_key\ngreeting_agent = LlmAgent(\n    name=\"Greeter\",\n    model=\"gemini-2.0-flash\", # Use a valid model\n    instruction=\"Generate a short, friendly greeting.\",\n    output_key=\"last_greeting\" # Save response to state['last_greeting']\n)\n\n# --- Setup Runner and Session ---\napp_name, user_id, session_id = \"state_app\", \"user1\", \"session1\"\nsession_service = InMemorySessionService()\nrunner = Runner(\n    agent=greeting_agent,\n    app_name=app_name,\n    session_service=session_service\n)\nsession = await session_service.create_session(app_name=app_name,\n                                    user_id=user_id,\n                                    session_id=session_id)\nprint(f\"Initial state: {session.state}\")\n\n# --- Run the Agent ---\n# Runner handles calling append_event, which uses the output_key\n# to automatically create the state_delta.\nuser_message = Content(parts=[Part(text=\"Hello\")])\nfor event in runner.run(user_id=user_id,\n                        session_id=session_id,\n                        new_message=user_message):\n    if event.is_final_response():\n      print(f\"Agent responded.\") # Response text is also in event.content\n\n# --- Check Updated State ---\nupdated_session = await session_service.get_session(app_name=APP_NAME, user_id=USER_ID, session_id=session_id)\nprint(f\"State after agent run: {updated_session.state}\")\n# Expected output might include: {'last_greeting': 'Hello there! How can I help you today?'}\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.RunConfig;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.sessions.Session;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class GreetingAgentExample {\n\n  public static void main(String[] args) {\n    // Define agent with output_key\n    LlmAgent greetingAgent =\n        LlmAgent.builder()\n            .name(\"Greeter\")\n            .model(\"gemini-2.0-flash\")\n            .instruction(\"Generate a short, friendly greeting.\")\n            .description(\"Greeting agent\")\n            .outputKey(\"last_greeting\") // Save response to state['last_greeting']\n            .build();\n\n    // --- Setup Runner and Session ---\n    String appName = \"state_app\";\n    String userId = \"user1\";\n    String sessionId = \"session1\";\n\n    InMemorySessionService sessionService = new InMemorySessionService();\n    Runner runner = new Runner(greetingAgent, appName, null, sessionService); // artifactService can be null if not used\n\n    Session session =\n        sessionService.createSession(appName, userId, null, sessionId).blockingGet();\n    System.out.println(\"Initial state: \" + session.state().entrySet());\n\n    // --- Run the Agent ---\n    // Runner handles calling appendEvent, which uses the output_key\n    // to automatically create the stateDelta.\n    Content userMessage = Content.builder().parts(List.of(Part.fromText(\"Hello\"))).build();\n\n    // RunConfig is needed for runner.runAsync in Java\n    RunConfig runConfig = RunConfig.builder().build();\n\n    for (Event event : runner.runAsync(userId, sessionId, userMessage, runConfig).blockingIterable()) {\n      if (event.finalResponse()) {\n        System.out.println(\"Agent responded.\"); // Response text is also in event.content\n      }\n    }\n\n    // --- Check Updated State ---\n    Session updatedSession =\n        sessionService.getSession(appName, userId, sessionId, Optional.empty()).blockingGet();\n    assert updatedSession != null;\n    System.out.println(\"State after agent run: \" + updatedSession.state().entrySet());\n    // Expected output might include: {'last_greeting': 'Hello there! How can I help you today?'}\n  }\n}\n</code></pre> <p>\u5728\u5e55\u5f8c\uff0c<code>Runner</code> \u6703\u4f7f\u7528 <code>output_key</code> \u4f86\u5efa\u7acb\u6240\u9700\u7684 <code>EventActions</code>\uff0c\u4e26\u642d\u914d <code>state_delta</code>\uff0c\u7136\u5f8c\u547c\u53eb <code>append_event</code>\u3002</p> <p>2. \u6a19\u6e96\u65b9\u5f0f\uff1a<code>EventActions.state_delta</code>\uff08\u7528\u65bc\u8907\u96dc\u66f4\u65b0\uff09</p> <p>\u91dd\u5c0d\u8f03\u70ba\u8907\u96dc\u7684\u60c5\u5883\uff08\u5982\u540c\u6642\u66f4\u65b0\u591a\u500b\u9375\u3001\u975e\u5b57\u4e32\u503c\u3001\u7279\u5b9a\u7bc4\u570d\u5982 <code>user:</code> \u6216 <code>app:</code>\uff0c\u6216\u662f\u8207 agent \u6700\u7d42\u56de\u61c9\u6587\u5b57\u7121\u76f4\u63a5\u95dc\u806f\u7684\u66f4\u65b0\uff09\uff0c\u4f60\u53ef\u4ee5\u5728 <code>EventActions</code> \u4e2d\u624b\u52d5\u5efa\u7acb <code>state_delta</code>\u3002</p> PythonJava <pre><code>from google.adk.sessions import InMemorySessionService, Session\nfrom google.adk.events import Event, EventActions\nfrom google.genai.types import Part, Content\nimport time\n\n# --- Setup ---\nsession_service = InMemorySessionService()\napp_name, user_id, session_id = \"state_app_manual\", \"user2\", \"session2\"\nsession = await session_service.create_session(\n    app_name=app_name,\n    user_id=user_id,\n    session_id=session_id,\n    state={\"user:login_count\": 0, \"task_status\": \"idle\"}\n)\nprint(f\"Initial state: {session.state}\")\n\n# --- Define State Changes ---\ncurrent_time = time.time()\nstate_changes = {\n    \"task_status\": \"active\",              # Update session state\n    \"user:login_count\": session.state.get(\"user:login_count\", 0) + 1, # Update user state\n    \"user:last_login_ts\": current_time,   # Add user state\n    \"temp:validation_needed\": True        # Add temporary state (will be discarded)\n}\n\n# --- Create Event with Actions ---\nactions_with_update = EventActions(state_delta=state_changes)\n# This event might represent an internal system action, not just an agent response\nsystem_event = Event(\n    invocation_id=\"inv_login_update\",\n    author=\"system\", # Or 'agent', 'tool' etc.\n    actions=actions_with_update,\n    timestamp=current_time\n    # content might be None or represent the action taken\n)\n\n# --- Append the Event (This updates the state) ---\nawait session_service.append_event(session, system_event)\nprint(\"`append_event` called with explicit state delta.\")\n\n# --- Check Updated State ---\nupdated_session = await session_service.get_session(app_name=app_name,\n                                            user_id=user_id,\n                                            session_id=session_id)\nprint(f\"State after event: {updated_session.state}\")\n# Expected: {'user:login_count': 1, 'task_status': 'active', 'user:last_login_ts': &lt;timestamp&gt;}\n# Note: 'temp:validation_needed' is NOT present.\n</code></pre> <pre><code>import com.google.adk.events.Event;\nimport com.google.adk.events.EventActions;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.sessions.Session;\nimport java.time.Instant;\nimport java.util.Optional;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class ManualStateUpdateExample {\n\n  public static void main(String[] args) {\n    // --- Setup ---\n    InMemorySessionService sessionService = new InMemorySessionService();\n    String appName = \"state_app_manual\";\n    String userId = \"user2\";\n    String sessionId = \"session2\";\n\n    ConcurrentMap&lt;String, Object&gt; initialState = new ConcurrentHashMap&lt;&gt;();\n    initialState.put(\"user:login_count\", 0);\n    initialState.put(\"task_status\", \"idle\");\n\n    Session session =\n        sessionService.createSession(appName, userId, initialState, sessionId).blockingGet();\n    System.out.println(\"Initial state: \" + session.state().entrySet());\n\n    // --- Define State Changes ---\n    long currentTimeMillis = Instant.now().toEpochMilli(); // Use milliseconds for Java Event\n\n    ConcurrentMap&lt;String, Object&gt; stateChanges = new ConcurrentHashMap&lt;&gt;();\n    stateChanges.put(\"task_status\", \"active\"); // Update session state\n\n    // Retrieve and increment login_count\n    Object loginCountObj = session.state().get(\"user:login_count\");\n    int currentLoginCount = 0;\n    if (loginCountObj instanceof Number) {\n      currentLoginCount = ((Number) loginCountObj).intValue();\n    }\n    stateChanges.put(\"user:login_count\", currentLoginCount + 1); // Update user state\n\n    stateChanges.put(\"user:last_login_ts\", currentTimeMillis); // Add user state (as long milliseconds)\n    stateChanges.put(\"temp:validation_needed\", true); // Add temporary state\n\n    // --- Create Event with Actions ---\n    EventActions actionsWithUpdate = EventActions.builder().stateDelta(stateChanges).build();\n\n    // This event might represent an internal system action, not just an agent response\n    Event systemEvent =\n        Event.builder()\n            .invocationId(\"inv_login_update\")\n            .author(\"system\") // Or 'agent', 'tool' etc.\n            .actions(actionsWithUpdate)\n            .timestamp(currentTimeMillis)\n            // content might be None or represent the action taken\n            .build();\n\n    // --- Append the Event (This updates the state) ---\n    sessionService.appendEvent(session, systemEvent).blockingGet();\n    System.out.println(\"`appendEvent` called with explicit state delta.\");\n\n    // --- Check Updated State ---\n    Session updatedSession =\n        sessionService.getSession(appName, userId, sessionId, Optional.empty()).blockingGet();\n    assert updatedSession != null;\n    System.out.println(\"State after event: \" + updatedSession.state().entrySet());\n    // Expected: {'user:login_count': 1, 'task_status': 'active', 'user:last_login_ts': &lt;timestamp_millis&gt;}\n    // Note: 'temp:validation_needed' is NOT present because InMemorySessionService's appendEvent\n    // applies delta to its internal user/app state maps IF keys have prefixes,\n    // and to the session's own state map (which is then merged on getSession).\n  }\n}\n</code></pre> <p>3. \u900f\u904e <code>CallbackContext</code> \u6216 <code>ToolContext</code>\uff08\u5efa\u8b70\u7528\u65bc Callbacks \u8207\u5de5\u5177\uff09</p> <p>\u5728 agent \u7684 Callbacks\uff08\u4f8b\u5982 <code>on_before_agent_call</code>\u3001<code>on_after_agent_call</code>\uff09\u6216\u5de5\u5177\u51fd\u5f0f\u4e2d\u4fee\u6539 state\uff0c\u6700\u4f73\u505a\u6cd5\u662f\u4f7f\u7528\u50b3\u905e\u7d66\u4f60\u51fd\u5f0f\u7684 <code>CallbackContext</code> \u6216 <code>ToolContext</code> \u7684 <code>state</code> \u5c6c\u6027\u3002</p> <ul> <li><code>callback_context.state['my_key'] = my_value</code></li> <li><code>tool_context.state['my_key'] = my_value</code></li> </ul> <p>\u9019\u4e9b context \u7269\u4ef6\u5c08\u70ba\u5728\u5176\u5404\u81ea\u7684\u57f7\u884c\u7bc4\u570d\u5167\u7ba1\u7406 state \u8b8a\u66f4\u800c\u8a2d\u8a08\u3002\u7576\u4f60\u4fee\u6539 <code>context.state</code> \u6642\uff0cAgent Development Kit (ADK) \u6846\u67b6\u6703\u81ea\u52d5\u64f7\u53d6\u9019\u4e9b\u8b8a\u66f4\uff0c\u4e26\u6b63\u78ba\u5730\u5c07\u5176\u5c0e\u5165\u7531 callback \u6216\u5de5\u5177\u6240\u7522\u751f\u4e8b\u4ef6\u7684 <code>EventActions.state_delta</code>\u3002\u9019\u500b delta \u6703\u5728\u4e8b\u4ef6\u88ab\u9644\u52a0\u6642\u7531 <code>SessionService</code> \u8655\u7406\uff0c\u78ba\u4fdd\u6b63\u78ba\u7684\u6301\u4e45\u5316\u8207\u8ffd\u8e64\u3002</p> <p>\u9019\u7a2e\u65b9\u5f0f\u8b93\u4f60\u5728 callbacks \u8207\u5de5\u5177\u4e2d\uff0c\u7121\u9700\u624b\u52d5\u5efa\u7acb <code>EventActions</code> \u8207 <code>state_delta</code>\uff0c\u5373\u53ef\u8655\u7406\u5927\u591a\u6578\u5e38\u898b\u7684 state \u66f4\u65b0\u60c5\u5883\uff0c\u4f7f\u4f60\u7684\u7a0b\u5f0f\u78bc\u66f4\u7c21\u6f54\u4e14\u66f4\u4e0d\u6613\u51fa\u932f\u3002</p> <p>\u5982\u9700\u95dc\u65bc context \u7269\u4ef6\u7684\u66f4\u8a73\u7d30\u8aaa\u660e\uff0c\u8acb\u53c3\u95b1 Context documentation\u3002</p> PythonJava <pre><code># In an agent callback or tool function\nfrom google.adk.agents import CallbackContext # or ToolContext\n\ndef my_callback_or_tool_function(context: CallbackContext, # Or ToolContext\n                                 # ... other parameters ...\n                                ):\n    # Update existing state\n    count = context.state.get(\"user_action_count\", 0)\n    context.state[\"user_action_count\"] = count + 1\n\n    # Add new state\n    context.state[\"temp:last_operation_status\"] = \"success\"\n\n    # State changes are automatically part of the event's state_delta\n    # ... rest of callback/tool logic ...\n</code></pre> <pre><code>// In an agent callback or tool method\nimport com.google.adk.agents.CallbackContext; // or ToolContext\n// ... other imports ...\n\npublic class MyAgentCallbacks {\n    public void onAfterAgent(CallbackContext callbackContext) {\n        // Update existing state\n        Integer count = (Integer) callbackContext.state().getOrDefault(\"user_action_count\", 0);\n        callbackContext.state().put(\"user_action_count\", count + 1);\n\n        // Add new state\n        callbackContext.state().put(\"temp:last_operation_status\", \"success\");\n\n        // State changes are automatically part of the event's state_delta\n        // ... rest of callback logic ...\n    }\n}\n</code></pre> <p><code>append_event</code> \u7684\u4f5c\u7528\uff1a</p> <ul> <li>\u5c07 <code>Event</code> \u52a0\u5165 <code>session.events</code>\u3002</li> <li>\u5f9e\u4e8b\u4ef6\u7684 <code>actions</code> \u8b80\u53d6 <code>state_delta</code>\u3002</li> <li>\u5c07\u9019\u4e9b\u8b8a\u66f4\u5957\u7528\u5230\u7531 <code>SessionService</code> \u7ba1\u7406\u7684 state\uff0c\u4e26\u6839\u64da\u670d\u52d9\u985e\u578b\u6b63\u78ba\u8655\u7406\u524d\u7db4\u8207\u6301\u4e45\u5316\u3002</li> <li>\u66f4\u65b0 session \u7684 <code>last_update_time</code>\u3002</li> <li>\u78ba\u4fdd\u591a\u57f7\u884c\u7dd2\u4e0b\u7684\u66f4\u65b0\u5177\u5099\u57f7\u884c\u7dd2\u5b89\u5168\u6027\u3002</li> </ul>"},{"location":"sessions/state/#state_2","title":"\u26a0\ufe0f \u95dc\u65bc\u76f4\u63a5\u4fee\u6539 state \u7684\u8b66\u544a","text":"<p>\u8acb\u907f\u514d\u5728 agent \u547c\u53eb\u7684\u53d7\u63a7\u751f\u547d\u9031\u671f\u4e4b\u5916\uff08\u5373\u4e0d\u662f\u900f\u904e <code>CallbackContext</code> \u6216 <code>ToolContext</code>\uff09\u76f4\u63a5\u4fee\u6539\u5f9e <code>SessionService</code>\uff08\u4f8b\u5982\u7d93\u7531 <code>session_service.get_session()</code> \u6216 <code>session_service.create_session()</code>\uff09\u53d6\u5f97\u7684 <code>Session</code> \u7269\u4ef6\u4e0a\u7684 <code>session.state</code> \u96c6\u5408\uff08dictionary/Map\uff09\u3002\u4f8b\u5982\uff0c\u50cf <code>retrieved_session = await session_service.get_session(...); retrieved_session.state['key'] = value</code> \u9019\u6a23\u7684\u7a0b\u5f0f\u78bc\u6703\u6709\u554f\u984c\u3002</p> <p>\u5728 callback \u6216 tools \u5167\uff0c\u4f7f\u7528 <code>CallbackContext.state</code> \u6216 <code>ToolContext.state</code> \u9032\u884c state \u4fee\u6539\uff0c\u624d\u662f\u78ba\u4fdd\u8b8a\u66f4\u88ab\u6b63\u78ba\u8ffd\u8e64\u7684\u6b63\u78ba\u65b9\u5f0f\uff0c\u56e0\u70ba\u9019\u4e9b context \u7269\u4ef6\u6703\u8655\u7406\u8207\u4e8b\u4ef6\u7cfb\u7d71\u7684\u5fc5\u8981\u6574\u5408\u3002</p> <p>\u70ba\u4ec0\u9ebc\u5f37\u70c8\u4e0d\u5efa\u8b70\u5728 context \u4e4b\u5916\u76f4\u63a5\u4fee\u6539\uff1a</p> <ol> <li>\u7e5e\u904e\u4e8b\u4ef6\u6b77\u53f2\u7d00\u9304\uff1a \u9019\u7a2e\u8b8a\u66f4\u4e0d\u6703\u88ab\u8a18\u9304\u70ba <code>Event</code>\uff0c\u56e0\u6b64\u5931\u53bb\u7a3d\u6838\u80fd\u529b\u3002</li> <li>\u7834\u58de\u6301\u4e45\u5316\uff1a \u4ee5\u9019\u7a2e\u65b9\u5f0f\u505a\u7684\u8b8a\u66f4\u5f88\u53ef\u80fd\u4e0d\u6703\u88ab <code>DatabaseSessionService</code> \u6216 <code>VertexAiSessionService</code> \u5132\u5b58\u3002\u5b83\u5011\u4ef0\u8cf4 <code>append_event</code> \u4f86\u89f8\u767c\u5132\u5b58\u3002</li> <li>\u975e\u57f7\u884c\u7dd2\u5b89\u5168\uff1a \u53ef\u80fd\u5c0e\u81f4\u7af6\u722d\u689d\u4ef6\u8207\u8cc7\u6599\u907a\u5931\u3002</li> <li>\u5ffd\u7565\u6642\u9593\u6233\u8207\u908f\u8f2f\uff1a \u4e0d\u6703\u66f4\u65b0 <code>last_update_time</code>\uff0c\u4e5f\u4e0d\u6703\u89f8\u767c\u76f8\u95dc\u4e8b\u4ef6\u908f\u8f2f\u3002</li> </ol> <p>\u5efa\u8b70\uff1a \u8acb\u50c5\u900f\u904e <code>output_key</code>\u3001<code>EventActions.state_delta</code>\uff08\u7576\u624b\u52d5\u5efa\u7acb\u4e8b\u4ef6\u6642\uff09\uff0c\u6216\u5728\u5404\u81ea\u7684\u7bc4\u7587\u5167\u4fee\u6539 <code>CallbackContext</code> \u6216 <code>ToolContext</code> \u7269\u4ef6\u7684 <code>state</code> \u5c6c\u6027\u4f86\u66f4\u65b0 state\u3002\u9019\u4e9b\u65b9\u6cd5\u80fd\u78ba\u4fdd state \u7ba1\u7406\u7684\u53ef\u9760\u6027\u3001\u53ef\u8ffd\u8e64\u6027\u8207\u6301\u4e45\u6027\u3002\u50c5\u5728\u8b80\u53d6 state \u6642\uff0c\u624d\u76f4\u63a5\u5b58\u53d6\u5f9e <code>SessionService</code> \u53d6\u5f97\u7684 <code>session.state</code>\u3002</p>"},{"location":"sessions/state/#state_3","title":"State \u8a2d\u8a08\u6700\u4f73\u5be6\u8e10\u91cd\u9ede\u56de\u9867","text":"<ul> <li>\u6975\u7c21\u4e3b\u7fa9\uff1a \u53ea\u5132\u5b58\u5fc5\u8981\u4e14\u5177\u52d5\u614b\u6027\u7684\u8cc7\u6599\u3002</li> <li>\u53ef\u5e8f\u5217\u5316\uff1a \u4f7f\u7528\u57fa\u672c\u4e14\u53ef\u5e8f\u5217\u5316\u7684\u578b\u5225\u3002</li> <li>\u5177\u63cf\u8ff0\u6027\u7684\u9375\u8207\u524d\u7db4\uff1a \u4f7f\u7528\u6e05\u695a\u7684\u540d\u7a31\u8207\u9069\u7576\u7684\u524d\u7db4\uff08<code>user:</code>\u3001<code>app:</code>\u3001<code>temp:</code> \u6216\u7121\uff09\u3002</li> <li>\u6dfa\u5c64\u7d50\u69cb\uff1a \u76e1\u91cf\u907f\u514d\u6df1\u5c64\u5de2\u72c0\u3002</li> <li>\u6a19\u6e96\u66f4\u65b0\u6d41\u7a0b\uff1a \u4f9d\u8cf4 <code>append_event</code>\u3002</li> </ul>"},{"location":"streaming/","title":"\u96d9\u5411\u4e32\u6d41 (bidi-streaming, live) \u5728 Agent Development Kit (ADK)","text":"<p>Warning</p> <p>\u9019\u662f\u4e00\u9805\u5be6\u9a57\u6027\u529f\u80fd\u3002\u76ee\u524d\u50c5\u652f\u63f4 Python\u3002</p> <p>Info</p> <p>\u9019\u8207\u4f3a\u670d\u5668\u7aef\u4e32\u6d41 (server-side streaming) \u6216\u9010\u5b57\u5143\u4e32\u6d41 (token-level streaming) \u4e0d\u540c\u3002  </p> <p>\u9010\u5b57\u5143\u4e32\u6d41 (token-level streaming) \u662f\u4e00\u7a2e\u55ae\u5411\u6d41\u7a0b\uff0c\u5927\u578b\u8a9e\u8a00\u6a21\u578b (Large Language Model, LLM) \u6703\u4e00\u6b21\u7522\u751f\u4e00\u500b\u5b57\u5143\uff08token\uff09\u4e26\u56de\u50b3\u7d66\u4f7f\u7528\u8005\u3002\u9019\u6703\u7522\u751f\u300c\u6253\u5b57\u300d\u7684\u6548\u679c\uff0c\u8b93\u4f7f\u7528\u8005\u611f\u89ba\u56de\u61c9\u5373\u6642\uff0c\u4e26\u7e2e\u77ed\u770b\u5230\u7b54\u6848\u958b\u982d\u6240\u9700\u7684\u6642\u9593\u3002\u4f7f\u7528\u8005\u6703\u5148\u9001\u51fa\u5b8c\u6574\u7684\u63d0\u793a\uff0c\u6a21\u578b\u8655\u7406\u5f8c\uff0c\u4fbf\u958b\u59cb\u9010\u6b65\u7522\u751f\u4e26\u50b3\u56de\u56de\u61c9\u3002\u672c\u7bc0\u8aaa\u660e\u7684\u662f\u96d9\u5411\u4e32\u6d41 (bidi-streaming, live)\u3002</p> <p>Agent Development Kit (ADK) \u7684\u96d9\u5411\u4e32\u6d41 (bidi-streaming, live) \u529f\u80fd\uff0c\u5c07 Gemini Live API \u7684\u4f4e\u5ef6\u9072\u96d9\u5411\u8a9e\u97f3\u8207\u8996\u8a0a\u4e92\u52d5\u80fd\u529b\uff0c\u5e36\u5165 AI agent\u3002</p> <p>\u900f\u904e\u96d9\u5411\u4e32\u6d41 (bidi-streaming, live) \u6a21\u5f0f\uff0c\u60a8\u53ef\u4ee5\u70ba\u7d42\u7aef\u4f7f\u7528\u8005\u63d0\u4f9b\u81ea\u7136\u4e14\u985e\u4f3c\u771f\u4eba\u7684\u8a9e\u97f3\u5c0d\u8a71\u9ad4\u9a57\uff0c\u5305\u62ec\u8b93\u4f7f\u7528\u8005\u80fd\u4ee5\u8a9e\u97f3\u6307\u4ee4\u4e2d\u65b7 agent \u56de\u61c9\u7684\u80fd\u529b\u3002\u652f\u63f4\u4e32\u6d41\u7684 agent \u53ef\u8655\u7406\u6587\u5b57\u3001\u8a9e\u97f3\u8207\u8996\u8a0a\u8f38\u5165\uff0c\u4e26\u80fd\u8f38\u51fa\u6587\u5b57\u8207\u8a9e\u97f3\u3002</p> <ul> <li> <p> \u5feb\u901f\u958b\u59cb\uff08\u96d9\u5411\u4e32\u6d41\uff09</p> <p>\u5728\u9019\u500b\u5feb\u901f\u958b\u59cb\u6559\u5b78\u4e2d\uff0c\u60a8\u5c07\u5efa\u7acb\u4e00\u500b\u7c21\u55ae\u7684 agent\uff0c\u4e26\u5728 ADK \u4e2d\u4f7f\u7528\u4e32\u6d41\u529f\u80fd\uff0c\u5be6\u4f5c\u4f4e\u5ef6\u9072\u3001\u96d9\u5411\u7684\u8a9e\u97f3\u8207\u8996\u8a0a\u901a\u8a0a\u3002</p> <ul> <li>Quickstart (Bidi-streaming)</li> </ul> </li> <li> <p> \u81ea\u8a02\u97f3\u8a0a\u4e32\u6d41\u61c9\u7528\u7a0b\u5f0f\u7bc4\u4f8b</p> <p>\u672c\u6587\u6982\u8ff0\u4e86\u4f7f\u7528 ADK \u4e32\u6d41\u8207 FastAPI \u6240\u5efa\u69cb\u7684\u81ea\u8a02\u975e\u540c\u6b65 Web \u61c9\u7528\u7a0b\u5f0f\u7684\u4f3a\u670d\u5668\u8207\u7528\u6236\u7aef\u7a0b\u5f0f\u78bc\uff0c\u5be6\u73fe\u5373\u6642\u3001\u96d9\u5411\u7684\u97f3\u8a0a\u8207\u6587\u5b57\u901a\u8a0a\uff0c\u4e26\u540c\u6642\u652f\u63f4 Server Sent Events (SSE) \u8207 WebSockets\u3002</p> <ul> <li>Custom Audio Streaming app sample (SSE)</li> <li>Custom Audio Streaming app sample (WebSockets)</li> </ul> </li> <li> <p> \u96d9\u5411\u4e32\u6d41\u958b\u767c\u6307\u5357\u7cfb\u5217</p> <p>\u4e00\u7cfb\u5217\u6df1\u5165\u4ecb\u7d39 ADK \u96d9\u5411\u4e32\u6d41\u958b\u767c\u7684\u6587\u7ae0\u3002\u60a8\u53ef\u4ee5\u5b78\u7fd2\u57fa\u672c\u6982\u5ff5\u8207\u61c9\u7528\u5834\u666f\u3001\u6838\u5fc3 API\uff0c\u4ee5\u53ca\u7aef\u5230\u7aef\u61c9\u7528\u8a2d\u8a08\u3002</p> <ul> <li>Bidi-streaming development guide series: Part 1 - Introduction</li> </ul> </li> <li> <p> \u4e32\u6d41\u5de5\u5177</p> <p>\u4e32\u6d41\u5de5\u5177\u5141\u8a31\u5de5\u5177\uff08functions\uff09\u5c07\u4e2d\u9593\u7d50\u679c\u4e32\u6d41\u56de agent\uff0cagent \u4e5f\u53ef\u4ee5\u6839\u64da\u9019\u4e9b\u4e2d\u9593\u7d50\u679c\u505a\u51fa\u56de\u61c9\u3002\u4f8b\u5982\uff0c\u6211\u5011\u53ef\u4ee5\u5229\u7528\u4e32\u6d41\u5de5\u5177\u76e3\u63a7\u80a1\u50f9\u8b8a\u5316\uff0c\u4e26\u8b93 agent \u53ca\u6642\u53cd\u61c9\u3002\u53e6\u4e00\u500b\u4f8b\u5b50\u662f agent \u53ef\u76e3\u63a7\u8996\u8a0a\u4e32\u6d41\uff0c\u7576\u8996\u8a0a\u5167\u5bb9\u6709\u8b8a\u5316\u6642\uff0cagent \u6703\u56de\u5831\u9019\u4e9b\u8b8a\u5316\u3002</p> <ul> <li>Streaming Tools</li> </ul> </li> <li> <p> \u81ea\u8a02\u97f3\u8a0a\u4e32\u6d41\u61c9\u7528\u7a0b\u5f0f\u7bc4\u4f8b</p> <p>\u672c\u6587\u6982\u8ff0\u4e86\u4f7f\u7528 ADK \u4e32\u6d41\u8207 FastAPI \u6240\u5efa\u69cb\u7684\u81ea\u8a02\u975e\u540c\u6b65 Web \u61c9\u7528\u7a0b\u5f0f\u7684\u4f3a\u670d\u5668\u8207\u7528\u6236\u7aef\u7a0b\u5f0f\u78bc\uff0c\u5be6\u73fe\u5373\u6642\u3001\u96d9\u5411\u7684\u97f3\u8a0a\u8207\u6587\u5b57\u901a\u8a0a\uff0c\u4e26\u540c\u6642\u652f\u63f4 Server Sent Events (SSE) \u8207 WebSockets\u3002</p> <ul> <li>Streaming Configurations</li> </ul> </li> <li> <p> \u90e8\u843d\u683c\u6587\u7ae0\uff1aGoogle ADK + Vertex AI Live API</p> <p>\u672c\u6587\u8aaa\u660e\u5982\u4f55\u5728 ADK \u4e2d\u4f7f\u7528\u96d9\u5411\u4e32\u6d41 (bidi-streaming, live) \u9032\u884c\u5373\u6642\u97f3\u8a0a\uff0f\u8996\u8a0a\u4e32\u6d41\u3002\u5167\u5bb9\u5305\u542b\u4f7f\u7528 LiveRequestQueue \u5efa\u7acb\u81ea\u8a02\u3001\u4e92\u52d5\u5f0f AI agent \u7684 Python \u4f3a\u670d\u5668\u7bc4\u4f8b\u3002</p> <ul> <li>Blog post: Google ADK + Vertex AI Live API</li> </ul> </li> </ul>"},{"location":"streaming/configuration.en/","title":"Configurating streaming behaviour","text":"<p>There are some configurations you can set for live(streaming) agents. </p> <p>It's set by RunConfig. You should use RunConfig with your Runner.run_live(...). </p> <p>For example, if you want to set voice config, you can leverage speech_config. </p> <pre><code>voice_config = genai_types.VoiceConfig(\n    prebuilt_voice_config=genai_types.PrebuiltVoiceConfigDict(\n        voice_name='Aoede'\n    )\n)\nspeech_config = genai_types.SpeechConfig(voice_config=voice_config)\nrun_config = RunConfig(speech_config=speech_config)\n\nrunner.run_live(\n    ...,\n    run_config=run_config,\n)\n</code></pre>"},{"location":"streaming/configuration/","title":"\u8a2d\u5b9a\u4e32\u6d41\u884c\u70ba","text":"<p>\u4f60\u53ef\u4ee5\u70ba\u5373\u6642 agent\uff08live agents\uff09\u8a2d\u5b9a\u4e00\u4e9b\u76f8\u95dc\u7684\u7d44\u614b\u3002</p> <p>\u9019\u4e9b\u8a2d\u5b9a\u662f\u900f\u904e RunConfig \u4f86\u5b8c\u6210\u7684\u3002\u4f60\u61c9\u8a72\u5728\u4f7f\u7528 Runner.run_live(...) \u6642\u642d\u914d RunConfig \u4e00\u8d77\u4f7f\u7528\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u8981\u8a2d\u5b9a\u8a9e\u97f3\u76f8\u95dc\u7684\u7d44\u614b\uff0c\u53ef\u4ee5\u5229\u7528 speech_config \u4f86\u9054\u6210\u3002 </p> <pre><code>voice_config = genai_types.VoiceConfig(\n    prebuilt_voice_config=genai_types.PrebuiltVoiceConfigDict(\n        voice_name='Aoede'\n    )\n)\nspeech_config = genai_types.SpeechConfig(voice_config=voice_config)\nrun_config = RunConfig(speech_config=speech_config)\n\nrunner.run_live(\n    ...,\n    run_config=run_config,\n)\n</code></pre>"},{"location":"streaming/custom-streaming-ws.en/","title":"Custom Audio Streaming app (WebSocket)","text":"<p>This article overviews the server and client code for a custom asynchronous web app built with ADK Streaming and FastAPI, enabling real-time, bidirectional audio and text communication with WebSockets.</p> <p>Note: This guide assumes you have experience of JavaScript and Python <code>asyncio</code> programming.</p>"},{"location":"streaming/custom-streaming-ws.en/#supported-models","title":"Supported models for voice/video streaming","text":"<p>In order to use voice/video streaming in ADK, you will need to use Gemini models that support the Live API. You can find the model ID(s) that supports the Gemini Live API in the documentation:</p> <ul> <li>Google AI Studio: Gemini Live API</li> <li>Vertex AI: Gemini Live API</li> </ul> <p>There is also a SSE version of the sample is available.</p>"},{"location":"streaming/custom-streaming-ws.en/#1.-setup-installation","title":"1. Install ADK","text":"<p>Create &amp; Activate Virtual Environment (Recommended):</p> <pre><code># Create\npython -m venv .venv\n# Activate (each new terminal)\n# macOS/Linux: source .venv/bin/activate\n# Windows CMD: .venv\\Scripts\\activate.bat\n# Windows PowerShell: .venv\\Scripts\\Activate.ps1\n</code></pre> <p>Install ADK:</p> <pre><code>pip install --upgrade google-adk==1.10.0\n</code></pre> <p>Set <code>SSL_CERT_FILE</code> variable with the following command.</p> <pre><code>export SSL_CERT_FILE=$(python -m certifi)\n</code></pre> <p>Download the sample code:</p> <pre><code>git clone --no-checkout https://github.com/google/adk-docs.git\ncd adk-docs\ngit sparse-checkout init --cone\ngit sparse-checkout set examples/python/snippets/streaming/adk-streaming-ws\ngit checkout main\ncd examples/python/snippets/streaming/adk-streaming-ws/app\n</code></pre> <p>This sample code has the following files and folders:</p> <pre><code>adk-streaming-ws/\n\u2514\u2500\u2500 app/ # the web app folder\n    \u251c\u2500\u2500 .env # Gemini API key / Google Cloud Project ID\n    \u251c\u2500\u2500 main.py # FastAPI web app\n    \u251c\u2500\u2500 static/ # Static content folder\n    |   \u251c\u2500\u2500 js # JavaScript files folder (includes app.js)\n    |   \u2514\u2500\u2500 index.html # The web client page\n    \u2514\u2500\u2500 google_search_agent/ # Agent folder\n        \u251c\u2500\u2500 __init__.py # Python package\n        \u2514\u2500\u2500 agent.py # Agent definition\n</code></pre>"},{"location":"streaming/custom-streaming-ws.en/#2.-set-up-the-platform","title":"2. Set up the platform","text":"<p>To run the sample app, choose a platform from either Google AI Studio or Google Cloud Vertex AI:</p> Gemini - Google AI StudioGemini - Google Cloud Vertex AI <ol> <li>Get an API key from Google AI Studio.</li> <li> <p>Open the <code>.env</code> file located inside (<code>app/</code>) and copy-paste the following code.</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=FALSE\nGOOGLE_API_KEY=PASTE_YOUR_ACTUAL_API_KEY_HERE\n</code></pre> </li> <li> <p>Replace <code>PASTE_YOUR_ACTUAL_API_KEY_HERE</code> with your actual <code>API KEY</code>.</p> </li> </ol> <ol> <li>You need an existing    Google Cloud account and a    project.<ul> <li>Set up a   Google Cloud project</li> <li>Set up the   gcloud CLI</li> <li>Authenticate to Google Cloud, from the terminal by running   <code>gcloud auth login</code>.</li> <li>Enable the Vertex AI API.</li> </ul> </li> <li> <p>Open the <code>.env</code> file located inside (<code>app/</code>). Copy-paste    the following code and update the project ID and location.</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_CLOUD_PROJECT=PASTE_YOUR_ACTUAL_PROJECT_ID\nGOOGLE_CLOUD_LOCATION=us-central1\n</code></pre> </li> </ol>"},{"location":"streaming/custom-streaming-ws.en/#agentpy","title":"agent.py","text":"<p>The agent definition code <code>agent.py</code> in the <code>google_search_agent</code> folder is where the agent's logic is written:</p> <pre><code>from google.adk.agents import Agent\nfrom google.adk.tools import google_search  # Import the tool\n\nroot_agent = Agent(\n   name=\"google_search_agent\",\n   model=\"gemini-2.0-flash-exp\", # if this model does not work, try below\n   #model=\"gemini-2.0-flash-live-001\",\n   description=\"Agent to answer questions using Google Search.\",\n   instruction=\"Answer the question using the Google Search tool.\",\n   tools=[google_search],\n)\n</code></pre> <p>Note:  To enable both text and audio/video input, the model must support the generateContent (for text) and bidiGenerateContent methods. Verify these capabilities by referring to the List Models Documentation. This quickstart utilizes the gemini-2.0-flash-exp model for demonstration purposes.</p> <p>Notice how easily you integrated grounding with Google Search capabilities.  The <code>Agent</code> class and the <code>google_search</code> tool handle the complex interactions with the LLM and grounding with the search API, allowing you to focus on the agent's purpose and behavior.</p> <p></p>"},{"location":"streaming/custom-streaming-ws.en/#3.-interact-with-your-streaming-app","title":"3. Interact with Your Streaming app","text":"<p>1. Navigate to the Correct Directory:</p> <p>To run your agent effectively, make sure you are in the app folder (<code>adk-streaming-ws/app</code>)</p> <p>2. Start the Fast API: Run the following command to start CLI interface with</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>3. Access the app with the text mode: Once the app starts, the terminal will display a local URL (e.g., http://localhost:8000). Click this link to open the UI in your browser.</p> <p>Now you should see the UI like this:</p> <p></p> <p>Try asking a question <code>What time is it now?</code>. The agent will use Google Search to respond to your queries. You would notice that the UI shows the agent's response as streaming text. You can also send messages to the agent at any time, even while the agent is still responding. This demonstrates the bidirectional communication capability of ADK Streaming.</p> <p>4. Access the app with the audio mode: Now click the <code>Start Audio</code> button. The app reconnects with the server in an audio mode, and the UI will show the following dialog for the first time:</p> <p></p> <p>Click <code>Allow while visiting the site</code>, then you will see the microphone icon will be shown at the top of the browser:</p> <p></p> <p>Now you can talk to the agent with voice. Ask questions like <code>What time is it now?</code> with voice and you will hear the agent responding in voice too. As Streaming for ADK supports multiple languages, it can also respond to question in the supported languages.</p> <p>5. Check console logs</p> <p>If you are using the Chrome browser, use the right click and select <code>Inspect</code> to open the DevTools. On the <code>Console</code>, you can see the incoming and outgoing audio data such as <code>[CLIENT TO AGENT]</code> and <code>[AGENT TO CLIENT]</code>, representing the audio data streaming in and out between the browser and the server.</p> <p>At the same time, in the app server console, you should see something like this:</p> <pre><code>INFO:     ('127.0.0.1', 50068) - \"WebSocket /ws/70070018?is_audio=true\" [accepted]\nClient #70070018 connected, audio mode: true\nINFO:     connection open\nINFO:     127.0.0.1:50061 - \"GET /static/js/pcm-player-processor.js HTTP/1.1\" 200 OK\nINFO:     127.0.0.1:50060 - \"GET /static/js/pcm-recorder-processor.js HTTP/1.1\" 200 OK\n[AGENT TO CLIENT]: audio/pcm: 9600 bytes.\nINFO:     127.0.0.1:50082 - \"GET /favicon.ico HTTP/1.1\" 404 Not Found\n[AGENT TO CLIENT]: audio/pcm: 11520 bytes.\n[AGENT TO CLIENT]: audio/pcm: 11520 bytes.\n</code></pre> <p>These console logs are important in case you develop your own streaming application. In many cases, the communication failure between the browser and server becomes a major cause for the streaming application bugs.</p> <p>6. Troubleshooting tips</p> <ul> <li>When <code>ws://</code> doesn't work: If you see any errors on the Chrome DevTools with regard to <code>ws://</code> connection, try replacing <code>ws://</code> with <code>wss://</code> on <code>app/static/js/app.js</code> at line 28. This may happen when you are running the sample on a cloud environment and using a proxy connection to connect from your browser.</li> <li>When <code>gemini-2.0-flash-exp</code> model doesn't work: If you see any errors on the app server console with regard to <code>gemini-2.0-flash-exp</code> model availability, try replacing it with <code>gemini-2.0-flash-live-001</code> on <code>app/google_search_agent/agent.py</code> at line 6.</li> </ul>"},{"location":"streaming/custom-streaming-ws.en/#4.-server-side-code-overview","title":"4. Server code overview","text":"<p>This server app enables real-time, streaming interaction with ADK agent via WebSockets. Clients send text/audio to the ADK agent and receive streamed text/audio responses.</p> <p>Core functions: 1.  Initialize/manage ADK agent sessions. 2.  Handle client WebSocket connections. 3.  Relay client messages to the ADK agent. 4.  Stream ADK agent responses (text/audio) to clients.</p>"},{"location":"streaming/custom-streaming-ws.en/#adk-streaming-setup","title":"ADK Streaming Setup","text":"<pre><code>import os\nimport json\nimport asyncio\nimport base64\n\nfrom pathlib import Path\nfrom dotenv import load_dotenv\n\nfrom google.genai.types import (\n    Part,\n    Content,\n    Blob,\n)\n\nfrom google.adk.runners import Runner\nfrom google.adk.agents import LiveRequestQueue\nfrom google.adk.agents.run_config import RunConfig\nfrom google.adk.sessions.in_memory_session_service import InMemorySessionService\n\nfrom fastapi import FastAPI, WebSocket\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse\n\nfrom google_search_agent.agent import root_agent\n</code></pre> <ul> <li>Imports: Includes standard Python libraries, <code>dotenv</code> for environment variables, Google ADK, and FastAPI.</li> <li><code>load_dotenv()</code>: Loads environment variables.</li> <li><code>APP_NAME</code>: Application identifier for ADK.</li> <li><code>session_service = InMemorySessionService()</code>: Initializes an in-memory ADK session service, suitable for single-instance or development use. Production might use a persistent store.</li> </ul>"},{"location":"streaming/custom-streaming-ws.en/#start_agent_sessionsession_id-is_audiofalse","title":"<code>start_agent_session(session_id, is_audio=False)</code>","text":"<pre><code>async def start_agent_session(user_id, is_audio=False):\n    \"\"\"Starts an agent session\"\"\"\n\n    # Create a Runner\n    runner = InMemoryRunner(\n        app_name=APP_NAME,\n        agent=root_agent,\n    )\n\n    # Create a Session\n    session = await runner.session_service.create_session(\n        app_name=APP_NAME,\n        user_id=user_id,  # Replace with actual user ID\n    )\n\n    # Set response modality\n    modality = \"AUDIO\" if is_audio else \"TEXT\"\n    run_config = RunConfig(response_modalities=[modality])\n\n    # Optional: Enable session resumption for improved reliability\n    # run_config = RunConfig(\n    #     response_modalities=[modality],\n    #     session_resumption=types.SessionResumptionConfig()\n    # )\n\n    # Create a LiveRequestQueue for this session\n    live_request_queue = LiveRequestQueue()\n\n    # Start agent session\n    live_events = runner.run_live(\n        session=session,\n        live_request_queue=live_request_queue,\n        run_config=run_config,\n    )\n    return live_events, live_request_queue\n</code></pre> <p>This function initializes an ADK agent live session.</p> Parameter Type Description <code>user_id</code> <code>str</code> Unique client identifier. <code>is_audio</code> <code>bool</code> <code>True</code> for audio responses, <code>False</code> for text (default). <p>Key Steps: 1.  Create Runner: Instantiates the ADK runner for the <code>root_agent</code>. 2.  Create Session: Establishes an ADK session. 3.  Set Response Modality: Configures agent response as \"AUDIO\" or \"TEXT\". 4.  Create LiveRequestQueue: Creates a queue for client inputs to the agent. 5.  Start Agent Session: <code>runner.run_live(...)</code> starts the agent, returning:     *   <code>live_events</code>: Asynchronous iterable for agent events (text, audio, completion).     *   <code>live_request_queue</code>: Queue to send data to the agent.</p> <p>Returns: <code>(live_events, live_request_queue)</code>.</p>"},{"location":"streaming/custom-streaming-ws.en/#session-resumption-configuration","title":"Session Resumption Configuration","text":"<p>ADK supports live session resumption to improve reliability during streaming conversations. This feature enables automatic reconnection when live connections are interrupted due to network issues.</p>"},{"location":"streaming/custom-streaming-ws.en/#enabling-session-resumption","title":"Enabling Session Resumption","text":"<p>To enable session resumption, you need to:</p> <ol> <li> <p>Import the required types: <pre><code>from google.genai import types\n</code></pre></p> </li> <li> <p>Configure session resumption in RunConfig: <pre><code>run_config = RunConfig(\n    response_modalities=[modality],\n    session_resumption=types.SessionResumptionConfig()\n)\n</code></pre></p> </li> </ol>"},{"location":"streaming/custom-streaming-ws.en/#session-resumption-features","title":"Session Resumption Features","text":"<ul> <li>Automatic Handle Caching - The system automatically caches session resumption handles during live conversations</li> <li>Transparent Reconnection - When connections are interrupted, the system attempts to resume using cached handles</li> <li>Context Preservation - Conversation context and state are maintained across reconnections</li> <li>Network Resilience - Provides better user experience during unstable network conditions</li> </ul>"},{"location":"streaming/custom-streaming-ws.en/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Session resumption handles are managed internally by the ADK framework</li> <li>No additional client-side code changes are required</li> <li>The feature is particularly beneficial for long-running streaming conversations</li> <li>Connection interruptions become less disruptive to the user experience</li> </ul>"},{"location":"streaming/custom-streaming-ws.en/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter errors with session resumption:</p> <ol> <li>Check model compatibility - Ensure you're using a model that supports session resumption</li> <li>API limitations - Some session resumption features may not be available in all API versions</li> <li>Remove session resumption - If issues persist, you can disable session resumption by removing the <code>session_resumption</code> parameter from <code>RunConfig</code></li> </ol>"},{"location":"streaming/custom-streaming-ws.en/#agent_to_client_messagingwebsocket-live_events","title":"<code>agent_to_client_messaging(websocket, live_events)</code>","text":"<pre><code>async def agent_to_client_messaging(websocket, live_events):\n    \"\"\"Agent to client communication\"\"\"\n    while True:\n        async for event in live_events:\n\n            # If the turn complete or interrupted, send it\n            if event.turn_complete or event.interrupted:\n                message = {\n                    \"turn_complete\": event.turn_complete,\n                    \"interrupted\": event.interrupted,\n                }\n                await websocket.send_text(json.dumps(message))\n                print(f\"[AGENT TO CLIENT]: {message}\")\n                continue\n\n            # Read the Content and its first Part\n            part: Part = (\n                event.content and event.content.parts and event.content.parts[0]\n            )\n            if not part:\n                continue\n\n            # If it's audio, send Base64 encoded audio data\n            is_audio = part.inline_data and part.inline_data.mime_type.startswith(\"audio/pcm\")\n            if is_audio:\n                audio_data = part.inline_data and part.inline_data.data\n                if audio_data:\n                    message = {\n                        \"mime_type\": \"audio/pcm\",\n                        \"data\": base64.b64encode(audio_data).decode(\"ascii\")\n                    }\n                    await websocket.send_text(json.dumps(message))\n                    print(f\"[AGENT TO CLIENT]: audio/pcm: {len(audio_data)} bytes.\")\n                    continue\n\n            # If it's text and a parial text, send it\n            if part.text and event.partial:\n                message = {\n                    \"mime_type\": \"text/plain\",\n                    \"data\": part.text\n                }\n                await websocket.send_text(json.dumps(message))\n                print(f\"[AGENT TO CLIENT]: text/plain: {message}\")\n</code></pre> <p>This asynchronous function streams ADK agent events to the WebSocket client.</p> <p>Logic: 1.  Iterates through <code>live_events</code> from the agent. 2.  Turn Completion/Interruption: Sends status flags to the client. 3.  Content Processing:     *   Extracts the first <code>Part</code> from event content.     *   Audio Data: If audio (PCM), Base64 encodes and sends it as JSON: <code>{ \"mime_type\": \"audio/pcm\", \"data\": \"&lt;base64_audio&gt;\" }</code>.     *   Text Data: If partial text, sends it as JSON: <code>{ \"mime_type\": \"text/plain\", \"data\": \"&lt;partial_text&gt;\" }</code>. 4.  Logs messages.</p>"},{"location":"streaming/custom-streaming-ws.en/#client_to_agent_messagingwebsocket-live_request_queue","title":"<code>client_to_agent_messaging(websocket, live_request_queue)</code>","text":"<pre><code>async def client_to_agent_messaging(websocket, live_request_queue):\n    \"\"\"Client to agent communication\"\"\"\n    while True:\n        # Decode JSON message\n        message_json = await websocket.receive_text()\n        message = json.loads(message_json)\n        mime_type = message[\"mime_type\"]\n        data = message[\"data\"]\n\n        # Send the message to the agent\n        if mime_type == \"text/plain\":\n            # Send a text message\n            content = Content(role=\"user\", parts=[Part.from_text(text=data)])\n            live_request_queue.send_content(content=content)\n            print(f\"[CLIENT TO AGENT]: {data}\")\n        elif mime_type == \"audio/pcm\":\n            # Send an audio data\n            decoded_data = base64.b64decode(data)\n            live_request_queue.send_realtime(Blob(data=decoded_data, mime_type=mime_type))\n        else:\n            raise ValueError(f\"Mime type not supported: {mime_type}\")\n</code></pre> <p>This asynchronous function relays messages from the WebSocket client to the ADK agent.</p> <p>Logic: 1.  Receives and parses JSON messages from the WebSocket, expecting: <code>{ \"mime_type\": \"text/plain\" | \"audio/pcm\", \"data\": \"&lt;data&gt;\" }</code>. 2.  Text Input: For \"text/plain\", sends <code>Content</code> to agent via <code>live_request_queue.send_content()</code>. 3.  Audio Input: For \"audio/pcm\", decodes Base64 data, wraps in <code>Blob</code>, and sends via <code>live_request_queue.send_realtime()</code>. 4.  Raises <code>ValueError</code> for unsupported MIME types. 5.  Logs messages.</p>"},{"location":"streaming/custom-streaming-ws.en/#fastapi-web-application","title":"FastAPI Web Application","text":"<pre><code>app = FastAPI()\n\nSTATIC_DIR = Path(\"static\")\napp.mount(\"/static\", StaticFiles(directory=STATIC_DIR), name=\"static\")\n\n\n@app.get(\"/\")\nasync def root():\n    \"\"\"Serves the index.html\"\"\"\n    return FileResponse(os.path.join(STATIC_DIR, \"index.html\"))\n\n\n@app.websocket(\"/ws/{user_id}\")\nasync def websocket_endpoint(websocket: WebSocket, user_id: int, is_audio: str):\n    \"\"\"Client websocket endpoint\"\"\"\n\n    # Wait for client connection\n    await websocket.accept()\n    print(f\"Client #{user_id} connected, audio mode: {is_audio}\")\n\n    # Start agent session\n    user_id_str = str(user_id)\n    live_events, live_request_queue = await start_agent_session(user_id_str, is_audio == \"true\")\n\n    # Start tasks\n    agent_to_client_task = asyncio.create_task(\n        agent_to_client_messaging(websocket, live_events)\n    )\n    client_to_agent_task = asyncio.create_task(\n        client_to_agent_messaging(websocket, live_request_queue)\n    )\n\n    # Wait until the websocket is disconnected or an error occurs\n    tasks = [agent_to_client_task, client_to_agent_task]\n    await asyncio.wait(tasks, return_when=asyncio.FIRST_EXCEPTION)\n\n    # Close LiveRequestQueue\n    live_request_queue.close()\n\n    # Disconnected\n    print(f\"Client #{user_id} disconnected\")\n</code></pre> <ul> <li><code>app = FastAPI()</code>: Initializes the application.</li> <li>Static Files: Serves files from the <code>static</code> directory under <code>/static</code>.</li> <li><code>@app.get(\"/\")</code> (Root Endpoint): Serves <code>index.html</code>.</li> <li><code>@app.websocket(\"/ws/{user_id}\")</code> (WebSocket Endpoint):<ul> <li>Path Parameters: <code>user_id</code> (int) and <code>is_audio</code> (str: \"true\"/\"false\").</li> <li>Connection Handling:<ol> <li>Accepts WebSocket connection.</li> <li>Calls <code>start_agent_session()</code> using <code>user_id</code> and <code>is_audio</code>.</li> <li>Concurrent Messaging Tasks: Creates and runs <code>agent_to_client_messaging</code> and <code>client_to_agent_messaging</code> concurrently using <code>asyncio.gather</code>. These tasks handle bidirectional message flow.</li> <li>Logs client connection and disconnection.</li> </ol> </li> </ul> </li> </ul>"},{"location":"streaming/custom-streaming-ws.en/#how-it-works-overall-flow","title":"How It Works (Overall Flow)","text":"<ol> <li>Client connects to <code>ws://&lt;server&gt;/ws/&lt;user_id&gt;?is_audio=&lt;true_or_false&gt;</code>.</li> <li>Server's <code>websocket_endpoint</code> accepts, starts ADK session (<code>start_agent_session</code>).</li> <li>Two <code>asyncio</code> tasks manage communication:<ul> <li><code>client_to_agent_messaging</code>: Client WebSocket messages -&gt; ADK <code>live_request_queue</code>.</li> <li><code>agent_to_client_messaging</code>: ADK <code>live_events</code> -&gt; Client WebSocket.</li> </ul> </li> <li>Bidirectional streaming continues until disconnection or error.</li> </ol>"},{"location":"streaming/custom-streaming-ws.en/#5.-client-side-code-overview","title":"5. Client code overview","text":"<p>The JavaScript <code>app.js</code> (in <code>app/static/js</code>) manages client-side interaction with the ADK Streaming WebSocket backend. It handles sending text/audio and receiving/displaying streamed responses.</p> <p>Key functionalities: 1.  Manage WebSocket connection. 2.  Handle text input. 3.  Capture microphone audio (Web Audio API, AudioWorklets). 4.  Send text/audio to backend. 5.  Receive and render text/audio agent responses. 6.  Manage UI.</p>"},{"location":"streaming/custom-streaming-ws.en/#prerequisites","title":"Prerequisites","text":"<ul> <li>HTML Structure: Requires specific element IDs (e.g., <code>messageForm</code>, <code>message</code>, <code>messages</code>, <code>sendButton</code>, <code>startAudioButton</code>).</li> <li>Backend Server: The Python FastAPI server must be running.</li> <li>Audio Worklet Files: <code>audio-player.js</code> and <code>audio-recorder.js</code> for audio processing.</li> </ul>"},{"location":"streaming/custom-streaming-ws.en/#websocket-handling","title":"WebSocket Handling","text":"<pre><code>// Connect the server with a WebSocket connection\nconst sessionId = Math.random().toString().substring(10);\nconst ws_url =\n  \"ws://\" + window.location.host + \"/ws/\" + sessionId;\nlet websocket = null;\nlet is_audio = false;\n\n// Get DOM elements\nconst messageForm = document.getElementById(\"messageForm\");\nconst messageInput = document.getElementById(\"message\");\nconst messagesDiv = document.getElementById(\"messages\");\nlet currentMessageId = null;\n\n// WebSocket handlers\nfunction connectWebsocket() {\n  // Connect websocket\n  websocket = new WebSocket(ws_url + \"?is_audio=\" + is_audio);\n\n  // Handle connection open\n  websocket.onopen = function () {\n    // Connection opened messages\n    console.log(\"WebSocket connection opened.\");\n    document.getElementById(\"messages\").textContent = \"Connection opened\";\n\n    // Enable the Send button\n    document.getElementById(\"sendButton\").disabled = false;\n    addSubmitHandler();\n  };\n\n  // Handle incoming messages\n  websocket.onmessage = function (event) {\n    // Parse the incoming message\n    const message_from_server = JSON.parse(event.data);\n    console.log(\"[AGENT TO CLIENT] \", message_from_server);\n\n    // Check if the turn is complete\n    // if turn complete, add new message\n    if (\n      message_from_server.turn_complete &amp;&amp;\n      message_from_server.turn_complete == true\n    ) {\n      currentMessageId = null;\n      return;\n    }\n\n    // If it's audio, play it\n    if (message_from_server.mime_type == \"audio/pcm\" &amp;&amp; audioPlayerNode) {\n      audioPlayerNode.port.postMessage(base64ToArray(message_from_server.data));\n    }\n\n    // If it's a text, print it\n    if (message_from_server.mime_type == \"text/plain\") {\n      // add a new message for a new turn\n      if (currentMessageId == null) {\n        currentMessageId = Math.random().toString(36).substring(7);\n        const message = document.createElement(\"p\");\n        message.id = currentMessageId;\n        // Append the message element to the messagesDiv\n        messagesDiv.appendChild(message);\n      }\n\n      // Add message text to the existing message element\n      const message = document.getElementById(currentMessageId);\n      message.textContent += message_from_server.data;\n\n      // Scroll down to the bottom of the messagesDiv\n      messagesDiv.scrollTop = messagesDiv.scrollHeight;\n    }\n  };\n\n  // Handle connection close\n  websocket.onclose = function () {\n    console.log(\"WebSocket connection closed.\");\n    document.getElementById(\"sendButton\").disabled = true;\n    document.getElementById(\"messages\").textContent = \"Connection closed\";\n    setTimeout(function () {\n      console.log(\"Reconnecting...\");\n      connectWebsocket();\n    }, 5000);\n  };\n\n  websocket.onerror = function (e) {\n    console.log(\"WebSocket error: \", e);\n  };\n}\nconnectWebsocket();\n\n// Add submit handler to the form\nfunction addSubmitHandler() {\n  messageForm.onsubmit = function (e) {\n    e.preventDefault();\n    const message = messageInput.value;\n    if (message) {\n      const p = document.createElement(\"p\");\n      p.textContent = \"&gt; \" + message;\n      messagesDiv.appendChild(p);\n      messageInput.value = \"\";\n      sendMessage({\n        mime_type: \"text/plain\",\n        data: message,\n      });\n      console.log(\"[CLIENT TO AGENT] \" + message);\n    }\n    return false;\n  };\n}\n\n// Send a message to the server as a JSON string\nfunction sendMessage(message) {\n  if (websocket &amp;&amp; websocket.readyState == WebSocket.OPEN) {\n    const messageJson = JSON.stringify(message);\n    websocket.send(messageJson);\n  }\n}\n\n// Decode Base64 data to Array\nfunction base64ToArray(base64) {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i &lt; len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n</code></pre> <ul> <li>Connection Setup: Generates <code>sessionId</code>, constructs <code>ws_url</code>. <code>is_audio</code> flag (initially <code>false</code>) appends <code>?is_audio=true</code> to URL when active. <code>connectWebsocket()</code> initializes the connection.</li> <li><code>websocket.onopen</code>: Enables send button, updates UI, calls <code>addSubmitHandler()</code>.</li> <li><code>websocket.onmessage</code>: Parses incoming JSON from server.<ul> <li>Turn Completion: Resets <code>currentMessageId</code> if agent turn is complete.</li> <li>Audio Data (<code>audio/pcm</code>): Decodes Base64 audio (<code>base64ToArray()</code>) and sends to <code>audioPlayerNode</code> for playback.</li> <li>Text Data (<code>text/plain</code>): If new turn (<code>currentMessageId</code> is null), creates new <code>&lt;p&gt;</code>. Appends received text to the current message paragraph for streaming effect. Scrolls <code>messagesDiv</code>.</li> </ul> </li> <li><code>websocket.onclose</code>: Disables send button, updates UI, attempts auto-reconnection after 5s.</li> <li><code>websocket.onerror</code>: Logs errors.</li> <li>Initial Connection: <code>connectWebsocket()</code> is called on script load.</li> </ul>"},{"location":"streaming/custom-streaming-ws.en/#dom-interaction-message-submission","title":"DOM Interaction &amp; Message Submission","text":"<ul> <li>Element Retrieval: Fetches required DOM elements.</li> <li><code>addSubmitHandler()</code>: Attached to <code>messageForm</code>'s submit. Prevents default submission, gets text from <code>messageInput</code>, displays user message, clears input, and calls <code>sendMessage()</code> with <code>{ mime_type: \"text/plain\", data: messageText }</code>.</li> <li><code>sendMessage(messagePayload)</code>: Sends JSON stringified <code>messagePayload</code> if WebSocket is open.</li> </ul>"},{"location":"streaming/custom-streaming-ws.en/#audio-handling","title":"Audio Handling","text":"<pre><code>let audioPlayerNode;\nlet audioPlayerContext;\nlet audioRecorderNode;\nlet audioRecorderContext;\nlet micStream;\n\n// Import the audio worklets\nimport { startAudioPlayerWorklet } from \"./audio-player.js\";\nimport { startAudioRecorderWorklet } from \"./audio-recorder.js\";\n\n// Start audio\nfunction startAudio() {\n  // Start audio output\n  startAudioPlayerWorklet().then(([node, ctx]) =&gt; {\n    audioPlayerNode = node;\n    audioPlayerContext = ctx;\n  });\n  // Start audio input\n  startAudioRecorderWorklet(audioRecorderHandler).then(\n    ([node, ctx, stream]) =&gt; {\n      audioRecorderNode = node;\n      audioRecorderContext = ctx;\n      micStream = stream;\n    }\n  );\n}\n\n// Start the audio only when the user clicked the button\n// (due to the gesture requirement for the Web Audio API)\nconst startAudioButton = document.getElementById(\"startAudioButton\");\nstartAudioButton.addEventListener(\"click\", () =&gt; {\n  startAudioButton.disabled = true;\n  startAudio();\n  is_audio = true;\n  connectWebsocket(); // reconnect with the audio mode\n});\n\n// Audio recorder handler\nfunction audioRecorderHandler(pcmData) {\n  // Send the pcm data as base64\n  sendMessage({\n    mime_type: \"audio/pcm\",\n    data: arrayBufferToBase64(pcmData),\n  });\n  console.log(\"[CLIENT TO AGENT] sent %s bytes\", pcmData.byteLength);\n}\n\n// Encode an array buffer with Base64\nfunction arrayBufferToBase64(buffer) {\n  let binary = \"\";\n  const bytes = new Uint8Array(buffer);\n  const len = bytes.byteLength;\n  for (let i = 0; i &lt; len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(binary);\n}\n</code></pre> <ul> <li>Audio Worklets: Uses <code>AudioWorkletNode</code> via <code>audio-player.js</code> (for playback) and <code>audio-recorder.js</code> (for capture).</li> <li>State Variables: Store AudioContexts and WorkletNodes (e.g., <code>audioPlayerNode</code>).</li> <li><code>startAudio()</code>: Initializes player and recorder worklets. Passes <code>audioRecorderHandler</code> as callback to recorder.</li> <li>\"Start Audio\" Button (<code>startAudioButton</code>):<ul> <li>Requires user gesture for Web Audio API.</li> <li>On click: disables button, calls <code>startAudio()</code>, sets <code>is_audio = true</code>, then calls <code>connectWebsocket()</code> to reconnect in audio mode (URL includes <code>?is_audio=true</code>).</li> </ul> </li> <li><code>audioRecorderHandler(pcmData)</code>: Callback from recorder worklet with PCM audio chunks. Encodes <code>pcmData</code> to Base64 (<code>arrayBufferToBase64()</code>) and sends to server via <code>sendMessage()</code> with <code>mime_type: \"audio/pcm\"</code>.</li> <li>Helper Functions: <code>base64ToArray()</code> (server audio -&gt; client player) and <code>arrayBufferToBase64()</code> (client mic audio -&gt; server).</li> </ul>"},{"location":"streaming/custom-streaming-ws.en/#how-it-works-client-side-flow","title":"How It Works (Client-Side Flow)","text":"<ol> <li>Page Load: Establishes WebSocket in text mode.</li> <li>Text Interaction: User types/submits text; sent to server. Server text responses displayed, streamed.</li> <li>Switching to Audio Mode: \"Start Audio\" button click initializes audio worklets, sets <code>is_audio=true</code>, and reconnects WebSocket in audio mode.</li> <li>Audio Interaction: Recorder sends mic audio (Base64 PCM) to server. Server audio/text responses handled by <code>websocket.onmessage</code> for playback/display.</li> <li>Connection Management: Auto-reconnect on WebSocket close.</li> </ol>"},{"location":"streaming/custom-streaming-ws.en/#summary","title":"Summary","text":"<p>This article overviews the server and client code for a custom asynchronous web app built with ADK Streaming and FastAPI, enabling real-time, bidirectional voice and text communication.</p> <p>The Python FastAPI server code initializes ADK agent sessions, configured for text or audio responses. It uses a WebSocket endpoint to handle client connections. Asynchronous tasks manage bidirectional messaging: forwarding client text or Base64-encoded PCM audio to the ADK agent, and streaming text or Base64-encoded PCM audio responses from the agent back to the client.</p> <p>The client-side JavaScript code manages a WebSocket connection, which can be re-established to switch between text and audio modes. It sends user input (text or microphone audio captured via Web Audio API and AudioWorklets) to the server. Incoming messages from the server are processed: text is displayed (streamed), and Base64-encoded PCM audio is decoded and played using an AudioWorklet.</p>"},{"location":"streaming/custom-streaming-ws.en/#next-steps-for-production","title":"Next steps for production","text":"<p>When you will use the Streaming for ADK in production apps, you may want to consinder the following points:</p> <ul> <li>Deploy Multiple Instances: Run several instances of your FastAPI application instead of a single one.</li> <li>Implement Load Balancing: Place a load balancer in front of your application instances to distribute incoming WebSocket connections.<ul> <li>Configure for WebSockets: Ensure the load balancer supports long-lived WebSocket connections and consider \"sticky sessions\" (session affinity) to route a client to the same backend instance, or design for stateless instances (see next point).</li> </ul> </li> <li>Externalize Session State: Replace the <code>InMemorySessionService</code> for ADK with a distributed, persistent session store. This allows any server instance to handle any user's session, enabling true statelessness at the application server level and improving fault tolerance.</li> <li>Implement Health Checks: Set up robust health checks for your WebSocket server instances so the load balancer can automatically remove unhealthy instances from rotation.</li> <li>Utilize Orchestration: Consider using an orchestration platform like Kubernetes for automated deployment, scaling, self-healing, and management of your WebSocket server instances.</li> </ul>"},{"location":"streaming/custom-streaming-ws/","title":"\u81ea\u8a02\u97f3\u8a0a\u4e32\u6d41\u61c9\u7528\u7a0b\u5f0f\uff08WebSocket\uff09","text":"<p>\u672c\u6587\u5c07\u6982\u8ff0\u4e00\u500b\u4ee5 Agent Development Kit (ADK) \u4e32\u6d41\u529f\u80fd\u8207 FastAPI \u5efa\u7acb\u7684\u81ea\u8a02\u975e\u540c\u6b65\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\uff0c\u5176\u652f\u63f4\u900f\u904e WebSocket \u9032\u884c\u5373\u6642\u3001\u96d9\u5411\u7684\u8a9e\u97f3\u8207\u6587\u5b57\u901a\u8a0a\uff0c\u4e26\u5305\u542b\u4f3a\u670d\u5668\u7aef\u8207\u5ba2\u6236\u7aef\u7a0b\u5f0f\u78bc\u8aaa\u660e\u3002</p> <p>\u6ce8\u610f\uff1a\u672c\u6307\u5357\u5047\u8a2d\u4f60\u5df2\u5177\u5099 JavaScript \u8207 Python <code>asyncio</code> \u7a0b\u5f0f\u8a2d\u8a08\u7d93\u9a57\u3002</p>"},{"location":"streaming/custom-streaming-ws/#supported-models","title":"\u652f\u63f4\u8a9e\u97f3\uff0f\u8996\u8a0a\u4e32\u6d41\u7684\u6a21\u578b","text":"<p>\u82e5\u8981\u5728 ADK \u4e2d\u4f7f\u7528\u8a9e\u97f3\uff0f\u8996\u8a0a\u4e32\u6d41\u529f\u80fd\uff0c\u5fc5\u9808\u9078\u7528\u652f\u63f4 Gemini Live API \u7684 Gemini \u6a21\u578b\u3002\u4f60\u53ef\u4ee5\u5728\u6587\u4ef6\u8aaa\u660e\u4e2d\u67e5\u8a62\u652f\u63f4 Gemini Live API \u7684\u6a21\u578b ID\uff1a</p> <ul> <li>Google AI Studio: Gemini Live API</li> <li>Vertex AI: Gemini Live API</li> </ul> <p>\u53e6\u6709 Server Sent Events (SSE) \u7248\u672c\u7684\u7bc4\u4f8b\u53ef\u4f9b\u53c3\u8003\u3002</p>"},{"location":"streaming/custom-streaming-ws/#1.-setup-installation","title":"1. \u5b89\u88dd ADK","text":"<p>\u5efa\u7acb\u4e26\u555f\u7528\u865b\u64ec\u74b0\u5883\uff08\u5efa\u8b70\u6b65\u9a5f\uff09\uff1a</p> <pre><code># Create\npython -m venv .venv\n# Activate (each new terminal)\n# macOS/Linux: source .venv/bin/activate\n# Windows CMD: .venv\\Scripts\\activate.bat\n# Windows PowerShell: .venv\\Scripts\\Activate.ps1\n</code></pre> <p>\u5b89\u88dd Agent Development Kit (ADK)\uff1a</p> <pre><code>pip install --upgrade google-adk==1.10.0\n</code></pre> <p>\u8acb\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u8a2d\u5b9a <code>SSL_CERT_FILE</code> \u8b8a\u6578\u3002</p> <pre><code>export SSL_CERT_FILE=$(python -m certifi)\n</code></pre> <p>\u4e0b\u8f09\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\uff1a</p> <pre><code>git clone --no-checkout https://github.com/google/adk-docs.git\ncd adk-docs\ngit sparse-checkout init --cone\ngit sparse-checkout set examples/python/snippets/streaming/adk-streaming-ws\ngit checkout main\ncd examples/python/snippets/streaming/adk-streaming-ws/app\n</code></pre> <p>\u6b64\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u5305\u542b\u4ee5\u4e0b\u6a94\u6848\u8207\u8cc7\u6599\u593e\uff1a</p> <pre><code>adk-streaming-ws/\n\u2514\u2500\u2500 app/ # the web app folder\n    \u251c\u2500\u2500 .env # Gemini API key / Google Cloud Project ID\n    \u251c\u2500\u2500 main.py # FastAPI web app\n    \u251c\u2500\u2500 static/ # Static content folder\n    |   \u251c\u2500\u2500 js # JavaScript files folder (includes app.js)\n    |   \u2514\u2500\u2500 index.html # The web client page\n    \u2514\u2500\u2500 google_search_agent/ # Agent folder\n        \u251c\u2500\u2500 __init__.py # Python package\n        \u2514\u2500\u2500 agent.py # Agent definition\n</code></pre>"},{"location":"streaming/custom-streaming-ws/#2.-set-up-the-platform","title":"2. \u8a2d\u5b9a\u5e73\u53f0","text":"<p>\u8981\u57f7\u884c\u7bc4\u4f8b\u61c9\u7528\u7a0b\u5f0f\uff0c\u8acb\u5f9e Google AI Studio \u6216 Google Cloud Vertex AI \u64c7\u4e00\u5e73\u53f0\u9032\u884c\uff1a</p> Gemini - Google AI StudioGemini - Google Cloud Vertex AI <ol> <li>\u5f9e Google AI Studio \u53d6\u5f97 API KEY\u3002</li> <li> <p>\u958b\u555f (<code>app/</code>) \u8cc7\u6599\u593e\u4e2d\u7684 <code>.env</code> \u6a94\u6848\uff0c\u4e26\u5c07\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u8907\u88fd\u8cbc\u4e0a\u3002</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=FALSE\nGOOGLE_API_KEY=PASTE_YOUR_ACTUAL_API_KEY_HERE\n</code></pre> </li> <li> <p>\u5c07 <code>PASTE_YOUR_ACTUAL_API_KEY_HERE</code> \u66ff\u63db\u70ba\u4f60\u5be6\u969b\u7684 <code>API KEY</code>\u3002</p> </li> </ol> <ol> <li>\u4f60\u9700\u8981\u4e00\u500b\u5df2\u5b58\u5728\u7684    Google Cloud \u5e33\u6236\u548c\u4e00\u500b    \u5c08\u6848\u3002<ul> <li>\u8a2d\u5b9a   Google Cloud \u5c08\u6848</li> <li>\u8a2d\u5b9a   gcloud CLI</li> <li>\u5f9e\u7d42\u7aef\u6a5f\u57f7\u884c   <code>gcloud auth login</code>\uff0c\u4ee5\u9a57\u8b49 Google Cloud \u8eab\u4efd\u3002</li> <li>\u555f\u7528 Vertex AI API\u3002</li> </ul> </li> <li> <p>\u958b\u555f\u4f4d\u65bc (<code>app/</code>) \u8cc7\u6599\u593e\u5167\u7684 <code>.env</code> \u6a94\u6848\u3002\u8907\u88fd\u4e26\u8cbc\u4e0a\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\uff0c\u4e26\u66f4\u65b0\u5c08\u6848 ID \u8207 Location\u3002</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_CLOUD_PROJECT=PASTE_YOUR_ACTUAL_PROJECT_ID\nGOOGLE_CLOUD_LOCATION=us-central1\n</code></pre> </li> </ol>"},{"location":"streaming/custom-streaming-ws/#agentpy","title":"agent.py","text":"<p><code>google_search_agent</code> \u8cc7\u6599\u593e\u4e2d\u7684 agent \u5b9a\u7fa9\u7a0b\u5f0f\u78bc <code>agent.py</code> \u662f\u64b0\u5beb agent \u908f\u8f2f\u7684\u5730\u65b9\uff1a</p> <pre><code>from google.adk.agents import Agent\nfrom google.adk.tools import google_search  # Import the tool\n\nroot_agent = Agent(\n   name=\"google_search_agent\",\n   model=\"gemini-2.0-flash-exp\", # if this model does not work, try below\n   #model=\"gemini-2.0-flash-live-001\",\n   description=\"Agent to answer questions using Google Search.\",\n   instruction=\"Answer the question using the Google Search tool.\",\n   tools=[google_search],\n)\n</code></pre> <p>\u6ce8\u610f\uff1a \u82e5\u8981\u540c\u6642\u555f\u7528\u6587\u5b57\u8207\u97f3\u8a0a\uff0f\u8996\u8a0a\u8f38\u5165\uff0c\u6a21\u578b\u5fc5\u9808\u652f\u63f4 <code>generateContent</code>\uff08\u7528\u65bc\u6587\u5b57\uff09\u8207 <code>bidiGenerateContent</code> \u65b9\u6cd5\u3002\u8acb\u53c3\u95b1 List Models Documentation \u4ee5\u78ba\u8a8d\u9019\u4e9b\u529f\u80fd\u3002\u672c\u5feb\u901f\u958b\u59cb\u7bc4\u4f8b\u4f7f\u7528 <code>gemini-2.0-flash-exp</code> \u6a21\u578b\u4f5c\u70ba\u793a\u7bc4\u3002</p> <p>\u8acb\u6ce8\u610f\uff0c\u7d50\u5408 Google Search \u9032\u884c\u77e5\u8b58\u63a5\u5730 (grounding) \u7684\u80fd\u529b\u6574\u5408\u5f97\u975e\u5e38\u7c21\u55ae\u3002<code>Agent</code> \u985e\u5225\u8207 <code>google_search</code> \u5de5\u5177\u8ca0\u8cac\u8655\u7406\u8207\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u53ca\u77e5\u8b58\u63a5\u5730 (grounding) \u641c\u5c0b API \u7684\u8907\u96dc\u4e92\u52d5\uff0c\u8b93\u4f60\u80fd\u5c08\u6ce8\u65bc agent \u7684\u76ee\u6a19\u8207\u884c\u70ba\u8a2d\u8a08\u3002</p> <p></p>"},{"location":"streaming/custom-streaming-ws/#3.-interact-with-your-streaming-app","title":"3. \u8207\u4f60\u7684\u4e32\u6d41\u61c9\u7528\u4e92\u52d5","text":"<p>1. \u5207\u63db\u5230\u6b63\u78ba\u7684\u76ee\u9304\uff1a</p> <p>\u70ba\u4e86\u8b93\u4f60\u7684 agent \u80fd\u9806\u5229\u57f7\u884c\uff0c\u8acb\u78ba\u8a8d\u4f60\u5df2\u7d93\u4f4d\u65bc app \u8cc7\u6599\u593e\uff08<code>adk-streaming-ws/app</code>\uff09</p> <p>2. \u555f\u52d5 Fast API\uff1a\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u4ee5\u555f\u52d5\u547d\u4ee4\u5217\u4ecb\u9762 (Command Line Interface)</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>3. \u4ee5\u6587\u5b57\u6a21\u5f0f\u5b58\u53d6\u61c9\u7528\u7a0b\u5f0f\uff1a \u7576\u61c9\u7528\u7a0b\u5f0f\u555f\u52d5\u5f8c\uff0c\u7d42\u7aef\u6a5f\u6703\u986f\u793a\u4e00\u500b\u672c\u6a5f URL\uff08\u4f8b\u5982\uff1ahttp://localhost:8000\uff09\u3002\u9ede\u64ca\u9019\u500b\u9023\u7d50\uff0c\u5373\u53ef\u5728\u700f\u89bd\u5668\u4e2d\u958b\u555f UI\u3002</p> <p>\u73fe\u5728\u4f60\u61c9\u8a72\u6703\u770b\u5230\u5982\u4e0b\u6240\u793a\u7684 UI\uff1a</p> <p></p> <p>\u8a66\u8457\u8a62\u554f\u4e00\u500b\u554f\u984c <code>What time is it now?</code>\u3002agent \u6703\u5229\u7528 Google Search \u56de\u7b54\u4f60\u7684\u554f\u984c\u3002\u4f60\u6703\u6ce8\u610f\u5230 UI \u6703\u4ee5\u4e32\u6d41\u6587\u5b57\u7684\u65b9\u5f0f\u986f\u793a agent \u7684\u56de\u61c9\u3002\u5373\u4f7f agent \u9084\u5728\u56de\u61c9\u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u96a8\u6642\u50b3\u9001\u8a0a\u606f\u7d66 agent\u3002\u9019\u5c55\u793a\u4e86 Agent Development Kit (ADK) Streaming \u7684\u96d9\u5411\u901a\u8a0a\u80fd\u529b\u3002</p> <p>4. \u4ee5\u8a9e\u97f3\u6a21\u5f0f\u5b58\u53d6\u61c9\u7528\u7a0b\u5f0f\uff1a \u73fe\u5728\u8acb\u9ede\u64ca <code>Start Audio</code> \u6309\u9215\u3002\u61c9\u7528\u7a0b\u5f0f\u6703\u4ee5\u8a9e\u97f3\u6a21\u5f0f\u91cd\u65b0\u9023\u7dda\u81f3\u4f3a\u670d\u5668\uff0cUI \u9996\u6b21\u6703\u986f\u793a\u4ee5\u4e0b\u5c0d\u8a71\u6846\uff1a</p> <p></p> <p>\u9ede\u64ca <code>Allow while visiting the site</code>\uff0c\u63a5\u8457\u4f60\u6703\u770b\u5230\u700f\u89bd\u5668\u9802\u90e8\u6703\u986f\u793a\u9ea5\u514b\u98a8\u5716\u793a\uff1a</p> <p></p> <p>\u73fe\u5728\u4f60\u53ef\u4ee5\u7528\u8a9e\u97f3\u8207 agent \u5c0d\u8a71\u3002\u50cf <code>What time is it now?</code> \u9019\u6a23\u7528\u8a9e\u97f3\u63d0\u554f\uff0c\u4f60\u4e5f\u6703\u807d\u5230 agent \u4ee5\u8a9e\u97f3\u56de\u61c9\u3002\u7531\u65bc ADK Streaming \u652f\u63f4\u591a\u7a2e\u8a9e\u8a00\uff0c\u56e0\u6b64\u4e5f\u80fd\u4ee5\u652f\u63f4\u7684\u8a9e\u8a00\u56de\u7b54\u554f\u984c\u3002</p> <p>5. \u6aa2\u67e5\u4e3b\u63a7\u53f0\u65e5\u8a8c</p> <p>\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Chrome \u700f\u89bd\u5668\uff0c\u8acb\u53f3\u9375\u9ede\u64ca\u4e26\u9078\u64c7 <code>Inspect</code> \u4ee5\u958b\u555f DevTools\u3002\u5728 <code>Console</code> \u4e0a\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u5982 <code>[CLIENT TO AGENT]</code> \u548c <code>[AGENT TO CLIENT]</code> \u7b49\u9032\u51fa\u97f3\u8a0a\u8cc7\u6599\uff0c\u4ee3\u8868\u700f\u89bd\u5668\u8207\u4f3a\u670d\u5668\u4e4b\u9593\u7684\u97f3\u8a0a\u8cc7\u6599\u4e32\u6d41\u3002</p> <p>\u540c\u6642\uff0c\u5728\u61c9\u7528\u7a0b\u5f0f\u4f3a\u670d\u5668\u7684\u4e3b\u63a7\u53f0\u4e2d\uff0c\u4f60\u61c9\u8a72\u6703\u770b\u5230\u985e\u4f3c\u4ee5\u4e0b\u7684\u5167\u5bb9\uff1a</p> <pre><code>INFO:     ('127.0.0.1', 50068) - \"WebSocket /ws/70070018?is_audio=true\" [accepted]\nClient #70070018 connected, audio mode: true\nINFO:     connection open\nINFO:     127.0.0.1:50061 - \"GET /static/js/pcm-player-processor.js HTTP/1.1\" 200 OK\nINFO:     127.0.0.1:50060 - \"GET /static/js/pcm-recorder-processor.js HTTP/1.1\" 200 OK\n[AGENT TO CLIENT]: audio/pcm: 9600 bytes.\nINFO:     127.0.0.1:50082 - \"GET /favicon.ico HTTP/1.1\" 404 Not Found\n[AGENT TO CLIENT]: audio/pcm: 11520 bytes.\n[AGENT TO CLIENT]: audio/pcm: 11520 bytes.\n</code></pre> <p>\u9019\u4e9b\u4e3b\u63a7\u53f0\u65e5\u8a8c\u5c0d\u65bc\u958b\u767c\u81ea\u8a02\u4e32\u6d41\u61c9\u7528\u7a0b\u5f0f\u6642\u975e\u5e38\u91cd\u8981\u3002\u5728\u8a31\u591a\u60c5\u6cc1\u4e0b\uff0c\u700f\u89bd\u5668\u8207\u4f3a\u670d\u5668\u4e4b\u9593\u7684\u901a\u8a0a\u5931\u6557\uff0c\u5f80\u5f80\u662f\u4e32\u6d41\u61c9\u7528\u7a0b\u5f0f\u932f\u8aa4\u7684\u4e3b\u8981\u539f\u56e0\u3002</p> <p>6. \u7591\u96e3\u6392\u89e3\u63d0\u793a</p> <ul> <li>\u7576 <code>ws://</code> \u7121\u6cd5\u904b\u4f5c\u6642\uff1a \u5982\u679c\u4f60\u5728 Chrome DevTools \u4e0a\u770b\u5230\u6709\u95dc <code>ws://</code> \u9023\u7dda\u7684\u932f\u8aa4\uff0c\u8acb\u5617\u8a66\u5c07 <code>ws://</code> \u66ff\u63db\u70ba <code>wss://</code>\uff0c\u4f4d\u7f6e\u5728 <code>app/static/js/app.js</code> \u7684\u7b2c 28 \u884c\u3002\u9019\u7a2e\u60c5\u6cc1\u901a\u5e38\u767c\u751f\u65bc\u4f60\u5728\u96f2\u7aef\u74b0\u5883\u57f7\u884c\u7bc4\u4f8b\uff0c\u4e26\u4e14\u900f\u904e\u4ee3\u7406\u9023\u7dda\u5f9e\u700f\u89bd\u5668\u9023\u63a5\u6642\u3002</li> <li>\u7576 <code>gemini-2.0-flash-exp</code> \u6a21\u578b\u7121\u6cd5\u904b\u4f5c\u6642\uff1a \u5982\u679c\u4f60\u5728\u61c9\u7528\u7a0b\u5f0f\u4f3a\u670d\u5668\u4e3b\u63a7\u53f0\u4e0a\u770b\u5230\u6709\u95dc <code>gemini-2.0-flash-exp</code> \u6a21\u578b\u53ef\u7528\u6027\u7684\u932f\u8aa4\uff0c\u8acb\u5617\u8a66\u5c07\u5176\u66ff\u63db\u70ba <code>gemini-2.0-flash-live-001</code>\uff0c\u4f4d\u7f6e\u5728 <code>app/google_search_agent/agent.py</code> \u7684\u7b2c 6 \u884c\u3002</li> </ul>"},{"location":"streaming/custom-streaming-ws/#4.-server-side-code-overview","title":"4. \u4f3a\u670d\u5668\u7aef\u7a0b\u5f0f\u78bc\u6982\u89bd","text":"<p>\u9019\u500b\u4f3a\u670d\u5668\u61c9\u7528\u7a0b\u5f0f\u900f\u904e WebSocket\uff0c\u5be6\u73fe\u8207 Agent Development Kit (ADK) agent \u7684\u5373\u6642\u4e32\u6d41\u4e92\u52d5\u3002\u7528\u6236\u7aef\u53ef\u4ee5\u50b3\u9001\u6587\u5b57\u6216\u8a9e\u97f3\u7d66 ADK agent\uff0c\u4e26\u63a5\u6536\u4e32\u6d41\u7684\u6587\u5b57\u6216\u8a9e\u97f3\u56de\u61c9\u3002</p> <p>\u6838\u5fc3\u529f\u80fd\uff1a 1.  \u521d\u59cb\u5316\u8207\u7ba1\u7406 ADK agent session\u3002 2.  \u8655\u7406\u7528\u6236\u7aef WebSocket \u9023\u7dda\u3002 3.  \u5c07\u7528\u6236\u7aef\u8a0a\u606f\u8f49\u767c\u7d66 ADK agent\u3002 4.  \u5c07 ADK agent \u7684\u4e32\u6d41\u56de\u61c9\uff08\u6587\u5b57/\u8a9e\u97f3\uff09\u50b3\u9001\u7d66\u7528\u6236\u7aef\u3002</p>"},{"location":"streaming/custom-streaming-ws/#adk","title":"ADK \u4e32\u6d41\u8a2d\u5b9a","text":"<pre><code>import os\nimport json\nimport asyncio\nimport base64\n\nfrom pathlib import Path\nfrom dotenv import load_dotenv\n\nfrom google.genai.types import (\n    Part,\n    Content,\n    Blob,\n)\n\nfrom google.adk.runners import Runner\nfrom google.adk.agents import LiveRequestQueue\nfrom google.adk.agents.run_config import RunConfig\nfrom google.adk.sessions.in_memory_session_service import InMemorySessionService\n\nfrom fastapi import FastAPI, WebSocket\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse\n\nfrom google_search_agent.agent import root_agent\n</code></pre> <ul> <li>\u532f\u5165\uff08Imports\uff09\uff1a \u5305\u542b\u6a19\u6e96 Python \u51fd\u5f0f\u5eab\u3001<code>dotenv</code>\uff08\u7528\u65bc\u74b0\u5883\u8b8a\u6578\uff09\u3001Agent Development Kit (ADK) \u4ee5\u53ca FastAPI\u3002</li> <li><code>load_dotenv()</code>\uff1a \u8f09\u5165\u74b0\u5883\u8b8a\u6578\u3002</li> <li><code>APP_NAME</code>\uff1a ADK \u7684\u61c9\u7528\u7a0b\u5f0f\u8b58\u5225\u78bc\u3002</li> <li><code>session_service = InMemorySessionService()</code>\uff1a \u521d\u59cb\u5316\u8a18\u61b6\u9ad4\u5167\u7684 ADK session service\uff0c\u9069\u7528\u65bc\u55ae\u4e00\u5be6\u4f8b\u6216\u958b\u767c\u74b0\u5883\u3002\u6b63\u5f0f\u74b0\u5883\u5efa\u8b70\u4f7f\u7528\u6301\u4e45\u6027\u5132\u5b58\u3002</li> </ul>"},{"location":"streaming/custom-streaming-ws/#start_agent_sessionsession_id-is_audiofalse","title":"<code>start_agent_session(session_id, is_audio=False)</code>","text":"<pre><code>async def start_agent_session(user_id, is_audio=False):\n    \"\"\"Starts an agent session\"\"\"\n\n    # Create a Runner\n    runner = InMemoryRunner(\n        app_name=APP_NAME,\n        agent=root_agent,\n    )\n\n    # Create a Session\n    session = await runner.session_service.create_session(\n        app_name=APP_NAME,\n        user_id=user_id,  # Replace with actual user ID\n    )\n\n    # Set response modality\n    modality = \"AUDIO\" if is_audio else \"TEXT\"\n    run_config = RunConfig(response_modalities=[modality])\n\n    # Optional: Enable session resumption for improved reliability\n    # run_config = RunConfig(\n    #     response_modalities=[modality],\n    #     session_resumption=types.SessionResumptionConfig()\n    # )\n\n    # Create a LiveRequestQueue for this session\n    live_request_queue = LiveRequestQueue()\n\n    # Start agent session\n    live_events = runner.run_live(\n        session=session,\n        live_request_queue=live_request_queue,\n        run_config=run_config,\n    )\n    return live_events, live_request_queue\n</code></pre> <p>\u6b64\u51fd\u5f0f\u6703\u521d\u59cb\u5316\u4e00\u500b Agent Development Kit (ADK) agent \u7684\u5373\u6642 session\u3002</p> \u53c3\u6578 \u985e\u578b \u8aaa\u660e <code>user_id</code> <code>str</code> \u552f\u4e00\u7684 client \u8b58\u5225\u78bc\u3002 <code>is_audio</code> <code>bool</code> <code>True</code> \u7528\u65bc\u8a9e\u97f3\u56de\u61c9\uff0c<code>False</code> \u7528\u65bc\u6587\u5b57\uff08\u9810\u8a2d\uff09\u3002 <p>\u4e3b\u8981\u6b65\u9a5f\uff1a 1.  \u5efa\u7acb Runner\uff1a \u5be6\u4f8b\u5316\u5c0d\u61c9 <code>root_agent</code> \u7684 ADK runner\u3002 2.  \u5efa\u7acb Session\uff1a \u5efa\u7acb\u4e00\u500b ADK session\u3002 3.  \u8a2d\u5b9a\u56de\u61c9\u6a21\u5f0f\uff1a \u8a2d\u5b9a agent \u56de\u61c9\u70ba \"AUDIO\" \u6216 \"TEXT\"\u3002 4.  \u5efa\u7acb LiveRequestQueue\uff1a \u5efa\u7acb\u4e00\u500b\u7528\u65bc client \u8f38\u5165\u81f3 agent \u7684\u4f47\u5217\u3002 5.  \u555f\u52d5 agent session\uff1a <code>runner.run_live(...)</code> \u555f\u52d5 agent\uff0c\u56de\u50b3\uff1a     *   <code>live_events</code>\uff1aagent \u4e8b\u4ef6\uff08\u6587\u5b57\u3001\u8a9e\u97f3\u3001\u5b8c\u6210\uff09\u7684\u975e\u540c\u6b65\u53ef\u758a\u4ee3\u7269\u4ef6\u3002     *   <code>live_request_queue</code>\uff1a\u50b3\u9001\u8cc7\u6599\u7d66 agent \u7684\u4f47\u5217\u3002</p> <p>\u56de\u50b3\uff1a <code>(live_events, live_request_queue)</code>\u3002</p>"},{"location":"streaming/custom-streaming-ws/#session","title":"Session \u6062\u5fa9\u8a2d\u5b9a","text":"<p>ADK \u652f\u63f4\u5373\u6642 session \u6062\u5fa9\uff0c\u4ee5\u63d0\u5347\u4e32\u6d41\u5c0d\u8a71\u6642\u7684\u53ef\u9760\u6027\u3002\u6b64\u529f\u80fd\u53ef\u5728\u56e0\u7db2\u8def\u554f\u984c\u5c0e\u81f4\u5373\u6642\u9023\u7dda\u4e2d\u65b7\u6642\uff0c\u81ea\u52d5\u91cd\u65b0\u9023\u7dda\u3002</p>"},{"location":"streaming/custom-streaming-ws/#session_1","title":"\u555f\u7528 Session \u6062\u5fa9","text":"<p>\u82e5\u8981\u555f\u7528 session \u6062\u5fa9\uff0c\u8acb\u57f7\u884c\u4ee5\u4e0b\u6b65\u9a5f\uff1a</p> <ol> <li> <p>\u532f\u5165\u6240\u9700\u578b\u5225\uff1a <pre><code>from google.genai import types\n</code></pre></p> </li> <li> <p>\u5728 RunConfig \u4e2d\u8a2d\u5b9a session resumption\uff1a <pre><code>run_config = RunConfig(\n    response_modalities=[modality],\n    session_resumption=types.SessionResumptionConfig()\n)\n</code></pre></p> </li> </ol>"},{"location":"streaming/custom-streaming-ws/#session-resumption","title":"Session Resumption \u529f\u80fd","text":"<ul> <li>\u81ea\u52d5 Handle \u5feb\u53d6 - \u7cfb\u7d71\u6703\u5728\u5373\u6642\u5c0d\u8a71\u671f\u9593\u81ea\u52d5\u5feb\u53d6 session resumption handle</li> <li>\u900f\u660e\u91cd\u9023 - \u7576\u9023\u7dda\u4e2d\u65b7\u6642\uff0c\u7cfb\u7d71\u6703\u5617\u8a66\u4f7f\u7528\u5df2\u5feb\u53d6\u7684 handle \u9032\u884c\u6062\u5fa9</li> <li>\u4e0a\u4e0b\u6587\u4fdd\u7559 - \u5c0d\u8a71\u7684\u4e0a\u4e0b\u6587\u8207\u72c0\u614b\u6703\u5728\u91cd\u9023\u904e\u7a0b\u4e2d\u7dad\u6301\u4e0d\u8b8a</li> <li>\u7db2\u8def\u97cc\u6027 - \u5728\u7db2\u8def\u4e0d\u7a69\u5b9a\u7684\u60c5\u6cc1\u4e0b\uff0c\u80fd\u63d0\u4f9b\u66f4\u4f73\u7684\u4f7f\u7528\u8005\u9ad4\u9a57</li> </ul>"},{"location":"streaming/custom-streaming-ws/#_1","title":"\u5be6\u4f5c\u8aaa\u660e","text":"<ul> <li>session resumption handle \u7531 Agent Development Kit (ADK) \u6846\u67b6\u5167\u90e8\u81ea\u52d5\u7ba1\u7406</li> <li>\u4e0d\u9700\u8981\u984d\u5916\u4fee\u6539 client \u7aef\u7a0b\u5f0f\u78bc</li> <li>\u6b64\u529f\u80fd\u5c0d\u65bc\u9577\u6642\u9593\u57f7\u884c\u7684\u4e32\u6d41\u5c0d\u8a71\u7279\u5225\u6709\u5e6b\u52a9</li> <li>\u9023\u7dda\u4e2d\u65b7\u5c0d\u4f7f\u7528\u8005\u9ad4\u9a57\u7684\u5f71\u97ff\u5c07\u5927\u5e45\u964d\u4f4e</li> </ul>"},{"location":"streaming/custom-streaming-ws/#_2","title":"\u7591\u96e3\u6392\u89e3","text":"<p>\u5982\u679c\u4f60\u9047\u5230 session resumption \u76f8\u95dc\u932f\u8aa4\uff1a</p> <ol> <li>\u6aa2\u67e5\u6a21\u578b\u76f8\u5bb9\u6027 - \u8acb\u78ba\u8a8d\u4f60\u4f7f\u7528\u7684\u6a21\u578b\u652f\u63f4 session resumption</li> <li>API \u9650\u5236 - \u4e26\u975e\u6240\u6709 API \u7248\u672c\u90fd\u652f\u63f4\u5b8c\u6574\u7684 session resumption \u529f\u80fd</li> <li>\u79fb\u9664 session resumption - \u82e5\u554f\u984c\u6301\u7e8c\u767c\u751f\uff0c\u4f60\u53ef\u4ee5\u5c07 <code>session_resumption</code> \u53c3\u6578\u5f9e <code>RunConfig</code> \u4e2d\u79fb\u9664\u4ee5\u505c\u7528 session resumption</li> </ol>"},{"location":"streaming/custom-streaming-ws/#agent_to_client_messagingwebsocket-live_events","title":"<code>agent_to_client_messaging(websocket, live_events)</code>","text":"<pre><code>async def agent_to_client_messaging(websocket, live_events):\n    \"\"\"Agent to client communication\"\"\"\n    while True:\n        async for event in live_events:\n\n            # If the turn complete or interrupted, send it\n            if event.turn_complete or event.interrupted:\n                message = {\n                    \"turn_complete\": event.turn_complete,\n                    \"interrupted\": event.interrupted,\n                }\n                await websocket.send_text(json.dumps(message))\n                print(f\"[AGENT TO CLIENT]: {message}\")\n                continue\n\n            # Read the Content and its first Part\n            part: Part = (\n                event.content and event.content.parts and event.content.parts[0]\n            )\n            if not part:\n                continue\n\n            # If it's audio, send Base64 encoded audio data\n            is_audio = part.inline_data and part.inline_data.mime_type.startswith(\"audio/pcm\")\n            if is_audio:\n                audio_data = part.inline_data and part.inline_data.data\n                if audio_data:\n                    message = {\n                        \"mime_type\": \"audio/pcm\",\n                        \"data\": base64.b64encode(audio_data).decode(\"ascii\")\n                    }\n                    await websocket.send_text(json.dumps(message))\n                    print(f\"[AGENT TO CLIENT]: audio/pcm: {len(audio_data)} bytes.\")\n                    continue\n\n            # If it's text and a parial text, send it\n            if part.text and event.partial:\n                message = {\n                    \"mime_type\": \"text/plain\",\n                    \"data\": part.text\n                }\n                await websocket.send_text(json.dumps(message))\n                print(f\"[AGENT TO CLIENT]: text/plain: {message}\")\n</code></pre> <p>\u9019\u500b\u975e\u540c\u6b65\u51fd\u5f0f\u6703\u5c07 Agent Development Kit (ADK) agent \u7684\u4e8b\u4ef6\u4e32\u6d41\u50b3\u9001\u81f3 WebSocket \u7528\u6236\u7aef\u3002</p> <p>\u908f\u8f2f\u8aaa\u660e\uff1a 1.  \u8fed\u4ee3\u4f86\u81ea agent \u7684 <code>live_events</code>\u3002 2.  \u56de\u5408\u5b8c\u6210\uff0f\u4e2d\u65b7\uff1a \u50b3\u9001\u72c0\u614b\u65d7\u6a19\u81f3\u7528\u6236\u7aef\u3002 3.  \u5167\u5bb9\u8655\u7406\uff1a     *   \u5f9e\u4e8b\u4ef6\u5167\u5bb9\u4e2d\u64f7\u53d6\u7b2c\u4e00\u500b <code>Part</code>\u3002     *   \u97f3\u8a0a\u8cc7\u6599\uff1a \u82e5\u70ba\u97f3\u8a0a\uff08PCM\uff09\uff0c\u5247\u9032\u884c Base64 \u7de8\u78bc\uff0c\u4e26\u4ee5 JSON \u683c\u5f0f\u50b3\u9001\uff1a<code>{ \"mime_type\": \"audio/pcm\", \"data\": \"&lt;base64_audio&gt;\" }</code>\u3002     *   \u6587\u5b57\u8cc7\u6599\uff1a \u82e5\u70ba\u90e8\u5206\u6587\u5b57\uff0c\u5247\u4ee5 JSON \u683c\u5f0f\u50b3\u9001\uff1a<code>{ \"mime_type\": \"text/plain\", \"data\": \"&lt;partial_text&gt;\" }</code>\u3002 4.  \u8a18\u9304\u8a0a\u606f\u3002</p>"},{"location":"streaming/custom-streaming-ws/#client_to_agent_messagingwebsocket-live_request_queue","title":"<code>client_to_agent_messaging(websocket, live_request_queue)</code>","text":"<pre><code>async def client_to_agent_messaging(websocket, live_request_queue):\n    \"\"\"Client to agent communication\"\"\"\n    while True:\n        # Decode JSON message\n        message_json = await websocket.receive_text()\n        message = json.loads(message_json)\n        mime_type = message[\"mime_type\"]\n        data = message[\"data\"]\n\n        # Send the message to the agent\n        if mime_type == \"text/plain\":\n            # Send a text message\n            content = Content(role=\"user\", parts=[Part.from_text(text=data)])\n            live_request_queue.send_content(content=content)\n            print(f\"[CLIENT TO AGENT]: {data}\")\n        elif mime_type == \"audio/pcm\":\n            # Send an audio data\n            decoded_data = base64.b64decode(data)\n            live_request_queue.send_realtime(Blob(data=decoded_data, mime_type=mime_type))\n        else:\n            raise ValueError(f\"Mime type not supported: {mime_type}\")\n</code></pre> <p>\u9019\u500b\u975e\u540c\u6b65\u51fd\u5f0f\u6703\u5c07\u4f86\u81ea WebSocket \u7528\u6236\u7aef\u7684\u8a0a\u606f\u8f49\u767c\u7d66 Agent Development Kit (ADK) agent\u3002</p> <p>\u908f\u8f2f\u8aaa\u660e\uff1a 1.  \u5f9e WebSocket \u63a5\u6536\u4e26\u89e3\u6790 JSON \u8a0a\u606f\uff0c\u9810\u671f\u683c\u5f0f\u70ba\uff1a<code>{ \"mime_type\": \"text/plain\" | \"audio/pcm\", \"data\": \"&lt;data&gt;\" }</code>\u3002 2.  \u6587\u5b57\u8f38\u5165\uff1a \u7576 MIME \u985e\u578b\u70ba \"text/plain\" \u6642\uff0c\u900f\u904e <code>live_request_queue.send_content()</code> \u5c07 <code>Content</code> \u50b3\u9001\u7d66 agent\u3002 3.  \u8a9e\u97f3\u8f38\u5165\uff1a \u7576 MIME \u985e\u578b\u70ba \"audio/pcm\" \u6642\uff0c\u6703\u5c07 Base64 \u8cc7\u6599\u89e3\u78bc\uff0c\u5305\u88dd\u65bc <code>Blob</code>\uff0c\u4e26\u900f\u904e <code>live_request_queue.send_realtime()</code> \u50b3\u9001\u3002 4.  \u82e5\u9047\u5230\u4e0d\u652f\u63f4\u7684 MIME \u985e\u578b\uff0c\u5247\u62cb\u51fa <code>ValueError</code>\u3002 5.  \u8a18\u9304\u8a0a\u606f\u65e5\u8a8c\u3002</p>"},{"location":"streaming/custom-streaming-ws/#fastapi-web-application","title":"FastAPI Web Application","text":"<pre><code>app = FastAPI()\n\nSTATIC_DIR = Path(\"static\")\napp.mount(\"/static\", StaticFiles(directory=STATIC_DIR), name=\"static\")\n\n\n@app.get(\"/\")\nasync def root():\n    \"\"\"Serves the index.html\"\"\"\n    return FileResponse(os.path.join(STATIC_DIR, \"index.html\"))\n\n\n@app.websocket(\"/ws/{user_id}\")\nasync def websocket_endpoint(websocket: WebSocket, user_id: int, is_audio: str):\n    \"\"\"Client websocket endpoint\"\"\"\n\n    # Wait for client connection\n    await websocket.accept()\n    print(f\"Client #{user_id} connected, audio mode: {is_audio}\")\n\n    # Start agent session\n    user_id_str = str(user_id)\n    live_events, live_request_queue = await start_agent_session(user_id_str, is_audio == \"true\")\n\n    # Start tasks\n    agent_to_client_task = asyncio.create_task(\n        agent_to_client_messaging(websocket, live_events)\n    )\n    client_to_agent_task = asyncio.create_task(\n        client_to_agent_messaging(websocket, live_request_queue)\n    )\n\n    # Wait until the websocket is disconnected or an error occurs\n    tasks = [agent_to_client_task, client_to_agent_task]\n    await asyncio.wait(tasks, return_when=asyncio.FIRST_EXCEPTION)\n\n    # Close LiveRequestQueue\n    live_request_queue.close()\n\n    # Disconnected\n    print(f\"Client #{user_id} disconnected\")\n</code></pre> <ul> <li><code>app = FastAPI()</code>\uff1a\u521d\u59cb\u5316\u61c9\u7528\u7a0b\u5f0f\u3002</li> <li>\u975c\u614b\u6a94\u6848 (Static Files)\uff1a \u65bc<code>/static</code>\u4e0b\u63d0\u4f9b<code>static</code>\u8cc7\u6599\u593e\u5167\u7684\u6a94\u6848\u3002</li> <li><code>@app.get(\"/\")</code>\uff08\u6839\u7aef\u9ede Root Endpoint\uff09\uff1a \u63d0\u4f9b<code>index.html</code>\u3002</li> <li><code>@app.websocket(\"/ws/{user_id}\")</code>\uff08WebSocket \u7aef\u9ede\uff09\uff1a<ul> <li>\u8def\u5f91\u53c3\u6578 (Path Parameters)\uff1a <code>user_id</code>\uff08int\uff09\u8207<code>is_audio</code>\uff08str: \"true\"/\"false\"\uff09\u3002</li> <li>\u9023\u7dda\u8655\u7406 (Connection Handling)\uff1a<ol> <li>\u63a5\u53d7 WebSocket \u9023\u7dda\u3002</li> <li>\u4f7f\u7528<code>user_id</code>\u8207<code>is_audio</code>\u547c\u53eb<code>start_agent_session()</code>\u3002</li> <li>\u4e26\u884c\u8a0a\u606f\u4efb\u52d9 (Concurrent Messaging Tasks)\uff1a \u900f\u904e<code>asyncio.gather</code>\u540c\u6642\u5efa\u7acb\u4e26\u57f7\u884c<code>agent_to_client_messaging</code>\u8207<code>client_to_agent_messaging</code>\u3002\u9019\u4e9b\u4efb\u52d9\u8ca0\u8cac\u96d9\u5411\u8a0a\u606f\u6d41\u3002</li> <li>\u8a18\u9304\u7528\u6236\u7aef\u9023\u7dda\u8207\u65b7\u7dda\u72c0\u614b\u3002</li> </ol> </li> </ul> </li> </ul>"},{"location":"streaming/custom-streaming-ws/#_3","title":"\u904b\u4f5c\u65b9\u5f0f\uff08\u6574\u9ad4\u6d41\u7a0b\uff09","text":"<ol> <li>\u7528\u6236\u7aef\u9023\u7dda\u81f3<code>ws://&lt;server&gt;/ws/&lt;user_id&gt;?is_audio=&lt;true_or_false&gt;</code>\u3002</li> <li>\u4f3a\u670d\u5668\u7684<code>websocket_endpoint</code>\u63a5\u53d7\u9023\u7dda\u4e26\u555f\u52d5 ADK session\uff08<code>start_agent_session</code>\uff09\u3002</li> <li>\u5169\u500b<code>asyncio</code>\u4efb\u52d9\u8ca0\u8cac\u901a\u8a0a\u7ba1\u7406\uff1a<ul> <li><code>client_to_agent_messaging</code>\uff1a\u7528\u6236\u7aef WebSocket \u8a0a\u606f \u2192 ADK <code>live_request_queue</code>\u3002</li> <li><code>agent_to_client_messaging</code>\uff1aADK <code>live_events</code> \u2192 \u7528\u6236\u7aef WebSocket\u3002</li> </ul> </li> <li>\u96d9\u5411\u4e32\u6d41\u6301\u7e8c\u9032\u884c\uff0c\u76f4\u5230\u65b7\u7dda\u6216\u767c\u751f\u932f\u8aa4\u3002</li> </ol>"},{"location":"streaming/custom-streaming-ws/#5.-client-side-code-overview","title":"5. \u7528\u6236\u7aef\u7a0b\u5f0f\u78bc\u7e3d\u89bd","text":"<p>JavaScript <code>app.js</code>\uff08\u4f4d\u65bc<code>app/static/js</code>\uff09\u8ca0\u8cac\u7ba1\u7406\u7528\u6236\u7aef\u8207 Agent Development Kit (ADK) \u4e32\u6d41 WebSocket \u5f8c\u7aef\u7684\u4e92\u52d5\u3002\u5b83\u8655\u7406\u6587\u5b57\uff0f\u8a9e\u97f3\u7684\u50b3\u9001\uff0c\u4ee5\u53ca\u4e32\u6d41\u56de\u61c9\u7684\u63a5\u6536\u8207\u986f\u793a\u3002</p> <p>\u4e3b\u8981\u529f\u80fd\uff1a 1.  \u7ba1\u7406 WebSocket \u9023\u7dda\u3002 2.  \u8655\u7406\u6587\u5b57\u8f38\u5165\u3002 3.  \u64f7\u53d6\u9ea5\u514b\u98a8\u97f3\u8a0a\uff08Web Audio API\u3001AudioWorklets\uff09\u3002 4.  \u5c07\u6587\u5b57\uff0f\u97f3\u8a0a\u50b3\u9001\u81f3\u5f8c\u7aef\u3002 5.  \u63a5\u6536\u4e26\u6e32\u67d3 agent \u7684\u6587\u5b57\uff0f\u8a9e\u97f3\u56de\u61c9\u3002 6.  \u7ba1\u7406 UI\u3002</p>"},{"location":"streaming/custom-streaming-ws/#_4","title":"\u5148\u6c7a\u689d\u4ef6","text":"<ul> <li>HTML \u7d50\u69cb\uff1a \u9700\u6709\u7279\u5b9a\u5143\u7d20 ID\uff08\u4f8b\u5982\uff1a<code>messageForm</code>\u3001<code>message</code>\u3001<code>messages</code>\u3001<code>sendButton</code>\u3001<code>startAudioButton</code>\uff09\u3002</li> <li>\u5f8c\u7aef\u4f3a\u670d\u5668\uff1a \u5fc5\u9808\u555f\u52d5 Python FastAPI \u4f3a\u670d\u5668\u3002</li> <li>\u97f3\u8a0a Worklet \u6a94\u6848\uff1a <code>audio-player.js</code> \u8207 <code>audio-recorder.js</code> \u7528\u65bc\u97f3\u8a0a\u8655\u7406\u3002</li> </ul>"},{"location":"streaming/custom-streaming-ws/#websocket","title":"WebSocket \u8655\u7406","text":"<pre><code>// Connect the server with a WebSocket connection\nconst sessionId = Math.random().toString().substring(10);\nconst ws_url =\n  \"ws://\" + window.location.host + \"/ws/\" + sessionId;\nlet websocket = null;\nlet is_audio = false;\n\n// Get DOM elements\nconst messageForm = document.getElementById(\"messageForm\");\nconst messageInput = document.getElementById(\"message\");\nconst messagesDiv = document.getElementById(\"messages\");\nlet currentMessageId = null;\n\n// WebSocket handlers\nfunction connectWebsocket() {\n  // Connect websocket\n  websocket = new WebSocket(ws_url + \"?is_audio=\" + is_audio);\n\n  // Handle connection open\n  websocket.onopen = function () {\n    // Connection opened messages\n    console.log(\"WebSocket connection opened.\");\n    document.getElementById(\"messages\").textContent = \"Connection opened\";\n\n    // Enable the Send button\n    document.getElementById(\"sendButton\").disabled = false;\n    addSubmitHandler();\n  };\n\n  // Handle incoming messages\n  websocket.onmessage = function (event) {\n    // Parse the incoming message\n    const message_from_server = JSON.parse(event.data);\n    console.log(\"[AGENT TO CLIENT] \", message_from_server);\n\n    // Check if the turn is complete\n    // if turn complete, add new message\n    if (\n      message_from_server.turn_complete &amp;&amp;\n      message_from_server.turn_complete == true\n    ) {\n      currentMessageId = null;\n      return;\n    }\n\n    // If it's audio, play it\n    if (message_from_server.mime_type == \"audio/pcm\" &amp;&amp; audioPlayerNode) {\n      audioPlayerNode.port.postMessage(base64ToArray(message_from_server.data));\n    }\n\n    // If it's a text, print it\n    if (message_from_server.mime_type == \"text/plain\") {\n      // add a new message for a new turn\n      if (currentMessageId == null) {\n        currentMessageId = Math.random().toString(36).substring(7);\n        const message = document.createElement(\"p\");\n        message.id = currentMessageId;\n        // Append the message element to the messagesDiv\n        messagesDiv.appendChild(message);\n      }\n\n      // Add message text to the existing message element\n      const message = document.getElementById(currentMessageId);\n      message.textContent += message_from_server.data;\n\n      // Scroll down to the bottom of the messagesDiv\n      messagesDiv.scrollTop = messagesDiv.scrollHeight;\n    }\n  };\n\n  // Handle connection close\n  websocket.onclose = function () {\n    console.log(\"WebSocket connection closed.\");\n    document.getElementById(\"sendButton\").disabled = true;\n    document.getElementById(\"messages\").textContent = \"Connection closed\";\n    setTimeout(function () {\n      console.log(\"Reconnecting...\");\n      connectWebsocket();\n    }, 5000);\n  };\n\n  websocket.onerror = function (e) {\n    console.log(\"WebSocket error: \", e);\n  };\n}\nconnectWebsocket();\n\n// Add submit handler to the form\nfunction addSubmitHandler() {\n  messageForm.onsubmit = function (e) {\n    e.preventDefault();\n    const message = messageInput.value;\n    if (message) {\n      const p = document.createElement(\"p\");\n      p.textContent = \"&gt; \" + message;\n      messagesDiv.appendChild(p);\n      messageInput.value = \"\";\n      sendMessage({\n        mime_type: \"text/plain\",\n        data: message,\n      });\n      console.log(\"[CLIENT TO AGENT] \" + message);\n    }\n    return false;\n  };\n}\n\n// Send a message to the server as a JSON string\nfunction sendMessage(message) {\n  if (websocket &amp;&amp; websocket.readyState == WebSocket.OPEN) {\n    const messageJson = JSON.stringify(message);\n    websocket.send(messageJson);\n  }\n}\n\n// Decode Base64 data to Array\nfunction base64ToArray(base64) {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i &lt; len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n</code></pre> <ul> <li>\u9023\u7dda\u5efa\u7acb\uff1a \u7522\u751f <code>sessionId</code>\uff0c\u7d44\u5efa <code>ws_url</code>\u3002<code>is_audio</code> \u6a19\u8a8c\uff08\u521d\u59cb\u70ba <code>false</code>\uff09\u555f\u7528\u6642\u6703\u5c07 <code>?is_audio=true</code> \u52a0\u5230 URL\u3002<code>connectWebsocket()</code> \u8ca0\u8cac\u521d\u59cb\u5316\u9023\u7dda\u3002</li> <li><code>websocket.onopen</code>\uff1a\u555f\u7528\u50b3\u9001\u6309\u9215\u3001\u66f4\u65b0 UI\uff0c\u4e26\u547c\u53eb <code>addSubmitHandler()</code>\u3002</li> <li><code>websocket.onmessage</code>\uff1a\u89e3\u6790\u4f86\u81ea\u4f3a\u670d\u5668\u7684 JSON\u3002<ul> <li>\u56de\u5408\u7d50\u675f\uff1a \u82e5 agent \u56de\u5408\u7d50\u675f\uff0c\u5247\u91cd\u8a2d <code>currentMessageId</code>\u3002</li> <li>\u97f3\u8a0a\u8cc7\u6599\uff08<code>audio/pcm</code>\uff09\uff1a \u5c07 Base64 \u7de8\u78bc\u7684\u97f3\u8a0a\uff08<code>base64ToArray()</code>\uff09\u89e3\u78bc\u4e26\u50b3\u9001\u81f3 <code>audioPlayerNode</code> \u64ad\u653e\u3002</li> <li>\u6587\u5b57\u8cc7\u6599\uff08<code>text/plain</code>\uff09\uff1a \u82e5\u70ba\u65b0\u56de\u5408\uff08<code>currentMessageId</code> \u70ba null\uff09\uff0c\u5247\u5efa\u7acb\u65b0\u7684 <code>&lt;p&gt;</code>\u3002\u5c07\u63a5\u6536\u5230\u7684\u6587\u5b57\u9644\u52a0\u5230\u76ee\u524d\u8a0a\u606f\u6bb5\u843d\uff0c\u4ee5\u5448\u73fe\u4e32\u6d41\u6548\u679c\u3002\u6efe\u52d5 <code>messagesDiv</code>\u3002</li> </ul> </li> <li><code>websocket.onclose</code>\uff1a\u505c\u7528\u50b3\u9001\u6309\u9215\u3001\u66f4\u65b0 UI\uff0c\u4e26\u65bc 5 \u79d2\u5f8c\u5617\u8a66\u81ea\u52d5\u91cd\u9023\u3002</li> <li><code>websocket.onerror</code>\uff1a\u8a18\u9304\u932f\u8aa4\u3002</li> <li>\u521d\u59cb\u9023\u7dda\uff1a \u8f09\u5165\u8173\u672c\u6642\u6703\u547c\u53eb <code>connectWebsocket()</code>\u3002</li> </ul>"},{"location":"streaming/custom-streaming-ws/#dom","title":"DOM \u4e92\u52d5\u8207\u8a0a\u606f\u9001\u51fa","text":"<ul> <li>\u5143\u7d20\u53d6\u5f97\uff1a \u53d6\u5f97\u6240\u9700\u7684 DOM \u5143\u7d20\u3002</li> <li><code>addSubmitHandler()</code>\uff1a\u7d81\u5b9a\u81f3 <code>messageForm</code> \u7684 submit \u4e8b\u4ef6\u3002\u6703\u963b\u6b62\u9810\u8a2d\u9001\u51fa\uff0c\u5f9e <code>messageInput</code> \u53d6\u5f97\u6587\u5b57\uff0c\u986f\u793a\u4f7f\u7528\u8005\u8a0a\u606f\u3001\u6e05\u9664\u8f38\u5165\u6b04\u4f4d\uff0c\u4e26\u4ee5 <code>{ mime_type: \"text/plain\", data: messageText }</code> \u547c\u53eb <code>sendMessage()</code>\u3002</li> <li><code>sendMessage(messagePayload)</code>\uff1a\u82e5 WebSocket \u5df2\u958b\u555f\uff0c\u5247\u50b3\u9001 JSON \u5b57\u4e32\u5316\u7684 <code>messagePayload</code>\u3002</li> </ul>"},{"location":"streaming/custom-streaming-ws/#_5","title":"\u97f3\u8a0a\u8655\u7406","text":"<pre><code>let audioPlayerNode;\nlet audioPlayerContext;\nlet audioRecorderNode;\nlet audioRecorderContext;\nlet micStream;\n\n// Import the audio worklets\nimport { startAudioPlayerWorklet } from \"./audio-player.js\";\nimport { startAudioRecorderWorklet } from \"./audio-recorder.js\";\n\n// Start audio\nfunction startAudio() {\n  // Start audio output\n  startAudioPlayerWorklet().then(([node, ctx]) =&gt; {\n    audioPlayerNode = node;\n    audioPlayerContext = ctx;\n  });\n  // Start audio input\n  startAudioRecorderWorklet(audioRecorderHandler).then(\n    ([node, ctx, stream]) =&gt; {\n      audioRecorderNode = node;\n      audioRecorderContext = ctx;\n      micStream = stream;\n    }\n  );\n}\n\n// Start the audio only when the user clicked the button\n// (due to the gesture requirement for the Web Audio API)\nconst startAudioButton = document.getElementById(\"startAudioButton\");\nstartAudioButton.addEventListener(\"click\", () =&gt; {\n  startAudioButton.disabled = true;\n  startAudio();\n  is_audio = true;\n  connectWebsocket(); // reconnect with the audio mode\n});\n\n// Audio recorder handler\nfunction audioRecorderHandler(pcmData) {\n  // Send the pcm data as base64\n  sendMessage({\n    mime_type: \"audio/pcm\",\n    data: arrayBufferToBase64(pcmData),\n  });\n  console.log(\"[CLIENT TO AGENT] sent %s bytes\", pcmData.byteLength);\n}\n\n// Encode an array buffer with Base64\nfunction arrayBufferToBase64(buffer) {\n  let binary = \"\";\n  const bytes = new Uint8Array(buffer);\n  const len = bytes.byteLength;\n  for (let i = 0; i &lt; len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(binary);\n}\n</code></pre> <ul> <li>Audio Worklets\uff1a \u900f\u904e <code>audio-player.js</code> \u4f7f\u7528 <code>AudioWorkletNode</code>\uff08\u7528\u65bc\u64ad\u653e\uff09\u4ee5\u53ca <code>audio-recorder.js</code>\uff08\u7528\u65bc\u9304\u97f3\uff09\u3002</li> <li>\u72c0\u614b\u8b8a\u6578\uff1a \u5132\u5b58 AudioContexts \u8207 WorkletNodes\uff08\u4f8b\u5982 <code>audioPlayerNode</code>\uff09\u3002</li> <li><code>startAudio()</code>\uff1a\u521d\u59cb\u5316\u64ad\u653e\u5668\u8207\u9304\u97f3\u5668 worklet\u3002\u5c07 <code>audioRecorderHandler</code> \u4f5c\u70ba callback \u50b3\u905e\u7d66\u9304\u97f3\u5668\u3002</li> <li>\u300c\u555f\u52d5\u8a9e\u97f3\u300d\u6309\u9215\uff08<code>startAudioButton</code>\uff09\uff1a<ul> <li>Web Audio API \u9700\u8981\u4f7f\u7528\u8005\u624b\u52e2\u89f8\u767c\u3002</li> <li>\u9ede\u64ca\u6642\uff1a\u505c\u7528\u6309\u9215\uff0c\u547c\u53eb <code>startAudio()</code>\uff0c\u8a2d\u5b9a <code>is_audio = true</code>\uff0c\u7136\u5f8c\u547c\u53eb <code>connectWebsocket()</code> \u4ee5\u8a9e\u97f3\u6a21\u5f0f\u91cd\u65b0\u9023\u7dda\uff08URL \u5305\u542b <code>?is_audio=true</code>\uff09\u3002</li> </ul> </li> <li><code>audioRecorderHandler(pcmData)</code>\uff1a\u4f86\u81ea\u9304\u97f3\u5668 worklet \u7684 callback\uff0c\u5e36\u6709 PCM \u97f3\u8a0a\u5340\u584a\u3002\u5c07 <code>pcmData</code> \u7de8\u78bc\u70ba Base64\uff08<code>arrayBufferToBase64()</code>\uff09\uff0c\u4e26\u900f\u904e <code>sendMessage()</code> \u642d\u914d <code>mime_type: \"audio/pcm\"</code> \u50b3\u9001\u81f3\u4f3a\u670d\u5668\u3002</li> <li>\u8f14\u52a9\u51fd\u5f0f\uff1a <code>base64ToArray()</code>\uff08\u4f3a\u670d\u5668\u97f3\u8a0a \u2192 \u7528\u6236\u7aef\u64ad\u653e\u5668\uff09\u8207 <code>arrayBufferToBase64()</code>\uff08\u7528\u6236\u7aef\u9ea5\u514b\u98a8\u97f3\u8a0a \u2192 \u4f3a\u670d\u5668\uff09\u3002</li> </ul>"},{"location":"streaming/custom-streaming-ws/#_6","title":"\u904b\u4f5c\u65b9\u5f0f\uff08\u7528\u6236\u7aef\u6d41\u7a0b\uff09","text":"<ol> <li>\u9801\u9762\u8f09\u5165\uff1a \u4ee5\u6587\u5b57\u6a21\u5f0f\u5efa\u7acb WebSocket \u9023\u7dda\u3002</li> <li>\u6587\u5b57\u4e92\u52d5\uff1a \u4f7f\u7528\u8005\u8f38\u5165\uff0f\u9001\u51fa\u6587\u5b57\uff0c\u50b3\u9001\u81f3\u4f3a\u670d\u5668\u3002\u4f3a\u670d\u5668\u56de\u50b3\u7684\u6587\u5b57\u5373\u6642\u986f\u793a\u4e26\u4e32\u6d41\u3002</li> <li>\u5207\u63db\u81f3\u8a9e\u97f3\u6a21\u5f0f\uff1a \u9ede\u64ca\u300c\u555f\u52d5\u8a9e\u97f3\u300d\u6309\u9215\uff0c\u521d\u59cb\u5316 audio worklet\uff0c\u8a2d\u5b9a <code>is_audio=true</code>\uff0c\u4e26\u4ee5\u8a9e\u97f3\u6a21\u5f0f\u91cd\u65b0\u5efa\u7acb WebSocket \u9023\u7dda\u3002</li> <li>\u8a9e\u97f3\u4e92\u52d5\uff1a \u9304\u97f3\u5668\u5c07\u9ea5\u514b\u98a8\u97f3\u8a0a\uff08Base64 PCM\uff09\u50b3\u9001\u81f3\u4f3a\u670d\u5668\u3002\u4f3a\u670d\u5668\u7684\u97f3\u8a0a\uff0f\u6587\u5b57\u56de\u61c9\u7531 <code>websocket.onmessage</code> \u8655\u7406\u64ad\u653e\uff0f\u986f\u793a\u3002</li> <li>\u9023\u7dda\u7ba1\u7406\uff1a WebSocket \u95dc\u9589\u6642\u81ea\u52d5\u91cd\u65b0\u9023\u7dda\u3002</li> </ol>"},{"location":"streaming/custom-streaming-ws/#_7","title":"\u6458\u8981","text":"<p>\u672c\u6587\u6982\u8ff0\u4e86\u4f7f\u7528 Agent Development Kit (ADK) Streaming \u8207 FastAPI \u6240\u5efa\u69cb\u7684\u81ea\u8a02\u975e\u540c\u6b65\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\u7684\u4f3a\u670d\u5668\u7aef\u8207\u7528\u6236\u7aef\u7a0b\u5f0f\u78bc\uff0c\u5be6\u73fe\u5373\u6642\u3001\u96d9\u5411\u8a9e\u97f3\u8207\u6587\u5b57\u901a\u8a0a\u3002</p> <p>Python FastAPI \u4f3a\u670d\u5668\u7a0b\u5f0f\u78bc\u6703\u521d\u59cb\u5316 ADK agent session\uff0c\u53ef\u8a2d\u5b9a\u70ba\u6587\u5b57\u6216\u8a9e\u97f3\u56de\u61c9\u3002\u5b83\u4f7f\u7528 WebSocket \u7aef\u9ede\u4f86\u8655\u7406\u7528\u6236\u7aef\u9023\u7dda\u3002\u975e\u540c\u6b65\u4efb\u52d9\u8ca0\u8cac\u96d9\u5411\u8a0a\u606f\u50b3\u905e\uff1a\u5c07\u7528\u6236\u7aef\u7684\u6587\u5b57\u6216 Base64 \u7de8\u78bc PCM \u97f3\u8a0a\u8f49\u767c\u7d66 ADK agent\uff0c\u4e26\u5c07 agent \u56de\u50b3\u7684\u6587\u5b57\u6216 Base64 \u7de8\u78bc PCM \u97f3\u8a0a\u4e32\u6d41\u56de\u7528\u6236\u7aef\u3002</p> <p>\u7528\u6236\u7aef JavaScript \u7a0b\u5f0f\u78bc\u7ba1\u7406 WebSocket \u9023\u7dda\uff0c\u53ef\u91cd\u65b0\u5efa\u7acb\u4ee5\u5207\u63db\u6587\u5b57\u8207\u8a9e\u97f3\u6a21\u5f0f\u3002\u5b83\u6703\u5c07\u4f7f\u7528\u8005\u8f38\u5165\uff08\u6587\u5b57\u6216\u900f\u904e Web Audio API \u8207 AudioWorklets \u64f7\u53d6\u7684\u9ea5\u514b\u98a8\u97f3\u8a0a\uff09\u50b3\u9001\u81f3\u4f3a\u670d\u5668\u3002\u4f3a\u670d\u5668\u50b3\u4f86\u7684\u8a0a\u606f\u6703\u88ab\u8655\u7406\uff1a\u6587\u5b57\u5373\u6642\u986f\u793a\uff08\u4e32\u6d41\uff09\uff0cBase64 \u7de8\u78bc\u7684 PCM \u97f3\u8a0a\u5247\u7d93\u89e3\u78bc\u5f8c\uff0c\u900f\u904e AudioWorklet \u64ad\u653e\u3002</p>"},{"location":"streaming/custom-streaming-ws/#_8","title":"\u90e8\u7f72\u81f3\u6b63\u5f0f\u74b0\u5883\u7684\u5f8c\u7e8c\u5efa\u8b70","text":"<p>\u7576\u4f60\u5728\u6b63\u5f0f\u61c9\u7528\u4e2d\u4f7f\u7528 ADK Streaming \u6642\uff0c\u5efa\u8b70\u8003\u616e\u4ee5\u4e0b\u5e7e\u9ede\uff1a</p> <ul> <li>\u90e8\u7f72\u591a\u500b\u5be6\u4f8b\uff1a \u57f7\u884c\u591a\u500b FastAPI \u61c9\u7528\u7a0b\u5f0f\u5be6\u4f8b\uff0c\u800c\u975e\u50c5\u6709\u55ae\u4e00\u5be6\u4f8b\u3002</li> <li>\u5be6\u4f5c\u8ca0\u8f09\u5e73\u8861\uff1a \u5728\u61c9\u7528\u7a0b\u5f0f\u5be6\u4f8b\u524d\u65b9\u8a2d\u7f6e\u8ca0\u8f09\u5e73\u8861\u5668\uff0c\u4ee5\u5206\u914d\u9032\u4f86\u7684 WebSocket \u9023\u7dda\u3002<ul> <li>\u91dd\u5c0d WebSocket \u8a2d\u5b9a\uff1a \u78ba\u4fdd\u8ca0\u8f09\u5e73\u8861\u5668\u652f\u63f4\u9577\u9023\u7dda\u7684 WebSocket\uff0c\u4e26\u8003\u616e\u555f\u7528\u300c\u9ecf\u6027\u6703\u8a71\u300d\uff08session affinity\uff09\uff0c\u8b93\u540c\u4e00\u7528\u6236\u7aef\u8def\u7531\u81f3\u540c\u4e00\u5f8c\u7aef\u5be6\u4f8b\uff0c\u6216 \u8a2d\u8a08\u70ba\u7121\u72c0\u614b\u5be6\u4f8b\uff08\u8a73\u898b\u4e0b\u9ede\uff09\u3002</li> </ul> </li> <li>\u5916\u90e8\u5316 session state\uff1a \u5c07 ADK \u7684 <code>InMemorySessionService</code> \u63db\u6210\u5206\u6563\u5f0f\u3001\u6301\u4e45\u5316\u7684 session store\u3002\u5982\u6b64\u4e00\u4f86\uff0c\u4efb\u4f55\u4f3a\u670d\u5668\u5be6\u4f8b\u90fd\u80fd\u8655\u7406\u4efb\u4f55\u7528\u6236\u7684 session\uff0c\u8b93\u61c9\u7528\u4f3a\u670d\u5668\u5c64\u771f\u6b63\u7121\u72c0\u614b\u5316\uff0c\u4e26\u63d0\u5347\u5bb9\u932f\u80fd\u529b\u3002</li> <li>\u5be6\u4f5c\u5065\u5eb7\u6aa2\u67e5\uff1a \u70ba WebSocket \u4f3a\u670d\u5668\u5be6\u4f8b\u8a2d\u7f6e\u5065\u5168\u6027\u6aa2\u67e5\uff0c\u8b93\u8ca0\u8f09\u5e73\u8861\u5668\u80fd\u81ea\u52d5\u5c07\u7570\u5e38\u5be6\u4f8b\u79fb\u51fa\u6d41\u91cf\u5206\u914d\u3002</li> <li>\u5229\u7528\u81ea\u52d5\u5316\u5354\u8abf\u5e73\u53f0\uff1a \u5efa\u8b70\u63a1\u7528\u5982 Kubernetes \u7b49\u5354\u8abf\u5e73\u53f0\uff0c\u5be6\u73fe WebSocket \u4f3a\u670d\u5668\u5be6\u4f8b\u7684\u81ea\u52d5\u90e8\u7f72\u3001\u64f4\u5c55\u3001\u81ea\u6211\u4fee\u5fa9\u8207\u7ba1\u7406\u3002</li> </ul>"},{"location":"streaming/custom-streaming.en/","title":"Custom Audio Streaming app (SSE)","text":"<p>This article overviews the server and client code for a custom asynchronous web app built with ADK Streaming and FastAPI, enabling real-time, bidirectional audio and text communication with Server-Sent Events (SSE). The key features are:</p> <p>Server-Side (Python/FastAPI): - FastAPI + ADK integration - Server-Sent Events for real-time streaming - Session management with isolated user contexts - Support for both text and audio communication modes - Google Search tool integration for grounded responses</p> <p>Client-Side (JavaScript/Web Audio API): - Real-time bidirectional communication via SSE and HTTP POST - Professional audio processing using AudioWorklet processors - Seamless mode switching between text and audio - Automatic reconnection and error handling - Base64 encoding for audio data transmission</p> <p>There is also a WebSocket version of the sample is available.</p>"},{"location":"streaming/custom-streaming.en/#1.-setup-installation","title":"1. Install ADK","text":"<p>Create &amp; Activate Virtual Environment (Recommended):</p> <pre><code># Create\npython -m venv .venv\n# Activate (each new terminal)\n# macOS/Linux: source .venv/bin/activate\n# Windows CMD: .venv\\Scripts\\activate.bat\n# Windows PowerShell: .venv\\Scripts\\Activate.ps1\n</code></pre> <p>Install ADK:</p> <pre><code>pip install --upgrade google-adk==1.10.0\n</code></pre> <p>Set <code>SSL_CERT_FILE</code> variable with the following command.</p> <pre><code>export SSL_CERT_FILE=$(python -m certifi)\n</code></pre> <p>Download the sample code:</p> <pre><code>git clone --no-checkout https://github.com/google/adk-docs.git\ncd adk-docs\ngit sparse-checkout init --cone\ngit sparse-checkout set examples/python/snippets/streaming/adk-streaming\ngit checkout main\ncd examples/python/snippets/streaming/adk-streaming/app\n</code></pre> <p>This sample code has the following files and folders:</p> <pre><code>adk-streaming/\n\u2514\u2500\u2500 app/ # the web app folder\n    \u251c\u2500\u2500 .env # Gemini API key / Google Cloud Project ID\n    \u251c\u2500\u2500 main.py # FastAPI web app\n    \u251c\u2500\u2500 static/ # Static content folder\n    |   \u251c\u2500\u2500 js # JavaScript files folder (includes app.js)\n    |   \u2514\u2500\u2500 index.html # The web client page\n    \u2514\u2500\u2500 google_search_agent/ # Agent folder\n        \u251c\u2500\u2500 __init__.py # Python package\n        \u2514\u2500\u2500 agent.py # Agent definition\n</code></pre>"},{"location":"streaming/custom-streaming.en/#2.-set-up-the-platform","title":"2. Set up the platform","text":"<p>To run the sample app, choose a platform from either Google AI Studio or Google Cloud Vertex AI:</p> Gemini - Google AI StudioGemini - Google Cloud Vertex AI <ol> <li>Get an API key from Google AI Studio.</li> <li> <p>Open the <code>.env</code> file located inside (<code>app/</code>) and copy-paste the following code.</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=FALSE\nGOOGLE_API_KEY=PASTE_YOUR_ACTUAL_API_KEY_HERE\n</code></pre> </li> <li> <p>Replace <code>PASTE_YOUR_ACTUAL_API_KEY_HERE</code> with your actual <code>API KEY</code>.</p> </li> </ol> <ol> <li>You need an existing    Google Cloud account and a    project.<ul> <li>Set up a   Google Cloud project</li> <li>Set up the   gcloud CLI</li> <li>Authenticate to Google Cloud, from the terminal by running   <code>gcloud auth login</code>.</li> <li>Enable the Vertex AI API.</li> </ul> </li> <li> <p>Open the <code>.env</code> file located inside (<code>app/</code>). Copy-paste    the following code and update the project ID and location.</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_CLOUD_PROJECT=PASTE_YOUR_ACTUAL_PROJECT_ID\nGOOGLE_CLOUD_LOCATION=us-central1\n</code></pre> </li> </ol>"},{"location":"streaming/custom-streaming.en/#3.-interact-with-your-streaming-app","title":"3. Interact with Your Streaming app","text":"<p>1. Navigate to the Correct Directory:</p> <p>To run your agent effectively, make sure you are in the app folder (<code>adk-streaming/app</code>)</p> <p>2. Start the Fast API: Run the following command to start CLI interface with</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>3. Access the app with the text mode: Once the app starts, the terminal will display a local URL (e.g., http://localhost:8000). Click this link to open the UI in your browser.</p> <p>Now you should see the UI like this:</p> <p></p> <p>Try asking a question <code>What time is it now?</code>. The agent will use Google Search to respond to your queries. You would notice that the UI shows the agent's response as streaming text. You can also send messages to the agent at any time, even while the agent is still responding. This demonstrates the bidirectional communication capability of ADK Streaming.</p> <p>4. Access the app with the audio mode: Now click the <code>Start Audio</code> button. The app reconnects with the server in an audio mode, and the UI will show the following dialog for the first time:</p> <p></p> <p>Click <code>Allow while visiting the site</code>, then you will see the microphone icon will be shown at the top of the browser:</p> <p></p> <p>Now you can talk to the agent with voice. Ask questions like <code>What time is it now?</code> with voice and you will hear the agent responding in voice too. As Streaming for ADK supports multiple languages, it can also respond to question in the supported languages.</p> <p>5. Check console logs</p> <p>If you are using the Chrome browser, use the right click and select <code>Inspect</code> to open the DevTools. On the <code>Console</code>, you can see the incoming and outgoing audio data such as <code>[CLIENT TO AGENT]</code> and <code>[AGENT TO CLIENT]</code>, representing the audio data streaming in and out between the browser and the server.</p> <p>At the same time, in the app server console, you should see something like this:</p> <pre><code>Client #90766266 connected via SSE, audio mode: false\nINFO:     127.0.0.1:52692 - \"GET /events/90766266?is_audio=false HTTP/1.1\" 200 OK\n[CLIENT TO AGENT]: hi\nINFO:     127.0.0.1:52696 - \"POST /send/90766266 HTTP/1.1\" 200 OK\n[AGENT TO CLIENT]: text/plain: {'mime_type': 'text/plain', 'data': 'Hi'}\n[AGENT TO CLIENT]: text/plain: {'mime_type': 'text/plain', 'data': ' there! How can I help you today?\\n'}\n[AGENT TO CLIENT]: {'turn_complete': True, 'interrupted': None}\n</code></pre> <p>These console logs are important in case you develop your own streaming application. In many cases, the communication failure between the browser and server becomes a major cause for the streaming application bugs.</p> <p>6. Troubleshooting tips</p> <ul> <li>When your browser can't connect to the server via SSH proxy: SSH proxy used in various cloud services may not work with SSE. Please try without SSH proxy, such as using a local laptop, or try the WebSocket version.</li> <li>When <code>gemini-2.0-flash-exp</code> model doesn't work: If you see any errors on the app server console with regard to <code>gemini-2.0-flash-exp</code> model availability, try replacing it with <code>gemini-2.0-flash-live-001</code> on <code>app/google_search_agent/agent.py</code> at line 6.</li> </ul>"},{"location":"streaming/custom-streaming.en/#4-agent-definition","title":"4. Agent definition","text":"<p>The agent definition code <code>agent.py</code> in the <code>google_search_agent</code> folder is where the agent's logic is written:</p> <pre><code>from google.adk.agents import Agent\nfrom google.adk.tools import google_search  # Import the tool\n\nroot_agent = Agent(\n   name=\"google_search_agent\",\n   model=\"gemini-2.0-flash-exp\", # if this model does not work, try below\n   #model=\"gemini-2.0-flash-live-001\",\n   description=\"Agent to answer questions using Google Search.\",\n   instruction=\"Answer the question using the Google Search tool.\",\n   tools=[google_search],\n)\n</code></pre> <p>Notice how easily you integrated grounding with Google Search capabilities.  The <code>Agent</code> class and the <code>google_search</code> tool handle the complex interactions with the LLM and grounding with the search API, allowing you to focus on the agent's purpose and behavior.</p> <p></p> <p>The server and client architecture enables real-time, bidirectional communication between web clients and AI agents with proper session isolation and resource management.</p>"},{"location":"streaming/custom-streaming.en/#5.-server-side-code-overview","title":"5. Server side code overview","text":"<p>The FastAPI server provides real-time communication between web clients and the AI agent.</p>"},{"location":"streaming/custom-streaming.en/#4.-bidi-comm-overview","title":"Bidirectional communication overview","text":""},{"location":"streaming/custom-streaming.en/#client-to-agent-flow","title":"Client-to-Agent Flow:","text":"<ol> <li>Connection Establishment - Client opens SSE connection to <code>/events/{user_id}</code>, triggering session creation and storing request queue in <code>active_sessions</code></li> <li>Message Transmission - Client sends POST to <code>/send/{user_id}</code> with JSON payload containing <code>mime_type</code> and <code>data</code></li> <li>Queue Processing - Server retrieves session's <code>live_request_queue</code> and forwards message to agent via <code>send_content()</code> or <code>send_realtime()</code></li> </ol>"},{"location":"streaming/custom-streaming.en/#agent-to-client-flow","title":"Agent-to-Client Flow:","text":"<ol> <li>Event Generation - Agent processes requests and generates events through <code>live_events</code> async generator</li> <li>Stream Processing - <code>agent_to_client_sse()</code> filters events and formats them as SSE-compatible JSON</li> <li>Real-time Delivery - Events stream to client via persistent HTTP connection with proper SSE headers</li> </ol>"},{"location":"streaming/custom-streaming.en/#session-management","title":"Session Management:","text":"<ul> <li>Per-User Isolation - Each user gets unique session stored in <code>active_sessions</code> dict</li> <li>Lifecycle Management - Sessions auto-cleanup on disconnect with proper resource disposal</li> <li>Concurrent Support - Multiple users can have simultaneous active sessions</li> </ul>"},{"location":"streaming/custom-streaming.en/#error-handling","title":"Error Handling:","text":"<ul> <li>Session Validation - POST requests validate session existence before processing</li> <li>Stream Resilience - SSE streams handle exceptions and perform cleanup automatically</li> <li>Connection Recovery - Clients can reconnect by re-establishing SSE connection</li> </ul>"},{"location":"streaming/custom-streaming.en/#session-resumption","title":"Session Resumption:","text":"<ul> <li>Live Session Resumption - Enables transparent reconnection to interrupted live conversations</li> <li>Handle Caching - System automatically caches session handles for recovery</li> <li>Reliability Enhancement - Improves resilience against network instability during streaming</li> </ul>"},{"location":"streaming/custom-streaming.en/#agent-session-management","title":"Agent Session Management","text":"<p>The <code>start_agent_session()</code> function creates isolated AI agent sessions:</p> <pre><code>async def start_agent_session(user_id, is_audio=False):\n    \"\"\"Starts an agent session\"\"\"\n\n    # Create a Runner\n    runner = InMemoryRunner(\n        app_name=APP_NAME,\n        agent=root_agent,\n    )\n\n    # Create a Session\n    session = await runner.session_service.create_session(\n        app_name=APP_NAME,\n        user_id=user_id,  # Replace with actual user ID\n    )\n\n    # Set response modality\n    modality = \"AUDIO\" if is_audio else \"TEXT\"\n    run_config = RunConfig(response_modalities=[modality])\n\n    # Optional: Enable session resumption for improved reliability\n    # run_config = RunConfig(\n    #     response_modalities=[modality],\n    #     session_resumption=types.SessionResumptionConfig()\n    # )\n\n    # Create a LiveRequestQueue for this session\n    live_request_queue = LiveRequestQueue()\n\n    # Start agent session\n    live_events = runner.run_live(\n        session=session,\n        live_request_queue=live_request_queue,\n        run_config=run_config,\n    )\n    return live_events, live_request_queue\n</code></pre> <ul> <li> <p>InMemoryRunner Setup - Creates a runner instance that manages the agent lifecycle in memory, with the app name \"ADK Streaming example\" and the Google Search agent.</p> </li> <li> <p>Session Creation - Uses <code>runner.session_service.create_session()</code> to establish a unique session per user ID, enabling multiple concurrent users.</p> </li> <li> <p>Response Modality Configuration - Sets <code>RunConfig</code> with either \"AUDIO\" or \"TEXT\" modality based on the <code>is_audio</code> parameter, determining output format.</p> </li> <li> <p>LiveRequestQueue - Creates a bidirectional communication channel that queues incoming requests and enables real-time message passing between client and agent.</p> </li> <li> <p>Live Events Stream - <code>runner.run_live()</code> returns an async generator that yields real-time events from the agent, including partial responses, turn completions, and interruptions.</p> </li> </ul>"},{"location":"streaming/custom-streaming.en/#server-sent-events-sse-streaming","title":"Server-Sent Events (SSE) Streaming","text":"<p>The <code>agent_to_client_sse()</code> function handles real-time streaming from agent to client:</p> <pre><code>async def agent_to_client_sse(live_events):\n    \"\"\"Agent to client communication via SSE\"\"\"\n    async for event in live_events:\n        # If the turn complete or interrupted, send it\n        if event.turn_complete or event.interrupted:\n            message = {\n                \"turn_complete\": event.turn_complete,\n                \"interrupted\": event.interrupted,\n            }\n            yield f\"data: {json.dumps(message)}\\n\\n\"\n            print(f\"[AGENT TO CLIENT]: {message}\")\n            continue\n\n        # Read the Content and its first Part\n        part: Part = (\n            event.content and event.content.parts and event.content.parts[0]\n        )\n        if not part:\n            continue\n\n        # If it's audio, send Base64 encoded audio data\n        is_audio = part.inline_data and part.inline_data.mime_type.startswith(\"audio/pcm\")\n        if is_audio:\n            audio_data = part.inline_data and part.inline_data.data\n            if audio_data:\n                message = {\n                    \"mime_type\": \"audio/pcm\",\n                    \"data\": base64.b64encode(audio_data).decode(\"ascii\")\n                }\n                yield f\"data: {json.dumps(message)}\\n\\n\"\n                print(f\"[AGENT TO CLIENT]: audio/pcm: {len(audio_data)} bytes.\")\n                continue\n\n        # If it's text and a parial text, send it\n        if part.text and event.partial:\n            message = {\n                \"mime_type\": \"text/plain\",\n                \"data\": part.text\n            }\n            yield f\"data: {json.dumps(message)}\\n\\n\"\n            print(f\"[AGENT TO CLIENT]: text/plain: {message}\")\n</code></pre> <ul> <li> <p>Event Processing Loop - Iterates through <code>live_events</code> async generator, processing each event as it arrives from the agent.</p> </li> <li> <p>Turn Management  - Detects conversation turn completion or interruption events and sends JSON messages with <code>turn_complete</code> and <code>interrupted</code> flags to signal conversation state changes.</p> </li> <li> <p>Content Part Extraction - Extracts the first <code>Part</code> from event content, which contains either text or audio data.</p> </li> <li> <p>Audio Streaming  - Handles PCM audio data by:</p> </li> <li>Detecting <code>audio/pcm</code> MIME type in <code>inline_data</code></li> <li>Base64 encoding raw audio bytes for JSON transmission</li> <li> <p>Sending with <code>mime_type</code> and <code>data</code> fields</p> </li> <li> <p>Text Streaming  - Processes partial text responses by sending incremental text updates as they're generated, enabling real-time typing effects.</p> </li> <li> <p>SSE Format - All data is formatted as <code>data: {json}\\n\\n</code> following SSE specification for browser EventSource API compatibility.</p> </li> </ul>"},{"location":"streaming/custom-streaming.en/#http-endpoints-and-routing","title":"HTTP Endpoints and Routing","text":""},{"location":"streaming/custom-streaming.en/#root-endpoint","title":"Root Endpoint","text":"<p>GET / - Serves <code>static/index.html</code> as the main application interface using FastAPI's <code>FileResponse</code>.</p>"},{"location":"streaming/custom-streaming.en/#sse-events-endpoint","title":"SSE Events Endpoint","text":"<pre><code>@app.get(\"/events/{user_id}\")\nasync def sse_endpoint(user_id: int, is_audio: str = \"false\"):\n    \"\"\"SSE endpoint for agent to client communication\"\"\"\n\n    # Start agent session\n    user_id_str = str(user_id)\n    live_events, live_request_queue = await start_agent_session(user_id_str, is_audio == \"true\")\n\n    # Store the request queue for this user\n    active_sessions[user_id_str] = live_request_queue\n\n    print(f\"Client #{user_id} connected via SSE, audio mode: {is_audio}\")\n\n    def cleanup():\n        live_request_queue.close()\n        if user_id_str in active_sessions:\n            del active_sessions[user_id_str]\n        print(f\"Client #{user_id} disconnected from SSE\")\n\n    async def event_generator():\n        try:\n            async for data in agent_to_client_sse(live_events):\n                yield data\n        except Exception as e:\n            print(f\"Error in SSE stream: {e}\")\n        finally:\n            cleanup()\n\n    return StreamingResponse(\n        event_generator(),\n        media_type=\"text/event-stream\",\n        headers={\n            \"Cache-Control\": \"no-cache\",\n            \"Connection\": \"keep-alive\",\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Headers\": \"Cache-Control\"\n        }\n    )\n</code></pre> <p>GET /events/{user_id} - Establishes persistent SSE connection:</p> <ul> <li> <p>Parameters - Takes <code>user_id</code> (int) and optional <code>is_audio</code> query parameter (defaults to \"false\")</p> </li> <li> <p>Session Initialization - Calls <code>start_agent_session()</code> and stores the <code>live_request_queue</code> in <code>active_sessions</code> dict using <code>user_id</code> as key</p> </li> <li> <p>StreamingResponse - Returns <code>StreamingResponse</code> with:</p> </li> <li><code>event_generator()</code> async function that wraps <code>agent_to_client_sse()</code></li> <li>MIME type: <code>text/event-stream</code> </li> <li>CORS headers for cross-origin access</li> <li> <p>Cache-control headers to prevent caching</p> </li> <li> <p>Cleanup Logic - Handles connection termination by closing the request queue and removing from active sessions, with error handling for stream interruptions.</p> </li> </ul>"},{"location":"streaming/custom-streaming.en/#session-resumption-configuration","title":"Session Resumption Configuration","text":"<p>ADK supports live session resumption to improve reliability during streaming conversations. This feature enables automatic reconnection when live connections are interrupted due to network issues.</p>"},{"location":"streaming/custom-streaming.en/#enabling-session-resumption","title":"Enabling Session Resumption","text":"<p>To enable session resumption, you need to:</p> <ol> <li> <p>Import the required types: <pre><code>from google.genai import types\n</code></pre></p> </li> <li> <p>Configure session resumption in RunConfig: <pre><code>run_config = RunConfig(\n    response_modalities=[modality],\n    session_resumption=types.SessionResumptionConfig()\n)\n</code></pre></p> </li> </ol>"},{"location":"streaming/custom-streaming.en/#session-resumption-features","title":"Session Resumption Features","text":"<ul> <li>Automatic Handle Caching - The system automatically caches session resumption handles during live conversations</li> <li>Transparent Reconnection - When connections are interrupted, the system attempts to resume using cached handles</li> <li>Context Preservation - Conversation context and state are maintained across reconnections</li> <li>Network Resilience - Provides better user experience during unstable network conditions</li> </ul>"},{"location":"streaming/custom-streaming.en/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Session resumption handles are managed internally by the ADK framework</li> <li>No additional client-side code changes are required</li> <li>The feature is particularly beneficial for long-running streaming conversations</li> <li>Connection interruptions become less disruptive to the user experience</li> </ul>"},{"location":"streaming/custom-streaming.en/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter errors with session resumption:</p> <ol> <li>Check model compatibility - Ensure you're using a model that supports session resumption</li> <li>API limitations - Some session resumption features may not be available in all API versions</li> <li>Remove session resumption - If issues persist, you can disable session resumption by removing the <code>session_resumption</code> parameter from <code>RunConfig</code></li> </ol>"},{"location":"streaming/custom-streaming.en/#message-sending-endpoint","title":"Message Sending Endpoint","text":"<pre><code>@app.post(\"/send/{user_id}\")\nasync def send_message_endpoint(user_id: int, request: Request):\n    \"\"\"HTTP endpoint for client to agent communication\"\"\"\n\n    user_id_str = str(user_id)\n\n    # Get the live request queue for this user\n    live_request_queue = active_sessions.get(user_id_str)\n    if not live_request_queue:\n        return {\"error\": \"Session not found\"}\n\n    # Parse the message\n    message = await request.json()\n    mime_type = message[\"mime_type\"]\n    data = message[\"data\"]\n\n    # Send the message to the agent\n    if mime_type == \"text/plain\":\n        content = Content(role=\"user\", parts=[Part.from_text(text=data)])\n        live_request_queue.send_content(content=content)\n        print(f\"[CLIENT TO AGENT]: {data}\")\n    elif mime_type == \"audio/pcm\":\n        decoded_data = base64.b64decode(data)\n        live_request_queue.send_realtime(Blob(data=decoded_data, mime_type=mime_type))\n        print(f\"[CLIENT TO AGENT]: audio/pcm: {len(decoded_data)} bytes\")\n    else:\n        return {\"error\": f\"Mime type not supported: {mime_type}\"}\n\n    return {\"status\": \"sent\"}\n</code></pre> <p>POST /send/{user_id} - Receives client messages:</p> <ul> <li> <p>Session Lookup - Retrieves <code>live_request_queue</code> from <code>active_sessions</code> or returns error if session doesn't exist</p> </li> <li> <p>Message Processing - Parses JSON with <code>mime_type</code> and <code>data</code> fields:</p> </li> <li>Text Messages - Creates <code>Content</code> with <code>Part.from_text()</code> and sends via <code>send_content()</code></li> <li> <p>Audio Messages - Base64 decodes PCM data and sends via <code>send_realtime()</code> with <code>Blob</code></p> </li> <li> <p>Error Handling - Returns appropriate error responses for unsupported MIME types or missing sessions.</p> </li> </ul>"},{"location":"streaming/custom-streaming.en/#6.-client-side-code-overview","title":"6. Client side code overview","text":"<p>The client-side consists of a web interface with real-time communication and audio capabilities:</p>"},{"location":"streaming/custom-streaming.en/#html-interface-staticindexhtml","title":"HTML Interface (<code>static/index.html</code>)","text":"<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;ADK Streaming Test (Audio)&lt;/title&gt;\n    &lt;script src=\"/static/js/app.js\" type=\"module\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;h1&gt;ADK Streaming Test&lt;/h1&gt;\n    &lt;div\n      id=\"messages\"\n      style=\"height: 300px; overflow-y: auto; border: 1px solid black\"&gt;&lt;/div&gt;\n    &lt;br /&gt;\n\n    &lt;form id=\"messageForm\"&gt;\n      &lt;label for=\"message\"&gt;Message:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"message\" name=\"message\" /&gt;\n      &lt;button type=\"submit\" id=\"sendButton\" disabled&gt;Send&lt;/button&gt;\n      &lt;button type=\"button\" id=\"startAudioButton\"&gt;Start Audio&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>Simple web interface with: - Messages Display - Scrollable div for conversation history - Text Input Form - Input field and send button for text messages - Audio Control - Button to enable audio mode and microphone access</p>"},{"location":"streaming/custom-streaming.en/#main-application-logic-staticjsappjs","title":"Main Application Logic (<code>static/js/app.js</code>)","text":""},{"location":"streaming/custom-streaming.en/#session-management-appjs","title":"Session Management (<code>app.js</code>)","text":"<pre><code>const sessionId = Math.random().toString().substring(10);\nconst sse_url =\n  \"http://\" + window.location.host + \"/events/\" + sessionId;\nconst send_url =\n  \"http://\" + window.location.host + \"/send/\" + sessionId;\nlet is_audio = false;\n</code></pre> <ul> <li>Random Session ID - Generates unique session ID for each browser instance</li> <li>URL Construction - Builds SSE and send endpoints with session ID</li> <li>Audio Mode Flag - Tracks whether audio mode is enabled</li> </ul>"},{"location":"streaming/custom-streaming.en/#server-sent-events-connection-appjs","title":"Server-Sent Events Connection (<code>app.js</code>)","text":"<p>connectSSE() function handles real-time server communication:</p> <pre><code>// SSE handlers\nfunction connectSSE() {\n  // Connect to SSE endpoint\n  eventSource = new EventSource(sse_url + \"?is_audio=\" + is_audio);\n\n  // Handle connection open\n  eventSource.onopen = function () {\n    // Connection opened messages\n    console.log(\"SSE connection opened.\");\n    document.getElementById(\"messages\").textContent = \"Connection opened\";\n\n    // Enable the Send button\n    document.getElementById(\"sendButton\").disabled = false;\n    addSubmitHandler();\n  };\n\n  // Handle incoming messages\n  eventSource.onmessage = function (event) {\n    ...\n  };\n\n  // Handle connection close\n  eventSource.onerror = function (event) {\n    console.log(\"SSE connection error or closed.\");\n    document.getElementById(\"sendButton\").disabled = true;\n    document.getElementById(\"messages\").textContent = \"Connection closed\";\n    eventSource.close();\n    setTimeout(function () {\n      console.log(\"Reconnecting...\");\n      connectSSE();\n    }, 5000);\n  };\n}\n</code></pre> <ul> <li>EventSource Setup - Creates SSE connection with audio mode parameter</li> <li>Connection Handlers:</li> <li>onopen - Enables send button and form submission when connected</li> <li>onmessage - Processes incoming messages from agent</li> <li>onerror - Handles disconnections with auto-reconnect after 5 seconds</li> </ul>"},{"location":"streaming/custom-streaming.en/#message-processing-appjs","title":"Message Processing (<code>app.js</code>)","text":"<p>Handles different message types from server:</p> <pre><code>  // Handle incoming messages\n  eventSource.onmessage = function (event) {\n    // Parse the incoming message\n    const message_from_server = JSON.parse(event.data);\n    console.log(\"[AGENT TO CLIENT] \", message_from_server);\n\n    // Check if the turn is complete\n    // if turn complete, add new message\n    if (\n      message_from_server.turn_complete &amp;&amp;\n      message_from_server.turn_complete == true\n    ) {\n      currentMessageId = null;\n      return;\n    }\n\n    // If it's audio, play it\n    if (message_from_server.mime_type == \"audio/pcm\" &amp;&amp; audioPlayerNode) {\n      audioPlayerNode.port.postMessage(base64ToArray(message_from_server.data));\n    }\n\n    // If it's a text, print it\n    if (message_from_server.mime_type == \"text/plain\") {\n      // add a new message for a new turn\n      if (currentMessageId == null) {\n        currentMessageId = Math.random().toString(36).substring(7);\n        const message = document.createElement(\"p\");\n        message.id = currentMessageId;\n        // Append the message element to the messagesDiv\n        messagesDiv.appendChild(message);\n      }\n\n      // Add message text to the existing message element\n      const message = document.getElementById(currentMessageId);\n      message.textContent += message_from_server.data;\n\n      // Scroll down to the bottom of the messagesDiv\n      messagesDiv.scrollTop = messagesDiv.scrollHeight;\n    }\n</code></pre> <ul> <li>Turn Management - Detects <code>turn_complete</code> to reset message state</li> <li>Audio Playback - Decodes Base64 PCM data and sends to audio worklet</li> <li>Text Display - Creates new message elements and appends partial text updates for real-time typing effect</li> </ul>"},{"location":"streaming/custom-streaming.en/#message-sending-appjs","title":"Message Sending (<code>app.js</code>)","text":"<p>sendMessage() function sends data to server:</p> <pre><code>async function sendMessage(message) {\n  try {\n    const response = await fetch(send_url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(message)\n    });\n\n    if (!response.ok) {\n      console.error('Failed to send message:', response.statusText);\n    }\n  } catch (error) {\n    console.error('Error sending message:', error);\n  }\n}\n</code></pre> <ul> <li>HTTP POST - Sends JSON payload to <code>/send/{session_id}</code> endpoint</li> <li>Error Handling - Logs failed requests and network errors</li> <li>Message Format - Standardized <code>{mime_type, data}</code> structure</li> </ul>"},{"location":"streaming/custom-streaming.en/#audio-player-staticjsaudio-playerjs","title":"Audio Player (<code>static/js/audio-player.js</code>)","text":"<p>startAudioPlayerWorklet() function:</p> <ul> <li>AudioContext Setup - Creates context with 24kHz sample rate for playback</li> <li>Worklet Loading - Loads PCM player processor for audio handling</li> <li>Audio Pipeline - Connects worklet node to audio destination (speakers)</li> </ul>"},{"location":"streaming/custom-streaming.en/#audio-recorder-staticjsaudio-recorderjs","title":"Audio Recorder (<code>static/js/audio-recorder.js</code>)","text":"<p>startAudioRecorderWorklet() function:</p> <ul> <li>AudioContext Setup - Creates context with 16kHz sample rate for recording</li> <li>Microphone Access - Requests user media permissions for audio input</li> <li>Audio Processing - Connects microphone to recorder worklet</li> <li>Data Conversion - Converts Float32 samples to 16-bit PCM format</li> </ul>"},{"location":"streaming/custom-streaming.en/#audio-worklet-processors","title":"Audio Worklet Processors","text":""},{"location":"streaming/custom-streaming.en/#pcm-player-processor-staticjspcm-player-processorjs","title":"PCM Player Processor (<code>static/js/pcm-player-processor.js</code>)","text":"<p>PCMPlayerProcessor class handles audio playback:</p> <ul> <li>Ring Buffer - Circular buffer for 180 seconds of 24kHz audio</li> <li>Data Ingestion - Converts Int16 to Float32 and stores in buffer</li> <li>Playback Loop - Continuously reads from buffer to output channels</li> <li>Overflow Handling - Overwrites oldest samples when buffer is full</li> </ul>"},{"location":"streaming/custom-streaming.en/#pcm-recorder-processor-staticjspcm-recorder-processorjs","title":"PCM Recorder Processor (<code>static/js/pcm-recorder-processor.js</code>)","text":"<p>PCMProcessor class captures microphone input:</p> <ul> <li>Audio Input - Processes incoming audio frames</li> <li>Data Transfer - Copies Float32 samples and posts to main thread via message port</li> </ul>"},{"location":"streaming/custom-streaming.en/#mode-switching","title":"Mode Switching:","text":"<ul> <li>Audio Activation - \"Start Audio\" button enables microphone and reconnects SSE with audio flag</li> <li>Seamless Transition - Closes existing connection and establishes new audio-enabled session</li> </ul> <p>The client architecture enables seamless real-time communication with both text and audio modalities, using modern web APIs for professional-grade audio processing.</p>"},{"location":"streaming/custom-streaming.en/#summary","title":"Summary","text":"<p>This application demonstrates a complete real-time AI agent system with the following key features:</p> <p>Architecture Highlights: - Real-time: Streaming responses with partial text updates and continuous audio - Robust: Comprehensive error handling and automatic recovery mechanisms - Modern: Uses latest web standards (AudioWorklet, SSE, ES6 modules)</p> <p>The system provides a foundation for building sophisticated AI applications that require real-time interaction, web search capabilities, and multimedia communication.</p>"},{"location":"streaming/custom-streaming.en/#next-steps-for-production","title":"Next steps for production","text":"<p>To deploy this system in a production environment, consider implementing the following improvements:</p>"},{"location":"streaming/custom-streaming.en/#security","title":"Security","text":"<ul> <li>Authentication: Replace random session IDs with proper user authentication</li> <li>API Key Security: Use environment variables or secret management services</li> <li>HTTPS: Enforce TLS encryption for all communications</li> <li>Rate Limiting: Prevent abuse and control API costs</li> </ul>"},{"location":"streaming/custom-streaming.en/#scalability","title":"Scalability","text":"<ul> <li>Persistent Storage: Replace in-memory sessions with a persistent session</li> <li>Load Balancing: Support multiple server instances with shared session state</li> <li>Audio Optimization: Implement compression to reduce bandwidth usage</li> </ul>"},{"location":"streaming/custom-streaming.en/#monitoring","title":"Monitoring","text":"<ul> <li>Error Tracking: Monitor and alert on system failures</li> <li>API Cost Monitoring: Track Google Search and Gemini usage to prevent budget overruns</li> <li>Performance Metrics: Monitor response times and audio latency</li> </ul>"},{"location":"streaming/custom-streaming.en/#infrastructure","title":"Infrastructure","text":"<ul> <li>Containerization: Package with Docker for consistent deployments with Cloud Run or Agent Engine</li> <li>Health Checks: Implement endpoint monitoring for uptime tracking</li> </ul>"},{"location":"streaming/custom-streaming/","title":"\u81ea\u8a02\u97f3\u8a0a\u4e32\u6d41\u61c9\u7528\u7a0b\u5f0f\uff08SSE\uff09","text":"<p>\u672c\u6587\u5c07\u6982\u8ff0\u4e00\u500b\u4ee5 Agent Development Kit (ADK) \u4e32\u6d41\u8207 FastAPI \u5efa\u7acb\u7684\u81ea\u8a02\u975e\u540c\u6b65\u7db2\u9801\u61c9\u7528\u7a0b\u5f0f\u7684\u4f3a\u670d\u5668\u8207\u7528\u6236\u7aef\u7a0b\u5f0f\u78bc\uff0c\u5be6\u73fe\u900f\u904e Server Sent Events (SSE) \u7684\u5373\u6642\u96d9\u5411\u8a9e\u97f3\u8207\u6587\u5b57\u901a\u8a0a\u3002\u5176\u4e3b\u8981\u7279\u8272\u5305\u62ec\uff1a</p> <p>\u4f3a\u670d\u5668\u7aef\uff08Python/FastAPI\uff09\uff1a - FastAPI \u8207 ADK \u6574\u5408 - \u4f7f\u7528 Server Sent Events (SSE) \u9032\u884c\u5373\u6642\u4e32\u6d41 - \u4ee5\u7368\u7acb\u4f7f\u7528\u8005 context \u9032\u884c session \u7ba1\u7406 - \u652f\u63f4\u6587\u5b57\u8207\u8a9e\u97f3\u96d9\u6a21\u5f0f\u901a\u8a0a - \u6574\u5408 Google Search \u5de5\u5177\u4ee5\u63d0\u4f9b\u77e5\u8b58\u63a5\u5730\uff08grounded\uff09\u56de\u61c9</p> <p>\u7528\u6236\u7aef\uff08JavaScript/Web Audio API\uff09\uff1a - \u900f\u904e SSE \u8207 HTTP POST \u5be6\u73fe\u5373\u6642\u96d9\u5411\u901a\u8a0a - \u4f7f\u7528 AudioWorklet \u8655\u7406\u5668\u9032\u884c\u5c08\u696d\u97f3\u8a0a\u8655\u7406 - \u53ef\u7121\u7e2b\u5207\u63db\u6587\u5b57\u8207\u8a9e\u97f3\u6a21\u5f0f - \u81ea\u52d5\u91cd\u65b0\u9023\u7dda\u8207\u932f\u8aa4\u8655\u7406 - \u97f3\u8a0a\u8cc7\u6599\u4ee5 Base64 \u7de8\u78bc\u50b3\u8f38</p> <p>\u6b64\u5916\uff0c\u4e5f\u63d0\u4f9b\u4e86 WebSocket \u7248\u672c\u7684\u7bc4\u4f8b\u3002</p>"},{"location":"streaming/custom-streaming/#1.-setup-installation","title":"1. \u5b89\u88dd ADK","text":"<p>\u5efa\u7acb\u4e26\u555f\u7528\u865b\u64ec\u74b0\u5883\uff08\u5efa\u8b70\uff09\uff1a</p> <pre><code># Create\npython -m venv .venv\n# Activate (each new terminal)\n# macOS/Linux: source .venv/bin/activate\n# Windows CMD: .venv\\Scripts\\activate.bat\n# Windows PowerShell: .venv\\Scripts\\Activate.ps1\n</code></pre> <p>\u5b89\u88dd Agent Development Kit (ADK)\uff1a</p> <pre><code>pip install --upgrade google-adk==1.10.0\n</code></pre> <p>\u8acb\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u8a2d\u5b9a <code>SSL_CERT_FILE</code> \u8b8a\u6578\u3002</p> <pre><code>export SSL_CERT_FILE=$(python -m certifi)\n</code></pre> <p>\u4e0b\u8f09\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\uff1a</p> <pre><code>git clone --no-checkout https://github.com/google/adk-docs.git\ncd adk-docs\ngit sparse-checkout init --cone\ngit sparse-checkout set examples/python/snippets/streaming/adk-streaming\ngit checkout main\ncd examples/python/snippets/streaming/adk-streaming/app\n</code></pre> <p>\u6b64\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u5305\u542b\u4ee5\u4e0b\u6a94\u6848\u8207\u8cc7\u6599\u593e\uff1a</p> <pre><code>adk-streaming/\n\u2514\u2500\u2500 app/ # the web app folder\n    \u251c\u2500\u2500 .env # Gemini API key / Google Cloud Project ID\n    \u251c\u2500\u2500 main.py # FastAPI web app\n    \u251c\u2500\u2500 static/ # Static content folder\n    |   \u251c\u2500\u2500 js # JavaScript files folder (includes app.js)\n    |   \u2514\u2500\u2500 index.html # The web client page\n    \u2514\u2500\u2500 google_search_agent/ # Agent folder\n        \u251c\u2500\u2500 __init__.py # Python package\n        \u2514\u2500\u2500 agent.py # Agent definition\n</code></pre>"},{"location":"streaming/custom-streaming/#2.-set-up-the-platform","title":"2. \u8a2d\u5b9a\u5e73\u53f0","text":"<p>\u8981\u57f7\u884c\u7bc4\u4f8b\u61c9\u7528\u7a0b\u5f0f\uff0c\u8acb\u5f9e Google AI Studio \u6216 Google Cloud Vertex AI \u4e2d\u9078\u64c7\u4e00\u500b\u5e73\u53f0\uff1a</p> Gemini - Google AI StudioGemini - Google Cloud Vertex AI <ol> <li>\u5f9e Google AI Studio \u53d6\u5f97 API \u91d1\u9470\u3002</li> <li> <p>\u958b\u555f\u4f4d\u65bc (<code>app/</code>) \u5167\u7684 <code>.env</code> \u6a94\u6848\uff0c\u4e26\u5c07\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u8907\u88fd\u8cbc\u4e0a\u3002</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=FALSE\nGOOGLE_API_KEY=PASTE_YOUR_ACTUAL_API_KEY_HERE\n</code></pre> </li> <li> <p>\u5c07 <code>PASTE_YOUR_ACTUAL_API_KEY_HERE</code> \u66ff\u63db\u70ba\u4f60\u5be6\u969b\u7684 <code>API KEY</code>\u3002</p> </li> </ol> <ol> <li>\u4f60\u9700\u8981\u4e00\u500b\u5df2\u5b58\u5728\u7684    Google Cloud \u5e33\u6236\u4ee5\u53ca\u4e00\u500b\u5c08\u6848\u3002<ul> <li>\u8a2d\u5b9a   Google Cloud \u5c08\u6848</li> <li>\u8a2d\u5b9a   gcloud CLI</li> <li>\u5728\u7d42\u7aef\u6a5f\u57f7\u884c <code>gcloud auth login</code>\uff0c\u4ee5\u9a57\u8b49 Google Cloud \u8eab\u5206\u3002</li> <li>\u555f\u7528 Vertex AI API\u3002</li> </ul> </li> <li> <p>\u958b\u555f\u4f4d\u65bc (<code>app/</code>) \u5167\u7684 <code>.env</code> \u6a94\u6848\u3002\u8907\u88fd\u4e26\u8cbc\u4e0a\u4e0b\u5217\u7a0b\u5f0f\u78bc\uff0c\u4e26\u66f4\u65b0\u5c08\u6848 ID \u8207 Location\u3002</p> .env<pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_CLOUD_PROJECT=PASTE_YOUR_ACTUAL_PROJECT_ID\nGOOGLE_CLOUD_LOCATION=us-central1\n</code></pre> </li> </ol>"},{"location":"streaming/custom-streaming/#3.-interact-with-your-streaming-app","title":"3. \u8207\u60a8\u7684\u4e32\u6d41\u61c9\u7528\u4e92\u52d5","text":"<p>1. \u5207\u63db\u5230\u6b63\u78ba\u7684\u76ee\u9304\uff1a</p> <p>\u70ba\u4e86\u6709\u6548\u57f7\u884c\u60a8\u7684 agent\uff0c\u8acb\u78ba\u4fdd\u60a8\u4f4d\u65bc app \u8cc7\u6599\u593e\uff08<code>adk-streaming/app</code>\uff09</p> <p>2. \u555f\u52d5 Fast API\uff1a\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u4ee5\u555f\u52d5\u547d\u4ee4\u5217\u4ecb\u9762\uff08Command Line Interface\uff09</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>3. \u4ee5\u6587\u5b57\u6a21\u5f0f\u5b58\u53d6\u61c9\u7528\u7a0b\u5f0f\uff1a \u7576\u61c9\u7528\u7a0b\u5f0f\u555f\u52d5\u5f8c\uff0c\u7d42\u7aef\u6a5f\u6703\u986f\u793a\u4e00\u500b\u672c\u6a5f URL\uff08\u4f8b\u5982\uff1ahttp://localhost:8000\uff09\u3002\u8acb\u9ede\u64ca\u9019\u500b\u9023\u7d50\uff0c\u5728\u700f\u89bd\u5668\u4e2d\u958b\u555f UI\u3002</p> <p>\u6b64\u6642\u4f60\u61c9\u8a72\u6703\u770b\u5230\u5982\u4e0b\u7684 UI \u756b\u9762\uff1a</p> <p></p> <p>\u8a66\u8457\u8a62\u554f\u4e00\u500b\u554f\u984c <code>What time is it now?</code>\u3002agent \u6703\u5229\u7528 Google Search \u56de\u7b54\u4f60\u7684\u554f\u984c\u3002\u4f60\u6703\u6ce8\u610f\u5230 UI \u6703\u4ee5\u4e32\u6d41\u6587\u5b57\u7684\u65b9\u5f0f\u986f\u793a agent \u7684\u56de\u61c9\u3002\u5373\u4f7f agent \u9084\u5728\u56de\u61c9\u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u96a8\u6642\u50b3\u9001\u8a0a\u606f\u7d66 agent\u3002\u9019\u5c55\u793a\u4e86 Agent Development Kit (ADK) Streaming \u7684\u96d9\u5411\u901a\u8a0a\u80fd\u529b\u3002</p> <p>4. \u4ee5\u8a9e\u97f3\u6a21\u5f0f\u5b58\u53d6\u61c9\u7528\u7a0b\u5f0f\uff1a \u73fe\u5728\u8acb\u9ede\u64ca <code>Start Audio</code> \u6309\u9215\u3002\u61c9\u7528\u7a0b\u5f0f\u6703\u4ee5\u8a9e\u97f3\u6a21\u5f0f\u91cd\u65b0\u9023\u7dda\u5230\u4f3a\u670d\u5668\uff0cUI \u9996\u6b21\u6703\u986f\u793a\u4ee5\u4e0b\u5c0d\u8a71\u6846\uff1a</p> <p></p> <p>\u9ede\u64ca <code>Allow while visiting the site</code>\uff0c\u4f60\u6703\u770b\u5230\u700f\u89bd\u5668\u9802\u7aef\u6703\u51fa\u73fe\u9ea5\u514b\u98a8\u5716\u793a\uff1a</p> <p></p> <p>\u73fe\u5728\u4f60\u53ef\u4ee5\u7528\u8a9e\u97f3\u8207 agent \u5c0d\u8a71\u3002\u8acb\u7528\u8a9e\u97f3\u8a62\u554f\u50cf\u662f <code>What time is it now?</code> \u9019\u6a23\u7684\u554f\u984c\uff0c\u4f60\u4e5f\u6703\u807d\u5230 agent \u4ee5\u8a9e\u97f3\u56de\u61c9\u4f60\u3002\u7531\u65bc ADK Streaming \u652f\u63f4\u591a\u7a2e\u8a9e\u8a00\uff0c\u5b83\u4e5f\u80fd\u4ee5\u652f\u63f4\u7684\u8a9e\u8a00\u56de\u7b54\u4f60\u7684\u554f\u984c\u3002</p> <p>5. \u6aa2\u67e5\u4e3b\u63a7\u53f0\u65e5\u8a8c</p> <p>\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Chrome \u700f\u89bd\u5668\uff0c\u8acb\u6309\u53f3\u9375\u4e26\u9078\u64c7 <code>Inspect</code> \u4ee5\u958b\u555f DevTools\u3002\u5728 <code>Console</code> \u4e0a\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u5982 <code>[CLIENT TO AGENT]</code> \u548c <code>[AGENT TO CLIENT]</code> \u9019\u6a23\u7684\u9032\u51fa\u97f3\u8a0a\u8cc7\u6599\uff0c\u9019\u4ee3\u8868\u700f\u89bd\u5668\u8207\u4f3a\u670d\u5668\u4e4b\u9593\u7684\u97f3\u8a0a\u8cc7\u6599\u6b63\u5728\u4e32\u6d41\u50b3\u8f38\u3002</p> <p>\u540c\u6642\uff0c\u5728\u61c9\u7528\u7a0b\u5f0f\u4f3a\u670d\u5668\u7684\u4e3b\u63a7\u53f0\u4e2d\uff0c\u4f60\u4e5f\u61c9\u8a72\u6703\u770b\u5230\u985e\u4f3c\u4ee5\u4e0b\u7684\u5167\u5bb9\uff1a</p> <pre><code>Client #90766266 connected via SSE, audio mode: false\nINFO:     127.0.0.1:52692 - \"GET /events/90766266?is_audio=false HTTP/1.1\" 200 OK\n[CLIENT TO AGENT]: hi\nINFO:     127.0.0.1:52696 - \"POST /send/90766266 HTTP/1.1\" 200 OK\n[AGENT TO CLIENT]: text/plain: {'mime_type': 'text/plain', 'data': 'Hi'}\n[AGENT TO CLIENT]: text/plain: {'mime_type': 'text/plain', 'data': ' there! How can I help you today?\\n'}\n[AGENT TO CLIENT]: {'turn_complete': True, 'interrupted': None}\n</code></pre> <p>\u9019\u4e9b\u4e3b\u63a7\u53f0\u65e5\u8a8c\u5c0d\u65bc\u958b\u767c\u60a8\u81ea\u5df1\u7684\u4e32\u6d41\u61c9\u7528\u7a0b\u5f0f\u6642\u975e\u5e38\u91cd\u8981\u3002\u5728\u8a31\u591a\u60c5\u6cc1\u4e0b\uff0c\u700f\u89bd\u5668\u8207\u4f3a\u670d\u5668\u4e4b\u9593\u7684\u901a\u8a0a\u5931\u6557\uff0c\u5f80\u5f80\u662f\u4e32\u6d41\u61c9\u7528\u7a0b\u5f0f\u932f\u8aa4\u7684\u4e3b\u8981\u539f\u56e0\u3002</p> <p>6. \u7591\u96e3\u6392\u89e3\u63d0\u793a</p> <ul> <li>\u7576\u60a8\u7684\u700f\u89bd\u5668\u7121\u6cd5\u900f\u904e SSH proxy \u9023\u7dda\u5230\u4f3a\u670d\u5668\u6642\uff1a \u5404\u7a2e\u96f2\u7aef\u670d\u52d9\u4e2d\u4f7f\u7528\u7684 SSH proxy \u53ef\u80fd\u7121\u6cd5\u8207 Server Sent Events (SSE) \u642d\u914d\u904b\u4f5c\u3002\u8acb\u5617\u8a66\u4e0d\u4f7f\u7528 SSH proxy\uff0c\u4f8b\u5982\u76f4\u63a5\u4f7f\u7528\u672c\u6a5f\u7b46\u8a18\u578b\u96fb\u8166\uff0c\u6216\u6539\u7528 WebSocket \u7248\u672c\u3002</li> <li>\u7576 <code>gemini-2.0-flash-exp</code> \u6a21\u578b\u7121\u6cd5\u904b\u4f5c\u6642\uff1a \u5982\u679c\u60a8\u5728\u61c9\u7528\u7a0b\u5f0f\u4f3a\u670d\u5668\u4e3b\u63a7\u53f0\u4e0a\u770b\u5230\u8207 <code>gemini-2.0-flash-exp</code> \u6a21\u578b\u53ef\u7528\u6027\u76f8\u95dc\u7684\u932f\u8aa4\uff0c\u8acb\u5617\u8a66\u5c07\u5176\u66ff\u63db\u70ba <code>gemini-2.0-flash-live-001</code>\uff0c\u4e26\u65bc <code>app/google_search_agent/agent.py</code> \u7684\u7b2c 6 \u884c\u9032\u884c\u66f4\u63db\u3002</li> </ul>"},{"location":"streaming/custom-streaming/#4-agent","title":"4. agent \u5b9a\u7fa9","text":"<p><code>google_search_agent</code> \u8cc7\u6599\u593e\u4e2d\u7684 agent \u5b9a\u7fa9\u7a0b\u5f0f\u78bc <code>agent.py</code> \u662f\u64b0\u5beb agent \u908f\u8f2f\u7684\u5730\u65b9\uff1a</p> <pre><code>from google.adk.agents import Agent\nfrom google.adk.tools import google_search  # Import the tool\n\nroot_agent = Agent(\n   name=\"google_search_agent\",\n   model=\"gemini-2.0-flash-exp\", # if this model does not work, try below\n   #model=\"gemini-2.0-flash-live-001\",\n   description=\"Agent to answer questions using Google Search.\",\n   instruction=\"Answer the question using the Google Search tool.\",\n   tools=[google_search],\n)\n</code></pre> <p>\u8acb\u6ce8\u610f\uff0c\u4f60\u5df2\u7d93\u8f15\u9b06\u6574\u5408\u4e86\u77e5\u8b58\u63a5\u5730 (grounding) \u8207 Google Search\u7684\u80fd\u529b\u3002<code>Agent</code> \u985e\u5225\u8207 <code>google_search</code> \u5de5\u5177\u8ca0\u8cac\u8655\u7406\u8207\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u53ca Google Search API \u9032\u884c\u77e5\u8b58\u63a5\u5730\u7684\u8907\u96dc\u4e92\u52d5\uff0c\u8b93\u4f60\u80fd\u5c08\u6ce8\u65bc agent \u7684\u76ee\u7684\u8207\u884c\u70ba\u3002</p> <p></p> <p>\u4f3a\u670d\u5668\u8207\u7528\u6236\u7aef\u67b6\u69cb\u53ef\u5be6\u73fe\u7db2\u9801\u7528\u6236\u7aef\u8207 AI agent \u4e4b\u9593\u7684\u5373\u6642\u96d9\u5411\u901a\u8a0a\uff0c\u4e26\u5177\u5099\u5b8c\u5584\u7684 session \u9694\u96e2\u8207\u8cc7\u6e90\u7ba1\u7406\u3002</p>"},{"location":"streaming/custom-streaming/#5.-server-side-code-overview","title":"5. \u4f3a\u670d\u5668\u7aef\u7a0b\u5f0f\u78bc\u6982\u89bd","text":"<p>FastAPI \u4f3a\u670d\u5668\u63d0\u4f9b\u7db2\u9801\u7528\u6236\u7aef\u8207 AI agent \u4e4b\u9593\u7684\u5373\u6642\u901a\u8a0a\u3002</p>"},{"location":"streaming/custom-streaming/#4.-bidi-comm-overview","title":"\u96d9\u5411\u901a\u8a0a\u6982\u89bd","text":""},{"location":"streaming/custom-streaming/#agent","title":"\u7528\u6236\u7aef\u5230 agent \u7684\u6d41\u7a0b\uff1a","text":"<ol> <li>\u5efa\u7acb\u9023\u7dda \u2014 \u7528\u6236\u7aef\u958b\u555f SSE \u9023\u7dda\u81f3 <code>/events/{user_id}</code>\uff0c\u89f8\u767c session \u5efa\u7acb\uff0c\u4e26\u5c07\u8acb\u6c42\u4f47\u5217\u5132\u5b58\u5728 <code>active_sessions</code></li> <li>\u8a0a\u606f\u50b3\u9001 \u2014 \u7528\u6236\u7aef\u4ee5 POST \u8acb\u6c42\u50b3\u9001\u81f3 <code>/send/{user_id}</code>\uff0c\u4e26\u9644\u5e36\u5305\u542b <code>mime_type</code> \u8207 <code>data</code> \u7684 JSON \u8f09\u8377</li> <li>\u4f47\u5217\u8655\u7406 \u2014 \u4f3a\u670d\u5668\u53d6\u5f97\u8a72 session \u7684 <code>live_request_queue</code>\uff0c\u4e26\u900f\u904e <code>send_content()</code> \u6216 <code>send_realtime()</code> \u5c07\u8a0a\u606f\u8f49\u767c\u7d66 agent</li> </ol>"},{"location":"streaming/custom-streaming/#agent_1","title":"agent \u5230\u7528\u6236\u7aef\u7684\u6d41\u7a0b\uff1a","text":"<ol> <li>\u4e8b\u4ef6\u7522\u751f \u2014 agent \u8655\u7406\u8acb\u6c42\u4e26\u900f\u904e <code>live_events</code> \u975e\u540c\u6b65\u7522\u751f\u5668 (async generator) \u7522\u751f\u4e8b\u4ef6</li> <li>\u4e32\u6d41\u8655\u7406 \u2014 <code>agent_to_client_sse()</code> \u904e\u6ffe\u4e8b\u4ef6\u4e26\u5c07\u5176\u683c\u5f0f\u5316\u70ba SSE \u76f8\u5bb9\u7684 JSON</li> <li>\u5373\u6642\u50b3\u905e \u2014 \u4e8b\u4ef6\u7d93\u7531\u6301\u4e45\u5316 HTTP \u9023\u7dda\u4e26\u642d\u914d\u6b63\u78ba\u7684 SSE \u6a19\u982d\u4e32\u6d41\u81f3\u7528\u6236\u7aef</li> </ol>"},{"location":"streaming/custom-streaming/#session","title":"Session \u7ba1\u7406\uff1a","text":"<ul> <li>\u6bcf\u4f4d\u7528\u6236\u9694\u96e2 \u2014 \u6bcf\u4f4d\u7528\u6236\u90fd\u64c1\u6709\u7368\u7acb\u7684 session\uff0c\u4e26\u5132\u5b58\u5728 <code>active_sessions</code> \u5b57\u5178\u4e2d</li> <li>\u751f\u547d\u9031\u671f\u7ba1\u7406 \u2014 \u65b7\u7dda\u6642 session \u6703\u81ea\u52d5\u6e05\u7406\u4e26\u6b63\u78ba\u91cb\u653e\u8cc7\u6e90</li> <li>\u540c\u6642\u652f\u63f4 \u2014 \u591a\u4f4d\u7528\u6236\u53ef\u540c\u6642\u64c1\u6709\u6d3b\u8e8d session</li> </ul>"},{"location":"streaming/custom-streaming/#_1","title":"\u932f\u8aa4\u8655\u7406\uff1a","text":"<ul> <li>Session \u9a57\u8b49 \u2014 POST \u8acb\u6c42\u5728\u8655\u7406\u524d\u6703\u9a57\u8b49 session \u662f\u5426\u5b58\u5728</li> <li>\u4e32\u6d41\u97cc\u6027 \u2014 SSE \u4e32\u6d41\u53ef\u81ea\u52d5\u8655\u7406\u4f8b\u5916\u4e26\u9032\u884c\u6e05\u7406</li> <li>\u9023\u7dda\u6062\u5fa9 \u2014 \u7528\u6236\u7aef\u53ef\u900f\u904e\u91cd\u65b0\u5efa\u7acb SSE \u9023\u7dda\u4f86\u91cd\u65b0\u9023\u63a5</li> </ul>"},{"location":"streaming/custom-streaming/#session_1","title":"Session \u6062\u5fa9\uff1a","text":"<ul> <li>\u5373\u6642 session \u6062\u5fa9 \u2014 \u652f\u63f4\u4e2d\u65b7\u5f8c\u900f\u660e\u5730\u91cd\u65b0\u9023\u63a5\u5373\u6642\u5c0d\u8a71</li> <li>Handle \u5feb\u53d6 \u2014 \u7cfb\u7d71\u6703\u81ea\u52d5\u5feb\u53d6 session handle \u4ee5\u5229\u6062\u5fa9</li> <li>\u53ef\u9760\u6027\u63d0\u5347 \u2014 \u589e\u5f37\u4e32\u6d41\u904e\u7a0b\u4e2d\u5c0d\u7db2\u8def\u4e0d\u7a69\u5b9a\u7684\u97cc\u6027</li> </ul>"},{"location":"streaming/custom-streaming/#agent-session","title":"agent Session \u7ba1\u7406","text":"<p><code>start_agent_session()</code> \u51fd\u5f0f\u53ef\u5efa\u7acb\u9694\u96e2\u7684 AI agent session\uff1a</p> <pre><code>async def start_agent_session(user_id, is_audio=False):\n    \"\"\"Starts an agent session\"\"\"\n\n    # Create a Runner\n    runner = InMemoryRunner(\n        app_name=APP_NAME,\n        agent=root_agent,\n    )\n\n    # Create a Session\n    session = await runner.session_service.create_session(\n        app_name=APP_NAME,\n        user_id=user_id,  # Replace with actual user ID\n    )\n\n    # Set response modality\n    modality = \"AUDIO\" if is_audio else \"TEXT\"\n    run_config = RunConfig(response_modalities=[modality])\n\n    # Optional: Enable session resumption for improved reliability\n    # run_config = RunConfig(\n    #     response_modalities=[modality],\n    #     session_resumption=types.SessionResumptionConfig()\n    # )\n\n    # Create a LiveRequestQueue for this session\n    live_request_queue = LiveRequestQueue()\n\n    # Start agent session\n    live_events = runner.run_live(\n        session=session,\n        live_request_queue=live_request_queue,\n        run_config=run_config,\n    )\n    return live_events, live_request_queue\n</code></pre> <ul> <li> <p>InMemoryRunner \u8a2d\u5b9a - \u5efa\u7acb\u4e00\u500b Runner \u5be6\u4f8b\uff0c\u5728\u8a18\u61b6\u9ad4\u4e2d\u7ba1\u7406 agent \u7684\u751f\u547d\u9031\u671f\uff0c\u61c9\u7528\u7a0b\u5f0f\u540d\u7a31\u70ba \"ADK Streaming example\"\uff0c\u4e26\u4f7f\u7528 Google Search agent\u3002</p> </li> <li> <p>Session \u5efa\u7acb - \u4f7f\u7528 <code>runner.session_service.create_session()</code> \u4f9d\u64da\u4f7f\u7528\u8005 ID \u5efa\u7acb\u7368\u7acb\u7684 session\uff0c\u652f\u63f4\u591a\u4f4d\u4f7f\u7528\u8005\u540c\u6642\u4e26\u884c\u3002</p> </li> <li> <p>\u56de\u61c9\u6a21\u614b\uff08Response Modality\uff09\u8a2d\u5b9a - \u6839\u64da <code>is_audio</code> \u53c3\u6578\uff0c\u5c07 <code>RunConfig</code> \u8a2d\u5b9a\u70ba \"AUDIO\" \u6216 \"TEXT\" \u6a21\u614b\uff0c\u4ee5\u6c7a\u5b9a\u8f38\u51fa\u683c\u5f0f\u3002</p> </li> <li> <p>LiveRequestQueue - \u5efa\u7acb\u4e00\u500b\u96d9\u5411\u901a\u8a0a\u901a\u9053\uff0c\u8ca0\u8cac\u4f47\u5217\u5316\u9032\u5165\u7684\u8acb\u6c42\uff0c\u4e26\u5be6\u73fe client \u8207 agent \u4e4b\u9593\u7684\u5373\u6642\u8a0a\u606f\u50b3\u905e\u3002</p> </li> <li> <p>Live Events Stream - <code>runner.run_live()</code> \u6703\u56de\u50b3\u4e00\u500b async generator\uff0c\u6301\u7e8c\u7522\u751f agent \u7684\u5373\u6642\u4e8b\u4ef6\uff0c\u5305\u62ec\u90e8\u5206\u56de\u61c9\u3001\u56de\u5408\u5b8c\u6210\u4ee5\u53ca\u4e2d\u65b7\u7b49\u3002</p> </li> </ul>"},{"location":"streaming/custom-streaming/#server-sent-events-sse","title":"Server-Sent Events (SSE) \u4e32\u6d41","text":"<p><code>agent_to_client_sse()</code> \u51fd\u5f0f\u8ca0\u8cac\u8655\u7406 agent \u5230 client \u7684\u5373\u6642\u4e32\u6d41\uff1a</p> <pre><code>async def agent_to_client_sse(live_events):\n    \"\"\"Agent to client communication via SSE\"\"\"\n    async for event in live_events:\n        # If the turn complete or interrupted, send it\n        if event.turn_complete or event.interrupted:\n            message = {\n                \"turn_complete\": event.turn_complete,\n                \"interrupted\": event.interrupted,\n            }\n            yield f\"data: {json.dumps(message)}\\n\\n\"\n            print(f\"[AGENT TO CLIENT]: {message}\")\n            continue\n\n        # Read the Content and its first Part\n        part: Part = (\n            event.content and event.content.parts and event.content.parts[0]\n        )\n        if not part:\n            continue\n\n        # If it's audio, send Base64 encoded audio data\n        is_audio = part.inline_data and part.inline_data.mime_type.startswith(\"audio/pcm\")\n        if is_audio:\n            audio_data = part.inline_data and part.inline_data.data\n            if audio_data:\n                message = {\n                    \"mime_type\": \"audio/pcm\",\n                    \"data\": base64.b64encode(audio_data).decode(\"ascii\")\n                }\n                yield f\"data: {json.dumps(message)}\\n\\n\"\n                print(f\"[AGENT TO CLIENT]: audio/pcm: {len(audio_data)} bytes.\")\n                continue\n\n        # If it's text and a parial text, send it\n        if part.text and event.partial:\n            message = {\n                \"mime_type\": \"text/plain\",\n                \"data\": part.text\n            }\n            yield f\"data: {json.dumps(message)}\\n\\n\"\n            print(f\"[AGENT TO CLIENT]: text/plain: {message}\")\n</code></pre> <ul> <li> <p>\u4e8b\u4ef6\u8655\u7406\u8ff4\u5708\uff08Event Processing Loop\uff09 - \u900f\u904e<code>live_events</code> async generator \u9032\u884c\u8fed\u4ee3\uff0c\u96a8\u8457 agent \u50b3\u4f86\u6bcf\u500b\u4e8b\u4ef6\u5373\u6642\u8655\u7406\u3002</p> </li> <li> <p>\u56de\u5408\u7ba1\u7406\uff08Turn Management\uff09  - \u5075\u6e2c\u5c0d\u8a71\u56de\u5408\u5b8c\u6210\u6216\u4e2d\u65b7\u4e8b\u4ef6\uff0c\u4e26\u50b3\u9001\u5e36\u6709<code>turn_complete</code>\u8207<code>interrupted</code>\u6a19\u8a18\u7684 JSON \u8a0a\u606f\uff0c\u4ee5\u901a\u77e5\u5c0d\u8a71\u72c0\u614b\u8b8a\u5316\u3002</p> </li> <li> <p>\u5167\u5bb9\u7247\u6bb5\u64f7\u53d6\uff08Content Part Extraction\uff09 - \u5f9e\u4e8b\u4ef6\u5167\u5bb9\u4e2d\u64f7\u53d6\u7b2c\u4e00\u500b<code>Part</code>\uff0c\u5176\u5167\u5305\u542b\u6587\u5b57\u6216\u8a9e\u97f3\u8cc7\u6599\u3002</p> </li> <li> <p>\u8a9e\u97f3\u4e32\u6d41\uff08Audio Streaming\uff09  - \u8655\u7406 PCM \u8a9e\u97f3\u8cc7\u6599\uff0c\u6b65\u9a5f\u5982\u4e0b\uff1a</p> </li> <li>\u5075\u6e2c<code>audio/pcm</code> MIME \u985e\u578b\u65bc<code>inline_data</code>\u4e2d</li> <li>\u5c07\u539f\u59cb\u8a9e\u97f3\u4f4d\u5143\u7d44\u4ee5 Base64 \u7de8\u78bc\uff0c\u4fbf\u65bc JSON \u50b3\u8f38</li> <li> <p>\u4ee5<code>mime_type</code>\u8207<code>data</code>\u6b04\u4f4d\u50b3\u9001</p> </li> <li> <p>\u6587\u5b57\u4e32\u6d41\uff08Text Streaming\uff09  - \u8655\u7406\u90e8\u5206\u6587\u5b57\u56de\u61c9\uff0c\u96a8\u751f\u6210\u5373\u6642\u50b3\u9001\u589e\u91cf\u6587\u5b57\u66f4\u65b0\uff0c\u5be6\u73fe\u5373\u6642\u8f38\u5165\u6548\u679c\u3002</p> </li> <li> <p>SSE \u683c\u5f0f - \u6240\u6709\u8cc7\u6599\u7686\u4f9d\u7167 Server Sent Events (SSE) \u898f\u7bc4\u683c\u5f0f\u5316\u70ba<code>data: {json}\\n\\n</code>\uff0c\u4ee5\u76f8\u5bb9\u700f\u89bd\u5668 EventSource API\u3002</p> </li> </ul>"},{"location":"streaming/custom-streaming/#http","title":"HTTP \u7aef\u9ede\u8207\u8def\u7531","text":""},{"location":"streaming/custom-streaming/#root-endpoint","title":"\u6839\u7aef\u9ede\uff08Root Endpoint\uff09","text":"<p>GET / - \u4ee5 FastAPI \u7684<code>FileResponse</code>\u4f5c\u70ba\u4e3b\u8981\u61c9\u7528\u4ecb\u9762\uff0c\u63d0\u4f9b<code>static/index.html</code>\u3002</p>"},{"location":"streaming/custom-streaming/#sse-sse-events-endpoint","title":"SSE \u4e8b\u4ef6\u7aef\u9ede\uff08SSE Events Endpoint\uff09","text":"<pre><code>@app.get(\"/events/{user_id}\")\nasync def sse_endpoint(user_id: int, is_audio: str = \"false\"):\n    \"\"\"SSE endpoint for agent to client communication\"\"\"\n\n    # Start agent session\n    user_id_str = str(user_id)\n    live_events, live_request_queue = await start_agent_session(user_id_str, is_audio == \"true\")\n\n    # Store the request queue for this user\n    active_sessions[user_id_str] = live_request_queue\n\n    print(f\"Client #{user_id} connected via SSE, audio mode: {is_audio}\")\n\n    def cleanup():\n        live_request_queue.close()\n        if user_id_str in active_sessions:\n            del active_sessions[user_id_str]\n        print(f\"Client #{user_id} disconnected from SSE\")\n\n    async def event_generator():\n        try:\n            async for data in agent_to_client_sse(live_events):\n                yield data\n        except Exception as e:\n            print(f\"Error in SSE stream: {e}\")\n        finally:\n            cleanup()\n\n    return StreamingResponse(\n        event_generator(),\n        media_type=\"text/event-stream\",\n        headers={\n            \"Cache-Control\": \"no-cache\",\n            \"Connection\": \"keep-alive\",\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Headers\": \"Cache-Control\"\n        }\n    )\n</code></pre> <p>GET /events/{user_id} - \u5efa\u7acb\u6301\u4e45\u6027\u7684 Server Sent Events (SSE) \u9023\u7dda\uff1a</p> <ul> <li> <p>\u53c3\u6578 - \u63a5\u6536 <code>user_id</code>\uff08int\uff09\u4ee5\u53ca\u53ef\u9078\u7684 <code>is_audio</code> \u67e5\u8a62\u53c3\u6578\uff08\u9810\u8a2d\u70ba \"false\"\uff09</p> </li> <li> <p>Session \u521d\u59cb\u5316 - \u547c\u53eb <code>start_agent_session()</code>\uff0c\u4e26\u5c07 <code>live_request_queue</code> \u5132\u5b58\u5230 <code>active_sessions</code> dict\uff0c\u4f7f\u7528 <code>user_id</code> \u4f5c\u70ba key</p> </li> <li> <p>StreamingResponse - \u56de\u50b3 <code>StreamingResponse</code>\uff0c\u5167\u5bb9\u5305\u542b\uff1a</p> </li> <li>\u5305\u88dd <code>agent_to_client_sse()</code> \u7684 <code>event_generator()</code> async \u51fd\u5f0f</li> <li>MIME \u985e\u578b\uff1a<code>text/event-stream</code></li> <li>\u63d0\u4f9b\u8de8\u4f86\u6e90\u5b58\u53d6\uff08CORS\uff09\u6a19\u982d</li> <li> <p>\u8a2d\u5b9a Cache-control \u6a19\u982d\u4ee5\u9632\u6b62\u5feb\u53d6</p> </li> <li> <p>\u6e05\u7406\u908f\u8f2f - \u8655\u7406\u9023\u7dda\u7d42\u6b62\u6642\uff0c\u6703\u95dc\u9589\u8acb\u6c42\u4f47\u5217\u4e26\u5f9e\u73fe\u6709 session \u4e2d\u79fb\u9664\uff0c\u4e26\u91dd\u5c0d\u4e32\u6d41\u4e2d\u65b7\u9032\u884c\u932f\u8aa4\u8655\u7406\u3002</p> </li> </ul>"},{"location":"streaming/custom-streaming/#session-resumption","title":"Session Resumption \u8a2d\u5b9a","text":"<p>Agent Development Kit (ADK) \u652f\u63f4\u5373\u6642 session \u6062\u5fa9\uff0c\u4ee5\u63d0\u5347\u4e32\u6d41\u5c0d\u8a71\u904e\u7a0b\u4e2d\u7684\u53ef\u9760\u6027\u3002\u6b64\u529f\u80fd\u53ef\u5728\u56e0\u7db2\u8def\u554f\u984c\u5c0e\u81f4\u5373\u6642\u9023\u7dda\u4e2d\u65b7\u6642\uff0c\u81ea\u52d5\u91cd\u65b0\u9023\u7dda\u3002</p>"},{"location":"streaming/custom-streaming/#session-resumption_1","title":"\u555f\u7528 Session Resumption","text":"<p>\u82e5\u8981\u555f\u7528 session resumption\uff0c\u4f60\u9700\u8981\uff1a</p> <ol> <li> <p>\u532f\u5165\u6240\u9700\u578b\u5225\uff1a <pre><code>from google.genai import types\n</code></pre></p> </li> <li> <p>\u5728 RunConfig \u4e2d\u8a2d\u5b9a session resumption\uff08\u6703\u8a71\u6062\u5fa9\uff09\u529f\u80fd\uff1a <pre><code>run_config = RunConfig(\n    response_modalities=[modality],\n    session_resumption=types.SessionResumptionConfig()\n)\n</code></pre></p> </li> </ol>"},{"location":"streaming/custom-streaming/#session-resumption_2","title":"Session Resumption \u529f\u80fd","text":"<ul> <li>\u81ea\u52d5 Handle \u5feb\u53d6 - \u7cfb\u7d71\u6703\u5728\u5373\u6642\u5c0d\u8a71\u671f\u9593\u81ea\u52d5\u5feb\u53d6 session resumption handle</li> <li>\u900f\u660e\u5316\u91cd\u65b0\u9023\u7dda - \u7576\u9023\u7dda\u4e2d\u65b7\u6642\uff0c\u7cfb\u7d71\u6703\u5617\u8a66\u4f7f\u7528\u5df2\u5feb\u53d6\u7684 handle \u4f86\u6062\u5fa9\u6703\u8a71</li> <li>\u4e0a\u4e0b\u6587\u4fdd\u7559 - \u5c0d\u8a71\u7684\u4e0a\u4e0b\u6587\u8207\u72c0\u614b\u6703\u5728\u91cd\u65b0\u9023\u7dda\u6642\u88ab\u4fdd\u7559</li> <li>\u7db2\u8def\u97cc\u6027 - \u5728\u7db2\u8def\u4e0d\u7a69\u5b9a\u7684\u60c5\u6cc1\u4e0b\uff0c\u80fd\u63d0\u4f9b\u66f4\u4f73\u7684\u4f7f\u7528\u8005\u9ad4\u9a57</li> </ul>"},{"location":"streaming/custom-streaming/#_2","title":"\u5be6\u4f5c\u8aaa\u660e","text":"<ul> <li>session resumption handle \u7531 Agent Development Kit (ADK) \u6846\u67b6\u65bc\u5167\u90e8\u81ea\u52d5\u7ba1\u7406</li> <li>\u4e0d\u9700\u8981\u984d\u5916\u4fee\u6539 client \u7aef\u7a0b\u5f0f\u78bc</li> <li>\u6b64\u529f\u80fd\u5c0d\u65bc\u9577\u6642\u9593\u904b\u884c\u7684\u4e32\u6d41\u5c0d\u8a71\u7279\u5225\u6709\u5e6b\u52a9</li> <li>\u9023\u7dda\u4e2d\u65b7\u5c0d\u4f7f\u7528\u8005\u9ad4\u9a57\u7684\u5f71\u97ff\u6703\u5927\u5e45\u964d\u4f4e</li> </ul>"},{"location":"streaming/custom-streaming/#_3","title":"\u7591\u96e3\u6392\u89e3","text":"<p>\u5982\u679c\u60a8\u9047\u5230 session resumption \u76f8\u95dc\u932f\u8aa4\uff1a</p> <ol> <li>\u6aa2\u67e5\u6a21\u578b\u76f8\u5bb9\u6027 - \u8acb\u78ba\u8a8d\u60a8\u6240\u4f7f\u7528\u7684\u6a21\u578b\u652f\u63f4 session resumption</li> <li>API \u9650\u5236 - \u90e8\u5206 session resumption \u529f\u80fd\u53ef\u80fd\u4e0d\u9069\u7528\u65bc\u6240\u6709 API \u7248\u672c</li> <li>\u79fb\u9664 session resumption - \u82e5\u554f\u984c\u6301\u7e8c\u767c\u751f\uff0c\u60a8\u53ef\u4ee5\u900f\u904e\u5f9e <code>RunConfig</code> \u4e2d\u79fb\u9664 <code>session_resumption</code> \u53c3\u6578\u4f86\u505c\u7528 session resumption</li> </ol>"},{"location":"streaming/custom-streaming/#_4","title":"\u8a0a\u606f\u50b3\u9001\u7aef\u9ede","text":"<pre><code>@app.post(\"/send/{user_id}\")\nasync def send_message_endpoint(user_id: int, request: Request):\n    \"\"\"HTTP endpoint for client to agent communication\"\"\"\n\n    user_id_str = str(user_id)\n\n    # Get the live request queue for this user\n    live_request_queue = active_sessions.get(user_id_str)\n    if not live_request_queue:\n        return {\"error\": \"Session not found\"}\n\n    # Parse the message\n    message = await request.json()\n    mime_type = message[\"mime_type\"]\n    data = message[\"data\"]\n\n    # Send the message to the agent\n    if mime_type == \"text/plain\":\n        content = Content(role=\"user\", parts=[Part.from_text(text=data)])\n        live_request_queue.send_content(content=content)\n        print(f\"[CLIENT TO AGENT]: {data}\")\n    elif mime_type == \"audio/pcm\":\n        decoded_data = base64.b64decode(data)\n        live_request_queue.send_realtime(Blob(data=decoded_data, mime_type=mime_type))\n        print(f\"[CLIENT TO AGENT]: audio/pcm: {len(decoded_data)} bytes\")\n    else:\n        return {\"error\": f\"Mime type not supported: {mime_type}\"}\n\n    return {\"status\": \"sent\"}\n</code></pre> <p>POST /send/{user_id} - \u63a5\u6536\u7528\u6236\u7aef\u8a0a\u606f\uff1a</p> <ul> <li> <p>Session \u67e5\u8a62 - \u5f9e <code>active_sessions</code> \u53d6\u5f97 <code>live_request_queue</code>\uff0c\u82e5 session \u4e0d\u5b58\u5728\u5247\u56de\u50b3\u932f\u8aa4</p> </li> <li> <p>\u8a0a\u606f\u8655\u7406 - \u89e3\u6790\u5305\u542b <code>mime_type</code> \u8207 <code>data</code> \u6b04\u4f4d\u7684 JSON\uff1a</p> </li> <li>\u6587\u5b57\u8a0a\u606f - \u5efa\u7acb <code>Content</code>\uff0c\u5e36\u5165 <code>Part.from_text()</code>\uff0c\u4e26\u900f\u904e <code>send_content()</code> \u50b3\u9001</li> <li> <p>\u8a9e\u97f3\u8a0a\u606f - \u5c07 PCM \u8cc7\u6599\u9032\u884c Base64 \u89e3\u78bc\uff0c\u4e26\u900f\u904e <code>send_realtime()</code> \u642d\u914d <code>Blob</code> \u50b3\u9001</p> </li> <li> <p>\u932f\u8aa4\u8655\u7406 - \u82e5 MIME \u985e\u578b\u4e0d\u652f\u63f4\u6216 session \u907a\u5931\uff0c\u5247\u56de\u50b3\u9069\u7576\u7684\u932f\u8aa4\u56de\u61c9\u3002</p> </li> </ul>"},{"location":"streaming/custom-streaming/#6.-client-side-code-overview","title":"6. \u7528\u6236\u7aef\u7a0b\u5f0f\u78bc\u6982\u89bd","text":"<p>\u7528\u6236\u7aef\u7531\u4e00\u500b\u5177\u5099\u5373\u6642\u901a\u8a0a\u8207\u8a9e\u97f3\u529f\u80fd\u7684\u7db2\u9801\u4ecb\u9762\u7d44\u6210\uff1a</p>"},{"location":"streaming/custom-streaming/#html-staticindexhtml","title":"HTML \u4ecb\u9762 (<code>static/index.html</code>)","text":"<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;ADK Streaming Test (Audio)&lt;/title&gt;\n    &lt;script src=\"/static/js/app.js\" type=\"module\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;h1&gt;ADK Streaming Test&lt;/h1&gt;\n    &lt;div\n      id=\"messages\"\n      style=\"height: 300px; overflow-y: auto; border: 1px solid black\"&gt;&lt;/div&gt;\n    &lt;br /&gt;\n\n    &lt;form id=\"messageForm\"&gt;\n      &lt;label for=\"message\"&gt;Message:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"message\" name=\"message\" /&gt;\n      &lt;button type=\"submit\" id=\"sendButton\" disabled&gt;Send&lt;/button&gt;\n      &lt;button type=\"button\" id=\"startAudioButton\"&gt;Start Audio&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>\u7c21\u6613\u7db2\u9801\u4ecb\u9762\u5305\u542b\uff1a - \u8a0a\u606f\u986f\u793a\u5340 - \u53ef\u6372\u52d5\u7684 div\uff0c\u7528\u65bc\u986f\u793a\u5c0d\u8a71\u6b77\u53f2 - \u6587\u5b57\u8f38\u5165\u8868\u55ae - \u6587\u5b57\u8f38\u5165\u6b04\u4f4d\u8207\u50b3\u9001\u6309\u9215\uff0c\u7528\u65bc\u767c\u9001\u6587\u5b57\u8a0a\u606f - \u8a9e\u97f3\u63a7\u5236 - \u6309\u9215\u53ef\u555f\u7528\u8a9e\u97f3\u6a21\u5f0f\u4e26\u5b58\u53d6\u9ea5\u514b\u98a8</p>"},{"location":"streaming/custom-streaming/#staticjsappjs","title":"\u4e3b\u8981\u61c9\u7528\u7a0b\u5f0f\u908f\u8f2f\uff08<code>static/js/app.js</code>\uff09","text":""},{"location":"streaming/custom-streaming/#session-appjs","title":"Session \u7ba1\u7406\uff08<code>app.js</code>\uff09","text":"<pre><code>const sessionId = Math.random().toString().substring(10);\nconst sse_url =\n  \"http://\" + window.location.host + \"/events/\" + sessionId;\nconst send_url =\n  \"http://\" + window.location.host + \"/send/\" + sessionId;\nlet is_audio = false;\n</code></pre> <ul> <li>\u96a8\u6a5f Session ID - \u70ba\u6bcf\u500b\u700f\u89bd\u5668\u5be6\u4f8b\u7522\u751f\u552f\u4e00\u7684 session ID</li> <li>URL \u7d44\u5efa - \u4f7f\u7528 session ID \u5efa\u7acb SSE \u53ca send \u7aef\u9ede\u7684 URL</li> <li>\u97f3\u8a0a\u6a21\u5f0f\u65d7\u6a19 - \u7528\u4f86\u8ffd\u8e64\u662f\u5426\u555f\u7528\u97f3\u8a0a\u6a21\u5f0f</li> </ul>"},{"location":"streaming/custom-streaming/#server-sent-events-sse-appjs","title":"Server Sent Events (SSE) \u9023\u7dda\uff08<code>app.js</code>\uff09","text":"<p>connectSSE() \u51fd\u5f0f\u8ca0\u8cac\u8655\u7406\u8207\u4f3a\u670d\u5668\u7684\u5373\u6642\u901a\u8a0a\uff1a</p> <pre><code>// SSE handlers\nfunction connectSSE() {\n  // Connect to SSE endpoint\n  eventSource = new EventSource(sse_url + \"?is_audio=\" + is_audio);\n\n  // Handle connection open\n  eventSource.onopen = function () {\n    // Connection opened messages\n    console.log(\"SSE connection opened.\");\n    document.getElementById(\"messages\").textContent = \"Connection opened\";\n\n    // Enable the Send button\n    document.getElementById(\"sendButton\").disabled = false;\n    addSubmitHandler();\n  };\n\n  // Handle incoming messages\n  eventSource.onmessage = function (event) {\n    ...\n  };\n\n  // Handle connection close\n  eventSource.onerror = function (event) {\n    console.log(\"SSE connection error or closed.\");\n    document.getElementById(\"sendButton\").disabled = true;\n    document.getElementById(\"messages\").textContent = \"Connection closed\";\n    eventSource.close();\n    setTimeout(function () {\n      console.log(\"Reconnecting...\");\n      connectSSE();\n    }, 5000);\n  };\n}\n</code></pre> <ul> <li>EventSource \u8a2d\u5b9a - \u4ee5 audio mode \u53c3\u6578\u5efa\u7acb Server Sent Events (SSE) \u9023\u7dda</li> <li>\u9023\u7dda\u8655\u7406\u7a0b\u5e8f\uff1a</li> <li>onopen - \u9023\u7dda\u6210\u529f\u6642\u555f\u7528\u50b3\u9001\u6309\u9215\u8207\u8868\u55ae\u9001\u51fa\u529f\u80fd</li> <li>onmessage - \u8655\u7406\u4f86\u81ea agent \u7684\u50b3\u5165\u8a0a\u606f</li> <li>onerror - \u8655\u7406\u65b7\u7dda\uff0c\u4e26\u65bc 5 \u79d2\u5f8c\u81ea\u52d5\u91cd\u65b0\u9023\u7dda</li> </ul>"},{"location":"streaming/custom-streaming/#appjs","title":"\u8a0a\u606f\u8655\u7406 (<code>app.js</code>)","text":"<p>\u8655\u7406\u4f86\u81ea\u4f3a\u670d\u5668\u7684\u4e0d\u540c\u8a0a\u606f\u985e\u578b\uff1a</p> <pre><code>  // Handle incoming messages\n  eventSource.onmessage = function (event) {\n    // Parse the incoming message\n    const message_from_server = JSON.parse(event.data);\n    console.log(\"[AGENT TO CLIENT] \", message_from_server);\n\n    // Check if the turn is complete\n    // if turn complete, add new message\n    if (\n      message_from_server.turn_complete &amp;&amp;\n      message_from_server.turn_complete == true\n    ) {\n      currentMessageId = null;\n      return;\n    }\n\n    // If it's audio, play it\n    if (message_from_server.mime_type == \"audio/pcm\" &amp;&amp; audioPlayerNode) {\n      audioPlayerNode.port.postMessage(base64ToArray(message_from_server.data));\n    }\n\n    // If it's a text, print it\n    if (message_from_server.mime_type == \"text/plain\") {\n      // add a new message for a new turn\n      if (currentMessageId == null) {\n        currentMessageId = Math.random().toString(36).substring(7);\n        const message = document.createElement(\"p\");\n        message.id = currentMessageId;\n        // Append the message element to the messagesDiv\n        messagesDiv.appendChild(message);\n      }\n\n      // Add message text to the existing message element\n      const message = document.getElementById(currentMessageId);\n      message.textContent += message_from_server.data;\n\n      // Scroll down to the bottom of the messagesDiv\n      messagesDiv.scrollTop = messagesDiv.scrollHeight;\n    }\n</code></pre> <ul> <li>\u56de\u5408\u7ba1\u7406\uff08Turn Management\uff09 - \u5075\u6e2c <code>turn_complete</code> \u4ee5\u91cd\u8a2d\u8a0a\u606f\u72c0\u614b</li> <li>\u97f3\u8a0a\u64ad\u653e\uff08Audio Playback\uff09 - \u89e3\u78bc Base64 PCM \u8cc7\u6599\u4e26\u50b3\u9001\u81f3 audio worklet</li> <li>\u6587\u5b57\u986f\u793a\uff08Text Display\uff09 - \u5efa\u7acb\u65b0\u7684\u8a0a\u606f\u5143\u7d20\u4e26\u5373\u6642\u9644\u52a0\u90e8\u5206\u6587\u5b57\u66f4\u65b0\uff0c\u5be6\u73fe\u5373\u6642\u6253\u5b57\u6548\u679c</li> </ul>"},{"location":"streaming/custom-streaming/#appjs_1","title":"\u8a0a\u606f\u50b3\u9001\uff08<code>app.js</code>\uff09","text":"<p>sendMessage() \u51fd\u5f0f\u6703\u5c07\u8cc7\u6599\u50b3\u9001\u81f3\u4f3a\u670d\u5668\uff1a</p> <pre><code>async function sendMessage(message) {\n  try {\n    const response = await fetch(send_url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(message)\n    });\n\n    if (!response.ok) {\n      console.error('Failed to send message:', response.statusText);\n    }\n  } catch (error) {\n    console.error('Error sending message:', error);\n  }\n}\n</code></pre> <ul> <li>HTTP POST - \u50b3\u9001 JSON \u8f09\u8377\u5230 <code>/send/{session_id}</code> \u7aef\u9ede</li> <li>\u932f\u8aa4\u8655\u7406 - \u8a18\u9304\u5931\u6557\u7684\u8acb\u6c42\u8207\u7db2\u8def\u932f\u8aa4</li> <li>\u8a0a\u606f\u683c\u5f0f - \u6a19\u6e96\u5316\u7684 <code>{mime_type, data}</code> \u7d50\u69cb</li> </ul>"},{"location":"streaming/custom-streaming/#staticjsaudio-playerjs","title":"\u97f3\u8a0a\u64ad\u653e\u5668\uff08<code>static/js/audio-player.js</code>\uff09","text":"<p>startAudioPlayerWorklet() \u51fd\u5f0f\uff1a</p> <ul> <li>AudioContext \u8a2d\u5b9a - \u5efa\u7acb 24kHz \u53d6\u6a23\u7387\u7684 context \u4ee5\u9032\u884c\u64ad\u653e</li> <li>Worklet \u8f09\u5165 - \u8f09\u5165 PCM \u64ad\u653e\u5668\u8655\u7406\u5668\u4ee5\u8655\u7406\u97f3\u8a0a</li> <li>\u97f3\u8a0a\u8655\u7406\u6d41\u7a0b - \u5c07 worklet \u7bc0\u9ede\u9023\u63a5\u5230\u97f3\u8a0a\u8f38\u51fa\uff08\u5587\u53ed\uff09</li> </ul>"},{"location":"streaming/custom-streaming/#staticjsaudio-recorderjs","title":"\u97f3\u8a0a\u9304\u97f3\u5668\uff08<code>static/js/audio-recorder.js</code>\uff09","text":"<p>startAudioRecorderWorklet() \u51fd\u5f0f\uff1a</p> <ul> <li>AudioContext \u8a2d\u5b9a - \u5efa\u7acb 16kHz \u53d6\u6a23\u7387\u7684 context \u4ee5\u9032\u884c\u9304\u97f3</li> <li>\u9ea5\u514b\u98a8\u5b58\u53d6 - \u8acb\u6c42\u4f7f\u7528\u8005\u5a92\u9ad4\u6b0a\u9650\u4ee5\u53d6\u5f97\u97f3\u8a0a\u8f38\u5165</li> <li>\u97f3\u8a0a\u8655\u7406 - \u5c07\u9ea5\u514b\u98a8\u9023\u63a5\u5230\u9304\u97f3 worklet</li> <li>\u8cc7\u6599\u8f49\u63db - \u5c07 Float32 \u6a23\u672c\u8f49\u63db\u70ba 16 \u4f4d\u5143 PCM \u683c\u5f0f</li> </ul>"},{"location":"streaming/custom-streaming/#worklet","title":"\u97f3\u8a0a Worklet \u8655\u7406\u5668","text":""},{"location":"streaming/custom-streaming/#pcm-staticjspcm-player-processorjs","title":"PCM \u64ad\u653e\u5668\u8655\u7406\u5668\uff08<code>static/js/pcm-player-processor.js</code>\uff09","text":"<p>PCMPlayerProcessor \u985e\u5225\u8ca0\u8cac\u97f3\u8a0a\u64ad\u653e\uff1a</p> <ul> <li>\u74b0\u5f62\u7de9\u885d\u5340 - \u53ef\u5132\u5b58 180 \u79d2 24kHz \u97f3\u8a0a\u7684\u5faa\u74b0\u7de9\u885d\u5340</li> <li>\u8cc7\u6599\u6ce8\u5165 - \u5c07 Int16 \u8f49\u63db\u70ba Float32 \u4e26\u5132\u5b58\u81f3\u7de9\u885d\u5340</li> <li>\u64ad\u653e\u8ff4\u5708 - \u6301\u7e8c\u5f9e\u7de9\u885d\u5340\u8b80\u53d6\u8cc7\u6599\u8f38\u51fa\u5230\u8072\u9053</li> <li>\u6ea2\u4f4d\u8655\u7406 - \u7576\u7de9\u885d\u5340\u5df2\u6eff\u6642\u8986\u5beb\u6700\u820a\u7684\u6a23\u672c</li> </ul>"},{"location":"streaming/custom-streaming/#pcm-staticjspcm-recorder-processorjs","title":"PCM \u9304\u97f3\u8655\u7406\u5668\uff08<code>static/js/pcm-recorder-processor.js</code>\uff09","text":"<p>PCMProcessor \u985e\u5225\u8ca0\u8cac\u64f7\u53d6\u9ea5\u514b\u98a8\u8f38\u5165\uff1a</p> <ul> <li>\u97f3\u8a0a\u8f38\u5165 - \u8655\u7406\u50b3\u5165\u7684\u97f3\u8a0a\u6846\u67b6</li> <li>\u8cc7\u6599\u50b3\u8f38 - \u8907\u88fd Float32 \u6a23\u672c\u4e26\u900f\u904e message port \u50b3\u9001\u5230\u4e3b\u57f7\u884c\u7dd2</li> </ul>"},{"location":"streaming/custom-streaming/#_5","title":"\u6a21\u5f0f\u5207\u63db\uff1a","text":"<ul> <li>\u97f3\u8a0a\u555f\u7528 - \u300c\u555f\u52d5\u97f3\u8a0a\u300d\u6309\u9215\u6703\u555f\u7528\u9ea5\u514b\u98a8\u4e26\u4ee5 audio flag \u91cd\u65b0\u9023\u63a5 SSE</li> <li>\u7121\u7e2b\u5207\u63db - \u95dc\u9589\u73fe\u6709\u9023\u7dda\u4e26\u5efa\u7acb\u65b0\u7684\u555f\u7528\u97f3\u8a0a\u7684 session</li> </ul> <p>\u6b64\u5ba2\u6236\u7aef\u67b6\u69cb\u5229\u7528\u73fe\u4ee3 Web API\uff0c\u5be6\u73fe\u6587\u5b57\u8207\u8a9e\u97f3\u96d9\u6a21\u614b\u7684\u5373\u6642\u7121\u7e2b\u901a\u8a0a\uff0c\u652f\u63f4\u5c08\u696d\u7d1a\u97f3\u8a0a\u8655\u7406\u3002</p>"},{"location":"streaming/custom-streaming/#_6","title":"\u6458\u8981","text":"<p>\u672c\u61c9\u7528\u7a0b\u5f0f\u5c55\u793a\u4e86\u4e00\u5957\u5b8c\u6574\u7684\u5373\u6642 AI agent \u7cfb\u7d71\uff0c\u5177\u5099\u4ee5\u4e0b\u4e3b\u8981\u7279\u9ede\uff1a</p> <p>\u67b6\u69cb\u4eae\u9ede\uff1a - \u5373\u6642\u6027\uff1a\u652f\u63f4\u4e32\u6d41\u56de\u61c9\uff0c\u5305\u542b\u90e8\u5206\u6587\u5b57\u66f4\u65b0\u8207\u9023\u7e8c\u97f3\u8a0a - \u7a69\u5065\u6027\uff1a\u5b8c\u6574\u7684\u932f\u8aa4\u8655\u7406\u8207\u81ea\u52d5\u5fa9\u539f\u6a5f\u5236 - \u73fe\u4ee3\u5316\uff1a\u63a1\u7528\u6700\u65b0 Web \u6a19\u6e96\uff08AudioWorklet\u3001SSE\u3001ES6 modules\uff09</p> <p>\u672c\u7cfb\u7d71\u70ba\u5efa\u69cb\u9700\u8981\u5373\u6642\u4e92\u52d5\u3001\u7db2\u9801\u641c\u5c0b\u8207\u591a\u5a92\u9ad4\u901a\u8a0a\u7684\u9032\u968e AI \u61c9\u7528\u63d0\u4f9b\u4e86\u57fa\u790e\u3002</p>"},{"location":"streaming/custom-streaming/#_7","title":"\u90e8\u7f72\u81f3\u6b63\u5f0f\u74b0\u5883\u7684\u5f8c\u7e8c\u6b65\u9a5f","text":"<p>\u82e5\u8981\u5c07\u672c\u7cfb\u7d71\u90e8\u7f72\u81f3\u6b63\u5f0f\u74b0\u5883\uff0c\u5efa\u8b70\u5be6\u4f5c\u4ee5\u4e0b\u6539\u9032\uff1a</p>"},{"location":"streaming/custom-streaming/#_8","title":"\u5b89\u5168\u6027","text":"<ul> <li>\u8eab\u4efd\u9a57\u8b49\uff1a\u4ee5\u6b63\u5f0f\u7684\u4f7f\u7528\u8005\u8eab\u4efd\u9a57\u8b49\u53d6\u4ee3\u96a8\u6a5f session ID</li> <li>API \u91d1\u9470\u5b89\u5168\uff1a\u4f7f\u7528\u74b0\u5883\u8b8a\u6578\u6216\u79d8\u5bc6\u7ba1\u7406\u670d\u52d9</li> <li>HTTPS\uff1a\u5f37\u5236\u6240\u6709\u901a\u8a0a\u63a1\u7528 TLS \u52a0\u5bc6</li> <li>\u901f\u7387\u9650\u5236\uff1a\u9632\u6b62\u6feb\u7528\u4e26\u63a7\u7ba1 API \u6210\u672c</li> </ul>"},{"location":"streaming/custom-streaming/#_9","title":"\u53ef\u64f4\u5c55\u6027","text":"<ul> <li>\u6301\u4e45\u5316\u5132\u5b58\uff1a\u4ee5\u6301\u4e45\u5316 session \u53d6\u4ee3\u8a18\u61b6\u9ad4\u5167 session</li> <li>\u8ca0\u8f09\u5e73\u8861\uff1a\u652f\u63f4\u591a\u500b\u4f3a\u670d\u5668\u5be6\u4f8b\u5171\u4eab session state</li> <li>\u97f3\u8a0a\u6700\u4f73\u5316\uff1a\u5be6\u4f5c\u58d3\u7e2e\u4ee5\u6e1b\u5c11\u983b\u5bec\u7528\u91cf</li> </ul>"},{"location":"streaming/custom-streaming/#_10","title":"\u76e3\u63a7","text":"<ul> <li>\u932f\u8aa4\u8ffd\u8e64\uff1a\u76e3\u63a7\u4e26\u8b66\u793a\u7cfb\u7d71\u6545\u969c</li> <li>API \u6210\u672c\u76e3\u63a7\uff1a\u8ffd\u8e64 Google Search \u8207 Gemini \u7528\u91cf\uff0c\u907f\u514d\u9810\u7b97\u8d85\u652f</li> <li>\u6548\u80fd\u6307\u6a19\uff1a\u76e3\u63a7\u56de\u61c9\u6642\u9593\u8207\u97f3\u8a0a\u5ef6\u9072</li> </ul>"},{"location":"streaming/custom-streaming/#_11","title":"\u57fa\u790e\u67b6\u69cb","text":"<ul> <li>\u5bb9\u5668\u5316\uff1a\u4ee5 Docker \u6253\u5305\uff0c\u4fbf\u65bc\u5728 Cloud Run \u6216 Agent Engine \u4e0a\u4e00\u81f4\u90e8\u7f72</li> <li>\u5065\u5eb7\u6aa2\u67e5\uff1a\u5be6\u4f5c endpoint \u76e3\u63a7\u4ee5\u8ffd\u8e64\u904b\u4f5c\u72c0\u614b</li> </ul>"},{"location":"streaming/index.en/","title":"Bidi-streaming(live) in ADK","text":"<p>Warning</p> <p>This is an experimental feature. Currrently available in Python.</p> <p>Info</p> <p>This is different from server-side streaming or token-level streaming.  Token-level streaming is a one-way process where a language model generates a response and sends it back to the user one token at a time. This creates a \"typing\" effect, giving the impression of an immediate response and reducing the time it takes to see the start of the answer. The user sends their full prompt, the model processes it, and then the model begins to generate and send back the response piece by piece. This section is for bidi-streaming (live).</p> <p>Bidi-streaming (live) in ADK adds the low-latency bidirectional voice and video interaction capability of Gemini Live API to AI agents.</p> <p>With bidi-streaming (live) mode, you can provide end users with the experience of natural, human-like voice conversations, including the ability for the user to interrupt the agent's responses with voice commands. Agents with streaming can process text, audio, and video inputs, and they can provide text and audio output.</p> <ul> <li> <p> Quickstart (Bidi-streaming)</p> <p>In this quickstart, you'll build a simple agent and use streaming in ADK to implement low-latency and bidirectional voice and video communication.</p> <ul> <li>Quickstart (Bidi-streaming)</li> </ul> </li> <li> <p> Custom Audio Streaming app sample</p> <p>This article overviews the server and client code for a custom asynchronous web app built with ADK Streaming and FastAPI, enabling real-time, bidirectional audio and text communication with both Server Sent Events (SSE) and WebSockets.</p> <ul> <li>Custom Audio Streaming app sample (SSE)</li> <li>Custom Audio Streaming app sample (WebSockets)</li> </ul> </li> <li> <p> Bidi-streaming development guide series</p> <p>A series of articles for diving deeper into the Bidi-streaming development with ADK. You can learn basic concepts and use cases, the core API, and end-to-end application design.</p> <ul> <li>Bidi-streaming development guide series: Part 1 - Introduction</li> </ul> </li> <li> <p> Streaming Tools</p> <p>Streaming tools allows tools (functions) to stream intermediate results back to agents and agents can respond to those intermediate results. For example, we can use streaming tools to monitor the changes of the stock price and have the agent react to it. Another example is we can have the agent monitor the video stream, and when there is changes in video stream, the agent can report the changes.</p> <ul> <li>Streaming Tools</li> </ul> </li> <li> <p> Custom Audio Streaming app sample</p> <p>This article overviews the server and client code for a custom asynchronous web app built with ADK Streaming and FastAPI, enabling real-time, bidirectional audio and text communication with both Server Sent Events (SSE) and WebSockets.</p> <ul> <li>Streaming Configurations</li> </ul> </li> <li> <p> Blog post: Google ADK + Vertex AI Live API</p> <p>This article shows how to use Bidi-streaming (live) in ADK for real-time audio/video streaming. It offers a Python server example using LiveRequestQueue to build custom, interactive AI agents.</p> <ul> <li>Blog post: Google ADK + Vertex AI Live API</li> </ul> </li> </ul>"},{"location":"streaming/streaming-tools.en/","title":"Streaming Tools","text":"<p>Info</p> <p>This is only supported in streaming(live) agents/api.</p> <p>Streaming tools allows tools(functions) to stream intermediate results back to agents and agents can respond to those intermediate results.  For example, we can use streaming tools to monitor the changes of the stock price and have the agent react to it. Another example is we can have the agent monitor the video stream, and when there is changes in video stream, the agent can report the changes.</p> <p>To define a streaming tool, you must adhere to the following:</p> <ol> <li>Asynchronous Function: The tool must be an <code>async</code> Python function.</li> <li>AsyncGenerator Return Type: The function must be typed to return an <code>AsyncGenerator</code>. The first type parameter to <code>AsyncGenerator</code> is the type of the data you <code>yield</code> (e.g., <code>str</code> for text messages, or a custom object for structured data). The second type parameter is typically <code>None</code> if the generator doesn't receive values via <code>send()</code>.</li> </ol> <p>We support two types of streaming tools: - Simple type. This is a one type of streaming tools that only take non video/audio streams(the streams that you feed to adk web or adk runner) as input. - Video streaming tools. This only works in video streaming and the video stream(the streams that you feed to adk web or adk runner) will be passed into this function.</p> <p>Now let's define an agent that can monitor stock price changes and monitor the video stream changes. </p> <pre><code>import asyncio\nfrom typing import AsyncGenerator\n\nfrom google.adk.agents import LiveRequestQueue\nfrom google.adk.agents.llm_agent import Agent\nfrom google.adk.tools.function_tool import FunctionTool\nfrom google.genai import Client\nfrom google.genai import types as genai_types\n\n\nasync def monitor_stock_price(stock_symbol: str) -&gt; AsyncGenerator[str, None]:\n  \"\"\"This function will monitor the price for the given stock_symbol in a continuous, streaming and asynchronously way.\"\"\"\n  print(f\"Start monitor stock price for {stock_symbol}!\")\n\n  # Let's mock stock price change.\n  await asyncio.sleep(4)\n  price_alert1 = f\"the price for {stock_symbol} is 300\"\n  yield price_alert1\n  print(price_alert1)\n\n  await asyncio.sleep(4)\n  price_alert1 = f\"the price for {stock_symbol} is 400\"\n  yield price_alert1\n  print(price_alert1)\n\n  await asyncio.sleep(20)\n  price_alert1 = f\"the price for {stock_symbol} is 900\"\n  yield price_alert1\n  print(price_alert1)\n\n  await asyncio.sleep(20)\n  price_alert1 = f\"the price for {stock_symbol} is 500\"\n  yield price_alert1\n  print(price_alert1)\n\n\n# for video streaming, `input_stream: LiveRequestQueue` is required and reserved key parameter for ADK to pass the video streams in.\nasync def monitor_video_stream(\n    input_stream: LiveRequestQueue,\n) -&gt; AsyncGenerator[str, None]:\n  \"\"\"Monitor how many people are in the video streams.\"\"\"\n  print(\"start monitor_video_stream!\")\n  client = Client(vertexai=False)\n  prompt_text = (\n      \"Count the number of people in this image. Just respond with a numeric\"\n      \" number.\"\n  )\n  last_count = None\n  while True:\n    last_valid_req = None\n    print(\"Start monitoring loop\")\n\n    # use this loop to pull the latest images and discard the old ones\n    while input_stream._queue.qsize() != 0:\n      live_req = await input_stream.get()\n\n      if live_req.blob is not None and live_req.blob.mime_type == \"image/jpeg\":\n        last_valid_req = live_req\n\n    # If we found a valid image, process it\n    if last_valid_req is not None:\n      print(\"Processing the most recent frame from the queue\")\n\n      # Create an image part using the blob's data and mime type\n      image_part = genai_types.Part.from_bytes(\n          data=last_valid_req.blob.data, mime_type=last_valid_req.blob.mime_type\n      )\n\n      contents = genai_types.Content(\n          role=\"user\",\n          parts=[image_part, genai_types.Part.from_text(prompt_text)],\n      )\n\n      # Call the model to generate content based on the provided image and prompt\n      response = client.models.generate_content(\n          model=\"gemini-2.0-flash-exp\",\n          contents=contents,\n          config=genai_types.GenerateContentConfig(\n              system_instruction=(\n                  \"You are a helpful video analysis assistant. You can count\"\n                  \" the number of people in this image or video. Just respond\"\n                  \" with a numeric number.\"\n              )\n          ),\n      )\n      if not last_count:\n        last_count = response.candidates[0].content.parts[0].text\n      elif last_count != response.candidates[0].content.parts[0].text:\n        last_count = response.candidates[0].content.parts[0].text\n        yield response\n        print(\"response:\", response)\n\n    # Wait before checking for new images\n    await asyncio.sleep(0.5)\n\n\n# Use this exact function to help ADK stop your streaming tools when requested.\n# for example, if we want to stop `monitor_stock_price`, then the agent will\n# invoke this function with stop_streaming(function_name=monitor_stock_price).\ndef stop_streaming(function_name: str):\n  \"\"\"Stop the streaming\n\n  Args:\n    function_name: The name of the streaming function to stop.\n  \"\"\"\n  pass\n\n\nroot_agent = Agent(\n    model=\"gemini-2.0-flash-exp\",\n    name=\"video_streaming_agent\",\n    instruction=\"\"\"\n      You are a monitoring agent. You can do video monitoring and stock price monitoring\n      using the provided tools/functions.\n      When users want to monitor a video stream,\n      You can use monitor_video_stream function to do that. When monitor_video_stream\n      returns the alert, you should tell the users.\n      When users want to monitor a stock price, you can use monitor_stock_price.\n      Don't ask too many questions. Don't be too talkative.\n    \"\"\",\n    tools=[\n        monitor_video_stream,\n        monitor_stock_price,\n        FunctionTool(stop_streaming),\n    ]\n)\n</code></pre> <p>Here are some sample queries to test: - Help me monitor the stock price for $XYZ stock. - Help me monitor how many people are there in the video stream.</p>"},{"location":"streaming/streaming-tools/","title":"\u4e32\u6d41\u5de5\u5177","text":"<p>Info</p> <p>\u50c5\u652f\u63f4\u65bc\u4e32\u6d41\uff08\u5373\u6642\uff09agent/API\u3002</p> <p>\u4e32\u6d41\u5de5\u5177\uff08Streaming Tools\uff09\u5141\u8a31 tools\uff08functions\uff09\u5c07\u4e2d\u9593\u7d50\u679c\u4ee5\u4e32\u6d41\u65b9\u5f0f\u56de\u50b3\u7d66 agent\uff0cagent \u4e5f\u53ef\u4ee5\u5c0d\u9019\u4e9b\u4e2d\u9593\u7d50\u679c\u505a\u51fa\u56de\u61c9\u3002 \u8209\u4f8b\u4f86\u8aaa\uff0c\u6211\u5011\u53ef\u4ee5\u5229\u7528\u4e32\u6d41\u5de5\u5177\u4f86\u76e3\u63a7\u80a1\u50f9\u7684\u8b8a\u5316\uff0c\u4e26\u8b93 agent \u6839\u64da\u8b8a\u5316\u505a\u51fa\u53cd\u61c9\u3002\u53e6\u4e00\u500b\u4f8b\u5b50\u662f\uff0cagent \u53ef\u4ee5\u76e3\u63a7\u8996\u8a0a\u4e32\u6d41\uff08video stream\uff09\uff0c\u7576\u8996\u8a0a\u4e32\u6d41\u6709\u8b8a\u5316\u6642\uff0cagent \u6703\u56de\u5831\u9019\u4e9b\u8b8a\u5316\u3002</p> <p>\u82e5\u8981\u5b9a\u7fa9\u4e00\u500b\u4e32\u6d41\u5de5\u5177\uff0c\u5fc5\u9808\u9075\u5faa\u4ee5\u4e0b\u898f\u7bc4\uff1a</p> <ol> <li>\u975e\u540c\u6b65\u51fd\u5f0f\uff08Asynchronous Function\uff09\uff1a \u8a72\u5de5\u5177\u5fc5\u9808\u662f\u4e00\u500b <code>async</code> Python \u51fd\u5f0f\u3002</li> <li>AsyncGenerator \u56de\u50b3\u578b\u5225\uff1a \u6b64\u51fd\u5f0f\u5fc5\u9808\u6a19\u8a3b\u70ba\u56de\u50b3 <code>AsyncGenerator</code>\u3002<code>AsyncGenerator</code> \u7684\u7b2c\u4e00\u500b\u578b\u5225\u53c3\u6578\u662f\u4f60\u8981<code>yield</code>\u7684\u8cc7\u6599\u578b\u5225\uff08\u4f8b\u5982\uff0c<code>str</code> \u8868\u793a\u6587\u5b57\u8a0a\u606f\uff0c\u6216\u81ea\u8a02\u7269\u4ef6\u7528\u65bc\u7d50\u69cb\u5316\u8cc7\u6599\uff09\u3002\u7b2c\u4e8c\u500b\u578b\u5225\u53c3\u6578\u901a\u5e38\u70ba <code>None</code>\uff0c\u5982\u679c generator \u6c92\u6709\u900f\u904e <code>send()</code> \u63a5\u6536\u503c\u3002</li> </ol> <p>\u6211\u5011\u652f\u63f4\u5169\u7a2e\u985e\u578b\u7684\u4e32\u6d41\u5de5\u5177\uff1a - \u7c21\u55ae\u578b\uff08Simple type\uff09\uff1a\u9019\u985e\u4e32\u6d41\u5de5\u5177\u50c5\u63a5\u53d7\u975e\u8996\u8a0a/\u97f3\u8a0a\u4e32\u6d41\uff08\u5373\u4f60\u50b3\u905e\u7d66 adk web \u6216 adk runner \u7684\u4e32\u6d41\uff09\u4f5c\u70ba\u8f38\u5165\u3002 - \u8996\u8a0a\u4e32\u6d41\u5de5\u5177\uff08Video streaming tools\uff09\uff1a\u50c5\u9069\u7528\u65bc\u8996\u8a0a\u4e32\u6d41\uff0c\u4e14\u6703\u5c07\u8996\u8a0a\u4e32\u6d41\uff08\u5373\u4f60\u50b3\u905e\u7d66 adk web \u6216 adk runner \u7684\u4e32\u6d41\uff09\u50b3\u5165\u6b64\u51fd\u5f0f\u3002</p> <p>\u73fe\u5728\uff0c\u8b93\u6211\u5011\u5b9a\u7fa9\u4e00\u500b\u53ef\u4ee5\u540c\u6642\u76e3\u63a7\u80a1\u50f9\u8b8a\u5316\u8207\u8996\u8a0a\u4e32\u6d41\u8b8a\u5316\u7684 agent\u3002 </p> <pre><code>import asyncio\nfrom typing import AsyncGenerator\n\nfrom google.adk.agents import LiveRequestQueue\nfrom google.adk.agents.llm_agent import Agent\nfrom google.adk.tools.function_tool import FunctionTool\nfrom google.genai import Client\nfrom google.genai import types as genai_types\n\n\nasync def monitor_stock_price(stock_symbol: str) -&gt; AsyncGenerator[str, None]:\n  \"\"\"This function will monitor the price for the given stock_symbol in a continuous, streaming and asynchronously way.\"\"\"\n  print(f\"Start monitor stock price for {stock_symbol}!\")\n\n  # Let's mock stock price change.\n  await asyncio.sleep(4)\n  price_alert1 = f\"the price for {stock_symbol} is 300\"\n  yield price_alert1\n  print(price_alert1)\n\n  await asyncio.sleep(4)\n  price_alert1 = f\"the price for {stock_symbol} is 400\"\n  yield price_alert1\n  print(price_alert1)\n\n  await asyncio.sleep(20)\n  price_alert1 = f\"the price for {stock_symbol} is 900\"\n  yield price_alert1\n  print(price_alert1)\n\n  await asyncio.sleep(20)\n  price_alert1 = f\"the price for {stock_symbol} is 500\"\n  yield price_alert1\n  print(price_alert1)\n\n\n# for video streaming, `input_stream: LiveRequestQueue` is required and reserved key parameter for ADK to pass the video streams in.\nasync def monitor_video_stream(\n    input_stream: LiveRequestQueue,\n) -&gt; AsyncGenerator[str, None]:\n  \"\"\"Monitor how many people are in the video streams.\"\"\"\n  print(\"start monitor_video_stream!\")\n  client = Client(vertexai=False)\n  prompt_text = (\n      \"Count the number of people in this image. Just respond with a numeric\"\n      \" number.\"\n  )\n  last_count = None\n  while True:\n    last_valid_req = None\n    print(\"Start monitoring loop\")\n\n    # use this loop to pull the latest images and discard the old ones\n    while input_stream._queue.qsize() != 0:\n      live_req = await input_stream.get()\n\n      if live_req.blob is not None and live_req.blob.mime_type == \"image/jpeg\":\n        last_valid_req = live_req\n\n    # If we found a valid image, process it\n    if last_valid_req is not None:\n      print(\"Processing the most recent frame from the queue\")\n\n      # Create an image part using the blob's data and mime type\n      image_part = genai_types.Part.from_bytes(\n          data=last_valid_req.blob.data, mime_type=last_valid_req.blob.mime_type\n      )\n\n      contents = genai_types.Content(\n          role=\"user\",\n          parts=[image_part, genai_types.Part.from_text(prompt_text)],\n      )\n\n      # Call the model to generate content based on the provided image and prompt\n      response = client.models.generate_content(\n          model=\"gemini-2.0-flash-exp\",\n          contents=contents,\n          config=genai_types.GenerateContentConfig(\n              system_instruction=(\n                  \"You are a helpful video analysis assistant. You can count\"\n                  \" the number of people in this image or video. Just respond\"\n                  \" with a numeric number.\"\n              )\n          ),\n      )\n      if not last_count:\n        last_count = response.candidates[0].content.parts[0].text\n      elif last_count != response.candidates[0].content.parts[0].text:\n        last_count = response.candidates[0].content.parts[0].text\n        yield response\n        print(\"response:\", response)\n\n    # Wait before checking for new images\n    await asyncio.sleep(0.5)\n\n\n# Use this exact function to help ADK stop your streaming tools when requested.\n# for example, if we want to stop `monitor_stock_price`, then the agent will\n# invoke this function with stop_streaming(function_name=monitor_stock_price).\ndef stop_streaming(function_name: str):\n  \"\"\"Stop the streaming\n\n  Args:\n    function_name: The name of the streaming function to stop.\n  \"\"\"\n  pass\n\n\nroot_agent = Agent(\n    model=\"gemini-2.0-flash-exp\",\n    name=\"video_streaming_agent\",\n    instruction=\"\"\"\n      You are a monitoring agent. You can do video monitoring and stock price monitoring\n      using the provided tools/functions.\n      When users want to monitor a video stream,\n      You can use monitor_video_stream function to do that. When monitor_video_stream\n      returns the alert, you should tell the users.\n      When users want to monitor a stock price, you can use monitor_stock_price.\n      Don't ask too many questions. Don't be too talkative.\n    \"\"\",\n    tools=[\n        monitor_video_stream,\n        monitor_stock_price,\n        FunctionTool(stop_streaming),\n    ]\n)\n</code></pre> <p>\u4ee5\u4e0b\u662f\u4e00\u4e9b\u53ef\u7528\u4f86\u6e2c\u8a66\u7684\u7bc4\u4f8b\u67e5\u8a62\uff1a - \u8acb\u5354\u52a9\u6211\u76e3\u63a7 $XYZ \u80a1\u7968\u7684\u80a1\u50f9\u3002 - \u8acb\u5354\u52a9\u6211\u76e3\u63a7\u8996\u8a0a\u4e32\u6d41\u4e2d\u6709\u591a\u5c11\u4eba\u3002</p>"},{"location":"streaming/dev-guide/part1.en/","title":"ADK Bidi-streaming development guide: Part 1 - Introduction","text":"<p>Welcome to the world of bidirectional streaming with Agent Development Kit (ADK). This article will transform your understanding of AI agent communication from traditional request-response patterns to dynamic, real-time conversations that feel as natural as talking to another person.</p> <p>Imagine building an AI assistant that doesn't just wait for you to finish speaking before responding, but actively listens and can be interrupted mid-sentence when you have a sudden thought. Picture creating customer support bots that handle audio, video, and text simultaneously while maintaining context throughout the conversation. This is the power of bidirectional streaming, and ADK makes it accessible to every developer.</p>"},{"location":"streaming/dev-guide/part1.en/#what-is-bidi-streaming","title":"1.1 What is Bidi-streaming?","text":"<p>Bidi-streaming (Bidirectional streaming) represents a fundamental shift from traditional AI interactions. Instead of the rigid \"ask-and-wait\" pattern, it enables real-time, two-way communication where both human and AI can speak, listen, and respond simultaneously. This creates natural, human-like conversations with immediate responses and the revolutionary ability to interrupt ongoing interactions.</p> <p>Think of the difference between sending emails and having a phone conversation. Traditional AI interactions are like emails\u2014you send a complete message, wait for a complete response, then send another complete message. Bidirectional streaming is like a phone conversation\u2014fluid, natural, with the ability to interrupt, clarify, and respond in real-time.</p>"},{"location":"streaming/dev-guide/part1.en/#key-characteristics","title":"Key Characteristics","text":"<p>These characteristics distinguish bidirectional streaming from traditional AI interactions and make it uniquely powerful for creating engaging user experiences:</p> <ul> <li> <p>Two-way Communication: Continuous data exchange without waiting for complete responses. Either the user and AI can start responding to the first few words of your question while you're still speaking, creating an experience that feels genuinely conversational rather than transactional.</p> </li> <li> <p>Responsive Interruption: Perhaps the most important feature for the natural user experience\u2014users can interrupt the agent mid-response with new input, just like in human conversation. If an AI is explaining quantum physics and you suddenly ask \"wait, what's an electron?\", the AI stops immediately and addresses your question.</p> </li> <li> <p>Best for Multimodal: Simultaneous support for text, audio, and video inputs creates rich, natural interactions. Users can speak while showing documents, type follow-up questions during voice calls, or seamlessly switch between communication modes without losing context.</p> </li> </ul> <pre><code>sequenceDiagram\n    participant Client as User\n    participant Agent\n\n    Client-&gt;&gt;Agent: \"Hi!\"\n    Client-&gt;&gt;Agent: \"Explain the history of Japan\"\n    Agent-&gt;&gt;Client: \"Hello!\"\n    Agent-&gt;&gt;Client: \"Sure! Japan's history is a...\" (partial content)\n    Client-&gt;&gt;Agent: \"Ah, wait.\"\n\n    Agent-&gt;&gt;Client: \"OK, how can I help?\" (interrupted = True)</code></pre>"},{"location":"streaming/dev-guide/part1.en/#difference-from-other-streaming-types","title":"Difference from Other Streaming Types","text":"<p>Understanding how bidirectional streaming differs from other approaches is crucial for appreciating its unique value. The streaming landscape includes several distinct patterns, each serving different use cases:</p> <p>Streaming Types Comparison</p> <p>Bidi-streaming differs fundamentally from other streaming approaches:</p> <ul> <li> <p>Server-Side Streaming: One-way data flow from server to client. Like watching a live video stream\u2014you receive continuous data but can't interact with it in real-time. Useful for dashboards or live feeds, but not for conversations.</p> </li> <li> <p>Token-Level Streaming: Sequential text token delivery without interruption. The AI generates response word-by-word, but you must wait for completion before sending new input. Like watching someone type a message in real-time\u2014you see it forming, but can't interrupt.</p> </li> <li> <p>Bidirectional Streaming: Full two-way communication with interruption support. True conversational AI where both parties can speak, listen, and respond simultaneously. This is what enables natural dialogue where you can interrupt, clarify, or change topics mid-conversation.</p> </li> </ul>"},{"location":"streaming/dev-guide/part1.en/#real-world-applications","title":"Real-World Applications","text":"<p>Bidirectional streaming revolutionizes agentic AI applications by enabling agents to operate with human-like responsiveness and intelligence. These applications showcase how streaming transforms static AI interactions into dynamic, agent-driven experiences that feel genuinely intelligent and proactive.</p> <p>In a video of the Shopper's Concierge demo, the multimodal, bi-directional streaming feature significantly improve the user experience of e-commerce by enabling a faster and more intuitive shopping experience. The combination of conversational understanding and rapid, parallelized searching culminates in advanced capabilities like virtual try-on, boosting buyer confidence and reducing the friction of online shopping.</p> <p>Also, you can think of many possible real-world applications for bidirectional streaming:</p> <ol> <li> <p>Customer Service &amp; Contact Centers: This is the most direct application. The technology can create sophisticated virtual agents that go far beyond traditional chatbots.</p> <ul> <li>Use case: A customer calls a retail company's support line about a defective product.</li> <li>Multimodality (video): The customer can say, \"My coffee machine is leaking from the bottom, let me show you.\" They can then use their phone's camera to stream live video of the issue. The AI agent can use its vision capabilities to identify the model and the specific point of failure.</li> <li>Live Interaction &amp; Interruption: If the agent says, \"Okay, I'm processing a return for your Model X coffee maker,\" the customer can interrupt with, \"No, wait, it's the Model Y Pro,\" and the agent can immediately correct its course without restarting the conversation.</li> </ul> </li> <li> <p>Field Service &amp; Technical Assistance: Technicians working on-site can use a hands-free, voice-activated assistant to get real-time help.</p> <ul> <li>Use Case: An HVAC technician is on-site trying to diagnose a complex commercial air conditioning unit.</li> <li>Multimodality (Video &amp; Voice): The technician, wearing smart glasses or using a phone, can stream their point-of-view to the AI agent. They can ask, \"I'm hearing a strange noise from this compressor. Can you identify it and pull up the diagnostic flowchart for this model?\"</li> <li>Live Interaction: The agent can guide the technician step-by-step, and the technician can ask clarifying questions or interrupt at any point without taking their hands off their tools.</li> </ul> </li> <li> <p>Healthcare &amp; Telemedicine: The agent can serve as a first point of contact for patient intake, triage, and basic consultations.</p> <ul> <li>Use Case: A patient uses a provider's app for a preliminary consultation about a skin condition.</li> <li>Multimodality (Video/Image): The patient can securely share a live video or high-resolution image of a rash. The AI can perform a preliminary analysis and ask clarifying questions.</li> </ul> </li> <li> <p>Financial Services &amp; Wealth Management: An agent can provide clients with a secure, interactive, and data-rich way to manage their finances.</p> <ul> <li>Use Case: A client wants to review their investment portfolio and discuss market trends.</li> <li>Multimodality (Screen Sharing): The agent can share its screen to display charts, graphs, and portfolio performance data. The client could also share their screen to point to a specific news article and ask, \"What is the potential impact of this event on my tech stocks?\"</li> <li>Live Interaction: Analyze the client's current portfolio allocation by accessing their account data.Simulate the impact of a potential trade on the portfolio's risk profile.</li> </ul> </li> </ol>"},{"location":"streaming/dev-guide/part1.en/#adk-bidi-streaming-architecture-overview","title":"1.2 ADK Bidi-streaming Architecture Overview","text":"<p>ADK Bidi-streaming architecture enables bidirectional AI conversations feel as natural as human dialogue. The architecture seamlessly integrates with Google's Gemini Live API through a sophisticated pipeline that has been designed for low latency and high-throughput communication.</p> <p>The system handles the complex orchestration required for real-time streaming\u2014managing multiple concurrent data flows, handling interruptions gracefully, processing multimodal inputs simultaneously, and maintaining conversation state across dynamic interactions. ADK Bidi-streaming abstracts this complexity into simple, intuitive APIs that developers can use without needing to understand the intricate details of streaming protocols or AI model communication patterns.</p>"},{"location":"streaming/dev-guide/part1.en/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    subgraph \"Application\"\n        subgraph \"Client\"\n            C1[\"Web / Mobile\"]\n        end\n\n        subgraph \"Transport Layer\"\n            T1[\"WebSocket / SSE (e.g. FastAPI)\"]\n        end\n    end\n\n    subgraph \"ADK\"\n        subgraph \"ADK Bidi-streaming\"\n            L1[LiveRequestQueue]\n            L2[Runner]\n            L3[Agent]\n            L4[LLM Flow]\n        end\n\n        subgraph \"LLM Integration\"\n            G1[GeminiLlmConnection]\n            G2[Gemini Live API]\n        end\n    end\n\n    C1 &lt;--&gt; T1\n    T1 --&gt;|\"live_request_queue.send()\"| L1\n    L1 --&gt;|\"runner.run_live(queue)\"| L2\n    L2 --&gt;|\"agent.run_live()\"| L3\n    L3 --&gt;|\"_llm_flow.run_live()\"| L4\n    L4 --&gt;|\"llm.connect()\"| G1\n    G1 &lt;--&gt; G2\n    G1 --&gt;|\"yield LlmResponse\"| L4\n    L4 --&gt;|\"yield Event\"| L3\n    L3 --&gt;|\"yield Event\"| L2\n    L2 --&gt;|\"yield Event\"| T1\n\n    classDef external fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef adk fill:#f3e5f5,stroke:#4a148c,stroke-width:2px\n\n    class C1,T1,L3 external\n    class L1,L2,L4,G1,G2 adk</code></pre> Developer provides: ADK provides: Gemini provides: Web / Mobile: Frontend applications that users interact with, handling UI/UX, user input capture, and response displayWebSocket / SSE Server: Real-time communication server (such as FastAPI) that manages client connections, handles streaming protocols, and routes messages between clients and ADKAgent: Custom AI agent definition with specific instructions, tools, and behavior tailored to your application's needs LiveRequestQueue: Message queue that buffers and sequences incoming user messages (text content, audio blobs, control signals) for orderly processing by the agentRunner: Execution engine that orchestrates agent sessions, manages conversation state, and provides the <code>run_live()</code> streaming interfaceLLM Flow: Processing pipeline that handles streaming conversation logic, manages context, and coordinates with language modelsGeminiLlmConnection: Abstraction layer that bridges ADK's streaming architecture with Gemini Live API, handling protocol translation and connection management Gemini Live API: Google's real-time language model service that processes streaming input, generates responses, handles interruptions, supports multimodal content (text, audio, video), and provides advanced AI capabilities like function calling and contextual understanding"},{"location":"streaming/dev-guide/part1.en/#setting-up-your-development-environment","title":"1.3 Setting Up Your Development Environment","text":"<p>Now that you understand the gist of ADK Bidi-streaming architecture and the value it provides, it's time to get hands-on experience. This section will prepare your development environment so you can start building the streaming agents and applications described in the previous sections.</p> <p>By the end of this setup, you'll have everything needed to create the intelligent voice assistants, proactive customer support agents, and multi-agent collaboration platforms we've discussed. The setup process is straightforward\u2014ADK handles the complex streaming infrastructure, so you can focus on building your agent's unique capabilities rather than wrestling with low-level streaming protocols.</p>"},{"location":"streaming/dev-guide/part1.en/#installation-steps","title":"Installation Steps","text":""},{"location":"streaming/dev-guide/part1.en/#create-virtual-environment-recommended","title":"1. Create Virtual Environment (Recommended)","text":"<pre><code># Create virtual environment\npython -m venv .venv\n\n# Activate virtual environment\n# macOS/Linux:\nsource .venv/bin/activate\n# Windows CMD:\n# .venv\\Scripts\\activate.bat\n# Windows PowerShell:\n# .venv\\Scripts\\Activate.ps1\n</code></pre>"},{"location":"streaming/dev-guide/part1.en/#install-adk","title":"2. Install ADK","text":"<p>Create a <code>requirements.txt</code> file in your project root. Note that <code>google-adk</code> library includes FastAPI and uvicorn that you can use as the web server for bidi-streaming applications.</p> <pre><code>google-adk==1.3.0\npython-dotenv&gt;=1.0.0\n</code></pre> <p>Install all dependencies:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"streaming/dev-guide/part1.en/#set-ssl-certificate-path-macos-only","title":"3. Set SSL Certificate Path (macOS only)","text":"<pre><code># Required for proper SSL handling on macOS\nexport SSL_CERT_FILE=$(python -m certifi)\n</code></pre>"},{"location":"streaming/dev-guide/part1.en/#set-up-api-keys","title":"4. Set Up API Keys","text":"<p>Choose your preferred platform for running agents:</p> Google AI StudioGoogle Cloud Vertex AI <ol> <li>Get an API key from Google AI Studio</li> <li>Create a <code>.env</code> file in your project root:</li> </ol> <pre><code>GOOGLE_GENAI_USE_VERTEXAI=FALSE\nGOOGLE_API_KEY=your_actual_api_key_here\n</code></pre> <ol> <li>Set up Google Cloud project</li> <li>Install and configure gcloud CLI</li> <li>Authenticate: <code>gcloud auth login</code></li> <li>Enable Vertex AI API</li> <li>Create a <code>.env</code> file in your project root:</li> </ol> <pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_CLOUD_PROJECT=your_actual_project_id\nGOOGLE_CLOUD_LOCATION=us-central1\n</code></pre>"},{"location":"streaming/dev-guide/part1.en/#create-environment-setup-script","title":"5. Create Environment Setup Script","text":"<p>We will create the validation script that will verify your installation:</p> <pre><code># Create the directory structure\nmkdir -p src/part1\n</code></pre> <p>Create <code>src/part1/1-3-1_environment_setup.py</code>:</p> <pre><code>#!/usr/bin/env python3\n\"\"\"\nPart 1.3.1: Environment Setup Validation\nComprehensive script to validate ADK streaming environment configuration.\n\"\"\"\n\nimport os\nimport sys\nfrom pathlib import Path\nfrom dotenv import load_dotenv\n\ndef validate_environment():\n    \"\"\"Validate ADK streaming environment setup.\"\"\"\n\n    print(\"\ud83d\udd27 ADK Streaming Environment Validation\")\n    print(\"=\" * 45)\n\n    # Load environment variables\n    env_path = Path(__file__).parent.parent.parent / '.env'\n    if env_path.exists():\n        load_dotenv(env_path)\n        print(f\"\u2713 Environment file loaded: {env_path}\")\n    else:\n        print(f\"\u274c Environment file not found: {env_path}\")\n        return False\n\n    # Check Python version\n    python_version = sys.version_info\n    if python_version &gt;= (3, 8):\n        print(f\"\u2713 Python version: {python_version.major}.{python_version.minor}.{python_version.micro}\")\n    else:\n        print(f\"\u274c Python version {python_version.major}.{python_version.minor} - requires 3.8+\")\n        return False\n\n    # Test ADK installation\n    try:\n        import google.adk\n        print(f\"\u2713 ADK import successful\")\n\n        # Try to get version if available\n        try:\n            from google.adk.version import __version__\n            print(f\"\u2713 ADK version: {__version__}\")\n        except:\n            print(\"\u2139\ufe0f ADK version info not available\")\n\n    except ImportError as e:\n        print(f\"\u274c ADK import failed: {e}\")\n        return False\n\n    # Check essential imports\n    essential_imports = [\n        ('google.adk.agents', 'Agent, LiveRequestQueue'),\n        ('google.adk.runners', 'InMemoryRunner'),\n        ('google.genai.types', 'Content, Part, Blob'),\n    ]\n\n    for module, components in essential_imports:\n        try:\n            __import__(module)\n            print(f\"\u2713 Import: {module}\")\n        except ImportError as e:\n            print(f\"\u274c Import failed: {module} - {e}\")\n            return False\n\n    # Validate environment variables\n    env_checks = [\n        ('GOOGLE_GENAI_USE_VERTEXAI', 'Platform configuration'),\n        ('GOOGLE_API_KEY', 'API authentication'),\n    ]\n\n    for env_var, description in env_checks:\n        value = os.getenv(env_var)\n        if value:\n            # Mask API key for security\n            display_value = value if env_var != 'GOOGLE_API_KEY' else f\"{value[:10]}...\"\n            print(f\"\u2713 {description}: {display_value}\")\n        else:\n            print(f\"\u274c Missing: {env_var} ({description})\")\n            return False\n\n    # Test basic ADK functionality\n    try:\n        from google.adk.agents import LiveRequestQueue\n        from google.genai.types import Content, Part\n\n        # Create test queue\n        queue = LiveRequestQueue()\n        test_content = Content(parts=[Part(text=\"Test message\")])\n        queue.send_content(test_content)\n        queue.close()\n\n        print(\"\u2713 Basic ADK functionality test passed\")\n\n    except Exception as e:\n        print(f\"\u274c ADK functionality test failed: {e}\")\n        return False\n\n    print(\"\\n\ud83c\udf89 Environment validation successful!\")\n    print(\"\\nNext steps:\")\n    print(\"\u2022 Start building your streaming agents in src/agents/\")\n    print(\"\u2022 Create custom tools in src/tools/\")\n    print(\"\u2022 Add utility functions in src/utils/\")\n    print(\"\u2022 Test with Part 3 examples\")\n\n    return True\n\ndef main():\n    \"\"\"Run environment validation.\"\"\"\n\n    try:\n        success = validate_environment()\n        sys.exit(0 if success else 1)\n\n    except KeyboardInterrupt:\n        print(\"\\n\\n\u26a0\ufe0f Validation interrupted by user\")\n        sys.exit(1)\n    except Exception as e:\n        print(f\"\\n\u274c Unexpected error: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"streaming/dev-guide/part1.en/#project-structure","title":"Project Structure","text":"<p>Now your streaming project should now have this structure:</p> <pre><code>your-streaming-project/\n\u251c\u2500\u2500 .env                              # Environment variables (API keys)\n\u251c\u2500\u2500 requirements.txt                 # Python dependencies\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 part1/\n        \u2514\u2500\u2500 1-3-1_environment_setup.py  # Environment validation script\n</code></pre>"},{"location":"streaming/dev-guide/part1.en/#run-it","title":"Run It","text":"<p>Use our complete environment setup script to ensure everything is configured correctly:</p> <pre><code>python src/part1/1-3-1_environment_setup.py\n</code></pre> <p>Expected Output</p> <p>When you run the validation script, you should see output similar to this:</p> <pre><code>\ud83d\udd27 ADK Streaming Environment Validation\n=============================================\n\u2713 Environment file loaded: /path/to/your-streaming-project/.env\n\u2713 Python version: 3.12.8\n\u2713 ADK import successful\n\u2713 ADK version: 1.3.0\n\u2713 Import: google.adk.agents\n\u2713 Import: google.adk.runners\n\u2713 Import: google.genai.types\n\u2713 Platform configuration: FALSE\n\u2713 API authentication: AIzaSyAolZ...\n\u2713 Basic ADK functionality test passed\n\n\ud83c\udf89 Environment validation successful!\n</code></pre> <p>This comprehensive validation script checks:</p> <ul> <li>ADK installation and version</li> <li>Required environment variables</li> <li>API key validation</li> <li>Basic import verification</li> </ul>"},{"location":"streaming/dev-guide/part1.en/#next-steps","title":"Next Steps","text":"<p>With your environment set up, you're ready to dive into the core streaming APIs. In the next part (coming soon), You'll learn about:</p> <ul> <li>LiveRequestQueue: The heart of bidirectional communication</li> <li>run_live() method: Starting streaming sessions</li> <li>Event processing: Handling real-time responses</li> <li>Gemini Live API: Direct integration patterns</li> </ul>"},{"location":"streaming/dev-guide/part1/","title":"ADK \u96d9\u5411\u4e32\u6d41\u958b\u767c\u6307\u5357\uff1a\u7b2c\u4e00\u90e8\u5206\uff0d\u7c21\u4ecb","text":"<p>\u6b61\u8fce\u9032\u5165 Agent Development Kit (ADK) \u7684\u96d9\u5411\u4e32\u6d41\uff08bidirectional streaming\uff09\u4e16\u754c\u3002\u672c\u7bc7\u6587\u7ae0\u5c07\u5e36\u4f60\u5f9e\u50b3\u7d71\u7684\u8acb\u6c42\uff0d\u56de\u61c9\uff08request-response\uff09\u6a21\u5f0f\uff0c\u8f49\u8b8a\u70ba\u52d5\u614b\u3001\u5373\u6642\u4e14\u81ea\u7136\u5982\u8207\u771f\u4eba\u5c0d\u8a71\u822c\u7684 AI agent \u6e9d\u901a\u65b9\u5f0f\u3002</p> <p>\u60f3\u50cf\u4e00\u4e0b\uff0c\u4f60\u6253\u9020\u7684 AI \u52a9\u7406\u4e0d\u518d\u53ea\u662f\u7b49\u4f60\u8aaa\u5b8c\u624d\u56de\u61c9\uff0c\u800c\u662f\u80fd\u5920\u4e3b\u52d5\u50be\u807d\uff0c\u751a\u81f3\u5728\u4f60\u7a81\u7136\u60f3\u5230\u65b0\u554f\u984c\u6642\uff0c\u96a8\u6642\u6253\u65b7\u5b83\u7684\u56de\u8986\u3002\u518d\u60f3\u50cf\u4e00\u4e0b\uff0c\u5efa\u7acb\u7684\u5ba2\u670d bot \u80fd\u540c\u6642\u8655\u7406\u8a9e\u97f3\u3001\u8996\u8a0a\u8207\u6587\u5b57\uff0c\u4e26\u5728\u6574\u500b\u5c0d\u8a71\u904e\u7a0b\u4e2d\u7dad\u6301\u60c5\u5883\u8108\u7d61\u3002\u9019\u5c31\u662f\u96d9\u5411\u4e32\u6d41\u7684\u5a01\u529b\uff0c\u800c ADK \u8b93\u6bcf\u4f4d\u958b\u767c\u8005\u90fd\u80fd\u8f15\u9b06\u5be6\u73fe\u9019\u4e00\u5207\u3002</p>"},{"location":"streaming/dev-guide/part1/#what-is-bidi-streaming","title":"1.1 \u4ec0\u9ebc\u662f\u96d9\u5411\u4e32\u6d41\uff1f","text":"<p>\u96d9\u5411\u4e32\u6d41\uff08Bidi-streaming, Bidirectional streaming\uff09\u4ee3\u8868\u4e86 AI \u4e92\u52d5\u6a21\u5f0f\u7684\u6839\u672c\u8f49\u8b8a\u3002\u5b83\u6253\u7834\u4e86\u50f5\u5316\u7684\u300c\u63d0\u554f\uff0d\u7b49\u5f85\u300d\u6d41\u7a0b\uff0c\u5be6\u73fe\u4e86\u5373\u6642\u3001\u96d9\u5411\u6e9d\u901a\uff0c\u8b93\u4eba\u8207 AI \u80fd\u540c\u6642\u8aaa\u8a71\u3001\u50be\u807d\u4e26\u56de\u61c9\u3002\u9019\u7a2e\u6a21\u5f0f\u5e36\u4f86\u81ea\u7136\u4e14\u985e\u4f3c\u4eba\u985e\u7684\u5c0d\u8a71\u9ad4\u9a57\uff0c\u56de\u61c9\u5373\u6642\uff0c\u4e26\u5177\u5099\u9769\u547d\u6027\u7684\u300c\u53ef\u4e2d\u65b7\u300d\u4e92\u52d5\u80fd\u529b\u3002</p> <p>\u4f60\u53ef\u4ee5\u60f3\u50cf\uff0c\u50b3\u7d71 AI \u4e92\u52d5\u5c31\u50cf\u5beb\u96fb\u5b50\u90f5\u4ef6\u2014\u2014\u4f60\u767c\u9001\u4e00\u500b\u5b8c\u6574\u8a0a\u606f\uff0c\u7b49\u6536\u5230\u5b8c\u6574\u56de\u8986\uff0c\u518d\u767c\u4e0b\u4e00\u500b\u8a0a\u606f\u3002\u800c\u96d9\u5411\u4e32\u6d41\u5247\u50cf\u662f\u96fb\u8a71\u4ea4\u8ac7\u2014\u2014\u6d41\u66a2\u3001\u81ea\u7136\uff0c\u80fd\u96a8\u6642\u6253\u65b7\u3001\u6f84\u6e05\u4e26\u5373\u6642\u56de\u61c9\u3002</p>"},{"location":"streaming/dev-guide/part1/#_1","title":"\u4e3b\u8981\u7279\u9ede","text":"<p>\u4ee5\u4e0b\u9019\u4e9b\u7279\u6027\u8b93\u96d9\u5411\u4e32\u6d41\u6709\u5225\u65bc\u50b3\u7d71 AI \u4e92\u52d5\uff0c\u4e26\u6210\u70ba\u6253\u9020\u5f15\u4eba\u5165\u52dd\u7528\u6236\u9ad4\u9a57\u7684\u95dc\u9375\uff1a</p> <ul> <li> <p>\u96d9\u5411\u6e9d\u901a\uff1a\u8cc7\u6599\u80fd\u6301\u7e8c\u96d9\u5411\u6d41\u52d5\uff0c\u7121\u9700\u7b49\u5230\u5b8c\u6574\u56de\u61c9\u3002\u7121\u8ad6\u662f\u4f7f\u7528\u8005\u9084\u662f AI\uff0c\u90fd\u80fd\u5728\u4f60\u9084\u6c92\u8aaa\u5b8c\u554f\u984c\u7684\u524d\u5e7e\u500b\u5b57\u6642\u5c31\u958b\u59cb\u56de\u61c9\uff0c\u8b93\u4e92\u52d5\u66f4\u50cf\u771f\u5be6\u5c0d\u8a71\uff0c\u800c\u975e\u55ae\u7d14\u7684\u4ea4\u6613\u3002</p> </li> <li> <p>\u5373\u6642\u4e2d\u65b7\u56de\u61c9\uff1a\u9019\u6216\u8a31\u662f\u6700\u8cbc\u8fd1\u81ea\u7136\u9ad4\u9a57\u7684\u95dc\u9375\u7279\u8272\u2014\u2014\u4f7f\u7528\u8005\u53ef\u4ee5\u5728 agent \u56de\u8986\u5230\u4e00\u534a\u6642\uff0c\u96a8\u6642\u4ee5\u65b0\u8f38\u5165\u6253\u65b7\uff0c\u5c31\u50cf\u73fe\u5be6\u751f\u6d3b\u4e2d\u7684\u5c0d\u8a71\u3002\u5982\u679c AI \u6b63\u5728\u89e3\u91cb\u91cf\u5b50\u7269\u7406\uff0c\u800c\u4f60\u7a81\u7136\u554f\u300c\u7b49\u7b49\uff0c\u4ec0\u9ebc\u662f\u96fb\u5b50\uff1f\u300d\uff0cAI \u6703\u7acb\u523b\u505c\u6b62\u4e26\u76f4\u63a5\u56de\u7b54\u4f60\u7684\u65b0\u554f\u984c\u3002</p> </li> <li> <p>\u6700\u9069\u5408\u591a\u6a21\u614b\u4e92\u52d5\uff1a\u540c\u6642\u652f\u63f4\u6587\u5b57\u3001\u8a9e\u97f3\u8207\u8996\u8a0a\u8f38\u5165\uff0c\u5e36\u4f86\u8c50\u5bcc\u4e14\u81ea\u7136\u7684\u4e92\u52d5\u9ad4\u9a57\u3002\u4f7f\u7528\u8005\u53ef\u4ee5\u4e00\u908a\u8aaa\u8a71\u4e00\u908a\u5c55\u793a\u6587\u4ef6\u3001\u5728\u8a9e\u97f3\u901a\u8a71\u6642\u8f38\u5165\u8ffd\u554f\uff0c\u6216\u5728\u4e0d\u540c\u6e9d\u901a\u6a21\u5f0f\u9593\u7121\u7e2b\u5207\u63db\u800c\u4e0d\u6703\u5931\u53bb\u60c5\u5883\u8108\u7d61\u3002</p> </li> </ul> <pre><code>sequenceDiagram\n    participant Client as User\n    participant Agent\n\n    Client-&gt;&gt;Agent: \"Hi!\"\n    Client-&gt;&gt;Agent: \"Explain the history of Japan\"\n    Agent-&gt;&gt;Client: \"Hello!\"\n    Agent-&gt;&gt;Client: \"Sure! Japan's history is a...\" (partial content)\n    Client-&gt;&gt;Agent: \"Ah, wait.\"\n\n    Agent-&gt;&gt;Client: \"OK, how can I help?\" (interrupted = True)</code></pre>"},{"location":"streaming/dev-guide/part1/#_2","title":"\u8207\u5176\u4ed6\u4e32\u6d41\u985e\u578b\u7684\u5dee\u7570","text":"<p>\u4e86\u89e3\u96d9\u5411\u4e32\u6d41\uff08bidirectional streaming\uff09\u8207\u5176\u4ed6\u65b9\u6cd5\u7684\u4e0d\u540c\u4e4b\u8655\uff0c\u6709\u52a9\u65bc\u8a8d\u8b58\u5176\u7368\u7279\u50f9\u503c\u3002\u4e32\u6d41\u9818\u57df\u5305\u542b\u6578\u7a2e\u4e0d\u540c\u7684\u6a21\u5f0f\uff0c\u6bcf\u7a2e\u6a21\u5f0f\u90fd\u9069\u7528\u65bc\u4e0d\u540c\u7684\u4f7f\u7528\u60c5\u5883\uff1a</p> <p>Streaming Types Comparison</p> <p>\u96d9\u5411\u4e32\u6d41\uff08Bidi-streaming\uff09 \u8207\u5176\u4ed6\u4e32\u6d41\u65b9\u5f0f\u6709\u6839\u672c\u6027\u7684\u4e0d\u540c\uff1a</p> <ul> <li> <p>\u4f3a\u670d\u5668\u7aef\u4e32\u6d41 (server-side streaming)\uff1a\u8cc7\u6599\u50c5\u55ae\u5411\u5f9e\u4f3a\u670d\u5668\u6d41\u5411\u7528\u6236\u7aef\u3002\u5c31\u50cf\u89c0\u770b\u76f4\u64ad\u5f71\u7247\u4e00\u6a23\u2014\u2014\u4f60\u6703\u6301\u7e8c\u6536\u5230\u8cc7\u6599\uff0c\u4f46\u7121\u6cd5\u5373\u6642\u4e92\u52d5\u3002\u9019\u7a2e\u65b9\u5f0f\u9069\u5408\u5100\u8868\u677f\u6216\u5373\u6642\u8cc7\u8a0a\u6d41\uff0c\u4f46\u4e0d\u9069\u5408\u5c0d\u8a71\u5834\u666f\u3002</p> </li> <li> <p>\u9010\u5b57\u5143\u4e32\u6d41 (token-level streaming)\uff1a\u6587\u5b57\u9010\u5b57\u50b3\u9001\uff0c\u4e0d\u4e2d\u65b7\u3002AI \u6703\u4e00\u5b57\u4e00\u53e5\u5730\u7522\u751f\u56de\u61c9\uff0c\u4f46\u4f60\u5fc5\u9808\u7b49\u5b83\u5b8c\u6210\u5f8c\u624d\u80fd\u9001\u51fa\u65b0\u8f38\u5165\u3002\u9019\u5c31\u50cf\u770b\u8457\u5225\u4eba\u5373\u6642\u6253\u5b57\u2014\u2014\u4f60\u770b\u5230\u5167\u5bb9\u9010\u6f38\u6210\u5f62\uff0c\u4f46\u7121\u6cd5\u4e2d\u9014\u63d2\u8a71\u3002</p> </li> <li> <p>\u96d9\u5411\u4e32\u6d41\uff08bidirectional streaming\uff09\uff1a\u5b8c\u5168\u7684\u96d9\u5411\u5373\u6642\u6e9d\u901a\uff0c\u652f\u63f4\u4e2d\u65b7\u3002\u9019\u662f\u771f\u6b63\u7684\u5c0d\u8a71\u5f0f AI\uff0c\u96d9\u65b9\u53ef\u4ee5\u540c\u6642\u8aaa\u8a71\u3001\u8046\u807d\u4e26\u56de\u61c9\u3002\u9019\u4f7f\u5f97\u5c0d\u8a71\u66f4\u52a0\u81ea\u7136\uff0c\u4f60\u53ef\u4ee5\u96a8\u6642\u63d2\u8a71\u3001\u6f84\u6e05\u6216\u5728\u5c0d\u8a71\u4e2d\u9014\u66f4\u63db\u4e3b\u984c\u3002</p> </li> </ul>"},{"location":"streaming/dev-guide/part1/#_3","title":"\u771f\u5be6\u4e16\u754c\u61c9\u7528","text":"<p>\u96d9\u5411\u4e32\u6d41\uff08bidirectional streaming\uff09\u5fb9\u5e95\u9769\u65b0\u4e86 agentic AI \u61c9\u7528\uff0c\u4f7f agent \u80fd\u4ee5\u985e\u4f3c\u4eba\u985e\u7684\u5373\u6642\u53cd\u61c9\u8207\u667a\u6167\u904b\u4f5c\u3002\u9019\u4e9b\u61c9\u7528\u5c55\u793a\u4e86\u4e32\u6d41\u5982\u4f55\u5c07\u975c\u614b\u7684 AI \u4e92\u52d5\u8f49\u8b8a\u70ba\u52d5\u614b\u3001\u4ee5 agent \u70ba\u4e3b\u9ad4\u7684\u9ad4\u9a57\uff0c\u8b93 AI \u986f\u5f97\u771f\u6b63\u8070\u660e\u4e14\u7a4d\u6975\u4e3b\u52d5\u3002</p> <p>\u5728 Shopper's Concierge \u793a\u7bc4 (demo) \u7684\u5f71\u7247\u4e2d\uff0c\u591a\u6a21\u614b\u3001\u96d9\u5411\u4e32\u6d41\u529f\u80fd\u5927\u5e45\u63d0\u5347\u4e86\u96fb\u5546\u7684\u7528\u6236\u9ad4\u9a57\uff0c\u8b93\u8cfc\u7269\u904e\u7a0b\u66f4\u5feb\u901f\u3001\u66f4\u76f4\u89ba\u3002\u7d50\u5408\u5c0d\u8a71\u7406\u89e3\u80fd\u529b\u8207\u5feb\u901f\u3001\u5e73\u884c\u5316\u7684\u641c\u5c0b\uff0c\u5be6\u73fe\u4e86\u5982\u865b\u64ec\u8a66\u7a7f\u7b49\u9032\u968e\u529f\u80fd\uff0c\u63d0\u5347\u8cb7\u5bb6\u4fe1\u5fc3\u4e26\u964d\u4f4e\u7dda\u4e0a\u8cfc\u7269\u7684\u6469\u64e6\u3002</p> <p>\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u60f3\u50cf\u8a31\u591a\u96d9\u5411\u4e32\u6d41\uff08bidirectional streaming\uff09\u5728\u771f\u5be6\u4e16\u754c\u7684\u61c9\u7528\u5834\u666f\uff1a</p> <ol> <li> <p>\u5ba2\u670d\u8207\u806f\u7d61\u4e2d\u5fc3\uff1a\u9019\u662f\u6700\u76f4\u63a5\u7684\u61c9\u7528\u3002\u8a72\u6280\u8853\u53ef\u6253\u9020\u9060\u8d85\u50b3\u7d71\u804a\u5929\u6a5f\u5668\u4eba\u7684\u667a\u6167\u865b\u64ec agent\u3002</p> <ul> <li>\u61c9\u7528\u6848\u4f8b\uff1a\u9867\u5ba2\u81f4\u96fb\u96f6\u552e\u516c\u53f8\u5ba2\u670d\uff0c\u53cd\u6620\u7522\u54c1\u7455\u75b5\u3002</li> <li>\u591a\u6a21\u614b\uff08\u8996\u8a0a\uff09\uff1a\u9867\u5ba2\u53ef\u4ee5\u8aaa\uff1a\u300c\u6211\u7684\u5496\u5561\u6a5f\u5e95\u90e8\u5728\u6f0f\u6c34\uff0c\u6211\u7d66\u4f60\u770b\u4e00\u4e0b\u3002\u300d\u7136\u5f8c\u7528\u624b\u6a5f\u93e1\u982d\u5373\u6642\u4e32\u6d41\u554f\u984c\u756b\u9762\u3002AI agent \u53ef\u5229\u7528\u8996\u89ba\u80fd\u529b\u8fa8\u8b58\u6a5f\u578b\u53ca\u6545\u969c\u9ede\u3002</li> <li>\u5373\u6642\u4e92\u52d5\u8207\u4e2d\u65b7\uff1a\u82e5 agent \u8aaa\uff1a\u300c\u597d\u7684\uff0c\u6211\u6b63\u5728\u70ba\u60a8\u7684 Model X \u5496\u5561\u6a5f\u8fa6\u7406\u9000\u8ca8\u3002\u300d\u9867\u5ba2\u53ef\u7acb\u5373\u63d2\u8a71\uff1a\u300c\u7b49\u7b49\uff0c\u662f Model Y Pro\u3002\u300dagent \u53ef\u99ac\u4e0a\u4fee\u6b63\uff0c\u4e0d\u9700\u91cd\u555f\u5c0d\u8a71\u3002</li> </ul> </li> <li> <p>\u73fe\u5834\u670d\u52d9\u8207\u6280\u8853\u652f\u63f4\uff1a\u73fe\u5834\u6280\u8853\u4eba\u54e1\u53ef\u7528\u514d\u6301\u3001\u8a9e\u97f3\u555f\u52d5\u7684\u52a9\u624b\u7372\u5f97\u5373\u6642\u5354\u52a9\u3002</p> <ul> <li>\u61c9\u7528\u6848\u4f8b\uff1aHVAC \u6280\u5e2b\u5728\u73fe\u5834\u8a3a\u65b7\u8907\u96dc\u7684\u5546\u7528\u7a7a\u8abf\u3002</li> <li>\u591a\u6a21\u614b\uff08\u8996\u8a0a\u8207\u8a9e\u97f3\uff09\uff1a\u6280\u5e2b\u6234\u8457\u667a\u6167\u773c\u93e1\u6216\u7528\u624b\u6a5f\uff0c\u5c07\u7b2c\u4e00\u4eba\u7a31\u8996\u89d2\u4e32\u6d41\u7d66 AI agent\uff0c\u4e26\u8a62\u554f\uff1a\u300c\u9019\u500b\u58d3\u7e2e\u6a5f\u6709\u5947\u602a\u7684\u8072\u97f3\uff0c\u4f60\u80fd\u8fa8\u8b58\u4e26\u8abf\u51fa\u9019\u578b\u865f\u7684\u8a3a\u65b7\u6d41\u7a0b\u5716\u55ce\uff1f\u300d</li> <li>\u5373\u6642\u4e92\u52d5\uff1aagent \u53ef\u9010\u6b65\u5f15\u5c0e\u6280\u5e2b\uff0c\u6280\u5e2b\u4e5f\u80fd\u96a8\u6642\u63d0\u554f\u6216\u4e2d\u65b7\uff0c\u7121\u9700\u653e\u4e0b\u5de5\u5177\u3002</li> </ul> </li> <li> <p>\u91ab\u7642\u8207\u9060\u8ddd\u91ab\u7642\uff1aagent \u53ef\u4f5c\u70ba\u75c5\u60a3\u521d\u6b65\u5206\u8a3a\u3001\u554f\u8a3a\u8207\u57fa\u672c\u8aee\u8a62\u7684\u7b2c\u4e00\u63a5\u89f8\u9ede\u3002</p> <ul> <li>\u61c9\u7528\u6848\u4f8b\uff1a\u75c5\u60a3\u900f\u904e\u91ab\u7642\u670d\u52d9\u63d0\u4f9b\u8005\u7684 app \u9032\u884c\u76ae\u819a\u554f\u984c\u521d\u6b65\u8aee\u8a62\u3002</li> <li>\u591a\u6a21\u614b\uff08\u8996\u8a0a\uff0f\u5f71\u50cf\uff09\uff1a\u75c5\u60a3\u53ef\u5b89\u5168\u5206\u4eab\u76ae\u75b9\u7684\u5373\u6642\u8996\u8a0a\u6216\u9ad8\u89e3\u6790\u5ea6\u7167\u7247\uff0cAI \u53ef\u9032\u884c\u521d\u6b65\u5206\u6790\u4e26\u63d0\u51fa\u91d0\u6e05\u554f\u984c\u3002</li> </ul> </li> <li> <p>\u91d1\u878d\u670d\u52d9\u8207\u8ca1\u5bcc\u7ba1\u7406\uff1aagent \u53ef\u70ba\u5ba2\u6236\u63d0\u4f9b\u5b89\u5168\u3001\u4e92\u52d5\u6027\u9ad8\u4e14\u8cc7\u6599\u8c50\u5bcc\u7684\u8ca1\u52d9\u7ba1\u7406\u65b9\u5f0f\u3002</p> <ul> <li>\u61c9\u7528\u6848\u4f8b\uff1a\u5ba2\u6236\u5e0c\u671b\u6aa2\u8996\u6295\u8cc7\u7d44\u5408\u4e26\u8a0e\u8ad6\u5e02\u5834\u8da8\u52e2\u3002</li> <li>\u591a\u6a21\u614b\uff08\u87a2\u5e55\u5171\u4eab\uff09\uff1aagent \u53ef\u5206\u4eab\u87a2\u5e55\uff0c\u5c55\u793a\u5716\u8868\u3001\u7e3e\u6548\u8cc7\u6599\u3002\u5ba2\u6236\u4e5f\u80fd\u5206\u4eab\u81ea\u5df1\u7684\u87a2\u5e55\uff0c\u6307\u8457\u67d0\u5247\u65b0\u805e\u554f\uff1a\u300c\u9019\u500b\u4e8b\u4ef6\u5c0d\u6211\u7684\u79d1\u6280\u80a1\u6709\u4ec0\u9ebc\u6f5b\u5728\u5f71\u97ff\uff1f\u300d</li> <li>\u5373\u6642\u4e92\u52d5\uff1aagent \u53ef\u5b58\u53d6\u5e33\u6236\u8cc7\u6599\uff0c\u5206\u6790\u5ba2\u6236\u73fe\u6709\u6295\u8cc7\u7d44\u5408\u914d\u7f6e\uff0c\u4e26\u6a21\u64ec\u6f5b\u5728\u4ea4\u6613\u5c0d\u98a8\u96aa\u7d44\u5408\u7684\u5f71\u97ff\u3002</li> </ul> </li> </ol>"},{"location":"streaming/dev-guide/part1/#adk-bidi-streaming-architecture-overview","title":"1.2 ADK \u96d9\u5411\u4e32\u6d41\u67b6\u69cb\u7e3d\u89bd","text":"<p>Agent Development Kit (ADK) \u96d9\u5411\u4e32\u6d41\u67b6\u69cb\u8b93 AI \u5c0d\u8a71\u5982\u540c\u4eba\u985e\u5c0d\u8a71\u822c\u81ea\u7136\u3002\u6b64\u67b6\u69cb\u900f\u904e\u7cbe\u5fc3\u8a2d\u8a08\u7684\u9ad8\u6548\u7ba1\u7dda\uff0c\u7121\u7e2b\u6574\u5408 Google \u7684 Gemini Live API\uff0c\u5be6\u73fe\u4f4e\u5ef6\u9072\u8207\u9ad8\u541e\u5410\u91cf\u7684\u901a\u8a0a\u3002</p> <p>\u7cfb\u7d71\u8ca0\u8cac\u8655\u7406\u5373\u6642\u4e32\u6d41\u6240\u9700\u7684\u8907\u96dc\u5354\u8abf\u2014\u2014\u7ba1\u7406\u591a\u500b\u4e26\u767c\u8cc7\u6599\u6d41\u3001\u512a\u96c5\u8655\u7406\u4e2d\u65b7\u3001\u540c\u6642\u8655\u7406\u591a\u6a21\u614b\u8f38\u5165\uff0c\u4e26\u5728\u52d5\u614b\u4e92\u52d5\u4e2d\u7dad\u6301\u5c0d\u8a71\u72c0\u614b\u3002ADK \u96d9\u5411\u4e32\u6d41\u5c07\u9019\u4e9b\u8907\u96dc\u6027\u62bd\u8c61\u70ba\u7c21\u55ae\u76f4\u89ba\u7684 API\uff0c\u958b\u767c\u8005\u7121\u9700\u7406\u89e3\u4e32\u6d41\u5354\u5b9a\u6216 AI \u6a21\u578b\u901a\u8a0a\u7d30\u7bc0\uff0c\u5373\u53ef\u8f15\u9b06\u4f7f\u7528\u3002</p>"},{"location":"streaming/dev-guide/part1/#_4","title":"\u9ad8\u968e\u67b6\u69cb","text":"<pre><code>graph TB\n    subgraph \"Application\"\n        subgraph \"Client\"\n            C1[\"Web / Mobile\"]\n        end\n\n        subgraph \"Transport Layer\"\n            T1[\"WebSocket / SSE (e.g. FastAPI)\"]\n        end\n    end\n\n    subgraph \"ADK\"\n        subgraph \"ADK Bidi-streaming\"\n            L1[LiveRequestQueue]\n            L2[Runner]\n            L3[Agent]\n            L4[LLM Flow]\n        end\n\n        subgraph \"LLM Integration\"\n            G1[GeminiLlmConnection]\n            G2[Gemini Live API]\n        end\n    end\n\n    C1 &lt;--&gt; T1\n    T1 --&gt;|\"live_request_queue.send()\"| L1\n    L1 --&gt;|\"runner.run_live(queue)\"| L2\n    L2 --&gt;|\"agent.run_live()\"| L3\n    L3 --&gt;|\"_llm_flow.run_live()\"| L4\n    L4 --&gt;|\"llm.connect()\"| G1\n    G1 &lt;--&gt; G2\n    G1 --&gt;|\"yield LlmResponse\"| L4\n    L4 --&gt;|\"yield Event\"| L3\n    L3 --&gt;|\"yield Event\"| L2\n    L2 --&gt;|\"yield Event\"| T1\n\n    classDef external fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef adk fill:#f3e5f5,stroke:#4a148c,stroke-width:2px\n\n    class C1,T1,L3 external\n    class L1,L2,L4,G1,G2 adk</code></pre> \u958b\u767c\u8005\u9700\u63d0\u4f9b\uff1a ADK \u63d0\u4f9b\uff1a Gemini \u63d0\u4f9b\uff1a Web / Mobile\uff1a\u4f7f\u7528\u8005\u4e92\u52d5\u7684\u524d\u7aef\u61c9\u7528\u7a0b\u5f0f\uff0c\u8ca0\u8cac UI/UX\u3001\u4f7f\u7528\u8005\u8f38\u5165\u64f7\u53d6\u8207\u56de\u61c9\u986f\u793aWebSocket / SSE \u4f3a\u670d\u5668\uff1a\u5373\u6642\u901a\u8a0a\u4f3a\u670d\u5668\uff08\u5982 FastAPI\uff09\uff0c\u7ba1\u7406\u7528\u6236\u7aef\u9023\u7dda\u3001\u8655\u7406\u4e32\u6d41\u5354\u5b9a\uff0c\u4e26\u5728\u7528\u6236\u7aef\u8207 ADK \u4e4b\u9593\u8def\u7531\u8a0a\u606fAgent\uff1a\u4f9d\u61c9\u7528\u9700\u6c42\u81ea\u8a02\u7684 AI agent \u5b9a\u7fa9\uff0c\u5305\u542b\u5c08\u5c6c\u6307\u4ee4\u3001\u5de5\u5177\u8207\u884c\u70ba LiveRequestQueue\uff1a\u8a0a\u606f\u4f47\u5217\uff0c\u8ca0\u8cac\u7de9\u885d\u8207\u6392\u5e8f\u9032\u5165\u7684\u4f7f\u7528\u8005\u8a0a\u606f\uff08\u6587\u5b57\u5167\u5bb9\u3001\u97f3\u8a0a blob\u3001\u63a7\u5236\u8a0a\u865f\uff09\uff0c\u4ee5\u4fbf agent \u6709\u5e8f\u8655\u7406Runner\uff1a\u57f7\u884c\u5f15\u64ce\uff0c\u5354\u8abf agent session\u3001\u7ba1\u7406\u5c0d\u8a71\u72c0\u614b\uff0c\u4e26\u63d0\u4f9b <code>run_live()</code> \u4e32\u6d41\u4ecb\u9762LLM Flow\uff1a\u8655\u7406\u4e32\u6d41\u5c0d\u8a71\u908f\u8f2f\u7684\u8655\u7406\u7ba1\u7dda\uff0c\u7ba1\u7406\u4e0a\u4e0b\u6587\uff0c\u4e26\u8207\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5354\u4f5cGeminiLlmConnection\uff1a\u62bd\u8c61\u5c64\uff0c\u5c07 ADK \u7684\u4e32\u6d41\u67b6\u69cb\u8207 Gemini Live API \u9023\u63a5\uff0c\u8ca0\u8cac\u5354\u5b9a\u8f49\u63db\u8207\u9023\u7dda\u7ba1\u7406 Gemini Live API\uff1aGoogle \u7684\u5373\u6642\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u670d\u52d9\uff0c\u8ca0\u8cac\u8655\u7406\u4e32\u6d41\u8f38\u5165\u3001\u7522\u751f\u56de\u61c9\u3001\u652f\u63f4\u4e2d\u65b7\u3001\u652f\u63f4\u591a\u6a21\u614b\u5167\u5bb9\uff08\u6587\u5b57\u3001\u97f3\u8a0a\u3001\u8996\u8a0a\uff09\uff0c\u4e26\u63d0\u4f9b\u5982\u51fd\u5f0f\u547c\u53eb\u3001\u4e0a\u4e0b\u6587\u7406\u89e3\u7b49\u9032\u968e AI \u80fd\u529b"},{"location":"streaming/dev-guide/part1/#setting-up-your-development-environment","title":"1.3 \u8a2d\u5b9a\u958b\u767c\u74b0\u5883","text":"<p>\u73fe\u5728\u4f60\u5df2\u7d93\u7406\u89e3\u4e86 ADK \u96d9\u5411\u4e32\u6d41\uff08Bidi-streaming\uff09\u67b6\u69cb\u7684\u6838\u5fc3\u6982\u5ff5\u8207\u5176\u5e36\u4f86\u7684\u50f9\u503c\uff0c\u662f\u6642\u5019\u52d5\u624b\u5be6\u4f5c\u4e86\u3002\u672c\u7bc0\u5c07\u5354\u52a9\u4f60\u6e96\u5099\u958b\u767c\u74b0\u5883\uff0c\u8b93\u4f60\u53ef\u4ee5\u958b\u59cb\u6253\u9020\u524d\u8ff0\u7684\u4e32\u6d41 agent \u8207\u61c9\u7528\u7a0b\u5f0f\u3002</p> <p>\u5b8c\u6210\u9019\u4e9b\u8a2d\u5b9a\u5f8c\uff0c\u4f60\u5c07\u5177\u5099\u5efa\u7acb\u667a\u6167\u8a9e\u97f3\u52a9\u7406\u3001\u4e3b\u52d5\u5ba2\u670d agent\u3001\u591a agent \u5354\u4f5c\u5e73\u53f0\u7b49\u6240\u6709\u5fc5\u8981\u689d\u4ef6\u3002\u8a2d\u5b9a\u6d41\u7a0b\u76f8\u7576\u7c21\u55ae\u2014\u2014ADK \u5df2\u7d93\u8655\u7406\u4e86\u8907\u96dc\u7684\u4e32\u6d41\u57fa\u790e\u5efa\u8a2d\uff0c\u4f60\u53ea\u9700\u5c08\u6ce8\u65bc\u958b\u767c agent \u7684\u7368\u7279\u529f\u80fd\uff0c\u800c\u4e0d\u5fc5\u7169\u60f1\u5e95\u5c64\u4e32\u6d41\u5354\u5b9a\u3002</p>"},{"location":"streaming/dev-guide/part1/#_5","title":"\u5b89\u88dd\u6b65\u9a5f","text":""},{"location":"streaming/dev-guide/part1/#create-virtual-environment-recommended","title":"1. \u5efa\u7acb\u865b\u64ec\u74b0\u5883\uff08\u5efa\u8b70\uff09","text":"<pre><code># Create virtual environment\npython -m venv .venv\n\n# Activate virtual environment\n# macOS/Linux:\nsource .venv/bin/activate\n# Windows CMD:\n# .venv\\Scripts\\activate.bat\n# Windows PowerShell:\n# .venv\\Scripts\\Activate.ps1\n</code></pre>"},{"location":"streaming/dev-guide/part1/#install-adk","title":"2. \u5b89\u88dd ADK","text":"<p>\u5728\u4f60\u7684\u5c08\u6848\u6839\u76ee\u9304\u4e0b\u5efa\u7acb\u4e00\u500b <code>requirements.txt</code> \u6a94\u6848\u3002\u8acb\u6ce8\u610f\uff0c<code>google-adk</code> \u51fd\u5f0f\u5eab\u5df2\u5305\u542b FastAPI \u8207 uvicorn\uff0c\u4f60\u53ef\u4ee5\u5c07\u5176\u4f5c\u70ba\u96d9\u5411\u4e32\u6d41\uff08bidi-streaming\uff09\u61c9\u7528\u7a0b\u5f0f\u7684\u7db2\u9801\u4f3a\u670d\u5668\u4f7f\u7528\u3002</p> <pre><code>google-adk==1.3.0\npython-dotenv&gt;=1.0.0\n</code></pre> <p>\u5b89\u88dd\u6240\u6709\u76f8\u4f9d\u5957\u4ef6\uff1a</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"streaming/dev-guide/part1/#set-ssl-certificate-path-macos-only","title":"3. \u8a2d\u5b9a SSL \u6191\u8b49\u8def\u5f91\uff08\u50c5\u9650 macOS\uff09","text":"<pre><code># Required for proper SSL handling on macOS\nexport SSL_CERT_FILE=$(python -m certifi)\n</code></pre>"},{"location":"streaming/dev-guide/part1/#set-up-api-keys","title":"4. \u8a2d\u5b9a API \u91d1\u9470","text":"<p>\u8acb\u9078\u64c7\u4f60\u504f\u597d\u7684\u5e73\u53f0\u4f86\u57f7\u884c agent\uff1a</p> Google AI StudioGoogle Cloud Vertex AI <ol> <li>\u5f9e Google AI Studio \u53d6\u5f97 API \u91d1\u9470</li> <li>\u5728\u4f60\u7684\u5c08\u6848\u6839\u76ee\u9304\u4e0b\u5efa\u7acb <code>.env</code> \u6a94\u6848\uff1a</li> </ol> <pre><code>GOOGLE_GENAI_USE_VERTEXAI=FALSE\nGOOGLE_API_KEY=your_actual_api_key_here\n</code></pre> <ol> <li>\u8a2d\u5b9a Google Cloud \u5c08\u6848</li> <li>\u5b89\u88dd\u4e26\u8a2d\u5b9a gcloud CLI</li> <li>\u9a57\u8b49\u8eab\u4efd\uff1a<code>gcloud auth login</code></li> <li>\u555f\u7528 Vertex AI API</li> <li>\u5728\u4f60\u7684\u5c08\u6848\u6839\u76ee\u9304\u5efa\u7acb\u4e00\u500b <code>.env</code> \u6a94\u6848\uff1a</li> </ol> <pre><code>GOOGLE_GENAI_USE_VERTEXAI=TRUE\nGOOGLE_CLOUD_PROJECT=your_actual_project_id\nGOOGLE_CLOUD_LOCATION=us-central1\n</code></pre>"},{"location":"streaming/dev-guide/part1/#create-environment-setup-script","title":"5. \u5efa\u7acb\u74b0\u5883\u8a2d\u5b9a\u8173\u672c","text":"<p>\u6211\u5011\u5c07\u5efa\u7acb\u9a57\u8b49\u8173\u672c\uff0c\u7528\u4f86\u9a57\u8b49\u4f60\u7684\u5b89\u88dd\uff1a</p> <pre><code># Create the directory structure\nmkdir -p src/part1\n</code></pre> <p>\u5efa\u7acb <code>src/part1/1-3-1_environment_setup.py</code>\uff1a</p> <pre><code>#!/usr/bin/env python3\n\"\"\"\nPart 1.3.1: Environment Setup Validation\nComprehensive script to validate ADK streaming environment configuration.\n\"\"\"\n\nimport os\nimport sys\nfrom pathlib import Path\nfrom dotenv import load_dotenv\n\ndef validate_environment():\n    \"\"\"Validate ADK streaming environment setup.\"\"\"\n\n    print(\"\ud83d\udd27 ADK Streaming Environment Validation\")\n    print(\"=\" * 45)\n\n    # Load environment variables\n    env_path = Path(__file__).parent.parent.parent / '.env'\n    if env_path.exists():\n        load_dotenv(env_path)\n        print(f\"\u2713 Environment file loaded: {env_path}\")\n    else:\n        print(f\"\u274c Environment file not found: {env_path}\")\n        return False\n\n    # Check Python version\n    python_version = sys.version_info\n    if python_version &gt;= (3, 8):\n        print(f\"\u2713 Python version: {python_version.major}.{python_version.minor}.{python_version.micro}\")\n    else:\n        print(f\"\u274c Python version {python_version.major}.{python_version.minor} - requires 3.8+\")\n        return False\n\n    # Test ADK installation\n    try:\n        import google.adk\n        print(f\"\u2713 ADK import successful\")\n\n        # Try to get version if available\n        try:\n            from google.adk.version import __version__\n            print(f\"\u2713 ADK version: {__version__}\")\n        except:\n            print(\"\u2139\ufe0f ADK version info not available\")\n\n    except ImportError as e:\n        print(f\"\u274c ADK import failed: {e}\")\n        return False\n\n    # Check essential imports\n    essential_imports = [\n        ('google.adk.agents', 'Agent, LiveRequestQueue'),\n        ('google.adk.runners', 'InMemoryRunner'),\n        ('google.genai.types', 'Content, Part, Blob'),\n    ]\n\n    for module, components in essential_imports:\n        try:\n            __import__(module)\n            print(f\"\u2713 Import: {module}\")\n        except ImportError as e:\n            print(f\"\u274c Import failed: {module} - {e}\")\n            return False\n\n    # Validate environment variables\n    env_checks = [\n        ('GOOGLE_GENAI_USE_VERTEXAI', 'Platform configuration'),\n        ('GOOGLE_API_KEY', 'API authentication'),\n    ]\n\n    for env_var, description in env_checks:\n        value = os.getenv(env_var)\n        if value:\n            # Mask API key for security\n            display_value = value if env_var != 'GOOGLE_API_KEY' else f\"{value[:10]}...\"\n            print(f\"\u2713 {description}: {display_value}\")\n        else:\n            print(f\"\u274c Missing: {env_var} ({description})\")\n            return False\n\n    # Test basic ADK functionality\n    try:\n        from google.adk.agents import LiveRequestQueue\n        from google.genai.types import Content, Part\n\n        # Create test queue\n        queue = LiveRequestQueue()\n        test_content = Content(parts=[Part(text=\"Test message\")])\n        queue.send_content(test_content)\n        queue.close()\n\n        print(\"\u2713 Basic ADK functionality test passed\")\n\n    except Exception as e:\n        print(f\"\u274c ADK functionality test failed: {e}\")\n        return False\n\n    print(\"\\n\ud83c\udf89 Environment validation successful!\")\n    print(\"\\nNext steps:\")\n    print(\"\u2022 Start building your streaming agents in src/agents/\")\n    print(\"\u2022 Create custom tools in src/tools/\")\n    print(\"\u2022 Add utility functions in src/utils/\")\n    print(\"\u2022 Test with Part 3 examples\")\n\n    return True\n\ndef main():\n    \"\"\"Run environment validation.\"\"\"\n\n    try:\n        success = validate_environment()\n        sys.exit(0 if success else 1)\n\n    except KeyboardInterrupt:\n        print(\"\\n\\n\u26a0\ufe0f Validation interrupted by user\")\n        sys.exit(1)\n    except Exception as e:\n        print(f\"\\n\u274c Unexpected error: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"streaming/dev-guide/part1/#_6","title":"\u5c08\u6848\u7d50\u69cb","text":"<p>\u73fe\u5728\u4f60\u7684\u4e32\u6d41\u5c08\u6848\u61c9\u8a72\u5177\u6709\u4ee5\u4e0b\u7d50\u69cb\uff1a</p> <pre><code>your-streaming-project/\n\u251c\u2500\u2500 .env                              # Environment variables (API keys)\n\u251c\u2500\u2500 requirements.txt                 # Python dependencies\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 part1/\n        \u2514\u2500\u2500 1-3-1_environment_setup.py  # Environment validation script\n</code></pre>"},{"location":"streaming/dev-guide/part1/#_7","title":"\u57f7\u884c","text":"<p>\u8acb\u4f7f\u7528\u6211\u5011\u7684\u5b8c\u6574\u74b0\u5883\u8a2d\u5b9a\u8173\u672c\uff0c\u4ee5\u78ba\u4fdd\u6240\u6709\u9805\u76ee\u90fd\u5df2\u6b63\u78ba\u8a2d\u5b9a\uff1a</p> <pre><code>python src/part1/1-3-1_environment_setup.py\n</code></pre> <p>Expected Output</p> <p>\u7576\u4f60\u57f7\u884c\u9a57\u8b49\u6307\u4ee4\u78bc\u6642\uff0c\u61c9\u8a72\u6703\u770b\u5230\u985e\u4f3c\u4ee5\u4e0b\u7684\u8f38\u51fa\uff1a</p> <pre><code>\ud83d\udd27 ADK Streaming Environment Validation\n=============================================\n\u2713 Environment file loaded: /path/to/your-streaming-project/.env\n\u2713 Python version: 3.12.8\n\u2713 ADK import successful\n\u2713 ADK version: 1.3.0\n\u2713 Import: google.adk.agents\n\u2713 Import: google.adk.runners\n\u2713 Import: google.genai.types\n\u2713 Platform configuration: FALSE\n\u2713 API authentication: AIzaSyAolZ...\n\u2713 Basic ADK functionality test passed\n\n\ud83c\udf89 Environment validation successful!\n</code></pre> <p>\u9019\u500b\u5b8c\u6574\u7684\u9a57\u8b49\u8173\u672c\u6703\u6aa2\u67e5\uff1a</p> <ul> <li>Agent Development Kit (ADK) \u7684\u5b89\u88dd\u8207\u7248\u672c</li> <li>\u5fc5\u8981\u7684\u74b0\u5883\u8b8a\u6578</li> <li>API KEY \u9a57\u8b49</li> <li>\u57fa\u672c\u7684 import \u9a57\u8b49</li> </ul>"},{"location":"streaming/dev-guide/part1/#_8","title":"\u4e0b\u4e00\u6b65","text":"<p>\u7576\u4f60\u7684\u74b0\u5883\u8a2d\u5b9a\u5b8c\u6210\u5f8c\uff0c\u4f60\u5c31\u53ef\u4ee5\u958b\u59cb\u6df1\u5165\u6838\u5fc3\u4e32\u6d41 API \u4e86\u3002\u5728\u4e0b\u4e00\u90e8\u5206\uff08\u5373\u5c07\u63a8\u51fa\uff09\u4f60\u5c07\u5b78\u7fd2\uff1a</p> <ul> <li>LiveRequestQueue\uff1a\u96d9\u5411\u901a\u8a0a\u7684\u6838\u5fc3</li> <li>run_live() \u65b9\u6cd5\uff1a\u555f\u52d5\u4e32\u6d41 session</li> <li>\u4e8b\u4ef6\u8655\u7406\uff1a\u8655\u7406\u5373\u6642\u56de\u61c9</li> <li>Gemini Live API\uff1a\u76f4\u63a5\u6574\u5408\u7684\u6a21\u5f0f</li> </ul>"},{"location":"tools/","title":"\u5de5\u5177\uff08Tools\uff09","text":""},{"location":"tools/#tool","title":"\u4ec0\u9ebc\u662f\u5de5\u5177\uff08Tool\uff09\uff1f","text":"<p>\u5728 Agent Development Kit (ADK) \u7684\u8a9e\u5883\u4e0b\uff0c\u5de5\u5177\uff08Tool\uff09\u4ee3\u8868\u8ce6\u4e88 AI agent \u7279\u5b9a\u80fd\u529b\u7684\u5143\u4ef6\uff0c\u4f7f\u5176\u80fd\u57f7\u884c\u52d5\u4f5c\u4e26\u8207\u5916\u90e8\u4e16\u754c\u4e92\u52d5\uff0c\u7a81\u7834\u50c5\u6709\u6587\u5b57\u751f\u6210\u8207\u63a8\u7406\u7684\u6838\u5fc3\u80fd\u529b\u3002\u80fd\u5920\u6709\u6548\u904b\u7528\u5de5\u5177\uff0c\u6b63\u662f\u6709\u80fd\u529b\u7684 agent \u8207\u57fa\u790e\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u4e4b\u9593\u7684\u4e3b\u8981\u5340\u5225\u3002</p> <p>\u5f9e\u6280\u8853\u5c64\u9762\u4f86\u770b\uff0c\u5de5\u5177\u901a\u5e38\u662f\u4e00\u500b\u6a21\u7d44\u5316\u7684\u7a0b\u5f0f\u78bc\u5143\u4ef6\u2014\u2014\u4f8b\u5982 Python/Java \u51fd\u5f0f\u3001\u985e\u5225\u65b9\u6cd5\uff0c\u751a\u81f3\u662f\u53e6\u4e00\u500b\u5c08\u9580\u7684 agent\u2014\u2014\u8a2d\u8a08\u4f86\u57f7\u884c\u660e\u78ba\u3001\u9810\u5b9a\u7fa9\u7684\u4efb\u52d9\u3002\u9019\u4e9b\u4efb\u52d9\u5f80\u5f80\u6d89\u53ca\u8207\u5916\u90e8\u7cfb\u7d71\u6216\u8cc7\u6599\u7684\u4e92\u52d5\u3002</p> <p></p>"},{"location":"tools/#_1","title":"\u4e3b\u8981\u7279\u9ede","text":"<p>\u4ee5\u884c\u52d5\u70ba\u5c0e\u5411\uff1a \u5de5\u5177\u7528\u65bc\u57f7\u884c\u7279\u5b9a\u52d5\u4f5c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u67e5\u8a62\u8cc7\u6599\u5eab</li> <li>\u767c\u9001 API \u8acb\u6c42\uff08\u4f8b\u5982\u53d6\u5f97\u5929\u6c23\u8cc7\u6599\u3001\u9810\u8a02\u7cfb\u7d71\uff09</li> <li>\u7db2\u9801\u641c\u5c0b</li> <li>\u57f7\u884c\u7a0b\u5f0f\u78bc\u7247\u6bb5</li> <li>\u5f9e\u6587\u4ef6\u4e2d\u64f7\u53d6\u8cc7\u8a0a\uff08RAG\uff09</li> <li>\u8207\u5176\u4ed6\u8edf\u9ad4\u6216\u670d\u52d9\u4e92\u52d5</li> </ul> <p>\u64f4\u5c55 agent \u80fd\u529b\uff1a \u5de5\u5177\u8b93 agent \u80fd\u5920\u5b58\u53d6\u5373\u6642\u8cc7\u8a0a\u3001\u5f71\u97ff\u5916\u90e8\u7cfb\u7d71\uff0c\u4e26\u7a81\u7834\u8a13\u7df4\u8cc7\u6599\u672c\u8eab\u7684\u77e5\u8b58\u9650\u5236\u3002</p> <p>\u57f7\u884c\u9810\u5b9a\u7fa9\u908f\u8f2f\uff1a \u95dc\u9375\u5728\u65bc\uff0c\u5de5\u5177\u50c5\u57f7\u884c\u7279\u5b9a\u3001\u7531\u958b\u767c\u8005\u5b9a\u7fa9\u7684\u908f\u8f2f\u3002\u5de5\u5177\u672c\u8eab\u4e26\u4e0d\u5177\u5099\u50cf agent \u7684\u6838\u5fc3\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u90a3\u6a23\u7684\u7368\u7acb\u63a8\u7406\u80fd\u529b\u3002LLM \u8ca0\u8cac\u5224\u65b7\u4f55\u6642\u3001\u4ee5\u4f55\u7a2e\u8f38\u5165\u4f7f\u7528\u54ea\u500b\u5de5\u5177\uff0c\u800c\u5de5\u5177\u672c\u8eab\u50c5\u57f7\u884c\u5176\u6307\u5b9a\u7684\u529f\u80fd\u3002</p>"},{"location":"tools/#agent","title":"agent \u5982\u4f55\u4f7f\u7528\u5de5\u5177","text":"<p>agent \u6703\u900f\u904e\u51fd\u5f0f\u547c\u53eb\u7b49\u6a5f\u5236\u52d5\u614b\u904b\u7528\u5de5\u5177\u3002\u4e00\u822c\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li>\u63a8\u7406\uff1a agent \u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6703\u5206\u6790\u7cfb\u7d71\u6307\u4ee4\u3001\u5c0d\u8a71\u6b77\u53f2\u8207\u4f7f\u7528\u8005\u8acb\u6c42\u3002</li> <li>\u9078\u64c7\uff1a \u6839\u64da\u5206\u6790\u7d50\u679c\uff0cLLM \u6703\u6839\u64da agent \u53ef\u7528\u7684\u5de5\u5177\u53ca\u6bcf\u500b\u5de5\u5177\u7684 docstring\uff0c\u6c7a\u5b9a\u662f\u5426\u57f7\u884c\u67d0\u500b\u5de5\u5177\u3002</li> <li>\u547c\u53eb\uff1a LLM \u7522\u751f\u6240\u9700\u7684\u53c3\u6578\uff08\u8f38\u5165\uff09\uff0c\u4e26\u89f8\u767c\u9078\u5b9a\u5de5\u5177\u7684\u57f7\u884c\u3002</li> <li>\u89c0\u5bdf\uff1a agent \u63a5\u6536\u5de5\u5177\u56de\u50b3\u7684\u8f38\u51fa\uff08\u7d50\u679c\uff09\u3002</li> <li>\u6574\u5408\uff1a agent \u5c07\u5de5\u5177\u7684\u8f38\u51fa\u7d0d\u5165\u6301\u7e8c\u7684\u63a8\u7406\u904e\u7a0b\uff0c\u7528\u65bc\u7522\u751f\u4e0b\u4e00\u6b65\u56de\u61c9\u3001\u6c7a\u5b9a\u5f8c\u7e8c\u52d5\u4f5c\uff0c\u6216\u5224\u65b7\u76ee\u6a19\u662f\u5426\u5df2\u5b8c\u6210\u3002</li> </ol> <p>\u4f60\u53ef\u4ee5\u5c07\u5de5\u5177\u60f3\u50cf\u6210 agent \u667a\u6167\u6838\u5fc3\uff08LLM\uff09\u53ef\u96a8\u9700\u53d6\u7528\u7684\u5c08\u696d\u5de5\u5177\u7bb1\uff0c\u5354\u52a9\u5b8c\u6210\u8907\u96dc\u4efb\u52d9\u3002</p>"},{"location":"tools/#adk","title":"ADK \u4e2d\u7684\u5de5\u5177\u985e\u578b","text":"<p>Agent Development Kit (ADK) \u652f\u63f4\u591a\u7a2e\u5de5\u5177\u985e\u578b\uff0c\u9748\u6d3b\u6eff\u8db3\u4e0d\u540c\u9700\u6c42\uff1a</p> <ol> <li>Function Tools\uff1a \u7531\u4f60\u81ea\u884c\u5efa\u7acb\u3001\u91dd\u5c0d\u61c9\u7528\u9700\u6c42\u8a2d\u8a08\u7684\u5de5\u5177\u3002<ul> <li>Functions/Methods\uff1a \u5728\u7a0b\u5f0f\u78bc\u4e2d\u5b9a\u7fa9\u6a19\u6e96\u540c\u6b65\u51fd\u5f0f\u6216\u65b9\u6cd5\uff08\u5982 Python \u7684 def\uff09\u3002</li> <li>Agents-as-Tools\uff1a \u5c07\u53e6\u4e00\u500b\uff08\u53ef\u80fd\u662f\u5c08\u9580\u7684\uff09agent \u4f5c\u70ba\u7236 agent \u7684\u5de5\u5177\u4f7f\u7528\u3002</li> <li>Long Running Function Tools\uff1a \u652f\u63f4\u57f7\u884c\u975e\u540c\u6b65\u64cd\u4f5c\u6216\u9700\u8f03\u9577\u6642\u9593\u5b8c\u6210\u7684\u5de5\u5177\u3002</li> </ul> </li> <li>Built-in Tools\uff1a \u6846\u67b6\u5167\u5efa\u3001\u53ef\u76f4\u63a5\u4f7f\u7528\u7684\u5e38\u7528\u5de5\u5177\u3002         \u4f8b\u5982\uff1aGoogle Search\u3001\u7a0b\u5f0f\u78bc\u57f7\u884c\u3001\u6aa2\u7d22\u589e\u5f37\u751f\u6210\uff08RAG\uff09\u3002</li> <li>Third-Party Tools\uff1a \u7121\u7e2b\u6574\u5408\u81ea\u71b1\u9580\u5916\u90e8\u51fd\u5f0f\u5eab\u7684\u5de5\u5177\u3002         \u4f8b\u5982\uff1aLangChain Tools\u3001CrewAI Tools\u3002</li> </ol> <p>\u8acb\u53c3\u95b1\u4e0a\u65b9\u9023\u7d50\u7684\u5404\u985e\u578b\u5de5\u5177\u6587\u4ef6\u9801\u9762\uff0c\u7372\u53d6\u8a73\u7d30\u8aaa\u660e\u8207\u7bc4\u4f8b\u3002</p>"},{"location":"tools/#agent_1","title":"\u5728 agent \u6307\u4ee4\u4e2d\u5f15\u7528\u5de5\u5177","text":"<p>\u5728 agent \u7684\u6307\u4ee4\u4e2d\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4ee5\u51fd\u5f0f\u540d\u7a31\u5f15\u7528\u5de5\u5177\u3002\u5982\u679c\u5de5\u5177\u7684\u51fd\u5f0f\u540d\u7a31\u8207docstring\u8db3\u5920\u6e05\u695a\uff0c\u5247\u4f60\u7684\u6307\u4ee4\u53ef\u8457\u91cd\u65bc\u4f55\u6642\u8b93\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u4f7f\u7528\u8a72\u5de5\u5177\u3002\u9019\u6709\u52a9\u65bc\u63d0\u5347\u6307\u4ee4\u660e\u78ba\u6027\uff0c\u4e26\u5354\u52a9\u6a21\u578b\u7406\u89e3\u6bcf\u500b\u5de5\u5177\u7684\u9810\u671f\u7528\u9014\u3002</p> <p>\u660e\u78ba\u6307\u793a agent \u5982\u4f55\u8655\u7406\u5de5\u5177\u53ef\u80fd\u7522\u751f\u7684\u5404\u7a2e\u56de\u50b3\u503c\u4e5f\u975e\u5e38\u91cd\u8981\u3002\u4f8b\u5982\uff0c\u82e5\u5de5\u5177\u56de\u50b3\u932f\u8aa4\u8a0a\u606f\uff0c\u4f60\u61c9\u5728\u6307\u4ee4\u4e2d\u8aaa\u660e agent \u61c9\u8a72\u91cd\u8a66\u64cd\u4f5c\u3001\u653e\u68c4\u4efb\u52d9\uff0c\u6216\u5411\u4f7f\u7528\u8005\u8acb\u6c42\u66f4\u591a\u8cc7\u8a0a\u3002</p> <p>\u6b64\u5916\uff0cADK \u652f\u63f4\u5de5\u5177\u7684\u4e32\u63a5\u4f7f\u7528\uff0c\u5373\u4e00\u500b\u5de5\u5177\u7684\u8f38\u51fa\u53ef\u4f5c\u70ba\u53e6\u4e00\u500b\u5de5\u5177\u7684\u8f38\u5165\u3002\u5be6\u4f5c\u9019\u985e\u5de5\u4f5c\u6d41\u7a0b\u6642\uff0c\u8acb\u52d9\u5fc5\u5728 agent \u6307\u4ee4\u4e2d\u63cf\u8ff0\u9810\u671f\u7684\u5de5\u5177\u4f7f\u7528\u9806\u5e8f\uff0c\u4ee5\u5f15\u5c0e\u6a21\u578b\u4f9d\u5e8f\u5b8c\u6210\u5fc5\u8981\u6b65\u9a5f\u3002</p>"},{"location":"tools/#_2","title":"\u7bc4\u4f8b","text":"<p>\u4ee5\u4e0b\u7bc4\u4f8b\u5c55\u793a agent \u5982\u4f55\u5728\u6307\u4ee4\u4e2d\u5f15\u7528\u5de5\u5177\u7684\u51fd\u5f0f\u540d\u7a31\u4f86\u4f7f\u7528\u5de5\u5177\uff0c\u540c\u6642\u8aaa\u660e\u5982\u4f55\u5f15\u5c0e agent \u8655\u7406\u5de5\u5177\u7684\u4e0d\u540c\u56de\u50b3\u503c\uff08\u5982\u6210\u529f\u6216\u932f\u8aa4\u8a0a\u606f\uff09\uff0c\u4ee5\u53ca\u5982\u4f55\u5354\u8abf\u591a\u500b\u5de5\u5177\u7684\u4e32\u63a5\u4f7f\u7528\u4f86\u5b8c\u6210\u4efb\u52d9\u3002</p> PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport asyncio\nfrom google.adk.agents import Agent\nfrom google.adk.tools import FunctionTool\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.genai import types\n\nAPP_NAME=\"weather_sentiment_agent\"\nUSER_ID=\"user1234\"\nSESSION_ID=\"1234\"\nMODEL_ID=\"gemini-2.0-flash\"\n\n# Tool 1\ndef get_weather_report(city: str) -&gt; dict:\n    \"\"\"Retrieves the current weather report for a specified city.\n\n    Returns:\n        dict: A dictionary containing the weather information with a 'status' key ('success' or 'error') and a 'report' key with the weather details if successful, or an 'error_message' if an error occurred.\n    \"\"\"\n    if city.lower() == \"london\":\n        return {\"status\": \"success\", \"report\": \"The current weather in London is cloudy with a temperature of 18 degrees Celsius and a chance of rain.\"}\n    elif city.lower() == \"paris\":\n        return {\"status\": \"success\", \"report\": \"The weather in Paris is sunny with a temperature of 25 degrees Celsius.\"}\n    else:\n        return {\"status\": \"error\", \"error_message\": f\"Weather information for '{city}' is not available.\"}\n\nweather_tool = FunctionTool(func=get_weather_report)\n\n\n# Tool 2\ndef analyze_sentiment(text: str) -&gt; dict:\n    \"\"\"Analyzes the sentiment of the given text.\n\n    Returns:\n        dict: A dictionary with 'sentiment' ('positive', 'negative', or 'neutral') and a 'confidence' score.\n    \"\"\"\n    if \"good\" in text.lower() or \"sunny\" in text.lower():\n        return {\"sentiment\": \"positive\", \"confidence\": 0.8}\n    elif \"rain\" in text.lower() or \"bad\" in text.lower():\n        return {\"sentiment\": \"negative\", \"confidence\": 0.7}\n    else:\n        return {\"sentiment\": \"neutral\", \"confidence\": 0.6}\n\nsentiment_tool = FunctionTool(func=analyze_sentiment)\n\n\n# Agent\nweather_sentiment_agent = Agent(\n    model=MODEL_ID,\n    name='weather_sentiment_agent',\n    instruction=\"\"\"You are a helpful assistant that provides weather information and analyzes the sentiment of user feedback.\n**If the user asks about the weather in a specific city, use the 'get_weather_report' tool to retrieve the weather details.**\n**If the 'get_weather_report' tool returns a 'success' status, provide the weather report to the user.**\n**If the 'get_weather_report' tool returns an 'error' status, inform the user that the weather information for the specified city is not available and ask if they have another city in mind.**\n**After providing a weather report, if the user gives feedback on the weather (e.g., 'That's good' or 'I don't like rain'), use the 'analyze_sentiment' tool to understand their sentiment.** Then, briefly acknowledge their sentiment.\nYou can handle these tasks sequentially if needed.\"\"\",\n    tools=[weather_tool, sentiment_tool]\n)\n\nasync def main():\n    \"\"\"Main function to run the agent asynchronously.\"\"\"\n    # Session and Runner Setup\n    session_service = InMemorySessionService()\n    # Use 'await' to correctly create the session\n    await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n\n    runner = Runner(agent=weather_sentiment_agent, app_name=APP_NAME, session_service=session_service)\n\n    # Agent Interaction\n    query = \"weather in london?\"\n    print(f\"User Query: {query}\")\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n\n    # The runner's run method handles the async loop internally\n    events = runner.run(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response:\", final_response)\n\n# Standard way to run the main async function\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <pre><code>import com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.adk.tools.ToolContext; // Ensure this import is correct\nimport com.google.common.collect.ImmutableList;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\npublic class WeatherSentimentAgentApp {\n\n  private static final String APP_NAME = \"weather_sentiment_agent\";\n  private static final String USER_ID = \"user1234\";\n  private static final String SESSION_ID = \"1234\";\n  private static final String MODEL_ID = \"gemini-2.0-flash\";\n\n  /**\n   * Retrieves the current weather report for a specified city.\n   *\n   * @param city The city for which to retrieve the weather report.\n   * @param toolContext The context for the tool.\n   * @return A dictionary containing the weather information.\n   */\n  public static Map&lt;String, Object&gt; getWeatherReport(\n      @Schema(name = \"city\")\n      String city,\n      @Schema(name = \"toolContext\")\n      ToolContext toolContext) {\n    Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();\n\n    if (city.toLowerCase(Locale.ROOT).equals(\"london\")) {\n      response.put(\"status\", \"success\");\n      response.put(\n          \"report\",\n          \"The current weather in London is cloudy with a temperature of 18 degrees Celsius and a\"\n              + \" chance of rain.\");\n    } else if (city.toLowerCase(Locale.ROOT).equals(\"paris\")) {\n      response.put(\"status\", \"success\");\n      response.put(\n          \"report\", \"The weather in Paris is sunny with a temperature of 25 degrees Celsius.\");\n    } else {\n      response.put(\"status\", \"error\");\n      response.put(\n          \"error_message\", String.format(\"Weather information for '%s' is not available.\", city));\n    }\n    return response;\n  }\n\n  /**\n   * Analyzes the sentiment of the given text.\n   *\n   * @param text The text to analyze.\n   * @param toolContext The context for the tool.\n   * @return A dictionary with sentiment and confidence score.\n   */\n  public static Map&lt;String, Object&gt; analyzeSentiment(\n      @Schema(name = \"text\")\n      String text,\n      @Schema(name = \"toolContext\")\n      ToolContext toolContext) {\n    Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();\n    String lowerText = text.toLowerCase(Locale.ROOT);\n    if (lowerText.contains(\"good\") || lowerText.contains(\"sunny\")) {\n      response.put(\"sentiment\", \"positive\");\n      response.put(\"confidence\", 0.8);\n    } else if (lowerText.contains(\"rain\") || lowerText.contains(\"bad\")) {\n      response.put(\"sentiment\", \"negative\");\n      response.put(\"confidence\", 0.7);\n    } else {\n      response.put(\"sentiment\", \"neutral\");\n      response.put(\"confidence\", 0.6);\n    }\n    return response;\n  }\n\n  /**\n   * Calls the agent with the given query and prints the final response.\n   *\n   * @param runner The runner to use.\n   * @param query The query to send to the agent.\n   */\n  public static void callAgent(Runner runner, String query) {\n    Content content = Content.fromParts(Part.fromText(query));\n\n    InMemorySessionService sessionService = (InMemorySessionService) runner.sessionService();\n    Session session =\n        sessionService\n            .createSession(APP_NAME, USER_ID, /* state= */ null, SESSION_ID)\n            .blockingGet();\n\n    runner\n        .runAsync(session.userId(), session.id(), content)\n        .forEach(\n            event -&gt; {\n              if (event.finalResponse()\n                  &amp;&amp; event.content().isPresent()\n                  &amp;&amp; event.content().get().parts().isPresent()\n                  &amp;&amp; !event.content().get().parts().get().isEmpty()\n                  &amp;&amp; event.content().get().parts().get().get(0).text().isPresent()) {\n                String finalResponse = event.content().get().parts().get().get(0).text().get();\n                System.out.println(\"Agent Response: \" + finalResponse);\n              }\n            });\n  }\n\n  public static void main(String[] args) throws NoSuchMethodException {\n    FunctionTool weatherTool =\n        FunctionTool.create(\n            WeatherSentimentAgentApp.class.getMethod(\n                \"getWeatherReport\", String.class, ToolContext.class));\n    FunctionTool sentimentTool =\n        FunctionTool.create(\n            WeatherSentimentAgentApp.class.getMethod(\n                \"analyzeSentiment\", String.class, ToolContext.class));\n\n    BaseAgent weatherSentimentAgent =\n        LlmAgent.builder()\n            .model(MODEL_ID)\n            .name(\"weather_sentiment_agent\")\n            .description(\"Weather Sentiment Agent\")\n            .instruction(\"\"\"\n                    You are a helpful assistant that provides weather information and analyzes the\n                    sentiment of user feedback\n                    **If the user asks about the weather in a specific city, use the\n                    'get_weather_report' tool to retrieve the weather details.**\n                    **If the 'get_weather_report' tool returns a 'success' status, provide the\n                    weather report to the user.**\n                    **If the 'get_weather_report' tool returns an 'error' status, inform the\n                    user that the weather information for the specified city is not available\n                    and ask if they have another city in mind.**\n                    **After providing a weather report, if the user gives feedback on the\n                    weather (e.g., 'That's good' or 'I don't like rain'), use the\n                    'analyze_sentiment' tool to understand their sentiment.** Then, briefly\n                    acknowledge their sentiment.\n                    You can handle these tasks sequentially if needed.\n                    \"\"\")\n            .tools(ImmutableList.of(weatherTool, sentimentTool))\n            .build();\n\n    InMemorySessionService sessionService = new InMemorySessionService();\n    Runner runner = new Runner(weatherSentimentAgent, APP_NAME, null, sessionService);\n\n    // Change the query to ensure the tool is called with a valid city that triggers a \"success\"\n    // response from the tool, like \"london\" (without the question mark).\n    callAgent(runner, \"weather in paris\");\n  }\n}\n</code></pre>"},{"location":"tools/#tool-context","title":"Tool Context","text":"<p>\u5c0d\u65bc\u66f4\u9032\u968e\u7684\u60c5\u5883\uff0cAgent Development Kit (ADK) \u5141\u8a31\u4f60\u5728\u5de5\u5177\u51fd\u5f0f\uff08tool function\uff09\u4e2d\uff0c\u900f\u904e\u52a0\u5165\u7279\u6b8a\u53c3\u6578 <code>tool_context: ToolContext</code>\uff0c\u5b58\u53d6\u984d\u5916\u7684\u4e0a\u4e0b\u6587\u8cc7\u8a0a\u3002\u53ea\u8981\u5728\u51fd\u5f0f\u7c3d\u540d\u4e2d\u52a0\u5165\u6b64\u53c3\u6578\uff0c\u7576 agent \u57f7\u884c\u671f\u9593\u547c\u53eb\u4f60\u7684\u5de5\u5177\u6642\uff0cADK \u6703\u81ea\u52d5\u63d0\u4f9b\u4e00\u500b ToolContext \u985e\u5225\u7684\u5be6\u4f8b\u3002</p> <p>ToolContext \u63d0\u4f9b\u4e86\u591a\u9805\u95dc\u9375\u8cc7\u8a0a\u8207\u63a7\u5236\u9078\u9805\uff1a</p> <ul> <li> <p><code>state: State</code>\uff1a\u8b80\u53d6\u8207\u4fee\u6539\u76ee\u524d session state\u3002\u9019\u88e1\u6240\u505a\u7684\u8b8a\u66f4\u6703\u88ab\u8ffd\u8e64\u4e26\u6301\u4e45\u5316\u3002</p> </li> <li> <p><code>actions: EventActions</code>\uff1a\u5f71\u97ff agent \u5728\u5de5\u5177\u57f7\u884c\u5f8c\u7684\u5f8c\u7e8c\u884c\u70ba\uff08\u4f8b\u5982\uff1a\u8df3\u904e\u6458\u8981\u3001\u8f49\u4ea4\u7d66\u5176\u4ed6 agent \u7b49\uff09\u3002</p> </li> <li> <p><code>function_call_id: str</code>\uff1a\u7531\u6846\u67b6\u6307\u6d3e\u7d66\u672c\u6b21\u5de5\u5177\u547c\u53eb\u7684\u552f\u4e00\u8b58\u5225\u78bc\u3002\u53ef\u7528\u65bc\u8ffd\u8e64\u8207\u9a57\u8b49\u56de\u61c9\u7684\u95dc\u806f\u3002\u7576\u55ae\u4e00\u6a21\u578b\u56de\u61c9\u4e2d\u547c\u53eb\u591a\u500b\u5de5\u5177\u6642\uff0c\u4e5f\u5f88\u6709\u5e6b\u52a9\u3002</p> </li> <li> <p><code>function_call_event_id: str</code>\uff1a\u6b64\u5c6c\u6027\u63d0\u4f9b\u89f8\u767c\u672c\u6b21\u5de5\u5177\u547c\u53eb\u7684\u4e8b\u4ef6\u552f\u4e00\u8b58\u5225\u78bc\u3002\u9069\u5408\u7528\u65bc\u8ffd\u8e64\u8207\u8a18\u9304\u3002</p> </li> <li> <p><code>auth_response: Any</code>\uff1a\u5982\u679c\u5728\u672c\u6b21\u5de5\u5177\u547c\u53eb\u524d\u5df2\u5b8c\u6210\u9a57\u8b49\u6d41\u7a0b\uff0c\u9019\u500b\u5c6c\u6027\u6703\u5305\u542b\u9a57\u8b49\u56de\u61c9\uff0f\u6191\u8b49\u3002</p> </li> <li> <p>\u670d\u52d9\u5b58\u53d6\uff1a\u53ef\u7528\u65bc\u8207\u5df2\u8a2d\u5b9a\u7684\u670d\u52d9\uff08\u5982 Artifacts\u3001Memory\uff09\u4e92\u52d5\u7684\u65b9\u6cd5\u3002</p> </li> </ul> <p>\u8acb\u6ce8\u610f\uff0c\u4e0d\u61c9\u5728\u5de5\u5177\u51fd\u5f0f\u7684 docstring \u4e2d\u5305\u542b <code>tool_context</code> \u53c3\u6578\u3002\u7531\u65bc <code>ToolContext</code> \u662f\u5728\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6c7a\u5b9a\u547c\u53eb\u5de5\u5177\u51fd\u5f0f\u4e4b\u5f8c\uff0c\u7531 ADK \u6846\u67b6\u81ea\u52d5\u6ce8\u5165\uff0c\u56e0\u6b64\u9019\u500b\u53c3\u6578\u8207 LLM \u7684\u6c7a\u7b56\u7121\u95dc\uff0c\u5305\u542b\u5b83\u53cd\u800c\u53ef\u80fd\u8b93 LLM \u611f\u5230\u56f0\u60d1\u3002</p>"},{"location":"tools/#state-management","title":"State Management","text":"<p><code>tool_context.state</code> \u5c6c\u6027\u63d0\u4f9b\u5c0d\u76ee\u524d session state \u7684\u76f4\u63a5\u8b80\u5beb\u5b58\u53d6\u3002\u5b83\u7684\u884c\u70ba\u985e\u4f3c\u65bc\u5b57\u5178\uff0c\u4f46\u6703\u78ba\u4fdd\u6240\u6709\u4fee\u6539\u90fd\u88ab\u8ffd\u8e64\u70ba\u5dee\u7570\uff08delta\uff09\uff0c\u4e26\u7531 SessionService \u6301\u4e45\u5316\u3002\u9019\u8b93\u5de5\u5177\u53ef\u4ee5\u5728\u4e0d\u540c\u4e92\u52d5\u8207 agent \u6b65\u9a5f\u9593\u7dad\u6301\u8207\u5171\u7528\u8cc7\u8a0a\u3002</p> <ul> <li> <p>\u8b80\u53d6\u72c0\u614b\uff1a\u53ef\u4f7f\u7528\u6a19\u6e96\u5b57\u5178\u5b58\u53d6\u65b9\u5f0f\uff08<code>tool_context.state['my_key']</code>\uff09\u6216 <code>.get()</code> \u65b9\u6cd5\uff08<code>tool_context.state.get('my_key', default_value)</code>\uff09\u3002</p> </li> <li> <p>\u5beb\u5165\u72c0\u614b\uff1a\u53ef\u76f4\u63a5\u6307\u5b9a\u503c\uff08<code>tool_context.state['new_key'] = 'new_value'</code>\uff09\u3002\u9019\u4e9b\u8b8a\u66f4\u6703\u88ab\u8a18\u9304\u5728\u7522\u751f\u4e8b\u4ef6\u7684 state_delta \u4e2d\u3002</p> </li> <li> <p>\u72c0\u614b\u524d\u7db4\uff1a\u8acb\u8a18\u5f97\u6a19\u6e96\u7684 state \u524d\u7db4\uff1a</p> <ul> <li> <p><code>app:*</code>\uff1a\u5168\u61c9\u7528\u7a0b\u5f0f\u5171\u7528\u3002</p> </li> <li> <p><code>user:*</code>\uff1a\u76ee\u524d\u4f7f\u7528\u8005\u5728\u6240\u6709 session \u9593\u5171\u7528\u3002</p> </li> <li> <p>\uff08\u7121\u524d\u7db4\uff09\uff1a\u50c5\u9650\u65bc\u76ee\u524d session\u3002</p> </li> <li> <p><code>temp:*</code>\uff1a\u66ab\u6642\u6027\uff0c\u4e0d\u6703\u5728\u591a\u6b21\u547c\u53eb\u9593\u6301\u4e45\u5316\uff08\u9069\u5408\u65bc\u55ae\u6b21 run \u547c\u53eb\u5167\u50b3\u905e\u8cc7\u6599\uff0c\u4f46\u5728\u5de5\u5177 context\uff08\u8de8 LLM \u547c\u53eb\uff09\u4e2d\u901a\u5e38\u8f03\u5c11\u7528\uff09\u3002</p> </li> </ul> </li> </ul> PythonJava <pre><code>from google.adk.tools import ToolContext, FunctionTool\n\ndef update_user_preference(preference: str, value: str, tool_context: ToolContext):\n    \"\"\"Updates a user-specific preference.\"\"\"\n    user_prefs_key = \"user:preferences\"\n    # Get current preferences or initialize if none exist\n    preferences = tool_context.state.get(user_prefs_key, {})\n    preferences[preference] = value\n    # Write the updated dictionary back to the state\n    tool_context.state[user_prefs_key] = preferences\n    print(f\"Tool: Updated user preference '{preference}' to '{value}'\")\n    return {\"status\": \"success\", \"updated_preference\": preference}\n\npref_tool = FunctionTool(func=update_user_preference)\n\n# In an Agent:\n# my_agent = Agent(..., tools=[pref_tool])\n\n# When the LLM calls update_user_preference(preference='theme', value='dark', ...):\n# The tool_context.state will be updated, and the change will be part of the\n# resulting tool response event's actions.state_delta.\n</code></pre> <pre><code>import com.google.adk.tools.FunctionTool;\nimport com.google.adk.tools.ToolContext;\n\n// Updates a user-specific preference.\npublic Map&lt;String, String&gt; updateUserThemePreference(String value, ToolContext toolContext) {\n  String userPrefsKey = \"user:preferences:theme\";\n\n  // Get current preferences or initialize if none exist\n  String preference = toolContext.state().getOrDefault(userPrefsKey, \"\").toString();\n  if (preference.isEmpty()) {\n    preference = value;\n  }\n\n  // Write the updated dictionary back to the state\n  toolContext.state().put(\"user:preferences\", preference);\n  System.out.printf(\"Tool: Updated user preference %s to %s\", userPrefsKey, preference);\n\n  return Map.of(\"status\", \"success\", \"updated_preference\", toolContext.state().get(userPrefsKey).toString());\n  // When the LLM calls updateUserThemePreference(\"dark\"):\n  // The toolContext.state will be updated, and the change will be part of the\n  // resulting tool response event's actions.stateDelta.\n}\n</code></pre>"},{"location":"tools/#agent_2","title":"\u63a7\u5236 agent \u6d41\u7a0b","text":"<p><code>tool_context.actions</code> \u5c6c\u6027\uff08\u5728 Java \u4e2d\u70ba <code>ToolContext.actions()</code>\uff09\u5305\u542b\u4e00\u500b EventActions \u7269\u4ef6\u3002\u900f\u904e\u4fee\u6539\u6b64\u7269\u4ef6\u7684\u5c6c\u6027\uff0c\u60a8\u7684\u5de5\u5177\u53ef\u4ee5\u5f71\u97ff agent \u6216\u6846\u67b6\u5728\u5de5\u5177\u57f7\u884c\u7d50\u675f\u5f8c\u7684\u884c\u70ba\u3002</p> <ul> <li> <p><code>skip_summarization: bool</code>\uff1a\uff08\u9810\u8a2d\u503c\uff1aFalse\uff09\u82e5\u8a2d\u70ba True\uff0c\u5247\u6307\u793a Agent Development Kit (ADK) \u8df3\u904e\u901a\u5e38\u6703\u6458\u8981\u5de5\u5177\u8f38\u51fa\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb\u3002\u5982\u679c\u60a8\u7684\u5de5\u5177\u56de\u50b3\u503c\u5df2\u7d93\u662f\u53ef\u76f4\u63a5\u7d66\u4f7f\u7528\u8005\u7684\u8a0a\u606f\uff0c\u9019\u6703\u5f88\u6709\u7528\u3002</p> </li> <li> <p><code>transfer_to_agent: str</code>\uff1a\u5c07\u6b64\u5c6c\u6027\u8a2d\u70ba\u53e6\u4e00\u500b agent \u7684\u540d\u7a31\u3002\u6846\u67b6\u6703\u505c\u6b62\u76ee\u524d agent \u7684\u57f7\u884c\uff0c\u4e26\u5c07\u5c0d\u8a71\u63a7\u5236\u6b0a\u8f49\u4ea4\u7d66\u6307\u5b9a\u7684 agent\u3002\u9019\u8b93\u5de5\u5177\u53ef\u4ee5\u52d5\u614b\u5730\u5c07\u4efb\u52d9\u4ea4\u7d66\u66f4\u5c08\u696d\u7684 agent \u8655\u7406\u3002</p> </li> <li> <p><code>escalate: bool</code>\uff1a\uff08\u9810\u8a2d\u503c\uff1aFalse\uff09\u8a2d\u70ba True \u6642\uff0c\u8868\u793a\u76ee\u524d agent \u7121\u6cd5\u8655\u7406\u8a72\u8acb\u6c42\uff0c\u61c9\u5c07\u63a7\u5236\u6b0a\u5411\u4e0a\u50b3\u905e\u7d66\u5176\u7236 agent\uff08\u82e5\u6709\u968e\u5c64\u7d50\u69cb\uff09\u3002\u5728 LoopAgent \u4e2d\uff0c\u82e5\u5b50 agent \u7684\u5de5\u5177\u8a2d\u70ba escalate=True\uff0c\u5247\u6703\u7d42\u6b62\u8a72\u8ff4\u5708\u3002</p> </li> </ul>"},{"location":"tools/#_3","title":"\u7bc4\u4f8b","text":"PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import Agent\nfrom google.adk.tools import FunctionTool\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools import ToolContext\nfrom google.genai import types\n\nAPP_NAME=\"customer_support_agent\"\nUSER_ID=\"user1234\"\nSESSION_ID=\"1234\"\n\n\ndef check_and_transfer(query: str, tool_context: ToolContext) -&gt; str:\n    \"\"\"Checks if the query requires escalation and transfers to another agent if needed.\"\"\"\n    if \"urgent\" in query.lower():\n        print(\"Tool: Detected urgency, transferring to the support agent.\")\n        tool_context.actions.transfer_to_agent = \"support_agent\"\n        return \"Transferring to the support agent...\"\n    else:\n        return f\"Processed query: '{query}'. No further action needed.\"\n\nescalation_tool = FunctionTool(func=check_and_transfer)\n\nmain_agent = Agent(\n    model='gemini-2.0-flash',\n    name='main_agent',\n    instruction=\"\"\"You are the first point of contact for customer support of an analytics tool. Answer general queries. If the user indicates urgency, use the 'check_and_transfer' tool.\"\"\",\n    tools=[check_and_transfer]\n)\n\nsupport_agent = Agent(\n    model='gemini-2.0-flash',\n    name='support_agent',\n    instruction=\"\"\"You are the dedicated support agent. Mentioned you are a support handler and please help the user with their urgent issue.\"\"\"\n)\n\nmain_agent.sub_agents = [support_agent]\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=main_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"this is urgent, i cant login\")\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.adk.tools.ToolContext;\nimport com.google.common.collect.ImmutableList;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\npublic class CustomerSupportAgentApp {\n\n  private static final String APP_NAME = \"customer_support_agent\";\n  private static final String USER_ID = \"user1234\";\n  private static final String SESSION_ID = \"1234\";\n  private static final String MODEL_ID = \"gemini-2.0-flash\";\n\n  /**\n   * Checks if the query requires escalation and transfers to another agent if needed.\n   *\n   * @param query The user's query.\n   * @param toolContext The context for the tool.\n   * @return A map indicating the result of the check and transfer.\n   */\n  public static Map&lt;String, Object&gt; checkAndTransfer(\n      @Schema(name = \"query\", description = \"the user query\")\n      String query,\n      @Schema(name = \"toolContext\", description = \"the tool context\")\n      ToolContext toolContext) {\n    Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();\n    if (query.toLowerCase(Locale.ROOT).contains(\"urgent\")) {\n      System.out.println(\"Tool: Detected urgency, transferring to the support agent.\");\n      toolContext.actions().setTransferToAgent(\"support_agent\");\n      response.put(\"status\", \"transferring\");\n      response.put(\"message\", \"Transferring to the support agent...\");\n    } else {\n      response.put(\"status\", \"processed\");\n      response.put(\n          \"message\", String.format(\"Processed query: '%s'. No further action needed.\", query));\n    }\n    return response;\n  }\n\n  /**\n   * Calls the agent with the given query and prints the final response.\n   *\n   * @param runner The runner to use.\n   * @param query The query to send to the agent.\n   */\n  public static void callAgent(Runner runner, String query) {\n    Content content =\n        Content.fromParts(Part.fromText(query));\n\n    InMemorySessionService sessionService = (InMemorySessionService) runner.sessionService();\n    // Fixed: session ID does not need to be an optional.\n    Session session =\n        sessionService\n            .createSession(APP_NAME, USER_ID, /* state= */ null, SESSION_ID)\n            .blockingGet();\n\n    runner\n        .runAsync(session.userId(), session.id(), content)\n        .forEach(\n            event -&gt; {\n              if (event.finalResponse()\n                  &amp;&amp; event.content().isPresent()\n                  &amp;&amp; event.content().get().parts().isPresent()\n                  &amp;&amp; !event.content().get().parts().get().isEmpty()\n                  &amp;&amp; event.content().get().parts().get().get(0).text().isPresent()) {\n                String finalResponse = event.content().get().parts().get().get(0).text().get();\n                System.out.println(\"Agent Response: \" + finalResponse);\n              }\n            });\n  }\n\n  public static void main(String[] args) throws NoSuchMethodException {\n    FunctionTool escalationTool =\n        FunctionTool.create(\n            CustomerSupportAgentApp.class.getMethod(\n                \"checkAndTransfer\", String.class, ToolContext.class));\n\n    LlmAgent supportAgent =\n        LlmAgent.builder()\n            .model(MODEL_ID)\n            .name(\"support_agent\")\n            .description(\"\"\"\n                The dedicated support agent.\n                Mentions it is a support handler and helps the user with their urgent issue.\n            \"\"\")\n            .instruction(\"\"\"\n                You are the dedicated support agent.\n                Mentioned you are a support handler and please help the user with their urgent issue.\n            \"\"\")\n            .build();\n\n    LlmAgent mainAgent =\n        LlmAgent.builder()\n            .model(MODEL_ID)\n            .name(\"main_agent\")\n            .description(\"\"\"\n                The first point of contact for customer support of an analytics tool.\n                Answers general queries.\n                If the user indicates urgency, uses the 'check_and_transfer' tool.\n                \"\"\")\n            .instruction(\"\"\"\n                You are the first point of contact for customer support of an analytics tool.\n                Answer general queries.\n                If the user indicates urgency, use the 'check_and_transfer' tool.\n                \"\"\")\n            .tools(ImmutableList.of(escalationTool))\n            .subAgents(supportAgent)\n            .build();\n    // Fixed: LlmAgent.subAgents() expects 0 arguments.\n    // Sub-agents are now added to the main agent via its builder,\n    // as `subAgents` is a property that should be set during agent construction\n    // if it's not dynamically managed.\n\n    InMemorySessionService sessionService = new InMemorySessionService();\n    Runner runner = new Runner(mainAgent, APP_NAME, null, sessionService);\n\n    // Agent Interaction\n    callAgent(runner, \"this is urgent, i cant login\");\n  }\n}\n</code></pre>"},{"location":"tools/#_4","title":"\u8aaa\u660e","text":"<ul> <li>\u6211\u5011\u5b9a\u7fa9\u4e86\u5169\u500b agent\uff1a<code>main_agent</code> \u548c <code>support_agent</code>\u3002<code>main_agent</code> \u88ab\u8a2d\u8a08\u70ba\u521d\u59cb\u806f\u7d61\u9ede\u3002</li> <li>\u7576 <code>main_agent</code> \u547c\u53eb <code>check_and_transfer</code> \u5de5\u5177\u6642\uff0c\u8a72\u5de5\u5177\u6703\u6aa2\u67e5\u4f7f\u7528\u8005\u7684\u67e5\u8a62\u3002</li> <li>\u5982\u679c\u67e5\u8a62\u5167\u5bb9\u5305\u542b\u300curgent\u300d\u9019\u500b\u8a5e\uff0c\u8a72\u5de5\u5177\u6703\u5b58\u53d6 <code>tool_context</code>\uff0c\u7279\u5225\u662f <code>tool_context.actions</code>\uff0c\u4e26\u5c07 transfer_to_agent \u5c6c\u6027\u8a2d\u70ba <code>support_agent</code>\u3002</li> <li>\u9019\u500b\u52d5\u4f5c\u6703\u901a\u77e5\u6846\u67b6\uff0c\u5c07\u5c0d\u8a71\u63a7\u5236\u6b0a\u8f49\u4ea4\u7d66\u540d\u70ba <code>support_agent</code> \u7684 agent\u3002</li> <li>\u7576 <code>main_agent</code> \u8655\u7406\u7dca\u6025\u67e5\u8a62\u6642\uff0c<code>check_and_transfer</code> \u5de5\u5177\u6703\u89f8\u767c\u8f49\u4ea4\u3002\u63a5\u4e0b\u4f86\u7684\u56de\u61c9\u7406\u60f3\u4e0a\u6703\u4f86\u81ea <code>support_agent</code>\u3002</li> <li>\u5c0d\u65bc\u6c92\u6709\u7dca\u6025\u6027\u7684\u666e\u901a\u67e5\u8a62\uff0c\u8a72\u5de5\u5177\u50c5\u6703\u8655\u7406\u67e5\u8a62\uff0c\u4e0d\u6703\u89f8\u767c\u8f49\u4ea4\u3002</li> </ul> <p>\u9019\u500b\u7bc4\u4f8b\u8aaa\u660e\u4e86\u5de5\u5177\u5982\u4f55\u900f\u904e\u5176 ToolContext \u4e2d\u7684 EventActions\uff0c\u52d5\u614b\u5f71\u97ff\u5c0d\u8a71\u6d41\u7a0b\uff0c\u5c07\u63a7\u5236\u6b0a\u8f49\u4ea4\u7d66\u5176\u4ed6\u5c08\u9580\u7684 agent\u3002</p>"},{"location":"tools/#authentication","title":"\u9a57\u8b49\uff08Authentication\uff09","text":"<p>ToolContext \u63d0\u4f9b\u5de5\u5177\u8207\u9700\u9a57\u8b49 API \u4e92\u52d5\u7684\u6a5f\u5236\u3002\u5982\u679c\u4f60\u7684\u5de5\u5177\u9700\u8981\u8655\u7406\u9a57\u8b49\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\uff1a</p> <ul> <li> <p><code>auth_response</code>\uff1a\u82e5\u9a57\u8b49\u5df2\u7531\u6846\u67b6\u5728\u547c\u53eb\u4f60\u7684\u5de5\u5177\u524d\u8655\u7406\uff08\u5e38\u898b\u65bc RestApiTool \u548c OpenAPI \u5b89\u5168\u6a5f\u5236\uff09\uff0c\u5247\u6b64\u8655\u6703\u5305\u542b\u6191\u8b49\uff08\u4f8b\u5982 token\uff09\u3002</p> </li> <li> <p><code>request_credential(auth_config: dict)</code>\uff1a\u5982\u679c\u4f60\u7684\u5de5\u5177\u5224\u65b7\u9700\u8981\u9a57\u8b49\u4f46\u5c1a\u672a\u53d6\u5f97\u6191\u8b49\uff0c\u8acb\u547c\u53eb\u6b64\u65b9\u6cd5\u3002\u9019\u6703\u901a\u77e5\u6846\u67b6\u6839\u64da\u63d0\u4f9b\u7684 auth_config \u555f\u52d5\u9a57\u8b49\u6d41\u7a0b\u3002</p> </li> <li> <p><code>get_auth_response()</code>\uff1a\u5728\u5f8c\u7e8c\u547c\u53eb\uff08\u65bc request_credential \u6210\u529f\u8655\u7406\u5f8c\uff09\u547c\u53eb\u6b64\u65b9\u6cd5\uff0c\u4ee5\u53d6\u5f97\u4f7f\u7528\u8005\u6240\u63d0\u4f9b\u7684\u6191\u8b49\u3002</p> </li> </ul> <p>\u6709\u95dc\u9a57\u8b49\u6d41\u7a0b\u3001\u8a2d\u5b9a\u8207\u7bc4\u4f8b\u7684\u8a73\u7d30\u8aaa\u660e\uff0c\u8acb\u53c3\u95b1\u5c08\u9580\u7684 Tool Authentication \u6587\u4ef6\u9801\u9762\u3002</p>"},{"location":"tools/#_5","title":"\u5177\u60c5\u5883\u611f\u77e5\u7684\u8cc7\u6599\u5b58\u53d6\u65b9\u6cd5","text":"<p>\u9019\u4e9b\u65b9\u6cd5\u70ba\u4f60\u7684\u5de5\u5177\u63d0\u4f9b\u4fbf\u5229\u7684\u65b9\u5f0f\uff0c\u4ee5\u8207\u7531\u5df2\u8a2d\u5b9a\u670d\u52d9\u7ba1\u7406\u3001\u8207 session \u6216\u4f7f\u7528\u8005\u76f8\u95dc\u7684\u6301\u4e45\u6027\u8cc7\u6599\u4e92\u52d5\u3002</p> <ul> <li> <p><code>list_artifacts()</code>\uff08\u6216 Java \u4e2d\u7684 <code>listArtifacts()</code>\uff09\uff1a\u900f\u904e artifact_service\uff0c\u56de\u50b3\u76ee\u524d session \u6240\u5132\u5b58\u7684\u6240\u6709 artifact \u6a94\u540d\uff08\u6216\u9375\u503c\uff09\u6e05\u55ae\u3002artifact \u901a\u5e38\u662f\u4f7f\u7528\u8005\u4e0a\u50b3\u6216\u5de5\u5177/agent \u7522\u751f\u7684\u6a94\u6848\uff08\u5982\u5716\u7247\u3001\u6587\u4ef6\u7b49\uff09\u3002</p> </li> <li> <p><code>load_artifact(filename: str)</code>\uff1a\u5f9e artifact_service \u4f9d\u6a94\u540d\u53d6\u5f97\u7279\u5b9a artifact\u3002\u4f60\u53ef\u4ee5\u9078\u64c7\u6027\u6307\u5b9a\u7248\u672c\uff1b\u82e5\u672a\u6307\u5b9a\u5247\u56de\u50b3\u6700\u65b0\u7248\u672c\u3002\u56de\u50b3\u4e00\u500b <code>google.genai.types.Part</code> \u7269\u4ef6\uff0c\u5167\u542b artifact \u8cc7\u6599\u8207 mime type\uff0c\u82e5\u627e\u4e0d\u5230\u5247\u56de\u50b3 None\u3002</p> </li> <li> <p><code>save_artifact(filename: str, artifact: types.Part)</code>\uff1a\u5c07 artifact \u7684\u65b0\u7248\u672c\u5132\u5b58\u81f3 artifact_service\u3002\u56de\u50b3\u65b0\u7248\u672c\u865f\uff08\u5f9e 0 \u958b\u59cb\uff09\u3002</p> </li> <li> <p><code>search_memory(query: str)</code> </p> <p>\u4f7f\u7528\u5df2\u8a2d\u5b9a\u7684 <code>memory_service</code> \u67e5\u8a62\u4f7f\u7528\u8005\u7684\u9577\u671f\u8a18\u61b6\u3002\u9019\u5c0d\u65bc\u5f9e\u904e\u5f80\u4e92\u52d5\u6216\u5df2\u5132\u5b58\u77e5\u8b58\u4e2d\u6aa2\u7d22\u76f8\u95dc\u8cc7\u8a0a\u975e\u5e38\u6709\u7528\u3002SearchMemoryResponse \u7684\u7d50\u69cb\u53d6\u6c7a\u65bc\u5177\u9ad4\u7684\u8a18\u61b6\u670d\u52d9\u5be6\u4f5c\uff0c\u4f46\u901a\u5e38\u5305\u542b\u76f8\u95dc\u7684\u6587\u5b57\u7247\u6bb5\u6216\u5c0d\u8a71\u6458\u9304\u3002</p> </li> </ul>"},{"location":"tools/#_6","title":"\u7bc4\u4f8b","text":"PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.tools import ToolContext, FunctionTool\nfrom google.genai import types\n\n\ndef process_document(\n    document_name: str, analysis_query: str, tool_context: ToolContext\n) -&gt; dict:\n    \"\"\"Analyzes a document using context from memory.\"\"\"\n\n    # 1. Load the artifact\n    print(f\"Tool: Attempting to load artifact: {document_name}\")\n    document_part = tool_context.load_artifact(document_name)\n\n    if not document_part:\n        return {\"status\": \"error\", \"message\": f\"Document '{document_name}' not found.\"}\n\n    document_text = document_part.text  # Assuming it's text for simplicity\n    print(f\"Tool: Loaded document '{document_name}' ({len(document_text)} chars).\")\n\n    # 2. Search memory for related context\n    print(f\"Tool: Searching memory for context related to: '{analysis_query}'\")\n    memory_response = tool_context.search_memory(\n        f\"Context for analyzing document about {analysis_query}\"\n    )\n    memory_context = \"\\n\".join(\n        [\n            m.events[0].content.parts[0].text\n            for m in memory_response.memories\n            if m.events and m.events[0].content\n        ]\n    )  # Simplified extraction\n    print(f\"Tool: Found memory context: {memory_context[:100]}...\")\n\n    # 3. Perform analysis (placeholder)\n    analysis_result = f\"Analysis of '{document_name}' regarding '{analysis_query}' using memory context: [Placeholder Analysis Result]\"\n    print(\"Tool: Performed analysis.\")\n\n    # 4. Save the analysis result as a new artifact\n    analysis_part = types.Part.from_text(text=analysis_result)\n    new_artifact_name = f\"analysis_{document_name}\"\n    version = await tool_context.save_artifact(new_artifact_name, analysis_part)\n    print(f\"Tool: Saved analysis result as '{new_artifact_name}' version {version}.\")\n\n    return {\n        \"status\": \"success\",\n        \"analysis_artifact\": new_artifact_name,\n        \"version\": version,\n    }\n\n\ndoc_analysis_tool = FunctionTool(func=process_document)\n\n# In an Agent:\n# Assume artifact 'report.txt' was previously saved.\n# Assume memory service is configured and has relevant past data.\n# my_agent = Agent(..., tools=[doc_analysis_tool], artifact_service=..., memory_service=...)\n</code></pre> <pre><code>// Analyzes a document using context from memory.\n// You can also list, load and save artifacts using Callback Context or LoadArtifacts tool.\npublic static @NonNull Maybe&lt;ImmutableMap&lt;String, Object&gt;&gt; processDocument(\n    @Annotations.Schema(description = \"The name of the document to analyze.\") String documentName,\n    @Annotations.Schema(description = \"The query for the analysis.\") String analysisQuery,\n    ToolContext toolContext) {\n\n  // 1. List all available artifacts\n  System.out.printf(\n      \"Listing all available artifacts %s:\", toolContext.listArtifacts().blockingGet());\n\n  // 2. Load an artifact to memory\n  System.out.println(\"Tool: Attempting to load artifact: \" + documentName);\n  Part documentPart = toolContext.loadArtifact(documentName, Optional.empty()).blockingGet();\n  if (documentPart == null) {\n    System.out.println(\"Tool: Document '\" + documentName + \"' not found.\");\n    return Maybe.just(\n        ImmutableMap.&lt;String, Object&gt;of(\n            \"status\", \"error\", \"message\", \"Document '\" + documentName + \"' not found.\"));\n  }\n  String documentText = documentPart.text().orElse(\"\");\n  System.out.println(\n      \"Tool: Loaded document '\" + documentName + \"' (\" + documentText.length() + \" chars).\");\n\n  // 3. Perform analysis (placeholder)\n  String analysisResult =\n      \"Analysis of '\"\n          + documentName\n          + \"' regarding '\"\n          + analysisQuery\n          + \" [Placeholder Analysis Result]\";\n  System.out.println(\"Tool: Performed analysis.\");\n\n  // 4. Save the analysis result as a new artifact\n  Part analysisPart = Part.fromText(analysisResult);\n  String newArtifactName = \"analysis_\" + documentName;\n\n  toolContext.saveArtifact(newArtifactName, analysisPart);\n\n  return Maybe.just(\n      ImmutableMap.&lt;String, Object&gt;builder()\n          .put(\"status\", \"success\")\n          .put(\"analysis_artifact\", newArtifactName)\n          .build());\n}\n// FunctionTool processDocumentTool =\n//      FunctionTool.create(ToolContextArtifactExample.class, \"processDocument\");\n// In the Agent, include this function tool.\n// LlmAgent agent = LlmAgent().builder().tools(processDocumentTool).build();\n</code></pre> <p>\u900f\u904e\u904b\u7528 ToolContext\uff0c\u958b\u767c\u8005\u53ef\u4ee5\u5efa\u7acb\u66f4\u70ba\u9032\u968e\u4e14\u5177\u5099\u60c5\u5883\u611f\u77e5\u80fd\u529b\u7684\u81ea\u8a02\u5de5\u5177\uff08custom tools\uff09\uff0c\u9019\u4e9b\u5de5\u5177\u80fd\u7121\u7e2b\u6574\u5408\u81f3 Agent Development Kit (ADK) \u7684\u67b6\u69cb\u4e2d\uff0c\u4e26\u63d0\u5347 agent \u7684\u6574\u9ad4\u80fd\u529b\u3002</p>"},{"location":"tools/#_7","title":"\u5b9a\u7fa9\u6709\u6548\u7684\u5de5\u5177\u51fd\u5f0f","text":"<p>\u7576\u4f60\u5c07\u67d0\u500b\u65b9\u6cd5\u6216\u51fd\u5f0f\u4f5c\u70ba ADK \u5de5\u5177\uff08Tool\uff09\u4f7f\u7528\u6642\uff0c\u5176\u5b9a\u7fa9\u65b9\u5f0f\u6703\u986f\u8457\u5f71\u97ff agent \u662f\u5426\u80fd\u6b63\u78ba\u4f7f\u7528\u5b83\u3002agent \u6240\u4f9d\u8cf4\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (Large Language Model, LLM) \u4e3b\u8981\u6839\u64da\u8a72\u51fd\u5f0f\u7684 \u540d\u7a31\u3001\u53c3\u6578\uff08arguments\uff09\u3001\u578b\u5225\u63d0\u793a\uff08type hints\uff09\uff0c\u4ee5\u53ca docstring / \u539f\u59cb\u78bc\u8a3b\u89e3 \u4f86\u7406\u89e3\u5176\u7528\u9014\u4e26\u7522\u751f\u6b63\u78ba\u7684\u547c\u53eb\u3002</p> <p>\u4ee5\u4e0b\u662f\u5b9a\u7fa9\u6709\u6548\u5de5\u5177\u51fd\u5f0f\u7684\u95dc\u9375\u6307\u5f15\uff1a</p> <ul> <li> <p>\u51fd\u5f0f\u540d\u7a31\uff1a</p> <ul> <li>\u4f7f\u7528\u63cf\u8ff0\u6027\u3001\u4ee5\u52d5\u8a5e-\u540d\u8a5e\u7d44\u5408\u70ba\u4e3b\u7684\u540d\u7a31\uff0c\u6e05\u695a\u6307\u51fa\u52d5\u4f5c\u5167\u5bb9\uff08\u4f8b\u5982\uff1a<code>get_weather</code>\u3001<code>searchDocuments</code>\u3001<code>schedule_meeting</code>\uff09\u3002</li> <li>\u907f\u514d\u4f7f\u7528\u50cf <code>run</code>\u3001<code>process</code>\u3001<code>handle_data</code> \u9019\u985e\u904e\u65bc\u901a\u7528\u7684\u540d\u7a31\uff0c\u6216 <code>doStuff</code> \u9019\u7a2e\u904e\u65bc\u6a21\u7cca\u7684\u540d\u7a31\u3002\u5373\u4f7f\u63cf\u8ff0\u826f\u597d\uff0c\u50cf <code>do_stuff</code> \u9019\u6a23\u7684\u540d\u7a31\u4e5f\u53ef\u80fd\u8b93\u6a21\u578b\u6df7\u6dc6\u8a72\u5728\u4f55\u6642\u4f7f\u7528\u6b64\u5de5\u5177\uff0c\u800c\u4e0d\u662f\u4f8b\u5982 <code>cancelFlight</code>\u3002</li> <li>LLM \u5728\u9078\u64c7\u5de5\u5177\u6642\uff0c\u6703\u5c07\u51fd\u5f0f\u540d\u7a31\u4f5c\u70ba\u4e3b\u8981\u8b58\u5225\u4f9d\u64da\u3002</li> </ul> </li> <li> <p>\u53c3\u6578\uff08Arguments\uff09\uff1a</p> <ul> <li>\u4f60\u7684\u51fd\u5f0f\u53ef\u4ee5\u6709\u4efb\u610f\u6578\u91cf\u7684\u53c3\u6578\u3002</li> <li>\u8acb\u4f7f\u7528\u6e05\u695a\u4e14\u5177\u63cf\u8ff0\u6027\u7684\u540d\u7a31\uff08\u4f8b\u5982\uff1a<code>city</code> \u53d6\u4ee3 <code>c</code>\uff0c<code>search_query</code> \u53d6\u4ee3 <code>q</code>\uff09\u3002</li> <li>\u5728 Python \u4e2d\u70ba\u6240\u6709\u53c3\u6578\u63d0\u4f9b\u578b\u5225\u63d0\u793a\uff08type hints\uff09\uff08\u4f8b\u5982\uff1a<code>city: str</code>\u3001<code>user_id: int</code>\u3001<code>items: list[str]</code>\uff09\u3002\u9019\u5c0d\u65bc ADK \u7522\u751f\u6b63\u78ba\u7684 LLM schema \u81f3\u95dc\u91cd\u8981\u3002</li> <li>\u78ba\u4fdd\u6240\u6709\u53c3\u6578\u578b\u5225\u7686\u70ba JSON \u53ef\u5e8f\u5217\u5316\u3002\u6240\u6709 Java \u539f\u59cb\u578b\u5225\u4ee5\u53ca\u6a19\u6e96 Python \u578b\u5225\uff08\u5982 <code>str</code>\u3001<code>int</code>\u3001<code>float</code>\u3001<code>bool</code>\u3001<code>list</code>\u3001<code>dict</code>\uff09\u53ca\u5176\u7d44\u5408\u901a\u5e38\u90fd\u5b89\u5168\u3002\u9664\u975e\u81ea\u8a02\u985e\u5225\u5be6\u4f8b\u6709\u660e\u78ba\u7684 JSON \u8868\u793a\uff0c\u5426\u5247\u8acb\u907f\u514d\u76f4\u63a5\u4f5c\u70ba\u53c3\u6578\u50b3\u905e\u8907\u96dc\u7684\u81ea\u8a02\u985e\u5225\u5be6\u4f8b\u3002</li> <li>\u8acb\u52ff\u70ba\u53c3\u6578\u8a2d\u5b9a\u9810\u8a2d\u503c\u3002\u4f8b\u5982\uff1a<code>def my_func(param1: str = \"default\")</code>\u3002\u5e95\u5c64\u6a21\u578b\u5728\u7522\u751f\u51fd\u5f0f\u547c\u53eb\u6642\uff0c\u5c0d\u9810\u8a2d\u503c\u7684\u652f\u63f4\u4e26\u4e0d\u53ef\u9760\u3002\u6240\u6709\u5fc5\u8981\u8cc7\u8a0a\u61c9\u7531 LLM \u5f9e\u60c5\u5883\u4e2d\u53d6\u5f97\uff0c\u6216\u5728\u7f3a\u5c11\u6642\u660e\u78ba\u8981\u6c42\u3002</li> <li><code>self</code> / <code>cls</code> \u81ea\u52d5\u8655\u7406\uff1a \u96b1\u542b\u53c3\u6578\u5982 <code>self</code>\uff08\u7528\u65bc\u5be6\u4f8b\u65b9\u6cd5\uff09\u6216 <code>cls</code>\uff08\u7528\u65bc\u985e\u5225\u65b9\u6cd5\uff09\u6703\u7531 ADK \u81ea\u52d5\u8655\u7406\uff0c\u4e26\u5f9e\u63d0\u4f9b\u7d66 LLM \u7684 schema \u4e2d\u6392\u9664\u3002\u4f60\u53ea\u9700\u70ba\u5de5\u5177\u5be6\u969b\u9700\u8981 LLM \u63d0\u4f9b\u7684\u908f\u8f2f\u53c3\u6578\u5b9a\u7fa9\u578b\u5225\u63d0\u793a\u8207\u63cf\u8ff0\u5373\u53ef\u3002</li> </ul> </li> <li> <p>\u56de\u50b3\u578b\u5225\uff1a</p> <ul> <li>\u51fd\u5f0f\u7684\u56de\u50b3\u503c\u5728 Python \u4e2d\u5fc5\u9808\u70ba\u5b57\u5178\uff08<code>dict</code>\uff09\uff0c\u5728 Java \u4e2d\u5247\u70ba Map\u3002</li> <li>\u82e5\u4f60\u7684\u51fd\u5f0f\u56de\u50b3\u975e\u5b57\u5178\u578b\u5225\uff08\u5982\u5b57\u4e32\u3001\u6578\u5b57\u3001\u4e32\u5217\uff09\uff0cADK \u6846\u67b6\u6703\u81ea\u52d5\u5c07\u5176\u5305\u88dd\u70ba\u5b57\u5178/Map\uff08\u5982 <code>{'result': your_original_return_value}</code>\uff09\uff0c\u518d\u5c07\u7d50\u679c\u56de\u50b3\u7d66\u6a21\u578b\u3002</li> <li>\u8a2d\u8a08\u5b57\u5178/Map \u7684\u9375\u8207\u503c\u6642\uff0c\u8acb\u78ba\u4fdd\u5c0d LLM \u4f86\u8aaa\u5177\u63cf\u8ff0\u6027\u4e14\u6613\u65bc\u7406\u89e3\u3002\u8acb\u8a18\u4f4f\uff0c\u6a21\u578b\u6703\u8b80\u53d6\u9019\u500b\u8f38\u51fa\u4f86\u6c7a\u5b9a\u4e0b\u4e00\u6b65\u884c\u52d5\u3002</li> <li>\u8acb\u5305\u542b\u6709\u610f\u7fa9\u7684\u9375\u3002\u4f8b\u5982\uff0c\u4e0d\u8981\u53ea\u56de\u50b3\u932f\u8aa4\u78bc\uff08\u5982 <code>500</code>\uff09\uff0c\u800c\u662f\u56de\u50b3 <code>{'status': 'error', 'error_message': 'Database connection failed'}</code>\u3002</li> <li>\u5f37\u70c8\u5efa\u8b70\u5728\u56de\u50b3\u503c\u4e2d\u52a0\u5165 <code>status</code> \u9375\uff08\u4f8b\u5982\uff1a<code>'success'</code>\u3001<code>'error'</code>\u3001<code>'pending'</code>\u3001<code>'ambiguous'</code>\uff09\uff0c\u4ee5\u660e\u78ba\u544a\u77e5\u6a21\u578b\u5de5\u5177\u57f7\u884c\u7684\u7d50\u679c\u3002</li> </ul> </li> <li> <p>Docstring / \u539f\u59cb\u78bc\u8a3b\u89e3\uff1a</p> <ul> <li>\u9019\u975e\u5e38\u91cd\u8981\u3002 docstring \u662f LLM \u53d6\u5f97\u63cf\u8ff0\u6027\u8cc7\u8a0a\u7684\u4e3b\u8981\u4f86\u6e90\u3002</li> <li>\u660e\u78ba\u8aaa\u660e\u5de5\u5177\u7684\u300c\u529f\u80fd\u300d\u3002 \u5177\u9ad4\u63cf\u8ff0\u5176\u7528\u9014\u8207\u9650\u5236\u3002</li> <li>\u8aaa\u660e\u300c\u4f55\u6642\u300d\u61c9\u4f7f\u7528\u6b64\u5de5\u5177\u3002 \u63d0\u4f9b\u60c5\u5883\u6216\u7bc4\u4f8b\u60c5\u5883\uff0c\u5354\u52a9 LLM \u505a\u51fa\u5224\u65b7\u3002</li> <li>\u6e05\u695a\u63cf\u8ff0\u300c\u6bcf\u500b\u53c3\u6578\u300d\u3002 \u89e3\u91cb LLM \u9700\u8981\u70ba\u8a72\u53c3\u6578\u63d0\u4f9b\u54ea\u4e9b\u8cc7\u8a0a\u3002</li> <li>\u8aaa\u660e\u9810\u671f <code>dict</code> \u56de\u50b3\u503c\u7684\u7d50\u69cb\u8207\u610f\u7fa9\uff0c\u7279\u5225\u662f\u4e0d\u540c\u7684 <code>status</code> \u503c\u53ca\u5176\u76f8\u95dc\u8cc7\u6599\u9375\u3002</li> <li>\u4e0d\u8981\u63cf\u8ff0\u88ab\u6ce8\u5165\u7684 ToolContext \u53c3\u6578\u3002 \u8acb\u907f\u514d\u5728 docstring \u63cf\u8ff0\u4e2d\u63d0\u53ca\u53ef\u9078\u7684 <code>tool_context: ToolContext</code> \u53c3\u6578\uff0c\u56e0\u70ba\u9019\u4e0d\u662f LLM \u9700\u8981\u77e5\u9053\u7684\u53c3\u6578\u3002ToolContext \u6703\u7531 ADK \u6ce8\u5165\uff0c\u5728 LLM \u6c7a\u5b9a\u547c\u53eb\u8a72\u5de5\u5177\u4e4b\u5f8c\u624d\u6703\u50b3\u5165\u3002</li> </ul> <p>\u826f\u597d\u5b9a\u7fa9\u7684\u7bc4\u4f8b\uff1a</p> </li> </ul> PythonJava <pre><code>def lookup_order_status(order_id: str) -&gt; dict:\n  \"\"\"Fetches the current status of a customer's order using its ID.\n\n  Use this tool ONLY when a user explicitly asks for the status of\n  a specific order and provides the order ID. Do not use it for\n  general inquiries.\n\n  Args:\n      order_id: The unique identifier of the order to look up.\n\n  Returns:\n      A dictionary indicating the outcome.\n      On success, status is 'success' and includes an 'order' dictionary.\n      On failure, status is 'error' and includes an 'error_message'.\n      Example success: {'status': 'success', 'order': {'state': 'shipped', 'tracking_number': '1Z9...'}}\n      Example error: {'status': 'error', 'error_message': 'Order ID not found.'}\n  \"\"\"\n  # ... function implementation to fetch status ...\n  if status_details := fetch_status_from_backend(order_id):\n    return {\n        \"status\": \"success\",\n        \"order\": {\n            \"state\": status_details.state,\n            \"tracking_number\": status_details.tracking,\n        },\n    }\n  else:\n    return {\"status\": \"error\", \"error_message\": f\"Order ID {order_id} not found.\"}\n</code></pre> <pre><code>/**\n * Retrieves the current weather report for a specified city.\n *\n * @param city The city for which to retrieve the weather report.\n * @param toolContext The context for the tool.\n * @return A dictionary containing the weather information.\n */\npublic static Map&lt;String, Object&gt; getWeatherReport(String city, ToolContext toolContext) {\n    Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();\n    if (city.toLowerCase(Locale.ROOT).equals(\"london\")) {\n        response.put(\"status\", \"success\");\n        response.put(\n                \"report\",\n                \"The current weather in London is cloudy with a temperature of 18 degrees Celsius and a\"\n                        + \" chance of rain.\");\n    } else if (city.toLowerCase(Locale.ROOT).equals(\"paris\")) {\n        response.put(\"status\", \"success\");\n        response.put(\"report\", \"The weather in Paris is sunny with a temperature of 25 degrees Celsius.\");\n    } else {\n        response.put(\"status\", \"error\");\n        response.put(\"error_message\", String.format(\"Weather information for '%s' is not available.\", city));\n    }\n    return response;\n}\n</code></pre> <ul> <li>\u7c21\u6f54\u8207\u5c08\u6ce8\uff1a<ul> <li>\u4fdd\u6301\u5de5\u5177\u805a\u7126\uff1a \u6bcf\u500b tool \u61c9\u8a72\u76e1\u53ef\u80fd\u53ea\u57f7\u884c\u4e00\u500b\u660e\u78ba\u5b9a\u7fa9\u7684\u4efb\u52d9\u3002</li> <li>\u53c3\u6578\u8d8a\u5c11\u8d8a\u597d\uff1a \u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u901a\u5e38\u80fd\u66f4\u53ef\u9760\u5730\u8655\u7406\u53c3\u6578\u8f03\u5c11\u4e14\u5b9a\u7fa9\u6e05\u695a\u7684\u5de5\u5177\uff0c\u76f8\u8f03\u65bc\u6709\u8a31\u591a\u53ef\u9078\u6216\u8907\u96dc\u53c3\u6578\u7684\u5de5\u5177\u3002</li> <li>\u4f7f\u7528\u7c21\u55ae\u8cc7\u6599\u578b\u5225\uff1a \u512a\u5148\u4f7f\u7528\u57fa\u672c\u578b\u5225\uff08\u5982 Python \u7684 <code>str</code>\u3001<code>int</code>\u3001<code>bool</code>\u3001<code>float</code>\u3001<code>List[str]</code>\uff0c\u6216 Java \u7684 <code>int</code>\u3001<code>byte</code>\u3001<code>short</code>\u3001<code>long</code>\u3001<code>float</code>\u3001<code>double</code>\u3001<code>boolean</code>\u3001<code>char</code>\uff09\uff0c\u76e1\u91cf\u907f\u514d\u5c07\u8907\u96dc\u7684\u81ea\u8a02\u985e\u5225\u6216\u6df1\u5c64\u5de2\u72c0\u7d50\u69cb\u4f5c\u70ba\u53c3\u6578\u3002</li> <li>\u62c6\u89e3\u8907\u96dc\u4efb\u52d9\uff1a \u5c07\u57f7\u884c\u591a\u500b\u4e0d\u540c\u908f\u8f2f\u6b65\u9a5f\u7684\u51fd\u5f0f\u62c6\u5206\u70ba\u66f4\u5c0f\u3001\u66f4\u5c08\u6ce8\u7684\u5de5\u5177\u3002\u4f8b\u5982\uff0c\u8207\u5176\u8a2d\u8a08\u4e00\u500b\u55ae\u4e00\u7684 <code>update_user_profile(profile: ProfileObject)</code> \u5de5\u5177\uff0c\u4e0d\u5982\u8003\u616e\u5206\u5225\u8a2d\u8a08 <code>update_user_name(name: str)</code>\u3001<code>update_user_address(address: str)</code>\u3001<code>update_user_preferences(preferences: list[str])</code> \u7b49\u5de5\u5177\u3002\u9019\u80fd\u8b93\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u66f4\u5bb9\u6613\u9078\u64c7\u4e26\u4f7f\u7528\u6b63\u78ba\u7684\u529f\u80fd\u3002</li> </ul> </li> </ul> <p>\u9075\u5faa\u9019\u4e9b\u6307\u5f15\uff0c\u80fd\u70ba\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u63d0\u4f9b\u6240\u9700\u7684\u6e05\u6670\u7d50\u69cb\uff0c\u8b93\u5176\u66f4\u6709\u6548\u7387\u5730\u904b\u7528\u4f60\u7684\u81ea\u8a02\u5de5\u5177\u51fd\u5f0f\uff0c\u9032\u800c\u5e36\u4f86\u66f4\u5f37\u5927\u4e14\u53ef\u9760\u7684 agent \u884c\u70ba\u3002</p>"},{"location":"tools/#toolsets","title":"\u5de5\u5177\u7d44\uff08Toolsets\uff09\uff1a\u5206\u7d44\u8207\u52d5\u614b\u63d0\u4f9b\u5de5\u5177","text":"<p>\u9664\u4e86\u55ae\u4e00\u5de5\u5177\u5916\uff0cAgent Development Kit (ADK) \u5f15\u5165\u4e86 \u5de5\u5177\u7d44\uff08Toolset\uff09 \u7684\u6982\u5ff5\uff0c\u900f\u904e <code>BaseToolset</code> \u4ecb\u9762\uff08\u5b9a\u7fa9\u65bc <code>google.adk.tools.base_toolset</code>\uff09\u3002\u5de5\u5177\u7d44\u5141\u8a31\u4f60\u7ba1\u7406\u4e26\u52d5\u614b\u63d0\u4f9b\u4e00\u7d44 <code>BaseTool</code> \u5be6\u4f8b\u7d66 agent\u3002</p> <p>\u9019\u7a2e\u65b9\u5f0f\u7684\u512a\u9ede\u5305\u62ec\uff1a</p> <ul> <li>\u7d44\u7e54\u76f8\u95dc\u5de5\u5177\uff1a \u5c07\u5177\u6709\u5171\u540c\u7528\u9014\u7684\u5de5\u5177\u5206\u7d44\uff08\u4f8b\u5982\uff1a\u6240\u6709\u6578\u5b78\u904b\u7b97\u5de5\u5177\uff0c\u6216\u6240\u6709\u8207\u7279\u5b9a API \u4e92\u52d5\u7684\u5de5\u5177\uff09\u3002</li> <li>\u52d5\u614b\u5de5\u5177\u53ef\u7528\u6027\uff1a \u8b93 agent \u80fd\u6839\u64da\u7576\u524d\u60c5\u5883\uff08\u4f8b\u5982\uff1a\u4f7f\u7528\u8005\u6b0a\u9650\u3001session state \u6216\u5176\u4ed6\u57f7\u884c\u6642\u689d\u4ef6\uff09\u52d5\u614b\u64c1\u6709\u4e0d\u540c\u7684\u5de5\u5177\u3002\u5de5\u5177\u7d44\u7684 <code>get_tools</code> \u65b9\u6cd5\u53ef\u6c7a\u5b9a\u8981\u66b4\u9732\u54ea\u4e9b\u5de5\u5177\u3002</li> <li>\u6574\u5408\u5916\u90e8\u5de5\u5177\u63d0\u4f9b\u8005\uff1a \u5de5\u5177\u7d44\u53ef\u4ee5\u4f5c\u70ba\u5916\u90e8\u7cfb\u7d71\uff08\u5982 OpenAPI \u898f\u683c\u6216 MCP server\uff09\u5de5\u5177\u7684\u8f49\u63a5\u5668\uff0c\u5c07\u5176\u8f49\u63db\u70ba ADK \u76f8\u5bb9\u7684 <code>BaseTool</code> \u7269\u4ef6\u3002</li> </ul>"},{"location":"tools/#basetoolset","title":"<code>BaseToolset</code> \u4ecb\u9762","text":"<p>\u4efb\u4f55\u4f5c\u70ba ADK \u5de5\u5177\u7d44\u7684\u985e\u5225\uff0c\u90fd\u61c9\u5be6\u4f5c <code>BaseToolset</code> \u62bd\u8c61\u57fa\u5e95\u985e\u5225\u3002\u6b64\u4ecb\u9762\u4e3b\u8981\u5b9a\u7fa9\u5169\u500b\u65b9\u6cd5\uff1a</p> <ul> <li> <p><code>async def get_tools(...) -&gt; list[BaseTool]:</code>     \u9019\u662f\u5de5\u5177\u7d44\u7684\u6838\u5fc3\u65b9\u6cd5\u3002\u7576 ADK agent \u9700\u8981\u77e5\u9053\u53ef\u7528\u5de5\u5177\u6642\uff0c\u6703\u5c0d\u5176 <code>tools</code> \u6e05\u55ae\u4e2d\u7684\u6bcf\u500b <code>BaseToolset</code> \u5be6\u4f8b\u547c\u53eb <code>get_tools()</code>\u3002</p> <ul> <li>\u6b64\u65b9\u6cd5\u6703\u63a5\u6536\u4e00\u500b\u53ef\u9078\u7684 <code>readonly_context</code>\uff08<code>ReadonlyContext</code> \u7684\u5be6\u4f8b\uff09\u3002\u9019\u500b context \u63d0\u4f9b\u552f\u8b80\u5b58\u53d6\uff0c\u4f8b\u5982\u7576\u524d session state\uff08<code>readonly_context.state</code>\uff09\u3001agent \u540d\u7a31\u53ca\u547c\u53eb ID\u3002\u5de5\u5177\u7d44\u53ef\u5229\u7528\u9019\u500b context \u52d5\u614b\u6c7a\u5b9a\u8981\u56de\u50b3\u54ea\u4e9b\u5de5\u5177\u3002</li> <li>\u5fc5\u9808\u56de\u50b3\u4e00\u500b <code>list</code>\uff0c\u5167\u5bb9\u70ba\u591a\u500b <code>BaseTool</code> \u5be6\u4f8b\uff08\u5982 <code>FunctionTool</code>\u3001<code>RestApiTool</code>\uff09\u3002</li> </ul> </li> <li> <p><code>async def close(self) -&gt; None:</code>     \u9019\u500b\u975e\u540c\u6b65\u65b9\u6cd5\u6703\u5728\u5de5\u5177\u7d44\u4e0d\u518d\u9700\u8981\u6642\uff0c\u7531 ADK \u6846\u67b6\u547c\u53eb\uff0c\u4f8b\u5982 agent server \u95dc\u9589\u6216 <code>Runner</code> \u88ab\u95dc\u9589\u6642\u3002\u53ef\u5728\u6b64\u5be6\u4f5c\u4efb\u4f55\u5fc5\u8981\u7684\u6e05\u7406\u52d5\u4f5c\uff0c\u4f8b\u5982\u95dc\u9589\u7db2\u8def\u9023\u7dda\u3001\u91cb\u653e\u6a94\u6848\u63a7\u5236\u4ee3\u78bc\uff0c\u6216\u6e05\u7406\u5de5\u5177\u7d44\u7ba1\u7406\u7684\u5176\u4ed6\u8cc7\u6e90\u3002</p> </li> </ul>"},{"location":"tools/#agent_3","title":"\u5728 agent \u4e2d\u4f7f\u7528\u5de5\u5177\u7d44","text":"<p>\u4f60\u53ef\u4ee5\u76f4\u63a5\u5c07\u81ea\u8a02\u7684 <code>BaseToolset</code> \u5be6\u4f5c\u5be6\u4f8b\uff0c\u8207\u500b\u5225 <code>BaseTool</code> \u5be6\u4f8b\u4e00\u8d77\uff0c\u52a0\u5165 <code>LlmAgent</code> \u7684 <code>tools</code> \u6e05\u55ae\u4e2d\u3002</p> <p>\u7576 agent \u521d\u59cb\u5316\u6216\u9700\u8981\u5224\u65b7\u53ef\u7528\u529f\u80fd\u6642\uff0cADK \u6846\u67b6\u6703\u904d\u6b77 <code>tools</code> \u6e05\u55ae\uff1a</p> <ul> <li>\u82e5\u9805\u76ee\u70ba <code>BaseTool</code> \u5be6\u4f8b\uff0c\u5247\u76f4\u63a5\u4f7f\u7528\u3002</li> <li>\u82e5\u9805\u76ee\u70ba <code>BaseToolset</code> \u5be6\u4f8b\uff0c\u5247\u6703\u547c\u53eb\u5176 <code>get_tools()</code> \u65b9\u6cd5\uff08\u50b3\u5165\u76ee\u524d\u7684 <code>ReadonlyContext</code>\uff09\uff0c\u4e26\u5c07\u56de\u50b3\u7684 <code>BaseTool</code> \u6e05\u55ae\u52a0\u5165 agent \u7684\u53ef\u7528\u5de5\u5177\u4e2d\u3002</li> </ul>"},{"location":"tools/#_8","title":"\u7bc4\u4f8b\uff1a\u7c21\u55ae\u7684\u6578\u5b78\u5de5\u5177\u7d44","text":"<p>\u4ee5\u4e0b\u5c07\u5efa\u7acb\u4e00\u500b\u63d0\u4f9b\u57fa\u672c\u7b97\u8853\u904b\u7b97\u7684\u5de5\u5177\u7d44\u7bc4\u4f8b\u3002</p> <pre><code># 1. Define the individual tool functions\ndef add_numbers(a: int, b: int, tool_context: ToolContext) -&gt; Dict[str, Any]:\n    \"\"\"Adds two integer numbers.\n    Args:\n        a: The first number.\n        b: The second number.\n    Returns:\n        A dictionary with the sum, e.g., {'status': 'success', 'result': 5}\n    \"\"\"\n    print(f\"Tool: add_numbers called with a={a}, b={b}\")\n    result = a + b\n    # Example: Storing something in tool_context state\n    tool_context.state[\"last_math_operation\"] = \"addition\"\n    return {\"status\": \"success\", \"result\": result}\n\n\ndef subtract_numbers(a: int, b: int) -&gt; Dict[str, Any]:\n    \"\"\"Subtracts the second number from the first.\n    Args:\n        a: The first number.\n        b: The second number.\n    Returns:\n        A dictionary with the difference, e.g., {'status': 'success', 'result': 1}\n    \"\"\"\n    print(f\"Tool: subtract_numbers called with a={a}, b={b}\")\n    return {\"status\": \"success\", \"result\": a - b}\n\n\n# 2. Create the Toolset by implementing BaseToolset\nclass SimpleMathToolset(BaseToolset):\n    def __init__(self, prefix: str = \"math_\"):\n        self.prefix = prefix\n        # Create FunctionTool instances once\n        self._add_tool = FunctionTool(\n            func=add_numbers,\n            name=f\"{self.prefix}add_numbers\",  # Toolset can customize names\n        )\n        self._subtract_tool = FunctionTool(\n            func=subtract_numbers, name=f\"{self.prefix}subtract_numbers\"\n        )\n        print(f\"SimpleMathToolset initialized with prefix '{self.prefix}'\")\n\n    async def get_tools(\n        self, readonly_context: Optional[ReadonlyContext] = None\n    ) -&gt; List[BaseTool]:\n        print(f\"SimpleMathToolset.get_tools() called.\")\n        # Example of dynamic behavior:\n        # Could use readonly_context.state to decide which tools to return\n        # For instance, if readonly_context.state.get(\"enable_advanced_math\"):\n        #    return [self._add_tool, self._subtract_tool, self._multiply_tool]\n\n        # For this simple example, always return both tools\n        tools_to_return = [self._add_tool, self._subtract_tool]\n        print(f\"SimpleMathToolset providing tools: {[t.name for t in tools_to_return]}\")\n        return tools_to_return\n\n    async def close(self) -&gt; None:\n        # No resources to clean up in this simple example\n        print(f\"SimpleMathToolset.close() called for prefix '{self.prefix}'.\")\n        await asyncio.sleep(0)  # Placeholder for async cleanup if needed\n\n\n# 3. Define an individual tool (not part of the toolset)\ndef greet_user(name: str = \"User\") -&gt; Dict[str, str]:\n    \"\"\"Greets the user.\"\"\"\n    print(f\"Tool: greet_user called with name={name}\")\n    return {\"greeting\": f\"Hello, {name}!\"}\n\n\ngreet_tool = FunctionTool(func=greet_user)\n\n# 4. Instantiate the toolset\nmath_toolset_instance = SimpleMathToolset(prefix=\"calculator_\")\n\n# 5. Define an agent that uses both the individual tool and the toolset\ncalculator_agent = LlmAgent(\n    name=\"CalculatorAgent\",\n    model=\"gemini-2.0-flash\",  # Replace with your desired model\n    instruction=\"You are a helpful calculator and greeter. \"\n    \"Use 'greet_user' for greetings. \"\n    \"Use 'calculator_add_numbers' to add and 'calculator_subtract_numbers' to subtract. \"\n    \"Announce the state of 'last_math_operation' if it's set.\",\n    tools=[greet_tool, math_toolset_instance],  # Individual tool  # Toolset instance\n)\n</code></pre> <p>\u5728\u6b64\u7bc4\u4f8b\u4e2d\uff1a</p> <ul> <li><code>SimpleMathToolset</code> \u5be6\u4f5c\u4e86 <code>BaseToolset</code>\uff0c\u5176 <code>get_tools()</code> \u65b9\u6cd5\u6703\u91dd\u5c0d <code>add_numbers</code> \u548c <code>subtract_numbers</code> \u56de\u50b3 <code>FunctionTool</code> \u5be6\u4f8b\u3002\u6b64\u5916\uff0c\u9084\u6703\u4f7f\u7528\u524d\u7db4\u5b57\u81ea\u8a02\u9019\u4e9b\u5de5\u5177\u7684\u540d\u7a31\u3002</li> <li><code>calculator_agent</code> \u540c\u6642\u8a2d\u5b9a\u4e86\u500b\u5225\u7684 <code>greet_tool</code> \u4ee5\u53ca\u4e00\u500b <code>SimpleMathToolset</code> \u5be6\u4f8b\u3002</li> <li>\u7576\u57f7\u884c <code>calculator_agent</code> \u6642\uff0cAgent Development Kit (ADK) \u6703\u547c\u53eb <code>math_toolset_instance.get_tools()</code>\u3002\u6b64\u6642 agent \u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5c07\u80fd\u5b58\u53d6 <code>greet_user</code>\u3001<code>calculator_add_numbers</code> \u548c <code>calculator_subtract_numbers</code>\uff0c\u4ee5\u8655\u7406\u4f7f\u7528\u8005\u8acb\u6c42\u3002</li> <li><code>add_numbers</code> \u5de5\u5177\u5c55\u793a\u4e86\u5982\u4f55\u5beb\u5165 <code>tool_context.state</code>\uff0c\u800c agent \u7684\u6307\u4ee4\u5247\u63d0\u53ca\u4e86\u8b80\u53d6\u9019\u500b\u72c0\u614b\u3002</li> <li>\u6703\u547c\u53eb <code>close()</code> \u65b9\u6cd5\uff0c\u4ee5\u78ba\u4fdd\u5de5\u5177\u7d44\u6240\u6301\u6709\u7684\u4efb\u4f55\u8cc7\u6e90\u90fd\u80fd\u88ab\u91cb\u653e\u3002</li> </ul> <p>\u5de5\u5177\u7d44\uff08Toolsets\uff09\u63d0\u4f9b\u4e86\u4e00\u7a2e\u5f37\u5927\u7684\u65b9\u5f0f\uff0c\u80fd\u5920\u7d44\u7e54\u3001\u7ba1\u7406\u4e26\u52d5\u614b\u5730\u5c07\u591a\u500b\u5de5\u5177\u96c6\u5408\u63d0\u4f9b\u7d66\u4f60\u7684 ADK agent\uff0c\u8b93 agent \u61c9\u7528\u7a0b\u5f0f\u66f4\u52a0\u6a21\u7d44\u5316\u3001\u6613\u65bc\u7dad\u8b77\u4e14\u5177\u5099\u9ad8\u5ea6\u9069\u61c9\u6027\u3002</p>"},{"location":"tools/authentication.en/","title":"Authenticating with Tools","text":""},{"location":"tools/authentication.en/#core-concepts","title":"Core Concepts","text":"<p>Many tools need to access protected resources (like user data in Google Calendar, Salesforce records, etc.) and require authentication. ADK provides a system to handle various authentication methods securely.</p> <p>The key components involved are:</p> <ol> <li><code>AuthScheme</code>: Defines how an API expects authentication credentials (e.g., as an API Key in a header, an OAuth 2.0 Bearer token). ADK supports the same types of authentication schemes as OpenAPI 3.0. To know more about what each type of credential is, refer to OpenAPI doc: Authentication. ADK uses specific classes like <code>APIKey</code>, <code>HTTPBearer</code>, <code>OAuth2</code>, <code>OpenIdConnectWithConfig</code>.  </li> <li><code>AuthCredential</code>: Holds the initial information needed to start the authentication process (e.g., your application's OAuth Client ID/Secret, an API key value). It includes an <code>auth_type</code> (like <code>API_KEY</code>, <code>OAUTH2</code>, <code>SERVICE_ACCOUNT</code>) specifying the credential type.</li> </ol> <p>The general flow involves providing these details when configuring a tool. ADK then attempts to automatically exchange the initial credential for a usable one (like an access token) before the tool makes an API call. For flows requiring user interaction (like OAuth consent), a specific interactive process involving the Agent Client application is triggered.</p>"},{"location":"tools/authentication.en/#supported-initial-credential-types","title":"Supported Initial Credential Types","text":"<ul> <li>API_KEY: For simple key/value authentication. Usually requires no exchange.  </li> <li>HTTP: Can represent Basic Auth (not recommended/supported for exchange) or already obtained Bearer tokens. If it's a Bearer token, no exchange is needed.  </li> <li>OAUTH2: For standard OAuth 2.0 flows. Requires configuration (client ID, secret, scopes) and often triggers the interactive flow for user consent.  </li> <li>OPEN_ID_CONNECT: For authentication based on OpenID Connect. Similar to OAuth2, often requires configuration and user interaction.  </li> <li>SERVICE_ACCOUNT: For Google Cloud Service Account credentials (JSON key or Application Default Credentials). Typically exchanged for a Bearer token.</li> </ul>"},{"location":"tools/authentication.en/#configuring-authentication-on-tools","title":"Configuring Authentication on Tools","text":"<p>You set up authentication when defining your tool:</p> <ul> <li> <p>RestApiTool / OpenAPIToolset: Pass <code>auth_scheme</code> and <code>auth_credential</code> during initialization</p> </li> <li> <p>GoogleApiToolSet Tools: ADK has built-in 1st party tools like Google Calendar, BigQuery etc,. Use the toolset's specific method.</p> </li> <li> <p>APIHubToolset / ApplicationIntegrationToolset: Pass <code>auth_scheme</code> and <code>auth_credential</code>during initialization, if the API managed in API Hub / provided by Application Integration requires authentication.</p> </li> </ul> <p>WARNING</p> <p>Storing sensitive credentials like access tokens and especially refresh tokens directly in the session state might pose security risks depending on your session storage backend (<code>SessionService</code>) and overall application security posture.</p> <ul> <li><code>InMemorySessionService</code>: Suitable for testing and development, but data is lost when the process ends. Less risk as it's transient.</li> <li>Database/Persistent Storage: Strongly consider encrypting the token data before storing it in the database using a robust encryption library (like <code>cryptography</code>) and managing encryption keys securely (e.g., using a key management service).</li> <li>Secure Secret Stores: For production environments, storing sensitive credentials in a dedicated secret manager (like Google Cloud Secret Manager or HashiCorp Vault) is the most recommended approach. Your tool could potentially store only short-lived access tokens or secure references (not the refresh token itself) in the session state, fetching the necessary secrets from the secure store when needed.</li> </ul>"},{"location":"tools/authentication.en/#journey-1-building-agentic-applications-with-authenticated-tools","title":"Journey 1: Building Agentic Applications with Authenticated Tools","text":"<p>This section focuses on using pre-existing tools (like those from <code>RestApiTool/ OpenAPIToolset</code>, <code>APIHubToolset</code>, <code>GoogleApiToolSet</code>) that require authentication within your agentic application. Your main responsibility is configuring the tools and handling the client-side part of interactive authentication flows (if required by the tool).</p>"},{"location":"tools/authentication.en/#1-configuring-tools-with-authentication","title":"1. Configuring Tools with Authentication","text":"<p>When adding an authenticated tool to your agent, you need to provide its required <code>AuthScheme</code> and your application's initial <code>AuthCredential</code>.</p> <p>A. Using OpenAPI-based Toolsets (<code>OpenAPIToolset</code>, <code>APIHubToolset</code>, etc.)</p> <p>Pass the scheme and credential during toolset initialization. The toolset applies them to all generated tools. Here are few ways to create tools with authentication in ADK.</p> API KeyOAuth2Service AccountOpenID connect <p>Create a tool requiring an API Key.</p> <pre><code>from google.adk.tools.openapi_tool.auth.auth_helpers import token_to_scheme_credential\nfrom google.adk.tools.openapi_tool.openapi_spec_parser.openapi_toolset import OpenAPIToolset\n\nauth_scheme, auth_credential = token_to_scheme_credential(\n    \"apikey\", \"query\", \"apikey\", \"YOUR_API_KEY_STRING\"\n)\nsample_api_toolset = OpenAPIToolset(\n    spec_str=\"...\",  # Fill this with an OpenAPI spec string\n    spec_str_type=\"yaml\",\n    auth_scheme=auth_scheme,\n    auth_credential=auth_credential,\n)\n</code></pre> <p>Create a tool requiring OAuth2.</p> <pre><code>from google.adk.tools.openapi_tool.openapi_spec_parser.openapi_toolset import OpenAPIToolset\nfrom fastapi.openapi.models import OAuth2\nfrom fastapi.openapi.models import OAuthFlowAuthorizationCode\nfrom fastapi.openapi.models import OAuthFlows\nfrom google.adk.auth import AuthCredential\nfrom google.adk.auth import AuthCredentialTypes\nfrom google.adk.auth import OAuth2Auth\n\nauth_scheme = OAuth2(\n    flows=OAuthFlows(\n        authorizationCode=OAuthFlowAuthorizationCode(\n            authorizationUrl=\"https://accounts.google.com/o/oauth2/auth\",\n            tokenUrl=\"https://oauth2.googleapis.com/token\",\n            scopes={\n                \"https://www.googleapis.com/auth/calendar\": \"calendar scope\"\n            },\n        )\n    )\n)\nauth_credential = AuthCredential(\n    auth_type=AuthCredentialTypes.OAUTH2,\n    oauth2=OAuth2Auth(\n        client_id=YOUR_OAUTH_CLIENT_ID, \n        client_secret=YOUR_OAUTH_CLIENT_SECRET\n    ),\n)\n\ncalendar_api_toolset = OpenAPIToolset(\n    spec_str=google_calendar_openapi_spec_str, # Fill this with an openapi spec\n    spec_str_type='yaml',\n    auth_scheme=auth_scheme,\n    auth_credential=auth_credential,\n)\n</code></pre> <p>Create a tool requiring Service Account.</p> <pre><code>from google.adk.tools.openapi_tool.auth.auth_helpers import service_account_dict_to_scheme_credential\nfrom google.adk.tools.openapi_tool.openapi_spec_parser.openapi_toolset import OpenAPIToolset\n\nservice_account_cred = json.loads(service_account_json_str)\nauth_scheme, auth_credential = service_account_dict_to_scheme_credential(\n    config=service_account_cred,\n    scopes=[\"https://www.googleapis.com/auth/cloud-platform\"],\n)\nsample_toolset = OpenAPIToolset(\n    spec_str=sa_openapi_spec_str, # Fill this with an openapi spec\n    spec_str_type='json',\n    auth_scheme=auth_scheme,\n    auth_credential=auth_credential,\n)\n</code></pre> <p>Create a tool requiring OpenID connect.</p> <pre><code>from google.adk.auth.auth_schemes import OpenIdConnectWithConfig\nfrom google.adk.auth.auth_credential import AuthCredential, AuthCredentialTypes, OAuth2Auth\nfrom google.adk.tools.openapi_tool.openapi_spec_parser.openapi_toolset import OpenAPIToolset\n\nauth_scheme = OpenIdConnectWithConfig(\n    authorization_endpoint=OAUTH2_AUTH_ENDPOINT_URL,\n    token_endpoint=OAUTH2_TOKEN_ENDPOINT_URL,\n    scopes=['openid', 'YOUR_OAUTH_SCOPES\"]\n)\nauth_credential = AuthCredential(\n    auth_type=AuthCredentialTypes.OPEN_ID_CONNECT,\n    oauth2=OAuth2Auth(\n        client_id=\"...\",\n        client_secret=\"...\",\n    )\n)\n\nuserinfo_toolset = OpenAPIToolset(\n    spec_str=content, # Fill in an actual spec\n    spec_str_type='yaml',\n    auth_scheme=auth_scheme,\n    auth_credential=auth_credential,\n)\n</code></pre> <p>B. Using Google API Toolsets (e.g., <code>calendar_tool_set</code>)</p> <p>These toolsets often have dedicated configuration methods.</p> <p>Tip: For how to create a Google OAuth Client ID &amp; Secret, see this guide: Get your Google API Client ID</p> <pre><code># Example: Configuring Google Calendar Tools\nfrom google.adk.tools.google_api_tool import calendar_tool_set\n\nclient_id = \"YOUR_GOOGLE_OAUTH_CLIENT_ID.apps.googleusercontent.com\"\nclient_secret = \"YOUR_GOOGLE_OAUTH_CLIENT_SECRET\"\n\n# Use the specific configure method for this toolset type\ncalendar_tool_set.configure_auth(\n    client_id=oauth_client_id, client_secret=oauth_client_secret\n)\n\n# agent = LlmAgent(..., tools=calendar_tool_set.get_tool('calendar_tool_set'))\n</code></pre> <p>The sequence diagram of auth request flow (where tools are requesting auth credentials) looks like below:</p> <p> </p>"},{"location":"tools/authentication.en/#2-handling-the-interactive-oauthoidc-flow-client-side","title":"2. Handling the Interactive OAuth/OIDC Flow (Client-Side)","text":"<p>If a tool requires user login/consent (typically OAuth 2.0 or OIDC), the ADK framework pauses execution and signals your Agent Client application. There are two cases:</p> <ul> <li>Agent Client application runs the agent directly (via <code>runner.run_async</code>) in the same process. e.g. UI backend, CLI app, or Spark job etc.</li> <li>Agent Client application interacts with ADK's fastapi server via <code>/run</code> or <code>/run_sse</code> endpoint. While ADK's fastapi server could be setup on the same server or different server as Agent Client application</li> </ul> <p>The second case is a special case of first case, because <code>/run</code> or <code>/run_sse</code> endpoint also invokes <code>runner.run_async</code>. The only differences are:</p> <ul> <li>Whether to call a python function to run the agent (first case) or call a service endpoint to run the agent (second case).</li> <li>Whether the result events are in-memory objects (first case) or serialized json string in http response (second case).</li> </ul> <p>Below sections focus on the first case and you should be able to map it to the second case very straightforward. We will also describe some differences to handle for the second case if necessary.</p> <p>Here's the step-by-step process for your client application:</p> <p>Step 1: Run Agent &amp; Detect Auth Request</p> <ul> <li>Initiate the agent interaction using <code>runner.run_async</code>.  </li> <li>Iterate through the yielded events.  </li> <li>Look for a specific function call event whose function call has a special name: <code>adk_request_credential</code>. This event signals that user interaction is needed. You can use helper functions to identify this event and extract necessary information. (For the second case, the logic is similar. You deserialize the event from the http response).</li> </ul> <pre><code># runner = Runner(...)\n# session = await session_service.create_session(...)\n# content = types.Content(...) # User's initial query\n\nprint(\"\\nRunning agent...\")\nevents_async = runner.run_async(\n    session_id=session.id, user_id='user', new_message=content\n)\n\nauth_request_function_call_id, auth_config = None, None\n\nasync for event in events_async:\n    # Use helper to check for the specific auth request event\n    if (auth_request_function_call := get_auth_request_function_call(event)):\n        print(\"--&gt; Authentication required by agent.\")\n        # Store the ID needed to respond later\n        if not (auth_request_function_call_id := auth_request_function_call.id):\n            raise ValueError(f'Cannot get function call id from function call: {auth_request_function_call}')\n        # Get the AuthConfig containing the auth_uri etc.\n        auth_config = get_auth_config(auth_request_function_call)\n        break # Stop processing events for now, need user interaction\n\nif not auth_request_function_call_id:\n    print(\"\\nAuth not required or agent finished.\")\n    # return # Or handle final response if received\n</code></pre> <p>Helper functions <code>helpers.py</code>:</p> <pre><code>from google.adk.events import Event\nfrom google.adk.auth import AuthConfig # Import necessary type\nfrom google.genai import types\n\ndef get_auth_request_function_call(event: Event) -&gt; types.FunctionCall:\n    # Get the special auth request function call from the event\n    if not event.content or not event.content.parts:\n        return\n    for part in event.content.parts:\n        if (\n            part \n            and part.function_call \n            and part.function_call.name == 'adk_request_credential'\n            and event.long_running_tool_ids \n            and part.function_call.id in event.long_running_tool_ids\n        ):\n\n            return part.function_call\n\ndef get_auth_config(auth_request_function_call: types.FunctionCall) -&gt; AuthConfig:\n    # Extracts the AuthConfig object from the arguments of the auth request function call\n    if not auth_request_function_call.args or not (auth_config := auth_request_function_call.args.get('authConfig')):\n        raise ValueError(f'Cannot get auth config from function call: {auth_request_function_call}')\n    if isinstance(auth_config, dict):\n        auth_config = AuthConfig.model_validate(auth_config)\n    elif not isinstance(auth_config, AuthConfig):\n        raise ValueError(f'Cannot get auth config {auth_config} is not an instance of AuthConfig.')\n    return auth_config\n</code></pre> <p>Step 2: Redirect User for Authorization</p> <ul> <li>Get the authorization URL (<code>auth_uri</code>) from the <code>auth_config</code> extracted in the previous step.  </li> <li>Crucially, append your application's  redirect_uri as a query parameter to this <code>auth_uri</code>. This <code>redirect_uri</code> must be pre-registered with your OAuth provider (e.g., Google Cloud Console, Okta admin panel).  </li> <li>Direct the user to this complete URL (e.g., open it in their browser).</li> </ul> <pre><code># (Continuing after detecting auth needed)\n\nif auth_request_function_call_id and auth_config:\n    # Get the base authorization URL from the AuthConfig\n    base_auth_uri = auth_config.exchanged_auth_credential.oauth2.auth_uri\n\n    if base_auth_uri:\n        redirect_uri = 'http://localhost:8000/callback' # MUST match your OAuth client app config\n        # Append redirect_uri (use urlencode in production)\n        auth_request_uri = base_auth_uri + f'&amp;redirect_uri={redirect_uri}'\n        # Now you need to redirect your end user to this auth_request_uri or ask them to open this auth_request_uri in their browser\n        # This auth_request_uri should be served by the corresponding auth provider and the end user should login and authorize your applicaiton to access their data\n        # And then the auth provider will redirect the end user to the redirect_uri you provided\n        # Next step: Get this callback URL from the user (or your web server handler)\n    else:\n         print(\"ERROR: Auth URI not found in auth_config.\")\n         # Handle error\n</code></pre> <p>Step 3. Handle the Redirect Callback (Client):</p> <ul> <li>Your application must have a mechanism (e.g., a web server route at the <code>redirect_uri</code>) to receive the user after they authorize the application with the provider.  </li> <li>The provider redirects the user to your <code>redirect_uri</code> and appends an <code>authorization_code</code> (and potentially <code>state</code>, <code>scope</code>) as query parameters to the URL.  </li> <li>Capture the full callback URL from this incoming request.  </li> <li>(This step happens outside the main agent execution loop, in your web server or equivalent callback handler.)</li> </ul> <p>Step 4. Send Authentication Result Back to ADK (Client):</p> <ul> <li>Once you have the full callback URL (containing the authorization code), retrieve the <code>auth_request_function_call_id</code> and the <code>auth_config</code> object saved in Client Step 1.  </li> <li>Set the captured callback URL into the <code>exchanged_auth_credential.oauth2.auth_response_uri</code> field. Also ensure <code>exchanged_auth_credential.oauth2.redirect_uri</code> contains the redirect URI you used.  </li> <li>Create a <code>types.Content</code> object containing a <code>types.Part</code> with a <code>types.FunctionResponse</code>.  <ul> <li>Set <code>name</code> to <code>\"adk_request_credential\"</code>. (Note: This is a special name for ADK to proceed with authentication. Do not use other names.)  </li> <li>Set <code>id</code> to the <code>auth_request_function_call_id</code> you saved.  </li> <li>Set <code>response</code> to the serialized (e.g., <code>.model_dump()</code>) updated <code>AuthConfig</code> object.  </li> </ul> </li> <li>Call <code>runner.run_async</code> again for the same session, passing this <code>FunctionResponse</code> content as the <code>new_message</code>.</li> </ul> <pre><code># (Continuing after user interaction)\n\n    # Simulate getting the callback URL (e.g., from user paste or web handler)\n    auth_response_uri = await get_user_input(\n        f'Paste the full callback URL here:\\n&gt; '\n    )\n    auth_response_uri = auth_response_uri.strip() # Clean input\n\n    if not auth_response_uri:\n        print(\"Callback URL not provided. Aborting.\")\n        return\n\n    # Update the received AuthConfig with the callback details\n    auth_config.exchanged_auth_credential.oauth2.auth_response_uri = auth_response_uri\n    # Also include the redirect_uri used, as the token exchange might need it\n    auth_config.exchanged_auth_credential.oauth2.redirect_uri = redirect_uri\n\n    # Construct the FunctionResponse Content object\n    auth_content = types.Content(\n        role='user', # Role can be 'user' when sending a FunctionResponse\n        parts=[\n            types.Part(\n                function_response=types.FunctionResponse(\n                    id=auth_request_function_call_id,       # Link to the original request\n                    name='adk_request_credential', # Special framework function name\n                    response=auth_config.model_dump() # Send back the *updated* AuthConfig\n                )\n            )\n        ],\n    )\n\n    # --- Resume Execution ---\n    print(\"\\nSubmitting authentication details back to the agent...\")\n    events_async_after_auth = runner.run_async(\n        session_id=session.id,\n        user_id='user',\n        new_message=auth_content, # Send the FunctionResponse back\n    )\n\n    # --- Process Final Agent Output ---\n    print(\"\\n--- Agent Response after Authentication ---\")\n    async for event in events_async_after_auth:\n        # Process events normally, expecting the tool call to succeed now\n        print(event) # Print the full event for inspection\n</code></pre> <p>Step 5: ADK Handles Token Exchange &amp; Tool Retry and gets Tool result</p> <ul> <li>ADK receives the <code>FunctionResponse</code> for <code>adk_request_credential</code>.  </li> <li>It uses the information in the updated <code>AuthConfig</code> (including the callback URL containing the code) to perform the OAuth token exchange with the provider's token endpoint, obtaining the access token (and possibly refresh token).  </li> <li>ADK internally makes these tokens available by setting them in the session state).  </li> <li>ADK automatically retries the original tool call (the one that initially failed due to missing auth).  </li> <li>This time, the tool finds the valid tokens (via <code>tool_context.get_auth_response()</code>) and successfully executes the authenticated API call.  </li> <li>The agent receives the actual result from the tool and generates its final response to the user.</li> </ul> <p>The sequence diagram of auth response flow (where Agent Client send back the auth response and ADK retries tool calling) looks like below:</p> <p></p>"},{"location":"tools/authentication.en/#journey-2-building-custom-tools-functiontool-requiring-authentication","title":"Journey 2: Building Custom Tools (<code>FunctionTool</code>) Requiring Authentication","text":"<p>This section focuses on implementing the authentication logic inside your custom Python function when creating a new ADK Tool. We will implement a <code>FunctionTool</code> as an example.</p>"},{"location":"tools/authentication.en/#prerequisites","title":"Prerequisites","text":"<p>Your function signature must include <code>tool_context: ToolContext</code>. ADK automatically injects this object, providing access to state and auth mechanisms.</p> <pre><code>from google.adk.tools import FunctionTool, ToolContext\nfrom typing import Dict\n\ndef my_authenticated_tool_function(param1: str, ..., tool_context: ToolContext) -&gt; dict:\n    # ... your logic ...\n    pass\n\nmy_tool = FunctionTool(func=my_authenticated_tool_function)\n</code></pre>"},{"location":"tools/authentication.en/#authentication-logic-within-the-tool-function","title":"Authentication Logic within the Tool Function","text":"<p>Implement the following steps inside your function:</p> <p>Step 1: Check for Cached &amp; Valid Credentials:</p> <p>Inside your tool function, first check if valid credentials (e.g., access/refresh tokens) are already stored from a previous run in this session. Credentials for the current sessions should be stored in <code>tool_context.invocation_context.session.state</code> (a dictionary of state) Check existence of existing credentials by checking <code>tool_context.invocation_context.session.state.get(credential_name, None)</code>.</p> <pre><code>from google.oauth2.credentials import Credentials\nfrom google.auth.transport.requests import Request\n\n# Inside your tool function\nTOKEN_CACHE_KEY = \"my_tool_tokens\" # Choose a unique key\nSCOPES = [\"scope1\", \"scope2\"] # Define required scopes\n\ncreds = None\ncached_token_info = tool_context.state.get(TOKEN_CACHE_KEY)\nif cached_token_info:\n    try:\n        creds = Credentials.from_authorized_user_info(cached_token_info, SCOPES)\n        if not creds.valid and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n            tool_context.state[TOKEN_CACHE_KEY] = json.loads(creds.to_json()) # Update cache\n        elif not creds.valid:\n            creds = None # Invalid, needs re-auth\n            tool_context.state[TOKEN_CACHE_KEY] = None\n    except Exception as e:\n        print(f\"Error loading/refreshing cached creds: {e}\")\n        creds = None\n        tool_context.state[TOKEN_CACHE_KEY] = None\n\nif creds and creds.valid:\n    # Skip to Step 5: Make Authenticated API Call\n    pass\nelse:\n    # Proceed to Step 2...\n    pass\n</code></pre> <p>Step 2: Check for Auth Response from Client</p> <ul> <li>If Step 1 didn't yield valid credentials, check if the client just completed the interactive flow by calling <code>exchanged_credential = tool_context.get_auth_response()</code>.  </li> <li>This returns the updated <code>exchanged_credential</code> object sent back by the client (containing the callback URL in <code>auth_response_uri</code>).</li> </ul> <pre><code># Use auth_scheme and auth_credential configured in the tool.\n# exchanged_credential: AuthCredential | None\n\nexchanged_credential = tool_context.get_auth_response(AuthConfig(\n  auth_scheme=auth_scheme,\n  raw_auth_credential=auth_credential,\n))\n# If exchanged_credential is not None, then there is already an exchanged credetial from the auth response. \nif exchanged_credential:\n   # ADK exchanged the access token already for us\n        access_token = exchanged_credential.oauth2.access_token\n        refresh_token = exchanged_credential.oauth2.refresh_token\n        creds = Credentials(\n            token=access_token,\n            refresh_token=refresh_token,\n            token_uri=auth_scheme.flows.authorizationCode.tokenUrl,\n            client_id=auth_credential.oauth2.client_id,\n            client_secret=auth_credential.oauth2.client_secret,\n            scopes=list(auth_scheme.flows.authorizationCode.scopes.keys()),\n        )\n    # Cache the token in session state and call the API, skip to step 5\n</code></pre> <p>Step 3: Initiate Authentication Request</p> <p>If no valid credentials (Step 1.) and no auth response (Step 2.) are found, the tool needs to start the OAuth flow. Define the AuthScheme and initial AuthCredential and call <code>tool_context.request_credential()</code>. Return a response indicating authorization is needed.</p> <pre><code># Use auth_scheme and auth_credential configured in the tool.\n\n  tool_context.request_credential(AuthConfig(\n    auth_scheme=auth_scheme,\n    raw_auth_credential=auth_credential,\n  ))\n  return {'pending': true, 'message': 'Awaiting user authentication.'}\n\n# By setting request_credential, ADK detects a pending authentication event. It pauses execution and ask end user to login.\n</code></pre> <p>Step 4: Exchange Authorization Code for Tokens</p> <p>ADK automatically generates oauth authorization URL and presents it to your Agent Client application. your Agent Client application should follow the same way described in Journey 1 to redirect the user to the authorization URL (with <code>redirect_uri</code> appended). Once a user completes the login flow following the authorization URL and ADK extracts the authentication callback url from Agent Client applications, automatically parses the auth code, and generates auth token. At the next Tool call, <code>tool_context.get_auth_response</code> in step 2 will contain a valid credential to use in subsequent API calls.</p> <p>Step 5: Cache Obtained Credentials</p> <p>After successfully obtaining the token from ADK (Step 2) or if the token is still valid (Step 1), immediately store the new <code>Credentials</code> object in <code>tool_context.state</code> (serialized, e.g., as JSON) using your cache key.</p> <pre><code># Inside your tool function, after obtaining 'creds' (either refreshed or newly exchanged)\n# Cache the new/refreshed tokens\ntool_context.state[TOKEN_CACHE_KEY] = json.loads(creds.to_json())\nprint(f\"DEBUG: Cached/updated tokens under key: {TOKEN_CACHE_KEY}\")\n# Proceed to Step 6 (Make API Call)\n</code></pre> <p>Step 6: Make Authenticated API Call</p> <ul> <li>Once you have a valid <code>Credentials</code> object (<code>creds</code> from Step 1 or Step 4), use it to make the actual call to the protected API using the appropriate client library (e.g., <code>googleapiclient</code>, <code>requests</code>). Pass the <code>credentials=creds</code> argument.  </li> <li>Include error handling, especially for <code>HttpError</code> 401/403, which might mean the token expired or was revoked between calls. If you get such an error, consider clearing the cached token (<code>tool_context.state.pop(...)</code>) and potentially returning the <code>auth_required</code> status again to force re-authentication.</li> </ul> <pre><code># Inside your tool function, using the valid 'creds' object\n# Ensure creds is valid before proceeding\nif not creds or not creds.valid:\n   return {\"status\": \"error\", \"error_message\": \"Cannot proceed without valid credentials.\"}\n\ntry:\n   service = build(\"calendar\", \"v3\", credentials=creds) # Example\n   api_result = service.events().list(...).execute()\n   # Proceed to Step 7\nexcept Exception as e:\n   # Handle API errors (e.g., check for 401/403, maybe clear cache and re-request auth)\n   print(f\"ERROR: API call failed: {e}\")\n   return {\"status\": \"error\", \"error_message\": f\"API call failed: {e}\"}\n</code></pre> <p>Step 7: Return Tool Result</p> <ul> <li>After a successful API call, process the result into a dictionary format that is useful for the LLM.  </li> <li>Crucially, include a  along with the data.</li> </ul> <pre><code># Inside your tool function, after successful API call\n    processed_result = [...] # Process api_result for the LLM\n    return {\"status\": \"success\", \"data\": processed_result}\n</code></pre> Full Code Tools and AgentAgent CLIHelperSpec tools_and_agent.py<pre><code>import os\n\nfrom google.adk.auth.auth_schemes import OpenIdConnectWithConfig\nfrom google.adk.auth.auth_credential import AuthCredential, AuthCredentialTypes, OAuth2Auth\nfrom google.adk.tools.openapi_tool.openapi_spec_parser.openapi_toolset import OpenAPIToolset\nfrom google.adk.agents.llm_agent import LlmAgent\n\n# --- Authentication Configuration ---\n# This section configures how the agent will handle authentication using OpenID Connect (OIDC),\n# often layered on top of OAuth 2.0.\n\n# Define the Authentication Scheme using OpenID Connect.\n# This object tells the ADK *how* to perform the OIDC/OAuth2 flow.\n# It requires details specific to your Identity Provider (IDP), like Google OAuth, Okta, Auth0, etc.\n# Note: Replace the example Okta URLs and credentials with your actual IDP details.\n# All following fields are required, and available from your IDP.\nauth_scheme = OpenIdConnectWithConfig(\n    # The URL of the IDP's authorization endpoint where the user is redirected to log in.\n    authorization_endpoint=\"https://your-endpoint.okta.com/oauth2/v1/authorize\",\n    # The URL of the IDP's token endpoint where the authorization code is exchanged for tokens.\n    token_endpoint=\"https://your-token-endpoint.okta.com/oauth2/v1/token\",\n    # The scopes (permissions) your application requests from the IDP.\n    # 'openid' is standard for OIDC. 'profile' and 'email' request user profile info.\n    scopes=['openid', 'profile', \"email\"]\n)\n\n# Define the Authentication Credentials for your specific application.\n# This object holds the client identifier and secret that your application uses\n# to identify itself to the IDP during the OAuth2 flow.\n# !! SECURITY WARNING: Avoid hardcoding secrets in production code. !!\n# !! Use environment variables or a secret management system instead. !!\nauth_credential = AuthCredential(\n  auth_type=AuthCredentialTypes.OPEN_ID_CONNECT,\n  oauth2=OAuth2Auth(\n    client_id=\"CLIENT_ID\",\n    client_secret=\"CIENT_SECRET\",\n  )\n)\n\n\n# --- Toolset Configuration from OpenAPI Specification ---\n# This section defines a sample set of tools the agent can use, configured with Authentication\n# from steps above.\n# This sample set of tools use endpoints protected by Okta and requires an OpenID Connect flow\n# to acquire end user credentials.\nwith open(os.path.join(os.path.dirname(__file__), 'spec.yaml'), 'r') as f:\n    spec_content = f.read()\n\nuserinfo_toolset = OpenAPIToolset(\n   spec_str=spec_content,\n   spec_str_type='yaml',\n   # ** Crucially, associate the authentication scheme and credentials with these tools. **\n   # This tells the ADK that the tools require the defined OIDC/OAuth2 flow.\n   auth_scheme=auth_scheme,\n   auth_credential=auth_credential,\n)\n\n# --- Agent Configuration ---\n# Configure and create the main LLM Agent.\nroot_agent = LlmAgent(\n    model='gemini-2.0-flash',\n    name='enterprise_assistant',\n    instruction='Help user integrate with multiple enterprise systems, including retrieving user information which may require authentication.',\n    tools=userinfo_toolset.get_tools(),\n)\n\n# --- Ready for Use ---\n# The `root_agent` is now configured with tools protected by OIDC/OAuth2 authentication.\n# When the agent attempts to use one of these tools, the ADK framework will automatically\n# trigger the authentication flow defined by `auth_scheme` and `auth_credential`\n# if valid credentials are not already available in the session.\n# The subsequent interaction flow would guide the user through the login process and handle\n# token exchanging, and automatically attach the exchanged token to the endpoint defined in\n# the tool.\n</code></pre> agent_cli.py<pre><code>import asyncio\nfrom dotenv import load_dotenv\nfrom google.adk.artifacts.in_memory_artifact_service import InMemoryArtifactService\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.genai import types\n\nfrom .helpers import is_pending_auth_event, get_function_call_id, get_function_call_auth_config, get_user_input\nfrom .tools_and_agent import root_agent\n\nload_dotenv()\n\nagent = root_agent\n\nasync def async_main():\n  \"\"\"\n  Main asynchronous function orchestrating the agent interaction and authentication flow.\n  \"\"\"\n  # --- Step 1: Service Initialization ---\n  # Use in-memory services for session and artifact storage (suitable for demos/testing).\n  session_service = InMemorySessionService()\n  artifacts_service = InMemoryArtifactService()\n\n  # Create a new user session to maintain conversation state.\n  session = session_service.create_session(\n      state={},  # Optional state dictionary for session-specific data\n      app_name='my_app', # Application identifier\n      user_id='user' # User identifier\n  )\n\n  # --- Step 2: Initial User Query ---\n  # Define the user's initial request.\n  query = 'Show me my user info'\n  print(f\"user: {query}\")\n\n  # Format the query into the Content structure expected by the ADK Runner.\n  content = types.Content(role='user', parts=[types.Part(text=query)])\n\n  # Initialize the ADK Runner\n  runner = Runner(\n      app_name='my_app',\n      agent=agent,\n      artifact_service=artifacts_service,\n      session_service=session_service,\n  )\n\n  # --- Step 3: Send Query and Handle Potential Auth Request ---\n  print(\"\\nRunning agent with initial query...\")\n  events_async = runner.run_async(\n      session_id=session.id, user_id='user', new_message=content\n  )\n\n  # Variables to store details if an authentication request occurs.\n  auth_request_event_id, auth_config = None, None\n\n  # Iterate through the events generated by the first run.\n  async for event in events_async:\n    # Check if this event is the specific 'adk_request_credential' function call.\n    if is_pending_auth_event(event):\n      print(\"--&gt; Authentication required by agent.\")\n      auth_request_event_id = get_function_call_id(event)\n      auth_config = get_function_call_auth_config(event)\n      # Once the auth request is found and processed, exit this loop.\n      # We need to pause execution here to get user input for authentication.\n      break\n\n\n  # If no authentication request was detected after processing all events, exit.\n  if not auth_request_event_id or not auth_config:\n      print(\"\\nAuthentication not required for this query or processing finished.\")\n      return # Exit the main function\n\n  # --- Step 4: Manual Authentication Step (Simulated OAuth 2.0 Flow) ---\n  # This section simulates the user interaction part of an OAuth 2.0 flow.\n  # In a real web application, this would involve browser redirects.\n\n  # Define the Redirect URI. This *must* match one of the URIs registered\n  # with the OAuth provider for your application. The provider sends the user\n  # back here after they approve the request.\n  redirect_uri = 'http://localhost:8000/dev-ui' # Example for local development\n\n  # Construct the Authorization URL that the user must visit.\n  # This typically includes the provider's authorization endpoint URL,\n  # client ID, requested scopes, response type (e.g., 'code'), and the redirect URI.\n  # Here, we retrieve the base authorization URI from the AuthConfig provided by ADK\n  # and append the redirect_uri.\n  # NOTE: A robust implementation would use urlencode and potentially add state, scope, etc.\n  auth_request_uri = (\n      auth_config.exchanged_auth_credential.oauth2.auth_uri\n      + f'&amp;redirect_uri={redirect_uri}' # Simple concatenation; ensure correct query param format\n  )\n\n  print(\"\\n--- User Action Required ---\")\n  # Prompt the user to visit the authorization URL, log in, grant permissions,\n  # and then paste the *full* URL they are redirected back to (which contains the auth code).\n  auth_response_uri = await get_user_input(\n      f'1. Please open this URL in your browser to log in:\\n   {auth_request_uri}\\n\\n'\n      f'2. After successful login and authorization, your browser will be redirected.\\n'\n      f'   Copy the *entire* URL from the browser\\'s address bar.\\n\\n'\n      f'3. Paste the copied URL here and press Enter:\\n\\n&gt; '\n  )\n\n  # --- Step 5: Prepare Authentication Response for the Agent ---\n  # Update the AuthConfig object with the information gathered from the user.\n  # The ADK framework needs the full response URI (containing the code)\n  # and the original redirect URI to complete the OAuth token exchange process internally.\n  auth_config.exchanged_auth_credential.oauth2.auth_response_uri = auth_response_uri\n  auth_config.exchanged_auth_credential.oauth2.redirect_uri = redirect_uri\n\n  # Construct a FunctionResponse Content object to send back to the agent/runner.\n  # This response explicitly targets the 'adk_request_credential' function call\n  # identified earlier by its ID.\n  auth_content = types.Content(\n      role='user',\n      parts=[\n          types.Part(\n              function_response=types.FunctionResponse(\n                  # Crucially, link this response to the original request using the saved ID.\n                  id=auth_request_event_id,\n                  # The special name of the function call we are responding to.\n                  name='adk_request_credential',\n                  # The payload containing all necessary authentication details.\n                  response=auth_config.model_dump(),\n              )\n          )\n      ],\n  )\n\n  # --- Step 6: Resume Execution with Authentication ---\n  print(\"\\nSubmitting authentication details back to the agent...\")\n  # Run the agent again, this time providing the `auth_content` (FunctionResponse).\n  # The ADK Runner intercepts this, processes the 'adk_request_credential' response\n  # (performs token exchange, stores credentials), and then allows the agent\n  # to retry the original tool call that required authentication, now succeeding with\n  # a valid access token embedded.\n  events_async = runner.run_async(\n      session_id=session.id,\n      user_id='user',\n      new_message=auth_content, # Provide the prepared auth response\n  )\n\n  # Process and print the final events from the agent after authentication is complete.\n  # This stream now contain the actual result from the tool (e.g., the user info).\n  print(\"\\n--- Agent Response after Authentication ---\")\n  async for event in events_async:\n    print(event)\n\n\nif __name__ == '__main__':\n  asyncio.run(async_main())\n</code></pre> helpers.py<pre><code>from google.adk.auth import AuthConfig\nfrom google.adk.events import Event\nimport asyncio\n\n# --- Helper Functions ---\nasync def get_user_input(prompt: str) -&gt; str:\n  \"\"\"\n  Asynchronously prompts the user for input in the console.\n\n  Uses asyncio's event loop and run_in_executor to avoid blocking the main\n  asynchronous execution thread while waiting for synchronous `input()`.\n\n  Args:\n    prompt: The message to display to the user.\n\n  Returns:\n    The string entered by the user.\n  \"\"\"\n  loop = asyncio.get_event_loop()\n  # Run the blocking `input()` function in a separate thread managed by the executor.\n  return await loop.run_in_executor(None, input, prompt)\n\n\ndef is_pending_auth_event(event: Event) -&gt; bool:\n  \"\"\"\n  Checks if an ADK Event represents a request for user authentication credentials.\n\n  The ADK framework emits a specific function call ('adk_request_credential')\n  when a tool requires authentication that hasn't been previously satisfied.\n\n  Args:\n    event: The ADK Event object to inspect.\n\n  Returns:\n    True if the event is an 'adk_request_credential' function call, False otherwise.\n  \"\"\"\n  # Safely checks nested attributes to avoid errors if event structure is incomplete.\n  return (\n      event.content\n      and event.content.parts\n      and event.content.parts[0] # Assuming the function call is in the first part\n      and event.content.parts[0].function_call\n      # The specific function name indicating an auth request from the ADK framework.\n      and event.content.parts[0].function_call.name == 'adk_request_credential'\n  )\n\n\ndef get_function_call_id(event: Event) -&gt; str:\n  \"\"\"\n  Extracts the unique ID of the function call from an ADK Event.\n\n  This ID is crucial for correlating a function *response* back to the specific\n  function *call* that the agent initiated to request for auth credentials.\n\n  Args:\n    event: The ADK Event object containing the function call.\n\n  Returns:\n    The unique identifier string of the function call.\n\n  Raises:\n    ValueError: If the function call ID cannot be found in the event structure.\n                (Corrected typo from `contents` to `content` below)\n  \"\"\"\n  # Navigate through the event structure to find the function call ID.\n  if (\n      event\n      and event.content\n      and event.content.parts\n      and event.content.parts[0] # Use content, not contents\n      and event.content.parts[0].function_call\n      and event.content.parts[0].function_call.id\n  ):\n    return event.content.parts[0].function_call.id\n  # If the ID is missing, raise an error indicating an unexpected event format.\n  raise ValueError(f'Cannot get function call id from event {event}')\n\n\ndef get_function_call_auth_config(event: Event) -&gt; AuthConfig:\n  \"\"\"\n  Extracts the authentication configuration details from an 'adk_request_credential' event.\n\n  Client should use this AuthConfig to necessary authentication details (like OAuth codes and state)\n  and sent it back to the ADK to continue OAuth token exchanging.\n\n  Args:\n    event: The ADK Event object containing the 'adk_request_credential' call.\n\n  Returns:\n    An AuthConfig object populated with details from the function call arguments.\n\n  Raises:\n    ValueError: If the 'auth_config' argument cannot be found in the event.\n                (Corrected typo from `contents` to `content` below)\n  \"\"\"\n  if (\n      event\n      and event.content\n      and event.content.parts\n      and event.content.parts[0] # Use content, not contents\n      and event.content.parts[0].function_call\n      and event.content.parts[0].function_call.args\n      and event.content.parts[0].function_call.args.get('auth_config')\n  ):\n    # Reconstruct the AuthConfig object using the dictionary provided in the arguments.\n    # The ** operator unpacks the dictionary into keyword arguments for the constructor.\n    return AuthConfig(\n          **event.content.parts[0].function_call.args.get('auth_config')\n      )\n  raise ValueError(f'Cannot get auth config from event {event}')\n</code></pre> <pre><code>openapi: 3.0.1\ninfo:\ntitle: Okta User Info API\nversion: 1.0.0\ndescription: |-\n   API to retrieve user profile information based on a valid Okta OIDC Access Token.\n   Authentication is handled via OpenID Connect with Okta.\ncontact:\n   name: API Support\n   email: support@example.com # Replace with actual contact if available\nservers:\n- url: &lt;substitute with your server name&gt;\n   description: Production Environment\npaths:\n/okta-jwt-user-api:\n   get:\n      summary: Get Authenticated User Info\n      description: |-\n      Fetches profile details for the user\n      operationId: getUserInfo\n      tags:\n      - User Profile\n      security:\n      - okta_oidc:\n            - openid\n            - email\n            - profile\n      responses:\n      '200':\n         description: Successfully retrieved user information.\n         content:\n            application/json:\n            schema:\n               type: object\n               properties:\n                  sub:\n                  type: string\n                  description: Subject identifier for the user.\n                  example: \"abcdefg\"\n                  name:\n                  type: string\n                  description: Full name of the user.\n                  example: \"Example LastName\"\n                  locale:\n                  type: string\n                  description: User's locale, e.g., en-US or en_US.\n                  example: \"en_US\"\n                  email:\n                  type: string\n                  format: email\n                  description: User's primary email address.\n                  example: \"username@example.com\"\n                  preferred_username:\n                  type: string\n                  description: Preferred username of the user (often the email).\n                  example: \"username@example.com\"\n                  given_name:\n                  type: string\n                  description: Given name (first name) of the user.\n                  example: \"Example\"\n                  family_name:\n                  type: string\n                  description: Family name (last name) of the user.\n                  example: \"LastName\"\n                  zoneinfo:\n                  type: string\n                  description: User's timezone, e.g., America/Los_Angeles.\n                  example: \"America/Los_Angeles\"\n                  updated_at:\n                  type: integer\n                  format: int64 # Using int64 for Unix timestamp\n                  description: Timestamp when the user's profile was last updated (Unix epoch time).\n                  example: 1743617719\n                  email_verified:\n                  type: boolean\n                  description: Indicates if the user's email address has been verified.\n                  example: true\n               required:\n                  - sub\n                  - name\n                  - locale\n                  - email\n                  - preferred_username\n                  - given_name\n                  - family_name\n                  - zoneinfo\n                  - updated_at\n                  - email_verified\n      '401':\n         description: Unauthorized. The provided Bearer token is missing, invalid, or expired.\n         content:\n            application/json:\n            schema:\n               $ref: '#/components/schemas/Error'\n      '403':\n         description: Forbidden. The provided token does not have the required scopes or permissions to access this resource.\n         content:\n            application/json:\n            schema:\n               $ref: '#/components/schemas/Error'\ncomponents:\nsecuritySchemes:\n   okta_oidc:\n      type: openIdConnect\n      description: Authentication via Okta using OpenID Connect. Requires a Bearer Access Token.\n      openIdConnectUrl: https://your-endpoint.okta.com/.well-known/openid-configuration\nschemas:\n   Error:\n      type: object\n      properties:\n      code:\n         type: string\n         description: An error code.\n      message:\n         type: string\n         description: A human-readable error message.\n      required:\n         - code\n         - message\n</code></pre>"},{"location":"tools/authentication/","title":"\u5de5\u5177\u7684\u9a57\u8b49\u6a5f\u5236","text":""},{"location":"tools/authentication/#_2","title":"\u6838\u5fc3\u6982\u5ff5","text":"<p>\u8a31\u591a\u5de5\u5177\u9700\u8981\u5b58\u53d6\u53d7\u4fdd\u8b77\u7684\u8cc7\u6e90\uff08\u4f8b\u5982 Google Calendar \u7684\u4f7f\u7528\u8005\u8cc7\u6599\u3001Salesforce \u7d00\u9304\u7b49\uff09\uff0c\u56e0\u6b64\u5fc5\u9808\u9032\u884c\u9a57\u8b49\u3002Agent Development Kit (ADK) \u63d0\u4f9b\u4e86\u4e00\u5957\u7cfb\u7d71\uff0c\u80fd\u5920\u5b89\u5168\u5730\u8655\u7406\u591a\u7a2e\u9a57\u8b49\u65b9\u5f0f\u3002</p> <p>\u4e3b\u8981\u6d89\u53ca\u7684\u5143\u4ef6\u5982\u4e0b\uff1a</p> <ol> <li><code>AuthScheme</code>\uff1a\u5b9a\u7fa9 API \u671f\u671b\u5982\u4f55\u63d0\u4f9b\u9a57\u8b49\u6191\u8b49\uff08\u4f8b\u5982\uff1a\u5728\u6a19\u982d\u4e2d\u50b3\u905e API Key\uff0c\u6216\u662f OAuth 2.0 Bearer token\uff09\u3002Agent Development Kit (ADK) \u652f\u63f4\u8207 OpenAPI 3.0 \u76f8\u540c\u985e\u578b\u7684\u9a57\u8b49\u6a5f\u5236\u3002\u82e5\u60f3\u4e86\u89e3\u5404\u7a2e\u6191\u8b49\u985e\u578b\u7684\u8a73\u7d30\u8cc7\u8a0a\uff0c\u8acb\u53c3\u8003 OpenAPI doc: Authentication\u3002ADK \u4f7f\u7528\u7279\u5b9a\u985e\u5225\u5982 <code>APIKey</code>\u3001<code>HTTPBearer</code>\u3001<code>OAuth2</code>\u3001<code>OpenIdConnectWithConfig</code>\u3002</li> <li><code>AuthCredential</code>\uff1a\u4fdd\u5b58\u555f\u52d5\u9a57\u8b49\u6d41\u7a0b\u6240\u9700\u7684\u521d\u59cb\u8cc7\u8a0a\uff08\u4f8b\u5982\uff1a\u61c9\u7528\u7a0b\u5f0f\u7684 OAuth Client ID/Secret\u3001API key \u503c\uff09\u3002\u5176\u4e2d\u5305\u542b\u4e00\u500b <code>auth_type</code>\uff08\u5982 <code>API_KEY</code>\u3001<code>OAUTH2</code>\u3001<code>SERVICE_ACCOUNT</code>\uff09\uff0c\u7528\u4f86\u6307\u5b9a\u6191\u8b49\u985e\u578b\u3002</li> </ol> <p>\u4e00\u822c\u6d41\u7a0b\u662f\u5728\u8a2d\u5b9a\u5de5\u5177\u6642\u63d0\u4f9b\u9019\u4e9b\u8cc7\u8a0a\u3002Agent Development Kit (ADK) \u6703\u5617\u8a66\u81ea\u52d5\u5c07\u521d\u59cb\u6191\u8b49\u4ea4\u63db\u70ba\u53ef\u7528\u7684\u6191\u8b49\uff08\u4f8b\u5982 access token\uff09\uff0c\u518d\u8b93\u5de5\u5177\u9032\u884c API \u547c\u53eb\u3002\u82e5\u6d41\u7a0b\u9700\u8981\u4f7f\u7528\u8005\u4e92\u52d5\uff08\u5982 OAuth \u540c\u610f\u6388\u6b0a\uff09\uff0c\u5247\u6703\u89f8\u767c\u4e00\u500b\u8207 Agent Client \u61c9\u7528\u7a0b\u5f0f\u4e92\u52d5\u7684\u5c08\u5c6c\u6d41\u7a0b\u3002</p>"},{"location":"tools/authentication/#_3","title":"\u652f\u63f4\u7684\u521d\u59cb\u6191\u8b49\u985e\u578b","text":"<ul> <li>API_KEY\uff1a \u7528\u65bc\u7c21\u55ae\u7684 key/value \u9a57\u8b49\u3002\u901a\u5e38\u4e0d\u9700\u8981\u4ea4\u63db\u3002</li> <li>HTTP\uff1a \u53ef\u7528\u65bc Basic Auth\uff08\u4e0d\u5efa\u8b70/\u4e0d\u652f\u63f4\u4ea4\u63db\uff09\u6216\u5df2\u53d6\u5f97\u7684 Bearer token\u3002\u82e5\u70ba Bearer token\uff0c\u5247\u4e0d\u9700\u4ea4\u63db\u3002</li> <li>OAUTH2\uff1a \u7528\u65bc\u6a19\u6e96 OAuth 2.0 \u6d41\u7a0b\u3002\u9700\u8981\u8a2d\u5b9a\uff08client ID\u3001secret\u3001scopes\uff09\uff0c\u4e14\u901a\u5e38\u6703\u89f8\u767c\u4f7f\u7528\u8005\u540c\u610f\u7684\u4e92\u52d5\u6d41\u7a0b\u3002</li> <li>OPEN_ID_CONNECT\uff1a \u57fa\u65bc OpenID Connect \u7684\u9a57\u8b49\u3002\u8207 OAuth2 \u985e\u4f3c\uff0c\u901a\u5e38\u9700\u8981\u8a2d\u5b9a\u8207\u4f7f\u7528\u8005\u4e92\u52d5\u3002</li> <li>SERVICE_ACCOUNT\uff1a \u7528\u65bc Google Cloud \u670d\u52d9\u5e33\u6236\u6191\u8b49\uff08JSON \u91d1\u9470\u6216 Application Default Credentials\uff09\u3002\u901a\u5e38\u6703\u4ea4\u63db\u70ba Bearer token\u3002</li> </ul>"},{"location":"tools/authentication/#_4","title":"\u5de5\u5177\u9a57\u8b49\u8a2d\u5b9a\u65b9\u5f0f","text":"<p>\u4f60\u53ef\u4ee5\u5728\u5b9a\u7fa9\u5de5\u5177\u6642\u8a2d\u5b9a\u9a57\u8b49\u8cc7\u8a0a\uff1a</p> <ul> <li> <p>RestApiTool / OpenAPIToolset\uff1a\u521d\u59cb\u5316\u6642\u50b3\u5165 <code>auth_scheme</code> \u8207 <code>auth_credential</code></p> </li> <li> <p>GoogleApiToolSet \u5de5\u5177\uff1aAgent Development Kit (ADK) \u5167\u5efa Google Calendar\u3001BigQuery \u7b49\u7b2c\u4e00\u65b9\u5de5\u5177\u3002\u8acb\u4f7f\u7528\u8a72\u5de5\u5177\u7d44\u7684\u5c08\u5c6c\u65b9\u6cd5\u3002</p> </li> <li> <p>APIHubToolset / ApplicationIntegrationToolset\uff1a\u82e5 API Hub \u7ba1\u7406\u7684 API \u6216 Application Integration \u63d0\u4f9b\u7684 API \u9700\u8981\u9a57\u8b49\uff0c\u521d\u59cb\u5316\u6642\u50b3\u5165 <code>auth_scheme</code> \u8207 <code>auth_credential</code>\u3002</p> </li> </ul> <p>WARNING</p> <p>\u5c07\u654f\u611f\u6191\u8b49\uff08\u5982 access token\uff0c\u7279\u5225\u662f refresh token\uff09\u76f4\u63a5\u5132\u5b58\u5728 session state \u4e2d\uff0c\u53ef\u80fd\u6703\u6839\u64da\u4f60\u7684 session \u5132\u5b58\u5f8c\u7aef\uff08<code>SessionService</code>\uff09\u4ee5\u53ca\u6574\u9ad4\u61c9\u7528\u7a0b\u5f0f\u7684\u5b89\u5168\u72c0\u614b\u5e36\u4f86\u5b89\u5168\u98a8\u96aa\u3002</p> <ul> <li><code>InMemorySessionService</code>\uff1a \u9069\u7528\u65bc\u6e2c\u8a66\u8207\u958b\u767c\uff0c\u7576\u7a0b\u5e8f\u7d50\u675f\u6642\u8cc7\u6599\u6703\u907a\u5931\u3002\u7531\u65bc\u5176\u70ba\u66ab\u6642\u6027\uff0c\u98a8\u96aa\u8f03\u4f4e\u3002</li> <li>\u8cc7\u6599\u5eab\uff0f\u6301\u4e45\u6027\u5132\u5b58\uff1a \u5f37\u70c8\u5efa\u8b70\u5728\u5c07 token \u8cc7\u6599\u5132\u5b58\u5230\u8cc7\u6599\u5eab\u524d\u9032\u884c\u52a0\u5bc6\uff0c\u8acb\u4f7f\u7528\u5f37\u5065\u7684\u52a0\u5bc6\u51fd\u5f0f\u5eab\uff08\u5982 <code>cryptography</code>\uff09\uff0c\u4e26\u5b89\u5168\u7ba1\u7406\u52a0\u5bc6\u91d1\u9470\uff08\u4f8b\u5982\u4f7f\u7528\u91d1\u9470\u7ba1\u7406\u670d\u52d9\uff09\u3002</li> <li>\u5b89\u5168\u6191\u8b49\u5132\u5b58\u670d\u52d9\uff1a \u5728\u6b63\u5f0f\u74b0\u5883\u4e2d\uff0c\u5c07\u654f\u611f\u6191\u8b49\u5132\u5b58\u5728\u5c08\u7528\u7684 Secret Manager\uff08\u5982 Google Cloud Secret Manager \u6216 HashiCorp Vault\uff09\u662f\u6700\u63a8\u85a6\u7684\u505a\u6cd5\u3002\u4f60\u7684\u5de5\u5177\u53ef\u4ee5\u50c5\u5728 session state \u4e2d\u5132\u5b58\u77ed\u6548\u7684 access token \u6216\u5b89\u5168\u53c3\u7167\uff08\u800c\u975e refresh token \u672c\u8eab\uff09\uff0c\u4e26\u5728\u9700\u8981\u6642\u5f9e\u5b89\u5168\u5132\u5b58\u670d\u52d9\u64f7\u53d6\u5fc5\u8981\u7684\u6191\u8b49\u3002</li> </ul>"},{"location":"tools/authentication/#1-agentic","title":"\u65c5\u7a0b 1\uff1a\u4f7f\u7528\u5df2\u9a57\u8b49\u5de5\u5177\u6253\u9020 Agentic \u61c9\u7528\u7a0b\u5f0f","text":"<p>\u672c\u7bc0\u91cd\u9ede\u8aaa\u660e\u5982\u4f55\u5728\u4f60\u7684 agentic \u61c9\u7528\u7a0b\u5f0f\u4e2d\uff0c\u4f7f\u7528\u9700\u8981\u9a57\u8b49\u7684\u73fe\u6709\u5de5\u5177\uff08\u5982\u4f86\u81ea <code>RestApiTool/ OpenAPIToolset</code>\u3001<code>APIHubToolset</code>\u3001<code>GoogleApiToolSet</code> \u7684\u5de5\u5177\uff09\u3002\u4f60\u7684\u4e3b\u8981\u8cac\u4efb\u662f\u8a2d\u5b9a\u9019\u4e9b\u5de5\u5177\uff0c\u4e26\u8655\u7406\u4e92\u52d5\u5f0f\u9a57\u8b49\u6d41\u7a0b\u7684\u7528\u6236\u7aef\u90e8\u5206\uff08\u5982\u679c\u5de5\u5177\u9700\u8981\uff09\u3002</p>"},{"location":"tools/authentication/#1","title":"1. \u8a2d\u5b9a\u5177\u9a57\u8b49\u529f\u80fd\u7684\u5de5\u5177","text":"<p>\u7576\u4f60\u5c07\u5df2\u9a57\u8b49\u7684\u5de5\u5177\u52a0\u5165 agent \u6642\uff0c\u9700\u8981\u63d0\u4f9b\u5176\u6240\u9700\u7684 <code>AuthScheme</code> \u4ee5\u53ca\u4f60\u7684\u61c9\u7528\u7a0b\u5f0f\u521d\u59cb\u7684 <code>AuthCredential</code>\u3002</p> <p>A. \u4f7f\u7528 OpenAPI \u70ba\u57fa\u790e\u7684\u5de5\u5177\u7d44\uff08<code>OpenAPIToolset</code>\u3001<code>APIHubToolset</code> \u7b49\uff09</p> <p>\u5728\u521d\u59cb\u5316\u5de5\u5177\u7d44\u6642\u50b3\u5165\u9a57\u8b49\u65b9\u6848\u8207\u6191\u8b49\u3002\u5de5\u5177\u7d44\u6703\u5c07\u9019\u4e9b\u8cc7\u8a0a\u5957\u7528\u5230\u6240\u6709\u7522\u751f\u7684\u5de5\u5177\u4e0a\u3002\u4ee5\u4e0b\u662f\u5728 Agent Development Kit (ADK) \u4e2d\u5efa\u7acb\u5177\u9a57\u8b49\u529f\u80fd\u5de5\u5177\u7684\u5e7e\u7a2e\u65b9\u5f0f\u3002</p> API KeyOAuth2\u670d\u52d9\u5e33\u6236OpenID connect <p>Create a tool requiring an API Key.</p> <pre><code>from google.adk.tools.openapi_tool.auth.auth_helpers import token_to_scheme_credential\nfrom google.adk.tools.openapi_tool.openapi_spec_parser.openapi_toolset import OpenAPIToolset\n\nauth_scheme, auth_credential = token_to_scheme_credential(\n    \"apikey\", \"query\", \"apikey\", \"YOUR_API_KEY_STRING\"\n)\nsample_api_toolset = OpenAPIToolset(\n    spec_str=\"...\",  # Fill this with an OpenAPI spec string\n    spec_str_type=\"yaml\",\n    auth_scheme=auth_scheme,\n    auth_credential=auth_credential,\n)\n</code></pre> <p>Create a tool requiring OAuth2.</p> <pre><code>from google.adk.tools.openapi_tool.openapi_spec_parser.openapi_toolset import OpenAPIToolset\nfrom fastapi.openapi.models import OAuth2\nfrom fastapi.openapi.models import OAuthFlowAuthorizationCode\nfrom fastapi.openapi.models import OAuthFlows\nfrom google.adk.auth import AuthCredential\nfrom google.adk.auth import AuthCredentialTypes\nfrom google.adk.auth import OAuth2Auth\n\nauth_scheme = OAuth2(\n    flows=OAuthFlows(\n        authorizationCode=OAuthFlowAuthorizationCode(\n            authorizationUrl=\"https://accounts.google.com/o/oauth2/auth\",\n            tokenUrl=\"https://oauth2.googleapis.com/token\",\n            scopes={\n                \"https://www.googleapis.com/auth/calendar\": \"calendar scope\"\n            },\n        )\n    )\n)\nauth_credential = AuthCredential(\n    auth_type=AuthCredentialTypes.OAUTH2,\n    oauth2=OAuth2Auth(\n        client_id=YOUR_OAUTH_CLIENT_ID, \n        client_secret=YOUR_OAUTH_CLIENT_SECRET\n    ),\n)\n\ncalendar_api_toolset = OpenAPIToolset(\n    spec_str=google_calendar_openapi_spec_str, # Fill this with an openapi spec\n    spec_str_type='yaml',\n    auth_scheme=auth_scheme,\n    auth_credential=auth_credential,\n)\n</code></pre> <p>Create a tool requiring Service Account.</p> <pre><code>from google.adk.tools.openapi_tool.auth.auth_helpers import service_account_dict_to_scheme_credential\nfrom google.adk.tools.openapi_tool.openapi_spec_parser.openapi_toolset import OpenAPIToolset\n\nservice_account_cred = json.loads(service_account_json_str)\nauth_scheme, auth_credential = service_account_dict_to_scheme_credential(\n    config=service_account_cred,\n    scopes=[\"https://www.googleapis.com/auth/cloud-platform\"],\n)\nsample_toolset = OpenAPIToolset(\n    spec_str=sa_openapi_spec_str, # Fill this with an openapi spec\n    spec_str_type='json',\n    auth_scheme=auth_scheme,\n    auth_credential=auth_credential,\n)\n</code></pre> <p>OpenID Connect \u662f\u4e00\u7a2e\u57fa\u65bc OAuth 2.0 \u5354\u8b70\u7684\u8eab\u4efd\u9a57\u8b49\u5c64\uff0c\u5141\u8a31\u7528\u6236\u5b89\u5168\u5730\u4f7f\u7528\u55ae\u4e00\u5e33\u865f\u767b\u5165\u591a\u500b\u61c9\u7528\u7a0b\u5f0f\u3002\u5b83\u5e38\u7528\u65bc\u73fe\u4ee3 Web \u61c9\u7528\u7a0b\u5f0f\u548c API \u7684\u8eab\u4efd\u9a57\u8b49\u6d41\u7a0b\u3002\u900f\u904e OpenID Connect\uff0c\u61c9\u7528\u7a0b\u5f0f\u53ef\u4ee5\u53d6\u5f97\u7528\u6236\u7684\u57fa\u672c\u500b\u4eba\u8cc7\u8a0a\uff08\u5982\u540d\u7a31\u3001\u96fb\u5b50\u90f5\u4ef6\uff09\uff0c\u4e26\u9a57\u8b49\u7528\u6236\u7684\u8eab\u4efd\uff0c\u540c\u6642\u907f\u514d\u76f4\u63a5\u8655\u7406\u5bc6\u78bc\u3002</p> <p>\u4e3b\u8981\u7279\u9ede\uff1a</p> <ul> <li>\u57fa\u65bc OAuth 2.0 \u6a19\u6e96\uff0c\u5ee3\u6cdb\u652f\u63f4\u591a\u7a2e\u5e73\u53f0\u8207\u8a9e\u8a00\u3002</li> <li>\u652f\u63f4\u55ae\u4e00\u767b\u5165\uff08Single Sign-On, SSO\uff09\u9ad4\u9a57\u3002</li> <li>\u63d0\u4f9b\u6a19\u6e96\u5316\u7684\u7528\u6236\u8cc7\u8a0a\uff08ID Token\uff09\u683c\u5f0f\uff0c\u65b9\u4fbf\u6574\u5408\u3002</li> <li>\u652f\u63f4\u591a\u7a2e\u8eab\u4efd\u63d0\u4f9b\u8005\uff08\u5982 Google\u3001GitHub \u7b49\uff09\u3002</li> </ul> <p>\u5e38\u898b\u61c9\u7528\u5834\u666f\uff1a</p> <ul> <li>\u4f01\u696d\u5167\u90e8\u7cfb\u7d71\u7684\u7d71\u4e00\u767b\u5165</li> <li>\u7b2c\u4e09\u65b9\u61c9\u7528\u7a0b\u5f0f\u7684\u5feb\u901f\u8a3b\u518a\u8207\u767b\u5165</li> <li>API \u7684\u5b89\u5168\u6388\u6b0a\u8207\u8eab\u4efd\u9a57\u8b49</li> </ul> <p>\u5982\u9700\u9032\u4e00\u6b65\u77ad\u89e3 OpenID Connect\uff0c\u8acb\u53c3\u95b1 \u5b98\u65b9\u6587\u4ef6\u3002</p> <pre><code>  Create a tool requiring OpenID connect.\n\n  ```py\n  from google.adk.auth.auth_schemes import OpenIdConnectWithConfig\n  from google.adk.auth.auth_credential import AuthCredential, AuthCredentialTypes, OAuth2Auth\n  from google.adk.tools.openapi_tool.openapi_spec_parser.openapi_toolset import OpenAPIToolset\n\n  auth_scheme = OpenIdConnectWithConfig(\n      authorization_endpoint=OAUTH2_AUTH_ENDPOINT_URL,\n      token_endpoint=OAUTH2_TOKEN_ENDPOINT_URL,\n      scopes=['openid', 'YOUR_OAUTH_SCOPES\"]\n  )\n  auth_credential = AuthCredential(\n      auth_type=AuthCredentialTypes.OPEN_ID_CONNECT,\n      oauth2=OAuth2Auth(\n          client_id=\"...\",\n          client_secret=\"...\",\n      )\n  )\n\n  userinfo_toolset = OpenAPIToolset(\n      spec_str=content, # Fill in an actual spec\n      spec_str_type='yaml',\n      auth_scheme=auth_scheme,\n      auth_credential=auth_credential,\n  )\n  ```\n</code></pre> <p>B. \u4f7f\u7528 Google API \u5de5\u5177\u96c6\uff08\u4f8b\u5982\uff1a<code>calendar_tool_set</code>\uff09</p> <p>\u9019\u4e9b\u5de5\u5177\u96c6\u901a\u5e38\u6709\u5c08\u5c6c\u7684\u8a2d\u5b9a\u65b9\u6cd5\u3002</p> <p>\u63d0\u793a\uff1a\u5982\u4f55\u5efa\u7acb Google OAuth Client ID \u8207 Secret\uff0c\u8acb\u53c3\u8003\u6b64\u6307\u5357\uff1aGet your Google API Client ID</p> <pre><code># Example: Configuring Google Calendar Tools\nfrom google.adk.tools.google_api_tool import calendar_tool_set\n\nclient_id = \"YOUR_GOOGLE_OAUTH_CLIENT_ID.apps.googleusercontent.com\"\nclient_secret = \"YOUR_GOOGLE_OAUTH_CLIENT_SECRET\"\n\n# Use the specific configure method for this toolset type\ncalendar_tool_set.configure_auth(\n    client_id=oauth_client_id, client_secret=oauth_client_secret\n)\n\n# agent = LlmAgent(..., tools=calendar_tool_set.get_tool('calendar_tool_set'))\n</code></pre> <p>auth \u8acb\u6c42\u6d41\u7a0b\u7684\u6642\u5e8f\u5716\uff08\u7576 tools \u8acb\u6c42\u9a57\u8b49\u6191\u8b49\u6642\uff09\u5982\u4e0b\u6240\u793a\uff1a</p> <p> </p>"},{"location":"tools/authentication/#2-oauthoidc","title":"2. \u8655\u7406\u4e92\u52d5\u5f0f OAuth/OIDC \u6d41\u7a0b\uff08\u7528\u6236\u7aef\uff09","text":"<p>\u5982\u679c\u67d0\u500b tool \u9700\u8981\u4f7f\u7528\u8005\u767b\u5165\uff0f\u540c\u610f\uff08\u901a\u5e38\u662f OAuth 2.0 \u6216 OIDC\uff09\uff0cAgent Development Kit (ADK) \u6846\u67b6\u6703\u66ab\u505c\u57f7\u884c\uff0c\u4e26\u901a\u77e5\u4f60\u7684 Agent Client \u61c9\u7528\u7a0b\u5f0f\u3002\u9019\u88e1\u6709\u5169\u7a2e\u60c5\u5883\uff1a</p> <ul> <li>Agent Client \u61c9\u7528\u7a0b\u5f0f\u76f4\u63a5\u5728\u540c\u4e00\u500b\u884c\u7a0b\u4e2d\u57f7\u884c agent\uff08\u900f\u904e <code>runner.run_async</code>\uff09\uff0c\u4f8b\u5982 UI \u5f8c\u7aef\u3001\u547d\u4ee4\u5217\u4ecb\u9762 (Command Line Interface) \u61c9\u7528\u7a0b\u5f0f\uff0c\u6216 Spark \u4f5c\u696d\u7b49\u3002</li> <li>Agent Client \u61c9\u7528\u7a0b\u5f0f\u900f\u904e <code>/run</code> \u6216 <code>/run_sse</code> endpoint \u8207 ADK \u7684 fastapi server \u4e92\u52d5\u3002ADK \u7684 fastapi server \u53ef\u4ee5\u90e8\u7f72\u5728\u8207 Agent Client \u61c9\u7528\u7a0b\u5f0f\u76f8\u540c\u6216\u4e0d\u540c\u7684\u4f3a\u670d\u5668\u4e0a\u3002</li> </ul> <p>\u7b2c\u4e8c\u7a2e\u60c5\u5883\u5176\u5be6\u662f\u7b2c\u4e00\u7a2e\u60c5\u5883\u7684\u7279\u6b8a\u60c5\u6cc1\uff0c\u56e0\u70ba <code>/run</code> \u6216 <code>/run_sse</code> endpoint \u4e5f\u6703\u547c\u53eb <code>runner.run_async</code>\u3002\u5169\u8005\u7684\u5dee\u7570\u50c5\u5728\u65bc\uff1a</p> <ul> <li>\u662f\u547c\u53eb Python \u51fd\u5f0f\u4f86\u57f7\u884c agent\uff08\u7b2c\u4e00\u7a2e\u60c5\u5883\uff09\uff0c\u9084\u662f\u547c\u53eb\u670d\u52d9\u7684 endpoint \u4f86\u57f7\u884c agent\uff08\u7b2c\u4e8c\u7a2e\u60c5\u5883\uff09\u3002</li> <li>\u7d50\u679c\u4e8b\u4ef6\u662f\u8a18\u61b6\u9ad4\u5167\u7684\u7269\u4ef6\uff08\u7b2c\u4e00\u7a2e\u60c5\u5883\uff09\uff0c\u9084\u662f HTTP \u56de\u61c9\u4e2d\u7684\u5e8f\u5217\u5316 JSON \u5b57\u4e32\uff08\u7b2c\u4e8c\u7a2e\u60c5\u5883\uff09\u3002</li> </ul> <p>\u4ee5\u4e0b\u7ae0\u7bc0\u5c07\u8457\u91cd\u65bc\u7b2c\u4e00\u7a2e\u60c5\u5883\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5c07\u5176\u5c0d\u61c9\u5230\u7b2c\u4e8c\u7a2e\u60c5\u5883\u3002\u5982\u6709\u5fc5\u8981\uff0c\u6211\u5011\u4e5f\u6703\u8aaa\u660e\u8655\u7406\u7b2c\u4e8c\u7a2e\u60c5\u5883\u6642\u7684\u5dee\u7570\u3002</p> <p>\u4ee5\u4e0b\u662f\u4f60\u7684 client \u61c9\u7528\u7a0b\u5f0f\u7684\u9010\u6b65\u6d41\u7a0b\uff1a</p> <p>\u6b65\u9a5f 1\uff1a\u57f7\u884c agent \u4e26\u5075\u6e2c auth \u8acb\u6c42</p> <ul> <li>\u4f7f\u7528 <code>runner.run_async</code> \u555f\u52d5 agent \u4e92\u52d5\u3002  </li> <li>\u9010\u4e00\u8655\u7406\u7522\u751f\u7684\u4e8b\u4ef6\u3002  </li> <li>\u5c0b\u627e\u5177\u6709\u7279\u6b8a\u540d\u7a31\u7684 function call \u4e8b\u4ef6\uff1a<code>adk_request_credential</code>\u3002\u6b64\u4e8b\u4ef6\u8868\u793a\u9700\u8981\u4f7f\u7528\u8005\u4e92\u52d5\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u8f14\u52a9\u51fd\u5f0f\u4f86\u8fa8\u8b58\u6b64\u4e8b\u4ef6\u4e26\u64f7\u53d6\u6240\u9700\u8cc7\u8a0a\u3002\uff08\u5c0d\u65bc\u7b2c\u4e8c\u7a2e\u60c5\u5883\uff0c\u908f\u8f2f\u985e\u4f3c\uff0c\u53ea\u662f\u4f60\u9700\u8981\u5f9e HTTP \u56de\u61c9\u4e2d\u53cd\u5e8f\u5217\u5316\u4e8b\u4ef6\uff09\u3002</li> </ul> <pre><code># runner = Runner(...)\n# session = await session_service.create_session(...)\n# content = types.Content(...) # User's initial query\n\nprint(\"\\nRunning agent...\")\nevents_async = runner.run_async(\n    session_id=session.id, user_id='user', new_message=content\n)\n\nauth_request_function_call_id, auth_config = None, None\n\nasync for event in events_async:\n    # Use helper to check for the specific auth request event\n    if (auth_request_function_call := get_auth_request_function_call(event)):\n        print(\"--&gt; Authentication required by agent.\")\n        # Store the ID needed to respond later\n        if not (auth_request_function_call_id := auth_request_function_call.id):\n            raise ValueError(f'Cannot get function call id from function call: {auth_request_function_call}')\n        # Get the AuthConfig containing the auth_uri etc.\n        auth_config = get_auth_config(auth_request_function_call)\n        break # Stop processing events for now, need user interaction\n\nif not auth_request_function_call_id:\n    print(\"\\nAuth not required or agent finished.\")\n    # return # Or handle final response if received\n</code></pre> <p>\u8f14\u52a9\u51fd\u5f0f <code>helpers.py</code>\uff1a</p> <pre><code>from google.adk.events import Event\nfrom google.adk.auth import AuthConfig # Import necessary type\nfrom google.genai import types\n\ndef get_auth_request_function_call(event: Event) -&gt; types.FunctionCall:\n    # Get the special auth request function call from the event\n    if not event.content or not event.content.parts:\n        return\n    for part in event.content.parts:\n        if (\n            part \n            and part.function_call \n            and part.function_call.name == 'adk_request_credential'\n            and event.long_running_tool_ids \n            and part.function_call.id in event.long_running_tool_ids\n        ):\n\n            return part.function_call\n\ndef get_auth_config(auth_request_function_call: types.FunctionCall) -&gt; AuthConfig:\n    # Extracts the AuthConfig object from the arguments of the auth request function call\n    if not auth_request_function_call.args or not (auth_config := auth_request_function_call.args.get('authConfig')):\n        raise ValueError(f'Cannot get auth config from function call: {auth_request_function_call}')\n    if isinstance(auth_config, dict):\n        auth_config = AuthConfig.model_validate(auth_config)\n    elif not isinstance(auth_config, AuthConfig):\n        raise ValueError(f'Cannot get auth config {auth_config} is not an instance of AuthConfig.')\n    return auth_config\n</code></pre> <p>\u6b65\u9a5f 2\uff1a\u5c0e\u5f15\u7528\u6236\u9032\u884c\u6388\u6b0a</p> <ul> <li>\u5f9e\u524d\u4e00\u6b65\u63d0\u53d6\u7684 <code>auth_config</code> \u4e2d\u53d6\u5f97\u6388\u6b0a URL\uff08<code>auth_uri</code>\uff09\u3002</li> <li>\u91cd\u9ede\u662f\uff0c\u8acb\u5c07\u60a8\u7684\u61c9\u7528\u7a0b\u5f0f \u7684 <code>redirect_uri</code> \u4ee5\u67e5\u8a62\u53c3\u6578\u7684\u65b9\u5f0f\u9644\u52a0\u5230\u6b64 <code>auth_uri</code>\u3002\u6b64 <code>redirect_uri</code> \u5fc5\u9808\u4e8b\u5148\u5728\u60a8\u7684 OAuth \u63d0\u4f9b\u8005\uff08\u4f8b\u5982 Google Cloud Console\u3001Okta admin panel\uff09\u4e2d\u8a3b\u518a\u3002</li> <li>\u5c07\u4f7f\u7528\u8005\u5c0e\u5411\u9019\u500b\u5b8c\u6574\u7684 URL\uff08\u4f8b\u5982\u5728\u700f\u89bd\u5668\u4e2d\u958b\u555f\uff09\u3002</li> </ul> <pre><code># (Continuing after detecting auth needed)\n\nif auth_request_function_call_id and auth_config:\n    # Get the base authorization URL from the AuthConfig\n    base_auth_uri = auth_config.exchanged_auth_credential.oauth2.auth_uri\n\n    if base_auth_uri:\n        redirect_uri = 'http://localhost:8000/callback' # MUST match your OAuth client app config\n        # Append redirect_uri (use urlencode in production)\n        auth_request_uri = base_auth_uri + f'&amp;redirect_uri={redirect_uri}'\n        # Now you need to redirect your end user to this auth_request_uri or ask them to open this auth_request_uri in their browser\n        # This auth_request_uri should be served by the corresponding auth provider and the end user should login and authorize your applicaiton to access their data\n        # And then the auth provider will redirect the end user to the redirect_uri you provided\n        # Next step: Get this callback URL from the user (or your web server handler)\n    else:\n         print(\"ERROR: Auth URI not found in auth_config.\")\n         # Handle error\n</code></pre> <p>\u6b65\u9a5f 3. \u8655\u7406\u91cd\u5c0e\u56de\u547c\uff08Client \u7aef\uff09\uff1a</p> <ul> <li>\u60a8\u7684\u61c9\u7528\u7a0b\u5f0f\u5fc5\u9808\u5177\u5099\u4e00\u500b\u6a5f\u5236\uff08\u4f8b\u5982\uff0c\u5728 <code>redirect_uri</code> \u8a2d\u7f6e\u4e00\u500b Web \u4f3a\u670d\u5668\u8def\u7531\uff09\uff0c\u4ee5\u4fbf\u5728\u4f7f\u7528\u8005\u6388\u6b0a\u61c9\u7528\u7a0b\u5f0f\u5b58\u53d6\u7b2c\u4e09\u65b9\u670d\u52d9\u5f8c\uff0c\u80fd\u5920\u63a5\u6536\u8a72\u4f7f\u7528\u8005\u7684\u56de\u50b3\u3002  </li> <li>\u7b2c\u4e09\u65b9\u670d\u52d9\u63d0\u4f9b\u8005\u6703\u5c07\u4f7f\u7528\u8005\u91cd\u5c0e\u81f3\u60a8\u7684 <code>redirect_uri</code>\uff0c\u4e26\u5728 URL \u4e0a\u4ee5\u67e5\u8a62\u53c3\u6578\u7684\u65b9\u5f0f\u9644\u52a0 <code>authorization_code</code>\uff08\u4ee5\u53ca\u53ef\u80fd\u7684 <code>state</code>\u3001<code>scope</code>\uff09\u3002  </li> <li>\u5f9e\u9019\u500b\u9032\u4f86\u7684\u8acb\u6c42\u4e2d\u64f7\u53d6\u5b8c\u6574\u7684\u56de\u547c URL\u3002  </li> <li>\uff08\u9019\u500b\u6b65\u9a5f\u767c\u751f\u5728\u4e3b\u8981 agent \u57f7\u884c\u8ff4\u5708\u4e4b\u5916\uff0c\u65bc\u60a8\u7684 Web \u4f3a\u670d\u5668\u6216\u7b49\u6548\u7684\u56de\u547c\u8655\u7406\u5668\u4e2d\u3002\uff09</li> </ul> <p>\u6b65\u9a5f 4. \u5c07\u9a57\u8b49\u7d50\u679c\u56de\u50b3\u7d66 Agent Development Kit (ADK)\uff08Client \u7aef\uff09\uff1a</p> <ul> <li>\u7576\u60a8\u53d6\u5f97\u5305\u542b\u6388\u6b0a\u78bc\u7684\u5b8c\u6574\u56de\u547c URL \u5f8c\uff0c\u8acb\u53d6\u51fa\u5728 Client \u6b65\u9a5f 1 \u5132\u5b58\u7684 <code>auth_request_function_call_id</code> \u8207 <code>auth_config</code> \u7269\u4ef6\u3002  </li> <li>\u5c07\u64f7\u53d6\u5230\u7684\u56de\u547c URL \u8a2d\u5b9a\u5230 <code>exchanged_auth_credential.oauth2.auth_response_uri</code> \u6b04\u4f4d\uff0c\u540c\u6642\u78ba\u8a8d <code>exchanged_auth_credential.oauth2.redirect_uri</code> \u5305\u542b\u60a8\u6240\u4f7f\u7528\u7684 redirect URI\u3002  </li> <li>\u5efa\u7acb\u4e00\u500b <code>types.Content</code> \u7269\u4ef6\uff0c\u5167\u5bb9\u5305\u542b\u4e00\u500b\u5e36\u6709 <code>types.FunctionResponse</code> \u7684 <code>types.Part</code>\u3002  <ul> <li>\u5c07 <code>name</code> \u8a2d\u70ba <code>\"adk_request_credential\"</code>\u3002\uff08\u6ce8\u610f\uff1a\u9019\u662f Agent Development Kit (ADK) \u9032\u884c\u9a57\u8b49\u6642\u7684\u7279\u6b8a\u540d\u7a31\uff0c\u8acb\u52ff\u4f7f\u7528\u5176\u4ed6\u540d\u7a31\u3002\uff09  </li> <li>\u5c07 <code>id</code> \u8a2d\u70ba\u60a8\u6240\u5132\u5b58\u7684 <code>auth_request_function_call_id</code>\u3002  </li> <li>\u5c07 <code>response</code> \u8a2d\u70ba\u5e8f\u5217\u5316\uff08\u4f8b\u5982 <code>.model_dump()</code>\uff09\u5f8c\u7684\u66f4\u65b0 <code>AuthConfig</code> \u7269\u4ef6\u3002  </li> </ul> </li> <li>\u91dd\u5c0d\u540c\u4e00\u500b session\uff0c\u518d\u6b21\u547c\u53eb <code>runner.run_async</code>\uff0c\u4e26\u5c07\u6b64 <code>FunctionResponse</code> \u5167\u5bb9\u4f5c\u70ba <code>new_message</code> \u50b3\u5165\u3002</li> </ul> <pre><code># (Continuing after user interaction)\n\n    # Simulate getting the callback URL (e.g., from user paste or web handler)\n    auth_response_uri = await get_user_input(\n        f'Paste the full callback URL here:\\n&gt; '\n    )\n    auth_response_uri = auth_response_uri.strip() # Clean input\n\n    if not auth_response_uri:\n        print(\"Callback URL not provided. Aborting.\")\n        return\n\n    # Update the received AuthConfig with the callback details\n    auth_config.exchanged_auth_credential.oauth2.auth_response_uri = auth_response_uri\n    # Also include the redirect_uri used, as the token exchange might need it\n    auth_config.exchanged_auth_credential.oauth2.redirect_uri = redirect_uri\n\n    # Construct the FunctionResponse Content object\n    auth_content = types.Content(\n        role='user', # Role can be 'user' when sending a FunctionResponse\n        parts=[\n            types.Part(\n                function_response=types.FunctionResponse(\n                    id=auth_request_function_call_id,       # Link to the original request\n                    name='adk_request_credential', # Special framework function name\n                    response=auth_config.model_dump() # Send back the *updated* AuthConfig\n                )\n            )\n        ],\n    )\n\n    # --- Resume Execution ---\n    print(\"\\nSubmitting authentication details back to the agent...\")\n    events_async_after_auth = runner.run_async(\n        session_id=session.id,\n        user_id='user',\n        new_message=auth_content, # Send the FunctionResponse back\n    )\n\n    # --- Process Final Agent Output ---\n    print(\"\\n--- Agent Response after Authentication ---\")\n    async for event in events_async_after_auth:\n        # Process events normally, expecting the tool call to succeed now\n        print(event) # Print the full event for inspection\n</code></pre> <p>\u6b65\u9a5f 5\uff1aAgent Development Kit (ADK) \u8655\u7406 Token \u4ea4\u63db\u8207\u5de5\u5177\u91cd\u8a66\uff0c\u4e26\u53d6\u5f97\u5de5\u5177\u7d50\u679c</p> <ul> <li>ADK \u6536\u5230 <code>FunctionResponse</code> \u7d66 <code>adk_request_credential</code>\u3002</li> <li>\u5b83\u6703\u5229\u7528\u66f4\u65b0\u5f8c\u7684 <code>AuthConfig</code>\uff08\u5305\u542b\u5e36\u6709 code \u7684 callback URL\uff09\u4e2d\u7684\u8cc7\u8a0a\uff0c\u8207\u63d0\u4f9b\u8005\u7684 token endpoint \u9032\u884c OAuth token \u4ea4\u63db\uff0c\u53d6\u5f97 access token\uff08\u4ee5\u53ca\u53ef\u80fd\u7684 refresh token\uff09\u3002</li> <li>ADK \u6703\u5728\u5167\u90e8\u5c07\u9019\u4e9b token \u8a2d\u5b9a\u5230 session state \u4e2d\uff0c\u8b93\u5176\u53ef\u4f9b\u5f8c\u7e8c\u4f7f\u7528\u3002</li> <li>ADK \u6703\u81ea\u52d5\u91cd\u8a66\u539f\u672c\u56e0\u7f3a\u5c11\u9a57\u8b49\u800c\u5931\u6557\u7684\u5de5\u5177\u547c\u53eb (tool call)\u3002</li> <li>\u9019\u6b21\uff0c\u5de5\u5177\u6703\u900f\u904e <code>tool_context.get_auth_response()</code> \u627e\u5230\u6709\u6548\u7684 token\uff0c\u4e26\u6210\u529f\u57f7\u884c\u5df2\u9a57\u8b49\u7684 API \u547c\u53eb\u3002</li> <li>agent \u6703\u5f9e\u5de5\u5177\u53d6\u5f97\u5be6\u969b\u7684\u7d50\u679c\uff0c\u4e26\u7522\u751f\u6700\u7d42\u56de\u61c9\u7d66\u4f7f\u7528\u8005\u3002</li> </ul> <p>\u9a57\u8b49\u56de\u61c9\u6d41\u7a0b\u7684\u6642\u5e8f\u5716\uff08Agent Client \u56de\u50b3\u9a57\u8b49\u56de\u61c9\uff0cADK \u91cd\u65b0\u5617\u8a66\u5de5\u5177\u547c\u53eb\uff09\u5982\u4e0b\u6240\u793a\uff1a</p> <p></p>"},{"location":"tools/authentication/#2functiontool","title":"\u65c5\u7a0b 2\uff1a\u5efa\u69cb\u9700\u8981\u9a57\u8b49\u7684\u81ea\u8a02\u5de5\u5177\uff08<code>FunctionTool</code>\uff09","text":"<p>\u672c\u7bc0\u91cd\u9ede\u8aaa\u660e\u5728\u5efa\u7acb\u65b0\u7684 ADK \u5de5\u5177\u6642\uff0c\u5982\u4f55\u5728\u81ea\u8a02 Python \u51fd\u5f0f\u5167\u90e8\u5be6\u4f5c\u9a57\u8b49\u908f\u8f2f\u3002\u6211\u5011\u5c07\u4ee5 <code>FunctionTool</code> \u4f5c\u70ba\u7bc4\u4f8b\u9032\u884c\u8aaa\u660e\u3002</p>"},{"location":"tools/authentication/#_5","title":"\u5148\u6c7a\u689d\u4ef6","text":"<p>\u4f60\u7684\u51fd\u5f0f\u7c3d\u7ae0\u5fc5\u9808\u5305\u542b <code>tool_context: ToolContext</code>\u3002ADK \u6703\u81ea\u52d5\u6ce8\u5165\u9019\u500b\u7269\u4ef6\uff0c\u8b93\u4f60\u53ef\u4ee5\u5b58\u53d6 state \u53ca\u9a57\u8b49\u6a5f\u5236\u3002</p> <pre><code>from google.adk.tools import FunctionTool, ToolContext\nfrom typing import Dict\n\ndef my_authenticated_tool_function(param1: str, ..., tool_context: ToolContext) -&gt; dict:\n    # ... your logic ...\n    pass\n\nmy_tool = FunctionTool(func=my_authenticated_tool_function)\n</code></pre>"},{"location":"tools/authentication/#authentication","title":"\u5de5\u5177\u51fd\u5f0f\u4e2d\u7684\u9a57\u8b49\uff08Authentication\uff09\u908f\u8f2f","text":"<p>\u8acb\u5728\u4f60\u7684\u5de5\u5177\u51fd\u5f0f\u5167\u5be6\u4f5c\u4ee5\u4e0b\u6b65\u9a5f\uff1a</p> <p>\u6b65\u9a5f 1\uff1a\u6aa2\u67e5\u5feb\u53d6\u4e14\u6709\u6548\u7684\u8a8d\u8b49\u8cc7\u8a0a\uff1a</p> <p>\u5728\u4f60\u7684\u5de5\u5177\u51fd\u5f0f\u4e2d\uff0c\u9996\u5148\u6aa2\u67e5\u662f\u5426\u5df2\u7d93\u6709\u6709\u6548\u7684\u8a8d\u8b49\u8cc7\u8a0a\uff08\u4f8b\u5982 access token\uff0frefresh token\uff09\u5f9e\u672c\u6b21 session \u5148\u524d\u7684\u57f7\u884c\u4e2d\u5132\u5b58\u4e0b\u4f86\u3002\u7576\u524d session \u7684\u8a8d\u8b49\u8cc7\u8a0a\u61c9\u5132\u5b58\u5728 <code>tool_context.invocation_context.session.state</code>\uff08\u4e00\u500b state \u5b57\u5178\uff09\u4e2d\u3002\u4f60\u53ef\u4ee5\u900f\u904e\u6aa2\u67e5 <code>tool_context.invocation_context.session.state.get(credential_name, None)</code> \u4f86\u78ba\u8a8d\u73fe\u6709\u8a8d\u8b49\u8cc7\u8a0a\u662f\u5426\u5b58\u5728\u3002</p> <pre><code>from google.oauth2.credentials import Credentials\nfrom google.auth.transport.requests import Request\n\n# Inside your tool function\nTOKEN_CACHE_KEY = \"my_tool_tokens\" # Choose a unique key\nSCOPES = [\"scope1\", \"scope2\"] # Define required scopes\n\ncreds = None\ncached_token_info = tool_context.state.get(TOKEN_CACHE_KEY)\nif cached_token_info:\n    try:\n        creds = Credentials.from_authorized_user_info(cached_token_info, SCOPES)\n        if not creds.valid and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n            tool_context.state[TOKEN_CACHE_KEY] = json.loads(creds.to_json()) # Update cache\n        elif not creds.valid:\n            creds = None # Invalid, needs re-auth\n            tool_context.state[TOKEN_CACHE_KEY] = None\n    except Exception as e:\n        print(f\"Error loading/refreshing cached creds: {e}\")\n        creds = None\n        tool_context.state[TOKEN_CACHE_KEY] = None\n\nif creds and creds.valid:\n    # Skip to Step 5: Make Authenticated API Call\n    pass\nelse:\n    # Proceed to Step 2...\n    pass\n</code></pre> <p>\u6b65\u9a5f 2\uff1a\u6aa2\u67e5\u4f86\u81ea\u7528\u6236\u7aef\u7684\u9a57\u8b49\u56de\u61c9</p> <ul> <li>\u5982\u679c\u6b65\u9a5f 1 \u6c92\u6709\u53d6\u5f97\u6709\u6548\u7684\u8a8d\u8b49\u8cc7\u8a0a\uff0c\u8acb\u900f\u904e\u547c\u53eb <code>exchanged_credential = tool_context.get_auth_response()</code> \u6aa2\u67e5\u7528\u6236\u7aef\u662f\u5426\u525b\u5b8c\u6210\u4e92\u52d5\u5f0f\u6d41\u7a0b\u3002  </li> <li>\u9019\u5c07\u56de\u50b3\u7531\u7528\u6236\u7aef\u9001\u56de\u7684\u66f4\u65b0\u5f8c <code>exchanged_credential</code> \u7269\u4ef6\uff08\u5176\u4e2d\u5305\u542b <code>auth_response_uri</code> \u7684 callback URL\uff09\u3002</li> </ul> <pre><code># Use auth_scheme and auth_credential configured in the tool.\n# exchanged_credential: AuthCredential | None\n\nexchanged_credential = tool_context.get_auth_response(AuthConfig(\n  auth_scheme=auth_scheme,\n  raw_auth_credential=auth_credential,\n))\n# If exchanged_credential is not None, then there is already an exchanged credetial from the auth response. \nif exchanged_credential:\n   # ADK exchanged the access token already for us\n        access_token = exchanged_credential.oauth2.access_token\n        refresh_token = exchanged_credential.oauth2.refresh_token\n        creds = Credentials(\n            token=access_token,\n            refresh_token=refresh_token,\n            token_uri=auth_scheme.flows.authorizationCode.tokenUrl,\n            client_id=auth_credential.oauth2.client_id,\n            client_secret=auth_credential.oauth2.client_secret,\n            scopes=list(auth_scheme.flows.authorizationCode.scopes.keys()),\n        )\n    # Cache the token in session state and call the API, skip to step 5\n</code></pre> <p>\u6b65\u9a5f 3\uff1a\u555f\u52d5\u9a57\u8b49\u8acb\u6c42</p> <p>\u5982\u679c\u672a\u627e\u5230\u6709\u6548\u7684\u8a8d\u8b49\u8cc7\u8a0a\uff08\u6b65\u9a5f 1.\uff09\u4e14\u672a\u627e\u5230\u9a57\u8b49\u56de\u61c9\uff08\u6b65\u9a5f 2.\uff09\uff0c\u5247\u5de5\u5177\u9700\u8981\u555f\u52d5 OAuth \u6d41\u7a0b\u3002\u8acb\u5b9a\u7fa9 AuthScheme \u548c\u521d\u59cb AuthCredential\uff0c\u4e26\u547c\u53eb <code>tool_context.request_credential()</code>\u3002\u56de\u50b3\u4e00\u500b\u56de\u61c9\uff0c\u8868\u793a\u9700\u8981\u6388\u6b0a\u3002</p> <pre><code># Use auth_scheme and auth_credential configured in the tool.\n\n  tool_context.request_credential(AuthConfig(\n    auth_scheme=auth_scheme,\n    raw_auth_credential=auth_credential,\n  ))\n  return {'pending': true, 'message': 'Awaiting user authentication.'}\n\n# By setting request_credential, ADK detects a pending authentication event. It pauses execution and ask end user to login.\n</code></pre> <p>\u6b65\u9a5f 4\uff1a\u4ee5\u6388\u6b0a\u78bc\u4ea4\u63db Token</p> <p>Agent Development Kit (ADK) \u6703\u81ea\u52d5\u7522\u751f OAuth \u6388\u6b0a URL\uff0c\u4e26\u5c07\u5176\u63d0\u4f9b\u7d66\u4f60\u7684 Agent Client \u61c9\u7528\u7a0b\u5f0f\u3002\u4f60\u7684 Agent Client \u61c9\u7528\u7a0b\u5f0f\u61c9\u4f9d\u7167 Journey 1 \u6240\u8ff0\u7684\u65b9\u5f0f\uff0c\u5c07\u4f7f\u7528\u8005\u91cd\u65b0\u5c0e\u5411\u81f3\u8a72\u6388\u6b0a URL\uff08\u4e26\u9644\u52a0 <code>redirect_uri</code>\uff09\u3002\u7576\u4f7f\u7528\u8005\u4f9d\u7167\u6388\u6b0a URL \u5b8c\u6210\u767b\u5165\u6d41\u7a0b\u5f8c\uff0cADK \u6703\u5f9e Agent Client \u61c9\u7528\u7a0b\u5f0f\u4e2d\u64f7\u53d6\u9a57\u8b49\u56de\u547c URL\uff0c\u4e26\u81ea\u52d5\u89e3\u6790\u6388\u6b0a\u78bc\uff0c\u9032\u800c\u7522\u751f\u9a57\u8b49 token\u3002\u5728\u4e0b\u4e00\u6b21\u5de5\u5177\u547c\u53eb (tool call) \u6642\uff0c\u6b65\u9a5f 2 \u7684 <code>tool_context.get_auth_response</code> \u6703\u5305\u542b\u53ef\u7528\u65bc\u5f8c\u7e8c API \u547c\u53eb\u7684\u6709\u6548\u6191\u8b49\u3002</p> <p>\u6b65\u9a5f 5\uff1a\u5feb\u53d6\u53d6\u5f97\u7684\u6191\u8b49</p> <p>\u6210\u529f\u5f9e ADK \u53d6\u5f97 token\uff08\u6b65\u9a5f 2\uff09\uff0c\u6216 token \u4ecd\u7136\u6709\u6548\uff08\u6b65\u9a5f 1\uff09\u5f8c\uff0c\u8acb\u7acb\u5373\u5c07\u65b0\u7684 <code>Credentials</code> \u7269\u4ef6\u4ee5\u4f60\u7684\u5feb\u53d6\u91d1\u9470\uff0c\u5e8f\u5217\u5316\uff08\u4f8b\u5982\u8f49\u70ba JSON\uff09\u5f8c\u5b58\u5165 <code>tool_context.state</code>\u3002</p> <pre><code># Inside your tool function, after obtaining 'creds' (either refreshed or newly exchanged)\n# Cache the new/refreshed tokens\ntool_context.state[TOKEN_CACHE_KEY] = json.loads(creds.to_json())\nprint(f\"DEBUG: Cached/updated tokens under key: {TOKEN_CACHE_KEY}\")\n# Proceed to Step 6 (Make API Call)\n</code></pre> <p>\u6b65\u9a5f 6\uff1a\u9032\u884c\u5df2\u9a57\u8b49\u7684 API \u547c\u53eb</p> <ul> <li>\u7576\u4f60\u64c1\u6709\u6709\u6548\u7684 <code>Credentials</code> \u7269\u4ef6\uff08\u4f86\u81ea\u6b65\u9a5f 1 \u6216\u6b65\u9a5f 4 \u7684 <code>creds</code>\uff09\u6642\uff0c\u8acb\u4f7f\u7528\u9069\u7576\u7684\u7528\u6236\u7aef\u7a0b\u5f0f\u5eab\uff08\u4f8b\u5982 <code>googleapiclient</code>\u3001<code>requests</code>\uff09\u4f86\u547c\u53eb\u53d7\u4fdd\u8b77\u7684 API\uff0c\u4e26\u50b3\u905e <code>credentials=creds</code> \u53c3\u6578\u3002  </li> <li>\u8acb\u52d9\u5fc5\u52a0\u5165\u932f\u8aa4\u8655\u7406\uff0c\u7279\u5225\u662f\u91dd\u5c0d <code>HttpError</code> 401/403 \u932f\u8aa4\uff0c\u9019\u53ef\u80fd\u8868\u793a access token \u5df2\u904e\u671f\u6216\u5728\u547c\u53eb\u4e4b\u9593\u88ab\u64a4\u92b7\u3002\u82e5\u9047\u5230\u6b64\u985e\u932f\u8aa4\uff0c\u5efa\u8b70\u6e05\u9664\u5feb\u53d6\u7684 token\uff08<code>tool_context.state.pop(...)</code>\uff09\uff0c\u4e26\u8996\u60c5\u6cc1\u518d\u6b21\u56de\u50b3 <code>auth_required</code> \u72c0\u614b\uff0c\u4ee5\u5f37\u5236\u91cd\u65b0\u9a57\u8b49\u3002</li> </ul> <pre><code># Inside your tool function, using the valid 'creds' object\n# Ensure creds is valid before proceeding\nif not creds or not creds.valid:\n   return {\"status\": \"error\", \"error_message\": \"Cannot proceed without valid credentials.\"}\n\ntry:\n   service = build(\"calendar\", \"v3\", credentials=creds) # Example\n   api_result = service.events().list(...).execute()\n   # Proceed to Step 7\nexcept Exception as e:\n   # Handle API errors (e.g., check for 401/403, maybe clear cache and re-request auth)\n   print(f\"ERROR: API call failed: {e}\")\n   return {\"status\": \"error\", \"error_message\": f\"API call failed: {e}\"}\n</code></pre> <p>\u6b65\u9a5f 7\uff1a\u56de\u50b3\u5de5\u5177\u7d50\u679c</p> <ul> <li>\u5728\u6210\u529f\u7684 API \u547c\u53eb\u5f8c\uff0c\u5c07\u7d50\u679c\u8655\u7406\u70ba\u9069\u5408\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u4f7f\u7528\u7684 dictionary \u683c\u5f0f\u3002  </li> <li>\u7279\u5225\u91cd\u8981\u7684\u662f\uff0c\u8acb\u52d9\u5fc5\u96a8\u8cc7\u6599\u4e00\u540c\u5305\u542b \u27e6C1\u27e7\u3002</li> </ul> <pre><code># Inside your tool function, after successful API call\n    processed_result = [...] # Process api_result for the LLM\n    return {\"status\": \"success\", \"data\": processed_result}\n</code></pre> \u5b8c\u6574\u4ee3\u78bc Tools and AgentAgent CLIHelperSpec tools_and_agent.py<pre><code>import os\n\nfrom google.adk.auth.auth_schemes import OpenIdConnectWithConfig\nfrom google.adk.auth.auth_credential import AuthCredential, AuthCredentialTypes, OAuth2Auth\nfrom google.adk.tools.openapi_tool.openapi_spec_parser.openapi_toolset import OpenAPIToolset\nfrom google.adk.agents.llm_agent import LlmAgent\n\n# --- Authentication Configuration ---\n# This section configures how the agent will handle authentication using OpenID Connect (OIDC),\n# often layered on top of OAuth 2.0.\n\n# Define the Authentication Scheme using OpenID Connect.\n# This object tells the ADK *how* to perform the OIDC/OAuth2 flow.\n# It requires details specific to your Identity Provider (IDP), like Google OAuth, Okta, Auth0, etc.\n# Note: Replace the example Okta URLs and credentials with your actual IDP details.\n# All following fields are required, and available from your IDP.\nauth_scheme = OpenIdConnectWithConfig(\n    # The URL of the IDP's authorization endpoint where the user is redirected to log in.\n    authorization_endpoint=\"https://your-endpoint.okta.com/oauth2/v1/authorize\",\n    # The URL of the IDP's token endpoint where the authorization code is exchanged for tokens.\n    token_endpoint=\"https://your-token-endpoint.okta.com/oauth2/v1/token\",\n    # The scopes (permissions) your application requests from the IDP.\n    # 'openid' is standard for OIDC. 'profile' and 'email' request user profile info.\n    scopes=['openid', 'profile', \"email\"]\n)\n\n# Define the Authentication Credentials for your specific application.\n# This object holds the client identifier and secret that your application uses\n# to identify itself to the IDP during the OAuth2 flow.\n# !! SECURITY WARNING: Avoid hardcoding secrets in production code. !!\n# !! Use environment variables or a secret management system instead. !!\nauth_credential = AuthCredential(\n  auth_type=AuthCredentialTypes.OPEN_ID_CONNECT,\n  oauth2=OAuth2Auth(\n    client_id=\"CLIENT_ID\",\n    client_secret=\"CIENT_SECRET\",\n  )\n)\n\n\n# --- Toolset Configuration from OpenAPI Specification ---\n# This section defines a sample set of tools the agent can use, configured with Authentication\n# from steps above.\n# This sample set of tools use endpoints protected by Okta and requires an OpenID Connect flow\n# to acquire end user credentials.\nwith open(os.path.join(os.path.dirname(__file__), 'spec.yaml'), 'r') as f:\n    spec_content = f.read()\n\nuserinfo_toolset = OpenAPIToolset(\n   spec_str=spec_content,\n   spec_str_type='yaml',\n   # ** Crucially, associate the authentication scheme and credentials with these tools. **\n   # This tells the ADK that the tools require the defined OIDC/OAuth2 flow.\n   auth_scheme=auth_scheme,\n   auth_credential=auth_credential,\n)\n\n# --- Agent Configuration ---\n# Configure and create the main LLM Agent.\nroot_agent = LlmAgent(\n    model='gemini-2.0-flash',\n    name='enterprise_assistant',\n    instruction='Help user integrate with multiple enterprise systems, including retrieving user information which may require authentication.',\n    tools=userinfo_toolset.get_tools(),\n)\n\n# --- Ready for Use ---\n# The `root_agent` is now configured with tools protected by OIDC/OAuth2 authentication.\n# When the agent attempts to use one of these tools, the ADK framework will automatically\n# trigger the authentication flow defined by `auth_scheme` and `auth_credential`\n# if valid credentials are not already available in the session.\n# The subsequent interaction flow would guide the user through the login process and handle\n# token exchanging, and automatically attach the exchanged token to the endpoint defined in\n# the tool.\n</code></pre> agent_cli.py<pre><code>import asyncio\nfrom dotenv import load_dotenv\nfrom google.adk.artifacts.in_memory_artifact_service import InMemoryArtifactService\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.genai import types\n\nfrom .helpers import is_pending_auth_event, get_function_call_id, get_function_call_auth_config, get_user_input\nfrom .tools_and_agent import root_agent\n\nload_dotenv()\n\nagent = root_agent\n\nasync def async_main():\n  \"\"\"\n  Main asynchronous function orchestrating the agent interaction and authentication flow.\n  \"\"\"\n  # --- Step 1: Service Initialization ---\n  # Use in-memory services for session and artifact storage (suitable for demos/testing).\n  session_service = InMemorySessionService()\n  artifacts_service = InMemoryArtifactService()\n\n  # Create a new user session to maintain conversation state.\n  session = session_service.create_session(\n      state={},  # Optional state dictionary for session-specific data\n      app_name='my_app', # Application identifier\n      user_id='user' # User identifier\n  )\n\n  # --- Step 2: Initial User Query ---\n  # Define the user's initial request.\n  query = 'Show me my user info'\n  print(f\"user: {query}\")\n\n  # Format the query into the Content structure expected by the ADK Runner.\n  content = types.Content(role='user', parts=[types.Part(text=query)])\n\n  # Initialize the ADK Runner\n  runner = Runner(\n      app_name='my_app',\n      agent=agent,\n      artifact_service=artifacts_service,\n      session_service=session_service,\n  )\n\n  # --- Step 3: Send Query and Handle Potential Auth Request ---\n  print(\"\\nRunning agent with initial query...\")\n  events_async = runner.run_async(\n      session_id=session.id, user_id='user', new_message=content\n  )\n\n  # Variables to store details if an authentication request occurs.\n  auth_request_event_id, auth_config = None, None\n\n  # Iterate through the events generated by the first run.\n  async for event in events_async:\n    # Check if this event is the specific 'adk_request_credential' function call.\n    if is_pending_auth_event(event):\n      print(\"--&gt; Authentication required by agent.\")\n      auth_request_event_id = get_function_call_id(event)\n      auth_config = get_function_call_auth_config(event)\n      # Once the auth request is found and processed, exit this loop.\n      # We need to pause execution here to get user input for authentication.\n      break\n\n\n  # If no authentication request was detected after processing all events, exit.\n  if not auth_request_event_id or not auth_config:\n      print(\"\\nAuthentication not required for this query or processing finished.\")\n      return # Exit the main function\n\n  # --- Step 4: Manual Authentication Step (Simulated OAuth 2.0 Flow) ---\n  # This section simulates the user interaction part of an OAuth 2.0 flow.\n  # In a real web application, this would involve browser redirects.\n\n  # Define the Redirect URI. This *must* match one of the URIs registered\n  # with the OAuth provider for your application. The provider sends the user\n  # back here after they approve the request.\n  redirect_uri = 'http://localhost:8000/dev-ui' # Example for local development\n\n  # Construct the Authorization URL that the user must visit.\n  # This typically includes the provider's authorization endpoint URL,\n  # client ID, requested scopes, response type (e.g., 'code'), and the redirect URI.\n  # Here, we retrieve the base authorization URI from the AuthConfig provided by ADK\n  # and append the redirect_uri.\n  # NOTE: A robust implementation would use urlencode and potentially add state, scope, etc.\n  auth_request_uri = (\n      auth_config.exchanged_auth_credential.oauth2.auth_uri\n      + f'&amp;redirect_uri={redirect_uri}' # Simple concatenation; ensure correct query param format\n  )\n\n  print(\"\\n--- User Action Required ---\")\n  # Prompt the user to visit the authorization URL, log in, grant permissions,\n  # and then paste the *full* URL they are redirected back to (which contains the auth code).\n  auth_response_uri = await get_user_input(\n      f'1. Please open this URL in your browser to log in:\\n   {auth_request_uri}\\n\\n'\n      f'2. After successful login and authorization, your browser will be redirected.\\n'\n      f'   Copy the *entire* URL from the browser\\'s address bar.\\n\\n'\n      f'3. Paste the copied URL here and press Enter:\\n\\n&gt; '\n  )\n\n  # --- Step 5: Prepare Authentication Response for the Agent ---\n  # Update the AuthConfig object with the information gathered from the user.\n  # The ADK framework needs the full response URI (containing the code)\n  # and the original redirect URI to complete the OAuth token exchange process internally.\n  auth_config.exchanged_auth_credential.oauth2.auth_response_uri = auth_response_uri\n  auth_config.exchanged_auth_credential.oauth2.redirect_uri = redirect_uri\n\n  # Construct a FunctionResponse Content object to send back to the agent/runner.\n  # This response explicitly targets the 'adk_request_credential' function call\n  # identified earlier by its ID.\n  auth_content = types.Content(\n      role='user',\n      parts=[\n          types.Part(\n              function_response=types.FunctionResponse(\n                  # Crucially, link this response to the original request using the saved ID.\n                  id=auth_request_event_id,\n                  # The special name of the function call we are responding to.\n                  name='adk_request_credential',\n                  # The payload containing all necessary authentication details.\n                  response=auth_config.model_dump(),\n              )\n          )\n      ],\n  )\n\n  # --- Step 6: Resume Execution with Authentication ---\n  print(\"\\nSubmitting authentication details back to the agent...\")\n  # Run the agent again, this time providing the `auth_content` (FunctionResponse).\n  # The ADK Runner intercepts this, processes the 'adk_request_credential' response\n  # (performs token exchange, stores credentials), and then allows the agent\n  # to retry the original tool call that required authentication, now succeeding with\n  # a valid access token embedded.\n  events_async = runner.run_async(\n      session_id=session.id,\n      user_id='user',\n      new_message=auth_content, # Provide the prepared auth response\n  )\n\n  # Process and print the final events from the agent after authentication is complete.\n  # This stream now contain the actual result from the tool (e.g., the user info).\n  print(\"\\n--- Agent Response after Authentication ---\")\n  async for event in events_async:\n    print(event)\n\n\nif __name__ == '__main__':\n  asyncio.run(async_main())\n</code></pre> helpers.py<pre><code>from google.adk.auth import AuthConfig\nfrom google.adk.events import Event\nimport asyncio\n\n# --- Helper Functions ---\nasync def get_user_input(prompt: str) -&gt; str:\n  \"\"\"\n  Asynchronously prompts the user for input in the console.\n\n  Uses asyncio's event loop and run_in_executor to avoid blocking the main\n  asynchronous execution thread while waiting for synchronous `input()`.\n\n  Args:\n    prompt: The message to display to the user.\n\n  Returns:\n    The string entered by the user.\n  \"\"\"\n  loop = asyncio.get_event_loop()\n  # Run the blocking `input()` function in a separate thread managed by the executor.\n  return await loop.run_in_executor(None, input, prompt)\n\n\ndef is_pending_auth_event(event: Event) -&gt; bool:\n  \"\"\"\n  Checks if an ADK Event represents a request for user authentication credentials.\n\n  The ADK framework emits a specific function call ('adk_request_credential')\n  when a tool requires authentication that hasn't been previously satisfied.\n\n  Args:\n    event: The ADK Event object to inspect.\n\n  Returns:\n    True if the event is an 'adk_request_credential' function call, False otherwise.\n  \"\"\"\n  # Safely checks nested attributes to avoid errors if event structure is incomplete.\n  return (\n      event.content\n      and event.content.parts\n      and event.content.parts[0] # Assuming the function call is in the first part\n      and event.content.parts[0].function_call\n      # The specific function name indicating an auth request from the ADK framework.\n      and event.content.parts[0].function_call.name == 'adk_request_credential'\n  )\n\n\ndef get_function_call_id(event: Event) -&gt; str:\n  \"\"\"\n  Extracts the unique ID of the function call from an ADK Event.\n\n  This ID is crucial for correlating a function *response* back to the specific\n  function *call* that the agent initiated to request for auth credentials.\n\n  Args:\n    event: The ADK Event object containing the function call.\n\n  Returns:\n    The unique identifier string of the function call.\n\n  Raises:\n    ValueError: If the function call ID cannot be found in the event structure.\n                (Corrected typo from `contents` to `content` below)\n  \"\"\"\n  # Navigate through the event structure to find the function call ID.\n  if (\n      event\n      and event.content\n      and event.content.parts\n      and event.content.parts[0] # Use content, not contents\n      and event.content.parts[0].function_call\n      and event.content.parts[0].function_call.id\n  ):\n    return event.content.parts[0].function_call.id\n  # If the ID is missing, raise an error indicating an unexpected event format.\n  raise ValueError(f'Cannot get function call id from event {event}')\n\n\ndef get_function_call_auth_config(event: Event) -&gt; AuthConfig:\n  \"\"\"\n  Extracts the authentication configuration details from an 'adk_request_credential' event.\n\n  Client should use this AuthConfig to necessary authentication details (like OAuth codes and state)\n  and sent it back to the ADK to continue OAuth token exchanging.\n\n  Args:\n    event: The ADK Event object containing the 'adk_request_credential' call.\n\n  Returns:\n    An AuthConfig object populated with details from the function call arguments.\n\n  Raises:\n    ValueError: If the 'auth_config' argument cannot be found in the event.\n                (Corrected typo from `contents` to `content` below)\n  \"\"\"\n  if (\n      event\n      and event.content\n      and event.content.parts\n      and event.content.parts[0] # Use content, not contents\n      and event.content.parts[0].function_call\n      and event.content.parts[0].function_call.args\n      and event.content.parts[0].function_call.args.get('auth_config')\n  ):\n    # Reconstruct the AuthConfig object using the dictionary provided in the arguments.\n    # The ** operator unpacks the dictionary into keyword arguments for the constructor.\n    return AuthConfig(\n          **event.content.parts[0].function_call.args.get('auth_config')\n      )\n  raise ValueError(f'Cannot get auth config from event {event}')\n</code></pre> <pre><code>openapi: 3.0.1\ninfo:\ntitle: Okta User Info API\nversion: 1.0.0\ndescription: |-\n   API to retrieve user profile information based on a valid Okta OIDC Access Token.\n   Authentication is handled via OpenID Connect with Okta.\ncontact:\n   name: API Support\n   email: support@example.com # Replace with actual contact if available\nservers:\n- url: &lt;substitute with your server name&gt;\n   description: Production Environment\npaths:\n/okta-jwt-user-api:\n   get:\n      summary: Get Authenticated User Info\n      description: |-\n      Fetches profile details for the user\n      operationId: getUserInfo\n      tags:\n      - User Profile\n      security:\n      - okta_oidc:\n            - openid\n            - email\n            - profile\n      responses:\n      '200':\n         description: Successfully retrieved user information.\n         content:\n            application/json:\n            schema:\n               type: object\n               properties:\n                  sub:\n                  type: string\n                  description: Subject identifier for the user.\n                  example: \"abcdefg\"\n                  name:\n                  type: string\n                  description: Full name of the user.\n                  example: \"Example LastName\"\n                  locale:\n                  type: string\n                  description: User's locale, e.g., en-US or en_US.\n                  example: \"en_US\"\n                  email:\n                  type: string\n                  format: email\n                  description: User's primary email address.\n                  example: \"username@example.com\"\n                  preferred_username:\n                  type: string\n                  description: Preferred username of the user (often the email).\n                  example: \"username@example.com\"\n                  given_name:\n                  type: string\n                  description: Given name (first name) of the user.\n                  example: \"Example\"\n                  family_name:\n                  type: string\n                  description: Family name (last name) of the user.\n                  example: \"LastName\"\n                  zoneinfo:\n                  type: string\n                  description: User's timezone, e.g., America/Los_Angeles.\n                  example: \"America/Los_Angeles\"\n                  updated_at:\n                  type: integer\n                  format: int64 # Using int64 for Unix timestamp\n                  description: Timestamp when the user's profile was last updated (Unix epoch time).\n                  example: 1743617719\n                  email_verified:\n                  type: boolean\n                  description: Indicates if the user's email address has been verified.\n                  example: true\n               required:\n                  - sub\n                  - name\n                  - locale\n                  - email\n                  - preferred_username\n                  - given_name\n                  - family_name\n                  - zoneinfo\n                  - updated_at\n                  - email_verified\n      '401':\n         description: Unauthorized. The provided Bearer token is missing, invalid, or expired.\n         content:\n            application/json:\n            schema:\n               $ref: '#/components/schemas/Error'\n      '403':\n         description: Forbidden. The provided token does not have the required scopes or permissions to access this resource.\n         content:\n            application/json:\n            schema:\n               $ref: '#/components/schemas/Error'\ncomponents:\nsecuritySchemes:\n   okta_oidc:\n      type: openIdConnect\n      description: Authentication via Okta using OpenID Connect. Requires a Bearer Access Token.\n      openIdConnectUrl: https://your-endpoint.okta.com/.well-known/openid-configuration\nschemas:\n   Error:\n      type: object\n      properties:\n      code:\n         type: string\n         description: An error code.\n      message:\n         type: string\n         description: A human-readable error message.\n      required:\n         - code\n         - message\n</code></pre>"},{"location":"tools/built-in-tools.en/","title":"Built-in tools","text":"<p>These built-in tools provide ready-to-use functionality such as Google Search or code executors that provide agents with common capabilities. For instance, an agent that needs to retrieve information from the web can directly use the google_search tool without any additional setup.</p>"},{"location":"tools/built-in-tools.en/#how-to-use","title":"How to Use","text":"<ol> <li>Import: Import the desired tool from the tools module. This is <code>agents.tools</code> in Python or <code>com.google.adk.tools</code> in Java.</li> <li>Configure: Initialize the tool, providing required parameters if any.</li> <li>Register: Add the initialized tool to the tools list of your Agent.</li> </ol> <p>Once added to an agent, the agent can decide to use the tool based on the user prompt and its instructions. The framework handles the execution of the tool when the agent calls it. Important: check the Limitations section of this page.</p>"},{"location":"tools/built-in-tools.en/#available-built-in-tools","title":"Available Built-in tools","text":"<p>Note: Java only supports Google Search and Code Execution tools currently.</p>"},{"location":"tools/built-in-tools.en/#google-search","title":"Google Search","text":"<p>The <code>google_search</code> tool allows the agent to perform web searches using Google Search. The <code>google_search</code> tool is only compatible with Gemini 2 models. For further details of the tool, see Understanding Google Search grounding.</p> <p>Additional requirements when using the <code>google_search</code> tool</p> <p>When you use grounding with Google Search, and you receive Search suggestions in your response, you must display the Search suggestions in production and in your applications. For more information on grounding with Google Search, see Grounding with Google Search documentation for Google AI Studio or Vertex AI. The UI code (HTML) is returned in the Gemini response as <code>renderedContent</code>, and you will need to show the HTML in your app, in accordance with the policy.</p> PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import Agent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools import google_search\nfrom google.genai import types\n\nAPP_NAME=\"google_search_agent\"\nUSER_ID=\"user1234\"\nSESSION_ID=\"1234\"\n\n\nroot_agent = Agent(\n    name=\"basic_search_agent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Agent to answer questions using Google Search.\",\n    instruction=\"I can answer your questions by searching the internet. Just ask me anything!\",\n    # google_search is a pre-built tool which allows the agent to perform Google searches.\n    tools=[google_search]\n)\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=root_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"what's the latest ai news?\")\n</code></pre> <pre><code>import com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.GoogleSearchTool;\nimport com.google.common.collect.ImmutableList;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\n\npublic class GoogleSearchAgentApp {\n\n  private static final String APP_NAME = \"Google Search_agent\";\n  private static final String USER_ID = \"user1234\";\n  private static final String SESSION_ID = \"1234\";\n\n  /**\n   * Calls the agent with the given query and prints the final response.\n   *\n   * @param runner The runner to use.\n   * @param query The query to send to the agent.\n   */\n  public static void callAgent(Runner runner, String query) {\n    Content content =\n        Content.fromParts(Part.fromText(query));\n\n    InMemorySessionService sessionService = (InMemorySessionService) runner.sessionService();\n    Session session =\n        sessionService\n            .createSession(APP_NAME, USER_ID, /* state= */ null, SESSION_ID)\n            .blockingGet();\n\n    runner\n        .runAsync(session.userId(), session.id(), content)\n        .forEach(\n            event -&gt; {\n              if (event.finalResponse()\n                  &amp;&amp; event.content().isPresent()\n                  &amp;&amp; event.content().get().parts().isPresent()\n                  &amp;&amp; !event.content().get().parts().get().isEmpty()\n                  &amp;&amp; event.content().get().parts().get().get(0).text().isPresent()) {\n                String finalResponse = event.content().get().parts().get().get(0).text().get();\n                System.out.println(\"Agent Response: \" + finalResponse);\n              }\n            });\n  }\n\n  public static void main(String[] args) {\n    // Google Search is a pre-built tool which allows the agent to perform Google searches.\n    GoogleSearchTool googleSearchTool = new GoogleSearchTool();\n\n    BaseAgent rootAgent =\n        LlmAgent.builder()\n            .name(\"basic_search_agent\")\n            .model(\"gemini-2.0-flash\") // Ensure to use a Gemini 2.0 model for Google Search Tool\n            .description(\"Agent to answer questions using Google Search.\")\n            .instruction(\n                \"I can answer your questions by searching the internet. Just ask me anything!\")\n            .tools(ImmutableList.of(googleSearchTool))\n            .build();\n\n    // Session and Runner\n    InMemorySessionService sessionService = new InMemorySessionService();\n    Runner runner = new Runner(rootAgent, APP_NAME, null, sessionService);\n\n    // Agent Interaction\n    callAgent(runner, \"what's the latest ai news?\");\n  }\n}\n</code></pre>"},{"location":"tools/built-in-tools.en/#code-execution","title":"Code Execution","text":"<p>The <code>built_in_code_execution</code> tool enables the agent to execute code, specifically when using Gemini 2 models. This allows the model to perform tasks like calculations, data manipulation, or running small scripts.</p> PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport asyncio\nfrom google.adk.agents import LlmAgent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.code_executors import BuiltInCodeExecutor\nfrom google.genai import types\n\nAGENT_NAME = \"calculator_agent\"\nAPP_NAME = \"calculator\"\nUSER_ID = \"user1234\"\nSESSION_ID = \"session_code_exec_async\"\nGEMINI_MODEL = \"gemini-2.0-flash\"\n\n# Agent Definition\ncode_agent = LlmAgent(\n    name=AGENT_NAME,\n    model=GEMINI_MODEL,\n    code_executor=BuiltInCodeExecutor(),\n    instruction=\"\"\"You are a calculator agent.\n    When given a mathematical expression, write and execute Python code to calculate the result.\n    Return only the final numerical result as plain text, without markdown or code blocks.\n    \"\"\",\n    description=\"Executes Python code to perform calculations.\",\n)\n\n# Session and Runner\nsession_service = InMemorySessionService()\nsession = asyncio.run(session_service.create_session(\n    app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID\n))\nrunner = Runner(agent=code_agent, app_name=APP_NAME,\n                session_service=session_service)\n\n# Agent Interaction (Async)\nasync def call_agent_async(query):\n    content = types.Content(role=\"user\", parts=[types.Part(text=query)])\n    print(f\"\\n--- Running Query: {query} ---\")\n    final_response_text = \"No final text response captured.\"\n    try:\n        # Use run_async\n        async for event in runner.run_async(\n            user_id=USER_ID, session_id=SESSION_ID, new_message=content\n        ):\n            print(f\"Event ID: {event.id}, Author: {event.author}\")\n\n            # --- Check for specific parts FIRST ---\n            has_specific_part = False\n            if event.content and event.content.parts:\n                for part in event.content.parts:  # Iterate through all parts\n                    if part.executable_code:\n                        # Access the actual code string via .code\n                        print(\n                            f\"  Debug: Agent generated code:\\n```python\\n{part.executable_code.code}\\n```\"\n                        )\n                        has_specific_part = True\n                    elif part.code_execution_result:\n                        # Access outcome and output correctly\n                        print(\n                            f\"  Debug: Code Execution Result: {part.code_execution_result.outcome} - Output:\\n{part.code_execution_result.output}\"\n                        )\n                        has_specific_part = True\n                    # Also print any text parts found in any event for debugging\n                    elif part.text and not part.text.isspace():\n                        print(f\"  Text: '{part.text.strip()}'\")\n                        # Do not set has_specific_part=True here, as we want the final response logic below\n\n            # --- Check for final response AFTER specific parts ---\n            # Only consider it final if it doesn't have the specific code parts we just handled\n            if not has_specific_part and event.is_final_response():\n                if (\n                    event.content\n                    and event.content.parts\n                    and event.content.parts[0].text\n                ):\n                    final_response_text = event.content.parts[0].text.strip()\n                    print(f\"==&gt; Final Agent Response: {final_response_text}\")\n                else:\n                    print(\n                        \"==&gt; Final Agent Response: [No text content in final event]\")\n\n    except Exception as e:\n        print(f\"ERROR during agent run: {e}\")\n    print(\"-\" * 30)\n\n\n# Main async function to run the examples\nasync def main():\n    await call_agent_async(\"Calculate the value of (5 + 7) * 3\")\n    await call_agent_async(\"What is 10 factorial?\")\n\n\n# Execute the main async function\ntry:\n    asyncio.run(main())\nexcept RuntimeError as e:\n    # Handle specific error when running asyncio.run in an already running loop (like Jupyter/Colab)\n    if \"cannot be called from a running event loop\" in str(e):\n        print(\"\\nRunning in an existing event loop (like Colab/Jupyter).\")\n        print(\"Please run `await main()` in a notebook cell instead.\")\n        # If in an interactive environment like a notebook, you might need to run:\n        # await main()\n    else:\n        raise e  # Re-raise other runtime errors\n</code></pre> <pre><code>import com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.BuiltInCodeExecutionTool;\nimport com.google.common.collect.ImmutableList;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\n\npublic class CodeExecutionAgentApp {\n\n  private static final String AGENT_NAME = \"calculator_agent\";\n  private static final String APP_NAME = \"calculator\";\n  private static final String USER_ID = \"user1234\";\n  private static final String SESSION_ID = \"session_code_exec_sync\";\n  private static final String GEMINI_MODEL = \"gemini-2.0-flash\";\n\n  /**\n   * Calls the agent with a query and prints the interaction events and final response.\n   *\n   * @param runner The runner instance for the agent.\n   * @param query The query to send to the agent.\n   */\n  public static void callAgent(Runner runner, String query) {\n    Content content =\n        Content.builder().role(\"user\").parts(ImmutableList.of(Part.fromText(query))).build();\n\n    InMemorySessionService sessionService = (InMemorySessionService) runner.sessionService();\n    Session session =\n        sessionService\n            .createSession(APP_NAME, USER_ID, /* state= */ null, SESSION_ID)\n            .blockingGet();\n\n    System.out.println(\"\\n--- Running Query: \" + query + \" ---\");\n    final String[] finalResponseText = {\"No final text response captured.\"};\n\n    try {\n      runner\n          .runAsync(session.userId(), session.id(), content)\n          .forEach(\n              event -&gt; {\n                System.out.println(\"Event ID: \" + event.id() + \", Author: \" + event.author());\n\n                boolean hasSpecificPart = false;\n                if (event.content().isPresent() &amp;&amp; event.content().get().parts().isPresent()) {\n                  for (Part part : event.content().get().parts().get()) {\n                    if (part.executableCode().isPresent()) {\n                      System.out.println(\n                          \"  Debug: Agent generated code:\\n```python\\n\"\n                              + part.executableCode().get().code()\n                              + \"\\n```\");\n                      hasSpecificPart = true;\n                    } else if (part.codeExecutionResult().isPresent()) {\n                      System.out.println(\n                          \"  Debug: Code Execution Result: \"\n                              + part.codeExecutionResult().get().outcome()\n                              + \" - Output:\\n\"\n                              + part.codeExecutionResult().get().output());\n                      hasSpecificPart = true;\n                    } else if (part.text().isPresent() &amp;&amp; !part.text().get().trim().isEmpty()) {\n                      System.out.println(\"  Text: '\" + part.text().get().trim() + \"'\");\n                    }\n                  }\n                }\n\n                if (!hasSpecificPart &amp;&amp; event.finalResponse()) {\n                  if (event.content().isPresent()\n                      &amp;&amp; event.content().get().parts().isPresent()\n                      &amp;&amp; !event.content().get().parts().get().isEmpty()\n                      &amp;&amp; event.content().get().parts().get().get(0).text().isPresent()) {\n                    finalResponseText[0] =\n                        event.content().get().parts().get().get(0).text().get().trim();\n                    System.out.println(\"==&gt; Final Agent Response: \" + finalResponseText[0]);\n                  } else {\n                    System.out.println(\n                        \"==&gt; Final Agent Response: [No text content in final event]\");\n                  }\n                }\n              });\n    } catch (Exception e) {\n      System.err.println(\"ERROR during agent run: \" + e.getMessage());\n      e.printStackTrace();\n    }\n    System.out.println(\"------------------------------\");\n  }\n\n  public static void main(String[] args) {\n    BuiltInCodeExecutionTool codeExecutionTool = new BuiltInCodeExecutionTool();\n\n    BaseAgent codeAgent =\n        LlmAgent.builder()\n            .name(AGENT_NAME)\n            .model(GEMINI_MODEL)\n            .tools(ImmutableList.of(codeExecutionTool))\n            .instruction(\n                \"\"\"\n                                You are a calculator agent.\n                                When given a mathematical expression, write and execute Python code to calculate the result.\n                                Return only the final numerical result as plain text, without markdown or code blocks.\n                                \"\"\")\n            .description(\"Executes Python code to perform calculations.\")\n            .build();\n\n    InMemorySessionService sessionService = new InMemorySessionService();\n    Runner runner = new Runner(codeAgent, APP_NAME, null, sessionService);\n\n    callAgent(runner, \"Calculate the value of (5 + 7) * 3\");\n    callAgent(runner, \"What is 10 factorial?\");\n  }\n}\n</code></pre>"},{"location":"tools/built-in-tools.en/#gke-code-executor","title":"GKE Code Executor","text":"<p>The GKE Code Executor (<code>GkeCodeExecutor</code>) provides a secure and scalable method for running LLM-generated code by leveraging the GKE (Google Kubernetes Engine) Sandbox environment, which uses gVisor for workload isolation.</p> <p>For each code execution request, it dynamically creates an ephemeral, sandboxed Kubernetes Job with a hardened Pod configuration. This is the recommended executor for production environments on GKE where security and isolation are critical.</p>"},{"location":"tools/built-in-tools.en/#system-requirements","title":"System requirements","text":"<p>The following requirements must be met to successfully deploy your ADK project with the GKE Code Executor tool:</p> <ul> <li>GKE cluster with a gVisor-enabled node pool.</li> <li>Agent's service account requires specific RBAC permissions, which allow it to:<ul> <li>Create, watch, and delete Jobs for each execution request.</li> <li>Manage ConfigMaps to inject code into the Job's pod.</li> <li>List Pods and read their logs to retrieve the execution result</li> </ul> </li> <li>Install the client library with GKE extras: <code>pip install google-adk[gke]</code></li> </ul> <p>For a complete, ready-to-use configuration, see the  deployment_rbac.yaml sample. For more information on deploying ADK workflows to GKE, see Deploy to Google Kubernetes Engine (GKE).</p> Python <pre><code>from google.adk.agents import LlmAgent\nfrom google.adk.code_executors import GkeCodeExecutor\n\n# Initialize the executor, targeting the namespace where its ServiceAccount\n# has the required RBAC permissions.\ngke_executor = GkeCodeExecutor(\n    namespace=\"agent-sandbox\",\n    timeout_seconds=600,\n)\n\n# The agent will now use this executor for any code it generates.\ngke_agent = LlmAgent(\n    name=\"gke_coding_agent\",\n    model=\"gemini-2.0-flash\",\n    instruction=\"You are a helpful AI agent that writes and executes Python code.\",\n    code_executor=gke_executor,\n)\n</code></pre>"},{"location":"tools/built-in-tools.en/#vertex-ai-rag-engine","title":"Vertex AI RAG Engine","text":"<p>The <code>vertex_ai_rag_retrieval</code> tool allows the agent to perform private data retrieval using Vertex AI RAG Engine.</p> <p>When you use grounding with Vertex AI RAG Engine, you need to prepare a RAG corpus before hand. Please refer to the RAG ADK agent sample or Vertex AI RAG Engine page for setting it up.</p> Python <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\n\nfrom google.adk.agents import Agent\nfrom google.adk.tools.retrieval.vertex_ai_rag_retrieval import VertexAiRagRetrieval\nfrom vertexai.preview import rag\n\nfrom dotenv import load_dotenv\nfrom .prompts import return_instructions_root\n\nload_dotenv()\n\nask_vertex_retrieval = VertexAiRagRetrieval(\n    name='retrieve_rag_documentation',\n    description=(\n        'Use this tool to retrieve documentation and reference materials for the question from the RAG corpus,'\n    ),\n    rag_resources=[\n        rag.RagResource(\n            # please fill in your own rag corpus\n            # here is a sample rag corpus for testing purpose\n            # e.g. projects/123/locations/us-central1/ragCorpora/456\n            rag_corpus=os.environ.get(\"RAG_CORPUS\")\n        )\n    ],\n    similarity_top_k=10,\n    vector_distance_threshold=0.6,\n)\n\nroot_agent = Agent(\n    model='gemini-2.0-flash-001',\n    name='ask_rag_agent',\n    instruction=return_instructions_root(),\n    tools=[\n        ask_vertex_retrieval,\n    ]\n)\n</code></pre>"},{"location":"tools/built-in-tools.en/#vertex-ai-search","title":"Vertex AI Search","text":"<p>The <code>vertex_ai_search_tool</code> uses Google Cloud Vertex AI Search, enabling the agent to search across your private, configured data stores (e.g., internal documents, company policies, knowledge bases). This built-in tool requires you to provide the specific data store ID during configuration. For further details of the tool, see Understanding Vertex AI Search grounding.</p> <pre><code># Copyright 2024 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport asyncio\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.genai import types\nfrom google.adk.tools import VertexAiSearchTool\n\n# Replace with your Vertex AI Search Datastore ID, and respective region (e.g. us-central1 or global).\n# Format: projects/&lt;PROJECT_ID&gt;/locations/&lt;REGION&gt;/collections/default_collection/dataStores/&lt;DATASTORE_ID&gt;\nDATASTORE_PATH = \"DATASTORE_PATH_HERE\"\n\n# Constants\nAPP_NAME_VSEARCH = \"vertex_search_app\"\nUSER_ID_VSEARCH = \"user_vsearch_1\"\nSESSION_ID_VSEARCH = \"session_vsearch_1\"\nAGENT_NAME_VSEARCH = \"doc_qa_agent\"\nGEMINI_2_FLASH = \"gemini-2.0-flash\"\n\n# Tool Instantiation\n# You MUST provide your datastore ID here.\nvertex_search_tool = VertexAiSearchTool(data_store_id=DATASTORE_PATH)\n\n# Agent Definition\ndoc_qa_agent = LlmAgent(\n    name=AGENT_NAME_VSEARCH,\n    model=GEMINI_2_FLASH, # Requires Gemini model\n    tools=[vertex_search_tool],\n    instruction=f\"\"\"You are a helpful assistant that answers questions based on information found in the document store: {DATASTORE_PATH}.\n    Use the search tool to find relevant information before answering.\n    If the answer isn't in the documents, say that you couldn't find the information.\n    \"\"\",\n    description=\"Answers questions using a specific Vertex AI Search datastore.\",\n)\n\n# Session and Runner Setup\nsession_service_vsearch = InMemorySessionService()\nrunner_vsearch = Runner(\n    agent=doc_qa_agent, app_name=APP_NAME_VSEARCH, session_service=session_service_vsearch\n)\nsession_vsearch = session_service_vsearch.create_session(\n    app_name=APP_NAME_VSEARCH, user_id=USER_ID_VSEARCH, session_id=SESSION_ID_VSEARCH\n)\n\n# Agent Interaction Function\nasync def call_vsearch_agent_async(query):\n    print(\"\\n--- Running Vertex AI Search Agent ---\")\n    print(f\"Query: {query}\")\n    if \"DATASTORE_PATH_HERE\" in DATASTORE_PATH:\n        print(\"Skipping execution: Please replace DATASTORE_PATH_HERE with your actual datastore ID.\")\n        print(\"-\" * 30)\n        return\n\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    final_response_text = \"No response received.\"\n    try:\n        async for event in runner_vsearch.run_async(\n            user_id=USER_ID_VSEARCH, session_id=SESSION_ID_VSEARCH, new_message=content\n        ):\n            # Like Google Search, results are often embedded in the model's response.\n            if event.is_final_response() and event.content and event.content.parts:\n                final_response_text = event.content.parts[0].text.strip()\n                print(f\"Agent Response: {final_response_text}\")\n                # You can inspect event.grounding_metadata for source citations\n                if event.grounding_metadata:\n                    print(f\"  (Grounding metadata found with {len(event.grounding_metadata.grounding_attributions)} attributions)\")\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        print(\"Ensure your datastore ID is correct and the service account has permissions.\")\n    print(\"-\" * 30)\n\n# --- Run Example ---\nasync def run_vsearch_example():\n    # Replace with a question relevant to YOUR datastore content\n    await call_vsearch_agent_async(\"Summarize the main points about the Q2 strategy document.\")\n    await call_vsearch_agent_async(\"What safety procedures are mentioned for lab X?\")\n\n# Execute the example\n# await run_vsearch_example()\n\n# Running locally due to potential colab asyncio issues with multiple awaits\ntry:\n    asyncio.run(run_vsearch_example())\nexcept RuntimeError as e:\n    if \"cannot be called from a running event loop\" in str(e):\n        print(\"Skipping execution in running event loop (like Colab/Jupyter). Run locally.\")\n    else:\n        raise e\n</code></pre>"},{"location":"tools/built-in-tools.en/#bigquery","title":"BigQuery","text":"<p>These are a set of tools aimed to provide integration with BigQuery, namely:</p> <ul> <li><code>list_dataset_ids</code>: Fetches BigQuery dataset ids present in a GCP project.</li> <li><code>get_dataset_info</code>: Fetches metadata about a BigQuery dataset.</li> <li><code>list_table_ids</code>: Fetches table ids present in a BigQuery dataset.</li> <li><code>get_table_info</code>: Fetches metadata about a BigQuery table.</li> <li><code>execute_sql</code>: Runs a SQL query in BigQuery and fetch the result.</li> <li><code>ask_data_insights</code>: Answers questions about data in BigQuery tables using natural language.</li> </ul> <p>They are packaged in the toolset <code>BigQueryToolset</code>.</p> <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport asyncio\n\nfrom google.adk.agents import Agent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools.bigquery import BigQueryCredentialsConfig\nfrom google.adk.tools.bigquery import BigQueryToolset\nfrom google.adk.tools.bigquery.config import BigQueryToolConfig\nfrom google.adk.tools.bigquery.config import WriteMode\nfrom google.genai import types\nimport google.auth\n\n# Define constants for this example agent\nAGENT_NAME = \"bigquery_agent\"\nAPP_NAME = \"bigquery_app\"\nUSER_ID = \"user1234\"\nSESSION_ID = \"1234\"\nGEMINI_MODEL = \"gemini-2.0-flash\"\n\n# Define a tool configuration to block any write operations\ntool_config = BigQueryToolConfig(write_mode=WriteMode.BLOCKED)\n\n# Define a credentials config - in this example we are using application default\n# credentials\n# https://cloud.google.com/docs/authentication/provide-credentials-adc\napplication_default_credentials, _ = google.auth.default()\ncredentials_config = BigQueryCredentialsConfig(\n    credentials=application_default_credentials\n)\n\n# Instantiate a BigQuery toolset\nbigquery_toolset = BigQueryToolset(\n    credentials_config=credentials_config, bigquery_tool_config=tool_config\n)\n\n# Agent Definition\nbigquery_agent = Agent(\n    model=GEMINI_MODEL,\n    name=AGENT_NAME,\n    description=(\n        \"Agent to answer questions about BigQuery data and models and execute\"\n        \" SQL queries.\"\n    ),\n    instruction=\"\"\"\\\n        You are a data science agent with access to several BigQuery tools.\n        Make use of those tools to answer the user's questions.\n    \"\"\",\n    tools=[bigquery_toolset],\n)\n\n# Session and Runner\nsession_service = InMemorySessionService()\nsession = asyncio.run(\n    session_service.create_session(\n        app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID\n    )\n)\nrunner = Runner(\n    agent=bigquery_agent, app_name=APP_NAME, session_service=session_service\n)\n\n\n# Agent Interaction\ndef call_agent(query):\n    \"\"\"\n    Helper function to call the agent with a query.\n    \"\"\"\n    content = types.Content(role=\"user\", parts=[types.Part(text=query)])\n    events = runner.run(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    print(\"USER:\", query)\n    for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"AGENT:\", final_response)\n\n\ncall_agent(\"Are there any ml datasets in bigquery-public-data project?\")\ncall_agent(\"Tell me more about ml_datasets.\")\ncall_agent(\"Which all tables does it have?\")\ncall_agent(\"Tell me more about the census_adult_income table.\")\ncall_agent(\"How many rows are there per income bracket?\")\ncall_agent(\n    \"What is the statistical correlation between education_num, age, and the income_bracket?\"\n)\n</code></pre>"},{"location":"tools/built-in-tools.en/#use-built-in-tools-with-other-tools","title":"Use Built-in tools with other tools","text":"<p>The following code sample demonstrates how to use multiple built-in tools or how to use built-in tools with other tools by using multiple agents:</p> PythonJava <pre><code>from google.adk.tools.agent_tool import AgentTool\nfrom google.adk.agents import Agent\nfrom google.adk.tools import google_search\nfrom google.adk.code_executors import BuiltInCodeExecutor\n\n\nsearch_agent = Agent(\n    model='gemini-2.0-flash',\n    name='SearchAgent',\n    instruction=\"\"\"\n    You're a specialist in Google Search\n    \"\"\",\n    tools=[google_search],\n)\ncoding_agent = Agent(\n    model='gemini-2.0-flash',\n    name='CodeAgent',\n    instruction=\"\"\"\n    You're a specialist in Code Execution\n    \"\"\",\n    code_executor=BuiltInCodeExecutor(),\n)\nroot_agent = Agent(\n    name=\"RootAgent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Root Agent\",\n    tools=[AgentTool(agent=search_agent), AgentTool(agent=coding_agent)],\n)\n</code></pre> <pre><code>import com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.tools.AgentTool;\nimport com.google.adk.tools.BuiltInCodeExecutionTool;\nimport com.google.adk.tools.GoogleSearchTool;\nimport com.google.common.collect.ImmutableList;\n\npublic class NestedAgentApp {\n\n  private static final String MODEL_ID = \"gemini-2.0-flash\";\n\n  public static void main(String[] args) {\n\n    // Define the SearchAgent\n    LlmAgent searchAgent =\n        LlmAgent.builder()\n            .model(MODEL_ID)\n            .name(\"SearchAgent\")\n            .instruction(\"You're a specialist in Google Search\")\n            .tools(new GoogleSearchTool()) // Instantiate GoogleSearchTool\n            .build();\n\n\n    // Define the CodingAgent\n    LlmAgent codingAgent =\n        LlmAgent.builder()\n            .model(MODEL_ID)\n            .name(\"CodeAgent\")\n            .instruction(\"You're a specialist in Code Execution\")\n            .tools(new BuiltInCodeExecutionTool()) // Instantiate BuiltInCodeExecutionTool\n            .build();\n\n    // Define the RootAgent, which uses AgentTool.create() to wrap SearchAgent and CodingAgent\n    BaseAgent rootAgent =\n        LlmAgent.builder()\n            .name(\"RootAgent\")\n            .model(MODEL_ID)\n            .description(\"Root Agent\")\n            .tools(\n                AgentTool.create(searchAgent), // Use create method\n                AgentTool.create(codingAgent)   // Use create method\n             )\n            .build();\n\n    // Note: This sample only demonstrates the agent definitions.\n    // To run these agents, you'd need to integrate them with a Runner and SessionService,\n    // similar to the previous examples.\n    System.out.println(\"Agents defined successfully:\");\n    System.out.println(\"  Root Agent: \" + rootAgent.name());\n    System.out.println(\"  Search Agent (nested): \" + searchAgent.name());\n    System.out.println(\"  Code Agent (nested): \" + codingAgent.name());\n  }\n}\n</code></pre>"},{"location":"tools/built-in-tools.en/#limitations","title":"Limitations","text":"<p>Warning</p> <p>Currently, for each root agent or single agent, only one built-in tool is supported. No other tools of any type can be used in the same agent.</p> <p>For example, the following approach that uses a built-in tool along with  other tools within a single agent is not currently supported:</p> PythonJava <pre><code>root_agent = Agent(\n    name=\"RootAgent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Root Agent\",\n    tools=[custom_function], \n    code_executor=BuiltInCodeExecutor() # &lt;-- not supported when used with tools\n)\n</code></pre> <pre><code> LlmAgent searchAgent =\n        LlmAgent.builder()\n            .model(MODEL_ID)\n            .name(\"SearchAgent\")\n            .instruction(\"You're a specialist in Google Search\")\n            .tools(new GoogleSearchTool(), new YourCustomTool()) // &lt;-- not supported\n            .build();\n</code></pre> <p>Warning</p> <p>Built-in tools cannot be used within a sub-agent.</p> <p>For example, the following approach that uses built-in tools within sub-agents is not currently supported:</p> PythonJava <pre><code>search_agent = Agent(\n    model='gemini-2.0-flash',\n    name='SearchAgent',\n    instruction=\"\"\"\n    You're a specialist in Google Search\n    \"\"\",\n    tools=[google_search],\n)\ncoding_agent = Agent(\n    model='gemini-2.0-flash',\n    name='CodeAgent',\n    instruction=\"\"\"\n    You're a specialist in Code Execution\n    \"\"\",\n    code_executor=BuiltInCodeExecutor(),\n)\nroot_agent = Agent(\n    name=\"RootAgent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Root Agent\",\n    sub_agents=[\n        search_agent,\n        coding_agent\n    ],\n)\n</code></pre> <pre><code>LlmAgent searchAgent =\n    LlmAgent.builder()\n        .model(\"gemini-2.0-flash\")\n        .name(\"SearchAgent\")\n        .instruction(\"You're a specialist in Google Search\")\n        .tools(new GoogleSearchTool())\n        .build();\n\nLlmAgent codingAgent =\n    LlmAgent.builder()\n        .model(\"gemini-2.0-flash\")\n        .name(\"CodeAgent\")\n        .instruction(\"You're a specialist in Code Execution\")\n        .tools(new BuiltInCodeExecutionTool())\n        .build();\n\n\nLlmAgent rootAgent =\n    LlmAgent.builder()\n        .name(\"RootAgent\")\n        .model(\"gemini-2.0-flash\")\n        .description(\"Root Agent\")\n        .subAgents(searchAgent, codingAgent) // Not supported, as the sub agents use built in tools.\n        .build();\n</code></pre>"},{"location":"tools/built-in-tools/","title":"\u5167\u5efa\u5de5\u5177","text":"<p>\u9019\u4e9b\u5167\u5efa\u5de5\u5177\uff08built-in tools\uff09\u63d0\u4f9b\u73fe\u6210\u53ef\u7528\u7684\u529f\u80fd\uff0c\u4f8b\u5982 Google Search \u6216\u7a0b\u5f0f\u78bc\u57f7\u884c\u5668\uff08code executors\uff09\uff0c\u8b93 agent \u64c1\u6709\u5e38\u898b\u7684\u80fd\u529b\u3002\u4f8b\u5982\uff0c\u4e00\u500b\u9700\u8981\u5f9e\u7db2\u8def\u64f7\u53d6\u8cc7\u8a0a\u7684 agent\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 google_search \u5de5\u5177\uff0c\u7121\u9700\u984d\u5916\u8a2d\u5b9a\u3002</p>"},{"location":"tools/built-in-tools/#_2","title":"\u4f7f\u7528\u65b9\u5f0f","text":"<ol> <li>\u532f\u5165\uff1a \u5f9e tools \u6a21\u7d44\u532f\u5165\u6240\u9700\u7684\u5de5\u5177\u3002\u5728 Python \u4e2d\u70ba <code>agents.tools</code>\uff0c\u5728 Java \u4e2d\u70ba <code>com.google.adk.tools</code>\u3002</li> <li>\u8a2d\u5b9a\uff1a \u521d\u59cb\u5316\u8a72\u5de5\u5177\uff0c\u4e26\u63d0\u4f9b\u5fc5\u8981\u7684\u53c3\u6578\uff08\u5982\u6709\uff09\u3002</li> <li>\u8a3b\u518a\uff1a \u5c07\u521d\u59cb\u5316\u5f8c\u7684\u5de5\u5177\u52a0\u5165\u4f60\u7684 agent \u7684 tools \u6e05\u55ae\u4e2d\u3002</li> </ol> <p>\u5c07\u5de5\u5177\u52a0\u5165 agent \u5f8c\uff0cagent \u53ef\u4ee5\u6839\u64da user prompt \u548c\u5176 instructions \u6c7a\u5b9a\u662f\u5426\u4f7f\u7528\u8a72\u5de5\u5177\u3002\u7576 agent \u547c\u53eb\u5de5\u5177\u6642\uff0c\u6846\u67b6\u6703\u81ea\u52d5\u8655\u7406\u5de5\u5177\u7684\u57f7\u884c\u3002\u91cd\u8981\u63d0\u9192\uff1a\u8acb\u53c3\u95b1\u672c\u9801\u7684 \u9650\u5236 \u7ae0\u7bc0\u3002</p>"},{"location":"tools/built-in-tools/#_3","title":"\u53ef\u7528\u7684\u5167\u5efa\u5de5\u5177","text":"<p>\u6ce8\u610f\uff1a\u76ee\u524d Java \u50c5\u652f\u63f4 Google Search \u8207\u7a0b\u5f0f\u78bc\u57f7\u884c\u5de5\u5177\u3002</p>"},{"location":"tools/built-in-tools/#google-search","title":"Google Search","text":"<p><code>google_search</code> \u5de5\u5177\u5141\u8a31 agent \u4f7f\u7528 Google Search \u9032\u884c\u7db2\u9801\u641c\u5c0b\u3002<code>google_search</code> \u5de5\u5177\u50c5\u76f8\u5bb9\u65bc Gemini 2 \u6a21\u578b\u3002\u6b32\u77ad\u89e3\u6b64\u5de5\u5177\u7684\u66f4\u591a\u7d30\u7bc0\uff0c\u8acb\u53c3\u95b1 Understanding Google Search grounding\u3002</p> <p>Additional requirements when using the <code>google_search</code> tool</p> <p>\u7576\u4f60\u5728\u4f7f\u7528 Google Search \u7684\u77e5\u8b58\u63a5\u5730 (grounding) \u529f\u80fd\uff0c\u4e26\u5728\u56de\u61c9\u4e2d\u6536\u5230 Search \u5efa\u8b70\u6642\uff0c\u4f60\u5fc5\u9808\u5728\u6b63\u5f0f\u74b0\u5883\u53ca\u4f60\u7684\u61c9\u7528\u7a0b\u5f0f\u4e2d\u986f\u793a\u9019\u4e9b Search \u5efa\u8b70\u3002  </p> <p>\u5982\u9700\u6709\u95dc Google Search \u77e5\u8b58\u63a5\u5730 (grounding) \u7684\u66f4\u591a\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 Google AI Studio \u6216 Vertex AI \u7684 Grounding with Google Search \u6587\u4ef6\u8aaa\u660e\u3002Gemini \u56de\u61c9\u4e2d\u6703\u4ee5 <code>renderedContent</code> \u5f62\u5f0f\u56de\u50b3 UI \u7a0b\u5f0f\u78bc\uff08HTML\uff09\uff0c\u4f60\u9700\u8981\u6839\u64da\u653f\u7b56\u5728\u4f60\u7684\u61c9\u7528\u7a0b\u5f0f\u4e2d\u986f\u793a\u8a72 HTML\u3002</p> PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import Agent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools import google_search\nfrom google.genai import types\n\nAPP_NAME=\"google_search_agent\"\nUSER_ID=\"user1234\"\nSESSION_ID=\"1234\"\n\n\nroot_agent = Agent(\n    name=\"basic_search_agent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Agent to answer questions using Google Search.\",\n    instruction=\"I can answer your questions by searching the internet. Just ask me anything!\",\n    # google_search is a pre-built tool which allows the agent to perform Google searches.\n    tools=[google_search]\n)\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=root_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"what's the latest ai news?\")\n</code></pre> <pre><code>import com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.GoogleSearchTool;\nimport com.google.common.collect.ImmutableList;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\n\npublic class GoogleSearchAgentApp {\n\n  private static final String APP_NAME = \"Google Search_agent\";\n  private static final String USER_ID = \"user1234\";\n  private static final String SESSION_ID = \"1234\";\n\n  /**\n   * Calls the agent with the given query and prints the final response.\n   *\n   * @param runner The runner to use.\n   * @param query The query to send to the agent.\n   */\n  public static void callAgent(Runner runner, String query) {\n    Content content =\n        Content.fromParts(Part.fromText(query));\n\n    InMemorySessionService sessionService = (InMemorySessionService) runner.sessionService();\n    Session session =\n        sessionService\n            .createSession(APP_NAME, USER_ID, /* state= */ null, SESSION_ID)\n            .blockingGet();\n\n    runner\n        .runAsync(session.userId(), session.id(), content)\n        .forEach(\n            event -&gt; {\n              if (event.finalResponse()\n                  &amp;&amp; event.content().isPresent()\n                  &amp;&amp; event.content().get().parts().isPresent()\n                  &amp;&amp; !event.content().get().parts().get().isEmpty()\n                  &amp;&amp; event.content().get().parts().get().get(0).text().isPresent()) {\n                String finalResponse = event.content().get().parts().get().get(0).text().get();\n                System.out.println(\"Agent Response: \" + finalResponse);\n              }\n            });\n  }\n\n  public static void main(String[] args) {\n    // Google Search is a pre-built tool which allows the agent to perform Google searches.\n    GoogleSearchTool googleSearchTool = new GoogleSearchTool();\n\n    BaseAgent rootAgent =\n        LlmAgent.builder()\n            .name(\"basic_search_agent\")\n            .model(\"gemini-2.0-flash\") // Ensure to use a Gemini 2.0 model for Google Search Tool\n            .description(\"Agent to answer questions using Google Search.\")\n            .instruction(\n                \"I can answer your questions by searching the internet. Just ask me anything!\")\n            .tools(ImmutableList.of(googleSearchTool))\n            .build();\n\n    // Session and Runner\n    InMemorySessionService sessionService = new InMemorySessionService();\n    Runner runner = new Runner(rootAgent, APP_NAME, null, sessionService);\n\n    // Agent Interaction\n    callAgent(runner, \"what's the latest ai news?\");\n  }\n}\n</code></pre>"},{"location":"tools/built-in-tools/#_4","title":"\u7a0b\u5f0f\u78bc\u57f7\u884c","text":"<p><code>built_in_code_execution</code> \u5de5\u5177\u8b93 agent \u80fd\u5920\u57f7\u884c\u7a0b\u5f0f\u78bc\uff0c\u7279\u5225\u662f\u5728\u4f7f\u7528 Gemini 2 \u6a21\u578b\u6642\u3002\u9019\u4f7f\u6a21\u578b\u80fd\u5920\u57f7\u884c\u50cf\u662f\u8a08\u7b97\u3001\u8cc7\u6599\u64cd\u4f5c\u6216\u57f7\u884c\u5c0f\u578b\u8173\u672c\u7b49\u4efb\u52d9\u3002</p> PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport asyncio\nfrom google.adk.agents import LlmAgent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.code_executors import BuiltInCodeExecutor\nfrom google.genai import types\n\nAGENT_NAME = \"calculator_agent\"\nAPP_NAME = \"calculator\"\nUSER_ID = \"user1234\"\nSESSION_ID = \"session_code_exec_async\"\nGEMINI_MODEL = \"gemini-2.0-flash\"\n\n# Agent Definition\ncode_agent = LlmAgent(\n    name=AGENT_NAME,\n    model=GEMINI_MODEL,\n    code_executor=BuiltInCodeExecutor(),\n    instruction=\"\"\"You are a calculator agent.\n    When given a mathematical expression, write and execute Python code to calculate the result.\n    Return only the final numerical result as plain text, without markdown or code blocks.\n    \"\"\",\n    description=\"Executes Python code to perform calculations.\",\n)\n\n# Session and Runner\nsession_service = InMemorySessionService()\nsession = asyncio.run(session_service.create_session(\n    app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID\n))\nrunner = Runner(agent=code_agent, app_name=APP_NAME,\n                session_service=session_service)\n\n# Agent Interaction (Async)\nasync def call_agent_async(query):\n    content = types.Content(role=\"user\", parts=[types.Part(text=query)])\n    print(f\"\\n--- Running Query: {query} ---\")\n    final_response_text = \"No final text response captured.\"\n    try:\n        # Use run_async\n        async for event in runner.run_async(\n            user_id=USER_ID, session_id=SESSION_ID, new_message=content\n        ):\n            print(f\"Event ID: {event.id}, Author: {event.author}\")\n\n            # --- Check for specific parts FIRST ---\n            has_specific_part = False\n            if event.content and event.content.parts:\n                for part in event.content.parts:  # Iterate through all parts\n                    if part.executable_code:\n                        # Access the actual code string via .code\n                        print(\n                            f\"  Debug: Agent generated code:\\n```python\\n{part.executable_code.code}\\n```\"\n                        )\n                        has_specific_part = True\n                    elif part.code_execution_result:\n                        # Access outcome and output correctly\n                        print(\n                            f\"  Debug: Code Execution Result: {part.code_execution_result.outcome} - Output:\\n{part.code_execution_result.output}\"\n                        )\n                        has_specific_part = True\n                    # Also print any text parts found in any event for debugging\n                    elif part.text and not part.text.isspace():\n                        print(f\"  Text: '{part.text.strip()}'\")\n                        # Do not set has_specific_part=True here, as we want the final response logic below\n\n            # --- Check for final response AFTER specific parts ---\n            # Only consider it final if it doesn't have the specific code parts we just handled\n            if not has_specific_part and event.is_final_response():\n                if (\n                    event.content\n                    and event.content.parts\n                    and event.content.parts[0].text\n                ):\n                    final_response_text = event.content.parts[0].text.strip()\n                    print(f\"==&gt; Final Agent Response: {final_response_text}\")\n                else:\n                    print(\n                        \"==&gt; Final Agent Response: [No text content in final event]\")\n\n    except Exception as e:\n        print(f\"ERROR during agent run: {e}\")\n    print(\"-\" * 30)\n\n\n# Main async function to run the examples\nasync def main():\n    await call_agent_async(\"Calculate the value of (5 + 7) * 3\")\n    await call_agent_async(\"What is 10 factorial?\")\n\n\n# Execute the main async function\ntry:\n    asyncio.run(main())\nexcept RuntimeError as e:\n    # Handle specific error when running asyncio.run in an already running loop (like Jupyter/Colab)\n    if \"cannot be called from a running event loop\" in str(e):\n        print(\"\\nRunning in an existing event loop (like Colab/Jupyter).\")\n        print(\"Please run `await main()` in a notebook cell instead.\")\n        # If in an interactive environment like a notebook, you might need to run:\n        # await main()\n    else:\n        raise e  # Re-raise other runtime errors\n</code></pre> <pre><code>import com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.BuiltInCodeExecutionTool;\nimport com.google.common.collect.ImmutableList;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\n\npublic class CodeExecutionAgentApp {\n\n  private static final String AGENT_NAME = \"calculator_agent\";\n  private static final String APP_NAME = \"calculator\";\n  private static final String USER_ID = \"user1234\";\n  private static final String SESSION_ID = \"session_code_exec_sync\";\n  private static final String GEMINI_MODEL = \"gemini-2.0-flash\";\n\n  /**\n   * Calls the agent with a query and prints the interaction events and final response.\n   *\n   * @param runner The runner instance for the agent.\n   * @param query The query to send to the agent.\n   */\n  public static void callAgent(Runner runner, String query) {\n    Content content =\n        Content.builder().role(\"user\").parts(ImmutableList.of(Part.fromText(query))).build();\n\n    InMemorySessionService sessionService = (InMemorySessionService) runner.sessionService();\n    Session session =\n        sessionService\n            .createSession(APP_NAME, USER_ID, /* state= */ null, SESSION_ID)\n            .blockingGet();\n\n    System.out.println(\"\\n--- Running Query: \" + query + \" ---\");\n    final String[] finalResponseText = {\"No final text response captured.\"};\n\n    try {\n      runner\n          .runAsync(session.userId(), session.id(), content)\n          .forEach(\n              event -&gt; {\n                System.out.println(\"Event ID: \" + event.id() + \", Author: \" + event.author());\n\n                boolean hasSpecificPart = false;\n                if (event.content().isPresent() &amp;&amp; event.content().get().parts().isPresent()) {\n                  for (Part part : event.content().get().parts().get()) {\n                    if (part.executableCode().isPresent()) {\n                      System.out.println(\n                          \"  Debug: Agent generated code:\\n```python\\n\"\n                              + part.executableCode().get().code()\n                              + \"\\n```\");\n                      hasSpecificPart = true;\n                    } else if (part.codeExecutionResult().isPresent()) {\n                      System.out.println(\n                          \"  Debug: Code Execution Result: \"\n                              + part.codeExecutionResult().get().outcome()\n                              + \" - Output:\\n\"\n                              + part.codeExecutionResult().get().output());\n                      hasSpecificPart = true;\n                    } else if (part.text().isPresent() &amp;&amp; !part.text().get().trim().isEmpty()) {\n                      System.out.println(\"  Text: '\" + part.text().get().trim() + \"'\");\n                    }\n                  }\n                }\n\n                if (!hasSpecificPart &amp;&amp; event.finalResponse()) {\n                  if (event.content().isPresent()\n                      &amp;&amp; event.content().get().parts().isPresent()\n                      &amp;&amp; !event.content().get().parts().get().isEmpty()\n                      &amp;&amp; event.content().get().parts().get().get(0).text().isPresent()) {\n                    finalResponseText[0] =\n                        event.content().get().parts().get().get(0).text().get().trim();\n                    System.out.println(\"==&gt; Final Agent Response: \" + finalResponseText[0]);\n                  } else {\n                    System.out.println(\n                        \"==&gt; Final Agent Response: [No text content in final event]\");\n                  }\n                }\n              });\n    } catch (Exception e) {\n      System.err.println(\"ERROR during agent run: \" + e.getMessage());\n      e.printStackTrace();\n    }\n    System.out.println(\"------------------------------\");\n  }\n\n  public static void main(String[] args) {\n    BuiltInCodeExecutionTool codeExecutionTool = new BuiltInCodeExecutionTool();\n\n    BaseAgent codeAgent =\n        LlmAgent.builder()\n            .name(AGENT_NAME)\n            .model(GEMINI_MODEL)\n            .tools(ImmutableList.of(codeExecutionTool))\n            .instruction(\n                \"\"\"\n                                You are a calculator agent.\n                                When given a mathematical expression, write and execute Python code to calculate the result.\n                                Return only the final numerical result as plain text, without markdown or code blocks.\n                                \"\"\")\n            .description(\"Executes Python code to perform calculations.\")\n            .build();\n\n    InMemorySessionService sessionService = new InMemorySessionService();\n    Runner runner = new Runner(codeAgent, APP_NAME, null, sessionService);\n\n    callAgent(runner, \"Calculate the value of (5 + 7) * 3\");\n    callAgent(runner, \"What is 10 factorial?\");\n  }\n}\n</code></pre>"},{"location":"tools/built-in-tools/#gke","title":"GKE \u7a0b\u5f0f\u78bc\u57f7\u884c\u5668","text":"<p>GKE \u7a0b\u5f0f\u78bc\u57f7\u884c\u5668\uff08<code>GkeCodeExecutor</code>\uff09\u63d0\u4f9b\u4e00\u7a2e\u5b89\u5168\u4e14\u53ef\u64f4\u5c55\u7684\u65b9\u6cd5\uff0c\u5229\u7528 GKE\uff08Google Kubernetes Engine\uff09Sandbox \u74b0\u5883\u4f86\u57f7\u884c\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7522\u751f\u7684\u7a0b\u5f0f\u78bc\uff0c\u8a72\u74b0\u5883\u900f\u904e gVisor \u4f86\u5be6\u73fe\u5de5\u4f5c\u8ca0\u8f09\u9694\u96e2\u3002</p> <p>\u6bcf\u6b21\u7a0b\u5f0f\u78bc\u57f7\u884c\u8acb\u6c42\u6642\uff0c\u7cfb\u7d71\u6703\u52d5\u614b\u5efa\u7acb\u4e00\u500b\u77ed\u66ab\u4e14\u6c99\u7bb1\u5316\u7684 Kubernetes Job\uff0c\u4e26\u63a1\u7528\u5f37\u5316\u7684 Pod \u8a2d\u5b9a\u3002\u9019\u662f\u5efa\u8b70\u5728 GKE \u751f\u7522\u74b0\u5883\u4e2d\u4f7f\u7528\u7684\u57f7\u884c\u5668\uff0c\u7279\u5225\u9069\u7528\u65bc\u5b89\u5168\u6027\u8207\u9694\u96e2\u6027\u8981\u6c42\u9ad8\u7684\u5834\u666f\u3002</p>"},{"location":"tools/built-in-tools/#_5","title":"\u7cfb\u7d71\u9700\u6c42","text":"<p>\u82e5\u8981\u6210\u529f\u4f7f\u7528 GKE \u7a0b\u5f0f\u78bc\u57f7\u884c\u5668\u5de5\u5177\u90e8\u7f72\u60a8\u7684 Agent Development Kit (ADK) \u5c08\u6848\uff0c\u9700\u7b26\u5408\u4ee5\u4e0b\u9700\u6c42\uff1a</p> <ul> <li>\u64c1\u6709\u555f\u7528 gVisor \u7684\u7bc0\u9ede\u96c6\u5340\uff08node pool\uff09 \u7684 GKE \u53e2\u96c6\u3002</li> <li>agent \u7684\u670d\u52d9\u5e33\u6236\uff08Service Account\uff09\u9700\u5177\u5099\u7279\u5b9a RBAC \u6b0a\u9650\uff0c\u4ee5\u5141\u8a31\u5176\uff1a<ul> <li>\u70ba\u6bcf\u500b\u57f7\u884c\u8acb\u6c42\u5efa\u7acb\u3001\u76e3\u63a7\u53ca\u522a\u9664 Jobs\u3002</li> <li>\u7ba1\u7406 ConfigMaps\uff0c\u5c07\u7a0b\u5f0f\u78bc\u6ce8\u5165\u81f3 Job \u7684 pod \u4e2d\u3002</li> <li>\u5217\u51fa Pods \u4e26\u8b80\u53d6\u5176 logs\uff0c\u4ee5\u53d6\u5f97\u57f7\u884c\u7d50\u679c</li> </ul> </li> <li>\u5b89\u88dd\u5305\u542b GKE extras \u7684\u7528\u6236\u7aef\u7a0b\u5f0f\u5eab\uff1a<code>pip install google-adk[gke]</code></li> </ul> <p>\u5982\u9700\u5b8c\u6574\u4e14\u53ef\u76f4\u63a5\u4f7f\u7528\u7684\u8a2d\u5b9a\u7bc4\u4f8b\uff0c\u8acb\u53c3\u95b1 deployment_rbac.yaml \u7bc4\u4f8b\u3002\u66f4\u591a\u6709\u95dc\u5c07 ADK \u5de5\u4f5c\u6d41\u7a0b\u90e8\u7f72\u81f3 GKE \u7684\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 Deploy to Google Kubernetes Engine (GKE)\u3002</p> Python <pre><code>from google.adk.agents import LlmAgent\nfrom google.adk.code_executors import GkeCodeExecutor\n\n# Initialize the executor, targeting the namespace where its ServiceAccount\n# has the required RBAC permissions.\ngke_executor = GkeCodeExecutor(\n    namespace=\"agent-sandbox\",\n    timeout_seconds=600,\n)\n\n# The agent will now use this executor for any code it generates.\ngke_agent = LlmAgent(\n    name=\"gke_coding_agent\",\n    model=\"gemini-2.0-flash\",\n    instruction=\"You are a helpful AI agent that writes and executes Python code.\",\n    code_executor=gke_executor,\n)\n</code></pre>"},{"location":"tools/built-in-tools/#vertex-ai-rag-engine","title":"Vertex AI RAG Engine","text":"<p><code>vertex_ai_rag_retrieval</code> \u5de5\u5177\u5141\u8a31 agent \u4f7f\u7528 Vertex AI RAG Engine \u57f7\u884c\u79c1\u6709\u8cc7\u6599\u6aa2\u7d22\u3002</p> <p>\u7576\u4f60\u4f7f\u7528 Vertex AI RAG Engine \u9032\u884c\u77e5\u8b58\u63a5\u5730 (grounding) \u6642\uff0c\u9700\u8981\u4e8b\u5148\u6e96\u5099\u597d RAG corpus\u3002 \u8acb\u53c3\u8003 RAG ADK agent sample \u6216 Vertex AI RAG Engine page \u4f86\u9032\u884c\u76f8\u95dc\u8a2d\u5b9a\u3002</p> Python <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\n\nfrom google.adk.agents import Agent\nfrom google.adk.tools.retrieval.vertex_ai_rag_retrieval import VertexAiRagRetrieval\nfrom vertexai.preview import rag\n\nfrom dotenv import load_dotenv\nfrom .prompts import return_instructions_root\n\nload_dotenv()\n\nask_vertex_retrieval = VertexAiRagRetrieval(\n    name='retrieve_rag_documentation',\n    description=(\n        'Use this tool to retrieve documentation and reference materials for the question from the RAG corpus,'\n    ),\n    rag_resources=[\n        rag.RagResource(\n            # please fill in your own rag corpus\n            # here is a sample rag corpus for testing purpose\n            # e.g. projects/123/locations/us-central1/ragCorpora/456\n            rag_corpus=os.environ.get(\"RAG_CORPUS\")\n        )\n    ],\n    similarity_top_k=10,\n    vector_distance_threshold=0.6,\n)\n\nroot_agent = Agent(\n    model='gemini-2.0-flash-001',\n    name='ask_rag_agent',\n    instruction=return_instructions_root(),\n    tools=[\n        ask_vertex_retrieval,\n    ]\n)\n</code></pre>"},{"location":"tools/built-in-tools/#vertex-ai-search","title":"Vertex AI Search","text":"<p><code>vertex_ai_search_tool</code> \u4f7f\u7528 Google Cloud Vertex AI Search\uff0c\u8b93 agent \u80fd\u5920\u5728\u60a8\u79c1\u6709\u4e14\u5df2\u8a2d\u5b9a\u7684\u8cc7\u6599\u5132\u5b58\u5340\uff08\u4f8b\u5982\uff1a\u5167\u90e8\u6587\u4ef6\u3001\u516c\u53f8\u653f\u7b56\u3001\u77e5\u8b58\u5eab\uff09\u4e2d\u9032\u884c\u641c\u5c0b\u3002\u6b64\u5167\u5efa\u5de5\u5177\u5728\u8a2d\u5b9a\u6642\u9700\u8981\u60a8\u63d0\u4f9b\u7279\u5b9a\u7684\u8cc7\u6599\u5132\u5b58\u5340 ID\u3002\u5982\u9700\u6b64\u5de5\u5177\u7684\u8a73\u7d30\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 Understanding Vertex AI Search grounding\u3002</p> <pre><code># Copyright 2024 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport asyncio\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.genai import types\nfrom google.adk.tools import VertexAiSearchTool\n\n# Replace with your Vertex AI Search Datastore ID, and respective region (e.g. us-central1 or global).\n# Format: projects/&lt;PROJECT_ID&gt;/locations/&lt;REGION&gt;/collections/default_collection/dataStores/&lt;DATASTORE_ID&gt;\nDATASTORE_PATH = \"DATASTORE_PATH_HERE\"\n\n# Constants\nAPP_NAME_VSEARCH = \"vertex_search_app\"\nUSER_ID_VSEARCH = \"user_vsearch_1\"\nSESSION_ID_VSEARCH = \"session_vsearch_1\"\nAGENT_NAME_VSEARCH = \"doc_qa_agent\"\nGEMINI_2_FLASH = \"gemini-2.0-flash\"\n\n# Tool Instantiation\n# You MUST provide your datastore ID here.\nvertex_search_tool = VertexAiSearchTool(data_store_id=DATASTORE_PATH)\n\n# Agent Definition\ndoc_qa_agent = LlmAgent(\n    name=AGENT_NAME_VSEARCH,\n    model=GEMINI_2_FLASH, # Requires Gemini model\n    tools=[vertex_search_tool],\n    instruction=f\"\"\"You are a helpful assistant that answers questions based on information found in the document store: {DATASTORE_PATH}.\n    Use the search tool to find relevant information before answering.\n    If the answer isn't in the documents, say that you couldn't find the information.\n    \"\"\",\n    description=\"Answers questions using a specific Vertex AI Search datastore.\",\n)\n\n# Session and Runner Setup\nsession_service_vsearch = InMemorySessionService()\nrunner_vsearch = Runner(\n    agent=doc_qa_agent, app_name=APP_NAME_VSEARCH, session_service=session_service_vsearch\n)\nsession_vsearch = session_service_vsearch.create_session(\n    app_name=APP_NAME_VSEARCH, user_id=USER_ID_VSEARCH, session_id=SESSION_ID_VSEARCH\n)\n\n# Agent Interaction Function\nasync def call_vsearch_agent_async(query):\n    print(\"\\n--- Running Vertex AI Search Agent ---\")\n    print(f\"Query: {query}\")\n    if \"DATASTORE_PATH_HERE\" in DATASTORE_PATH:\n        print(\"Skipping execution: Please replace DATASTORE_PATH_HERE with your actual datastore ID.\")\n        print(\"-\" * 30)\n        return\n\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    final_response_text = \"No response received.\"\n    try:\n        async for event in runner_vsearch.run_async(\n            user_id=USER_ID_VSEARCH, session_id=SESSION_ID_VSEARCH, new_message=content\n        ):\n            # Like Google Search, results are often embedded in the model's response.\n            if event.is_final_response() and event.content and event.content.parts:\n                final_response_text = event.content.parts[0].text.strip()\n                print(f\"Agent Response: {final_response_text}\")\n                # You can inspect event.grounding_metadata for source citations\n                if event.grounding_metadata:\n                    print(f\"  (Grounding metadata found with {len(event.grounding_metadata.grounding_attributions)} attributions)\")\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        print(\"Ensure your datastore ID is correct and the service account has permissions.\")\n    print(\"-\" * 30)\n\n# --- Run Example ---\nasync def run_vsearch_example():\n    # Replace with a question relevant to YOUR datastore content\n    await call_vsearch_agent_async(\"Summarize the main points about the Q2 strategy document.\")\n    await call_vsearch_agent_async(\"What safety procedures are mentioned for lab X?\")\n\n# Execute the example\n# await run_vsearch_example()\n\n# Running locally due to potential colab asyncio issues with multiple awaits\ntry:\n    asyncio.run(run_vsearch_example())\nexcept RuntimeError as e:\n    if \"cannot be called from a running event loop\" in str(e):\n        print(\"Skipping execution in running event loop (like Colab/Jupyter). Run locally.\")\n    else:\n        raise e\n</code></pre>"},{"location":"tools/built-in-tools/#bigquery","title":"BigQuery","text":"<p>\u9019\u662f\u4e00\u7d44\u65e8\u5728\u63d0\u4f9b\u8207 BigQuery \u6574\u5408\u7684\u5de5\u5177\uff0c\u5177\u9ad4\u5305\u62ec\uff1a</p> <ul> <li><code>list_dataset_ids</code>\uff1a\u64f7\u53d6\u6307\u5b9a Google Cloud \u5c08\u6848\u4e2d\u73fe\u6709\u7684 BigQuery \u8cc7\u6599\u96c6 ID\u3002</li> <li><code>get_dataset_info</code>\uff1a\u64f7\u53d6 BigQuery \u8cc7\u6599\u96c6\u7684\u4e2d\u7e7c\u8cc7\u6599\u3002</li> <li><code>list_table_ids</code>\uff1a\u64f7\u53d6\u6307\u5b9a BigQuery \u8cc7\u6599\u96c6\u4e2d\u7684\u8cc7\u6599\u8868 ID\u3002</li> <li><code>get_table_info</code>\uff1a\u64f7\u53d6 BigQuery \u8cc7\u6599\u8868\u7684\u4e2d\u7e7c\u8cc7\u6599\u3002</li> <li><code>execute_sql</code>\uff1a\u5728 BigQuery \u4e2d\u57f7\u884c SQL \u67e5\u8a62\u4e26\u53d6\u5f97\u7d50\u679c\u3002</li> <li><code>ask_data_insights</code>\uff1a\u4f7f\u7528\u81ea\u7136\u8a9e\u8a00\u56de\u7b54\u6709\u95dc BigQuery \u8cc7\u6599\u8868\u4e2d\u8cc7\u6599\u7684\u554f\u984c\u3002</li> </ul> <p>\u9019\u4e9b\u5de5\u5177\u88ab\u6253\u5305\u65bc\u5de5\u5177\u7d44 <code>BigQueryToolset</code> \u4e2d\u3002</p> <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport asyncio\n\nfrom google.adk.agents import Agent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools.bigquery import BigQueryCredentialsConfig\nfrom google.adk.tools.bigquery import BigQueryToolset\nfrom google.adk.tools.bigquery.config import BigQueryToolConfig\nfrom google.adk.tools.bigquery.config import WriteMode\nfrom google.genai import types\nimport google.auth\n\n# Define constants for this example agent\nAGENT_NAME = \"bigquery_agent\"\nAPP_NAME = \"bigquery_app\"\nUSER_ID = \"user1234\"\nSESSION_ID = \"1234\"\nGEMINI_MODEL = \"gemini-2.0-flash\"\n\n# Define a tool configuration to block any write operations\ntool_config = BigQueryToolConfig(write_mode=WriteMode.BLOCKED)\n\n# Define a credentials config - in this example we are using application default\n# credentials\n# https://cloud.google.com/docs/authentication/provide-credentials-adc\napplication_default_credentials, _ = google.auth.default()\ncredentials_config = BigQueryCredentialsConfig(\n    credentials=application_default_credentials\n)\n\n# Instantiate a BigQuery toolset\nbigquery_toolset = BigQueryToolset(\n    credentials_config=credentials_config, bigquery_tool_config=tool_config\n)\n\n# Agent Definition\nbigquery_agent = Agent(\n    model=GEMINI_MODEL,\n    name=AGENT_NAME,\n    description=(\n        \"Agent to answer questions about BigQuery data and models and execute\"\n        \" SQL queries.\"\n    ),\n    instruction=\"\"\"\\\n        You are a data science agent with access to several BigQuery tools.\n        Make use of those tools to answer the user's questions.\n    \"\"\",\n    tools=[bigquery_toolset],\n)\n\n# Session and Runner\nsession_service = InMemorySessionService()\nsession = asyncio.run(\n    session_service.create_session(\n        app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID\n    )\n)\nrunner = Runner(\n    agent=bigquery_agent, app_name=APP_NAME, session_service=session_service\n)\n\n\n# Agent Interaction\ndef call_agent(query):\n    \"\"\"\n    Helper function to call the agent with a query.\n    \"\"\"\n    content = types.Content(role=\"user\", parts=[types.Part(text=query)])\n    events = runner.run(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    print(\"USER:\", query)\n    for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"AGENT:\", final_response)\n\n\ncall_agent(\"Are there any ml datasets in bigquery-public-data project?\")\ncall_agent(\"Tell me more about ml_datasets.\")\ncall_agent(\"Which all tables does it have?\")\ncall_agent(\"Tell me more about the census_adult_income table.\")\ncall_agent(\"How many rows are there per income bracket?\")\ncall_agent(\n    \"What is the statistical correlation between education_num, age, and the income_bracket?\"\n)\n</code></pre>"},{"location":"tools/built-in-tools/#_6","title":"\u7d50\u5408\u5167\u5efa\u5de5\u5177\u8207\u5176\u4ed6\u5de5\u5177\u4f7f\u7528","text":"<p>\u4ee5\u4e0b\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u5c55\u793a\u5982\u4f55\u900f\u904e\u591a\u500b agent\uff0c\u7d50\u5408\u591a\u500b\u5167\u5efa\u5de5\u5177\uff0c\u6216\u5c07\u5167\u5efa\u5de5\u5177\u8207\u5176\u4ed6\u5de5\u5177\u4e00\u8d77\u4f7f\u7528\uff1a</p> PythonJava <pre><code>from google.adk.tools.agent_tool import AgentTool\nfrom google.adk.agents import Agent\nfrom google.adk.tools import google_search\nfrom google.adk.code_executors import BuiltInCodeExecutor\n\n\nsearch_agent = Agent(\n    model='gemini-2.0-flash',\n    name='SearchAgent',\n    instruction=\"\"\"\n    You're a specialist in Google Search\n    \"\"\",\n    tools=[google_search],\n)\ncoding_agent = Agent(\n    model='gemini-2.0-flash',\n    name='CodeAgent',\n    instruction=\"\"\"\n    You're a specialist in Code Execution\n    \"\"\",\n    code_executor=BuiltInCodeExecutor(),\n)\nroot_agent = Agent(\n    name=\"RootAgent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Root Agent\",\n    tools=[AgentTool(agent=search_agent), AgentTool(agent=coding_agent)],\n)\n</code></pre> <pre><code>import com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.tools.AgentTool;\nimport com.google.adk.tools.BuiltInCodeExecutionTool;\nimport com.google.adk.tools.GoogleSearchTool;\nimport com.google.common.collect.ImmutableList;\n\npublic class NestedAgentApp {\n\n  private static final String MODEL_ID = \"gemini-2.0-flash\";\n\n  public static void main(String[] args) {\n\n    // Define the SearchAgent\n    LlmAgent searchAgent =\n        LlmAgent.builder()\n            .model(MODEL_ID)\n            .name(\"SearchAgent\")\n            .instruction(\"You're a specialist in Google Search\")\n            .tools(new GoogleSearchTool()) // Instantiate GoogleSearchTool\n            .build();\n\n\n    // Define the CodingAgent\n    LlmAgent codingAgent =\n        LlmAgent.builder()\n            .model(MODEL_ID)\n            .name(\"CodeAgent\")\n            .instruction(\"You're a specialist in Code Execution\")\n            .tools(new BuiltInCodeExecutionTool()) // Instantiate BuiltInCodeExecutionTool\n            .build();\n\n    // Define the RootAgent, which uses AgentTool.create() to wrap SearchAgent and CodingAgent\n    BaseAgent rootAgent =\n        LlmAgent.builder()\n            .name(\"RootAgent\")\n            .model(MODEL_ID)\n            .description(\"Root Agent\")\n            .tools(\n                AgentTool.create(searchAgent), // Use create method\n                AgentTool.create(codingAgent)   // Use create method\n             )\n            .build();\n\n    // Note: This sample only demonstrates the agent definitions.\n    // To run these agents, you'd need to integrate them with a Runner and SessionService,\n    // similar to the previous examples.\n    System.out.println(\"Agents defined successfully:\");\n    System.out.println(\"  Root Agent: \" + rootAgent.name());\n    System.out.println(\"  Search Agent (nested): \" + searchAgent.name());\n    System.out.println(\"  Code Agent (nested): \" + codingAgent.name());\n  }\n}\n</code></pre>"},{"location":"tools/built-in-tools/#_7","title":"\u9650\u5236\u4e8b\u9805","text":"<p>Warning</p> <p>\u76ee\u524d\uff0c\u5c0d\u65bc\u6bcf\u500b root agent \u6216\u55ae\u4e00 agent\uff0c\u53ea\u652f\u63f4\u4e00\u500b\u5167\u5efa\u5de5\u5177\uff08built-in tool\uff09\u3002\u5728\u540c\u4e00\u500b agent \u4e2d\uff0c\u4e0d\u80fd\u540c\u6642\u4f7f\u7528\u5176\u4ed6\u4efb\u4f55\u985e\u578b\u7684\u5de5\u5177\u3002</p> <p>\u4f8b\u5982\uff0c\u4e0b\u5217\u5728\u55ae\u4e00 agent \u4e2d\u540c\u6642\u4f7f\u7528\u5167\u5efa\u5de5\u5177\u8207\u5176\u4ed6\u5de5\u5177\u7684\u505a\u6cd5\uff0c\u76ee\u524d\u5c1a\u672a\u652f\u63f4\uff1a</p> PythonJava <pre><code>root_agent = Agent(\n    name=\"RootAgent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Root Agent\",\n    tools=[custom_function], \n    code_executor=BuiltInCodeExecutor() # &lt;-- not supported when used with tools\n)\n</code></pre> <pre><code> LlmAgent searchAgent =\n        LlmAgent.builder()\n            .model(MODEL_ID)\n            .name(\"SearchAgent\")\n            .instruction(\"You're a specialist in Google Search\")\n            .tools(new GoogleSearchTool(), new YourCustomTool()) // &lt;-- not supported\n            .build();\n</code></pre> <p>Warning</p> <p>\u5167\u5efa\u5de5\u5177\uff08built-in tools\uff09\u7121\u6cd5\u5728\u5b50 agent\uff08sub-agent\uff09\u4e2d\u4f7f\u7528\u3002</p> <p>\u4f8b\u5982\uff0c\u4ee5\u4e0b\u5728\u5b50 agent \u4e2d\u4f7f\u7528\u5167\u5efa\u5de5\u5177\u7684\u505a\u6cd5\uff0c\u76ee\u524d\u5c1a\u672a\u652f\u63f4\uff1a</p> PythonJava <pre><code>search_agent = Agent(\n    model='gemini-2.0-flash',\n    name='SearchAgent',\n    instruction=\"\"\"\n    You're a specialist in Google Search\n    \"\"\",\n    tools=[google_search],\n)\ncoding_agent = Agent(\n    model='gemini-2.0-flash',\n    name='CodeAgent',\n    instruction=\"\"\"\n    You're a specialist in Code Execution\n    \"\"\",\n    code_executor=BuiltInCodeExecutor(),\n)\nroot_agent = Agent(\n    name=\"RootAgent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Root Agent\",\n    sub_agents=[\n        search_agent,\n        coding_agent\n    ],\n)\n</code></pre> <pre><code>LlmAgent searchAgent =\n    LlmAgent.builder()\n        .model(\"gemini-2.0-flash\")\n        .name(\"SearchAgent\")\n        .instruction(\"You're a specialist in Google Search\")\n        .tools(new GoogleSearchTool())\n        .build();\n\nLlmAgent codingAgent =\n    LlmAgent.builder()\n        .model(\"gemini-2.0-flash\")\n        .name(\"CodeAgent\")\n        .instruction(\"You're a specialist in Code Execution\")\n        .tools(new BuiltInCodeExecutionTool())\n        .build();\n\n\nLlmAgent rootAgent =\n    LlmAgent.builder()\n        .name(\"RootAgent\")\n        .model(\"gemini-2.0-flash\")\n        .description(\"Root Agent\")\n        .subAgents(searchAgent, codingAgent) // Not supported, as the sub agents use built in tools.\n        .build();\n</code></pre>"},{"location":"tools/confirmation.en/","title":"Get action confirmation for ADK Tools","text":"<p>Some agent workflows require confirmation for decision making, verification, security, or general oversight. In these cases, you want to get a response from a human or supervising system before proceeding with a workflow. The Tool Confirmation feature in the Agent Development Kit (ADK) allows an ADK Tool to pause its execution and interact with a user or other system for confirmation or to gather structured data before proceeding. You can use Tool Confirmation with an ADK Tool in the following ways:</p> <ul> <li>Boolean Confirmation: You can     configure a FunctionTool with a <code>require_confirmation</code> parameter. This     option pauses the tool for a yes or no confirmation response.</li> <li>Advanced Confirmation: For scenarios requiring     structured data responses, you can configure a <code>FunctionTool</code> with a text     prompt to explain the confirmation and an expected response.</li> </ul> <p>Experimental</p> <p>The Tool Confirmation feature is experimental and has some known limitations. We welcome your feedback!</p> <p>You can configure how a request is communicated to a user, and the system can also use remote responses sent via the ADK server's REST API. When using the confirmation feature with the ADK web user interface, the agent workflow displays a dialog box to the user to request input, as shown in Figure 1:</p> <p></p> <p>Figure 1. Example confirmation response request dialog box using an advanced, tool response implementation.</p> <p>The following sections describe how to use this feature for the confirmation scenarios. For a complete code sample, see the human_tool_confirmation example. There are additional ways to incorporate human input into your agent workflow, for more details, see the Human-in-the-loop agent pattern.</p>"},{"location":"tools/confirmation.en/#boolean-confirmation","title":"Boolean confirmation","text":"<p>When your tool only requires a simple <code>yes</code> or <code>no</code> from the user, you can append a confirmation step using the <code>FunctionTool</code> class as a wrapper. For example, if you have a tool called <code>reimburse</code>, you can enable a confirmation step by wrapping it with the <code>FunctionTool</code> class and setting the <code>require_confirmation</code> parameter to <code>True</code>, as shown in the following example:</p> <pre><code># From agent.py\nroot_agent = Agent(\n   ...\n   tools=[\n        # Set require_confirmation to True to require user confirmation\n        # for the tool call.\n        FunctionTool(reimburse, require_confirmation=True),\n    ],\n...\n</code></pre> <p>This implementation method requires minimal code, but is limited to simple approvals from the user or confirming system. For a complete example of this approach, see the human_tool_confirmation code sample.</p>"},{"location":"tools/confirmation.en/#require-confirmation-function","title":"Require confirmation function","text":"<p>You can modify the behavior <code>require_confirmation</code> response by replacing its input value with a function that returns a boolean response. The following example shows a function for determining if a confirmation is required:</p> <pre><code>async def confirmation_threshold(\n    amount: int, tool_context: ToolContext\n) -&gt; bool:\n  \"\"\"Returns true if the amount is greater than 1000.\"\"\"\n  return amount &gt; 1000\n</code></pre> <p>This function than then be set as the parameter value for the <code>require_confirmation</code> parameter:</p> <pre><code>root_agent = Agent(\n   ...\n   tools=[\n        # Set require_confirmation to True to require user confirmation\n        FunctionTool(reimburse, require_confirmation=confirmation_threshold),\n    ],\n...\n</code></pre> <p>For a complete example of this implementation, see the human_tool_confirmation code sample.</p>"},{"location":"tools/confirmation.en/#advanced-confirmation","title":"Advanced confirmation","text":"<p>When a tool confirmation requires more details for the user or a more complex response, use a tool_confirmation implementation. This approach extends the <code>ToolContext</code> object to add a text description of the request for the user and allows for more complex response data. When implementing tool confirmation this way, you can pause a tool's execution, request specific information, and then resume the tool with the provided data.</p> <p>This confirmation flow has a request stage where the system assembles and sends an input request human response, and a response stage where the system receives and processes the returned data.</p>"},{"location":"tools/confirmation.en/#confirmation-definition","title":"Confirmation definition","text":"<p>When creating a Tool with an advanced confirmation, create a function that includes a ToolContext object. Then define the confirmation using a tool_confirmation object, the <code>tool_context.request_confirmation()</code> method with <code>hint</code> and <code>payload</code> parameters. These properties are used as follows:</p> <ul> <li><code>hint</code>: Descriptive message that explains what is needed from the user.</li> <li><code>payload</code>: The structure of the data you expect in return. This data     type is Any and must be serializable into a JSON-formatted string, such as     a dictionary or pydantic model.</li> </ul> <p>The following code shows an example implementation for a tool that processes time off requests for an employee:</p> <pre><code>def request_time_off(days: int, tool_context: ToolContext):\n  \"\"\"Request day off for the employee.\"\"\"\n  ...\n  tool_confirmation = tool_context.tool_confirmation\n  if not tool_confirmation:\n    tool_context.request_confirmation(\n        hint=(\n            'Please approve or reject the tool call request_time_off() by'\n            ' responding with a FunctionResponse with an expected'\n            ' ToolConfirmation payload.'\n        ),\n        payload={\n            'approved_days': 0,\n        },\n    )\n    # Return intermediate status indicating that the tool is waiting for\n    # a confirmation response:\n    return {'status': 'Manager approval is required.'}\n\n  approved_days = tool_confirmation.payload['approved_days']\n  approved_days = min(approved_days, days)\n  if approved_days == 0:\n    return {'status': 'The time off request is rejected.', 'approved_days': 0}\n  return {\n      'status': 'ok',\n      'approved_days': approved_days,\n  }\n</code></pre> <p>For a complete example of this approach, see the human_tool_confirmation code sample. Keep in mind that the agent workflow tool execution pauses while a confirmation is obtained. After confirmation is received, you can access the confirmation response in the <code>tool_confirmation.payload</code> object and then proceed with the execution of the workflow.</p>"},{"location":"tools/confirmation.en/#remote-response","title":"Remote confirmation with REST API","text":"<p>If there is no active user interface for a human confirmation of an agent workflow, you can handle the confirmation through a command-line interface or by routing it through another channel like email or a chat application. To confirm the tool call, the user or calling application needs to send a <code>FunctionResponse</code> event with the tool confirmation data.</p> <p>You can send the request to the ADK API server's <code>/run</code> or <code>/run_sse</code> endpoint, or directly to the ADK runner. The following example uses a  <code>curl</code> command to send the confirmation to the  <code>/run_sse</code> endpoint:</p> <pre><code> curl -X POST http://localhost:8000/run_sse \\\n -H \"Content-Type: application/json\" \\\n -d '{\n    \"app_name\": \"human_tool_confirmation\",\n    \"user_id\": \"user\",\n    \"session_id\": \"7828f575-2402-489f-8079-74ea95b6a300\",\n    \"new_message\": {\n        \"parts\": [\n            {\n                \"function_response\": {\n                    \"id\": \"adk-13b84a8c-c95c-4d66-b006-d72b30447e35\",\n                    \"name\": \"adk_request_confirmation\",\n                    \"response\": {\n                        \"confirmed\": true\n                    }\n                }\n            }\n        ],\n        \"role\": \"user\"\n    }\n}'\n</code></pre> <p>A REST-based response for a confirmation must meet the following requirements:</p> <ul> <li>The <code>id</code> in the <code>function_response</code> should match the <code>function_call_id</code>     from the <code>RequestConfirmation</code> <code>FunctionCall</code> event.</li> <li>The <code>name</code> should be <code>adk_request_confirmation</code>.</li> <li>The <code>response</code> object contains the confirmation status and any     additional payload data required by the tool.</li> </ul>"},{"location":"tools/confirmation.en/#known-limitations","title":"Known limitations","text":"<p>The tool confirmation feature has the following limitations:</p> <ul> <li>DatabaseSessionService     is not supported by this feature.</li> <li>VertexAiSessionService     is not supported by this feature.</li> </ul>"},{"location":"tools/confirmation.en/#next-steps","title":"Next steps","text":"<p>For more information on building ADK tools for agent workflows, see Function tools.</p>"},{"location":"tools/confirmation/","title":"\u53d6\u5f97 ADK \u5de5\u5177\u7684\u64cd\u4f5c\u78ba\u8a8d","text":"<p>\u67d0\u4e9b agent \u5de5\u4f5c\u6d41\u7a0b\u9700\u8981\u9032\u884c\u6c7a\u7b56\u3001\u9a57\u8b49\u3001\u5b89\u5168\u6027\u6216\u4e00\u822c\u76e3\u7763\u6642\u7684\u78ba\u8a8d\u3002\u5728\u9019\u4e9b\u60c5\u5883\u4e0b\uff0c\u4f60\u6703\u5e0c\u671b\u5728\u7e7c\u7e8c\u57f7\u884c\u5de5\u4f5c\u6d41\u7a0b\u4e4b\u524d\uff0c\u5148\u5f9e\u4eba\u985e\u6216\u76e3\u7763\u7cfb\u7d71\u53d6\u5f97\u56de\u61c9\u3002Agent Development Kit (ADK) \u7684 \u5de5\u5177\u78ba\u8a8d\uff08Tool Confirmation\uff09\u529f\u80fd\uff0c\u5141\u8a31 ADK \u5de5\u5177\u5728\u57f7\u884c\u6642\u66ab\u505c\uff0c\u4e26\u8207\u4f7f\u7528\u8005\u6216\u5176\u4ed6\u7cfb\u7d71\u4e92\u52d5\uff0c\u4ee5\u53d6\u5f97\u78ba\u8a8d\u6216\u5728\u7e7c\u7e8c\u524d\u6536\u96c6\u7d50\u69cb\u5316\u8cc7\u6599\u3002\u4f60\u53ef\u4ee5\u900f\u904e\u4ee5\u4e0b\u65b9\u5f0f\uff0c\u5c07\u5de5\u5177\u78ba\u8a8d\u529f\u80fd\u61c9\u7528\u65bc ADK \u5de5\u5177\uff1a</p> <ul> <li>\u5e03\u6797\u503c\u78ba\u8a8d\uff1a \u4f60\u53ef\u4ee5\u5728 FunctionTool \u4e2d\u8a2d\u5b9a <code>require_confirmation</code> \u53c3\u6578\u3002\u9019\u500b\u9078\u9805\u6703\u8b93\u5de5\u5177\u66ab\u505c\uff0c\u7b49\u5f85\u4f7f\u7528\u8005\u56de\u8986\u300c\u662f\u300d\u6216\u300c\u5426\u300d\u7684\u78ba\u8a8d\u3002</li> <li>\u9032\u968e\u78ba\u8a8d\uff1a \u82e5\u60c5\u5883\u9700\u8981\u56de\u50b3\u7d50\u69cb\u5316\u8cc7\u6599\uff0c\u4f60\u53ef\u4ee5\u8a2d\u5b9a <code>FunctionTool</code>\uff0c\u4e26\u63d0\u4f9b\u6587\u5b57\u63d0\u793a\u4f86\u8aaa\u660e\u78ba\u8a8d\u5167\u5bb9\u53ca\u9810\u671f\u56de\u61c9\u3002</li> </ul> <p>Experimental</p> <p>\u5de5\u5177\u78ba\u8a8d\uff08Tool Confirmation\uff09\u529f\u80fd\u70ba\u5be6\u9a57\u6027\u529f\u80fd\uff0c\u76ee\u524d\u6709\u4e00\u4e9b \u5df2\u77e5\u9650\u5236\u3002 \u6b61\u8fce\u63d0\u4f9b\u60a8\u7684 \u56de\u994b\u610f\u898b\uff01</p> <p>\u60a8\u53ef\u4ee5\u8a2d\u5b9a\u5982\u4f55\u5c07\u8acb\u6c42\u50b3\u9054\u7d66\u4f7f\u7528\u8005\uff0c\u7cfb\u7d71\u4e5f\u53ef\u4ee5\u900f\u904e Agent Development Kit (ADK) \u4f3a\u670d\u5668\u7684 REST API \u4f7f\u7528\u9060\u7aef\u56de\u61c9\u3002\u7576\u60a8\u5728 ADK \u7db2\u9801 UI \u642d\u914d\u78ba\u8a8d\u529f\u80fd\u6642\uff0cagent \u5de5\u4f5c\u6d41\u7a0b\u6703\u986f\u793a\u4e00\u500b\u5c0d\u8a71\u6846\uff0c\u5411\u4f7f\u7528\u8005\u8acb\u6c42\u8f38\u5165\uff0c\u5982\u4e0b\u5716\u6240\u793a\uff1a</p> <p></p> <p>\u5716 1. \u4f7f\u7528\u9032\u968e\u5de5\u5177\u56de\u61c9\u5be6\u4f5c\u7684\u7bc4\u4f8b\u78ba\u8a8d\u56de\u61c9\u8acb\u6c42\u5c0d\u8a71\u6846\u3002</p> <p>\u4ee5\u4e0b\u7ae0\u7bc0\u5c07\u8aaa\u660e\u5982\u4f55\u5728\u4e0d\u540c\u78ba\u8a8d\u60c5\u5883\u4e0b\u4f7f\u7528\u6b64\u529f\u80fd\u3002\u5b8c\u6574\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u8acb\u53c3\u8003 human_tool_confirmation \u7bc4\u4f8b\u3002\u82e5\u9700\u5c07\u4eba\u5de5\u8f38\u5165\u7d0d\u5165 agent \u5de5\u4f5c\u6d41\u7a0b\u7684\u5176\u4ed6\u65b9\u5f0f\uff0c\u8acb\u53c3\u95b1 Human-in-the-loop agent \u6a21\u5f0f\u3002</p>"},{"location":"tools/confirmation/#boolean-confirmation","title":"\u5e03\u6797\u503c\u78ba\u8a8d","text":"<p>\u7576\u60a8\u7684\u5de5\u5177\u50c5\u9700\u4f7f\u7528\u8005\u7c21\u55ae\u5730\u56de\u8986 <code>yes</code> \u6216 <code>no</code> \u6642\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>FunctionTool</code> \u985e\u5225\u4f5c\u70ba\u5305\u88dd\u5668\uff0c\u70ba\u5de5\u5177\u65b0\u589e\u78ba\u8a8d\u6b65\u9a5f\u3002\u4f8b\u5982\uff0c\u82e5\u60a8\u6709\u4e00\u500b\u540d\u70ba <code>reimburse</code> \u7684\u5de5\u5177\uff0c\u53ef\u4ee5\u900f\u904e\u5c07\u5176\u5305\u88dd\u5728 <code>FunctionTool</code> \u985e\u5225\u4e2d\uff0c\u4e26\u5c07 <code>require_confirmation</code> \u53c3\u6578\u8a2d\u70ba <code>True</code> \u4f86\u555f\u7528\u78ba\u8a8d\u6b65\u9a5f\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a</p> <pre><code># From agent.py\nroot_agent = Agent(\n   ...\n   tools=[\n        # Set require_confirmation to True to require user confirmation\n        # for the tool call.\n        FunctionTool(reimburse, require_confirmation=True),\n    ],\n...\n</code></pre> <p>\u9019\u7a2e\u5be6\u4f5c\u65b9\u6cd5\u6240\u9700\u7684\u7a0b\u5f0f\u78bc\u6700\u5c11\uff0c\u4f46\u50c5\u9650\u65bc\u7528\u6236\u6216\u78ba\u8a8d\u7cfb\u7d71\u9032\u884c\u7c21\u55ae\u7684\u6838\u51c6\u3002\u82e5\u9700\u6b64\u65b9\u6cd5\u7684\u5b8c\u6574\u7bc4\u4f8b\uff0c\u8acb\u53c3\u8003 human_tool_confirmation \u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u3002</p>"},{"location":"tools/confirmation/#require_confirmation","title":"require_confirmation \u51fd\u5f0f","text":"<p>\u4f60\u53ef\u4ee5\u900f\u904e\u5c07 <code>require_confirmation</code> \u7684\u8f38\u5165\u503c\u66ff\u63db\u70ba\u4e00\u500b\u56de\u50b3\u5e03\u6797\u503c\u7684\u51fd\u5f0f\uff0c\u4f86\u4fee\u6539\u5176\u884c\u70ba\u3002\u4ee5\u4e0b\u7bc4\u4f8b\u5c55\u793a\u4e86\u4e00\u500b\u7528\u65bc\u5224\u65b7\u662f\u5426\u9700\u8981\u78ba\u8a8d\u7684\u51fd\u5f0f\uff1a</p> <pre><code>async def confirmation_threshold(\n    amount: int, tool_context: ToolContext\n) -&gt; bool:\n  \"\"\"Returns true if the amount is greater than 1000.\"\"\"\n  return amount &gt; 1000\n</code></pre> <p>\u6b64\u51fd\u5f0f\u63a5\u8457\u53ef\u4ee5\u8a2d\u70ba <code>require_confirmation</code> \u53c3\u6578\u7684\u503c\uff1a</p> <pre><code>root_agent = Agent(\n   ...\n   tools=[\n        # Set require_confirmation to True to require user confirmation\n        FunctionTool(reimburse, require_confirmation=confirmation_threshold),\n    ],\n...\n</code></pre> <p>\u5982\u9700\u6b64\u5be6\u4f5c\u7684\u5b8c\u6574\u7bc4\u4f8b\uff0c\u8acb\u53c3\u95b1 human_tool_confirmation \u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u3002</p>"},{"location":"tools/confirmation/#advanced-confirmation","title":"\u9032\u968e\u78ba\u8a8d","text":"<p>\u7576\u5de5\u5177\u78ba\u8a8d\uff08tool confirmation\uff09\u9700\u8981\u5411\u4f7f\u7528\u8005\u63d0\u4f9b\u66f4\u591a\u7d30\u7bc0\u6216\u66f4\u8907\u96dc\u7684\u56de\u61c9\u6642\uff0c\u8acb\u4f7f\u7528 tool_confirmation \u5be6\u4f5c\u65b9\u5f0f\u3002\u9019\u7a2e\u505a\u6cd5\u6703\u64f4\u5145<code>ToolContext</code> \u7269\u4ef6\uff0c\u70ba\u4f7f\u7528\u8005\u65b0\u589e\u8acb\u6c42\u7684\u6587\u5b57\u63cf\u8ff0\uff0c\u4e26\u5141\u8a31\u66f4\u8907\u96dc\u7684\u56de\u61c9\u8cc7\u6599\u3002\u5728\u9019\u7a2e\u5be6\u4f5c\u65b9\u5f0f\u4e0b\uff0c\u4f60\u53ef\u4ee5\u66ab\u505c\u5de5\u5177\u7684\u57f7\u884c\u3001\u8acb\u6c42\u7279\u5b9a\u8cc7\u8a0a\uff0c\u7136\u5f8c\u5728\u53d6\u5f97\u8cc7\u6599\u5f8c\u7e7c\u7e8c\u57f7\u884c\u5de5\u5177\u3002</p> <p>\u9019\u500b\u78ba\u8a8d\u6d41\u7a0b\u5305\u542b\u4e00\u500b\u8acb\u6c42\u968e\u6bb5\uff0c\u7cfb\u7d71\u6703\u7d44\u5408\u4e26\u50b3\u9001\u8f38\u5165\u8acb\u6c42\u7d66\u4eba\u985e\u56de\u61c9\uff0c\u4ee5\u53ca\u4e00\u500b\u56de\u61c9\u968e\u6bb5\uff0c\u7cfb\u7d71\u6703\u63a5\u6536\u4e26\u8655\u7406\u56de\u50b3\u7684\u8cc7\u6599\u3002</p>"},{"location":"tools/confirmation/#_1","title":"\u78ba\u8a8d\u5b9a\u7fa9","text":"<p>\u7576\u4f60\u8981\u5efa\u7acb\u5177\u6709\u9032\u968e\u78ba\u8a8d\u529f\u80fd\u7684\u5de5\u5177\u6642\uff0c\u8acb\u5efa\u7acb\u4e00\u500b\u5305\u542b ToolContext \u7269\u4ef6\u7684\u51fd\u5f0f\u3002\u7136\u5f8c\uff0c\u4f7f\u7528 tool_confirmation \u7269\u4ef6\uff0c\u642d\u914d<code>tool_context.request_confirmation()</code> \u65b9\u6cd5\u8207<code>hint</code> \u548c<code>payload</code> \u53c3\u6578\u4f86\u5b9a\u7fa9\u78ba\u8a8d\u3002\u9019\u4e9b\u5c6c\u6027\u7684\u7528\u9014\u5982\u4e0b\uff1a</p> <ul> <li><code>hint</code>\uff1a\u63cf\u8ff0\u6027\u8a0a\u606f\uff0c\u8aaa\u660e\u9700\u8981\u4f7f\u7528\u8005\u63d0\u4f9b\u4ec0\u9ebc\u8cc7\u8a0a\u3002</li> <li><code>payload</code>\uff1a\u4f60\u9810\u671f\u56de\u50b3\u7684\u8cc7\u6599\u7d50\u69cb\u3002\u6b64\u8cc7\u6599\u578b\u5225\u70ba Any\uff0c\u4e14\u5fc5\u9808\u53ef\u5e8f\u5217\u5316\u70ba JSON \u683c\u5f0f\u5b57\u4e32\uff0c\u4f8b\u5982 dictionary \u6216 pydantic model\u3002</li> </ul> <p>\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u5c55\u793a\u4e86\u4e00\u500b\u8655\u7406\u54e1\u5de5\u8acb\u5047\u7533\u8acb\u7684\u5de5\u5177\u4e4b\u5be6\u4f5c\u7bc4\u4f8b\uff1a</p> <pre><code>def request_time_off(days: int, tool_context: ToolContext):\n  \"\"\"Request day off for the employee.\"\"\"\n  ...\n  tool_confirmation = tool_context.tool_confirmation\n  if not tool_confirmation:\n    tool_context.request_confirmation(\n        hint=(\n            'Please approve or reject the tool call request_time_off() by'\n            ' responding with a FunctionResponse with an expected'\n            ' ToolConfirmation payload.'\n        ),\n        payload={\n            'approved_days': 0,\n        },\n    )\n    # Return intermediate status indicating that the tool is waiting for\n    # a confirmation response:\n    return {'status': 'Manager approval is required.'}\n\n  approved_days = tool_confirmation.payload['approved_days']\n  approved_days = min(approved_days, days)\n  if approved_days == 0:\n    return {'status': 'The time off request is rejected.', 'approved_days': 0}\n  return {\n      'status': 'ok',\n      'approved_days': approved_days,\n  }\n</code></pre> <p>\u5b8c\u6574\u7bc4\u4f8b\u8acb\u53c3\u8003 human_tool_confirmation \u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u3002\u8acb\u6ce8\u610f\uff0c\u7576 agent \u5de5\u4f5c\u6d41\u7a0b\u7684\u5de5\u5177\u57f7\u884c\u7b49\u5f85\u78ba\u8a8d\u6642\uff0c\u57f7\u884c\u6d41\u7a0b\u6703\u66ab\u505c\u3002\u6536\u5230\u78ba\u8a8d\u5f8c\uff0c\u4f60\u53ef\u4ee5\u5728 <code>tool_confirmation.payload</code> \u7269\u4ef6\u4e2d\u5b58\u53d6\u78ba\u8a8d\u56de\u61c9\uff0c\u7136\u5f8c\u7e7c\u7e8c\u57f7\u884c\u5de5\u4f5c\u6d41\u7a0b\u3002</p>"},{"location":"tools/confirmation/#remote-response","title":"\u900f\u904e REST API \u9032\u884c\u9060\u7aef\u78ba\u8a8d","text":"<p>\u5982\u679c\u6c92\u6709\u53ef\u7528\u7684\u4f7f\u7528\u8005\u4ecb\u9762\uff08UI\uff09\u4f86\u8b93\u4eba\u54e1\u78ba\u8a8d agent \u5de5\u4f5c\u6d41\u7a0b\uff0c\u4f60\u53ef\u4ee5\u900f\u904e\u547d\u4ee4\u5217\u4ecb\u9762\uff08Command Line Interface\uff09\u8655\u7406\u78ba\u8a8d\uff0c\u6216\u5c07\u5176\u5c0e\u5411\u5176\u4ed6\u7ba1\u9053\uff0c\u4f8b\u5982\u96fb\u5b50\u90f5\u4ef6\u6216\u804a\u5929\u61c9\u7528\u7a0b\u5f0f\u3002\u70ba\u4e86\u78ba\u8a8d\u5de5\u5177\u547c\u53eb\uff0c\u4f7f\u7528\u8005\u6216\u547c\u53eb\u61c9\u7528\u7a0b\u5f0f\u9700\u8981\u50b3\u9001 <code>FunctionResponse</code> \u4e8b\u4ef6\uff0c\u4e26\u9644\u4e0a\u5de5\u5177\u78ba\u8a8d\u8cc7\u6599\u3002</p> <p>\u4f60\u53ef\u4ee5\u5c07\u8acb\u6c42\u767c\u9001\u5230 Agent Development Kit (ADK) API \u4f3a\u670d\u5668\u7684 <code>/run</code> \u6216 <code>/run_sse</code> API \u7aef\u9ede\uff0c\u6216\u76f4\u63a5\u767c\u9001\u7d66 ADK runner\u3002\u4ee5\u4e0b\u7bc4\u4f8b\u4f7f\u7528 <code>curl</code> \u6307\u4ee4\uff0c\u5c07\u78ba\u8a8d\u8cc7\u8a0a\u50b3\u9001\u5230 <code>/run_sse</code> API \u7aef\u9ede\uff1a</p> <pre><code> curl -X POST http://localhost:8000/run_sse \\\n -H \"Content-Type: application/json\" \\\n -d '{\n    \"app_name\": \"human_tool_confirmation\",\n    \"user_id\": \"user\",\n    \"session_id\": \"7828f575-2402-489f-8079-74ea95b6a300\",\n    \"new_message\": {\n        \"parts\": [\n            {\n                \"function_response\": {\n                    \"id\": \"adk-13b84a8c-c95c-4d66-b006-d72b30447e35\",\n                    \"name\": \"adk_request_confirmation\",\n                    \"response\": {\n                        \"confirmed\": true\n                    }\n                }\n            }\n        ],\n        \"role\": \"user\"\n    }\n}'\n</code></pre> <p>REST \u578b\u78ba\u8a8d\uff08confirmation\uff09\u56de\u61c9\u5fc5\u9808\u7b26\u5408\u4ee5\u4e0b\u8981\u6c42\uff1a</p> <ul> <li><code>id</code> \u5728 <code>function_response</code> \u4e2d\u61c9\u8207 <code>RequestConfirmation</code> <code>FunctionCall</code> \u4e8b\u4ef6\u4e2d\u7684 <code>function_call_id</code> \u76f8\u7b26\u3002</li> <li><code>name</code> \u61c9\u70ba <code>adk_request_confirmation</code>\u3002</li> <li><code>response</code> \u7269\u4ef6\u5305\u542b\u78ba\u8a8d\u72c0\u614b\u4ee5\u53ca\u5de5\u5177\u6240\u9700\u7684\u4efb\u4f55\u5176\u4ed6 payload \u8cc7\u6599\u3002</li> </ul>"},{"location":"tools/confirmation/#known-limitations","title":"\u5df2\u77e5\u9650\u5236","text":"<p>\u5de5\u5177\u78ba\u8a8d\u529f\u80fd\u6709\u4ee5\u4e0b\u9650\u5236\uff1a</p> <ul> <li>DatabaseSessionService     \u4e0d\u652f\u63f4\u6b64\u529f\u80fd\u3002</li> <li>VertexAiSessionService     \u4e0d\u652f\u63f4\u6b64\u529f\u80fd\u3002</li> </ul>"},{"location":"tools/confirmation/#_2","title":"\u4e0b\u4e00\u6b65","text":"<p>\u5982\u9700\u6709\u95dc\u70ba agent \u5de5\u4f5c\u6d41\u7a0b\u5efa\u69cb Agent Development Kit (ADK) \u5de5\u5177\u7684\u66f4\u591a\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 Function tools\u3002</p>"},{"location":"tools/function-tools.en/","title":"Function tools","text":"<p>When pre-built ADK tools don't meet your requirements, you can create custom function tools. Building function tools allows you to create tailored functionality, such as connecting to proprietary databases or implementing unique algorithms. For example, a function tool, <code>myfinancetool</code>, might be a function that calculates a specific financial metric. ADK also supports long running functions, so if that calculation takes a while, the agent can continue working on other tasks.</p> <p>ADK offers several ways to create functions tools, each suited to different levels of complexity and control:</p> <ul> <li>Function Tools</li> <li>Long Running Function Tools</li> <li>Agents-as-a-Tool</li> </ul>"},{"location":"tools/function-tools.en/#function-tool","title":"Function Tools","text":"<p>Transforming a Python function into a tool is a straightforward way to integrate custom logic into your agents. When you assign a function to an agent\u2019s <code>tools</code> list, the framework automatically wraps it as a <code>FunctionTool</code>.</p>"},{"location":"tools/function-tools.en/#how-it-works","title":"How it Works","text":"<p>The ADK framework automatically inspects your Python function's signature\u2014including its name, docstring, parameters, type hints, and default values\u2014to generate a schema. This schema is what the LLM uses to understand the tool's purpose, when to use it, and what arguments it requires.</p>"},{"location":"tools/function-tools.en/#defining-function-signatures","title":"Defining Function Signatures","text":"<p>A well-defined function signature is crucial for the LLM to use your tool correctly.</p>"},{"location":"tools/function-tools.en/#parameters","title":"Parameters","text":"<p>You can define functions with required parameters, optional parameters, and variadic arguments. Here\u2019s how each is handled:</p>"},{"location":"tools/function-tools.en/#required-parameters","title":"Required Parameters","text":"<p>A parameter is considered required if it has a type hint but no default value. The LLM must provide a value for this argument when it calls the tool.</p> Example: Required Parameters Python <pre><code>def get_weather(city: str, unit: str):\n    \"\"\"\n    Retrieves the weather for a city in the specified unit.\n\n    Args:\n        city (str): The city name.\n        unit (str): The temperature unit, either 'Celsius' or 'Fahrenheit'.\n    \"\"\"\n    # ... function logic ...\n    return {\"status\": \"success\", \"report\": f\"Weather for {city} is sunny.\"}\n</code></pre> <p>In this example, both <code>city</code> and <code>unit</code> are mandatory. If the LLM tries to call <code>get_weather</code> without one of them, the ADK will return an error to the LLM, prompting it to correct the call.</p>"},{"location":"tools/function-tools.en/#optional-parameters-with-default-values","title":"Optional Parameters with Default Values","text":"<p>A parameter is considered optional if you provide a default value. This is the standard Python way to define optional arguments. The ADK correctly interprets these and does not list them in the <code>required</code> field of the tool schema sent to the LLM.</p> Example: Optional Parameter with Default Value Python <pre><code>def search_flights(destination: str, departure_date: str, flexible_days: int = 0):\n    \"\"\"\n    Searches for flights.\n\n    Args:\n        destination (str): The destination city.\n        departure_date (str): The desired departure date.\n        flexible_days (int, optional): Number of flexible days for the search. Defaults to 0.\n    \"\"\"\n    # ... function logic ...\n    if flexible_days &gt; 0:\n        return {\"status\": \"success\", \"report\": f\"Found flexible flights to {destination}.\"}\n    return {\"status\": \"success\", \"report\": f\"Found flights to {destination} on {departure_date}.\"}\n</code></pre> <p>Here, <code>flexible_days</code> is optional. The LLM can choose to provide it, but it's not required.</p>"},{"location":"tools/function-tools.en/#optional-parameters-with-typingoptional","title":"Optional Parameters with <code>typing.Optional</code>","text":"<p>You can also mark a parameter as optional using <code>typing.Optional[SomeType]</code> or the <code>| None</code> syntax (Python 3.10+). This signals that the parameter can be <code>None</code>. When combined with a default value of <code>None</code>, it behaves as a standard optional parameter.</p> Example: <code>typing.Optional</code> Python <pre><code>from typing import Optional\n\ndef create_user_profile(username: str, bio: Optional[str] = None):\n    \"\"\"\n    Creates a new user profile.\n\n    Args:\n        username (str): The user's unique username.\n        bio (str, optional): A short biography for the user. Defaults to None.\n    \"\"\"\n    # ... function logic ...\n    if bio:\n        return {\"status\": \"success\", \"message\": f\"Profile for {username} created with a bio.\"}\n    return {\"status\": \"success\", \"message\": f\"Profile for {username} created.\"}\n</code></pre>"},{"location":"tools/function-tools.en/#variadic-parameters-args-and-kwargs","title":"Variadic Parameters (<code>*args</code> and <code>**kwargs</code>)","text":"<p>While you can include <code>*args</code> (variable positional arguments) and <code>**kwargs</code> (variable keyword arguments) in your function signature for other purposes, they are ignored by the ADK framework when generating the tool schema for the LLM. The LLM will not be aware of them and cannot pass arguments to them. It's best to rely on explicitly defined parameters for all data you expect from the LLM.</p>"},{"location":"tools/function-tools.en/#return-type","title":"Return Type","text":"<p>The preferred return type for a Function Tool is a dictionary in Python or Map in Java. This allows you to structure the response with key-value pairs, providing context and clarity to the LLM. If your function returns a type other than a dictionary, the framework automatically wraps it into a dictionary with a single key named \"result\".</p> <p>Strive to make your return values as descriptive as possible. For example, instead of returning a numeric error code, return a dictionary with an \"error_message\" key containing a human-readable explanation. Remember that the LLM, not a piece of code, needs to understand the result. As a best practice, include a \"status\" key in your return dictionary to indicate the overall outcome (e.g., \"success\", \"error\", \"pending\"), providing the LLM with a clear signal about the operation's state.</p>"},{"location":"tools/function-tools.en/#docstrings","title":"Docstrings","text":"<p>The docstring of your function serves as the tool's description and is sent to the LLM. Therefore, a well-written and comprehensive docstring is crucial for the LLM to understand how to use the tool effectively. Clearly explain the purpose of the function, the meaning of its parameters, and the expected return values.</p>"},{"location":"tools/function-tools.en/#passing-data-between-tools","title":"Passing Data Between Tools","text":"<p>When an agent calls multiple tools in a sequence, you might need to pass data from one tool to another. The recommended way to do this is by using the <code>temp:</code> prefix in the session state.</p> <p>A tool can write data to a <code>temp:</code> variable, and a subsequent tool can read it. This data is only available for the current invocation and is discarded afterwards.</p> <p>Shared Invocation Context</p> <p>All tool calls within a single agent turn share the same <code>InvocationContext</code>. This means they also share the same temporary (<code>temp:</code>) state, which is how data can be passed between them.</p>"},{"location":"tools/function-tools.en/#example","title":"Example","text":"Example PythonJava <p>This tool is a python function which obtains the Stock price of a given Stock ticker/ symbol.</p> <p>Note: You need to <code>pip install yfinance</code> library before using this tool.</p> <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import Agent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.genai import types\n\nimport yfinance as yf\n\n\nAPP_NAME = \"stock_app\"\nUSER_ID = \"1234\"\nSESSION_ID = \"session1234\"\n\ndef get_stock_price(symbol: str):\n    \"\"\"\n    Retrieves the current stock price for a given symbol.\n\n    Args:\n        symbol (str): The stock symbol (e.g., \"AAPL\", \"GOOG\").\n\n    Returns:\n        float: The current stock price, or None if an error occurs.\n    \"\"\"\n    try:\n        stock = yf.Ticker(symbol)\n        historical_data = stock.history(period=\"1d\")\n        if not historical_data.empty:\n            current_price = historical_data['Close'].iloc[-1]\n            return current_price\n        else:\n            return None\n    except Exception as e:\n        print(f\"Error retrieving stock price for {symbol}: {e}\")\n        return None\n\n\nstock_price_agent = Agent(\n    model='gemini-2.0-flash',\n    name='stock_agent',\n    instruction= 'You are an agent who retrieves stock prices. If a ticker symbol is provided, fetch the current price. If only a company name is given, first perform a Google search to find the correct ticker symbol before retrieving the stock price. If the provided ticker symbol is invalid or data cannot be retrieved, inform the user that the stock price could not be found.',\n    description='This agent specializes in retrieving real-time stock prices. Given a stock ticker symbol (e.g., AAPL, GOOG, MSFT) or the stock name, use the tools and reliable data sources to provide the most up-to-date price.',\n    tools=[get_stock_price], # You can add Python functions directly to the tools list; they will be automatically wrapped as FunctionTools.\n)\n\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=stock_price_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"stock price of GOOG\")\n</code></pre> <p>The return value from this tool will be wrapped into a dictionary.</p> <pre><code>{\"result\": \"$123\"}\n</code></pre> <p>This tool retrieves the mocked value of a stock price.</p> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class StockPriceAgent {\n\n  private static final String APP_NAME = \"stock_agent\";\n  private static final String USER_ID = \"user1234\";\n\n  // Mock data for various stocks functionality\n  // NOTE: This is a MOCK implementation. In a real Java application,\n  // you would use a financial data API or library.\n  private static final Map&lt;String, Double&gt; mockStockPrices = new HashMap&lt;&gt;();\n\n  static {\n    mockStockPrices.put(\"GOOG\", 1.0);\n    mockStockPrices.put(\"AAPL\", 1.0);\n    mockStockPrices.put(\"MSFT\", 1.0);\n  }\n\n  @Schema(description = \"Retrieves the current stock price for a given symbol.\")\n  public static Map&lt;String, Object&gt; getStockPrice(\n      @Schema(description = \"The stock symbol (e.g., \\\"AAPL\\\", \\\"GOOG\\\")\",\n        name = \"symbol\")\n      String symbol) {\n\n    try {\n      if (mockStockPrices.containsKey(symbol.toUpperCase())) {\n        double currentPrice = mockStockPrices.get(symbol.toUpperCase());\n        System.out.println(\"Tool: Found price for \" + symbol + \": \" + currentPrice);\n        return Map.of(\"symbol\", symbol, \"price\", currentPrice);\n      } else {\n        return Map.of(\"symbol\", symbol, \"error\", \"No data found for symbol\");\n      }\n    } catch (Exception e) {\n      return Map.of(\"symbol\", symbol, \"error\", e.getMessage());\n    }\n  }\n\n  public static void callAgent(String prompt) {\n    // Create the FunctionTool from the Java method\n    FunctionTool getStockPriceTool = FunctionTool.create(StockPriceAgent.class, \"getStockPrice\");\n\n    LlmAgent stockPriceAgent =\n        LlmAgent.builder()\n            .model(\"gemini-2.0-flash\")\n            .name(\"stock_agent\")\n            .instruction(\n                \"You are an agent who retrieves stock prices. If a ticker symbol is provided, fetch the current price. If only a company name is given, first perform a Google search to find the correct ticker symbol before retrieving the stock price. If the provided ticker symbol is invalid or data cannot be retrieved, inform the user that the stock price could not be found.\")\n            .description(\n                \"This agent specializes in retrieving real-time stock prices. Given a stock ticker symbol (e.g., AAPL, GOOG, MSFT) or the stock name, use the tools and reliable data sources to provide the most up-to-date price.\")\n            .tools(getStockPriceTool) // Add the Java FunctionTool\n            .build();\n\n    // Create an InMemoryRunner\n    InMemoryRunner runner = new InMemoryRunner(stockPriceAgent, APP_NAME);\n    // InMemoryRunner automatically creates a session service. Create a session using the service\n    Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n    Content userMessage = Content.fromParts(Part.fromText(prompt));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n\n  public static void main(String[] args) {\n    callAgent(\"stock price of GOOG\");\n    callAgent(\"What's the price of MSFT?\");\n    callAgent(\"Can you find the stock price for an unknown company XYZ?\");\n  }\n}\n</code></pre> <p>The return value from this tool will be wrapped into a Map. <pre><code>For input `GOOG`: {\"symbol\": \"GOOG\", \"price\": \"1.0\"}\n</code></pre>"},{"location":"tools/function-tools.en/#best-practices","title":"Best Practices","text":"<p>While you have considerable flexibility in defining your function, remember that simplicity enhances usability for the LLM. Consider these guidelines:</p> <ul> <li>Fewer Parameters are Better: Minimize the number of parameters to reduce complexity.  </li> <li>Simple Data Types: Favor primitive data types like <code>str</code> and <code>int</code> over custom classes whenever possible.  </li> <li>Meaningful Names: The function's name and parameter names significantly influence how the LLM interprets and utilizes the tool. Choose names that clearly reflect the function's purpose and the meaning of its inputs. Avoid generic names like <code>do_stuff()</code> or <code>beAgent()</code>.</li> <li>Build for Parallel Execution: Improve function calling performance when multiple tools are run by building for asynchronous operation. For information on enabling parallel execution for tools, see Increase tool performance with parallel execution.</li> </ul>"},{"location":"tools/function-tools.en/#long-run-tool","title":"Long Running Function Tools","text":"<p>This tool is designed to help you start and manage tasks that are handled outside the operation of your agent workflow, and require a significant amount of processing time, without blocking the agent's execution. This tool is a subclass of <code>FunctionTool</code>.</p> <p>When using a <code>LongRunningFunctionTool</code>, your function can initiate the long-running operation and optionally return an initial result, such as a long-running operation id. Once a long running function tool is invoked the agent runner pauses the agent run and lets the agent client to decide whether to continue or wait until the long-running operation finishes. The agent client can query the progress of the long-running operation and send back an intermediate or final response. The agent can then continue with other tasks. An example is the human-in-the-loop scenario where the agent needs human approval before proceeding with a task.</p> <p>Warning: Execution handling</p> <p>Long Running Function Tools are designed to help you start and manage long running tasks as part of your agent workflow, but not perform the actual, long task. For tasks that require significant time to complete, you should implement a separate server to do the task.</p> <p>Tip: Parallel execution</p> <p>Depending on the type of tool you are building, designing for asychronous operation may be a better solution than creating a long running tool. For more information, see Increase tool performance with parallel execution.</p>"},{"location":"tools/function-tools.en/#how-it-works_1","title":"How it Works","text":"<p>In Python, you wrap a function with <code>LongRunningFunctionTool</code>.  In Java, you pass a Method name to <code>LongRunningFunctionTool.create()</code>.</p> <ol> <li> <p>Initiation: When the LLM calls the tool, your function starts the long-running operation.</p> </li> <li> <p>Initial Updates: Your function should optionally return an initial result (e.g. the long-running operaiton id). The ADK framework takes the result and sends it back to the LLM packaged within a <code>FunctionResponse</code>. This allows the LLM to inform the user (e.g., status, percentage complete, messages). And then the agent run is ended / paused.</p> </li> <li> <p>Continue or Wait: After each agent run is completed. Agent client can query the progress of the long-running operation and decide whether to continue the agent run with an intermediate response (to update the progress) or wait until a final response is retrieved. Agent client should send the intermediate or final response back to the agent for the next run.</p> </li> <li> <p>Framework Handling: The ADK framework manages the execution. It sends the intermediate or final <code>FunctionResponse</code> sent by agent client to the LLM to generate a user friendly message.</p> </li> </ol>"},{"location":"tools/function-tools.en/#creating-the-tool","title":"Creating the Tool","text":"<p>Define your tool function and wrap it using the <code>LongRunningFunctionTool</code> class:</p> PythonJava <pre><code># 1. Define the long running function\ndef ask_for_approval(\n    purpose: str, amount: float\n) -&gt; dict[str, Any]:\n    \"\"\"Ask for approval for the reimbursement.\"\"\"\n    # create a ticket for the approval\n    # Send a notification to the approver with the link of the ticket\n    return {'status': 'pending', 'approver': 'Sean Zhou', 'purpose' : purpose, 'amount': amount, 'ticket-id': 'approval-ticket-1'}\n\ndef reimburse(purpose: str, amount: float) -&gt; str:\n    \"\"\"Reimburse the amount of money to the employee.\"\"\"\n    # send the reimbrusement request to payment vendor\n    return {'status': 'ok'}\n\n# 2. Wrap the function with LongRunningFunctionTool\nlong_running_tool = LongRunningFunctionTool(func=ask_for_approval)\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.tools.LongRunningFunctionTool;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ExampleLongRunningFunction {\n\n  // Define your Long Running function.\n  // Ask for approval for the reimbursement.\n  public static Map&lt;String, Object&gt; askForApproval(String purpose, double amount) {\n    // Simulate creating a ticket and sending a notification\n    System.out.println(\n        \"Simulating ticket creation for purpose: \" + purpose + \", amount: \" + amount);\n\n    // Send a notification to the approver with the link of the ticket\n    Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();\n    result.put(\"status\", \"pending\");\n    result.put(\"approver\", \"Sean Zhou\");\n    result.put(\"purpose\", purpose);\n    result.put(\"amount\", amount);\n    result.put(\"ticket-id\", \"approval-ticket-1\");\n    return result;\n  }\n\n  public static void main(String[] args) throws NoSuchMethodException {\n    // Pass the method to LongRunningFunctionTool.create\n    LongRunningFunctionTool approveTool =\n        LongRunningFunctionTool.create(ExampleLongRunningFunction.class, \"askForApproval\");\n\n    // Include the tool in the agent\n    LlmAgent approverAgent =\n        LlmAgent.builder()\n            // ...\n            .tools(approveTool)\n            .build();\n  }\n}\n</code></pre>"},{"location":"tools/function-tools.en/#intermediate-final-result-updates","title":"Intermediate / Final result Updates","text":"<p>Agent client received an event with long running function calls and check the status of the ticket. Then Agent client can send the intermediate or final response back to update the progress. The framework packages this value (even if it's None) into the content of the <code>FunctionResponse</code> sent back to the LLM.</p> Applies to only Java ADK <p>When passing <code>ToolContext</code> with Function Tools, ensure that one of the following is true:</p> <ul> <li> <p>The Schema is passed with the ToolContext parameter in the function signature, like:   <pre><code>@com.google.adk.tools.Annotations.Schema(name = \"toolContext\") ToolContext toolContext\n</code></pre> OR</p> </li> <li> <p>The following <code>-parameters</code> flag is set to the mvn compiler plugin</p> </li> </ul> <p><pre><code>&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n            &lt;version&gt;3.14.0&lt;/version&gt; &lt;!-- or newer --&gt;\n            &lt;configuration&gt;\n                &lt;compilerArgs&gt;\n                    &lt;arg&gt;-parameters&lt;/arg&gt;\n                &lt;/compilerArgs&gt;\n            &lt;/configuration&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre> This constraint is temporary and will be removed.</p> PythonJava <pre><code># Agent Interaction\nasync def call_agent_async(query):\n\n    def get_long_running_function_call(event: Event) -&gt; types.FunctionCall:\n        # Get the long running function call from the event\n        if not event.long_running_tool_ids or not event.content or not event.content.parts:\n            return\n        for part in event.content.parts:\n            if (\n                part\n                and part.function_call\n                and event.long_running_tool_ids\n                and part.function_call.id in event.long_running_tool_ids\n            ):\n                return part.function_call\n\n    def get_function_response(event: Event, function_call_id: str) -&gt; types.FunctionResponse:\n        # Get the function response for the fuction call with specified id.\n        if not event.content or not event.content.parts:\n            return\n        for part in event.content.parts:\n            if (\n                part\n                and part.function_response\n                and part.function_response.id == function_call_id\n            ):\n                return part.function_response\n\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n\n    print(\"\\nRunning agent...\")\n    events_async = runner.run_async(\n        session_id=session.id, user_id=USER_ID, new_message=content\n    )\n\n\n    long_running_function_call, long_running_function_response, ticket_id = None, None, None\n    async for event in events_async:\n        # Use helper to check for the specific auth request event\n        if not long_running_function_call:\n            long_running_function_call = get_long_running_function_call(event)\n        else:\n            _potential_response = get_function_response(event, long_running_function_call.id)\n            if _potential_response: # Only update if we get a non-None response\n                long_running_function_response = _potential_response\n                ticket_id = long_running_function_response.response['ticket-id']\n        if event.content and event.content.parts:\n            if text := ''.join(part.text or '' for part in event.content.parts):\n                print(f'[{event.author}]: {text}')\n\n\n    if long_running_function_response:\n        # query the status of the correpsonding ticket via tciket_id\n        # send back an intermediate / final response\n        updated_response = long_running_function_response.model_copy(deep=True)\n        updated_response.response = {'status': 'approved'}\n        async for event in runner.run_async(\n          session_id=session.id, user_id=USER_ID, new_message=types.Content(parts=[types.Part(function_response = updated_response)], role='user')\n        ):\n            if event.content and event.content.parts:\n                if text := ''.join(part.text or '' for part in event.content.parts):\n                    print(f'[{event.author}]: {text}')\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.LongRunningFunctionTool;\nimport com.google.adk.tools.ToolContext;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.FunctionCall;\nimport com.google.genai.types.FunctionResponse;\nimport com.google.genai.types.Part;\nimport java.util.Optional;\nimport java.util.UUID;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.stream.Collectors;\n\npublic class LongRunningFunctionExample {\n\n  private static String USER_ID = \"user123\";\n\n  @Schema(\n      name = \"create_ticket_long_running\",\n      description = \"\"\"\n          Creates a new support ticket with a specified urgency level.\n          Examples of urgency are 'high', 'medium', or 'low'.\n          The ticket creation is a long-running process, and its ID will be provided when ready.\n      \"\"\")\n  public static void createTicketAsync(\n      @Schema(\n              name = \"urgency\",\n              description =\n                  \"The urgency level for the new ticket, such as 'high', 'medium', or 'low'.\")\n          String urgency,\n      @Schema(name = \"toolContext\") // Ensures ADK injection\n          ToolContext toolContext) {\n    System.out.printf(\n        \"TOOL_EXEC: 'create_ticket_long_running' called with urgency: %s (Call ID: %s)%n\",\n        urgency, toolContext.functionCallId().orElse(\"N/A\"));\n  }\n\n  public static void main(String[] args) {\n    LlmAgent agent =\n        LlmAgent.builder()\n            .name(\"ticket_agent\")\n            .description(\"Agent for creating tickets via a long-running task.\")\n            .model(\"gemini-2.0-flash\")\n            .tools(\n                ImmutableList.of(\n                    LongRunningFunctionTool.create(\n                        LongRunningFunctionExample.class, \"createTicketAsync\")))\n            .build();\n\n    Runner runner = new InMemoryRunner(agent);\n    Session session =\n        runner.sessionService().createSession(agent.name(), USER_ID, null, null).blockingGet();\n\n    // --- Turn 1: User requests ticket ---\n    System.out.println(\"\\n--- Turn 1: User Request ---\");\n    Content initialUserMessage =\n        Content.fromParts(Part.fromText(\"Create a high urgency ticket for me.\"));\n\n    AtomicReference&lt;String&gt; funcCallIdRef = new AtomicReference&lt;&gt;();\n    runner\n        .runAsync(USER_ID, session.id(), initialUserMessage)\n        .blockingForEach(\n            event -&gt; {\n              printEventSummary(event, \"T1\");\n              if (funcCallIdRef.get() == null) { // Capture the first relevant function call ID\n                event.content().flatMap(Content::parts).orElse(ImmutableList.of()).stream()\n                    .map(Part::functionCall)\n                    .flatMap(Optional::stream)\n                    .filter(fc -&gt; \"create_ticket_long_running\".equals(fc.name().orElse(\"\")))\n                    .findFirst()\n                    .flatMap(FunctionCall::id)\n                    .ifPresent(funcCallIdRef::set);\n              }\n            });\n\n    if (funcCallIdRef.get() == null) {\n      System.out.println(\"ERROR: Tool 'create_ticket_long_running' not called in Turn 1.\");\n      return;\n    }\n    System.out.println(\"ACTION: Captured FunctionCall ID: \" + funcCallIdRef.get());\n\n    // --- Turn 2: App provides initial ticket_id (simulating async tool completion) ---\n    System.out.println(\"\\n--- Turn 2: App provides ticket_id ---\");\n    String ticketId = \"TICKET-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    FunctionResponse ticketCreatedFuncResponse =\n        FunctionResponse.builder()\n            .name(\"create_ticket_long_running\")\n            .id(funcCallIdRef.get())\n            .response(ImmutableMap.of(\"ticket_id\", ticketId))\n            .build();\n    Content appResponseWithTicketId =\n        Content.builder()\n            .parts(\n                ImmutableList.of(\n                    Part.builder().functionResponse(ticketCreatedFuncResponse).build()))\n            .role(\"user\")\n            .build();\n\n    runner\n        .runAsync(USER_ID, session.id(), appResponseWithTicketId)\n        .blockingForEach(event -&gt; printEventSummary(event, \"T2\"));\n    System.out.println(\"ACTION: Sent ticket_id \" + ticketId + \" to agent.\");\n\n    // --- Turn 3: App provides ticket status update ---\n    System.out.println(\"\\n--- Turn 3: App provides ticket status ---\");\n    FunctionResponse ticketStatusFuncResponse =\n        FunctionResponse.builder()\n            .name(\"create_ticket_long_running\")\n            .id(funcCallIdRef.get())\n            .response(ImmutableMap.of(\"status\", \"approved\", \"ticket_id\", ticketId))\n            .build();\n    Content appResponseWithStatus =\n        Content.builder()\n            .parts(\n                ImmutableList.of(Part.builder().functionResponse(ticketStatusFuncResponse).build()))\n            .role(\"user\")\n            .build();\n\n    runner\n        .runAsync(USER_ID, session.id(), appResponseWithStatus)\n        .blockingForEach(event -&gt; printEventSummary(event, \"T3_FINAL\"));\n    System.out.println(\"Long running function completed successfully.\");\n  }\n\n  private static void printEventSummary(Event event, String turnLabel) {\n    event\n        .content()\n        .ifPresent(\n            content -&gt; {\n              String text =\n                  content.parts().orElse(ImmutableList.of()).stream()\n                      .map(part -&gt; part.text().orElse(\"\"))\n                      .filter(s -&gt; !s.isEmpty())\n                      .collect(Collectors.joining(\" \"));\n              if (!text.isEmpty()) {\n                System.out.printf(\"[%s][%s_TEXT]: %s%n\", turnLabel, event.author(), text);\n              }\n              content.parts().orElse(ImmutableList.of()).stream()\n                  .map(Part::functionCall)\n                  .flatMap(Optional::stream)\n                  .findFirst() // Assuming one function call per relevant event for simplicity\n                  .ifPresent(\n                      fc -&gt;\n                          System.out.printf(\n                              \"[%s][%s_CALL]: %s(%s) ID: %s%n\",\n                              turnLabel,\n                              event.author(),\n                              fc.name().orElse(\"N/A\"),\n                              fc.args().orElse(ImmutableMap.of()),\n                              fc.id().orElse(\"N/A\")));\n            });\n  }\n}\n</code></pre> Python complete example: File Processing Simulation <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport asyncio\nfrom typing import Any\nfrom google.adk.agents import Agent\nfrom google.adk.events import Event\nfrom google.adk.runners import Runner\nfrom google.adk.tools import LongRunningFunctionTool\nfrom google.adk.sessions import InMemorySessionService\nfrom google.genai import types\n\n\n# 1. Define the long running function\ndef ask_for_approval(\n    purpose: str, amount: float\n) -&gt; dict[str, Any]:\n    \"\"\"Ask for approval for the reimbursement.\"\"\"\n    # create a ticket for the approval\n    # Send a notification to the approver with the link of the ticket\n    return {'status': 'pending', 'approver': 'Sean Zhou', 'purpose' : purpose, 'amount': amount, 'ticket-id': 'approval-ticket-1'}\n\ndef reimburse(purpose: str, amount: float) -&gt; str:\n    \"\"\"Reimburse the amount of money to the employee.\"\"\"\n    # send the reimbrusement request to payment vendor\n    return {'status': 'ok'}\n\n# 2. Wrap the function with LongRunningFunctionTool\nlong_running_tool = LongRunningFunctionTool(func=ask_for_approval)\n\n\n# 3. Use the tool in an Agent\nfile_processor_agent = Agent(\n    # Use a model compatible with function calling\n    model=\"gemini-2.0-flash\",\n    name='reimbursement_agent',\n    instruction=\"\"\"\n      You are an agent whose job is to handle the reimbursement process for\n      the employees. If the amount is less than $100, you will automatically\n      approve the reimbursement.\n\n      If the amount is greater than $100, you will\n      ask for approval from the manager. If the manager approves, you will\n      call reimburse() to reimburse the amount to the employee. If the manager\n      rejects, you will inform the employee of the rejection.\n    \"\"\",\n    tools=[reimburse, long_running_tool]\n)\n\n\nAPP_NAME = \"human_in_the_loop\"\nUSER_ID = \"1234\"\nSESSION_ID = \"session1234\"\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=file_processor_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n\n# Agent Interaction\nasync def call_agent_async(query):\n\n    def get_long_running_function_call(event: Event) -&gt; types.FunctionCall:\n        # Get the long running function call from the event\n        if not event.long_running_tool_ids or not event.content or not event.content.parts:\n            return\n        for part in event.content.parts:\n            if (\n                part\n                and part.function_call\n                and event.long_running_tool_ids\n                and part.function_call.id in event.long_running_tool_ids\n            ):\n                return part.function_call\n\n    def get_function_response(event: Event, function_call_id: str) -&gt; types.FunctionResponse:\n        # Get the function response for the fuction call with specified id.\n        if not event.content or not event.content.parts:\n            return\n        for part in event.content.parts:\n            if (\n                part\n                and part.function_response\n                and part.function_response.id == function_call_id\n            ):\n                return part.function_response\n\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n\n    print(\"\\nRunning agent...\")\n    events_async = runner.run_async(\n        session_id=session.id, user_id=USER_ID, new_message=content\n    )\n\n\n    long_running_function_call, long_running_function_response, ticket_id = None, None, None\n    async for event in events_async:\n        # Use helper to check for the specific auth request event\n        if not long_running_function_call:\n            long_running_function_call = get_long_running_function_call(event)\n        else:\n            _potential_response = get_function_response(event, long_running_function_call.id)\n            if _potential_response: # Only update if we get a non-None response\n                long_running_function_response = _potential_response\n                ticket_id = long_running_function_response.response['ticket-id']\n        if event.content and event.content.parts:\n            if text := ''.join(part.text or '' for part in event.content.parts):\n                print(f'[{event.author}]: {text}')\n\n\n    if long_running_function_response:\n        # query the status of the correpsonding ticket via tciket_id\n        # send back an intermediate / final response\n        updated_response = long_running_function_response.model_copy(deep=True)\n        updated_response.response = {'status': 'approved'}\n        async for event in runner.run_async(\n          session_id=session.id, user_id=USER_ID, new_message=types.Content(parts=[types.Part(function_response = updated_response)], role='user')\n        ):\n            if event.content and event.content.parts:\n                if text := ''.join(part.text or '' for part in event.content.parts):\n                    print(f'[{event.author}]: {text}')\n\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\n\n# reimbursement that doesn't require approval\n# asyncio.run(call_agent_async(\"Please reimburse 50$ for meals\"))\nawait call_agent_async(\"Please reimburse 50$ for meals\") # For Notebooks, uncomment this line and comment the above line\n# reimbursement that requires approval\n# asyncio.run(call_agent_async(\"Please reimburse 200$ for meals\"))\nawait call_agent_async(\"Please reimburse 200$ for meals\") # For Notebooks, uncomment this line and comment the above line\n</code></pre>"},{"location":"tools/function-tools.en/#key-aspects-of-this-example","title":"Key aspects of this example","text":"<ul> <li> <p><code>LongRunningFunctionTool</code>: Wraps the supplied method/function; the framework handles sending yielded updates and the final return value as sequential FunctionResponses.</p> </li> <li> <p>Agent instruction: Directs the LLM to use the tool and understand the incoming FunctionResponse stream (progress vs. completion) for user updates.</p> </li> <li> <p>Final return: The function returns the final result dictionary, which is sent in the concluding FunctionResponse to indicate completion.</p> </li> </ul>"},{"location":"tools/function-tools.en/#agent-tool","title":"Agent-as-a-Tool","text":"<p>This powerful feature allows you to leverage the capabilities of other agents within your system by calling them as tools. The Agent-as-a-Tool enables you to invoke another agent to perform a specific task, effectively delegating responsibility. This is conceptually similar to creating a Python function that calls another agent and uses the agent's response as the function's return value.</p>"},{"location":"tools/function-tools.en/#key-difference-from-sub-agents","title":"Key difference from sub-agents","text":"<p>It's important to distinguish an Agent-as-a-Tool from a Sub-Agent.</p> <ul> <li> <p>Agent-as-a-Tool: When Agent A calls Agent B as a tool (using Agent-as-a-Tool), Agent B's answer is passed back to Agent A, which then summarizes the answer and generates a response to the user. Agent A retains control and continues to handle future user input.  </p> </li> <li> <p>Sub-agent: When Agent A calls Agent B as a sub-agent, the responsibility of answering the user is completely transferred to Agent B. Agent A is effectively out of the loop. All subsequent user input will be answered by Agent B.</p> </li> </ul>"},{"location":"tools/function-tools.en/#usage","title":"Usage","text":"<p>To use an agent as a tool, wrap the agent with the AgentTool class.</p> PythonJava <pre><code>tools=[AgentTool(agent=agent_b)]\n</code></pre> <pre><code>AgentTool.create(agent)\n</code></pre>"},{"location":"tools/function-tools.en/#customization","title":"Customization","text":"<p>The <code>AgentTool</code> class provides the following attributes for customizing its behavior:</p> <ul> <li>skip_summarization: bool: If set to True, the framework will bypass the LLM-based summarization of the tool agent's response. This can be useful when the tool's response is already well-formatted and requires no further processing.</li> </ul> Example PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import Agent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools.agent_tool import AgentTool\nfrom google.genai import types\n\nAPP_NAME=\"summary_agent\"\nUSER_ID=\"user1234\"\nSESSION_ID=\"1234\"\n\nsummary_agent = Agent(\n    model=\"gemini-2.0-flash\",\n    name=\"summary_agent\",\n    instruction=\"\"\"You are an expert summarizer. Please read the following text and provide a concise summary.\"\"\",\n    description=\"Agent to summarize text\",\n)\n\nroot_agent = Agent(\n    model='gemini-2.0-flash',\n    name='root_agent',\n    instruction=\"\"\"You are a helpful assistant. When the user provides a text, use the 'summarize' tool to generate a summary. Always forward the user's message exactly as received to the 'summarize' tool, without modifying or summarizing it yourself. Present the response from the tool to the user.\"\"\",\n    tools=[AgentTool(agent=summary_agent, skip_summarization=True)]\n)\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=root_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n\nlong_text = \"\"\"Quantum computing represents a fundamentally different approach to computation, \nleveraging the bizarre principles of quantum mechanics to process information. Unlike classical computers \nthat rely on bits representing either 0 or 1, quantum computers use qubits which can exist in a state of superposition - effectively \nbeing 0, 1, or a combination of both simultaneously. Furthermore, qubits can become entangled, \nmeaning their fates are intertwined regardless of distance, allowing for complex correlations. This parallelism and \ninterconnectedness grant quantum computers the potential to solve specific types of incredibly complex problems - such \nas drug discovery, materials science, complex system optimization, and breaking certain types of cryptography - far \nfaster than even the most powerful classical supercomputers could ever achieve, although the technology is still largely in its developmental stages.\"\"\"\n\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(long_text)\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.AgentTool;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\n\npublic class AgentToolCustomization {\n\n  private static final String APP_NAME = \"summary_agent\";\n  private static final String USER_ID = \"user1234\";\n\n  public static void initAgentAndRun(String prompt) {\n\n    LlmAgent summaryAgent =\n        LlmAgent.builder()\n            .model(\"gemini-2.0-flash\")\n            .name(\"summaryAgent\")\n            .instruction(\n                \"You are an expert summarizer. Please read the following text and provide a concise summary.\")\n            .description(\"Agent to summarize text\")\n            .build();\n\n    // Define root_agent\n    LlmAgent rootAgent =\n        LlmAgent.builder()\n            .model(\"gemini-2.0-flash\")\n            .name(\"rootAgent\")\n            .instruction(\n                \"You are a helpful assistant. When the user provides a text, always use the 'summaryAgent' tool to generate a summary. Always forward the user's message exactly as received to the 'summaryAgent' tool, without modifying or summarizing it yourself. Present the response from the tool to the user.\")\n            .description(\"Assistant agent\")\n            .tools(AgentTool.create(summaryAgent, true)) // Set skipSummarization to true\n            .build();\n\n    // Create an InMemoryRunner\n    InMemoryRunner runner = new InMemoryRunner(rootAgent, APP_NAME);\n    // InMemoryRunner automatically creates a session service. Create a session using the service\n    Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n    Content userMessage = Content.fromParts(Part.fromText(prompt));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n\n  public static void main(String[] args) {\n    String longText =\n        \"\"\"\n            Quantum computing represents a fundamentally different approach to computation,\n            leveraging the bizarre principles of quantum mechanics to process information. Unlike classical computers\n            that rely on bits representing either 0 or 1, quantum computers use qubits which can exist in a state of superposition - effectively\n            being 0, 1, or a combination of both simultaneously. Furthermore, qubits can become entangled,\n            meaning their fates are intertwined regardless of distance, allowing for complex correlations. This parallelism and\n            interconnectedness grant quantum computers the potential to solve specific types of incredibly complex problems - such\n            as drug discovery, materials science, complex system optimization, and breaking certain types of cryptography - far\n            faster than even the most powerful classical supercomputers could ever achieve, although the technology is still largely in its developmental stages.\"\"\";\n\n    initAgentAndRun(longText);\n  }\n}\n</code></pre>"},{"location":"tools/function-tools.en/#how-it-works_2","title":"How it works","text":"<ol> <li>When the <code>main_agent</code> receives the long text, its instruction tells it to use the 'summarize' tool for long texts.  </li> <li>The framework recognizes 'summarize' as an <code>AgentTool</code> that wraps the <code>summary_agent</code>.  </li> <li>Behind the scenes, the <code>main_agent</code> will call the <code>summary_agent</code> with the long text as input.  </li> <li>The <code>summary_agent</code> will process the text according to its instruction and generate a summary.  </li> <li>The response from the <code>summary_agent</code> is then passed back to the <code>main_agent</code>. </li> <li>The <code>main_agent</code> can then take the summary and formulate its final response to the user (e.g., \"Here's a summary of the text: ...\")</li> </ol>"},{"location":"tools/function-tools/","title":"Function tools","text":"<p>\u7576\u5167\u5efa\u7684 Agent Development Kit (ADK) \u5de5\u5177\u7121\u6cd5\u6eff\u8db3\u4f60\u7684\u9700\u6c42\u6642\uff0c\u4f60\u53ef\u4ee5\u81ea\u884c\u5efa\u7acb\u81ea\u8a02\u7684 function tools\uff08\u51fd\u5f0f\u5de5\u5177\uff09\u3002\u5efa\u69cb function tools \u8b93\u4f60\u80fd\u5920\u6253\u9020\u5c08\u5c6c\u7684\u529f\u80fd\uff0c\u4f8b\u5982\u9023\u63a5\u5c08\u6709\u8cc7\u6599\u5eab\u6216\u5be6\u4f5c\u7368\u7279\u7684\u6f14\u7b97\u6cd5\u3002 \u8209\u4f8b\u4f86\u8aaa\uff0c\u4e00\u500b function tool <code>myfinancetool</code>\uff0c\u53ef\u80fd\u662f\u4e00\u500b\u8a08\u7b97\u7279\u5b9a\u8ca1\u52d9\u6307\u6a19\u7684\u51fd\u5f0f\u3002Agent Development Kit (ADK) \u4e5f\u652f\u63f4\u9577\u6642\u9593\u57f7\u884c\u7684\u51fd\u5f0f\uff0c\u56e0\u6b64\u5982\u679c\u8a72\u8a08\u7b97\u9700\u8981\u8f03\u9577\u6642\u9593\uff0cagent \u4ecd\u53ef\u7e7c\u7e8c\u8655\u7406\u5176\u4ed6\u4efb\u52d9\u3002</p> <p>Agent Development Kit (ADK) \u63d0\u4f9b\u591a\u7a2e\u5efa\u7acb function tools \u7684\u65b9\u5f0f\uff0c\u9069\u7528\u65bc\u4e0d\u540c\u8907\u96dc\u5ea6\u8207\u63a7\u5236\u9700\u6c42\uff1a</p> <ul> <li>Function Tools</li> <li>Long Running Function Tools</li> <li>Agents-as-a-Tool</li> </ul>"},{"location":"tools/function-tools/#function-tool","title":"Function Tools","text":"<p>\u5c07 Python \u51fd\u5f0f\u8f49\u63db\u70ba\u5de5\u5177\uff0c\u662f\u5c07\u81ea\u8a02\u908f\u8f2f\u6574\u5408\u9032 agent \u7684\u7c21\u55ae\u65b9\u6cd5\u3002\u7576\u4f60\u5c07\u51fd\u5f0f\u6307\u6d3e\u7d66 agent \u7684 <code>tools</code> \u6e05\u55ae\u6642\uff0c\u6846\u67b6\u6703\u81ea\u52d5\u5c07\u5176\u5305\u88dd\u70ba <code>FunctionTool</code>\u3002</p>"},{"location":"tools/function-tools/#_1","title":"\u904b\u4f5c\u65b9\u5f0f","text":"<p>Agent Development Kit (ADK) \u6846\u67b6\u6703\u81ea\u52d5\u6aa2\u67e5\u4f60\u7684 Python \u51fd\u5f0f\u7c3d\u7ae0\uff0c\u5305\u62ec\u540d\u7a31\u3001docstring\u3001\u53c3\u6578\u3001\u578b\u5225\u63d0\u793a\u4ee5\u53ca\u9810\u8a2d\u503c\uff0c\u4e26\u64da\u6b64\u7522\u751f schema\u3002\u9019\u500b schema \u8b93\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u80fd\u5920\u7406\u89e3\u8a72\u5de5\u5177\u7684\u7528\u9014\u3001\u4f7f\u7528\u6642\u6a5f\uff0c\u4ee5\u53ca\u6240\u9700\u7684\u53c3\u6578\u3002</p>"},{"location":"tools/function-tools/#_2","title":"\u5b9a\u7fa9\u51fd\u5f0f\u7c3d\u7ae0","text":"<p>\u826f\u597d\u5b9a\u7fa9\u7684\u51fd\u5f0f\u7c3d\u7ae0\u5c0d\u65bc\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6b63\u78ba\u4f7f\u7528\u4f60\u7684\u5de5\u5177\u81f3\u95dc\u91cd\u8981\u3002</p>"},{"location":"tools/function-tools/#_3","title":"\u53c3\u6578","text":"<p>\u4f60\u53ef\u4ee5\u5b9a\u7fa9\u5e36\u6709\u5fc5\u8981\u53c3\u6578\u3001\u9078\u7528\u53c3\u6578\u8207\u53ef\u8b8a\u53c3\u6578\u7684\u51fd\u5f0f\u3002\u4ee5\u4e0b\u8aaa\u660e\u5404\u7a2e\u53c3\u6578\u7684\u8655\u7406\u65b9\u5f0f\uff1a</p>"},{"location":"tools/function-tools/#_4","title":"\u5fc5\u8981\u53c3\u6578","text":"<p>\u5982\u679c\u53c3\u6578\u6709\u578b\u5225\u63d0\u793a\u4f46\u6c92\u6709\u9810\u8a2d\u503c\uff0c\u5247\u8996\u70ba\u5fc5\u8981\u53c3\u6578\u3002\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5728\u547c\u53eb\u8a72\u5de5\u5177\u6642\uff0c\u5fc5\u9808\u70ba\u6b64\u53c3\u6578\u63d0\u4f9b\u503c\u3002</p> \u7bc4\u4f8b\uff1a\u5fc5\u8981\u53c3\u6578 Python <pre><code>def get_weather(city: str, unit: str):\n    \"\"\"\n    Retrieves the weather for a city in the specified unit.\n\n    Args:\n        city (str): The city name.\n        unit (str): The temperature unit, either 'Celsius' or 'Fahrenheit'.\n    \"\"\"\n    # ... function logic ...\n    return {\"status\": \"success\", \"report\": f\"Weather for {city} is sunny.\"}\n</code></pre> <p>\u5728\u6b64\u7bc4\u4f8b\u4e2d\uff0c<code>city</code> \u548c <code>unit</code> \u90fd\u662f\u5fc5\u586b\u53c3\u6578\u3002\u5982\u679c\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5617\u8a66\u5728\u7f3a\u5c11\u5176\u4e2d\u4e00\u500b\u7684\u60c5\u6cc1\u4e0b\u547c\u53eb <code>get_weather</code>\uff0cAgent Development Kit (ADK) \u6703\u56de\u50b3\u932f\u8aa4\u7d66 LLM\uff0c\u63d0\u793a\u5176\u4fee\u6b63\u547c\u53eb\u5167\u5bb9\u3002</p>"},{"location":"tools/function-tools/#_5","title":"\u5177\u6709\u9810\u8a2d\u503c\u7684\u9078\u7528\u53c3\u6578","text":"<p>\u5982\u679c\u4f60\u70ba\u53c3\u6578\u63d0\u4f9b\u9810\u8a2d\u503c\uff0c\u8a72\u53c3\u6578\u5c31\u88ab\u8996\u70ba\u9078\u7528\u3002\u9019\u662f Python \u5b9a\u7fa9\u9078\u7528\u53c3\u6578\u7684\u6a19\u6e96\u65b9\u5f0f\u3002Agent Development Kit (ADK) \u6703\u6b63\u78ba\u89e3\u6790\u9019\u4e9b\u53c3\u6578\uff0c\u4e26\u4e14\u4e0d\u6703\u5c07\u5b83\u5011\u5217\u5728\u50b3\u9001\u7d66 LLM \u7684\u5de5\u5177 schema \u7684 <code>required</code> \u6b04\u4f4d\u4e2d\u3002</p> \u7bc4\u4f8b\uff1a\u5177\u6709\u9810\u8a2d\u503c\u7684\u9078\u7528\u53c3\u6578 Python <pre><code>def search_flights(destination: str, departure_date: str, flexible_days: int = 0):\n    \"\"\"\n    Searches for flights.\n\n    Args:\n        destination (str): The destination city.\n        departure_date (str): The desired departure date.\n        flexible_days (int, optional): Number of flexible days for the search. Defaults to 0.\n    \"\"\"\n    # ... function logic ...\n    if flexible_days &gt; 0:\n        return {\"status\": \"success\", \"report\": f\"Found flexible flights to {destination}.\"}\n    return {\"status\": \"success\", \"report\": f\"Found flights to {destination} on {departure_date}.\"}\n</code></pre> <p>\u9019\u88e1\u7684 <code>flexible_days</code> \u662f\u9078\u586b\u7684\u3002\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u53ef\u4ee5\u9078\u64c7\u63d0\u4f9b\u5b83\uff0c\u4f46\u4e0d\u662f\u5fc5\u9808\u7684\u3002</p>"},{"location":"tools/function-tools/#typingoptional","title":"\u4f7f\u7528 <code>typing.Optional</code> \u7684\u9078\u586b\u53c3\u6578","text":"<p>\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>typing.Optional[SomeType]</code> \u6216 Python 3.10+ \u7684 <code>| None</code> \u8a9e\u6cd5\u4f86\u6a19\u8a18\u53c3\u6578\u70ba\u9078\u586b\u3002\u9019\u8868\u793a\u8a72\u53c3\u6578\u53ef\u4ee5\u662f <code>None</code>\u3002\u7576\u8207\u9810\u8a2d\u503c <code>None</code> \u7d50\u5408\u6642\uff0c\u6703\u5982\u540c\u6a19\u6e96\u7684\u9078\u586b\u53c3\u6578\u904b\u4f5c\u3002</p> \u7bc4\u4f8b\uff1a<code>typing.Optional</code> Python <pre><code>from typing import Optional\n\ndef create_user_profile(username: str, bio: Optional[str] = None):\n    \"\"\"\n    Creates a new user profile.\n\n    Args:\n        username (str): The user's unique username.\n        bio (str, optional): A short biography for the user. Defaults to None.\n    \"\"\"\n    # ... function logic ...\n    if bio:\n        return {\"status\": \"success\", \"message\": f\"Profile for {username} created with a bio.\"}\n    return {\"status\": \"success\", \"message\": f\"Profile for {username} created.\"}\n</code></pre>"},{"location":"tools/function-tools/#args-kwargs","title":"\u53ef\u8b8a\u53c3\u6578\uff08<code>*args</code> \u8207 <code>**kwargs</code>\uff09","text":"<p>\u96d6\u7136\u4f60\u53ef\u4ee5\u5728\u51fd\u5f0f\u7c3d\u540d\u4e2d\u52a0\u5165 <code>*args</code>\uff08\u53ef\u8b8a\u4f4d\u7f6e\u53c3\u6578\uff09\u8207 <code>**kwargs</code>\uff08\u53ef\u8b8a\u95dc\u9375\u5b57\u53c3\u6578\uff09\u4ee5\u7528\u65bc\u5176\u4ed6\u76ee\u7684\uff0c\u4f46\u5728 Agent Development Kit (ADK) \u6846\u67b6\u70ba\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7522\u751f\u5de5\u5177 schema \u6642\uff0c\u9019\u4e9b\u53c3\u6578\u6703\u88ab\u5ffd\u7565\u3002LLM \u4e0d\u6703\u77e5\u9053\u9019\u4e9b\u53c3\u6578\u7684\u5b58\u5728\uff0c\u4e5f\u7121\u6cd5\u50b3\u905e\u53c3\u6578\u7d66\u5b83\u5011\u3002\u56e0\u6b64\uff0c\u5efa\u8b70\u4f60\u5c0d\u6240\u6709\u671f\u671b\u7531 LLM \u50b3\u5165\u7684\u8cc7\u6599\uff0c\u90fd\u660e\u78ba\u5b9a\u7fa9\u53c3\u6578\u3002</p>"},{"location":"tools/function-tools/#_6","title":"\u56de\u50b3\u578b\u614b","text":"<p>Function Tool\uff08\u51fd\u5f0f\u5de5\u5177\uff09\u5efa\u8b70\u7684\u56de\u50b3\u578b\u614b\u662f\u5728 Python \u4e2d\u4f7f\u7528dictionary\uff08\u5b57\u5178\uff09\uff0c\u6216\u5728 Java \u4e2d\u4f7f\u7528Map\u3002\u9019\u6a23\u53ef\u4ee5\u7528\u9375\u503c\u5c0d\u7684\u65b9\u5f0f\u7d50\u69cb\u5316\u56de\u61c9\uff0c\u70ba LLM \u63d0\u4f9b\u66f4\u591a\u4e0a\u4e0b\u6587\u8207\u6e05\u6670\u5ea6\u3002\u5982\u679c\u4f60\u7684\u51fd\u5f0f\u56de\u50b3\u7684\u578b\u614b\u4e0d\u662f\u5b57\u5178\uff0c\u6846\u67b6\u6703\u81ea\u52d5\u5c07\u5176\u5305\u88dd\u6210\u4e00\u500b\u50c5\u6709\u55ae\u4e00\u9375 \"result\" \u7684\u5b57\u5178\u3002</p> <p>\u8acb\u76e1\u91cf\u8b93\u4f60\u7684\u56de\u50b3\u503c\u5177\u6709\u63cf\u8ff0\u6027\u3002\u4f8b\u5982\uff0c\u8207\u5176\u56de\u50b3\u6578\u5b57\u578b\u7684\u932f\u8aa4\u4ee3\u78bc\uff0c\u4e0d\u5982\u56de\u50b3\u4e00\u500b\u5305\u542b \"error_message\" \u9375\u4e14\u5e36\u6709\u4eba\u985e\u53ef\u8b80\u8aaa\u660e\u7684\u5b57\u5178\u3002\u8acb\u8a18\u4f4f\uff0c\u7406\u89e3\u7d50\u679c\u7684\u662f LLM\uff0c\u800c\u4e0d\u662f\u4e00\u6bb5\u7a0b\u5f0f\u78bc\u3002\u6700\u4f73\u5be6\u8e10\u662f\uff0c\u5728\u56de\u50b3\u7684\u5b57\u5178\u4e2d\u52a0\u5165 \"status\" \u9375\uff0c\u7528\u4f86\u6a19\u793a\u6574\u9ad4\u57f7\u884c\u7d50\u679c\uff08\u4f8b\u5982 \"success\"\u3001\"error\"\u3001\"pending\"\uff09\uff0c\u8b93 LLM \u80fd\u5920\u660e\u78ba\u5224\u65b7\u64cd\u4f5c\u72c0\u614b\u3002</p>"},{"location":"tools/function-tools/#docstring","title":"Docstring","text":"<p>\u4f60\u7684\u51fd\u5f0f docstring \u6703\u4f5c\u70ba\u5de5\u5177\u7684\u63cf\u8ff0\uff0c\u4e26\u50b3\u9001\u7d66 LLM\u3002\u56e0\u6b64\uff0c\u4e00\u4efd\u64b0\u5beb\u826f\u597d\u4e14\u8a73\u76e1\u7684 docstring \u5c0d\u65bc LLM \u6709\u6548\u7406\u89e3\u5982\u4f55\u4f7f\u7528\u8a72\u5de5\u5177\u81f3\u95dc\u91cd\u8981\u3002\u8acb\u6e05\u695a\u8aaa\u660e\u51fd\u5f0f\u7684\u7528\u9014\u3001\u5404\u53c3\u6578\u7684\u610f\u7fa9\uff0c\u4ee5\u53ca\u9810\u671f\u7684\u56de\u50b3\u503c\u3002</p>"},{"location":"tools/function-tools/#_7","title":"\u5de5\u5177\u9593\u8cc7\u6599\u50b3\u905e","text":"<p>\u7576 agent \u4f9d\u5e8f\u547c\u53eb\u591a\u500b\u5de5\u5177\u6642\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5c07\u8cc7\u6599\u5f9e\u4e00\u500b\u5de5\u5177\u50b3\u905e\u5230\u53e6\u4e00\u500b\u5de5\u5177\u3002\u5efa\u8b70\u7684\u505a\u6cd5\u662f\u4f7f\u7528 session state \u4e2d\u7684 <code>temp:</code> \u524d\u7db4\u3002</p> <p>\u4e00\u500b\u5de5\u5177\u53ef\u4ee5\u5c07\u8cc7\u6599\u5beb\u5165 <code>temp:</code> \u8b8a\u6578\uff0c\u5f8c\u7e8c\u7684\u5de5\u5177\u5247\u53ef\u4ee5\u8b80\u53d6\u9019\u500b\u8b8a\u6578\u3002\u9019\u4e9b\u8cc7\u6599\u50c5\u5728\u76ee\u524d\u7684\u547c\u53eb\u904e\u7a0b\u4e2d\u6709\u6548\uff0c\u4e4b\u5f8c\u6703\u88ab\u6e05\u9664\u3002</p> <p>Shared Invocation Context</p> <p>\u5728\u55ae\u4e00 agent \u56de\u5408\uff08agent turn\uff09\u5167\u7684\u6240\u6709\u5de5\u5177\u547c\u53eb\uff08tool calls\uff09\u90fd\u6703\u5171\u7528\u76f8\u540c\u7684 <code>InvocationContext</code>\u3002\u9019\u4e5f\u8868\u793a\u5b83\u5011\u6703\u5171\u7528\u76f8\u540c\u7684\u66ab\u5b58\uff08<code>temp:</code>\uff09\u72c0\u614b\uff0c\u9019\u5c31\u662f\u8cc7\u6599\u80fd\u5920\u5728\u5b83\u5011\u4e4b\u9593\u50b3\u905e\u7684\u65b9\u5f0f\u3002</p>"},{"location":"tools/function-tools/#_8","title":"\u7bc4\u4f8b","text":"\u7bc4\u4f8b PythonJava <p>This tool is a python function which obtains the Stock price of a given Stock ticker/ symbol.</p> <p>Note: You need to <code>pip install yfinance</code> library before using this tool.</p> <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import Agent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.genai import types\n\nimport yfinance as yf\n\n\nAPP_NAME = \"stock_app\"\nUSER_ID = \"1234\"\nSESSION_ID = \"session1234\"\n\ndef get_stock_price(symbol: str):\n    \"\"\"\n    Retrieves the current stock price for a given symbol.\n\n    Args:\n        symbol (str): The stock symbol (e.g., \"AAPL\", \"GOOG\").\n\n    Returns:\n        float: The current stock price, or None if an error occurs.\n    \"\"\"\n    try:\n        stock = yf.Ticker(symbol)\n        historical_data = stock.history(period=\"1d\")\n        if not historical_data.empty:\n            current_price = historical_data['Close'].iloc[-1]\n            return current_price\n        else:\n            return None\n    except Exception as e:\n        print(f\"Error retrieving stock price for {symbol}: {e}\")\n        return None\n\n\nstock_price_agent = Agent(\n    model='gemini-2.0-flash',\n    name='stock_agent',\n    instruction= 'You are an agent who retrieves stock prices. If a ticker symbol is provided, fetch the current price. If only a company name is given, first perform a Google search to find the correct ticker symbol before retrieving the stock price. If the provided ticker symbol is invalid or data cannot be retrieved, inform the user that the stock price could not be found.',\n    description='This agent specializes in retrieving real-time stock prices. Given a stock ticker symbol (e.g., AAPL, GOOG, MSFT) or the stock name, use the tools and reliable data sources to provide the most up-to-date price.',\n    tools=[get_stock_price], # You can add Python functions directly to the tools list; they will be automatically wrapped as FunctionTools.\n)\n\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=stock_price_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"stock price of GOOG\")\n</code></pre> <p>The return value from this tool will be wrapped into a dictionary.</p> <pre><code>{\"result\": \"$123\"}\n</code></pre> <p>This tool retrieves the mocked value of a stock price.</p> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class StockPriceAgent {\n\n  private static final String APP_NAME = \"stock_agent\";\n  private static final String USER_ID = \"user1234\";\n\n  // Mock data for various stocks functionality\n  // NOTE: This is a MOCK implementation. In a real Java application,\n  // you would use a financial data API or library.\n  private static final Map&lt;String, Double&gt; mockStockPrices = new HashMap&lt;&gt;();\n\n  static {\n    mockStockPrices.put(\"GOOG\", 1.0);\n    mockStockPrices.put(\"AAPL\", 1.0);\n    mockStockPrices.put(\"MSFT\", 1.0);\n  }\n\n  @Schema(description = \"Retrieves the current stock price for a given symbol.\")\n  public static Map&lt;String, Object&gt; getStockPrice(\n      @Schema(description = \"The stock symbol (e.g., \\\"AAPL\\\", \\\"GOOG\\\")\",\n        name = \"symbol\")\n      String symbol) {\n\n    try {\n      if (mockStockPrices.containsKey(symbol.toUpperCase())) {\n        double currentPrice = mockStockPrices.get(symbol.toUpperCase());\n        System.out.println(\"Tool: Found price for \" + symbol + \": \" + currentPrice);\n        return Map.of(\"symbol\", symbol, \"price\", currentPrice);\n      } else {\n        return Map.of(\"symbol\", symbol, \"error\", \"No data found for symbol\");\n      }\n    } catch (Exception e) {\n      return Map.of(\"symbol\", symbol, \"error\", e.getMessage());\n    }\n  }\n\n  public static void callAgent(String prompt) {\n    // Create the FunctionTool from the Java method\n    FunctionTool getStockPriceTool = FunctionTool.create(StockPriceAgent.class, \"getStockPrice\");\n\n    LlmAgent stockPriceAgent =\n        LlmAgent.builder()\n            .model(\"gemini-2.0-flash\")\n            .name(\"stock_agent\")\n            .instruction(\n                \"You are an agent who retrieves stock prices. If a ticker symbol is provided, fetch the current price. If only a company name is given, first perform a Google search to find the correct ticker symbol before retrieving the stock price. If the provided ticker symbol is invalid or data cannot be retrieved, inform the user that the stock price could not be found.\")\n            .description(\n                \"This agent specializes in retrieving real-time stock prices. Given a stock ticker symbol (e.g., AAPL, GOOG, MSFT) or the stock name, use the tools and reliable data sources to provide the most up-to-date price.\")\n            .tools(getStockPriceTool) // Add the Java FunctionTool\n            .build();\n\n    // Create an InMemoryRunner\n    InMemoryRunner runner = new InMemoryRunner(stockPriceAgent, APP_NAME);\n    // InMemoryRunner automatically creates a session service. Create a session using the service\n    Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n    Content userMessage = Content.fromParts(Part.fromText(prompt));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n\n  public static void main(String[] args) {\n    callAgent(\"stock price of GOOG\");\n    callAgent(\"What's the price of MSFT?\");\n    callAgent(\"Can you find the stock price for an unknown company XYZ?\");\n  }\n}\n</code></pre> <p>The return value from this tool will be wrapped into a Map. <pre><code>For input `GOOG`: {\"symbol\": \"GOOG\", \"price\": \"1.0\"}\n</code></pre>"},{"location":"tools/function-tools/#_9","title":"\u6700\u4f73\u5be6\u8e10","text":"<p>\u96d6\u7136\u4f60\u5728\u5b9a\u7fa9\u5de5\u5177\u51fd\u5f0f\u6642\u64c1\u6709\u76f8\u7576\u5927\u7684\u5f48\u6027\uff0c\u4f46\u8acb\u8a18\u4f4f\uff0c\u7c21\u55ae\u6027\u6709\u52a9\u65bc\u63d0\u5347\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7684\u53ef\u7528\u6027\u3002\u5efa\u8b70\u9075\u5faa\u4ee5\u4e0b\u6307\u5f15\uff1a</p> <ul> <li>\u53c3\u6578\u8d8a\u5c11\u8d8a\u597d\uff1a \u76e1\u91cf\u6e1b\u5c11\u53c3\u6578\u6578\u91cf\uff0c\u4ee5\u964d\u4f4e\u8907\u96dc\u5ea6\u3002  </li> <li>\u7c21\u55ae\u8cc7\u6599\u578b\u5225\uff1a \u512a\u5148\u4f7f\u7528\u50cf\u662f <code>str</code> \u548c <code>int</code> \u9019\u985e\u7684\u539f\u59cb\u8cc7\u6599\u578b\u5225\uff0c\u76e1\u91cf\u907f\u514d\u81ea\u8a02\u985e\u5225\u3002  </li> <li>\u5177\u610f\u7fa9\u7684\u547d\u540d\uff1a \u51fd\u5f0f\u540d\u7a31\u8207\u53c3\u6578\u540d\u7a31\u5c0d\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5982\u4f55\u89e3\u8b80\u8207\u904b\u7528\u8a72\u5de5\u5177\u6709\u91cd\u5927\u5f71\u97ff\u3002\u8acb\u9078\u64c7\u80fd\u6e05\u695a\u53cd\u6620\u51fd\u5f0f\u7528\u9014\u53ca\u8f38\u5165\u610f\u7fa9\u7684\u540d\u7a31\uff0c\u907f\u514d\u4f7f\u7528\u50cf <code>do_stuff()</code> \u6216 <code>beAgent()</code> \u9019\u985e\u6cdb\u7528\u540d\u7a31\u3002</li> <li>\u70ba\u5e73\u884c\u57f7\u884c\u800c\u8a2d\u8a08\uff1a \u7576\u591a\u500b\u5de5\u5177\u540c\u6642\u904b\u884c\u6642\uff0c\u900f\u904e\u8a2d\u8a08\u70ba\u975e\u540c\u6b65\u64cd\u4f5c\u4f86\u63d0\u5347\u5de5\u5177\u547c\u53eb (tool calls) \u7684\u6548\u80fd\u3002\u95dc\u65bc\u5982\u4f55\u555f\u7528\u5de5\u5177\u7684\u5e73\u884c\u57f7\u884c\uff0c\u8acb\u53c3\u95b1 Increase tool performance with parallel execution\u3002</li> </ul>"},{"location":"tools/function-tools/#long-run-tool","title":"\u9577\u6642\u9593\u904b\u884c\u7684 Function Tools","text":"<p>\u6b64\u5de5\u5177\u8a2d\u8a08\u7528\u65bc\u5354\u52a9\u4f60\u555f\u52d5\u4e26\u7ba1\u7406\u9700\u8981\u5728 agent \u5de5\u4f5c\u6d41\u7a0b\u4e4b\u5916\u57f7\u884c\u3001\u4e14\u9700\u5927\u91cf\u8655\u7406\u6642\u9593\u7684\u4efb\u52d9\uff0c\u540c\u6642\u4e0d\u6703\u963b\u585e agent \u7684\u57f7\u884c\u3002\u9019\u500b\u5de5\u5177\u662f <code>FunctionTool</code> \u7684\u5b50\u985e\u5225\u3002</p> <p>\u7576\u4f60\u4f7f\u7528 <code>LongRunningFunctionTool</code> \u6642\uff0c\u51fd\u5f0f\u53ef\u4ee5\u555f\u52d5\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c\uff0c\u4e26\u53ef\u9078\u64c7\u6027\u5730\u56de\u50b3\u521d\u59cb\u7d50\u679c\uff0c\u4f8b\u5982\u9577\u6642\u9593\u904b\u884c\u64cd\u4f5c\u7684 ID\u3002\u4e00\u65e6\u9577\u6642\u9593\u904b\u884c\u7684 function tool \u88ab\u547c\u53eb\uff0cagent runner \u6703\u66ab\u505c agent \u7684\u904b\u884c\uff0c\u4e26\u8b93 agent client \u6c7a\u5b9a\u662f\u5426\u7e7c\u7e8c\u6216\u7b49\u5f85\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c\u5b8c\u6210\u3002agent client \u53ef\u4ee5\u67e5\u8a62\u9577\u6642\u9593\u904b\u884c\u64cd\u4f5c\u7684\u9032\u5ea6\uff0c\u4e26\u56de\u50b3\u4e2d\u9593\u6216\u6700\u7d42\u56de\u61c9\u3002agent \u96a8\u5f8c\u53ef\u4ee5\u7e7c\u7e8c\u57f7\u884c\u5176\u4ed6\u4efb\u52d9\u3002\u8209\u4f8b\u4f86\u8aaa\uff0c\u5728 human-in-the-loop\uff08\u4eba\u985e\u53c3\u8207\uff09\u60c5\u5883\u4e0b\uff0cagent \u9700\u8981\u7372\u5f97\u4eba\u985e\u6279\u51c6\u5f8c\u624d\u80fd\u7e7c\u7e8c\u57f7\u884c\u4efb\u52d9\u3002</p> <p>Warning: Execution handling</p> <p>\u9577\u6642\u9593\u57f7\u884c\u51fd\u5f0f\u5de5\u5177\uff08Long Running Function Tools\uff09\u65e8\u5728\u5354\u52a9\u4f60\u5728 agent \u5de5\u4f5c\u6d41\u7a0b\u4e2d\u555f\u52d5\u4e26\u7ba1\u7406\u9577\u6642\u9593\u57f7\u884c\u7684\u4efb\u52d9\uff0c\u4f46\u4e0d\u6703\u5be6\u969b\u57f7\u884c\u9019\u4e9b\u9577\u6642\u9593\u4efb\u52d9\u3002\u5c0d\u65bc\u9700\u8981\u82b1\u8cbb\u5927\u91cf\u6642\u9593\u624d\u80fd\u5b8c\u6210\u7684\u4efb\u52d9\uff0c\u5efa\u8b70\u4f60\u5be6\u4f5c\u4e00\u500b\u7368\u7acb\u7684\u4f3a\u670d\u5668\u4f86\u8655\u7406\u8a72\u4efb\u52d9\u3002</p> <p>Tip: Parallel execution</p> <p>\u6839\u64da\u4f60\u6240\u5efa\u69cb\u7684\u5de5\u5177\u985e\u578b\uff0c\u8a2d\u8a08\u70ba\u975e\u540c\u6b65\uff08asynchronous\uff09\u64cd\u4f5c\u901a\u5e38\u6703\u6bd4\u5efa\u7acb\u9577\u6642\u9593\u904b\u884c\u7684\u5de5\u5177\u4f86\u5f97\u66f4\u597d\u3002\u6b32\u4e86\u89e3\u66f4\u591a\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1\u5229\u7528\u5e73\u884c\u57f7\u884c\u63d0\u5347\u5de5\u5177\u6548\u80fd\u3002</p>"},{"location":"tools/function-tools/#_10","title":"\u904b\u4f5c\u65b9\u5f0f\u8aaa\u660e","text":"<p>\u5728 Python \u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>LongRunningFunctionTool</code> \u5c07\u51fd\u5f0f\u5305\u88dd\u8d77\u4f86\u3002\u5728 Java \u4e2d\uff0c\u5247\u662f\u5c07 Method \u540d\u7a31\u50b3\u905e\u7d66 <code>LongRunningFunctionTool.create()</code>\u3002</p> <ol> <li> <p>\u555f\u52d5\u968e\u6bb5\uff1a\u7576\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb\u8a72\u5de5\u5177\u6642\uff0c\u4f60\u7684\u51fd\u5f0f\u6703\u555f\u52d5\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c\u3002</p> </li> <li> <p>\u521d\u59cb\u56de\u5831\uff1a\u4f60\u7684\u51fd\u5f0f\u53ef\u4ee5\u9078\u64c7\u6027\u5730\u56de\u50b3\u521d\u6b65\u7d50\u679c\uff08\u4f8b\u5982\u9577\u6642\u9593\u904b\u884c\u64cd\u4f5c\u7684 id\uff09\u3002Agent Development Kit (ADK) \u6846\u67b6\u6703\u5c07\u9019\u500b\u7d50\u679c\u5305\u88dd\u5728 <code>FunctionResponse</code> \u4e2d\u56de\u50b3\u7d66 LLM\u3002\u9019\u8b93 LLM \u53ef\u4ee5\u901a\u77e5\u4f7f\u7528\u8005\uff08\u4f8b\u5982\u72c0\u614b\u3001\u5b8c\u6210\u767e\u5206\u6bd4\u3001\u8a0a\u606f\u7b49\uff09\u3002\u96a8\u5f8c\uff0cagent \u57f7\u884c\u6703\u7d50\u675f\u6216\u66ab\u505c\u3002</p> </li> <li> <p>\u7e7c\u7e8c\u6216\u7b49\u5f85\uff1a\u6bcf\u6b21 agent \u57f7\u884c\u7d50\u675f\u5f8c\uff0cagent client \u53ef\u4ee5\u67e5\u8a62\u9577\u6642\u9593\u904b\u884c\u64cd\u4f5c\u7684\u9032\u5ea6\uff0c\u4e26\u6c7a\u5b9a\u662f\u8981\u4ee5\u4e2d\u9593\u56de\u61c9\uff08\u7528\u65bc\u66f4\u65b0\u9032\u5ea6\uff09\u7e7c\u7e8c agent \u57f7\u884c\uff0c\u9084\u662f\u7b49\u5f85\u76f4\u5230\u53d6\u5f97\u6700\u7d42\u56de\u61c9\u3002agent client \u61c9\u5c07\u4e2d\u9593\u6216\u6700\u7d42\u56de\u61c9\u56de\u50b3\u7d66 agent\uff0c\u4ee5\u9032\u884c\u4e0b\u4e00\u6b21\u57f7\u884c\u3002</p> </li> <li> <p>\u6846\u67b6\u8655\u7406\uff1aAgent Development Kit (ADK) \u6846\u67b6\u8ca0\u8cac\u7ba1\u7406\u6574\u500b\u57f7\u884c\u6d41\u7a0b\u3002\u5b83\u6703\u5c07 agent client \u50b3\u56de\u7684\u4e2d\u9593\u6216\u6700\u7d42 <code>FunctionResponse</code> \u50b3\u9001\u7d66 LLM\uff0c\u4ee5\u7522\u751f\u5c0d\u4f7f\u7528\u8005\u53cb\u5584\u7684\u8a0a\u606f\u3002</p> </li> </ol>"},{"location":"tools/function-tools/#_11","title":"\u5efa\u7acb\u5de5\u5177","text":"<p>\u5b9a\u7fa9\u4f60\u7684\u5de5\u5177\u51fd\u5f0f\uff08tool function\uff09\uff0c\u4e26\u4f7f\u7528 <code>LongRunningFunctionTool</code> \u985e\u5225\u5c07\u5176\u5305\u88dd\uff1a</p> PythonJava <pre><code># 1. Define the long running function\ndef ask_for_approval(\n    purpose: str, amount: float\n) -&gt; dict[str, Any]:\n    \"\"\"Ask for approval for the reimbursement.\"\"\"\n    # create a ticket for the approval\n    # Send a notification to the approver with the link of the ticket\n    return {'status': 'pending', 'approver': 'Sean Zhou', 'purpose' : purpose, 'amount': amount, 'ticket-id': 'approval-ticket-1'}\n\ndef reimburse(purpose: str, amount: float) -&gt; str:\n    \"\"\"Reimburse the amount of money to the employee.\"\"\"\n    # send the reimbrusement request to payment vendor\n    return {'status': 'ok'}\n\n# 2. Wrap the function with LongRunningFunctionTool\nlong_running_tool = LongRunningFunctionTool(func=ask_for_approval)\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.tools.LongRunningFunctionTool;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ExampleLongRunningFunction {\n\n  // Define your Long Running function.\n  // Ask for approval for the reimbursement.\n  public static Map&lt;String, Object&gt; askForApproval(String purpose, double amount) {\n    // Simulate creating a ticket and sending a notification\n    System.out.println(\n        \"Simulating ticket creation for purpose: \" + purpose + \", amount: \" + amount);\n\n    // Send a notification to the approver with the link of the ticket\n    Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();\n    result.put(\"status\", \"pending\");\n    result.put(\"approver\", \"Sean Zhou\");\n    result.put(\"purpose\", purpose);\n    result.put(\"amount\", amount);\n    result.put(\"ticket-id\", \"approval-ticket-1\");\n    return result;\n  }\n\n  public static void main(String[] args) throws NoSuchMethodException {\n    // Pass the method to LongRunningFunctionTool.create\n    LongRunningFunctionTool approveTool =\n        LongRunningFunctionTool.create(ExampleLongRunningFunction.class, \"askForApproval\");\n\n    // Include the tool in the agent\n    LlmAgent approverAgent =\n        LlmAgent.builder()\n            // ...\n            .tools(approveTool)\n            .build();\n  }\n}\n</code></pre>"},{"location":"tools/function-tools/#_12","title":"\u4e2d\u9593 / \u6700\u7d42\u7d50\u679c\u66f4\u65b0","text":"<p>Agent client \u6703\u6536\u5230\u5305\u542b\u9577\u6642\u9593\u57f7\u884c\u5de5\u5177\u547c\u53eb (function calls) \u7684\u4e8b\u4ef6\uff0c\u4e26\u6aa2\u67e5\u8a72 ticket \u7684\u72c0\u614b\u3002\u63a5\u8457\uff0cAgent client \u53ef\u4ee5\u5c07\u4e2d\u9593\u6216\u6700\u7d42\u56de\u61c9\u50b3\u56de\uff0c\u4ee5\u66f4\u65b0\u9032\u5ea6\u3002\u6846\u67b6\u6703\u5c07\u9019\u500b\u503c\uff08\u5373\u4f7f\u662f None\uff09\u5305\u88dd\u5728<code>FunctionResponse</code>\u7684\u5167\u5bb9\u4e2d\uff0c\u4e26\u56de\u50b3\u7d66\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\u3002</p> \u50c5\u9069\u7528\u65bc Java Agent Development Kit (ADK) <p>When passing <code>ToolContext</code> with Function Tools, ensure that one of the following is true:</p> <ul> <li> <p>The Schema is passed with the ToolContext parameter in the function signature, like:   <pre><code>@com.google.adk.tools.Annotations.Schema(name = \"toolContext\") ToolContext toolContext\n</code></pre> OR</p> </li> <li> <p>The following <code>-parameters</code> flag is set to the mvn compiler plugin</p> </li> </ul> <p><pre><code>&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n            &lt;version&gt;3.14.0&lt;/version&gt; &lt;!-- or newer --&gt;\n            &lt;configuration&gt;\n                &lt;compilerArgs&gt;\n                    &lt;arg&gt;-parameters&lt;/arg&gt;\n                &lt;/compilerArgs&gt;\n            &lt;/configuration&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre> This constraint is temporary and will be removed.</p> PythonJava <pre><code># Agent Interaction\nasync def call_agent_async(query):\n\n    def get_long_running_function_call(event: Event) -&gt; types.FunctionCall:\n        # Get the long running function call from the event\n        if not event.long_running_tool_ids or not event.content or not event.content.parts:\n            return\n        for part in event.content.parts:\n            if (\n                part\n                and part.function_call\n                and event.long_running_tool_ids\n                and part.function_call.id in event.long_running_tool_ids\n            ):\n                return part.function_call\n\n    def get_function_response(event: Event, function_call_id: str) -&gt; types.FunctionResponse:\n        # Get the function response for the fuction call with specified id.\n        if not event.content or not event.content.parts:\n            return\n        for part in event.content.parts:\n            if (\n                part\n                and part.function_response\n                and part.function_response.id == function_call_id\n            ):\n                return part.function_response\n\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n\n    print(\"\\nRunning agent...\")\n    events_async = runner.run_async(\n        session_id=session.id, user_id=USER_ID, new_message=content\n    )\n\n\n    long_running_function_call, long_running_function_response, ticket_id = None, None, None\n    async for event in events_async:\n        # Use helper to check for the specific auth request event\n        if not long_running_function_call:\n            long_running_function_call = get_long_running_function_call(event)\n        else:\n            _potential_response = get_function_response(event, long_running_function_call.id)\n            if _potential_response: # Only update if we get a non-None response\n                long_running_function_response = _potential_response\n                ticket_id = long_running_function_response.response['ticket-id']\n        if event.content and event.content.parts:\n            if text := ''.join(part.text or '' for part in event.content.parts):\n                print(f'[{event.author}]: {text}')\n\n\n    if long_running_function_response:\n        # query the status of the correpsonding ticket via tciket_id\n        # send back an intermediate / final response\n        updated_response = long_running_function_response.model_copy(deep=True)\n        updated_response.response = {'status': 'approved'}\n        async for event in runner.run_async(\n          session_id=session.id, user_id=USER_ID, new_message=types.Content(parts=[types.Part(function_response = updated_response)], role='user')\n        ):\n            if event.content and event.content.parts:\n                if text := ''.join(part.text or '' for part in event.content.parts):\n                    print(f'[{event.author}]: {text}')\n</code></pre> <p>\uff08\u8b6f\u8a3b\uff1a\u6b64\u5340\u584a\u6a19\u793a\u70ba Java \u76f8\u95dc\u5167\u5bb9\uff0c\u8acb\u4f9d\u7167\u5f8c\u7e8c\u5167\u5bb9\u9032\u884c\u7ffb\u8b6f\u3002\u5982\u539f\u6587\u50c5\u6709\u6b64\u6a19\u984c\uff0c\u5247\u7121\u9700\u984d\u5916\u7ffb\u8b6f\u5167\u5bb9\u3002\uff09</p> <pre><code>```java\n\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.LongRunningFunctionTool;\nimport com.google.adk.tools.ToolContext;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.FunctionCall;\nimport com.google.genai.types.FunctionResponse;\nimport com.google.genai.types.Part;\nimport java.util.Optional;\nimport java.util.UUID;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.stream.Collectors;\n\npublic class LongRunningFunctionExample {\n\n  private static String USER_ID = \"user123\";\n\n  @Schema(\n      name = \"create_ticket_long_running\",\n      description = \"\"\"\n          Creates a new support ticket with a specified urgency level.\n          Examples of urgency are 'high', 'medium', or 'low'.\n          The ticket creation is a long-running process, and its ID will be provided when ready.\n      \"\"\")\n  public static void createTicketAsync(\n      @Schema(\n              name = \"urgency\",\n              description =\n                  \"The urgency level for the new ticket, such as 'high', 'medium', or 'low'.\")\n          String urgency,\n      @Schema(name = \"toolContext\") // Ensures ADK injection\n          ToolContext toolContext) {\n    System.out.printf(\n        \"TOOL_EXEC: 'create_ticket_long_running' called with urgency: %s (Call ID: %s)%n\",\n        urgency, toolContext.functionCallId().orElse(\"N/A\"));\n  }\n\n  public static void main(String[] args) {\n    LlmAgent agent =\n        LlmAgent.builder()\n            .name(\"ticket_agent\")\n            .description(\"Agent for creating tickets via a long-running task.\")\n            .model(\"gemini-2.0-flash\")\n            .tools(\n                ImmutableList.of(\n                    LongRunningFunctionTool.create(\n                        LongRunningFunctionExample.class, \"createTicketAsync\")))\n            .build();\n\n    Runner runner = new InMemoryRunner(agent);\n    Session session =\n        runner.sessionService().createSession(agent.name(), USER_ID, null, null).blockingGet();\n\n    // --- Turn 1: User requests ticket ---\n    System.out.println(\"\\n--- Turn 1: User Request ---\");\n    Content initialUserMessage =\n        Content.fromParts(Part.fromText(\"Create a high urgency ticket for me.\"));\n\n    AtomicReference&lt;String&gt; funcCallIdRef = new AtomicReference&lt;&gt;();\n    runner\n        .runAsync(USER_ID, session.id(), initialUserMessage)\n        .blockingForEach(\n            event -&gt; {\n              printEventSummary(event, \"T1\");\n              if (funcCallIdRef.get() == null) { // Capture the first relevant function call ID\n                event.content().flatMap(Content::parts).orElse(ImmutableList.of()).stream()\n                    .map(Part::functionCall)\n                    .flatMap(Optional::stream)\n                    .filter(fc -&gt; \"create_ticket_long_running\".equals(fc.name().orElse(\"\")))\n                    .findFirst()\n                    .flatMap(FunctionCall::id)\n                    .ifPresent(funcCallIdRef::set);\n              }\n            });\n\n    if (funcCallIdRef.get() == null) {\n      System.out.println(\"ERROR: Tool 'create_ticket_long_running' not called in Turn 1.\");\n      return;\n    }\n    System.out.println(\"ACTION: Captured FunctionCall ID: \" + funcCallIdRef.get());\n\n    // --- Turn 2: App provides initial ticket_id (simulating async tool completion) ---\n    System.out.println(\"\\n--- Turn 2: App provides ticket_id ---\");\n    String ticketId = \"TICKET-\" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n    FunctionResponse ticketCreatedFuncResponse =\n        FunctionResponse.builder()\n            .name(\"create_ticket_long_running\")\n            .id(funcCallIdRef.get())\n            .response(ImmutableMap.of(\"ticket_id\", ticketId))\n            .build();\n    Content appResponseWithTicketId =\n        Content.builder()\n            .parts(\n                ImmutableList.of(\n                    Part.builder().functionResponse(ticketCreatedFuncResponse).build()))\n            .role(\"user\")\n            .build();\n\n    runner\n        .runAsync(USER_ID, session.id(), appResponseWithTicketId)\n        .blockingForEach(event -&gt; printEventSummary(event, \"T2\"));\n    System.out.println(\"ACTION: Sent ticket_id \" + ticketId + \" to agent.\");\n\n    // --- Turn 3: App provides ticket status update ---\n    System.out.println(\"\\n--- Turn 3: App provides ticket status ---\");\n    FunctionResponse ticketStatusFuncResponse =\n        FunctionResponse.builder()\n            .name(\"create_ticket_long_running\")\n            .id(funcCallIdRef.get())\n            .response(ImmutableMap.of(\"status\", \"approved\", \"ticket_id\", ticketId))\n            .build();\n    Content appResponseWithStatus =\n        Content.builder()\n            .parts(\n                ImmutableList.of(Part.builder().functionResponse(ticketStatusFuncResponse).build()))\n            .role(\"user\")\n            .build();\n\n    runner\n        .runAsync(USER_ID, session.id(), appResponseWithStatus)\n        .blockingForEach(event -&gt; printEventSummary(event, \"T3_FINAL\"));\n    System.out.println(\"Long running function completed successfully.\");\n  }\n\n  private static void printEventSummary(Event event, String turnLabel) {\n    event\n        .content()\n        .ifPresent(\n            content -&gt; {\n              String text =\n                  content.parts().orElse(ImmutableList.of()).stream()\n                      .map(part -&gt; part.text().orElse(\"\"))\n                      .filter(s -&gt; !s.isEmpty())\n                      .collect(Collectors.joining(\" \"));\n              if (!text.isEmpty()) {\n                System.out.printf(\"[%s][%s_TEXT]: %s%n\", turnLabel, event.author(), text);\n              }\n              content.parts().orElse(ImmutableList.of()).stream()\n                  .map(Part::functionCall)\n                  .flatMap(Optional::stream)\n                  .findFirst() // Assuming one function call per relevant event for simplicity\n                  .ifPresent(\n                      fc -&gt;\n                          System.out.printf(\n                              \"[%s][%s_CALL]: %s(%s) ID: %s%n\",\n                              turnLabel,\n                              event.author(),\n                              fc.name().orElse(\"N/A\"),\n                              fc.args().orElse(ImmutableMap.of()),\n                              fc.id().orElse(\"N/A\")));\n            });\n  }\n}\n\n```\n</code></pre> Python \u5b8c\u6574\u7bc4\u4f8b\uff1a\u6a94\u6848\u8655\u7406\u6a21\u64ec <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport asyncio\nfrom typing import Any\nfrom google.adk.agents import Agent\nfrom google.adk.events import Event\nfrom google.adk.runners import Runner\nfrom google.adk.tools import LongRunningFunctionTool\nfrom google.adk.sessions import InMemorySessionService\nfrom google.genai import types\n\n\n# 1. Define the long running function\ndef ask_for_approval(\n    purpose: str, amount: float\n) -&gt; dict[str, Any]:\n    \"\"\"Ask for approval for the reimbursement.\"\"\"\n    # create a ticket for the approval\n    # Send a notification to the approver with the link of the ticket\n    return {'status': 'pending', 'approver': 'Sean Zhou', 'purpose' : purpose, 'amount': amount, 'ticket-id': 'approval-ticket-1'}\n\ndef reimburse(purpose: str, amount: float) -&gt; str:\n    \"\"\"Reimburse the amount of money to the employee.\"\"\"\n    # send the reimbrusement request to payment vendor\n    return {'status': 'ok'}\n\n# 2. Wrap the function with LongRunningFunctionTool\nlong_running_tool = LongRunningFunctionTool(func=ask_for_approval)\n\n\n# 3. Use the tool in an Agent\nfile_processor_agent = Agent(\n    # Use a model compatible with function calling\n    model=\"gemini-2.0-flash\",\n    name='reimbursement_agent',\n    instruction=\"\"\"\n      You are an agent whose job is to handle the reimbursement process for\n      the employees. If the amount is less than $100, you will automatically\n      approve the reimbursement.\n\n      If the amount is greater than $100, you will\n      ask for approval from the manager. If the manager approves, you will\n      call reimburse() to reimburse the amount to the employee. If the manager\n      rejects, you will inform the employee of the rejection.\n    \"\"\",\n    tools=[reimburse, long_running_tool]\n)\n\n\nAPP_NAME = \"human_in_the_loop\"\nUSER_ID = \"1234\"\nSESSION_ID = \"session1234\"\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=file_processor_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n\n# Agent Interaction\nasync def call_agent_async(query):\n\n    def get_long_running_function_call(event: Event) -&gt; types.FunctionCall:\n        # Get the long running function call from the event\n        if not event.long_running_tool_ids or not event.content or not event.content.parts:\n            return\n        for part in event.content.parts:\n            if (\n                part\n                and part.function_call\n                and event.long_running_tool_ids\n                and part.function_call.id in event.long_running_tool_ids\n            ):\n                return part.function_call\n\n    def get_function_response(event: Event, function_call_id: str) -&gt; types.FunctionResponse:\n        # Get the function response for the fuction call with specified id.\n        if not event.content or not event.content.parts:\n            return\n        for part in event.content.parts:\n            if (\n                part\n                and part.function_response\n                and part.function_response.id == function_call_id\n            ):\n                return part.function_response\n\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n\n    print(\"\\nRunning agent...\")\n    events_async = runner.run_async(\n        session_id=session.id, user_id=USER_ID, new_message=content\n    )\n\n\n    long_running_function_call, long_running_function_response, ticket_id = None, None, None\n    async for event in events_async:\n        # Use helper to check for the specific auth request event\n        if not long_running_function_call:\n            long_running_function_call = get_long_running_function_call(event)\n        else:\n            _potential_response = get_function_response(event, long_running_function_call.id)\n            if _potential_response: # Only update if we get a non-None response\n                long_running_function_response = _potential_response\n                ticket_id = long_running_function_response.response['ticket-id']\n        if event.content and event.content.parts:\n            if text := ''.join(part.text or '' for part in event.content.parts):\n                print(f'[{event.author}]: {text}')\n\n\n    if long_running_function_response:\n        # query the status of the correpsonding ticket via tciket_id\n        # send back an intermediate / final response\n        updated_response = long_running_function_response.model_copy(deep=True)\n        updated_response.response = {'status': 'approved'}\n        async for event in runner.run_async(\n          session_id=session.id, user_id=USER_ID, new_message=types.Content(parts=[types.Part(function_response = updated_response)], role='user')\n        ):\n            if event.content and event.content.parts:\n                if text := ''.join(part.text or '' for part in event.content.parts):\n                    print(f'[{event.author}]: {text}')\n\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\n\n# reimbursement that doesn't require approval\n# asyncio.run(call_agent_async(\"Please reimburse 50$ for meals\"))\nawait call_agent_async(\"Please reimburse 50$ for meals\") # For Notebooks, uncomment this line and comment the above line\n# reimbursement that requires approval\n# asyncio.run(call_agent_async(\"Please reimburse 200$ for meals\"))\nawait call_agent_async(\"Please reimburse 200$ for meals\") # For Notebooks, uncomment this line and comment the above line\n</code></pre>"},{"location":"tools/function-tools/#_13","title":"\u6b64\u7bc4\u4f8b\u7684\u91cd\u9ede","text":"<ul> <li> <p><code>LongRunningFunctionTool</code>\uff1a\u5305\u88dd\u6240\u63d0\u4f9b\u7684\u65b9\u6cd5\uff0f\u51fd\u5f0f\uff1b\u6846\u67b6\u6703\u81ea\u52d5\u8655\u7406\u5c07\u8b93\u6e21\uff08yielded\uff09\u7684\u66f4\u65b0\u8207\u6700\u7d42\u56de\u50b3\u503c\uff0c\u4f9d\u5e8f\u4f5c\u70ba FunctionResponse \u50b3\u9001\u3002</p> </li> <li> <p>Agent \u6307\u4ee4\uff1a\u6307\u793a\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u4f7f\u7528\u8a72\u5de5\u5177\uff0c\u4e26\u7406\u89e3\u6536\u5230\u7684 FunctionResponse \u4e32\u6d41\uff08\u9032\u5ea6 vs. \u5b8c\u6210\uff09\uff0c\u4ee5\u4fbf\u5411\u4f7f\u7528\u8005\u63d0\u4f9b\u66f4\u65b0\u3002</p> </li> <li> <p>\u6700\u7d42\u56de\u50b3\uff1a\u8a72\u51fd\u5f0f\u6703\u56de\u50b3\u6700\u7d42\u7684\u7d50\u679c\u5b57\u5178\uff0c\u4e26\u65bc\u6700\u5f8c\u7684 FunctionResponse \u4e2d\u50b3\u9001\uff0c\u4ee5\u8868\u793a\u5df2\u5b8c\u6210\u3002</p> </li> </ul>"},{"location":"tools/function-tools/#agent-tool","title":"Agent-as-a-Tool","text":"<p>\u9019\u9805\u5f37\u5927\u7684\u529f\u80fd\u8b93\u4f60\u53ef\u4ee5\u5728\u7cfb\u7d71\u5167\uff0c\u5c07\u5176\u4ed6 agent \u7576\u4f5c\u5de5\u5177\u4f86\u8abf\u7528\u3002Agent-as-a-Tool \u8b93\u4f60\u80fd\u5920\u547c\u53eb\u53e6\u4e00\u500b agent \u4f86\u57f7\u884c\u7279\u5b9a\u4efb\u52d9\uff0c\u5be6\u73fe\u8cac\u4efb\u59d4\u6d3e\u3002\u9019\u5728\u6982\u5ff5\u4e0a\u985e\u4f3c\u65bc\u5efa\u7acb\u4e00\u500b Python \u51fd\u5f0f\uff0c\u8a72\u51fd\u5f0f\u6703\u547c\u53eb\u53e6\u4e00\u500b agent\uff0c\u4e26\u5c07\u8a72 agent \u7684\u56de\u61c9\u4f5c\u70ba\u51fd\u5f0f\u7684\u56de\u50b3\u503c\u3002</p>"},{"location":"tools/function-tools/#agent","title":"\u8207\u5b50 agent \u7684\u4e3b\u8981\u5dee\u7570","text":"<p>\u9700\u7279\u5225\u5340\u5206 Agent-as-a-Tool \u8207 Sub-Agent\uff08\u5b50 agent\uff09\u3002</p> <ul> <li> <p>Agent-as-a-Tool\uff1a \u7576 Agent A \u4ee5\u5de5\u5177\u65b9\u5f0f\u547c\u53eb Agent B\uff08\u4f7f\u7528 Agent-as-a-Tool\uff09\u6642\uff0cAgent B \u7684\u7b54\u6848\u6703\u50b3\u56de\u7d66 Agent A\uff0c\u63a5\u8457\u7531 Agent A \u5f59\u6574\u7b54\u6848\u4e26\u7522\u751f\u56de\u61c9\u7d66\u4f7f\u7528\u8005\u3002Agent A \u4fdd\u6301\u4e3b\u63a7\u6b0a\uff0c\u4e26\u6301\u7e8c\u8655\u7406\u5f8c\u7e8c\u7684\u4f7f\u7528\u8005\u8f38\u5165\u3002</p> </li> <li> <p>Sub-agent\uff1a \u7576 Agent A \u4ee5\u5b50 agent \u65b9\u5f0f\u547c\u53eb Agent B \u6642\uff0c\u56de\u7b54\u4f7f\u7528\u8005\u7684\u8cac\u4efb\u6703\u5b8c\u5168\u8f49\u79fb\u7d66 Agent B\u3002Agent A \u5be6\u969b\u4e0a\u5c31\u4e0d\u518d\u53c3\u8207\u6d41\u7a0b\u3002\u6240\u6709\u5f8c\u7e8c\u7684\u4f7f\u7528\u8005\u8f38\u5165\u90fd\u6703\u7531 Agent B \u56de\u61c9\u3002</p> </li> </ul>"},{"location":"tools/function-tools/#_14","title":"\u4f7f\u7528\u65b9\u5f0f","text":"<p>\u82e5\u8981\u5c07 agent \u7576\u4f5c\u5de5\u5177\u4f7f\u7528\uff0c\u8acb\u4f7f\u7528 AgentTool \u985e\u5225\u5305\u88dd\u8a72 agent\u3002</p> Python <pre><code>tools=[AgentTool(agent=agent_b)]\n</code></pre> <pre><code>=== \"Java\"\n</code></pre> <pre><code>```java\nAgentTool.create(agent)\n```\n</code></pre>"},{"location":"tools/function-tools/#_15","title":"\u81ea\u8a02\u5316","text":"<p><code>AgentTool</code> \u985e\u5225\u63d0\u4f9b\u4ee5\u4e0b\u5c6c\u6027\uff0c\u4ee5\u4fbf\u81ea\u8a02\u5176\u884c\u70ba\uff1a</p> <ul> <li>skip_summarization: bool\uff1a \u82e5\u8a2d\u70ba True\uff0c\u6846\u67b6\u5c07\u7565\u904e\u57fa\u65bc\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7684\u5de5\u5177 agent \u56de\u61c9\u6458\u8981\u8655\u7406\u3002\u7576\u5de5\u5177\u7684\u56de\u61c9\u5df2\u7d93\u683c\u5f0f\u826f\u597d\u4e14\u4e0d\u9700\u8981\u9032\u4e00\u6b65\u8655\u7406\u6642\uff0c\u9019\u500b\u9078\u9805\u6703\u5f88\u6709\u7528\u3002</li> </ul> \u7bc4\u4f8b PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import Agent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools.agent_tool import AgentTool\nfrom google.genai import types\n\nAPP_NAME=\"summary_agent\"\nUSER_ID=\"user1234\"\nSESSION_ID=\"1234\"\n\nsummary_agent = Agent(\n    model=\"gemini-2.0-flash\",\n    name=\"summary_agent\",\n    instruction=\"\"\"You are an expert summarizer. Please read the following text and provide a concise summary.\"\"\",\n    description=\"Agent to summarize text\",\n)\n\nroot_agent = Agent(\n    model='gemini-2.0-flash',\n    name='root_agent',\n    instruction=\"\"\"You are a helpful assistant. When the user provides a text, use the 'summarize' tool to generate a summary. Always forward the user's message exactly as received to the 'summarize' tool, without modifying or summarizing it yourself. Present the response from the tool to the user.\"\"\",\n    tools=[AgentTool(agent=summary_agent, skip_summarization=True)]\n)\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=root_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n\nlong_text = \"\"\"Quantum computing represents a fundamentally different approach to computation, \nleveraging the bizarre principles of quantum mechanics to process information. Unlike classical computers \nthat rely on bits representing either 0 or 1, quantum computers use qubits which can exist in a state of superposition - effectively \nbeing 0, 1, or a combination of both simultaneously. Furthermore, qubits can become entangled, \nmeaning their fates are intertwined regardless of distance, allowing for complex correlations. This parallelism and \ninterconnectedness grant quantum computers the potential to solve specific types of incredibly complex problems - such \nas drug discovery, materials science, complex system optimization, and breaking certain types of cryptography - far \nfaster than even the most powerful classical supercomputers could ever achieve, although the technology is still largely in its developmental stages.\"\"\"\n\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(long_text)\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.events.Event;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.AgentTool;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.reactivex.rxjava3.core.Flowable;\n\npublic class AgentToolCustomization {\n\n  private static final String APP_NAME = \"summary_agent\";\n  private static final String USER_ID = \"user1234\";\n\n  public static void initAgentAndRun(String prompt) {\n\n    LlmAgent summaryAgent =\n        LlmAgent.builder()\n            .model(\"gemini-2.0-flash\")\n            .name(\"summaryAgent\")\n            .instruction(\n                \"You are an expert summarizer. Please read the following text and provide a concise summary.\")\n            .description(\"Agent to summarize text\")\n            .build();\n\n    // Define root_agent\n    LlmAgent rootAgent =\n        LlmAgent.builder()\n            .model(\"gemini-2.0-flash\")\n            .name(\"rootAgent\")\n            .instruction(\n                \"You are a helpful assistant. When the user provides a text, always use the 'summaryAgent' tool to generate a summary. Always forward the user's message exactly as received to the 'summaryAgent' tool, without modifying or summarizing it yourself. Present the response from the tool to the user.\")\n            .description(\"Assistant agent\")\n            .tools(AgentTool.create(summaryAgent, true)) // Set skipSummarization to true\n            .build();\n\n    // Create an InMemoryRunner\n    InMemoryRunner runner = new InMemoryRunner(rootAgent, APP_NAME);\n    // InMemoryRunner automatically creates a session service. Create a session using the service\n    Session session = runner.sessionService().createSession(APP_NAME, USER_ID).blockingGet();\n    Content userMessage = Content.fromParts(Part.fromText(prompt));\n\n    // Run the agent\n    Flowable&lt;Event&gt; eventStream = runner.runAsync(USER_ID, session.id(), userMessage);\n\n    // Stream event response\n    eventStream.blockingForEach(\n        event -&gt; {\n          if (event.finalResponse()) {\n            System.out.println(event.stringifyContent());\n          }\n        });\n  }\n\n  public static void main(String[] args) {\n    String longText =\n        \"\"\"\n            Quantum computing represents a fundamentally different approach to computation,\n            leveraging the bizarre principles of quantum mechanics to process information. Unlike classical computers\n            that rely on bits representing either 0 or 1, quantum computers use qubits which can exist in a state of superposition - effectively\n            being 0, 1, or a combination of both simultaneously. Furthermore, qubits can become entangled,\n            meaning their fates are intertwined regardless of distance, allowing for complex correlations. This parallelism and\n            interconnectedness grant quantum computers the potential to solve specific types of incredibly complex problems - such\n            as drug discovery, materials science, complex system optimization, and breaking certain types of cryptography - far\n            faster than even the most powerful classical supercomputers could ever achieve, although the technology is still largely in its developmental stages.\"\"\";\n\n    initAgentAndRun(longText);\n  }\n}\n</code></pre>"},{"location":"tools/function-tools/#_16","title":"\u904b\u4f5c\u65b9\u5f0f","text":"<ol> <li>\u7576 <code>main_agent</code> \u6536\u5230\u9577\u6587\u672c\u6642\uff0c\u5176\u6307\u4ee4\u6703\u544a\u8a34\u5b83\u91dd\u5c0d\u9577\u6587\u672c\u4f7f\u7528 <code>summarize</code> \u5de5\u5177\u3002  </li> <li>\u6846\u67b6\u6703\u5c07 <code>summarize</code> \u8fa8\u8b58\u70ba\u5305\u88dd <code>summary_agent</code> \u7684 <code>AgentTool</code>\u3002  </li> <li>\u5728\u80cc\u666f\u6d41\u7a0b\u4e2d\uff0c<code>main_agent</code> \u6703\u4ee5\u9577\u6587\u672c\u4f5c\u70ba\u8f38\u5165\uff0c\u547c\u53eb <code>summary_agent</code>\u3002  </li> <li><code>summary_agent</code> \u6703\u4f9d\u64da\u5176\u6307\u4ee4\u8655\u7406\u6587\u672c\u4e26\u7522\u751f\u6458\u8981\u3002  </li> <li>\u4f86\u81ea <code>summary_agent</code> \u7684\u56de\u61c9\u6703\u518d\u50b3\u56de\u7d66 <code>main_agent</code>\u3002 </li> <li><code>main_agent</code> \u4fbf\u53ef\u5229\u7528\u8a72\u6458\u8981\uff0c\u7d44\u6210\u6700\u7d42\u56de\u61c9\u7d66\u4f7f\u7528\u8005\uff08\u4f8b\u5982\uff1a\u300c\u9019\u662f\u8a72\u6587\u672c\u7684\u6458\u8981\uff1a...\u300d\uff09</li> </ol>"},{"location":"tools/google-cloud-tools.en/","title":"Google Cloud Tools","text":"<p>Google Cloud tools make it easier to connect your agents to Google Cloud\u2019s products and services. With just a few lines of code you can use these tools to connect your agents with:</p> <ul> <li>Any custom APIs that developers host in Apigee.</li> <li>100s of prebuilt connectors to enterprise systems such as Salesforce,   Workday, and SAP.</li> <li>Automation workflows built using application integration.</li> <li>Databases such as Spanner, AlloyDB, Postgres and more using the MCP Toolbox for   databases.</li> </ul> <p></p>"},{"location":"tools/google-cloud-tools.en/#apigee-api-hub-tools","title":"Apigee API Hub Tools","text":"<p>ApiHubToolset lets you turn any documented API from Apigee API hub into a tool with a few lines of code. This section shows you the step by step instructions including setting up authentication for a secure connection to your APIs.</p> <p>Prerequisites</p> <ol> <li>Install ADK</li> <li>Install the    Google Cloud CLI.</li> <li>Apigee API hub     instance with documented (i.e. OpenAPI spec) APIs</li> <li>Set up your project structure and create required files</li> </ol> <pre><code>project_root_folder\n |\n `-- my_agent\n     |-- .env\n     |-- __init__.py\n     |-- agent.py\n     `__ tool.py\n</code></pre>"},{"location":"tools/google-cloud-tools.en/#create-an-api-hub-toolset","title":"Create an API Hub Toolset","text":"<p>Note: This tutorial includes an agent creation. If you already have an agent, you only need to follow a subset of these steps.</p> <ol> <li> <p>Get your access token, so that APIHubToolset can fetch spec from API Hub API.    In your terminal run the following command</p> <pre><code>gcloud auth print-access-token\n# Prints your access token like 'ya29....'\n</code></pre> </li> <li> <p>Ensure that the account used has the required permissions. You can use the    pre-defined role <code>roles/apihub.viewer</code> or assign the following permissions:</p> <ol> <li>apihub.specs.get (required)</li> <li>apihub.apis.get (optional)</li> <li>apihub.apis.list (optional)</li> <li>apihub.versions.get (optional)</li> <li>apihub.versions.list (optional)</li> <li>apihub.specs.list (optional)</li> </ol> </li> <li> <p>Create a tool with <code>APIHubToolset</code>. Add the below to <code>tools.py</code></p> <p>If your API requires authentication, you must configure authentication for the tool. The following code sample demonstrates how to configure an API key. ADK supports token based auth (API Key, Bearer token), service account, and OpenID Connect. We will soon add support for various OAuth2 flows.</p> <pre><code>from google.adk.tools.openapi_tool.auth.auth_helpers import token_to_scheme_credential\nfrom google.adk.tools.apihub_tool.apihub_toolset import APIHubToolset\n\n# Provide authentication for your APIs. Not required if your APIs don't required authentication.\nauth_scheme, auth_credential = token_to_scheme_credential(\n    \"apikey\", \"query\", \"apikey\", apikey_credential_str\n)\n\nsample_toolset = APIHubToolset(\n    name=\"apihub-sample-tool\",\n    description=\"Sample Tool\",\n    access_token=\"...\",  # Copy your access token generated in step 1\n    apihub_resource_name=\"...\", # API Hub resource name\n    auth_scheme=auth_scheme,\n    auth_credential=auth_credential,\n)\n</code></pre> <p>For production deployment we recommend using a service account instead of an access token. In the code snippet above, use <code>service_account_json=service_account_cred_json_str</code> and provide your security account credentials instead of the token.</p> <p>For apihub_resource_name, if you know the specific ID of the OpenAPI Spec being used for your API, use <code>`projects/my-project-id/locations/us-west1/apis/my-api-id/versions/version-id/specs/spec-id`</code>. If you would like the Toolset to automatically pull the first available spec from the API, use <code>`projects/my-project-id/locations/us-west1/apis/my-api-id`</code></p> </li> <li> <p>Create your agent file Agent.py and add the created tools to your agent    definition:</p> <pre><code>from google.adk.agents.llm_agent import LlmAgent\nfrom .tools import sample_toolset\n\nroot_agent = LlmAgent(\n    model='gemini-2.0-flash',\n    name='enterprise_assistant',\n    instruction='Help user, leverage the tools you have access to',\n    tools=sample_toolset.get_tools(),\n)\n</code></pre> </li> <li> <p>Configure your <code>__init__.py</code> to expose your agent</p> <pre><code>from . import agent\n</code></pre> </li> <li> <p>Start the Google ADK Web UI and try your agent:</p> <pre><code># make sure to run `adk web` from your project_root_folder\nadk web\n</code></pre> </li> </ol> <p>Then go to http://localhost:8000 to try your agent from the Web UI.</p>"},{"location":"tools/google-cloud-tools.en/#application-integration-tools","title":"Application Integration Tools","text":"<p>With ApplicationIntegrationToolset, you can seamlessly give your agents secure and governed access to enterprise applications using Integration Connectors' 100+ pre-built connectors for systems like Salesforce, ServiceNow, JIRA, SAP, and more. </p> <p>It supports both on-premise and SaaS applications. In addition, you can turn your existing Application Integration process automations into agentic workflows by providing application integration workflows as tools to your ADK agents.</p>"},{"location":"tools/google-cloud-tools.en/#prerequisites","title":"Prerequisites","text":""},{"location":"tools/google-cloud-tools.en/#1-install-adk","title":"1. Install ADK","text":"PythonJava <p>Install the latest version of ADK. For information about the latest version of ADK, see Agent Development Kit Walkthrough.</p> <p>Install the latest version of ADK. For information about the latest version of ADK, see Agent Development Kit Walkthrough.</p>"},{"location":"tools/google-cloud-tools.en/#2-install-cli","title":"2. Install CLI","text":"PythonJava <p>Install Google Cloud CLI. To use the tool with default credentials, run the following commands:</p> <pre><code>gcloud config set project &lt;project-id&gt;\ngcloud auth application-default login\ngcloud auth application-default set-quota-project &lt;project-id&gt;\n</code></pre> <p>Replace <code>&lt;project-id&gt;</code> with the unique ID of your Google Cloud project.</p> <p>Install Google Cloud CLI. To use the tool with default credentials, run the following commands:</p> <pre><code>gcloud config set project &lt;project-id&gt;\ngcloud auth application-default login\ngcloud auth application-default set-quota-project &lt;project-id&gt;\n</code></pre> <p>Replace <code>&lt;project-id&gt;</code> with the unique ID of your Google Cloud project.</p>"},{"location":"tools/google-cloud-tools.en/#3-provision-application-integration-workflow-and-publish-connection-tool","title":"3. Provision Application Integration workflow and publish Connection Tool","text":"PythonJava <p>Use an existing Application Integration workflow or Integrations Connector connection you want to use with your agent. You can also create a new Application Integration workflow or a connection.</p> <p>Import and publish the Connection Tool from the template library.</p> <p>Note: To use a connector from Integration Connectors, you need to provision Application Integration in the same region as your connection.</p> <p>Use an existing Application Integration workflow or Integrations Connector connection you want to use with your agent. You can also create a new Application Integration workflow or a connection.</p> <p>Import and publish the Connection Tool from the template library.</p> <p>Note: To use a connector from Integration Connectors, you need to provision Application Integration in the same region as your connection, import and publish Connection Tool from the template library.</p>"},{"location":"tools/google-cloud-tools.en/#4-create-project-structure","title":"4. Create project structure","text":"PythonJava <p>Set up your project structure and create required files.</p> <pre><code>project_root_folder\n|-- .env\n`-- my_agent\n    |-- __init__.py\n    |-- agent.py\n    `__ tools.py\n</code></pre> <p>When running the agent, make sure to run <code>adk web</code> in the <code>project\\_root_folder</code>.</p> <p>Set up your project structure and create required files.</p> <pre><code>```console\n  project_root_folder\n  |-- my_agent\n  |   |-- agent.java\n  |   `-- pom.xml\n```\n</code></pre> <p>When running the agent, make sure to run the commands in the <code>project\\_root_folder</code>.</p>"},{"location":"tools/google-cloud-tools.en/#5-set-roles-and-permissions","title":"5. Set roles and permissions","text":"PythonJava <p>To get the permissions that you need to set up ApplicationIntegrationToolset, you must have the following IAM roles on the project (common to both Integration Connectors and Application Integration Workflows):</p> <ul> <li><code>roles/integrations.integrationEditor</code></li> <li><code>roles/connectors.invoker</code></li> <li><code>roles/secretmanager.secretAccessor</code></li> </ul> <p>Note: For Agent Engine (AE), don't use <code>roles/integrations.integrationInvoker</code>, as it can result in 403 errors. Use <code>roles/integrations.integrationEditor</code> instead.</p> <p>To get the permissions that you need to set up ApplicationIntegrationToolset, you must have the following IAM roles on the project (common to both Integration Connectors and Application Integration Workflows):</p> <ul> <li><code>roles/integrations.integrationEditor</code></li> <li><code>roles/connectors.invoker</code></li> <li><code>roles/secretmanager.secretAccessor</code></li> </ul> <p>Note: For Agent Engine (AE), don't use <code>roles/integrations.integrationInvoker</code>, as it can result in 403 errors. Use <code>roles/integrations.integrationEditor</code> instead.</p>"},{"location":"tools/google-cloud-tools.en/#use-integration-connectors","title":"Use Integration Connectors","text":"<p>Connect your agent to enterprise applications using Integration Connectors.</p>"},{"location":"tools/google-cloud-tools.en/#before-you-begin","title":"Before you begin","text":"<p>Note: The ExecuteConnection integration is typically created automatically when you provision Application Integration in a given region. If the ExecuteConnection doesn't exist in the list of integrations, you must follow these steps to create it:</p> <ol> <li>To use a connector from Integration Connectors, click QUICK SETUP and provision    Application Integration in the same region as your connection.</li> </ol> <p></p> <ol> <li> <p>Go to the Connection Tool    template in the template library and click USE TEMPLATE.</p> <p></p> </li> <li> <p>Enter the Integration Name as ExecuteConnection (it is mandatory to use this exact integration name only).    Then, select the region to match your connection region and click CREATE.</p> </li> <li> <p>Click PUBLISH to publish the integration in the Application Integration editor.</p> <p></p> </li> </ol>"},{"location":"tools/google-cloud-tools.en/#create-an-application-integration-toolset","title":"Create an Application Integration Toolset","text":"<p>To create an Application Integration Toolset for Integration Connectors, follow these steps: </p> <ol> <li> <p>Create a tool with <code>ApplicationIntegrationToolset</code> in the <code>tools.py</code> file:</p> <pre><code>from google.adk.tools.application_integration_tool.application_integration_toolset import ApplicationIntegrationToolset\n\nconnector_tool = ApplicationIntegrationToolset(\n    project=\"test-project\", # TODO: replace with GCP project of the connection\n    location=\"us-central1\", #TODO: replace with location of the connection\n    connection=\"test-connection\", #TODO: replace with connection name\n    entity_operations={\"Entity_One\": [\"LIST\",\"CREATE\"], \"Entity_Two\": []},#empty list for actions means all operations on the entity are supported.\n    actions=[\"action1\"], #TODO: replace with actions\n    service_account_json='{...}', # optional. Stringified json for service account key\n    tool_name_prefix=\"tool_prefix2\",\n    tool_instructions=\"...\"\n)\n</code></pre> <p>Note:</p> <ul> <li>You can provide a service account to be used instead of default credentials by generating a Service Account Key, and providing the right Application Integration and Integration Connector IAM roles to the service account.</li> <li>To find the list of supported entities and actions for a connection, use the Connectors APIs: listActions or listEntityTypes.</li> </ul> <p><code>ApplicationIntegrationToolset</code> supports <code>auth_scheme</code> and <code>auth_credential</code> for dynamic OAuth2 authentication for Integration Connectors. To use it, create a tool similar to this in the <code>tools.py</code> file:</p> <pre><code>from google.adk.tools.application_integration_tool.application_integration_toolset import ApplicationIntegrationToolset\nfrom google.adk.tools.openapi_tool.auth.auth_helpers import dict_to_auth_scheme\nfrom google.adk.auth import AuthCredential\nfrom google.adk.auth import AuthCredentialTypes\nfrom google.adk.auth import OAuth2Auth\n\noauth2_data_google_cloud = {\n  \"type\": \"oauth2\",\n  \"flows\": {\n      \"authorizationCode\": {\n          \"authorizationUrl\": \"https://accounts.google.com/o/oauth2/auth\",\n          \"tokenUrl\": \"https://oauth2.googleapis.com/token\",\n          \"scopes\": {\n              \"https://www.googleapis.com/auth/cloud-platform\": (\n                  \"View and manage your data across Google Cloud Platform\"\n                  \" services\"\n              ),\n              \"https://www.googleapis.com/auth/calendar.readonly\": \"View your calendars\"\n          },\n      }\n  },\n}\n\noauth_scheme = dict_to_auth_scheme(oauth2_data_google_cloud)\n\nauth_credential = AuthCredential(\n  auth_type=AuthCredentialTypes.OAUTH2,\n  oauth2=OAuth2Auth(\n      client_id=\"...\", #TODO: replace with client_id\n      client_secret=\"...\", #TODO: replace with client_secret\n  ),\n)\n\nconnector_tool = ApplicationIntegrationToolset(\n    project=\"test-project\", # TODO: replace with GCP project of the connection\n    location=\"us-central1\", #TODO: replace with location of the connection\n    connection=\"test-connection\", #TODO: replace with connection name\n    entity_operations={\"Entity_One\": [\"LIST\",\"CREATE\"], \"Entity_Two\": []},#empty list for actions means all operations on the entity are supported.\n    actions=[\"GET_calendars/%7BcalendarId%7D/events\"], #TODO: replace with actions. this one is for list events\n    service_account_json='{...}', # optional. Stringified json for service account key\n    tool_name_prefix=\"tool_prefix2\",\n    tool_instructions=\"...\",\n    auth_scheme=oauth_scheme,\n    auth_credential=auth_credential\n)\n</code></pre> </li> <li> <p>Update the <code>agent.py</code> file and add tool to your agent:</p> <pre><code>from google.adk.agents.llm_agent import LlmAgent\nfrom .tools import connector_tool\n\nroot_agent = LlmAgent(\n    model='gemini-2.0-flash',\n    name='connector_agent',\n    instruction=\"Help user, leverage the tools you have access to\",\n    tools=[connector_tool],\n)\n</code></pre> </li> <li> <p>Configure  <code>__init__.py</code> to expose your agent:</p> <pre><code>from . import agent\n</code></pre> </li> <li> <p>Start the Google ADK Web UI and use your agent:</p> <pre><code># make sure to run `adk web` from your project_root_folder\nadk web\n</code></pre> </li> </ol> <p>After completing the above steps, go to http://localhost:8000, and choose    <code>my\\_agent</code> agent (which is the same as the agent folder name).</p>"},{"location":"tools/google-cloud-tools.en/#use-application-integration-workflows","title":"Use Application Integration Workflows","text":"<p>Use an existing Application Integration workflow as a tool for your agent or create a new one.</p>"},{"location":"tools/google-cloud-tools.en/#1-create-a-tool","title":"1. Create a tool","text":"PythonJava <p>To create a tool with <code>ApplicationIntegrationToolset</code> in the <code>tools.py</code> file, use the following code:</p> <pre><code>    integration_tool = ApplicationIntegrationToolset(\n        project=\"test-project\", # TODO: replace with GCP project of the connection\n        location=\"us-central1\", #TODO: replace with location of the connection\n        integration=\"test-integration\", #TODO: replace with integration name\n        triggers=[\"api_trigger/test_trigger\"],#TODO: replace with trigger id(s). Empty list would mean all api triggers in the integration to be considered.\n        service_account_json='{...}', #optional. Stringified json for service account key\n        tool_name_prefix=\"tool_prefix1\",\n        tool_instructions=\"...\"\n    )\n</code></pre> <p>Note: You can provide a service account to be used instead of using default credentials. To do this, generate a Service Account Key and provide the correct       Application Integration and Integration Connector IAM roles to the service account. For more details about the IAM roles, refer to the Prerequisites section.</p> <p>To create a tool with <code>ApplicationIntegrationToolset</code> in the <code>tools.java</code> file, use the following code:</p> <pre><code>    import com.google.adk.tools.applicationintegrationtoolset.ApplicationIntegrationToolset;\n    import com.google.common.collect.ImmutableList;\n    import com.google.common.collect.ImmutableMap;\n\n    public class Tools {\n        private static ApplicationIntegrationToolset integrationTool;\n        private static ApplicationIntegrationToolset connectionsTool;\n\n        static {\n            integrationTool = new ApplicationIntegrationToolset(\n                    \"test-project\",\n                    \"us-central1\",\n                    \"test-integration\",\n                    ImmutableList.of(\"api_trigger/test-api\"),\n                    null,\n                    null,\n                    null,\n                    \"{...}\",\n                    \"tool_prefix1\",\n                    \"...\");\n\n            connectionsTool = new ApplicationIntegrationToolset(\n                    \"test-project\",\n                    \"us-central1\",\n                    null,\n                    null,\n                    \"test-connection\",\n                    ImmutableMap.of(\"Issue\", ImmutableList.of(\"GET\")),\n                    ImmutableList.of(\"ExecuteCustomQuery\"),\n                    \"{...}\",\n                    \"tool_prefix\",\n                    \"...\");\n        }\n    }\n</code></pre> <p>Note: You can provide a service account to be used instead of using default credentials. To do this, generate a Service Account Key and provide the correct Application Integration and Integration Connector IAM roles to the service account. For more details about the IAM roles, refer to the Prerequisites section.</p>"},{"location":"tools/google-cloud-tools.en/#2-add-the-tool-to-your-agent","title":"2. Add the tool to your agent","text":"PythonJava <p>To update the <code>agent.py</code> file and add the tool to your agent, use the following code:</p> <pre><code>    from google.adk.agents.llm_agent import LlmAgent\n    from .tools import integration_tool, connector_tool\n\n    root_agent = LlmAgent(\n        model='gemini-2.0-flash',\n        name='integration_agent',\n        instruction=\"Help user, leverage the tools you have access to\",\n        tools=[integration_tool],\n    )\n</code></pre> <p>To update the <code>agent.java</code> file and add the tool to your agent, use the following code:</p> <p>```java       import com.google.adk.agent.LlmAgent;       import com.google.adk.tools.BaseTool;       import com.google.common.collect.ImmutableList;</p> <pre><code>    public class MyAgent {\n        public static void main(String[] args) {\n            // Assuming Tools class is defined as in the previous step\n            ImmutableList&lt;BaseTool&gt; tools = ImmutableList.&lt;BaseTool&gt;builder()\n                    .add(Tools.integrationTool)\n                    .add(Tools.connectionsTool)\n                    .build();\n\n            // Finally, create your agent with the tools generated automatically.\n            LlmAgent rootAgent = LlmAgent.builder()\n                    .name(\"science-teacher\")\n                    .description(\"Science teacher agent\")\n                    .model(\"gemini-2.0-flash\")\n                    .instruction(\n                            \"Help user, leverage the tools you have access to.\"\n                    )\n                    .tools(tools)\n                    .build();\n\n            // You can now use rootAgent to interact with the LLM\n            // For example, you can start a conversation with the agent.\n        }\n    }\n</code></pre> <p>```</p> <p>Note: To find the list of supported entities and actions for a     connection, use these Connector APIs: <code>listActions</code>, <code>listEntityTypes</code>.    </p>"},{"location":"tools/google-cloud-tools.en/#3-expose-your-agent","title":"3. Expose your agent","text":"Python <p>To configure <code>__init__.py</code> to expose your agent, use the following code:</p> <pre><code>    from . import agent\n</code></pre>"},{"location":"tools/google-cloud-tools.en/#4-use-your-agent","title":"4. Use your agent","text":"PythonJava <p>To start the Google ADK Web UI and use your agent, use the following commands:</p> <p><pre><code>    # make sure to run `adk web` from your project_root_folder\n    adk web\n</code></pre> After completing the above steps, go to http://localhost:8000, and choose the <code>my_agent</code> agent (which is the same as the agent folder name).</p> <p>To start the Google ADK Web UI and use your agent, use the following commands:</p> <pre><code>    mvn install\n\n    mvn exec:java \\\n        -Dexec.mainClass=\"com.google.adk.web.AdkWebServer\" \\\n        -Dexec.args=\"--adk.agents.source-dir=src/main/java\" \\\n        -Dexec.classpathScope=\"compile\"\n</code></pre> <p>After completing the above steps, go to http://localhost:8000, and choose the <code>my_agent</code> agent (which is the same as the agent folder name).</p>"},{"location":"tools/google-cloud-tools.en/#toolbox-tools-for-databases","title":"Toolbox Tools for Databases","text":"<p>MCP Toolbox for Databases is an open source MCP server for databases. It was designed with enterprise-grade and production-quality in mind. It enables you to develop tools easier, faster, and more securely by handling the complexities such as connection pooling, authentication, and more.</p> <p>Google\u2019s Agent Development Kit (ADK) has built in support for Toolbox. For more information on getting started or configuring Toolbox, see the documentation.</p> <p></p>"},{"location":"tools/google-cloud-tools.en/#configure-and-deploy","title":"Configure and deploy","text":"<p>Toolbox is an open source server that you deploy and manage yourself. For more instructions on deploying and configuring, see the official Toolbox documentation:</p> <ul> <li>Installing the Server</li> <li>Configuring Toolbox</li> </ul>"},{"location":"tools/google-cloud-tools.en/#install-client-sdk","title":"Install client SDK","text":"<p>ADK relies on the <code>toolbox-core</code> python package to use Toolbox. Install the package before getting started:</p> <pre><code>pip install toolbox-core\n</code></pre>"},{"location":"tools/google-cloud-tools.en/#loading-toolbox-tools","title":"Loading Toolbox Tools","text":"<p>Once you\u2019re Toolbox server is configured and up and running, you can load tools from your server using ADK:</p> <pre><code>from google.adk.agents import Agent\nfrom toolbox_core import ToolboxSyncClient\n\ntoolbox = ToolboxSyncClient(\"https://127.0.0.1:5000\")\n\n# Load a specific set of tools\ntools = toolbox.load_toolset('my-toolset-name'),\n# Load single tool\ntools = toolbox.load_tool('my-tool-name'),\n\nroot_agent = Agent(\n    ...,\n    tools=tools # Provide the list of tools to the Agent\n\n)\n</code></pre>"},{"location":"tools/google-cloud-tools.en/#advanced-toolbox-features","title":"Advanced Toolbox Features","text":"<p>Toolbox has a variety of features to make developing Gen AI tools for databases. For more information, read more about the following features:</p> <ul> <li>Authenticated Parameters: bind tool inputs to values from OIDC tokens automatically, making it easy to run sensitive queries without potentially leaking data</li> <li>Authorized Invocations:  restrict access to use a tool based on the users Auth token</li> <li>OpenTelemetry: get metrics and tracing from Toolbox with OpenTelemetry</li> </ul>"},{"location":"tools/google-cloud-tools/","title":"Google Cloud \u5de5\u5177","text":"<p>Google Cloud \u5de5\u5177\u53ef\u8b93\u4f60\u66f4\u8f15\u9b06\u5730\u5c07 agent \u9023\u63a5\u5230 Google Cloud \u7684\u7522\u54c1\u8207\u670d\u52d9\u3002\u53ea\u9700\u5e7e\u884c\u7a0b\u5f0f\u78bc\uff0c\u4f60\u5c31\u80fd\u4f7f\u7528\u9019\u4e9b\u5de5\u5177\u5c07 agent \u9023\u63a5\u81f3\uff1a</p> <ul> <li>\u4efb\u4f55\u7531\u958b\u767c\u4eba\u54e1\u5728 Apigee \u4e0a\u67b6\u8a2d\u7684\u81ea\u8a02 API</li> <li>\u6578\u767e\u7a2e\u9810\u5efa\u9023\u63a5\u5668\uff0c\u53ef\u9023\u63a5\u81f3\u4f01\u696d\u7cfb\u7d71\uff0c\u5982 Salesforce\u3001Workday \u548c SAP</li> <li>\u900f\u904e\u61c9\u7528\u7a0b\u5f0f\u6574\u5408\u6240\u5efa\u7acb\u7684\u81ea\u52d5\u5316\u5de5\u4f5c\u6d41\u7a0b</li> <li>\u4f7f\u7528 MCP Toolbox for databases \u9023\u63a5\u5982 Spanner\u3001AlloyDB\u3001Postgres \u7b49\u8cc7\u6599\u5eab</li> </ul> <p></p>"},{"location":"tools/google-cloud-tools/#apigee-api-hub","title":"Apigee API Hub \u5de5\u5177","text":"<p>ApiHubToolset \u8b93\u4f60\u53ea\u9700\u5e7e\u884c\u7a0b\u5f0f\u78bc\uff0c\u5373\u53ef\u5c07\u4efb\u4f55\u4f86\u81ea Apigee API hub \u7684\u5df2\u6587\u4ef6\u5316 API \u8f49\u63db\u70ba\u5de5\u5177\u3002\u672c\u7bc0\u5c07\u9010\u6b65\u8aaa\u660e\u76f8\u95dc\u64cd\u4f5c\uff0c\u5305\u62ec\u5982\u4f55\u8a2d\u5b9a\u9a57\u8b49\uff0c\u4ee5\u5b89\u5168\u9023\u63a5\u4f60\u7684 API\u3002</p> <p>\u5148\u6c7a\u689d\u4ef6</p> <ol> <li>\u5b89\u88dd Agent Development Kit (ADK)</li> <li>\u5b89\u88dd Google Cloud CLI</li> <li>\u64c1\u6709 Apigee API hub \u5be6\u4f8b\uff0c\u4e14\u5176\u4e2d\u5305\u542b\u5df2\u6587\u4ef6\u5316\uff08\u5373 OpenAPI \u898f\u683c\uff09\u7684 API</li> <li>\u8a2d\u5b9a\u4f60\u7684\u5c08\u6848\u7d50\u69cb\u4e26\u5efa\u7acb\u6240\u9700\u6a94\u6848</li> </ol> <pre><code>project_root_folder\n |\n `-- my_agent\n     |-- .env\n     |-- __init__.py\n     |-- agent.py\n     `__ tool.py\n</code></pre>"},{"location":"tools/google-cloud-tools/#api-hub","title":"\u5efa\u7acb API Hub \u5de5\u5177\u7d44","text":"<p>\u6ce8\u610f\uff1a\u672c\u6559\u5b78\u5305\u542b agent \u7684\u5efa\u7acb\u3002\u5982\u679c\u4f60\u5df2\u7d93\u6709\u4e00\u500b agent\uff0c\u53ea\u9700\u4f9d\u7167\u90e8\u5206\u6b65\u9a5f\u64cd\u4f5c\u5373\u53ef\u3002</p> <ol> <li> <p>\u53d6\u5f97\u4f60\u7684 access token\uff0c\u4ee5\u4fbf APIHubToolset \u80fd\u5920\u5f9e API Hub API \u64f7\u53d6\u898f\u683c\u3002\u5728\u7d42\u7aef\u6a5f\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4</p> <pre><code>gcloud auth print-access-token\n# Prints your access token like 'ya29....'\n</code></pre> </li> <li> <p>\u78ba\u8a8d\u6240\u4f7f\u7528\u7684\u5e33\u6236\u5177\u5099\u6240\u9700\u6b0a\u9650\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u9810\u5148\u5b9a\u7fa9\u7684\u89d2\u8272 <code>roles/apihub.viewer</code>\uff0c\u6216\u6307\u6d3e\u4e0b\u5217\u6b0a\u9650\uff1a</p> <ol> <li>apihub.specs.get\uff08\u5fc5\u8981\uff09</li> <li>apihub.apis.get\uff08\u9078\u7528\uff09</li> <li>apihub.apis.list\uff08\u9078\u7528\uff09</li> <li>apihub.versions.get\uff08\u9078\u7528\uff09</li> <li>apihub.versions.list\uff08\u9078\u7528\uff09</li> <li>apihub.specs.list\uff08\u9078\u7528\uff09</li> </ol> </li> <li> <p>\u4f7f\u7528 <code>APIHubToolset</code> \u5efa\u7acb\u5de5\u5177\u3002\u5c07\u4ee5\u4e0b\u5167\u5bb9\u65b0\u589e\u81f3 <code>tools.py</code></p> <p>\u5982\u679c\u4f60\u7684 API \u9700\u8981\u9a57\u8b49\uff0c\u5fc5\u9808\u70ba\u8a72\u5de5\u5177\u8a2d\u5b9a\u9a57\u8b49\u6a5f\u5236\u3002\u4ee5\u4e0b\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u8aaa\u660e\u5982\u4f55\u8a2d\u5b9a API \u91d1\u9470\uff08API Key\uff09\u3002Agent Development Kit (ADK) \u652f\u63f4\u4ee5 token \u70ba\u57fa\u790e\u7684\u9a57\u8b49\uff08API Key\u3001Bearer token\uff09\u3001\u670d\u52d9\u5e33\u6236\uff08Service Account\uff09\u4ee5\u53ca OpenID Connect\u3002\u6211\u5011\u5373\u5c07\u652f\u63f4\u5404\u7a2e OAuth2 \u6d41\u7a0b\u3002</p> <pre><code>from google.adk.tools.openapi_tool.auth.auth_helpers import token_to_scheme_credential\nfrom google.adk.tools.apihub_tool.apihub_toolset import APIHubToolset\n\n# Provide authentication for your APIs. Not required if your APIs don't required authentication.\nauth_scheme, auth_credential = token_to_scheme_credential(\n    \"apikey\", \"query\", \"apikey\", apikey_credential_str\n)\n\nsample_toolset = APIHubToolset(\n    name=\"apihub-sample-tool\",\n    description=\"Sample Tool\",\n    access_token=\"...\",  # Copy your access token generated in step 1\n    apihub_resource_name=\"...\", # API Hub resource name\n    auth_scheme=auth_scheme,\n    auth_credential=auth_credential,\n)\n</code></pre> <p>\u5728\u6b63\u5f0f\u74b0\u5883\u90e8\u7f72\u6642\uff0c\u6211\u5011\u5efa\u8b70\u4f7f\u7528\u670d\u52d9\u5e33\u6236\uff08Service Account\uff09\u4f86\u53d6\u4ee3 access token\u3002\u5728\u4e0a\u8ff0\u7a0b\u5f0f\u78bc\u7247\u6bb5\u4e2d\uff0c\u8acb\u4f7f\u7528 <code>service_account_json=service_account_cred_json_str</code>\uff0c\u4e26\u63d0\u4f9b\u60a8\u7684\u670d\u52d9\u5e33\u6236\u6191\u8b49\uff0c\u800c\u975e\u4f7f\u7528 token\u3002</p> </li> </ol> <p>\u5c0d\u65bc apihub_resource_name\uff0c\u5982\u679c\u60a8\u5df2\u77e5\u8981\u7528\u65bc API \u7684\u7279\u5b9a OpenAPI \u898f\u683c\uff08OpenAPI Spec\uff09ID\uff0c\u8acb\u4f7f\u7528 <code>`projects/my-project-id/locations/us-west1/apis/my-api-id/versions/version-id/specs/spec-id`</code>\u3002 \u5982\u679c\u60a8\u5e0c\u671b API Hub \u5de5\u5177\u7d44\uff08Toolset\uff09\u81ea\u52d5\u5f9e API \u4e2d\u64f7\u53d6\u7b2c\u4e00\u500b\u53ef\u7528\u7684\u898f\u683c\uff0c\u8acb\u4f7f\u7528 <code>`projects/my-project-id/locations/us-west1/apis/my-api-id`</code>\u3002</p> <ol> <li> <p>\u5efa\u7acb\u60a8\u7684 agent \u6a94\u6848 Agent.py\uff0c\u4e26\u5c07\u5df2\u5efa\u7acb\u7684 tools \u52a0\u5165\u5230 agent \u5b9a\u7fa9\u4e2d\uff1a</p> <pre><code>from google.adk.agents.llm_agent import LlmAgent\nfrom .tools import sample_toolset\n\nroot_agent = LlmAgent(\n    model='gemini-2.0-flash',\n    name='enterprise_assistant',\n    instruction='Help user, leverage the tools you have access to',\n    tools=sample_toolset.get_tools(),\n)\n</code></pre> </li> <li> <p>\u8a2d\u5b9a\u4f60\u7684 <code>__init__.py</code> \u4ee5\u516c\u958b\u4f60\u7684 agent</p> <pre><code>from . import agent\n</code></pre> </li> <li> <p>\u555f\u52d5 Google Agent Development Kit (ADK) Web UI\uff0c\u4e26\u5617\u8a66\u4f60\u7684 agent\u3002</p> <pre><code># make sure to run `adk web` from your project_root_folder\nadk web\n</code></pre> </li> </ol> <p>\u7136\u5f8c\u524d\u5f80 http://localhost:8000\uff0c\u900f\u904e\u7db2\u9801 UI \u8a66\u7528\u4f60\u7684 agent\u3002</p>"},{"location":"tools/google-cloud-tools/#_1","title":"\u61c9\u7528\u7a0b\u5f0f\u6574\u5408\u5de5\u5177","text":"<p>\u4f7f\u7528 ApplicationIntegrationToolset\uff0c\u4f60\u53ef\u4ee5\u900f\u904e Integration Connectors \u63d0\u4f9b\u7684 100 \u591a\u7a2e\u9810\u5148\u5efa\u7f6e\u7684\u9023\u63a5\u5668\uff0c\u70ba\u4f60\u7684 agent \u7121\u7e2b\u63d0\u4f9b\u5b89\u5168\u4e14\u53d7\u6cbb\u7406\u7684\u4f01\u696d\u61c9\u7528\u7a0b\u5f0f\u5b58\u53d6\u6b0a\u9650\uff0c\u652f\u63f4\u5982 Salesforce\u3001ServiceNow\u3001JIRA\u3001SAP \u7b49\u7cfb\u7d71\u3002</p> <p>\u5b83\u540c\u6642\u652f\u63f4\u5167\u90e8\u90e8\u7f72\uff08on-premise\uff09\u8207 SaaS \u61c9\u7528\u7a0b\u5f0f\u3002\u6b64\u5916\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c07\u73fe\u6709\u7684\u61c9\u7528\u7a0b\u5f0f\u6574\u5408\u81ea\u52d5\u5316\u6d41\u7a0b\uff0c\u4f5c\u70ba\u5de5\u5177\uff08tools\uff09\u63d0\u4f9b\u7d66\u4f60\u7684 Agent Development Kit (ADK) agent\uff0c\u9032\u800c\u8f49\u63db\u70ba agentic \u5de5\u4f5c\u6d41\u7a0b\u3002</p>"},{"location":"tools/google-cloud-tools/#_2","title":"\u5148\u6c7a\u689d\u4ef6","text":""},{"location":"tools/google-cloud-tools/#1-adk","title":"1. \u5b89\u88dd ADK","text":"PythonJava <p>Install the latest version of ADK. For information about the latest version of ADK, see Agent Development Kit Walkthrough.</p> <p>Install the latest version of ADK. For information about the latest version of ADK, see Agent Development Kit Walkthrough.</p>"},{"location":"tools/google-cloud-tools/#2-command-line-interface","title":"2. \u5b89\u88dd\u547d\u4ee4\u5217\u4ecb\u9762 (Command Line Interface)","text":"PythonJava <p>Install Google Cloud CLI. To use the tool with default credentials, run the following commands:</p> <pre><code>gcloud config set project &lt;project-id&gt;\ngcloud auth application-default login\ngcloud auth application-default set-quota-project &lt;project-id&gt;\n</code></pre> <p>Replace <code>&lt;project-id&gt;</code> with the unique ID of your Google Cloud project.</p> <p>Install Google Cloud CLI. To use the tool with default credentials, run the following commands:</p> <pre><code>gcloud config set project &lt;project-id&gt;\ngcloud auth application-default login\ngcloud auth application-default set-quota-project &lt;project-id&gt;\n</code></pre> <p>Replace <code>&lt;project-id&gt;</code> with the unique ID of your Google Cloud project.</p>"},{"location":"tools/google-cloud-tools/#3-application-integration-connection-tool","title":"3. \u5efa\u7acb Application Integration \u5de5\u4f5c\u6d41\u7a0b\u4e26\u767c\u4f48 Connection Tool","text":"PythonJava <p>Use an existing Application Integration workflow or Integrations Connector connection you want to use with your agent. You can also create a new Application Integration workflow or a connection.</p> <p>Import and publish the Connection Tool from the template library.</p> <p>Note: To use a connector from Integration Connectors, you need to provision Application Integration in the same region as your connection.</p> <p>Use an existing Application Integration workflow or Integrations Connector connection you want to use with your agent. You can also create a new Application Integration workflow or a connection.</p> <p>Import and publish the Connection Tool from the template library.</p> <p>Note: To use a connector from Integration Connectors, you need to provision Application Integration in the same region as your connection, import and publish Connection Tool from the template library.</p>"},{"location":"tools/google-cloud-tools/#4","title":"4. \u5efa\u7acb\u5c08\u6848\u7d50\u69cb","text":"PythonJava <p>Set up your project structure and create required files.</p> <pre><code>project_root_folder\n|-- .env\n`-- my_agent\n    |-- __init__.py\n    |-- agent.py\n    `__ tools.py\n</code></pre> <p>When running the agent, make sure to run <code>adk web</code> in the <code>project\\_root_folder</code>.</p> <p>Set up your project structure and create required files.</p> <pre><code>```console\n  project_root_folder\n  |-- my_agent\n  |   |-- agent.java\n  |   `-- pom.xml\n```\n</code></pre> <p>When running the agent, make sure to run the commands in the <code>project\\_root_folder</code>.</p>"},{"location":"tools/google-cloud-tools/#5","title":"5. \u8a2d\u5b9a\u89d2\u8272\u8207\u6b0a\u9650","text":"PythonJava <p>To get the permissions that you need to set up ApplicationIntegrationToolset, you must have the following IAM roles on the project (common to both Integration Connectors and Application Integration Workflows):</p> <ul> <li><code>roles/integrations.integrationEditor</code></li> <li><code>roles/connectors.invoker</code></li> <li><code>roles/secretmanager.secretAccessor</code></li> </ul> <p>Note: For Agent Engine (AE), don't use <code>roles/integrations.integrationInvoker</code>, as it can result in 403 errors. Use <code>roles/integrations.integrationEditor</code> instead.</p> <p>To get the permissions that you need to set up ApplicationIntegrationToolset, you must have the following IAM roles on the project (common to both Integration Connectors and Application Integration Workflows):</p> <ul> <li><code>roles/integrations.integrationEditor</code></li> <li><code>roles/connectors.invoker</code></li> <li><code>roles/secretmanager.secretAccessor</code></li> </ul> <p>Note: For Agent Engine (AE), don't use <code>roles/integrations.integrationInvoker</code>, as it can result in 403 errors. Use <code>roles/integrations.integrationEditor</code> instead.</p>"},{"location":"tools/google-cloud-tools/#integration-connectors","title":"\u4f7f\u7528 Integration Connectors","text":"<p>\u4f7f\u7528 Integration Connectors \u5c07\u4f60\u7684 agent \u9023\u63a5\u5230\u4f01\u696d\u61c9\u7528\u7a0b\u5f0f\u3002</p>"},{"location":"tools/google-cloud-tools/#_3","title":"\u958b\u59cb\u4e4b\u524d","text":"<p>\u6ce8\u610f\uff1a ExecuteConnection \u6574\u5408\u901a\u5e38\u6703\u5728\u4f60\u65bc\u7279\u5b9a\u5340\u57df\u4f48\u5efa Application Integration \u6642\u81ea\u52d5\u5efa\u7acb\u3002\u5982\u679c\u5728 integrations \u6e05\u55ae \u4e2d\u6c92\u6709 ExecuteConnection\uff0c\u4f60\u5fc5\u9808\u4f9d\u7167\u4ee5\u4e0b\u6b65\u9a5f\u624b\u52d5\u5efa\u7acb\uff1a</p> <ol> <li>\u82e5\u8981\u5f9e Integration Connectors \u4f7f\u7528 connector\uff0c\u8acb\u9ede\u9078 QUICK SETUP\uff0c\u4e26\u5728\u8207\u4f60\u7684\u9023\u7dda\u76f8\u540c\u7684\u5340\u57df \u4f48\u5efa Application Integration\u3002</li> </ol> <p></p> <ol> <li> <p>\u524d\u5f80\u7bc4\u672c\u5eab\u4e2d\u7684 Connection Tool \u7bc4\u672c\uff0c\u7136\u5f8c\u9ede\u9078 USE TEMPLATE\u3002</p> <p></p> </li> <li> <p>\u8f38\u5165 Integration Name \u70ba ExecuteConnection\uff08\u5fc5\u9808\u5b8c\u5168\u4f7f\u7528\u6b64\u540d\u7a31\uff09\u3002\u63a5\u8457\uff0c\u9078\u64c7\u8207\u4f60\u7684\u9023\u7dda\u76f8\u540c\u7684\u5340\u57df\uff0c\u4e26\u9ede\u9078 CREATE\u3002</p> </li> <li> <p>\u5728 Application Integration \u7de8\u8f2f\u5668\u4e2d\uff0c\u9ede\u9078 PUBLISH \u4ee5\u767c\u4f48\u6b64\u6574\u5408\u3002</p> <p></p> </li> </ol>"},{"location":"tools/google-cloud-tools/#application-integration","title":"\u5efa\u7acb Application Integration \u5de5\u5177\u7d44","text":"<p>\u82e5\u8981\u70ba Integration Connectors \u5efa\u7acb Application Integration \u5de5\u5177\u7d44\uff0c\u8acb\u4f9d\u7167\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\uff1a</p> <ol> <li> <p>\u5728 <code>tools.py</code> \u6a94\u6848\u4e2d\uff0c\u4f7f\u7528 <code>ApplicationIntegrationToolset</code> \u5efa\u7acb\u4e00\u500b\u5de5\u5177\uff1a</p> <pre><code>from google.adk.tools.application_integration_tool.application_integration_toolset import ApplicationIntegrationToolset\n\nconnector_tool = ApplicationIntegrationToolset(\n    project=\"test-project\", # TODO: replace with GCP project of the connection\n    location=\"us-central1\", #TODO: replace with location of the connection\n    connection=\"test-connection\", #TODO: replace with connection name\n    entity_operations={\"Entity_One\": [\"LIST\",\"CREATE\"], \"Entity_Two\": []},#empty list for actions means all operations on the entity are supported.\n    actions=[\"action1\"], #TODO: replace with actions\n    service_account_json='{...}', # optional. Stringified json for service account key\n    tool_name_prefix=\"tool_prefix2\",\n    tool_instructions=\"...\"\n)\n</code></pre> <p>\u6ce8\u610f\uff1a</p> </li> <li> <p>\u4f60\u53ef\u4ee5\u63d0\u4f9b\u4e00\u500b\u670d\u52d9\u5e33\u6236\uff08Service Account\uff09\u4f86\u53d6\u4ee3\u9810\u8a2d\u6191\u8b49\uff0c\u65b9\u6cd5\u662f\u7522\u751f\u4e00\u7d44 Service Account Key\uff0c\u4e26\u8ce6\u4e88\u8a72\u670d\u52d9\u5e33\u6236\u6b63\u78ba\u7684 Application Integration \u548c Integration Connector IAM \u89d2\u8272\u3002</p> </li> <li>\u82e5\u8981\u67e5\u8a62\u67d0\u500b\u9023\u7dda\u652f\u63f4\u7684\u5be6\u9ad4\uff08entity\uff09\u8207\u64cd\u4f5c\uff08action\uff09\u6e05\u55ae\uff0c\u8acb\u4f7f\u7528 Connectors API\uff1alistActions \u6216 listEntityTypes\u3002</li> </ol> <p><code>ApplicationIntegrationToolset</code> \u652f\u63f4 <code>auth_scheme</code> \u548c <code>auth_credential</code>\uff0c\u53ef\u7528\u65bc Integration Connectors \u7684\u52d5\u614b OAuth2 \u8a8d\u8b49\u3002\u5982\u9700\u4f7f\u7528\uff0c\u8acb\u5728 <code>tools.py</code> \u6a94\u6848\u4e2d\u5efa\u7acb\u985e\u4f3c\u4ee5\u4e0b\u7684\u5de5\u5177\uff1a</p> <pre><code>```py\nfrom google.adk.tools.application_integration_tool.application_integration_toolset import ApplicationIntegrationToolset\nfrom google.adk.tools.openapi_tool.auth.auth_helpers import dict_to_auth_scheme\nfrom google.adk.auth import AuthCredential\nfrom google.adk.auth import AuthCredentialTypes\nfrom google.adk.auth import OAuth2Auth\n\noauth2_data_google_cloud = {\n  \"type\": \"oauth2\",\n  \"flows\": {\n      \"authorizationCode\": {\n          \"authorizationUrl\": \"https://accounts.google.com/o/oauth2/auth\",\n          \"tokenUrl\": \"https://oauth2.googleapis.com/token\",\n          \"scopes\": {\n              \"https://www.googleapis.com/auth/cloud-platform\": (\n                  \"View and manage your data across Google Cloud Platform\"\n                  \" services\"\n              ),\n              \"https://www.googleapis.com/auth/calendar.readonly\": \"View your calendars\"\n          },\n      }\n  },\n}\n\noauth_scheme = dict_to_auth_scheme(oauth2_data_google_cloud)\n\nauth_credential = AuthCredential(\n  auth_type=AuthCredentialTypes.OAUTH2,\n  oauth2=OAuth2Auth(\n      client_id=\"...\", #TODO: replace with client_id\n      client_secret=\"...\", #TODO: replace with client_secret\n  ),\n)\n\nconnector_tool = ApplicationIntegrationToolset(\n    project=\"test-project\", # TODO: replace with GCP project of the connection\n    location=\"us-central1\", #TODO: replace with location of the connection\n    connection=\"test-connection\", #TODO: replace with connection name\n    entity_operations={\"Entity_One\": [\"LIST\",\"CREATE\"], \"Entity_Two\": []},#empty list for actions means all operations on the entity are supported.\n    actions=[\"GET_calendars/%7BcalendarId%7D/events\"], #TODO: replace with actions. this one is for list events\n    service_account_json='{...}', # optional. Stringified json for service account key\n    tool_name_prefix=\"tool_prefix2\",\n    tool_instructions=\"...\",\n    auth_scheme=oauth_scheme,\n    auth_credential=auth_credential\n)\n```\n</code></pre> <ol> <li> <p>\u66f4\u65b0 <code>agent.py</code> \u6a94\u6848\u4e26\u5c07\u5de5\u5177\uff08tool\uff09\u52a0\u5165\u4f60\u7684 agent\uff1a</p> <pre><code>from google.adk.agents.llm_agent import LlmAgent\nfrom .tools import connector_tool\n\nroot_agent = LlmAgent(\n    model='gemini-2.0-flash',\n    name='connector_agent',\n    instruction=\"Help user, leverage the tools you have access to\",\n    tools=[connector_tool],\n)\n</code></pre> </li> <li> <p>\u8a2d\u5b9a <code>__init__.py</code> \u4ee5\u516c\u958b\u4f60\u7684 agent\uff1a</p> <pre><code>from . import agent\n</code></pre> </li> <li> <p>\u555f\u52d5 Google Agent Development Kit (ADK) Web UI\uff0c\u4e26\u4f7f\u7528\u4f60\u7684 agent\uff1a</p> <pre><code># make sure to run `adk web` from your project_root_folder\nadk web\n</code></pre> </li> </ol> <p>\u5b8c\u6210\u4e0a\u8ff0\u6b65\u9a5f\u5f8c\uff0c\u524d\u5f80 http://localhost:8000\uff0c\u7136\u5f8c\u9078\u64c7    <code>my\\_agent</code> agent\uff08\u9019\u8207 agent \u8cc7\u6599\u593e\u540d\u7a31\u76f8\u540c\uff09\u3002</p>"},{"location":"tools/google-cloud-tools/#application-integration_1","title":"\u4f7f\u7528 Application Integration \u5de5\u4f5c\u6d41\u7a0b","text":"<p>\u4f7f\u7528\u73fe\u6709\u7684 Application Integration \u5de5\u4f5c\u6d41\u7a0b\u4f5c\u70ba\u4f60\u7684 agent \u5de5\u5177\uff0c\u6216\u5efa\u7acb\u65b0\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002</p>"},{"location":"tools/google-cloud-tools/#1","title":"1. \u5efa\u7acb\u5de5\u5177","text":"PythonJava <p>To create a tool with <code>ApplicationIntegrationToolset</code> in the <code>tools.py</code> file, use the following code:</p> <pre><code>    integration_tool = ApplicationIntegrationToolset(\n        project=\"test-project\", # TODO: replace with GCP project of the connection\n        location=\"us-central1\", #TODO: replace with location of the connection\n        integration=\"test-integration\", #TODO: replace with integration name\n        triggers=[\"api_trigger/test_trigger\"],#TODO: replace with trigger id(s). Empty list would mean all api triggers in the integration to be considered.\n        service_account_json='{...}', #optional. Stringified json for service account key\n        tool_name_prefix=\"tool_prefix1\",\n        tool_instructions=\"...\"\n    )\n</code></pre> <p>Note: You can provide a service account to be used instead of using default credentials. To do this, generate a Service Account Key and provide the correct       Application Integration and Integration Connector IAM roles to the service account. For more details about the IAM roles, refer to the Prerequisites section.</p> <p>To create a tool with <code>ApplicationIntegrationToolset</code> in the <code>tools.java</code> file, use the following code:</p> <pre><code>    import com.google.adk.tools.applicationintegrationtoolset.ApplicationIntegrationToolset;\n    import com.google.common.collect.ImmutableList;\n    import com.google.common.collect.ImmutableMap;\n\n    public class Tools {\n        private static ApplicationIntegrationToolset integrationTool;\n        private static ApplicationIntegrationToolset connectionsTool;\n\n        static {\n            integrationTool = new ApplicationIntegrationToolset(\n                    \"test-project\",\n                    \"us-central1\",\n                    \"test-integration\",\n                    ImmutableList.of(\"api_trigger/test-api\"),\n                    null,\n                    null,\n                    null,\n                    \"{...}\",\n                    \"tool_prefix1\",\n                    \"...\");\n\n            connectionsTool = new ApplicationIntegrationToolset(\n                    \"test-project\",\n                    \"us-central1\",\n                    null,\n                    null,\n                    \"test-connection\",\n                    ImmutableMap.of(\"Issue\", ImmutableList.of(\"GET\")),\n                    ImmutableList.of(\"ExecuteCustomQuery\"),\n                    \"{...}\",\n                    \"tool_prefix\",\n                    \"...\");\n        }\n    }\n</code></pre> <p>Note: You can provide a service account to be used instead of using default credentials. To do this, generate a Service Account Key and provide the correct Application Integration and Integration Connector IAM roles to the service account. For more details about the IAM roles, refer to the Prerequisites section.</p>"},{"location":"tools/google-cloud-tools/#2-agent","title":"2. \u5c07\u5de5\u5177\u52a0\u5165\u4f60\u7684 agent","text":"PythonJava <p>To update the <code>agent.py</code> file and add the tool to your agent, use the following code:</p> <pre><code>    from google.adk.agents.llm_agent import LlmAgent\n    from .tools import integration_tool, connector_tool\n\n    root_agent = LlmAgent(\n        model='gemini-2.0-flash',\n        name='integration_agent',\n        instruction=\"Help user, leverage the tools you have access to\",\n        tools=[integration_tool],\n    )\n</code></pre> <p>To update the <code>agent.java</code> file and add the tool to your agent, use the following code:</p> <p>```java       import com.google.adk.agent.LlmAgent;       import com.google.adk.tools.BaseTool;       import com.google.common.collect.ImmutableList;</p> <pre><code>    public class MyAgent {\n        public static void main(String[] args) {\n            // Assuming Tools class is defined as in the previous step\n            ImmutableList&lt;BaseTool&gt; tools = ImmutableList.&lt;BaseTool&gt;builder()\n                    .add(Tools.integrationTool)\n                    .add(Tools.connectionsTool)\n                    .build();\n\n            // Finally, create your agent with the tools generated automatically.\n            LlmAgent rootAgent = LlmAgent.builder()\n                    .name(\"science-teacher\")\n                    .description(\"Science teacher agent\")\n                    .model(\"gemini-2.0-flash\")\n                    .instruction(\n                            \"Help user, leverage the tools you have access to.\"\n                    )\n                    .tools(tools)\n                    .build();\n\n            // You can now use rootAgent to interact with the LLM\n            // For example, you can start a conversation with the agent.\n        }\n    }\n</code></pre> <p>```</p> <p>Note: To find the list of supported entities and actions for a     connection, use these Connector APIs: <code>listActions</code>, <code>listEntityTypes</code>.    </p>"},{"location":"tools/google-cloud-tools/#3-agent","title":"3. \u5c0d\u5916\u516c\u958b\u4f60\u7684 agent","text":"Python <p>To configure <code>__init__.py</code> to expose your agent, use the following code:</p> <pre><code>    from . import agent\n</code></pre>"},{"location":"tools/google-cloud-tools/#4-agent","title":"4. \u4f7f\u7528\u4f60\u7684 agent","text":"PythonJava <p>To start the Google ADK Web UI and use your agent, use the following commands:</p> <p><pre><code>    # make sure to run `adk web` from your project_root_folder\n    adk web\n</code></pre> After completing the above steps, go to http://localhost:8000, and choose the <code>my_agent</code> agent (which is the same as the agent folder name).</p> <p>To start the Google ADK Web UI and use your agent, use the following commands:</p> <pre><code>    mvn install\n\n    mvn exec:java \\\n        -Dexec.mainClass=\"com.google.adk.web.AdkWebServer\" \\\n        -Dexec.args=\"--adk.agents.source-dir=src/main/java\" \\\n        -Dexec.classpathScope=\"compile\"\n</code></pre> <p>After completing the above steps, go to http://localhost:8000, and choose the <code>my_agent</code> agent (which is the same as the agent folder name).</p>"},{"location":"tools/google-cloud-tools/#toolbox","title":"\u8cc7\u6599\u5eab\u7684 Toolbox \u5de5\u5177","text":"<p>MCP Toolbox for Databases \u662f\u4e00\u500b\u958b\u6e90\u7684 MCP \u4f3a\u670d\u5668\uff0c\u5c08\u70ba\u8cc7\u6599\u5eab\u8a2d\u8a08\u3002\u5176\u8a2d\u8a08\u76ee\u6a19\u70ba\u4f01\u696d\u7d1a\u8207\u751f\u7522\u74b0\u5883\u54c1\u8cea\u3002\u5b83\u80fd\u5354\u52a9\u4f60\u66f4\u8f15\u9b06\u3001\u66f4\u5feb\u901f\u4e14\u66f4\u5b89\u5168\u5730\u958b\u767c\u5de5\u5177\uff0c\u56e0\u70ba\u5b83\u5df2\u8655\u7406\u4e86\u9023\u7dda\u6c60\u3001\u9a57\u8b49\u7b49\u8907\u96dc\u6027\u3002</p> <p>Google \u7684 Agent Development Kit (ADK) \u5df2\u5167\u5efa\u5c0d Toolbox \u7684\u652f\u63f4\u3002\u82e5\u9700\u77ad\u89e3 \u5feb\u901f\u958b\u59cb \u6216 \u8a2d\u5b9a Toolbox\uff0c\u8acb\u53c3\u95b1 \u6587\u4ef6\u8aaa\u660e\u3002</p> <p></p>"},{"location":"tools/google-cloud-tools/#_4","title":"\u8a2d\u5b9a\u8207\u90e8\u7f72","text":"<p>Toolbox \u662f\u4e00\u500b\u958b\u6e90\u4f3a\u670d\u5668\uff0c\u9700\u8981\u4f60\u81ea\u884c\u90e8\u7f72\u8207\u7ba1\u7406\u3002\u66f4\u591a\u90e8\u7f72\u8207\u8a2d\u5b9a\u8aaa\u660e\uff0c\u8acb\u53c3\u8003\u5b98\u65b9 Toolbox \u6587\u4ef6\u8aaa\u660e\uff1a</p> <ul> <li>\u5b89\u88dd\u4f3a\u670d\u5668</li> <li>\u8a2d\u5b9a Toolbox</li> </ul>"},{"location":"tools/google-cloud-tools/#sdk","title":"\u5b89\u88dd\u7528\u6236\u7aef SDK","text":"<p>Agent Development Kit (ADK) \u4f9d\u8cf4 <code>toolbox-core</code> Python \u5957\u4ef6\u4f86\u4f7f\u7528 Toolbox\u3002\u958b\u59cb\u524d\u8acb\u5148\u5b89\u88dd\u6b64\u5957\u4ef6\uff1a</p> <pre><code>pip install toolbox-core\n</code></pre>"},{"location":"tools/google-cloud-tools/#toolbox_1","title":"\u8f09\u5165 Toolbox \u5de5\u5177","text":"<p>\u7576\u4f60\u7684 Toolbox \u4f3a\u670d\u5668\u5df2\u8a2d\u5b9a\u5b8c\u6210\u4e26\u555f\u52d5\u5f8c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Agent Development Kit (ADK) \u5f9e\u4f3a\u670d\u5668\u8f09\u5165 tools\uff1a</p> <pre><code>from google.adk.agents import Agent\nfrom toolbox_core import ToolboxSyncClient\n\ntoolbox = ToolboxSyncClient(\"https://127.0.0.1:5000\")\n\n# Load a specific set of tools\ntools = toolbox.load_toolset('my-toolset-name'),\n# Load single tool\ntools = toolbox.load_tool('my-tool-name'),\n\nroot_agent = Agent(\n    ...,\n    tools=tools # Provide the list of tools to the Agent\n\n)\n</code></pre>"},{"location":"tools/google-cloud-tools/#toolbox_2","title":"\u9032\u968e Toolbox \u529f\u80fd","text":"<p>Toolbox \u63d0\u4f9b\u591a\u7a2e\u529f\u80fd\uff0c\u5354\u52a9\u958b\u767c\u7528\u65bc\u8cc7\u6599\u5eab\u7684 Gen AI \u5de5\u5177\u3002 \u5982\u9700\u66f4\u591a\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1\u4ee5\u4e0b\u529f\u80fd\u8aaa\u660e\uff1a</p> <ul> <li>Authenticated Parameters\uff1a\u53ef\u81ea\u52d5\u5c07\u5de5\u5177\u8f38\u5165\u7d81\u5b9a\u81f3 OIDC token \u7684\u503c\uff0c\u8b93\u57f7\u884c\u654f\u611f\u67e5\u8a62\u6642\u66f4\u5bb9\u6613\uff0c\u4e26\u907f\u514d\u6f5b\u5728\u7684\u8cc7\u6599\u5916\u6d29\u98a8\u96aa</li> <li>Authorized Invocations:  \u53ef\u6839\u64da\u4f7f\u7528\u8005\u7684 Auth token \u9650\u5236\u5de5\u5177\u7684\u5b58\u53d6\u6b0a\u9650</li> <li>OpenTelemetry\uff1a\u53ef\u900f\u904e OpenTelemetry \u5f9e Toolbox \u53d6\u5f97\u6307\u6a19\u8207\u8ffd\u8e64\u8cc7\u6599</li> </ul>"},{"location":"tools/index.en/","title":"Tools","text":""},{"location":"tools/index.en/#what-is-a-tool","title":"What is a Tool?","text":"<p>In the context of ADK, a Tool represents a specific capability provided to an AI agent, enabling it to perform actions and interact with the world beyond its core text generation and reasoning abilities. What distinguishes capable agents from basic language models is often their effective use of tools.</p> <p>Technically, a tool is typically a modular code component\u2014like a Python/ Java function, a class method, or even another specialized agent\u2014designed to execute a distinct, predefined task. These tasks often involve interacting with external systems or data.</p> <p></p>"},{"location":"tools/index.en/#key-characteristics","title":"Key Characteristics","text":"<p>Action-Oriented: Tools perform specific actions, such as:</p> <ul> <li>Querying databases</li> <li>Making API requests (e.g., fetching weather data, booking systems)</li> <li>Searching the web</li> <li>Executing code snippets</li> <li>Retrieving information from documents (RAG)</li> <li>Interacting with other software or services</li> </ul> <p>Extends Agent capabilities: They empower agents to access real-time information, affect external systems, and overcome the knowledge limitations inherent in their training data.</p> <p>Execute predefined logic: Crucially, tools execute specific, developer-defined logic. They do not possess their own independent reasoning capabilities like the agent's core Large Language Model (LLM). The LLM reasons about which tool to use, when, and with what inputs, but the tool itself just executes its designated function.</p>"},{"location":"tools/index.en/#how-agents-use-tools","title":"How Agents Use Tools","text":"<p>Agents leverage tools dynamically through mechanisms often involving function calling. The process generally follows these steps:</p> <ol> <li>Reasoning: The agent's LLM analyzes its system instruction, conversation history, and user request.</li> <li>Selection: Based on the analysis, the LLM decides on which tool, if any, to execute, based on the tools available to the agent and the docstrings that describes each tool.</li> <li>Invocation: The LLM generates the required arguments (inputs) for the selected tool and triggers its execution.</li> <li>Observation: The agent receives the output (result) returned by the tool.</li> <li>Finalization: The agent incorporates the tool's output into its ongoing reasoning process to formulate the next response, decide the subsequent step, or determine if the goal has been achieved.</li> </ol> <p>Think of the tools as a specialized toolkit that the agent's intelligent core (the LLM) can access and utilize as needed to accomplish complex tasks.</p>"},{"location":"tools/index.en/#tool-types-in-adk","title":"Tool Types in ADK","text":"<p>ADK offers flexibility by supporting several types of tools:</p> <ol> <li>Function Tools: Tools created by you, tailored to your specific application's needs.<ul> <li>Functions/Methods: Define standard synchronous functions or methods in your code (e.g., Python def).</li> <li>Agents-as-Tools: Use another, potentially specialized, agent as a tool for a parent agent.</li> <li>Long Running Function Tools: Support for tools that perform asynchronous operations or take significant time to complete.</li> </ul> </li> <li>Built-in Tools: Ready-to-use tools provided by the framework for common tasks.         Examples: Google Search, Code Execution, Retrieval-Augmented Generation (RAG).</li> <li>Third-Party Tools: Integrate tools seamlessly from popular external libraries.         Examples: LangChain Tools, CrewAI Tools.</li> </ol> <p>Navigate to the respective documentation pages linked above for detailed information and examples for each tool type.</p>"},{"location":"tools/index.en/#referencing-tool-in-agents-instructions","title":"Referencing Tool in Agent\u2019s Instructions","text":"<p>Within an agent's instructions, you can directly reference a tool by using its function name. If the tool's function name and docstring are sufficiently descriptive, your instructions can primarily focus on when the Large Language Model (LLM) should utilize the tool. This promotes clarity and helps the model understand the intended use of each tool.</p> <p>It is crucial to clearly instruct the agent on how to handle different return values that a tool might produce. For example, if a tool returns an error message, your instructions should specify whether the agent should retry the operation, give up on the task, or request additional information from the user.</p> <p>Furthermore, ADK supports the sequential use of tools, where the output of one tool can serve as the input for another. When implementing such workflows, it's important to describe the intended sequence of tool usage within the agent's instructions to guide the model through the necessary steps.</p>"},{"location":"tools/index.en/#example","title":"Example","text":"<p>The following example showcases how an agent can use tools by referencing their function names in its instructions. It also demonstrates how to guide the agent to handle different return values from tools, such as success or error messages, and how to orchestrate the sequential use of multiple tools to accomplish a task.</p> PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport asyncio\nfrom google.adk.agents import Agent\nfrom google.adk.tools import FunctionTool\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.genai import types\n\nAPP_NAME=\"weather_sentiment_agent\"\nUSER_ID=\"user1234\"\nSESSION_ID=\"1234\"\nMODEL_ID=\"gemini-2.0-flash\"\n\n# Tool 1\ndef get_weather_report(city: str) -&gt; dict:\n    \"\"\"Retrieves the current weather report for a specified city.\n\n    Returns:\n        dict: A dictionary containing the weather information with a 'status' key ('success' or 'error') and a 'report' key with the weather details if successful, or an 'error_message' if an error occurred.\n    \"\"\"\n    if city.lower() == \"london\":\n        return {\"status\": \"success\", \"report\": \"The current weather in London is cloudy with a temperature of 18 degrees Celsius and a chance of rain.\"}\n    elif city.lower() == \"paris\":\n        return {\"status\": \"success\", \"report\": \"The weather in Paris is sunny with a temperature of 25 degrees Celsius.\"}\n    else:\n        return {\"status\": \"error\", \"error_message\": f\"Weather information for '{city}' is not available.\"}\n\nweather_tool = FunctionTool(func=get_weather_report)\n\n\n# Tool 2\ndef analyze_sentiment(text: str) -&gt; dict:\n    \"\"\"Analyzes the sentiment of the given text.\n\n    Returns:\n        dict: A dictionary with 'sentiment' ('positive', 'negative', or 'neutral') and a 'confidence' score.\n    \"\"\"\n    if \"good\" in text.lower() or \"sunny\" in text.lower():\n        return {\"sentiment\": \"positive\", \"confidence\": 0.8}\n    elif \"rain\" in text.lower() or \"bad\" in text.lower():\n        return {\"sentiment\": \"negative\", \"confidence\": 0.7}\n    else:\n        return {\"sentiment\": \"neutral\", \"confidence\": 0.6}\n\nsentiment_tool = FunctionTool(func=analyze_sentiment)\n\n\n# Agent\nweather_sentiment_agent = Agent(\n    model=MODEL_ID,\n    name='weather_sentiment_agent',\n    instruction=\"\"\"You are a helpful assistant that provides weather information and analyzes the sentiment of user feedback.\n**If the user asks about the weather in a specific city, use the 'get_weather_report' tool to retrieve the weather details.**\n**If the 'get_weather_report' tool returns a 'success' status, provide the weather report to the user.**\n**If the 'get_weather_report' tool returns an 'error' status, inform the user that the weather information for the specified city is not available and ask if they have another city in mind.**\n**After providing a weather report, if the user gives feedback on the weather (e.g., 'That's good' or 'I don't like rain'), use the 'analyze_sentiment' tool to understand their sentiment.** Then, briefly acknowledge their sentiment.\nYou can handle these tasks sequentially if needed.\"\"\",\n    tools=[weather_tool, sentiment_tool]\n)\n\nasync def main():\n    \"\"\"Main function to run the agent asynchronously.\"\"\"\n    # Session and Runner Setup\n    session_service = InMemorySessionService()\n    # Use 'await' to correctly create the session\n    await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n\n    runner = Runner(agent=weather_sentiment_agent, app_name=APP_NAME, session_service=session_service)\n\n    # Agent Interaction\n    query = \"weather in london?\"\n    print(f\"User Query: {query}\")\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n\n    # The runner's run method handles the async loop internally\n    events = runner.run(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response:\", final_response)\n\n# Standard way to run the main async function\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <pre><code>import com.google.adk.agents.BaseAgent;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.adk.tools.ToolContext; // Ensure this import is correct\nimport com.google.common.collect.ImmutableList;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\npublic class WeatherSentimentAgentApp {\n\n  private static final String APP_NAME = \"weather_sentiment_agent\";\n  private static final String USER_ID = \"user1234\";\n  private static final String SESSION_ID = \"1234\";\n  private static final String MODEL_ID = \"gemini-2.0-flash\";\n\n  /**\n   * Retrieves the current weather report for a specified city.\n   *\n   * @param city The city for which to retrieve the weather report.\n   * @param toolContext The context for the tool.\n   * @return A dictionary containing the weather information.\n   */\n  public static Map&lt;String, Object&gt; getWeatherReport(\n      @Schema(name = \"city\")\n      String city,\n      @Schema(name = \"toolContext\")\n      ToolContext toolContext) {\n    Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();\n\n    if (city.toLowerCase(Locale.ROOT).equals(\"london\")) {\n      response.put(\"status\", \"success\");\n      response.put(\n          \"report\",\n          \"The current weather in London is cloudy with a temperature of 18 degrees Celsius and a\"\n              + \" chance of rain.\");\n    } else if (city.toLowerCase(Locale.ROOT).equals(\"paris\")) {\n      response.put(\"status\", \"success\");\n      response.put(\n          \"report\", \"The weather in Paris is sunny with a temperature of 25 degrees Celsius.\");\n    } else {\n      response.put(\"status\", \"error\");\n      response.put(\n          \"error_message\", String.format(\"Weather information for '%s' is not available.\", city));\n    }\n    return response;\n  }\n\n  /**\n   * Analyzes the sentiment of the given text.\n   *\n   * @param text The text to analyze.\n   * @param toolContext The context for the tool.\n   * @return A dictionary with sentiment and confidence score.\n   */\n  public static Map&lt;String, Object&gt; analyzeSentiment(\n      @Schema(name = \"text\")\n      String text,\n      @Schema(name = \"toolContext\")\n      ToolContext toolContext) {\n    Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();\n    String lowerText = text.toLowerCase(Locale.ROOT);\n    if (lowerText.contains(\"good\") || lowerText.contains(\"sunny\")) {\n      response.put(\"sentiment\", \"positive\");\n      response.put(\"confidence\", 0.8);\n    } else if (lowerText.contains(\"rain\") || lowerText.contains(\"bad\")) {\n      response.put(\"sentiment\", \"negative\");\n      response.put(\"confidence\", 0.7);\n    } else {\n      response.put(\"sentiment\", \"neutral\");\n      response.put(\"confidence\", 0.6);\n    }\n    return response;\n  }\n\n  /**\n   * Calls the agent with the given query and prints the final response.\n   *\n   * @param runner The runner to use.\n   * @param query The query to send to the agent.\n   */\n  public static void callAgent(Runner runner, String query) {\n    Content content = Content.fromParts(Part.fromText(query));\n\n    InMemorySessionService sessionService = (InMemorySessionService) runner.sessionService();\n    Session session =\n        sessionService\n            .createSession(APP_NAME, USER_ID, /* state= */ null, SESSION_ID)\n            .blockingGet();\n\n    runner\n        .runAsync(session.userId(), session.id(), content)\n        .forEach(\n            event -&gt; {\n              if (event.finalResponse()\n                  &amp;&amp; event.content().isPresent()\n                  &amp;&amp; event.content().get().parts().isPresent()\n                  &amp;&amp; !event.content().get().parts().get().isEmpty()\n                  &amp;&amp; event.content().get().parts().get().get(0).text().isPresent()) {\n                String finalResponse = event.content().get().parts().get().get(0).text().get();\n                System.out.println(\"Agent Response: \" + finalResponse);\n              }\n            });\n  }\n\n  public static void main(String[] args) throws NoSuchMethodException {\n    FunctionTool weatherTool =\n        FunctionTool.create(\n            WeatherSentimentAgentApp.class.getMethod(\n                \"getWeatherReport\", String.class, ToolContext.class));\n    FunctionTool sentimentTool =\n        FunctionTool.create(\n            WeatherSentimentAgentApp.class.getMethod(\n                \"analyzeSentiment\", String.class, ToolContext.class));\n\n    BaseAgent weatherSentimentAgent =\n        LlmAgent.builder()\n            .model(MODEL_ID)\n            .name(\"weather_sentiment_agent\")\n            .description(\"Weather Sentiment Agent\")\n            .instruction(\"\"\"\n                    You are a helpful assistant that provides weather information and analyzes the\n                    sentiment of user feedback\n                    **If the user asks about the weather in a specific city, use the\n                    'get_weather_report' tool to retrieve the weather details.**\n                    **If the 'get_weather_report' tool returns a 'success' status, provide the\n                    weather report to the user.**\n                    **If the 'get_weather_report' tool returns an 'error' status, inform the\n                    user that the weather information for the specified city is not available\n                    and ask if they have another city in mind.**\n                    **After providing a weather report, if the user gives feedback on the\n                    weather (e.g., 'That's good' or 'I don't like rain'), use the\n                    'analyze_sentiment' tool to understand their sentiment.** Then, briefly\n                    acknowledge their sentiment.\n                    You can handle these tasks sequentially if needed.\n                    \"\"\")\n            .tools(ImmutableList.of(weatherTool, sentimentTool))\n            .build();\n\n    InMemorySessionService sessionService = new InMemorySessionService();\n    Runner runner = new Runner(weatherSentimentAgent, APP_NAME, null, sessionService);\n\n    // Change the query to ensure the tool is called with a valid city that triggers a \"success\"\n    // response from the tool, like \"london\" (without the question mark).\n    callAgent(runner, \"weather in paris\");\n  }\n}\n</code></pre>"},{"location":"tools/index.en/#tool-context","title":"Tool Context","text":"<p>For more advanced scenarios, ADK allows you to access additional contextual information within your tool function by including the special parameter <code>tool_context: ToolContext</code>. By including this in the function signature, ADK will automatically provide an instance of the ToolContext class when your tool is called during agent execution.</p> <p>The ToolContext provides access to several key pieces of information and control levers:</p> <ul> <li> <p><code>state: State</code>: Read and modify the current session's state. Changes made here are tracked and persisted.</p> </li> <li> <p><code>actions: EventActions</code>: Influence the agent's subsequent actions after the tool runs (e.g., skip summarization, transfer to another agent).</p> </li> <li> <p><code>function_call_id: str</code>: The unique identifier assigned by the framework to this specific invocation of the tool. Useful for tracking and correlating with authentication responses. This can also be helpful when multiple tools are called within a single model response.</p> </li> <li> <p><code>function_call_event_id: str</code>: This attribute provides the unique identifier of the event that triggered the current tool call. This can be useful for tracking and logging purposes.</p> </li> <li> <p><code>auth_response: Any</code>: Contains the authentication response/credentials if an authentication flow was completed before this tool call.</p> </li> <li> <p>Access to Services: Methods to interact with configured services like Artifacts and Memory.</p> </li> </ul> <p>Note that you shouldn't include the <code>tool_context</code> parameter in the tool function docstring. Since <code>ToolContext</code> is automatically injected by the ADK framework after the LLM decides to call the tool function, it is not relevant for the LLM's decision-making and including it can confuse the LLM.</p>"},{"location":"tools/index.en/#state-management","title":"State Management","text":"<p>The <code>tool_context.state</code> attribute provides direct read and write access to the state associated with the current session. It behaves like a dictionary but ensures that any modifications are tracked as deltas and persisted by the session service. This enables tools to maintain and share information across different interactions and agent steps.</p> <ul> <li> <p>Reading State: Use standard dictionary access (<code>tool_context.state['my_key']</code>) or the <code>.get()</code> method (<code>tool_context.state.get('my_key', default_value)</code>).</p> </li> <li> <p>Writing State: Assign values directly (<code>tool_context.state['new_key'] = 'new_value'</code>). These changes are recorded in the state_delta of the resulting event.</p> </li> <li> <p>State Prefixes: Remember the standard state prefixes:</p> <ul> <li> <p><code>app:*</code>: Shared across all users of the application.</p> </li> <li> <p><code>user:*</code>: Specific to the current user across all their sessions.</p> </li> <li> <p>(No prefix): Specific to the current session.</p> </li> <li> <p><code>temp:*</code>: Temporary, not persisted across invocations (useful for passing data within a single run call but generally less useful inside a tool context which operates between LLM calls).</p> </li> </ul> </li> </ul> PythonJava <pre><code>from google.adk.tools import ToolContext, FunctionTool\n\ndef update_user_preference(preference: str, value: str, tool_context: ToolContext):\n    \"\"\"Updates a user-specific preference.\"\"\"\n    user_prefs_key = \"user:preferences\"\n    # Get current preferences or initialize if none exist\n    preferences = tool_context.state.get(user_prefs_key, {})\n    preferences[preference] = value\n    # Write the updated dictionary back to the state\n    tool_context.state[user_prefs_key] = preferences\n    print(f\"Tool: Updated user preference '{preference}' to '{value}'\")\n    return {\"status\": \"success\", \"updated_preference\": preference}\n\npref_tool = FunctionTool(func=update_user_preference)\n\n# In an Agent:\n# my_agent = Agent(..., tools=[pref_tool])\n\n# When the LLM calls update_user_preference(preference='theme', value='dark', ...):\n# The tool_context.state will be updated, and the change will be part of the\n# resulting tool response event's actions.state_delta.\n</code></pre> <pre><code>import com.google.adk.tools.FunctionTool;\nimport com.google.adk.tools.ToolContext;\n\n// Updates a user-specific preference.\npublic Map&lt;String, String&gt; updateUserThemePreference(String value, ToolContext toolContext) {\n  String userPrefsKey = \"user:preferences:theme\";\n\n  // Get current preferences or initialize if none exist\n  String preference = toolContext.state().getOrDefault(userPrefsKey, \"\").toString();\n  if (preference.isEmpty()) {\n    preference = value;\n  }\n\n  // Write the updated dictionary back to the state\n  toolContext.state().put(\"user:preferences\", preference);\n  System.out.printf(\"Tool: Updated user preference %s to %s\", userPrefsKey, preference);\n\n  return Map.of(\"status\", \"success\", \"updated_preference\", toolContext.state().get(userPrefsKey).toString());\n  // When the LLM calls updateUserThemePreference(\"dark\"):\n  // The toolContext.state will be updated, and the change will be part of the\n  // resulting tool response event's actions.stateDelta.\n}\n</code></pre>"},{"location":"tools/index.en/#controlling-agent-flow","title":"Controlling Agent Flow","text":"<p>The <code>tool_context.actions</code> attribute (<code>ToolContext.actions()</code> in Java) holds an EventActions object. Modifying attributes on this object allows your tool to influence what the agent or framework does after the tool finishes execution.</p> <ul> <li> <p><code>skip_summarization: bool</code>: (Default: False) If set to True, instructs the ADK to bypass the LLM call that typically summarizes the tool's output. This is useful if your tool's return value is already a user-ready message.</p> </li> <li> <p><code>transfer_to_agent: str</code>: Set this to the name of another agent. The framework will halt the current agent's execution and transfer control of the conversation to the specified agent. This allows tools to dynamically hand off tasks to more specialized agents.</p> </li> <li> <p><code>escalate: bool</code>: (Default: False) Setting this to True signals that the current agent cannot handle the request and should pass control up to its parent agent (if in a hierarchy). In a LoopAgent, setting escalate=True in a sub-agent's tool will terminate the loop.</p> </li> </ul>"},{"location":"tools/index.en/#example_1","title":"Example","text":"PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.agents import Agent\nfrom google.adk.tools import FunctionTool\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools import ToolContext\nfrom google.genai import types\n\nAPP_NAME=\"customer_support_agent\"\nUSER_ID=\"user1234\"\nSESSION_ID=\"1234\"\n\n\ndef check_and_transfer(query: str, tool_context: ToolContext) -&gt; str:\n    \"\"\"Checks if the query requires escalation and transfers to another agent if needed.\"\"\"\n    if \"urgent\" in query.lower():\n        print(\"Tool: Detected urgency, transferring to the support agent.\")\n        tool_context.actions.transfer_to_agent = \"support_agent\"\n        return \"Transferring to the support agent...\"\n    else:\n        return f\"Processed query: '{query}'. No further action needed.\"\n\nescalation_tool = FunctionTool(func=check_and_transfer)\n\nmain_agent = Agent(\n    model='gemini-2.0-flash',\n    name='main_agent',\n    instruction=\"\"\"You are the first point of contact for customer support of an analytics tool. Answer general queries. If the user indicates urgency, use the 'check_and_transfer' tool.\"\"\",\n    tools=[check_and_transfer]\n)\n\nsupport_agent = Agent(\n    model='gemini-2.0-flash',\n    name='support_agent',\n    instruction=\"\"\"You are the dedicated support agent. Mentioned you are a support handler and please help the user with their urgent issue.\"\"\"\n)\n\nmain_agent.sub_agents = [support_agent]\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=main_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"this is urgent, i cant login\")\n</code></pre> <pre><code>import com.google.adk.agents.LlmAgent;\nimport com.google.adk.runner.Runner;\nimport com.google.adk.sessions.InMemorySessionService;\nimport com.google.adk.sessions.Session;\nimport com.google.adk.tools.Annotations.Schema;\nimport com.google.adk.tools.FunctionTool;\nimport com.google.adk.tools.ToolContext;\nimport com.google.common.collect.ImmutableList;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\npublic class CustomerSupportAgentApp {\n\n  private static final String APP_NAME = \"customer_support_agent\";\n  private static final String USER_ID = \"user1234\";\n  private static final String SESSION_ID = \"1234\";\n  private static final String MODEL_ID = \"gemini-2.0-flash\";\n\n  /**\n   * Checks if the query requires escalation and transfers to another agent if needed.\n   *\n   * @param query The user's query.\n   * @param toolContext The context for the tool.\n   * @return A map indicating the result of the check and transfer.\n   */\n  public static Map&lt;String, Object&gt; checkAndTransfer(\n      @Schema(name = \"query\", description = \"the user query\")\n      String query,\n      @Schema(name = \"toolContext\", description = \"the tool context\")\n      ToolContext toolContext) {\n    Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();\n    if (query.toLowerCase(Locale.ROOT).contains(\"urgent\")) {\n      System.out.println(\"Tool: Detected urgency, transferring to the support agent.\");\n      toolContext.actions().setTransferToAgent(\"support_agent\");\n      response.put(\"status\", \"transferring\");\n      response.put(\"message\", \"Transferring to the support agent...\");\n    } else {\n      response.put(\"status\", \"processed\");\n      response.put(\n          \"message\", String.format(\"Processed query: '%s'. No further action needed.\", query));\n    }\n    return response;\n  }\n\n  /**\n   * Calls the agent with the given query and prints the final response.\n   *\n   * @param runner The runner to use.\n   * @param query The query to send to the agent.\n   */\n  public static void callAgent(Runner runner, String query) {\n    Content content =\n        Content.fromParts(Part.fromText(query));\n\n    InMemorySessionService sessionService = (InMemorySessionService) runner.sessionService();\n    // Fixed: session ID does not need to be an optional.\n    Session session =\n        sessionService\n            .createSession(APP_NAME, USER_ID, /* state= */ null, SESSION_ID)\n            .blockingGet();\n\n    runner\n        .runAsync(session.userId(), session.id(), content)\n        .forEach(\n            event -&gt; {\n              if (event.finalResponse()\n                  &amp;&amp; event.content().isPresent()\n                  &amp;&amp; event.content().get().parts().isPresent()\n                  &amp;&amp; !event.content().get().parts().get().isEmpty()\n                  &amp;&amp; event.content().get().parts().get().get(0).text().isPresent()) {\n                String finalResponse = event.content().get().parts().get().get(0).text().get();\n                System.out.println(\"Agent Response: \" + finalResponse);\n              }\n            });\n  }\n\n  public static void main(String[] args) throws NoSuchMethodException {\n    FunctionTool escalationTool =\n        FunctionTool.create(\n            CustomerSupportAgentApp.class.getMethod(\n                \"checkAndTransfer\", String.class, ToolContext.class));\n\n    LlmAgent supportAgent =\n        LlmAgent.builder()\n            .model(MODEL_ID)\n            .name(\"support_agent\")\n            .description(\"\"\"\n                The dedicated support agent.\n                Mentions it is a support handler and helps the user with their urgent issue.\n            \"\"\")\n            .instruction(\"\"\"\n                You are the dedicated support agent.\n                Mentioned you are a support handler and please help the user with their urgent issue.\n            \"\"\")\n            .build();\n\n    LlmAgent mainAgent =\n        LlmAgent.builder()\n            .model(MODEL_ID)\n            .name(\"main_agent\")\n            .description(\"\"\"\n                The first point of contact for customer support of an analytics tool.\n                Answers general queries.\n                If the user indicates urgency, uses the 'check_and_transfer' tool.\n                \"\"\")\n            .instruction(\"\"\"\n                You are the first point of contact for customer support of an analytics tool.\n                Answer general queries.\n                If the user indicates urgency, use the 'check_and_transfer' tool.\n                \"\"\")\n            .tools(ImmutableList.of(escalationTool))\n            .subAgents(supportAgent)\n            .build();\n    // Fixed: LlmAgent.subAgents() expects 0 arguments.\n    // Sub-agents are now added to the main agent via its builder,\n    // as `subAgents` is a property that should be set during agent construction\n    // if it's not dynamically managed.\n\n    InMemorySessionService sessionService = new InMemorySessionService();\n    Runner runner = new Runner(mainAgent, APP_NAME, null, sessionService);\n\n    // Agent Interaction\n    callAgent(runner, \"this is urgent, i cant login\");\n  }\n}\n</code></pre>"},{"location":"tools/index.en/#explanation","title":"Explanation","text":"<ul> <li>We define two agents: <code>main_agent</code> and <code>support_agent</code>. The <code>main_agent</code> is designed to be the initial point of contact.</li> <li>The <code>check_and_transfer</code> tool, when called by <code>main_agent</code>, examines the user's query.</li> <li>If the query contains the word \"urgent\", the tool accesses the <code>tool_context</code>, specifically <code>tool_context.actions</code>, and sets the transfer_to_agent attribute to <code>support_agent</code>.</li> <li>This action signals to the framework to transfer the control of the conversation to the agent named <code>support_agent</code>.</li> <li>When the <code>main_agent</code> processes the urgent query, the <code>check_and_transfer</code> tool triggers the transfer. The subsequent response would ideally come from the <code>support_agent</code>.</li> <li>For a normal query without urgency, the tool simply processes it without triggering a transfer.</li> </ul> <p>This example illustrates how a tool, through EventActions in its ToolContext, can dynamically influence the flow of the conversation by transferring control to another specialized agent.</p>"},{"location":"tools/index.en/#authentication","title":"Authentication","text":"<p>ToolContext provides mechanisms for tools interacting with authenticated APIs. If your tool needs to handle authentication, you might use the following:</p> <ul> <li> <p><code>auth_response</code>: Contains credentials (e.g., a token) if authentication was already handled by the framework before your tool was called (common with RestApiTool and OpenAPI security schemes).</p> </li> <li> <p><code>request_credential(auth_config: dict)</code>: Call this method if your tool determines authentication is needed but credentials aren't available. This signals the framework to start an authentication flow based on the provided auth_config.</p> </li> <li> <p><code>get_auth_response()</code>: Call this in a subsequent invocation (after request_credential was successfully handled) to retrieve the credentials the user provided.</p> </li> </ul> <p>For detailed explanations of authentication flows, configuration, and examples, please refer to the dedicated Tool Authentication documentation page.</p>"},{"location":"tools/index.en/#context-aware-data-access-methods","title":"Context-Aware Data Access Methods","text":"<p>These methods provide convenient ways for your tool to interact with persistent data associated with the session or user, managed by configured services.</p> <ul> <li> <p><code>list_artifacts()</code> (or <code>listArtifacts()</code> in Java): Returns a list of filenames (or keys) for all artifacts currently stored for the session via the artifact_service. Artifacts are typically files (images, documents, etc.) uploaded by the user or generated by tools/agents.</p> </li> <li> <p><code>load_artifact(filename: str)</code>: Retrieves a specific artifact by its filename from the artifact_service. You can optionally specify a version; if omitted, the latest version is returned. Returns a <code>google.genai.types.Part</code> object containing the artifact data and mime type, or None if not found.</p> </li> <li> <p><code>save_artifact(filename: str, artifact: types.Part)</code>: Saves a new version of an artifact to the artifact_service. Returns the new version number (starting from 0).</p> </li> <li> <p><code>search_memory(query: str)</code> </p> <p>Queries the user's long-term memory using the configured <code>memory_service</code>. This is useful for retrieving relevant information from past interactions or stored knowledge. The structure of the SearchMemoryResponse depends on the specific memory service implementation but typically contains relevant text snippets or conversation excerpts.</p> </li> </ul>"},{"location":"tools/index.en/#example_2","title":"Example","text":"PythonJava <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.adk.tools import ToolContext, FunctionTool\nfrom google.genai import types\n\n\ndef process_document(\n    document_name: str, analysis_query: str, tool_context: ToolContext\n) -&gt; dict:\n    \"\"\"Analyzes a document using context from memory.\"\"\"\n\n    # 1. Load the artifact\n    print(f\"Tool: Attempting to load artifact: {document_name}\")\n    document_part = tool_context.load_artifact(document_name)\n\n    if not document_part:\n        return {\"status\": \"error\", \"message\": f\"Document '{document_name}' not found.\"}\n\n    document_text = document_part.text  # Assuming it's text for simplicity\n    print(f\"Tool: Loaded document '{document_name}' ({len(document_text)} chars).\")\n\n    # 2. Search memory for related context\n    print(f\"Tool: Searching memory for context related to: '{analysis_query}'\")\n    memory_response = tool_context.search_memory(\n        f\"Context for analyzing document about {analysis_query}\"\n    )\n    memory_context = \"\\n\".join(\n        [\n            m.events[0].content.parts[0].text\n            for m in memory_response.memories\n            if m.events and m.events[0].content\n        ]\n    )  # Simplified extraction\n    print(f\"Tool: Found memory context: {memory_context[:100]}...\")\n\n    # 3. Perform analysis (placeholder)\n    analysis_result = f\"Analysis of '{document_name}' regarding '{analysis_query}' using memory context: [Placeholder Analysis Result]\"\n    print(\"Tool: Performed analysis.\")\n\n    # 4. Save the analysis result as a new artifact\n    analysis_part = types.Part.from_text(text=analysis_result)\n    new_artifact_name = f\"analysis_{document_name}\"\n    version = await tool_context.save_artifact(new_artifact_name, analysis_part)\n    print(f\"Tool: Saved analysis result as '{new_artifact_name}' version {version}.\")\n\n    return {\n        \"status\": \"success\",\n        \"analysis_artifact\": new_artifact_name,\n        \"version\": version,\n    }\n\n\ndoc_analysis_tool = FunctionTool(func=process_document)\n\n# In an Agent:\n# Assume artifact 'report.txt' was previously saved.\n# Assume memory service is configured and has relevant past data.\n# my_agent = Agent(..., tools=[doc_analysis_tool], artifact_service=..., memory_service=...)\n</code></pre> <pre><code>// Analyzes a document using context from memory.\n// You can also list, load and save artifacts using Callback Context or LoadArtifacts tool.\npublic static @NonNull Maybe&lt;ImmutableMap&lt;String, Object&gt;&gt; processDocument(\n    @Annotations.Schema(description = \"The name of the document to analyze.\") String documentName,\n    @Annotations.Schema(description = \"The query for the analysis.\") String analysisQuery,\n    ToolContext toolContext) {\n\n  // 1. List all available artifacts\n  System.out.printf(\n      \"Listing all available artifacts %s:\", toolContext.listArtifacts().blockingGet());\n\n  // 2. Load an artifact to memory\n  System.out.println(\"Tool: Attempting to load artifact: \" + documentName);\n  Part documentPart = toolContext.loadArtifact(documentName, Optional.empty()).blockingGet();\n  if (documentPart == null) {\n    System.out.println(\"Tool: Document '\" + documentName + \"' not found.\");\n    return Maybe.just(\n        ImmutableMap.&lt;String, Object&gt;of(\n            \"status\", \"error\", \"message\", \"Document '\" + documentName + \"' not found.\"));\n  }\n  String documentText = documentPart.text().orElse(\"\");\n  System.out.println(\n      \"Tool: Loaded document '\" + documentName + \"' (\" + documentText.length() + \" chars).\");\n\n  // 3. Perform analysis (placeholder)\n  String analysisResult =\n      \"Analysis of '\"\n          + documentName\n          + \"' regarding '\"\n          + analysisQuery\n          + \" [Placeholder Analysis Result]\";\n  System.out.println(\"Tool: Performed analysis.\");\n\n  // 4. Save the analysis result as a new artifact\n  Part analysisPart = Part.fromText(analysisResult);\n  String newArtifactName = \"analysis_\" + documentName;\n\n  toolContext.saveArtifact(newArtifactName, analysisPart);\n\n  return Maybe.just(\n      ImmutableMap.&lt;String, Object&gt;builder()\n          .put(\"status\", \"success\")\n          .put(\"analysis_artifact\", newArtifactName)\n          .build());\n}\n// FunctionTool processDocumentTool =\n//      FunctionTool.create(ToolContextArtifactExample.class, \"processDocument\");\n// In the Agent, include this function tool.\n// LlmAgent agent = LlmAgent().builder().tools(processDocumentTool).build();\n</code></pre> <p>By leveraging the ToolContext, developers can create more sophisticated and context-aware custom tools that seamlessly integrate with ADK's architecture and enhance the overall capabilities of their agents.</p>"},{"location":"tools/index.en/#defining-effective-tool-functions","title":"Defining Effective Tool Functions","text":"<p>When using a method or function as an ADK Tool, how you define it significantly impacts the agent's ability to use it correctly. The agent's Large Language Model (LLM) relies heavily on the function's name, parameters (arguments), type hints, and docstring / source code comments to understand its purpose and generate the correct call.</p> <p>Here are key guidelines for defining effective tool functions:</p> <ul> <li> <p>Function Name:</p> <ul> <li>Use descriptive, verb-noun based names that clearly indicate the action (e.g., <code>get_weather</code>, <code>searchDocuments</code>, <code>schedule_meeting</code>).</li> <li>Avoid generic names like <code>run</code>, <code>process</code>, <code>handle_data</code>, or overly ambiguous names like <code>doStuff</code>. Even with a good description, a name like <code>do_stuff</code> might confuse the model about when to use the tool versus, for example, <code>cancelFlight</code>.</li> <li>The LLM uses the function name as a primary identifier during tool selection.</li> </ul> </li> <li> <p>Parameters (Arguments):</p> <ul> <li>Your function can have any number of parameters.</li> <li>Use clear and descriptive names (e.g., <code>city</code> instead of <code>c</code>, <code>search_query</code> instead of <code>q</code>).</li> <li>Provide type hints in Python  for all parameters (e.g., <code>city: str</code>, <code>user_id: int</code>, <code>items: list[str]</code>). This is essential for ADK to generate the correct schema for the LLM.</li> <li>Ensure all parameter types are JSON serializable. All java primitives as well as standard Python types like <code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code>, <code>list</code>, <code>dict</code>, and their combinations are generally safe. Avoid complex custom class instances as direct parameters unless they have a clear JSON representation.</li> <li>Do not set default values for parameters. E.g., <code>def my_func(param1: str = \"default\")</code>. Default values are not reliably supported or used by the underlying models during function call generation. All necessary information should be derived by the LLM from the context or explicitly requested if missing.</li> <li><code>self</code> / <code>cls</code> Handled Automatically: Implicit parameters like <code>self</code> (for instance methods) or <code>cls</code> (for class methods) are automatically handled by ADK and excluded from the schema shown to the LLM. You only need to define type hints and descriptions for the logical parameters your tool requires the LLM to provide.</li> </ul> </li> <li> <p>Return Type:</p> <ul> <li>The function's return value must be a dictionary (<code>dict</code>) in Python or a Map in Java.</li> <li>If your function returns a non-dictionary type (e.g., a string, number, list), the ADK framework will automatically wrap it into a dictionary/Map like <code>{'result': your_original_return_value}</code> before passing the result back to the model.</li> <li>Design the dictionary/Map keys and values to be descriptive and easily understood by the LLM. Remember, the model reads this output to decide its next step.</li> <li>Include meaningful keys. For example, instead of returning just an error code like <code>500</code>, return <code>{'status': 'error', 'error_message': 'Database connection failed'}</code>.</li> <li>It's a highly recommended practice to include a <code>status</code> key (e.g., <code>'success'</code>, <code>'error'</code>, <code>'pending'</code>, <code>'ambiguous'</code>) to clearly indicate the outcome of the tool execution for the model.</li> </ul> </li> <li> <p>Docstring / Source Code Comments:</p> <ul> <li>This is critical. The docstring is the primary source of descriptive information for the LLM.</li> <li>Clearly state what the tool does. Be specific about its purpose and limitations.</li> <li>Explain when the tool should be used. Provide context or example scenarios to guide the LLM's decision-making.</li> <li>Describe each parameter clearly. Explain what information the LLM needs to provide for that argument.</li> <li>Describe the structure and meaning of the expected <code>dict</code> return value, especially the different <code>status</code> values and associated data keys.</li> <li>Do not describe the injected ToolContext parameter. Avoid mentioning the optional <code>tool_context: ToolContext</code> parameter within the docstring description since it is not a parameter the LLM needs to know about. ToolContext is injected by ADK, after the LLM decides to call it. </li> </ul> <p>Example of a good definition:</p> </li> </ul> PythonJava <pre><code>def lookup_order_status(order_id: str) -&gt; dict:\n  \"\"\"Fetches the current status of a customer's order using its ID.\n\n  Use this tool ONLY when a user explicitly asks for the status of\n  a specific order and provides the order ID. Do not use it for\n  general inquiries.\n\n  Args:\n      order_id: The unique identifier of the order to look up.\n\n  Returns:\n      A dictionary indicating the outcome.\n      On success, status is 'success' and includes an 'order' dictionary.\n      On failure, status is 'error' and includes an 'error_message'.\n      Example success: {'status': 'success', 'order': {'state': 'shipped', 'tracking_number': '1Z9...'}}\n      Example error: {'status': 'error', 'error_message': 'Order ID not found.'}\n  \"\"\"\n  # ... function implementation to fetch status ...\n  if status_details := fetch_status_from_backend(order_id):\n    return {\n        \"status\": \"success\",\n        \"order\": {\n            \"state\": status_details.state,\n            \"tracking_number\": status_details.tracking,\n        },\n    }\n  else:\n    return {\"status\": \"error\", \"error_message\": f\"Order ID {order_id} not found.\"}\n</code></pre> <pre><code>/**\n * Retrieves the current weather report for a specified city.\n *\n * @param city The city for which to retrieve the weather report.\n * @param toolContext The context for the tool.\n * @return A dictionary containing the weather information.\n */\npublic static Map&lt;String, Object&gt; getWeatherReport(String city, ToolContext toolContext) {\n    Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();\n    if (city.toLowerCase(Locale.ROOT).equals(\"london\")) {\n        response.put(\"status\", \"success\");\n        response.put(\n                \"report\",\n                \"The current weather in London is cloudy with a temperature of 18 degrees Celsius and a\"\n                        + \" chance of rain.\");\n    } else if (city.toLowerCase(Locale.ROOT).equals(\"paris\")) {\n        response.put(\"status\", \"success\");\n        response.put(\"report\", \"The weather in Paris is sunny with a temperature of 25 degrees Celsius.\");\n    } else {\n        response.put(\"status\", \"error\");\n        response.put(\"error_message\", String.format(\"Weather information for '%s' is not available.\", city));\n    }\n    return response;\n}\n</code></pre> <ul> <li>Simplicity and Focus:<ul> <li>Keep Tools Focused: Each tool should ideally perform one well-defined task.</li> <li>Fewer Parameters are Better: Models generally handle tools with fewer, clearly defined parameters more reliably than those with many optional or complex ones.</li> <li>Use Simple Data Types: Prefer basic types (<code>str</code>, <code>int</code>, <code>bool</code>, <code>float</code>, <code>List[str]</code>, in Python, or <code>int</code>, <code>byte</code>, <code>short</code>, <code>long</code>, <code>float</code>, <code>double</code>, <code>boolean</code> and <code>char</code> in Java) over complex custom classes or deeply nested structures as parameters when possible.</li> <li>Decompose Complex Tasks: Break down functions that perform multiple distinct logical steps into smaller, more focused tools. For instance, instead of a single <code>update_user_profile(profile: ProfileObject)</code> tool, consider separate tools like <code>update_user_name(name: str)</code>, <code>update_user_address(address: str)</code>, <code>update_user_preferences(preferences: list[str])</code>, etc. This makes it easier for the LLM to select and use the correct capability.</li> </ul> </li> </ul> <p>By adhering to these guidelines, you provide the LLM with the clarity and structure it needs to effectively utilize your custom function tools, leading to more capable and reliable agent behavior.</p>"},{"location":"tools/index.en/#toolsets-grouping-and-dynamically-providing-tools","title":"Toolsets: Grouping and Dynamically Providing Tools","text":"<p>Beyond individual tools, ADK introduces the concept of a Toolset via the <code>BaseToolset</code> interface (defined in <code>google.adk.tools.base_toolset</code>). A toolset allows you to manage and provide a collection of <code>BaseTool</code> instances, often dynamically, to an agent.</p> <p>This approach is beneficial for:</p> <ul> <li>Organizing Related Tools: Grouping tools that serve a common purpose (e.g., all tools for mathematical operations, or all tools interacting with a specific API).</li> <li>Dynamic Tool Availability: Enabling an agent to have different tools available based on the current context (e.g., user permissions, session state, or other runtime conditions). The <code>get_tools</code> method of a toolset can decide which tools to expose.</li> <li>Integrating External Tool Providers: Toolsets can act as adapters for tools coming from external systems, like an OpenAPI specification or an MCP server, converting them into ADK-compatible <code>BaseTool</code> objects.</li> </ul>"},{"location":"tools/index.en/#the-basetoolset-interface","title":"The <code>BaseToolset</code> Interface","text":"<p>Any class acting as a toolset in ADK should implement the <code>BaseToolset</code> abstract base class. This interface primarily defines two methods:</p> <ul> <li> <p><code>async def get_tools(...) -&gt; list[BaseTool]:</code>     This is the core method of a toolset. When an ADK agent needs to know its available tools, it will call <code>get_tools()</code> on each <code>BaseToolset</code> instance provided in its <code>tools</code> list.</p> <ul> <li>It receives an optional <code>readonly_context</code> (an instance of <code>ReadonlyContext</code>). This context provides read-only access to information like the current session state (<code>readonly_context.state</code>), agent name, and invocation ID. The toolset can use this context to dynamically decide which tools to return.</li> <li>It must return a <code>list</code> of <code>BaseTool</code> instances (e.g., <code>FunctionTool</code>, <code>RestApiTool</code>).</li> </ul> </li> <li> <p><code>async def close(self) -&gt; None:</code>     This asynchronous method is called by the ADK framework when the toolset is no longer needed, for example, when an agent server is shutting down or the <code>Runner</code> is being closed. Implement this method to perform any necessary cleanup, such as closing network connections, releasing file handles, or cleaning up other resources managed by the toolset.</p> </li> </ul>"},{"location":"tools/index.en/#using-toolsets-with-agents","title":"Using Toolsets with Agents","text":"<p>You can include instances of your <code>BaseToolset</code> implementations directly in an <code>LlmAgent</code>'s <code>tools</code> list, alongside individual <code>BaseTool</code> instances.</p> <p>When the agent initializes or needs to determine its available capabilities, the ADK framework will iterate through the <code>tools</code> list:</p> <ul> <li>If an item is a <code>BaseTool</code> instance, it's used directly.</li> <li>If an item is a <code>BaseToolset</code> instance, its <code>get_tools()</code> method is called (with the current <code>ReadonlyContext</code>), and the returned list of <code>BaseTool</code>s is added to the agent's available tools.</li> </ul>"},{"location":"tools/index.en/#example-a-simple-math-toolset","title":"Example: A Simple Math Toolset","text":"<p>Let's create a basic example of a toolset that provides simple arithmetic operations.</p> <pre><code># 1. Define the individual tool functions\ndef add_numbers(a: int, b: int, tool_context: ToolContext) -&gt; Dict[str, Any]:\n    \"\"\"Adds two integer numbers.\n    Args:\n        a: The first number.\n        b: The second number.\n    Returns:\n        A dictionary with the sum, e.g., {'status': 'success', 'result': 5}\n    \"\"\"\n    print(f\"Tool: add_numbers called with a={a}, b={b}\")\n    result = a + b\n    # Example: Storing something in tool_context state\n    tool_context.state[\"last_math_operation\"] = \"addition\"\n    return {\"status\": \"success\", \"result\": result}\n\n\ndef subtract_numbers(a: int, b: int) -&gt; Dict[str, Any]:\n    \"\"\"Subtracts the second number from the first.\n    Args:\n        a: The first number.\n        b: The second number.\n    Returns:\n        A dictionary with the difference, e.g., {'status': 'success', 'result': 1}\n    \"\"\"\n    print(f\"Tool: subtract_numbers called with a={a}, b={b}\")\n    return {\"status\": \"success\", \"result\": a - b}\n\n\n# 2. Create the Toolset by implementing BaseToolset\nclass SimpleMathToolset(BaseToolset):\n    def __init__(self, prefix: str = \"math_\"):\n        self.prefix = prefix\n        # Create FunctionTool instances once\n        self._add_tool = FunctionTool(\n            func=add_numbers,\n            name=f\"{self.prefix}add_numbers\",  # Toolset can customize names\n        )\n        self._subtract_tool = FunctionTool(\n            func=subtract_numbers, name=f\"{self.prefix}subtract_numbers\"\n        )\n        print(f\"SimpleMathToolset initialized with prefix '{self.prefix}'\")\n\n    async def get_tools(\n        self, readonly_context: Optional[ReadonlyContext] = None\n    ) -&gt; List[BaseTool]:\n        print(f\"SimpleMathToolset.get_tools() called.\")\n        # Example of dynamic behavior:\n        # Could use readonly_context.state to decide which tools to return\n        # For instance, if readonly_context.state.get(\"enable_advanced_math\"):\n        #    return [self._add_tool, self._subtract_tool, self._multiply_tool]\n\n        # For this simple example, always return both tools\n        tools_to_return = [self._add_tool, self._subtract_tool]\n        print(f\"SimpleMathToolset providing tools: {[t.name for t in tools_to_return]}\")\n        return tools_to_return\n\n    async def close(self) -&gt; None:\n        # No resources to clean up in this simple example\n        print(f\"SimpleMathToolset.close() called for prefix '{self.prefix}'.\")\n        await asyncio.sleep(0)  # Placeholder for async cleanup if needed\n\n\n# 3. Define an individual tool (not part of the toolset)\ndef greet_user(name: str = \"User\") -&gt; Dict[str, str]:\n    \"\"\"Greets the user.\"\"\"\n    print(f\"Tool: greet_user called with name={name}\")\n    return {\"greeting\": f\"Hello, {name}!\"}\n\n\ngreet_tool = FunctionTool(func=greet_user)\n\n# 4. Instantiate the toolset\nmath_toolset_instance = SimpleMathToolset(prefix=\"calculator_\")\n\n# 5. Define an agent that uses both the individual tool and the toolset\ncalculator_agent = LlmAgent(\n    name=\"CalculatorAgent\",\n    model=\"gemini-2.0-flash\",  # Replace with your desired model\n    instruction=\"You are a helpful calculator and greeter. \"\n    \"Use 'greet_user' for greetings. \"\n    \"Use 'calculator_add_numbers' to add and 'calculator_subtract_numbers' to subtract. \"\n    \"Announce the state of 'last_math_operation' if it's set.\",\n    tools=[greet_tool, math_toolset_instance],  # Individual tool  # Toolset instance\n)\n</code></pre> <p>In this example:</p> <ul> <li><code>SimpleMathToolset</code> implements <code>BaseToolset</code> and its <code>get_tools()</code> method returns <code>FunctionTool</code> instances for <code>add_numbers</code> and <code>subtract_numbers</code>. It also customizes their names using a prefix.</li> <li>The <code>calculator_agent</code> is configured with both an individual <code>greet_tool</code> and an instance of <code>SimpleMathToolset</code>.</li> <li>When <code>calculator_agent</code> is run, ADK will call <code>math_toolset_instance.get_tools()</code>. The agent's LLM will then have access to <code>greet_user</code>, <code>calculator_add_numbers</code>, and <code>calculator_subtract_numbers</code> to handle user requests.</li> <li>The <code>add_numbers</code> tool demonstrates writing to <code>tool_context.state</code>, and the agent's instruction mentions reading this state.</li> <li>The <code>close()</code> method is called to ensure any resources held by the toolset are released.</li> </ul> <p>Toolsets offer a powerful way to organize, manage, and dynamically provide collections of tools to your ADK agents, leading to more modular, maintainable, and adaptable agentic applications.</p>"},{"location":"tools/mcp-tools.en/","title":"Model Context Protocol Tools","text":"<p>This guide walks you through two ways of integrating Model Context Protocol (MCP) with ADK.</p>"},{"location":"tools/mcp-tools.en/#what-is-model-context-protocol-mcp","title":"What is Model Context Protocol (MCP)?","text":"<p>The Model Context Protocol (MCP) is an open standard designed to standardize how Large Language Models (LLMs) like Gemini and Claude communicate with external applications, data sources, and tools. Think of it as a universal connection mechanism that simplifies how LLMs obtain context, execute actions, and interact with various systems.</p> <p>MCP follows a client-server architecture, defining how data (resources), interactive templates (prompts), and actionable functions (tools) are exposed by an MCP server and consumed by an MCP client (which could be an LLM host application or an AI agent).</p> <p>This guide covers two primary integration patterns:</p> <ol> <li>Using Existing MCP Servers within ADK: An ADK agent acts as an MCP client, leveraging tools provided by external MCP servers.</li> <li>Exposing ADK Tools via an MCP Server: Building an MCP server that wraps ADK tools, making them accessible to any MCP client.</li> </ol>"},{"location":"tools/mcp-tools.en/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following set up:</p> <ul> <li>Set up ADK: Follow the standard ADK setup instructions in the quickstart.</li> <li>Install/update Python/Java: MCP requires Python version of 3.9 or higher for Python or Java 17 or higher.</li> <li>Setup Node.js and npx: (Python only) Many community MCP servers are distributed as Node.js packages and run using <code>npx</code>. Install Node.js (which includes npx) if you haven't already. For details, see https://nodejs.org/en.</li> <li>Verify Installations: (Python only) Confirm <code>adk</code> and <code>npx</code> are in your PATH within the activated virtual environment:</li> </ul> <pre><code># Both commands should print the path to the executables.\nwhich adk\nwhich npx\n</code></pre>"},{"location":"tools/mcp-tools.en/#1-using-mcp-servers-with-adk-agents-adk-as-an-mcp-client-in-adk-web","title":"1. Using MCP servers with ADK agents (ADK as an MCP client) in <code>adk web</code>","text":"<p>This section demonstrates how to integrate tools from external MCP (Model Context Protocol) servers into your ADK agents. This is the most common integration pattern when your ADK agent needs to use capabilities provided by an existing service that exposes an MCP interface. You will see how the <code>MCPToolset</code> class can be directly added to your agent's <code>tools</code> list, enabling seamless connection to an MCP server, discovery of its tools, and making them available for your agent to use. These examples primarily focus on interactions within the <code>adk web</code> development environment.</p>"},{"location":"tools/mcp-tools.en/#mcptoolset-class","title":"<code>MCPToolset</code> class","text":"<p>The <code>MCPToolset</code> class is ADK's primary mechanism for integrating tools from an MCP server. When you include an <code>MCPToolset</code> instance in your agent's <code>tools</code> list, it automatically handles the interaction with the specified MCP server. Here's how it works:</p> <ol> <li>Connection Management: On initialization, <code>MCPToolset</code> establishes and manages the connection to the MCP server. This can be a local server process (using <code>StdioConnectionParams</code> for communication over standard input/output) or a remote server (using <code>SseConnectionParams</code> for Server-Sent Events). The toolset also handles the graceful shutdown of this connection when the agent or application terminates.</li> <li>Tool Discovery &amp; Adaptation: Once connected, <code>MCPToolset</code> queries the MCP server for its available tools (via the <code>list_tools</code> MCP method). It then converts the schemas of these discovered MCP tools into ADK-compatible <code>BaseTool</code> instances.</li> <li>Exposure to Agent: These adapted tools are then made available to your <code>LlmAgent</code> as if they were native ADK tools.</li> <li>Proxying Tool Calls: When your <code>LlmAgent</code> decides to use one of these tools, <code>MCPToolset</code> transparently proxies the call (using the <code>call_tool</code> MCP method) to the MCP server, sends the necessary arguments, and returns the server's response back to the agent.</li> <li>Filtering (Optional): You can use the <code>tool_filter</code> parameter when creating an <code>MCPToolset</code> to select a specific subset of tools from the MCP server, rather than exposing all of them to your agent.</li> </ol> <p>The following examples demonstrate how to use <code>MCPToolset</code> within the <code>adk web</code> development environment. For scenarios where you need more fine-grained control over the MCP connection lifecycle or are not using <code>adk web</code>, refer to the \"Using MCP Tools in your own Agent out of <code>adk web</code>\" section later in this page.</p>"},{"location":"tools/mcp-tools.en/#example-1-file-system-mcp-server","title":"Example 1: File System MCP Server","text":"<p>This Python example demonstrates connecting to a local MCP server that provides file system operations.</p>"},{"location":"tools/mcp-tools.en/#step-1-define-your-agent-with-mcptoolset","title":"Step 1: Define your Agent with <code>MCPToolset</code>","text":"<p>Create an <code>agent.py</code> file (e.g., in <code>./adk_agent_samples/mcp_agent/agent.py</code>). The <code>MCPToolset</code> is instantiated directly within the <code>tools</code> list of your <code>LlmAgent</code>.</p> <ul> <li>Important: Replace <code>\"/path/to/your/folder\"</code> in the <code>args</code> list with the absolute path to an actual folder on your local system that the MCP server can access.</li> <li>Important: Place the <code>.env</code> file in the parent directory of the <code>./adk_agent_samples</code> directory.</li> </ul> <pre><code># ./adk_agent_samples/mcp_agent/agent.py\nimport os # Required for path operations\nfrom google.adk.agents import LlmAgent\nfrom google.adk.tools.mcp_tool.mcp_toolset import MCPToolset\nfrom google.adk.tools.mcp_tool.mcp_session_manager import StdioConnectionParams\nfrom mcp import StdioServerParameters\n\n# It's good practice to define paths dynamically if possible,\n# or ensure the user understands the need for an ABSOLUTE path.\n# For this example, we'll construct a path relative to this file,\n# assuming '/path/to/your/folder' is in the same directory as agent.py.\n# REPLACE THIS with an actual absolute path if needed for your setup.\nTARGET_FOLDER_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"/path/to/your/folder\")\n# Ensure TARGET_FOLDER_PATH is an absolute path for the MCP server.\n# If you created ./adk_agent_samples/mcp_agent/your_folder,\n\nroot_agent = LlmAgent(\n    model='gemini-2.0-flash',\n    name='filesystem_assistant_agent',\n    instruction='Help the user manage their files. You can list files, read files, etc.',\n    tools=[\n        MCPToolset(\n            connection_params=StdioConnectionParams(\n                server_params = StdioServerParameters(\n                    command='npx',\n                    args=[\n                        \"-y\",  # Argument for npx to auto-confirm install\n                        \"@modelcontextprotocol/server-filesystem\",\n                        # IMPORTANT: This MUST be an ABSOLUTE path to a folder the\n                        # npx process can access.\n                        # Replace with a valid absolute path on your system.\n                        # For example: \"/Users/youruser/accessible_mcp_files\"\n                        # or use a dynamically constructed absolute path:\n                        os.path.abspath(TARGET_FOLDER_PATH),\n                    ],\n                ),\n            ),\n            # Optional: Filter which tools from the MCP server are exposed\n            # tool_filter=['list_directory', 'read_file']\n        )\n    ],\n)\n</code></pre>"},{"location":"tools/mcp-tools.en/#step-2-create-an-__init__py-file","title":"Step 2: Create an <code>__init__.py</code> file","text":"<p>Ensure you have an <code>__init__.py</code> in the same directory as <code>agent.py</code> to make it a discoverable Python package for ADK.</p> <pre><code># ./adk_agent_samples/mcp_agent/__init__.py\nfrom . import agent\n</code></pre>"},{"location":"tools/mcp-tools.en/#step-3-run-adk-web-and-interact","title":"Step 3: Run <code>adk web</code> and Interact","text":"<p>Navigate to the parent directory of <code>mcp_agent</code> (e.g., <code>adk_agent_samples</code>) in your terminal and run:</p> <pre><code>cd ./adk_agent_samples # Or your equivalent parent directory\nadk web\n</code></pre> <p>Note for Windows users</p> <p>When hitting the <code>_make_subprocess_transport NotImplementedError</code>, consider using <code>adk web --no-reload</code> instead.</p> <p>Once the ADK Web UI loads in your browser:</p> <ol> <li>Select the <code>filesystem_assistant_agent</code> from the agent dropdown.</li> <li>Try prompts like:<ul> <li>\"List files in the current directory.\"</li> <li>\"Can you read the file named sample.txt?\" (assuming you created it in <code>TARGET_FOLDER_PATH</code>).</li> <li>\"What is the content of <code>another_file.md</code>?\"</li> </ul> </li> </ol> <p>You should see the agent interacting with the MCP file system server, and the server's responses (file listings, file content) relayed through the agent. The <code>adk web</code> console (terminal where you ran the command) might also show logs from the <code>npx</code> process if it outputs to stderr.</p> <p></p> <p>For Java, refer to the following sample to define an agent that initializes the <code>MCPToolset</code>:</p> <pre><code>package agents;\n\nimport com.google.adk.JsonBaseModel;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.RunConfig;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.tools.mcp.McpTool;\nimport com.google.adk.tools.mcp.McpToolset;\nimport com.google.adk.tools.mcp.McpToolset.McpToolsAndToolsetResult;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.modelcontextprotocol.client.transport.ServerParameters;\n\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\n\npublic class McpAgentCreator {\n\n    /**\n     * Initializes an McpToolset, retrieves tools from an MCP server using stdio,\n     * creates an LlmAgent with these tools, sends a prompt to the agent,\n     * and ensures the toolset is closed.\n     * @param args Command line arguments (not used).\n     */\n    public static void main(String[] args) {\n        //Note: you may have permissions issues if the folder is outside home\n        String yourFolderPath = \"~/path/to/folder\";\n\n        ServerParameters connectionParams = ServerParameters.builder(\"npx\")\n                .args(List.of(\n                        \"-y\",\n                        \"@modelcontextprotocol/server-filesystem\",\n                        yourFolderPath\n                ))\n                .build();\n\n        try {\n            CompletableFuture&lt;McpToolsAndToolsetResult&gt; futureResult =\n                    McpToolset.fromServer(connectionParams, JsonBaseModel.getMapper());\n\n            McpToolsAndToolsetResult result = futureResult.join();\n\n            try (McpToolset toolset = result.getToolset()) {\n                List&lt;McpTool&gt; tools = result.getTools();\n\n                LlmAgent agent = LlmAgent.builder()\n                        .model(\"gemini-2.0-flash\")\n                        .name(\"enterprise_assistant\")\n                        .description(\"An agent to help users access their file systems\")\n                        .instruction(\n                                \"Help user accessing their file systems. You can list files in a directory.\"\n                        )\n                        .tools(tools)\n                        .build();\n\n                System.out.println(\"Agent created: \" + agent.name());\n\n                InMemoryRunner runner = new InMemoryRunner(agent);\n                String userId = \"user123\";\n                String sessionId = \"1234\";\n                String promptText = \"Which files are in this directory - \" + yourFolderPath + \"?\";\n\n                // Explicitly create the session first\n                try {\n                    // appName for InMemoryRunner defaults to agent.name() if not specified in constructor\n                    runner.sessionService().createSession(runner.appName(), userId, null, sessionId).blockingGet();\n                    System.out.println(\"Session created: \" + sessionId + \" for user: \" + userId);\n                } catch (Exception sessionCreationException) {\n                    System.err.println(\"Failed to create session: \" + sessionCreationException.getMessage());\n                    sessionCreationException.printStackTrace();\n                    return;\n                }\n\n                Content promptContent = Content.fromParts(Part.fromText(promptText));\n\n                System.out.println(\"\\nSending prompt: \\\"\" + promptText + \"\\\" to agent...\\n\");\n\n                runner.runAsync(userId, sessionId, promptContent, RunConfig.builder().build())\n                        .blockingForEach(event -&gt; {\n                            System.out.println(\"Event received: \" + event.toJson());\n                        });\n            }\n        } catch (Exception e) {\n            System.err.println(\"An error occurred: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <p>Assuming a folder containing three files named <code>first</code>, <code>second</code> and <code>third</code>, successful response will look like this:</p> <pre><code>Event received: {\"id\":\"163a449e-691a-48a2-9e38-8cadb6d1f136\",\"invocationId\":\"e-c2458c56-e57a-45b2-97de-ae7292e505ef\",\"author\":\"enterprise_assistant\",\"content\":{\"parts\":[{\"functionCall\":{\"id\":\"adk-388b4ac2-d40e-4f6a-bda6-f051110c6498\",\"args\":{\"path\":\"~/home-test\"},\"name\":\"list_directory\"}}],\"role\":\"model\"},\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"timestamp\":1747377543788}\n\nEvent received: {\"id\":\"8728380b-bfad-4d14-8421-fa98d09364f1\",\"invocationId\":\"e-c2458c56-e57a-45b2-97de-ae7292e505ef\",\"author\":\"enterprise_assistant\",\"content\":{\"parts\":[{\"functionResponse\":{\"id\":\"adk-388b4ac2-d40e-4f6a-bda6-f051110c6498\",\"name\":\"list_directory\",\"response\":{\"text_output\":[{\"text\":\"[FILE] first\\n[FILE] second\\n[FILE] third\"}]}}}],\"role\":\"user\"},\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"timestamp\":1747377544679}\n\nEvent received: {\"id\":\"8fe7e594-3e47-4254-8b57-9106ad8463cb\",\"invocationId\":\"e-c2458c56-e57a-45b2-97de-ae7292e505ef\",\"author\":\"enterprise_assistant\",\"content\":{\"parts\":[{\"text\":\"There are three files in the directory: first, second, and third.\"}],\"role\":\"model\"},\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"timestamp\":1747377544689}\n</code></pre>"},{"location":"tools/mcp-tools.en/#example-2-google-maps-mcp-server","title":"Example 2: Google Maps MCP Server","text":"<p>This example demonstrates connecting to the Google Maps MCP server.</p>"},{"location":"tools/mcp-tools.en/#step-1-get-api-key-and-enable-apis","title":"Step 1: Get API Key and Enable APIs","text":"<ol> <li>Google Maps API Key: Follow the directions at Use API keys to obtain a Google Maps API Key.</li> <li>Enable APIs: In your Google Cloud project, ensure the following APIs are enabled:<ul> <li>Directions API</li> <li>Routes API For instructions, see the Getting started with Google Maps Platform documentation.</li> </ul> </li> </ol>"},{"location":"tools/mcp-tools.en/#step-2-define-your-agent-with-mcptoolset-for-google-maps","title":"Step 2: Define your Agent with <code>MCPToolset</code> for Google Maps","text":"<p>Modify your <code>agent.py</code> file (e.g., in <code>./adk_agent_samples/mcp_agent/agent.py</code>). Replace <code>YOUR_GOOGLE_MAPS_API_KEY</code> with the actual API key you obtained.</p> <pre><code># ./adk_agent_samples/mcp_agent/agent.py\nimport os\nfrom google.adk.agents import LlmAgent\nfrom google.adk.tools.mcp_tool.mcp_toolset import MCPToolset\nfrom google.adk.tools.mcp_tool.mcp_session_manager import StdioConnectionParams\nfrom mcp import StdioServerParameters\n\n# Retrieve the API key from an environment variable or directly insert it.\n# Using an environment variable is generally safer.\n# Ensure this environment variable is set in the terminal where you run 'adk web'.\n# Example: export GOOGLE_MAPS_API_KEY=\"YOUR_ACTUAL_KEY\"\ngoogle_maps_api_key = os.environ.get(\"GOOGLE_MAPS_API_KEY\")\n\nif not google_maps_api_key:\n    # Fallback or direct assignment for testing - NOT RECOMMENDED FOR PRODUCTION\n    google_maps_api_key = \"YOUR_GOOGLE_MAPS_API_KEY_HERE\" # Replace if not using env var\n    if google_maps_api_key == \"YOUR_GOOGLE_MAPS_API_KEY_HERE\":\n        print(\"WARNING: GOOGLE_MAPS_API_KEY is not set. Please set it as an environment variable or in the script.\")\n        # You might want to raise an error or exit if the key is crucial and not found.\n\nroot_agent = LlmAgent(\n    model='gemini-2.0-flash',\n    name='maps_assistant_agent',\n    instruction='Help the user with mapping, directions, and finding places using Google Maps tools.',\n    tools=[\n        MCPToolset(\n            connection_params=StdioConnectionParams(\n                server_params = StdioServerParameters(\n                    command='npx',\n                    args=[\n                        \"-y\",\n                        \"@modelcontextprotocol/server-google-maps\",\n                    ],\n                    # Pass the API key as an environment variable to the npx process\n                    # This is how the MCP server for Google Maps expects the key.\n                    env={\n                        \"GOOGLE_MAPS_API_KEY\": google_maps_api_key\n                    }\n                ),\n            ),\n            # You can filter for specific Maps tools if needed:\n            # tool_filter=['get_directions', 'find_place_by_id']\n        )\n    ],\n)\n</code></pre>"},{"location":"tools/mcp-tools.en/#step-3-ensure-__init__py-exists","title":"Step 3: Ensure <code>__init__.py</code> Exists","text":"<p>If you created this in Example 1, you can skip this. Otherwise, ensure you have an <code>__init__.py</code> in the <code>./adk_agent_samples/mcp_agent/</code> directory:</p> <pre><code># ./adk_agent_samples/mcp_agent/__init__.py\nfrom . import agent\n</code></pre>"},{"location":"tools/mcp-tools.en/#step-4-run-adk-web-and-interact","title":"Step 4: Run <code>adk web</code> and Interact","text":"<ol> <li> <p>Set Environment Variable (Recommended):     Before running <code>adk web</code>, it's best to set your Google Maps API key as an environment variable in your terminal:     <pre><code>export GOOGLE_MAPS_API_KEY=\"YOUR_ACTUAL_GOOGLE_MAPS_API_KEY\"\n</code></pre>     Replace <code>YOUR_ACTUAL_GOOGLE_MAPS_API_KEY</code> with your key.</p> </li> <li> <p>Run <code>adk web</code>:     Navigate to the parent directory of <code>mcp_agent</code> (e.g., <code>adk_agent_samples</code>) and run:     <pre><code>cd ./adk_agent_samples # Or your equivalent parent directory\nadk web\n</code></pre></p> </li> <li> <p>Interact in the UI:</p> <ul> <li>Select the <code>maps_assistant_agent</code>.</li> <li>Try prompts like:<ul> <li>\"Get directions from GooglePlex to SFO.\"</li> <li>\"Find coffee shops near Golden Gate Park.\"</li> <li>\"What's the route from Paris, France to Berlin, Germany?\"</li> </ul> </li> </ul> </li> </ol> <p>You should see the agent use the Google Maps MCP tools to provide directions or location-based information.</p> <p></p> <p>For Java, refer to the following sample to define an agent that initializes the <code>MCPToolset</code>:</p> <pre><code>package agents;\n\nimport com.google.adk.JsonBaseModel;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.RunConfig;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.tools.mcp.McpTool;\nimport com.google.adk.tools.mcp.McpToolset;\nimport com.google.adk.tools.mcp.McpToolset.McpToolsAndToolsetResult;\n\n\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\n\nimport io.modelcontextprotocol.client.transport.ServerParameters;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.Arrays;\n\npublic class MapsAgentCreator {\n\n    /**\n     * Initializes an McpToolset for Google Maps, retrieves tools,\n     * creates an LlmAgent, sends a map-related prompt, and closes the toolset.\n     * @param args Command line arguments (not used).\n     */\n    public static void main(String[] args) {\n        // TODO: Replace with your actual Google Maps API key, on a project with the Places API enabled.\n        String googleMapsApiKey = \"YOUR_GOOGLE_MAPS_API_KEY\";\n\n        Map&lt;String, String&gt; envVariables = new HashMap&lt;&gt;();\n        envVariables.put(\"GOOGLE_MAPS_API_KEY\", googleMapsApiKey);\n\n        ServerParameters connectionParams = ServerParameters.builder(\"npx\")\n                .args(List.of(\n                        \"-y\",\n                        \"@modelcontextprotocol/server-google-maps\"\n                ))\n                .env(Collections.unmodifiableMap(envVariables))\n                .build();\n\n        try {\n            CompletableFuture&lt;McpToolsAndToolsetResult&gt; futureResult =\n                    McpToolset.fromServer(connectionParams, JsonBaseModel.getMapper());\n\n            McpToolsAndToolsetResult result = futureResult.join();\n\n            try (McpToolset toolset = result.getToolset()) {\n                List&lt;McpTool&gt; tools = result.getTools();\n\n                LlmAgent agent = LlmAgent.builder()\n                        .model(\"gemini-2.0-flash\")\n                        .name(\"maps_assistant\")\n                        .description(\"Maps assistant\")\n                        .instruction(\"Help user with mapping and directions using available tools.\")\n                        .tools(tools)\n                        .build();\n\n                System.out.println(\"Agent created: \" + agent.name());\n\n                InMemoryRunner runner = new InMemoryRunner(agent);\n                String userId = \"maps-user-\" + System.currentTimeMillis();\n                String sessionId = \"maps-session-\" + System.currentTimeMillis();\n\n                String promptText = \"Please give me directions to the nearest pharmacy to Madison Square Garden.\";\n\n                try {\n                    runner.sessionService().createSession(runner.appName(), userId, null, sessionId).blockingGet();\n                    System.out.println(\"Session created: \" + sessionId + \" for user: \" + userId);\n                } catch (Exception sessionCreationException) {\n                    System.err.println(\"Failed to create session: \" + sessionCreationException.getMessage());\n                    sessionCreationException.printStackTrace();\n                    return;\n                }\n\n                Content promptContent = Content.fromParts(Part.fromText(promptText))\n\n                System.out.println(\"\\nSending prompt: \\\"\" + promptText + \"\\\" to agent...\\n\");\n\n                runner.runAsync(userId, sessionId, promptContent, RunConfig.builder().build())\n                        .blockingForEach(event -&gt; {\n                            System.out.println(\"Event received: \" + event.toJson());\n                        });\n            }\n        } catch (Exception e) {\n            System.err.println(\"An error occurred: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <p>A successful response will look like this: <pre><code>Event received: {\"id\":\"1a4deb46-c496-4158-bd41-72702c773368\",\"invocationId\":\"e-48994aa0-531c-47be-8c57-65215c3e0319\",\"author\":\"maps_assistant\",\"content\":{\"parts\":[{\"text\":\"OK. I see a few options. The closest one is CVS Pharmacy at 5 Pennsylvania Plaza, New York, NY 10001, United States. Would you like directions?\\n\"}],\"role\":\"model\"},\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"timestamp\":1747380026642}\n</code></pre></p>"},{"location":"tools/mcp-tools.en/#2-building-an-mcp-server-with-adk-tools-mcp-server-exposing-adk","title":"2. Building an MCP server with ADK tools (MCP server exposing ADK)","text":"<p>This pattern allows you to wrap existing ADK tools and make them available to any standard MCP client application. The example in this section exposes the ADK <code>load_web_page</code> tool through a custom-built MCP server.</p>"},{"location":"tools/mcp-tools.en/#summary-of-steps","title":"Summary of steps","text":"<p>You will create a standard Python MCP server application using the <code>mcp</code> library. Within this server, you will:</p> <ol> <li>Instantiate the ADK tool(s) you want to expose (e.g., <code>FunctionTool(load_web_page)</code>).</li> <li>Implement the MCP server's <code>@app.list_tools()</code> handler to advertise the ADK tool(s). This involves converting the ADK tool definition to the MCP schema using the <code>adk_to_mcp_tool_type</code> utility from <code>google.adk.tools.mcp_tool.conversion_utils</code>.</li> <li>Implement the MCP server's <code>@app.call_tool()</code> handler. This handler will:<ul> <li>Receive tool call requests from MCP clients.</li> <li>Identify if the request targets one of your wrapped ADK tools.</li> <li>Execute the ADK tool's <code>.run_async()</code> method.</li> <li>Format the ADK tool's result into an MCP-compliant response (e.g., <code>mcp.types.TextContent</code>).</li> </ul> </li> </ol>"},{"location":"tools/mcp-tools.en/#prerequisites_1","title":"Prerequisites","text":"<p>Install the MCP server library in the same Python environment as your ADK installation:</p> <pre><code>pip install mcp\n</code></pre>"},{"location":"tools/mcp-tools.en/#step-1-create-the-mcp-server-script","title":"Step 1: Create the MCP Server Script","text":"<p>Create a new Python file for your MCP server, for example, <code>my_adk_mcp_server.py</code>.</p>"},{"location":"tools/mcp-tools.en/#step-2-implement-the-server-logic","title":"Step 2: Implement the Server Logic","text":"<p>Add the following code to <code>my_adk_mcp_server.py</code>. This script sets up an MCP server that exposes the ADK <code>load_web_page</code> tool.</p> <pre><code># my_adk_mcp_server.py\nimport asyncio\nimport json\nimport os\nfrom dotenv import load_dotenv\n\n# MCP Server Imports\nfrom mcp import types as mcp_types # Use alias to avoid conflict\nfrom mcp.server.lowlevel import Server, NotificationOptions\nfrom mcp.server.models import InitializationOptions\nimport mcp.server.stdio # For running as a stdio server\n\n# ADK Tool Imports\nfrom google.adk.tools.function_tool import FunctionTool\nfrom google.adk.tools.load_web_page import load_web_page # Example ADK tool\n# ADK &lt;-&gt; MCP Conversion Utility\nfrom google.adk.tools.mcp_tool.conversion_utils import adk_to_mcp_tool_type\n\n# --- Load Environment Variables (If ADK tools need them, e.g., API keys) ---\nload_dotenv() # Create a .env file in the same directory if needed\n\n# --- Prepare the ADK Tool ---\n# Instantiate the ADK tool you want to expose.\n# This tool will be wrapped and called by the MCP server.\nprint(\"Initializing ADK load_web_page tool...\")\nadk_tool_to_expose = FunctionTool(load_web_page)\nprint(f\"ADK tool '{adk_tool_to_expose.name}' initialized and ready to be exposed via MCP.\")\n# --- End ADK Tool Prep ---\n\n# --- MCP Server Setup ---\nprint(\"Creating MCP Server instance...\")\n# Create a named MCP Server instance using the mcp.server library\napp = Server(\"adk-tool-exposing-mcp-server\")\n\n# Implement the MCP server's handler to list available tools\n@app.list_tools()\nasync def list_mcp_tools() -&gt; list[mcp_types.Tool]:\n    \"\"\"MCP handler to list tools this server exposes.\"\"\"\n    print(\"MCP Server: Received list_tools request.\")\n    # Convert the ADK tool's definition to the MCP Tool schema format\n    mcp_tool_schema = adk_to_mcp_tool_type(adk_tool_to_expose)\n    print(f\"MCP Server: Advertising tool: {mcp_tool_schema.name}\")\n    return [mcp_tool_schema]\n\n# Implement the MCP server's handler to execute a tool call\n@app.call_tool()\nasync def call_mcp_tool(\n    name: str, arguments: dict\n) -&gt; list[mcp_types.Content]: # MCP uses mcp_types.Content\n    \"\"\"MCP handler to execute a tool call requested by an MCP client.\"\"\"\n    print(f\"MCP Server: Received call_tool request for '{name}' with args: {arguments}\")\n\n    # Check if the requested tool name matches our wrapped ADK tool\n    if name == adk_tool_to_expose.name:\n        try:\n            # Execute the ADK tool's run_async method.\n            # Note: tool_context is None here because this MCP server is\n            # running the ADK tool outside of a full ADK Runner invocation.\n            # If the ADK tool requires ToolContext features (like state or auth),\n            # this direct invocation might need more sophisticated handling.\n            adk_tool_response = await adk_tool_to_expose.run_async(\n                args=arguments,\n                tool_context=None,\n            )\n            print(f\"MCP Server: ADK tool '{name}' executed. Response: {adk_tool_response}\")\n\n            # Format the ADK tool's response (often a dict) into an MCP-compliant format.\n            # Here, we serialize the response dictionary as a JSON string within TextContent.\n            # Adjust formatting based on the ADK tool's output and client needs.\n            response_text = json.dumps(adk_tool_response, indent=2)\n            # MCP expects a list of mcp_types.Content parts\n            return [mcp_types.TextContent(type=\"text\", text=response_text)]\n\n        except Exception as e:\n            print(f\"MCP Server: Error executing ADK tool '{name}': {e}\")\n            # Return an error message in MCP format\n            error_text = json.dumps({\"error\": f\"Failed to execute tool '{name}': {str(e)}\"})\n            return [mcp_types.TextContent(type=\"text\", text=error_text)]\n    else:\n        # Handle calls to unknown tools\n        print(f\"MCP Server: Tool '{name}' not found/exposed by this server.\")\n        error_text = json.dumps({\"error\": f\"Tool '{name}' not implemented by this server.\"})\n        return [mcp_types.TextContent(type=\"text\", text=error_text)]\n\n# --- MCP Server Runner ---\nasync def run_mcp_stdio_server():\n    \"\"\"Runs the MCP server, listening for connections over standard input/output.\"\"\"\n    # Use the stdio_server context manager from the mcp.server.stdio library\n    async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):\n        print(\"MCP Stdio Server: Starting handshake with client...\")\n        await app.run(\n            read_stream,\n            write_stream,\n            InitializationOptions(\n                server_name=app.name, # Use the server name defined above\n                server_version=\"0.1.0\",\n                capabilities=app.get_capabilities(\n                    # Define server capabilities - consult MCP docs for options\n                    notification_options=NotificationOptions(),\n                    experimental_capabilities={},\n                ),\n            ),\n        )\n        print(\"MCP Stdio Server: Run loop finished or client disconnected.\")\n\nif __name__ == \"__main__\":\n    print(\"Launching MCP Server to expose ADK tools via stdio...\")\n    try:\n        asyncio.run(run_mcp_stdio_server())\n    except KeyboardInterrupt:\n        print(\"\\nMCP Server (stdio) stopped by user.\")\n    except Exception as e:\n        print(f\"MCP Server (stdio) encountered an error: {e}\")\n    finally:\n        print(\"MCP Server (stdio) process exiting.\")\n# --- End MCP Server ---\n</code></pre>"},{"location":"tools/mcp-tools.en/#step-3-test-your-custom-mcp-server-with-an-adk-agent","title":"Step 3: Test your Custom MCP Server with an ADK Agent","text":"<p>Now, create an ADK agent that will act as a client to the MCP server you just built. This ADK agent will use <code>MCPToolset</code> to connect to your <code>my_adk_mcp_server.py</code> script.</p> <p>Create an <code>agent.py</code> (e.g., in <code>./adk_agent_samples/mcp_client_agent/agent.py</code>):</p> <pre><code># ./adk_agent_samples/mcp_client_agent/agent.py\nimport os\nfrom google.adk.agents import LlmAgent\nfrom google.adk.tools.mcp_tool.mcp_toolset import MCPToolset\nfrom google.adk.tools.mcp_tool.mcp_session_manager import StdioConnectionParams\nfrom mcp import StdioServerParameters\n\n# IMPORTANT: Replace this with the ABSOLUTE path to your my_adk_mcp_server.py script\nPATH_TO_YOUR_MCP_SERVER_SCRIPT = \"/path/to/your/my_adk_mcp_server.py\" # &lt;&lt;&lt; REPLACE\n\nif PATH_TO_YOUR_MCP_SERVER_SCRIPT == \"/path/to/your/my_adk_mcp_server.py\":\n    print(\"WARNING: PATH_TO_YOUR_MCP_SERVER_SCRIPT is not set. Please update it in agent.py.\")\n    # Optionally, raise an error if the path is critical\n\nroot_agent = LlmAgent(\n    model='gemini-2.0-flash',\n    name='web_reader_mcp_client_agent',\n    instruction=\"Use the 'load_web_page' tool to fetch content from a URL provided by the user.\",\n    tools=[\n        MCPToolset(\n            connection_params=StdioConnectionParams(\n                server_params = StdioServerParameters(\n                    command='python3', # Command to run your MCP server script\n                    args=[PATH_TO_YOUR_MCP_SERVER_SCRIPT], # Argument is the path to the script\n                )\n            )\n            # tool_filter=['load_web_page'] # Optional: ensure only specific tools are loaded\n        )\n    ],\n)\n</code></pre> <p>And an <code>__init__.py</code> in the same directory: <pre><code># ./adk_agent_samples/mcp_client_agent/__init__.py\nfrom . import agent\n</code></pre></p> <p>To run the test:</p> <ol> <li> <p>Start your custom MCP server (optional, for separate observation):     You can run your <code>my_adk_mcp_server.py</code> directly in one terminal to see its logs:     <pre><code>python3 /path/to/your/my_adk_mcp_server.py\n</code></pre>     It will print \"Launching MCP Server...\" and wait. The ADK agent (run via <code>adk web</code>) will then connect to this process if the <code>command</code> in <code>StdioConnectionParams</code> is set up to execute it.     (Alternatively, <code>MCPToolset</code> will start this server script as a subprocess automatically when the agent initializes).</p> </li> <li> <p>Run <code>adk web</code> for the client agent:     Navigate to the parent directory of <code>mcp_client_agent</code> (e.g., <code>adk_agent_samples</code>) and run:     <pre><code>cd ./adk_agent_samples # Or your equivalent parent directory\nadk web\n</code></pre></p> </li> <li> <p>Interact in the ADK Web UI:</p> <ul> <li>Select the <code>web_reader_mcp_client_agent</code>.</li> <li>Try a prompt like: \"Load the content from https://example.com\"</li> </ul> </li> </ol> <p>The ADK agent (<code>web_reader_mcp_client_agent</code>) will use <code>MCPToolset</code> to start and connect to your <code>my_adk_mcp_server.py</code>. Your MCP server will receive the <code>call_tool</code> request, execute the ADK <code>load_web_page</code> tool, and return the result. The ADK agent will then relay this information. You should see logs from both the ADK Web UI (and its terminal) and potentially from your <code>my_adk_mcp_server.py</code> terminal if you ran it separately.</p> <p>This example demonstrates how ADK tools can be encapsulated within an MCP server, making them accessible to a broader range of MCP-compliant clients, not just ADK agents.</p> <p>Refer to the documentation, to try it out with Claude Desktop.</p>"},{"location":"tools/mcp-tools.en/#using-mcp-tools-in-your-own-agent-out-of-adk-web","title":"Using MCP Tools in your own Agent out of <code>adk web</code>","text":"<p>This section is relevant to you if:</p> <ul> <li>You are developing your own Agent using ADK</li> <li>And, you are NOT using <code>adk web</code>,</li> <li>And, you are exposing the agent via your own UI</li> </ul> <p>Using MCP Tools requires a different setup than using regular tools, due to the fact that specs for MCP Tools are fetched asynchronously from the MCP Server running remotely, or in another process.</p> <p>The following example is modified from the \"Example 1: File System MCP Server\" example above. The main differences are:</p> <ol> <li>Your tool and agent are created asynchronously</li> <li>You need to properly manage the exit stack, so that your agents and tools are destructed properly when the connection to MCP Server is closed.</li> </ol> <pre><code># agent.py (modify get_tools_async and other parts as needed)\n# ./adk_agent_samples/mcp_agent/agent.py\nimport os\nimport asyncio\nfrom dotenv import load_dotenv\nfrom google.genai import types\nfrom google.adk.agents.llm_agent import LlmAgent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.artifacts.in_memory_artifact_service import InMemoryArtifactService # Optional\nfrom google.adk.tools.mcp_tool.mcp_toolset import MCPToolset\nfrom google.adk.tools.mcp_tool.mcp_session_manager import StdioConnectionParams\nfrom mcp import StdioServerParameters\n\n# Load environment variables from .env file in the parent directory\n# Place this near the top, before using env vars like API keys\nload_dotenv('../.env')\n\n# Ensure TARGET_FOLDER_PATH is an absolute path for the MCP server.\nTARGET_FOLDER_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"/path/to/your/folder\")\n\n# --- Step 1: Agent Definition ---\nasync def get_agent_async():\n  \"\"\"Creates an ADK Agent equipped with tools from the MCP Server.\"\"\"\n  toolset = MCPToolset(\n      # Use StdioConnectionParams for local process communication\n      connection_params=StdioConnectionParams(\n          server_params = StdioServerParameters(\n            command='npx', # Command to run the server\n            args=[\"-y\",    # Arguments for the command\n                \"@modelcontextprotocol/server-filesystem\",\n                TARGET_FOLDER_PATH],\n          ),\n      ),\n      tool_filter=['read_file', 'list_directory'] # Optional: filter specific tools\n      # For remote servers, you would use SseConnectionParams instead:\n      # connection_params=SseConnectionParams(url=\"http://remote-server:port/path\", headers={...})\n  )\n\n  # Use in an agent\n  root_agent = LlmAgent(\n      model='gemini-2.0-flash', # Adjust model name if needed based on availability\n      name='enterprise_assistant',\n      instruction='Help user accessing their file systems',\n      tools=[toolset], # Provide the MCP tools to the ADK agent\n  )\n  return root_agent, toolset\n\n# --- Step 2: Main Execution Logic ---\nasync def async_main():\n  session_service = InMemorySessionService()\n  # Artifact service might not be needed for this example\n  artifacts_service = InMemoryArtifactService()\n\n  session = await session_service.create_session(\n      state={}, app_name='mcp_filesystem_app', user_id='user_fs'\n  )\n\n  # TODO: Change the query to be relevant to YOUR specified folder.\n  # e.g., \"list files in the 'documents' subfolder\" or \"read the file 'notes.txt'\"\n  query = \"list files in the tests folder\"\n  print(f\"User Query: '{query}'\")\n  content = types.Content(role='user', parts=[types.Part(text=query)])\n\n  root_agent, toolset = await get_agent_async()\n\n  runner = Runner(\n      app_name='mcp_filesystem_app',\n      agent=root_agent,\n      artifact_service=artifacts_service, # Optional\n      session_service=session_service,\n  )\n\n  print(\"Running agent...\")\n  events_async = runner.run_async(\n      session_id=session.id, user_id=session.user_id, new_message=content\n  )\n\n  async for event in events_async:\n    print(f\"Event received: {event}\")\n\n  # Cleanup is handled automatically by the agent framework\n  # But you can also manually close if needed:\n  print(\"Closing MCP server connection...\")\n  await toolset.close()\n  print(\"Cleanup complete.\")\n\nif __name__ == '__main__':\n  try:\n    asyncio.run(async_main())\n  except Exception as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"tools/mcp-tools.en/#key-considerations","title":"Key considerations","text":"<p>When working with MCP and ADK, keep these points in mind:</p> <ul> <li> <p>Protocol vs. Library: MCP is a protocol specification, defining communication rules. ADK is a Python library/framework for building agents. MCPToolset bridges these by implementing the client side of the MCP protocol within the ADK framework. Conversely, building an MCP server in Python requires using the model-context-protocol library.</p> </li> <li> <p>ADK Tools vs. MCP Tools:</p> <ul> <li>ADK Tools (BaseTool, FunctionTool, AgentTool, etc.) are Python objects designed for direct use within the ADK's LlmAgent and Runner.</li> <li>MCP Tools are capabilities exposed by an MCP Server according to the protocol's schema. MCPToolset makes these look like ADK tools to an LlmAgent.</li> <li>Langchain/CrewAI Tools are specific implementations within those libraries, often simple functions or classes, lacking the server/protocol structure of MCP. ADK offers wrappers (LangchainTool, CrewaiTool) for some interoperability.</li> </ul> </li> <li> <p>Asynchronous nature: Both ADK and the MCP Python library are heavily based on the asyncio Python library. Tool implementations and server handlers should generally be async functions.</p> </li> <li> <p>Stateful sessions (MCP): MCP establishes stateful, persistent connections between a client and server instance. This differs from typical stateless REST APIs.</p> <ul> <li>Deployment: This statefulness can pose challenges for scaling and deployment, especially for remote servers handling many users. The original MCP design often assumed client and server were co-located. Managing these persistent connections requires careful infrastructure considerations (e.g., load balancing, session affinity).</li> <li>ADK MCPToolset: Manages this connection lifecycle. The exit_stack pattern shown in the examples is crucial for ensuring the connection (and potentially the server process) is properly terminated when the ADK agent finishes.</li> </ul> </li> </ul>"},{"location":"tools/mcp-tools.en/#deploying-agents-with-mcp-tools","title":"Deploying Agents with MCP Tools","text":"<p>When deploying ADK agents that use MCP tools to production environments like Cloud Run, GKE, or Vertex AI Agent Engine, you need to consider how MCP connections will work in containerized and distributed environments.</p>"},{"location":"tools/mcp-tools.en/#critical-deployment-requirement-synchronous-agent-definition","title":"Critical Deployment Requirement: Synchronous Agent Definition","text":"<p>\u26a0\ufe0f Important: When deploying agents with MCP tools, the agent and its MCPToolset must be defined synchronously in your <code>agent.py</code> file. While <code>adk web</code> allows for asynchronous agent creation, deployment environments require synchronous instantiation.</p> <pre><code># \u2705 CORRECT: Synchronous agent definition for deployment\nimport os\nfrom google.adk.agents.llm_agent import LlmAgent\nfrom google.adk.tools.mcp_tool import StdioConnectionParams\nfrom google.adk.tools.mcp_tool.mcp_toolset import MCPToolset\nfrom mcp import StdioServerParameters\n\n_allowed_path = os.path.dirname(os.path.abspath(__file__))\n\nroot_agent = LlmAgent(\n    model='gemini-2.0-flash',\n    name='enterprise_assistant',\n    instruction=f'Help user accessing their file systems. Allowed directory: {_allowed_path}',\n    tools=[\n        MCPToolset(\n            connection_params=StdioConnectionParams(\n                server_params=StdioServerParameters(\n                    command='npx',\n                    args=['-y', '@modelcontextprotocol/server-filesystem', _allowed_path],\n                ),\n                timeout=5,  # Configure appropriate timeouts\n            ),\n            # Filter tools for security in production\n            tool_filter=[\n                'read_file', 'read_multiple_files', 'list_directory',\n                'directory_tree', 'search_files', 'get_file_info',\n                'list_allowed_directories',\n            ],\n        )\n    ],\n)\n</code></pre> <pre><code># \u274c WRONG: Asynchronous patterns don't work in deployment\nasync def get_agent():  # This won't work for deployment\n    toolset = await create_mcp_toolset_async()\n    return LlmAgent(tools=[toolset])\n</code></pre>"},{"location":"tools/mcp-tools.en/#quick-deployment-commands","title":"Quick Deployment Commands","text":""},{"location":"tools/mcp-tools.en/#vertex-ai-agent-engine","title":"Vertex AI Agent Engine","text":"<pre><code>uv run adk deploy agent_engine \\\n  --project=&lt;your-gcp-project-id&gt; \\\n  --region=&lt;your-gcp-region&gt; \\\n  --staging_bucket=\"gs://&lt;your-gcs-bucket&gt;\" \\\n  --display_name=\"My MCP Agent\" \\\n  ./path/to/your/agent_directory\n</code></pre>"},{"location":"tools/mcp-tools.en/#cloud-run","title":"Cloud Run","text":"<pre><code>uv run adk deploy cloud_run \\\n  --project=&lt;your-gcp-project-id&gt; \\\n  --region=&lt;your-gcp-region&gt; \\\n  --service_name=&lt;your-service-name&gt; \\\n  ./path/to/your/agent_directory\n</code></pre>"},{"location":"tools/mcp-tools.en/#deployment-patterns","title":"Deployment Patterns","text":""},{"location":"tools/mcp-tools.en/#pattern-1-self-contained-stdio-mcp-servers","title":"Pattern 1: Self-Contained Stdio MCP Servers","text":"<p>For MCP servers that can be packaged as npm packages or Python modules (like <code>@modelcontextprotocol/server-filesystem</code>), you can include them directly in your agent container:</p> <p>Container Requirements: <pre><code># Example for npm-based MCP servers\nFROM python:3.13-slim\n\n# Install Node.js and npm for MCP servers\nRUN apt-get update &amp;&amp; apt-get install -y nodejs npm &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install your Python dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# Copy your agent code\nCOPY . .\n\n# Your agent can now use StdioConnectionParams with 'npx' commands\nCMD [\"python\", \"main.py\"]\n</code></pre></p> <p>Agent Configuration: <pre><code># This works in containers because npx and the MCP server run in the same environment\nMCPToolset(\n    connection_params=StdioConnectionParams(\n        server_params=StdioServerParameters(\n            command='npx',\n            args=[\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/app/data\"],\n        ),\n    ),\n)\n</code></pre></p>"},{"location":"tools/mcp-tools.en/#pattern-2-remote-mcp-servers-streamable-http","title":"Pattern 2: Remote MCP Servers (Streamable HTTP)","text":"<p>For production deployments requiring scalability, deploy MCP servers as separate services and connect via Streamable HTTP:</p> <p>MCP Server Deployment (Cloud Run): <pre><code># deploy_mcp_server.py - Separate Cloud Run service using Streamable HTTP\nimport contextlib\nimport logging\nfrom collections.abc import AsyncIterator\nfrom typing import Any\n\nimport anyio\nimport click\nimport mcp.types as types\nfrom mcp.server.lowlevel import Server\nfrom mcp.server.streamable_http_manager import StreamableHTTPSessionManager\nfrom starlette.applications import Starlette\nfrom starlette.routing import Mount\nfrom starlette.types import Receive, Scope, Send\n\nlogger = logging.getLogger(__name__)\n\ndef create_mcp_server():\n    \"\"\"Create and configure the MCP server.\"\"\"\n    app = Server(\"adk-mcp-streamable-server\")\n\n    @app.call_tool()\n    async def call_tool(name: str, arguments: dict[str, Any]) -&gt; list[types.ContentBlock]:\n        \"\"\"Handle tool calls from MCP clients.\"\"\"\n        # Example tool implementation - replace with your actual ADK tools\n        if name == \"example_tool\":\n            result = arguments.get(\"input\", \"No input provided\")\n            return [\n                types.TextContent(\n                    type=\"text\",\n                    text=f\"Processed: {result}\"\n                )\n            ]\n        else:\n            raise ValueError(f\"Unknown tool: {name}\")\n\n    @app.list_tools()\n    async def list_tools() -&gt; list[types.Tool]:\n        \"\"\"List available tools.\"\"\"\n        return [\n            types.Tool(\n                name=\"example_tool\",\n                description=\"Example tool for demonstration\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"input\": {\n                            \"type\": \"string\",\n                            \"description\": \"Input text to process\"\n                        }\n                    },\n                    \"required\": [\"input\"]\n                }\n            )\n        ]\n\n    return app\n\ndef main(port: int = 8080, json_response: bool = False):\n    \"\"\"Main server function.\"\"\"\n    logging.basicConfig(level=logging.INFO)\n\n    app = create_mcp_server()\n\n    # Create session manager with stateless mode for scalability\n    session_manager = StreamableHTTPSessionManager(\n        app=app,\n        event_store=None,\n        json_response=json_response,\n        stateless=True,  # Important for Cloud Run scalability\n    )\n\n    async def handle_streamable_http(scope: Scope, receive: Receive, send: Send) -&gt; None:\n        await session_manager.handle_request(scope, receive, send)\n\n    @contextlib.asynccontextmanager\n    async def lifespan(app: Starlette) -&gt; AsyncIterator[None]:\n        \"\"\"Manage session manager lifecycle.\"\"\"\n        async with session_manager.run():\n            logger.info(\"MCP Streamable HTTP server started!\")\n            try:\n                yield\n            finally:\n                logger.info(\"MCP server shutting down...\")\n\n    # Create ASGI application\n    starlette_app = Starlette(\n        debug=False,  # Set to False for production\n        routes=[\n            Mount(\"/mcp\", app=handle_streamable_http),\n        ],\n        lifespan=lifespan,\n    )\n\n    import uvicorn\n    uvicorn.run(starlette_app, host=\"0.0.0.0\", port=port)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p> <p>Agent Configuration for Remote MCP: <pre><code># Your ADK agent connects to the remote MCP service via Streamable HTTP\nMCPToolset(\n    connection_params=StreamableHTTPConnectionParams(\n        url=\"https://your-mcp-server-url.run.app/mcp\",\n        headers={\"Authorization\": \"Bearer your-auth-token\"}\n    ),\n)\n</code></pre></p>"},{"location":"tools/mcp-tools.en/#pattern-3-sidecar-mcp-servers-gke","title":"Pattern 3: Sidecar MCP Servers (GKE)","text":"<p>In Kubernetes environments, you can deploy MCP servers as sidecar containers:</p> <pre><code># deployment.yaml - GKE with MCP sidecar\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: adk-agent-with-mcp\nspec:\n  template:\n    spec:\n      containers:\n      # Main ADK agent container\n      - name: adk-agent\n        image: your-adk-agent:latest\n        ports:\n        - containerPort: 8080\n        env:\n        - name: MCP_SERVER_URL\n          value: \"http://localhost:8081\"\n\n      # MCP server sidecar\n      - name: mcp-server\n        image: your-mcp-server:latest\n        ports:\n        - containerPort: 8081\n</code></pre>"},{"location":"tools/mcp-tools.en/#connection-management-considerations","title":"Connection Management Considerations","text":""},{"location":"tools/mcp-tools.en/#stdio-connections","title":"Stdio Connections","text":"<ul> <li>Pros: Simple setup, process isolation, works well in containers</li> <li>Cons: Process overhead, not suitable for high-scale deployments</li> <li>Best for: Development, single-tenant deployments, simple MCP servers</li> </ul>"},{"location":"tools/mcp-tools.en/#ssehttp-connections","title":"SSE/HTTP Connections","text":"<ul> <li>Pros: Network-based, scalable, can handle multiple clients</li> <li>Cons: Requires network infrastructure, authentication complexity</li> <li>Best for: Production deployments, multi-tenant systems, external MCP services</li> </ul>"},{"location":"tools/mcp-tools.en/#production-deployment-checklist","title":"Production Deployment Checklist","text":"<p>When deploying agents with MCP tools to production:</p> <p>\u2705 Connection Lifecycle - Ensure proper cleanup of MCP connections using exit_stack patterns - Configure appropriate timeouts for connection establishment and requests - Implement retry logic for transient connection failures</p> <p>\u2705 Resource Management - Monitor memory usage for stdio MCP servers (each spawns a process) - Configure appropriate CPU/memory limits for MCP server processes - Consider connection pooling for remote MCP servers</p> <p>\u2705 Security - Use authentication headers for remote MCP connections - Restrict network access between ADK agents and MCP servers - Filter MCP tools using <code>tool_filter</code> to limit exposed functionality - Validate MCP tool inputs to prevent injection attacks - Use restrictive file paths for filesystem MCP servers (e.g., <code>os.path.dirname(os.path.abspath(__file__))</code>) - Consider read-only tool filters for production environments</p> <p>\u2705 Monitoring &amp; Observability - Log MCP connection establishment and teardown events - Monitor MCP tool execution times and success rates - Set up alerts for MCP connection failures</p> <p>\u2705 Scalability - For high-volume deployments, prefer remote MCP servers over stdio - Configure session affinity if using stateful MCP servers - Consider MCP server connection limits and implement circuit breakers</p>"},{"location":"tools/mcp-tools.en/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"tools/mcp-tools.en/#cloud-run_1","title":"Cloud Run","text":"<pre><code># Cloud Run environment variables for MCP configuration\nimport os\n\n# Detect Cloud Run environment\nif os.getenv('K_SERVICE'):\n    # Use remote MCP servers in Cloud Run\n    mcp_connection = SseConnectionParams(\n        url=os.getenv('MCP_SERVER_URL'),\n        headers={'Authorization': f\"Bearer {os.getenv('MCP_AUTH_TOKEN')}\"}\n    )\nelse:\n    # Use stdio for local development\n    mcp_connection = StdioConnectionParams(\n        server_params=StdioServerParameters(\n            command='npx',\n            args=[\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/tmp\"]\n        )\n    )\n\nMCPToolset(connection_params=mcp_connection)\n</code></pre>"},{"location":"tools/mcp-tools.en/#gke","title":"GKE","text":"<pre><code># GKE-specific MCP configuration\n# Use service discovery for MCP servers within the cluster\nMCPToolset(\n    connection_params=SseConnectionParams(\n        url=\"http://mcp-service.default.svc.cluster.local:8080/sse\"\n    ),\n)\n</code></pre>"},{"location":"tools/mcp-tools.en/#vertex-ai-agent-engine_1","title":"Vertex AI Agent Engine","text":"<pre><code># Agent Engine managed deployment\n# Prefer lightweight, self-contained MCP servers or external services\nMCPToolset(\n    connection_params=SseConnectionParams(\n        url=\"https://your-managed-mcp-service.googleapis.com/sse\",\n        headers={'Authorization': 'Bearer $(gcloud auth print-access-token)'}\n    ),\n)\n</code></pre>"},{"location":"tools/mcp-tools.en/#troubleshooting-deployment-issues","title":"Troubleshooting Deployment Issues","text":"<p>Common MCP Deployment Problems:</p> <ol> <li> <p>Stdio Process Startup Failures <pre><code># Debug stdio connection issues\nMCPToolset(\n    connection_params=StdioConnectionParams(\n        server_params=StdioServerParameters(\n            command='npx',\n            args=[\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/app/data\"],\n            # Add environment debugging\n            env={'DEBUG': '1'}\n        ),\n    ),\n)\n</code></pre></p> </li> <li> <p>Network Connectivity Issues <pre><code># Test remote MCP connectivity\nimport aiohttp\n\nasync def test_mcp_connection():\n    async with aiohttp.ClientSession() as session:\n        async with session.get('https://your-mcp-server.com/health') as resp:\n            print(f\"MCP Server Health: {resp.status}\")\n</code></pre></p> </li> <li> <p>Resource Exhaustion</p> </li> <li>Monitor container memory usage when using stdio MCP servers</li> <li>Set appropriate limits in Kubernetes deployments</li> <li>Use remote MCP servers for resource-intensive operations</li> </ol>"},{"location":"tools/mcp-tools.en/#further-resources","title":"Further Resources","text":"<ul> <li>Model Context Protocol Documentation</li> <li>MCP Specification</li> <li>MCP Python SDK &amp; Examples</li> </ul>"},{"location":"tools/mcp-tools/","title":"Model Context Protocol \u5de5\u5177","text":"<p>\u672c\u6307\u5357\u5c07\u5e36\u4f60\u4e86\u89e3\u5169\u7a2e\u5c07 Model Context Protocol (MCP) \u8207 Agent Development Kit (ADK) \u6574\u5408\u7684\u65b9\u6cd5\u3002</p>"},{"location":"tools/mcp-tools/#model-context-protocol-mcp","title":"\u4ec0\u9ebc\u662f Model Context Protocol (MCP)\uff1f","text":"<p>Model Context Protocol (MCP) \u662f\u4e00\u9805\u958b\u653e\u6a19\u6e96\uff0c\u65e8\u5728\u6a19\u6e96\u5316\u5927\u578b\u8a9e\u8a00\u6a21\u578b (Large Language Model, LLM)\uff08\u5982 Gemini \u548c Claude\uff09\u8207\u5916\u90e8\u61c9\u7528\u7a0b\u5f0f\u3001\u8cc7\u6599\u4f86\u6e90\u53ca\u5de5\u5177\u4e4b\u9593\u7684\u901a\u8a0a\u65b9\u5f0f\u3002\u4f60\u53ef\u4ee5\u5c07\u5b83\u60f3\u50cf\u6210\u4e00\u7a2e\u901a\u7528\u7684\u9023\u63a5\u6a5f\u5236\uff0c\u7c21\u5316 LLM \u53d6\u5f97\u4e0a\u4e0b\u6587\u3001\u57f7\u884c\u52d5\u4f5c\uff0c\u4ee5\u53ca\u8207\u5404\u7a2e\u7cfb\u7d71\u4e92\u52d5\u7684\u6d41\u7a0b\u3002</p> <p>MCP \u63a1\u7528 client-server \u67b6\u69cb\uff0c\u5b9a\u7fa9\u4e86\u8cc7\u6599\uff08\u8cc7\u6e90\uff09\u3001\u4e92\u52d5\u5f0f\u7bc4\u672c\uff08prompts\uff09\u4ee5\u53ca\u53ef\u57f7\u884c\u51fd\u5f0f\uff08tools\uff09\u5982\u4f55\u7531MCP server \u63d0\u4f9b\uff0c\u4e26\u7531MCP client\uff08\u53ef\u80fd\u662f LLM \u4e3b\u6a5f\u61c9\u7528\u7a0b\u5f0f\u6216 AI agent\uff09\u6d88\u8cbb\u3002</p> <p>\u672c\u6307\u5357\u6db5\u84cb\u5169\u7a2e\u4e3b\u8981\u7684\u6574\u5408\u6a21\u5f0f\uff1a</p> <ol> <li>\u5728 ADK \u4e2d\u4f7f\u7528\u73fe\u6709\u7684 MCP server\uff1a ADK agent \u4f5c\u70ba MCP client\uff0c\u5229\u7528\u5916\u90e8 MCP server \u6240\u63d0\u4f9b\u7684\u5de5\u5177\u3002</li> <li>\u900f\u904e MCP server \u5c0d\u5916\u516c\u958b ADK \u5de5\u5177\uff1a \u5efa\u7acb\u4e00\u500b MCP server\uff0c\u5305\u88dd ADK \u5de5\u5177\uff0c\u8b93\u4efb\u4f55 MCP client \u90fd\u80fd\u5b58\u53d6\u3002</li> </ol>"},{"location":"tools/mcp-tools/#_1","title":"\u5148\u6c7a\u689d\u4ef6","text":"<p>\u5728\u958b\u59cb\u4e4b\u524d\uff0c\u8acb\u78ba\u4fdd\u4f60\u5df2\u5b8c\u6210\u4ee5\u4e0b\u8a2d\u5b9a\uff1a</p> <ul> <li>\u8a2d\u5b9a ADK\uff1a \u8acb\u4f9d\u7167\u5feb\u901f\u958b\u59cb\u4e2d\u7684\u6a19\u6e96 ADK \u8a2d\u5b9a\u8aaa\u660e \u9032\u884c\u3002</li> <li>\u5b89\u88dd/\u66f4\u65b0 Python/Java\uff1a MCP \u9700\u8981 Python 3.9 \u6216\u4ee5\u4e0a\u7248\u672c\uff0c\u6216 Java 17 \u6216\u4ee5\u4e0a\u7248\u672c\u3002</li> <li>\u5b89\u88dd Node.js \u8207 npx\uff1a \uff08\u50c5\u9650 Python\uff09 \u8a31\u591a\u793e\u7fa4 MCP server \u4ee5 Node.js \u5957\u4ef6\u5f62\u5f0f\u767c\u4f48\uff0c\u4e26\u900f\u904e <code>npx</code> \u57f7\u884c\u3002\u5982\u679c\u5c1a\u672a\u5b89\u88dd\uff0c\u8acb\u5b89\u88dd Node.js\uff08\u5176\u4e2d\u5305\u542b npx\uff09\u3002\u8a73\u7d30\u8cc7\u8a0a\u8acb\u53c3\u95b1 https://nodejs.org/en\u3002</li> <li>\u78ba\u8a8d\u5b89\u88dd\uff1a \uff08\u50c5\u9650 Python\uff09 \u8acb\u5728\u555f\u7528\u7684\u865b\u64ec\u74b0\u5883\u4e2d\u78ba\u8a8d <code>adk</code> \u548c <code>npx</code> \u5df2\u52a0\u5165 PATH\uff1a</li> </ul> <pre><code># Both commands should print the path to the executables.\nwhich adk\nwhich npx\n</code></pre>"},{"location":"tools/mcp-tools/#1-adk-web-mcp-adk-agentsadk-mcp-client","title":"1. \u5728 <code>adk web</code> \u4e2d\u4f7f\u7528 MCP \u4f3a\u670d\u5668\u8207 ADK agents\uff08ADK \u4f5c\u70ba MCP client\uff09","text":"<p>\u672c\u7bc0\u8aaa\u660e\u5982\u4f55\u5c07\u5916\u90e8 MCP\uff08Model Context Protocol\uff09\u4f3a\u670d\u5668\u7684\u5de5\u5177\u6574\u5408\u5230\u4f60\u7684 Agent Development Kit (ADK) agent \u4e2d\u3002\u7576\u4f60\u7684 ADK agent \u9700\u8981\u4f7f\u7528\u73fe\u6709\u670d\u52d9\u6240\u63d0\u4f9b\u3001\u4e26\u4e14\u6709 MCP \u4ecb\u9762\u7684\u529f\u80fd\u6642\uff0c\u9019\u662f\u6700\u5e38\u898b\u7684\u6574\u5408\u6a21\u5f0f\u3002\u4f60\u5c07\u770b\u5230\u5982\u4f55\u76f4\u63a5\u5c07 <code>MCPToolset</code> \u985e\u5225\u52a0\u5165 agent \u7684 <code>tools</code> \u6e05\u55ae\u4e2d\uff0c\u8b93 agent \u80fd\u7121\u7e2b\u9023\u63a5 MCP \u4f3a\u670d\u5668\u3001\u767c\u73fe\u5176\u5de5\u5177\uff0c\u4e26\u8b93\u9019\u4e9b\u5de5\u5177\u53ef\u4f9b agent \u4f7f\u7528\u3002\u9019\u4e9b\u7bc4\u4f8b\u4e3b\u8981\u805a\u7126\u65bc <code>adk web</code> \u958b\u767c\u74b0\u5883\u4e2d\u7684\u4e92\u52d5\u3002</p>"},{"location":"tools/mcp-tools/#mcptoolset","title":"<code>MCPToolset</code> \u985e\u5225","text":"<p><code>MCPToolset</code> \u985e\u5225\u662f ADK \u6574\u5408 MCP \u4f3a\u670d\u5668\u5de5\u5177\u7684\u4e3b\u8981\u6a5f\u5236\u3002\u7576\u4f60\u5728 agent \u7684 <code>tools</code> \u6e05\u55ae\u4e2d\u52a0\u5165 <code>MCPToolset</code> \u5be6\u4f8b\u6642\uff0c\u6703\u81ea\u52d5\u8655\u7406\u8207\u6307\u5b9a MCP \u4f3a\u670d\u5668\u7684\u4e92\u52d5\u3002\u5176\u904b\u4f5c\u65b9\u5f0f\u5982\u4e0b\uff1a</p> <ol> <li>\u9023\u7dda\u7ba1\u7406\uff1a \u521d\u59cb\u5316\u6642\uff0c<code>MCPToolset</code> \u6703\u5efa\u7acb\u4e26\u7ba1\u7406\u8207 MCP \u4f3a\u670d\u5668\u7684\u9023\u7dda\u3002\u9019\u53ef\u4ee5\u662f\u672c\u6a5f\u4f3a\u670d\u5668\u7a0b\u5e8f\uff08\u4f7f\u7528 <code>StdioConnectionParams</code> \u900f\u904e\u6a19\u6e96\u8f38\u5165/\u8f38\u51fa\u9032\u884c\u901a\u8a0a\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u9060\u7aef\u4f3a\u670d\u5668\uff08\u4f7f\u7528 <code>SseConnectionParams</code> \u9032\u884c Server-Sent Events (SSE)\uff09\u3002\u5de5\u5177\u7d44\u4e5f\u6703\u5728 agent \u6216\u61c9\u7528\u7a0b\u5f0f\u7d42\u6b62\u6642\uff0c\u512a\u96c5\u5730\u95dc\u9589\u9019\u500b\u9023\u7dda\u3002</li> <li>\u5de5\u5177\u767c\u73fe\u8207\u8f49\u63db\uff1a \u9023\u7dda\u5f8c\uff0c<code>MCPToolset</code> \u6703\u67e5\u8a62 MCP \u4f3a\u670d\u5668\u53ef\u7528\u7684\u5de5\u5177\uff08\u900f\u904e <code>list_tools</code> MCP \u65b9\u6cd5\uff09\uff0c\u4e26\u5c07\u9019\u4e9b\u767c\u73fe\u5230\u7684 MCP \u5de5\u5177 schema \u8f49\u63db\u70ba ADK \u76f8\u5bb9\u7684 <code>BaseTool</code> \u5be6\u4f8b\u3002</li> <li>\u5c0d agent \u66b4\u9732\u5de5\u5177\uff1a \u9019\u4e9b\u8f49\u63db\u5f8c\u7684\u5de5\u5177\u6703\u50cf\u539f\u751f ADK \u5de5\u5177\u4e00\u6a23\uff0c\u63d0\u4f9b\u7d66\u4f60\u7684 <code>LlmAgent</code> \u4f7f\u7528\u3002</li> <li>\u5de5\u5177\u547c\u53eb\u4ee3\u7406\uff1a \u7576\u4f60\u7684 <code>LlmAgent</code> \u6c7a\u5b9a\u4f7f\u7528\u5176\u4e2d\u4e00\u500b\u5de5\u5177\u6642\uff0c<code>MCPToolset</code> \u6703\u900f\u660e\u5730\u4ee3\u7406\u547c\u53eb\uff08\u4f7f\u7528 <code>call_tool</code> MCP \u65b9\u6cd5\uff09\u5230 MCP \u4f3a\u670d\u5668\uff0c\u50b3\u9001\u5fc5\u8981\u53c3\u6578\uff0c\u4e26\u5c07\u4f3a\u670d\u5668\u56de\u61c9\u8fd4\u56de\u7d66 agent\u3002</li> <li>\u7be9\u9078\uff08\u53ef\u9078\uff09\uff1a \u4f60\u53ef\u4ee5\u5728\u5efa\u7acb <code>MCPToolset</code> \u6642\uff0c\u900f\u904e <code>tool_filter</code> \u53c3\u6578\uff0c\u9078\u64c7\u53ea\u66b4\u9732 MCP \u4f3a\u670d\u5668\u4e0a\u7684\u7279\u5b9a\u5de5\u5177\u5b50\u96c6\u7d66 agent\uff0c\u800c\u975e\u5168\u90e8\u5de5\u5177\u3002</li> </ol> <p>\u4ee5\u4e0b\u7bc4\u4f8b\u5c55\u793a\u5982\u4f55\u5728 <code>adk web</code> \u958b\u767c\u74b0\u5883\u4e2d\u4f7f\u7528 <code>MCPToolset</code>\u3002\u5982\u679c\u4f60\u9700\u8981\u66f4\u7d30\u7dfb\u5730\u63a7\u5236 MCP \u9023\u7dda\u751f\u547d\u9031\u671f\uff0c\u6216\u672a\u4f7f\u7528 <code>adk web</code>\uff0c\u8acb\u53c3\u8003\u672c\u9801\u7a0d\u5f8c\u7684\u300c\u5728 <code>adk web</code> \u4e4b\u5916\u65bc\u81ea\u8a02 agent \u4e2d\u4f7f\u7528 MCP \u5de5\u5177\u300d\u7ae0\u7bc0\u3002</p>"},{"location":"tools/mcp-tools/#1-mcp","title":"\u7bc4\u4f8b 1\uff1a\u6a94\u6848\u7cfb\u7d71 MCP \u4f3a\u670d\u5668","text":"<p>\u6b64 Python \u7bc4\u4f8b\u5c55\u793a\u5982\u4f55\u9023\u63a5\u5230\u63d0\u4f9b\u6a94\u6848\u7cfb\u7d71\u64cd\u4f5c\u7684\u672c\u6a5f MCP \u4f3a\u670d\u5668\u3002</p>"},{"location":"tools/mcp-tools/#1-mcptoolset-agent","title":"\u6b65\u9a5f 1\uff1a\u4f7f\u7528 <code>MCPToolset</code> \u5b9a\u7fa9\u4f60\u7684 agent","text":"<p>\u5efa\u7acb\u4e00\u500b <code>agent.py</code> \u6a94\u6848\uff08\u4f8b\u5982\u653e\u5728 <code>./adk_agent_samples/mcp_agent/agent.py</code> \u76ee\u9304\u4e0b\uff09\u3002<code>MCPToolset</code> \u6703\u76f4\u63a5\u5728\u4f60\u7684 <code>LlmAgent</code> \u7684 <code>tools</code> \u6e05\u55ae\u4e2d\u88ab\u5be6\u4f8b\u5316\u3002</p> <ul> <li>\u91cd\u8981\uff1a \u8acb\u5c07 <code>args</code> \u6e05\u55ae\u4e2d\u7684 <code>\"/path/to/your/folder\"</code> \u66ff\u63db\u70ba MCP \u4f3a\u670d\u5668\u53ef\u5b58\u53d6\u7684\u672c\u6a5f\u5be6\u969b\u8cc7\u6599\u593e\u7684\u7d55\u5c0d\u8def\u5f91\u3002</li> <li>\u91cd\u8981\uff1a \u8acb\u5c07 <code>.env</code> \u6a94\u6848\u653e\u5728 <code>./adk_agent_samples</code> \u76ee\u9304\u7684\u4e0a\u5c64\u76ee\u9304\u3002</li> </ul> <pre><code># ./adk_agent_samples/mcp_agent/agent.py\nimport os # Required for path operations\nfrom google.adk.agents import LlmAgent\nfrom google.adk.tools.mcp_tool.mcp_toolset import MCPToolset\nfrom google.adk.tools.mcp_tool.mcp_session_manager import StdioConnectionParams\nfrom mcp import StdioServerParameters\n\n# It's good practice to define paths dynamically if possible,\n# or ensure the user understands the need for an ABSOLUTE path.\n# For this example, we'll construct a path relative to this file,\n# assuming '/path/to/your/folder' is in the same directory as agent.py.\n# REPLACE THIS with an actual absolute path if needed for your setup.\nTARGET_FOLDER_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"/path/to/your/folder\")\n# Ensure TARGET_FOLDER_PATH is an absolute path for the MCP server.\n# If you created ./adk_agent_samples/mcp_agent/your_folder,\n\nroot_agent = LlmAgent(\n    model='gemini-2.0-flash',\n    name='filesystem_assistant_agent',\n    instruction='Help the user manage their files. You can list files, read files, etc.',\n    tools=[\n        MCPToolset(\n            connection_params=StdioConnectionParams(\n                server_params = StdioServerParameters(\n                    command='npx',\n                    args=[\n                        \"-y\",  # Argument for npx to auto-confirm install\n                        \"@modelcontextprotocol/server-filesystem\",\n                        # IMPORTANT: This MUST be an ABSOLUTE path to a folder the\n                        # npx process can access.\n                        # Replace with a valid absolute path on your system.\n                        # For example: \"/Users/youruser/accessible_mcp_files\"\n                        # or use a dynamically constructed absolute path:\n                        os.path.abspath(TARGET_FOLDER_PATH),\n                    ],\n                ),\n            ),\n            # Optional: Filter which tools from the MCP server are exposed\n            # tool_filter=['list_directory', 'read_file']\n        )\n    ],\n)\n</code></pre>"},{"location":"tools/mcp-tools/#2-__init__py","title":"\u6b65\u9a5f 2\uff1a\u5efa\u7acb <code>__init__.py</code> \u6a94\u6848","text":"<p>\u8acb\u78ba\u4fdd\u5728\u8207 <code>agent.py</code> \u76f8\u540c\u7684\u76ee\u9304\u4e0b\u6709\u4e00\u500b <code>__init__.py</code>\uff0c\u4ee5\u4fbf\u8b93 Agent Development Kit (ADK) \u80fd\u5920\u5c07\u5176\u8b58\u5225\u70ba\u53ef\u767c\u73fe\u7684 Python \u5957\u4ef6\u3002</p> <pre><code># ./adk_agent_samples/mcp_agent/__init__.py\nfrom . import agent\n</code></pre>"},{"location":"tools/mcp-tools/#3-adk-web","title":"\u6b65\u9a5f 3\uff1a\u57f7\u884c <code>adk web</code> \u4e26\u4e92\u52d5","text":"<p>\u8acb\u5728\u7d42\u7aef\u6a5f\u4e2d\u5207\u63db\u5230 <code>mcp_agent</code> \u7684\u4e0a\u5c64\u76ee\u9304\uff08\u4f8b\u5982 <code>adk_agent_samples</code>\uff09\uff0c\u7136\u5f8c\u57f7\u884c\uff1a</p> <pre><code>cd ./adk_agent_samples # Or your equivalent parent directory\nadk web\n</code></pre> <p>Windows \u4f7f\u7528\u8005\u6ce8\u610f</p> <p>When hitting the <code>_make_subprocess_transport NotImplementedError</code>, consider using <code>adk web --no-reload</code> instead.</p> <p>\u7576 Google Agent Development Kit (ADK) Web UI \u5728\u4f60\u7684\u700f\u89bd\u5668\u4e2d\u8f09\u5165\u5f8c\uff1a</p> <ol> <li>\u5f9e agent \u4e0b\u62c9\u9078\u55ae\u4e2d\u9078\u64c7 <code>filesystem_assistant_agent</code>\u3002</li> <li>\u5617\u8a66\u4ee5\u4e0b\u63d0\u793a\u8a9e\uff1a<ul> <li>\u300c\u5217\u51fa\u76ee\u524d\u76ee\u9304\u4e2d\u7684\u6a94\u6848\u3002\u300d</li> <li>\u300c\u4f60\u53ef\u4ee5\u8b80\u53d6\u540d\u70ba sample.txt \u7684\u6a94\u6848\u55ce\uff1f\u300d\uff08\u5047\u8a2d\u4f60\u5df2\u5728 <code>TARGET_FOLDER_PATH</code> \u4e2d\u5efa\u7acb\u8a72\u6a94\u6848\uff09\u3002</li> <li>\u300c<code>another_file.md</code> \u7684\u5167\u5bb9\u662f\u4ec0\u9ebc\uff1f\u300d</li> </ul> </li> </ol> <p>\u4f60\u61c9\u8a72\u6703\u770b\u5230 agent \u8207 MCP \u6a94\u6848\u7cfb\u7d71\u4f3a\u670d\u5668\u4e92\u52d5\uff0c\u4e26\u4e14\u4f3a\u670d\u5668\u7684\u56de\u61c9\uff08\u6a94\u6848\u6e05\u55ae\u3001\u6a94\u6848\u5167\u5bb9\uff09\u6703\u900f\u904e agent \u50b3\u905e\u56de\u4f86\u3002<code>adk web</code> \u4e3b\u63a7\u53f0\uff08\u4f60\u57f7\u884c\u6307\u4ee4\u7684\u7d42\u7aef\u6a5f\uff09\u4e5f\u53ef\u80fd\u6703\u986f\u793a\u4f86\u81ea <code>npx</code> \u7a0b\u5e8f\u7684\u65e5\u8a8c\uff08\u5982\u679c\u6709\u8f38\u51fa\u5230 stderr\uff09\u3002</p> <p></p> <p>\u82e5\u8981\u5728 Java \u4e2d\u5b9a\u7fa9\u4e00\u500b\u521d\u59cb\u5316 <code>MCPToolset</code> \u7684 agent\uff0c\u8acb\u53c3\u8003\u4ee5\u4e0b\u7bc4\u4f8b\uff1a</p> <pre><code>package agents;\n\nimport com.google.adk.JsonBaseModel;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.RunConfig;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.tools.mcp.McpTool;\nimport com.google.adk.tools.mcp.McpToolset;\nimport com.google.adk.tools.mcp.McpToolset.McpToolsAndToolsetResult;\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\nimport io.modelcontextprotocol.client.transport.ServerParameters;\n\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\n\npublic class McpAgentCreator {\n\n    /**\n     * Initializes an McpToolset, retrieves tools from an MCP server using stdio,\n     * creates an LlmAgent with these tools, sends a prompt to the agent,\n     * and ensures the toolset is closed.\n     * @param args Command line arguments (not used).\n     */\n    public static void main(String[] args) {\n        //Note: you may have permissions issues if the folder is outside home\n        String yourFolderPath = \"~/path/to/folder\";\n\n        ServerParameters connectionParams = ServerParameters.builder(\"npx\")\n                .args(List.of(\n                        \"-y\",\n                        \"@modelcontextprotocol/server-filesystem\",\n                        yourFolderPath\n                ))\n                .build();\n\n        try {\n            CompletableFuture&lt;McpToolsAndToolsetResult&gt; futureResult =\n                    McpToolset.fromServer(connectionParams, JsonBaseModel.getMapper());\n\n            McpToolsAndToolsetResult result = futureResult.join();\n\n            try (McpToolset toolset = result.getToolset()) {\n                List&lt;McpTool&gt; tools = result.getTools();\n\n                LlmAgent agent = LlmAgent.builder()\n                        .model(\"gemini-2.0-flash\")\n                        .name(\"enterprise_assistant\")\n                        .description(\"An agent to help users access their file systems\")\n                        .instruction(\n                                \"Help user accessing their file systems. You can list files in a directory.\"\n                        )\n                        .tools(tools)\n                        .build();\n\n                System.out.println(\"Agent created: \" + agent.name());\n\n                InMemoryRunner runner = new InMemoryRunner(agent);\n                String userId = \"user123\";\n                String sessionId = \"1234\";\n                String promptText = \"Which files are in this directory - \" + yourFolderPath + \"?\";\n\n                // Explicitly create the session first\n                try {\n                    // appName for InMemoryRunner defaults to agent.name() if not specified in constructor\n                    runner.sessionService().createSession(runner.appName(), userId, null, sessionId).blockingGet();\n                    System.out.println(\"Session created: \" + sessionId + \" for user: \" + userId);\n                } catch (Exception sessionCreationException) {\n                    System.err.println(\"Failed to create session: \" + sessionCreationException.getMessage());\n                    sessionCreationException.printStackTrace();\n                    return;\n                }\n\n                Content promptContent = Content.fromParts(Part.fromText(promptText));\n\n                System.out.println(\"\\nSending prompt: \\\"\" + promptText + \"\\\" to agent...\\n\");\n\n                runner.runAsync(userId, sessionId, promptContent, RunConfig.builder().build())\n                        .blockingForEach(event -&gt; {\n                            System.out.println(\"Event received: \" + event.toJson());\n                        });\n            }\n        } catch (Exception e) {\n            System.err.println(\"An error occurred: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <p>\u5047\u8a2d\u6709\u4e00\u500b\u8cc7\u6599\u593e\uff0c\u88e1\u9762\u5305\u542b\u4e09\u500b\u540d\u70ba <code>first</code>\u3001<code>second</code> \u548c <code>third</code> \u7684\u6a94\u6848\uff0c\u6210\u529f\u7684\u56de\u61c9 (successful response) \u6703\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>Event received: {\"id\":\"163a449e-691a-48a2-9e38-8cadb6d1f136\",\"invocationId\":\"e-c2458c56-e57a-45b2-97de-ae7292e505ef\",\"author\":\"enterprise_assistant\",\"content\":{\"parts\":[{\"functionCall\":{\"id\":\"adk-388b4ac2-d40e-4f6a-bda6-f051110c6498\",\"args\":{\"path\":\"~/home-test\"},\"name\":\"list_directory\"}}],\"role\":\"model\"},\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"timestamp\":1747377543788}\n\nEvent received: {\"id\":\"8728380b-bfad-4d14-8421-fa98d09364f1\",\"invocationId\":\"e-c2458c56-e57a-45b2-97de-ae7292e505ef\",\"author\":\"enterprise_assistant\",\"content\":{\"parts\":[{\"functionResponse\":{\"id\":\"adk-388b4ac2-d40e-4f6a-bda6-f051110c6498\",\"name\":\"list_directory\",\"response\":{\"text_output\":[{\"text\":\"[FILE] first\\n[FILE] second\\n[FILE] third\"}]}}}],\"role\":\"user\"},\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"timestamp\":1747377544679}\n\nEvent received: {\"id\":\"8fe7e594-3e47-4254-8b57-9106ad8463cb\",\"invocationId\":\"e-c2458c56-e57a-45b2-97de-ae7292e505ef\",\"author\":\"enterprise_assistant\",\"content\":{\"parts\":[{\"text\":\"There are three files in the directory: first, second, and third.\"}],\"role\":\"model\"},\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"timestamp\":1747377544689}\n</code></pre>"},{"location":"tools/mcp-tools/#2google-maps-mcp","title":"\u7bc4\u4f8b 2\uff1aGoogle Maps MCP \u4f3a\u670d\u5668","text":"<p>\u672c\u7bc4\u4f8b\u8aaa\u660e\u5982\u4f55\u9023\u7dda\u81f3 Google Maps MCP \u4f3a\u670d\u5668\u3002</p>"},{"location":"tools/mcp-tools/#1-api-api","title":"\u6b65\u9a5f 1\uff1a\u53d6\u5f97 API \u91d1\u9470\u4e26\u555f\u7528 API","text":"<ol> <li>Google Maps API \u91d1\u9470\uff1a \u8acb\u4f9d\u7167 Use API keys \u7684\u8aaa\u660e\u53d6\u5f97 Google Maps API \u91d1\u9470\u3002</li> <li>\u555f\u7528 API\uff1a \u8acb\u78ba\u8a8d\u4f60\u7684 Google Cloud \u5c08\u6848\u5df2\u555f\u7528\u4e0b\u5217 API\uff1a<ul> <li>Directions API</li> <li>Routes API \u76f8\u95dc\u64cd\u4f5c\u8acb\u53c3\u8003 Getting started with Google Maps Platform \u6587\u4ef6\u8aaa\u660e\u3002</li> </ul> </li> </ol>"},{"location":"tools/mcp-tools/#2-mcptoolset-google-maps-agent","title":"\u6b65\u9a5f 2\uff1a\u4f7f\u7528 <code>MCPToolset</code> \u5b9a\u7fa9\u4f60\u7684 Google Maps agent","text":"<p>\u8acb\u4fee\u6539\u4f60\u7684 <code>agent.py</code> \u6a94\u6848\uff08\u4f8b\u5982\u5728 <code>./adk_agent_samples/mcp_agent/agent.py</code> \u4e2d\uff09\u3002\u5c07 <code>YOUR_GOOGLE_MAPS_API_KEY</code> \u66ff\u63db\u70ba\u4f60\u5be6\u969b\u53d6\u5f97\u7684 API \u91d1\u9470\u3002</p> <pre><code># ./adk_agent_samples/mcp_agent/agent.py\nimport os\nfrom google.adk.agents import LlmAgent\nfrom google.adk.tools.mcp_tool.mcp_toolset import MCPToolset\nfrom google.adk.tools.mcp_tool.mcp_session_manager import StdioConnectionParams\nfrom mcp import StdioServerParameters\n\n# Retrieve the API key from an environment variable or directly insert it.\n# Using an environment variable is generally safer.\n# Ensure this environment variable is set in the terminal where you run 'adk web'.\n# Example: export GOOGLE_MAPS_API_KEY=\"YOUR_ACTUAL_KEY\"\ngoogle_maps_api_key = os.environ.get(\"GOOGLE_MAPS_API_KEY\")\n\nif not google_maps_api_key:\n    # Fallback or direct assignment for testing - NOT RECOMMENDED FOR PRODUCTION\n    google_maps_api_key = \"YOUR_GOOGLE_MAPS_API_KEY_HERE\" # Replace if not using env var\n    if google_maps_api_key == \"YOUR_GOOGLE_MAPS_API_KEY_HERE\":\n        print(\"WARNING: GOOGLE_MAPS_API_KEY is not set. Please set it as an environment variable or in the script.\")\n        # You might want to raise an error or exit if the key is crucial and not found.\n\nroot_agent = LlmAgent(\n    model='gemini-2.0-flash',\n    name='maps_assistant_agent',\n    instruction='Help the user with mapping, directions, and finding places using Google Maps tools.',\n    tools=[\n        MCPToolset(\n            connection_params=StdioConnectionParams(\n                server_params = StdioServerParameters(\n                    command='npx',\n                    args=[\n                        \"-y\",\n                        \"@modelcontextprotocol/server-google-maps\",\n                    ],\n                    # Pass the API key as an environment variable to the npx process\n                    # This is how the MCP server for Google Maps expects the key.\n                    env={\n                        \"GOOGLE_MAPS_API_KEY\": google_maps_api_key\n                    }\n                ),\n            ),\n            # You can filter for specific Maps tools if needed:\n            # tool_filter=['get_directions', 'find_place_by_id']\n        )\n    ],\n)\n</code></pre>"},{"location":"tools/mcp-tools/#3-__init__py","title":"\u6b65\u9a5f 3\uff1a\u78ba\u8a8d <code>__init__.py</code> \u662f\u5426\u5b58\u5728","text":"<p>\u5982\u679c\u4f60\u5df2\u5728\u7bc4\u4f8b 1 \u4e2d\u5efa\u7acb\u904e\uff0c\u5247\u53ef\u4ee5\u8df3\u904e\u6b64\u6b65\u9a5f\u3002\u5426\u5247\uff0c\u8acb\u78ba\u8a8d\u4f60\u5728 <code>./adk_agent_samples/mcp_agent/</code> \u8cc7\u6599\u593e\u4e2d\u6709\u4e00\u500b <code>__init__.py</code>\uff1a</p> <pre><code># ./adk_agent_samples/mcp_agent/__init__.py\nfrom . import agent\n</code></pre>"},{"location":"tools/mcp-tools/#4-adk-web","title":"\u6b65\u9a5f 4\uff1a\u57f7\u884c <code>adk web</code> \u4e26\u4e92\u52d5","text":"<ol> <li> <p>\u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578\uff08\u5efa\u8b70\uff09\uff1a     \u5728\u57f7\u884c <code>adk web</code> \u4e4b\u524d\uff0c\u5efa\u8b70\u5148\u5728\u7d42\u7aef\u6a5f\u4e2d\u5c07\u4f60\u7684 Google Maps API \u91d1\u9470\u8a2d\u5b9a\u70ba\u74b0\u5883\u8b8a\u6578\uff1a     <pre><code>export GOOGLE_MAPS_API_KEY=\"YOUR_ACTUAL_GOOGLE_MAPS_API_KEY\"\n</code></pre>     \u5c07 <code>YOUR_ACTUAL_GOOGLE_MAPS_API_KEY</code> \u66ff\u63db\u70ba\u4f60\u7684\u91d1\u9470\u3002</p> </li> <li> <p>\u57f7\u884c <code>adk web</code>\uff1a     \u8acb\u5207\u63db\u5230 <code>mcp_agent</code> \u7684\u7236\u76ee\u9304\uff08\u4f8b\u5982\uff1a<code>adk_agent_samples</code>\uff09\uff0c\u7136\u5f8c\u57f7\u884c\uff1a     <pre><code>cd ./adk_agent_samples # Or your equivalent parent directory\nadk web\n</code></pre></p> </li> <li> <p>\u5728 UI \u4e2d\u4e92\u52d5\uff1a</p> <ul> <li>\u9078\u64c7<code>maps_assistant_agent</code>\u3002</li> <li>\u5617\u8a66\u4ee5\u4e0b\u63d0\u793a\uff1a<ul> <li>\u300c\u5f9e GooglePlex \u5230 SFO \u7684\u8def\u7dda\u3002\u300d</li> <li>\u300c\u5c0b\u627e Golden Gate Park \u9644\u8fd1\u7684\u5496\u5561\u5e97\u3002\u300d</li> <li>\u300c\u5f9e\u6cd5\u570b\u5df4\u9ece\u5230\u5fb7\u570b\u67cf\u6797\u7684\u8def\u7dda\u662f\u4ec0\u9ebc\uff1f\u300d</li> </ul> </li> </ul> </li> </ol> <p>\u4f60\u61c9\u8a72\u6703\u770b\u5230 agent \u4f7f\u7528 Google Maps MCP \u5de5\u5177\u4f86\u63d0\u4f9b\u8def\u7dda\u6216\u4f4d\u7f6e\u76f8\u95dc\u8cc7\u8a0a\u3002</p> <p></p> <p>\u82e5\u662f Java\uff0c\u8acb\u53c3\u8003\u4ee5\u4e0b\u7bc4\u4f8b\u4f86\u5b9a\u7fa9\u4e00\u500b\u521d\u59cb\u5316<code>MCPToolset</code>\u7684 agent\uff1a</p> <pre><code>package agents;\n\nimport com.google.adk.JsonBaseModel;\nimport com.google.adk.agents.LlmAgent;\nimport com.google.adk.agents.RunConfig;\nimport com.google.adk.runner.InMemoryRunner;\nimport com.google.adk.tools.mcp.McpTool;\nimport com.google.adk.tools.mcp.McpToolset;\nimport com.google.adk.tools.mcp.McpToolset.McpToolsAndToolsetResult;\n\n\nimport com.google.genai.types.Content;\nimport com.google.genai.types.Part;\n\nimport io.modelcontextprotocol.client.transport.ServerParameters;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.Arrays;\n\npublic class MapsAgentCreator {\n\n    /**\n     * Initializes an McpToolset for Google Maps, retrieves tools,\n     * creates an LlmAgent, sends a map-related prompt, and closes the toolset.\n     * @param args Command line arguments (not used).\n     */\n    public static void main(String[] args) {\n        // TODO: Replace with your actual Google Maps API key, on a project with the Places API enabled.\n        String googleMapsApiKey = \"YOUR_GOOGLE_MAPS_API_KEY\";\n\n        Map&lt;String, String&gt; envVariables = new HashMap&lt;&gt;();\n        envVariables.put(\"GOOGLE_MAPS_API_KEY\", googleMapsApiKey);\n\n        ServerParameters connectionParams = ServerParameters.builder(\"npx\")\n                .args(List.of(\n                        \"-y\",\n                        \"@modelcontextprotocol/server-google-maps\"\n                ))\n                .env(Collections.unmodifiableMap(envVariables))\n                .build();\n\n        try {\n            CompletableFuture&lt;McpToolsAndToolsetResult&gt; futureResult =\n                    McpToolset.fromServer(connectionParams, JsonBaseModel.getMapper());\n\n            McpToolsAndToolsetResult result = futureResult.join();\n\n            try (McpToolset toolset = result.getToolset()) {\n                List&lt;McpTool&gt; tools = result.getTools();\n\n                LlmAgent agent = LlmAgent.builder()\n                        .model(\"gemini-2.0-flash\")\n                        .name(\"maps_assistant\")\n                        .description(\"Maps assistant\")\n                        .instruction(\"Help user with mapping and directions using available tools.\")\n                        .tools(tools)\n                        .build();\n\n                System.out.println(\"Agent created: \" + agent.name());\n\n                InMemoryRunner runner = new InMemoryRunner(agent);\n                String userId = \"maps-user-\" + System.currentTimeMillis();\n                String sessionId = \"maps-session-\" + System.currentTimeMillis();\n\n                String promptText = \"Please give me directions to the nearest pharmacy to Madison Square Garden.\";\n\n                try {\n                    runner.sessionService().createSession(runner.appName(), userId, null, sessionId).blockingGet();\n                    System.out.println(\"Session created: \" + sessionId + \" for user: \" + userId);\n                } catch (Exception sessionCreationException) {\n                    System.err.println(\"Failed to create session: \" + sessionCreationException.getMessage());\n                    sessionCreationException.printStackTrace();\n                    return;\n                }\n\n                Content promptContent = Content.fromParts(Part.fromText(promptText))\n\n                System.out.println(\"\\nSending prompt: \\\"\" + promptText + \"\\\" to agent...\\n\");\n\n                runner.runAsync(userId, sessionId, promptContent, RunConfig.builder().build())\n                        .blockingForEach(event -&gt; {\n                            System.out.println(\"Event received: \" + event.toJson());\n                        });\n            }\n        } catch (Exception e) {\n            System.err.println(\"An error occurred: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <p>\u6210\u529f\u7684\u56de\u61c9 (successful response) \u6703\u5982\u4e0b\u6240\u793a\uff1a <pre><code>Event received: {\"id\":\"1a4deb46-c496-4158-bd41-72702c773368\",\"invocationId\":\"e-48994aa0-531c-47be-8c57-65215c3e0319\",\"author\":\"maps_assistant\",\"content\":{\"parts\":[{\"text\":\"OK. I see a few options. The closest one is CVS Pharmacy at 5 Pennsylvania Plaza, New York, NY 10001, United States. Would you like directions?\\n\"}],\"role\":\"model\"},\"actions\":{\"stateDelta\":{},\"artifactDelta\":{},\"requestedAuthConfigs\":{}},\"timestamp\":1747380026642}\n</code></pre></p>"},{"location":"tools/mcp-tools/#2-adk-mcp-mcp-adk","title":"2. \u4f7f\u7528 ADK \u5de5\u5177\u5efa\u69cb MCP \u4f3a\u670d\u5668\uff08MCP \u4f3a\u670d\u5668\u5c0d\u5916\u63d0\u4f9b ADK\uff09","text":"<p>\u6b64\u6a21\u5f0f\u53ef\u8b93\u4f60\u5c07\u73fe\u6709\u7684 Agent Development Kit (ADK) \u5de5\u5177\u5305\u88dd\u8d77\u4f86\uff0c\u4e26\u4f7f\u5176\u53ef\u4f9b\u4efb\u4f55\u6a19\u6e96 MCP \u7528\u6236\u7aef\u61c9\u7528\u7a0b\u5f0f\u5b58\u53d6\u3002\u672c\u7bc0\u7bc4\u4f8b\u5c07\u900f\u904e\u81ea\u8a02\u5efa\u69cb\u7684 MCP \u4f3a\u670d\u5668\uff0c\u5c0d\u5916\u63d0\u4f9b ADK <code>load_web_page</code> \u5de5\u5177\u3002</p>"},{"location":"tools/mcp-tools/#_2","title":"\u6b65\u9a5f\u7e3d\u89bd","text":"<p>\u4f60\u5c07\u4f7f\u7528 <code>mcp</code> \u51fd\u5f0f\u5eab\u5efa\u7acb\u4e00\u500b\u6a19\u6e96\u7684 Python MCP \u4f3a\u670d\u5668\u61c9\u7528\u7a0b\u5f0f\u3002\u5728\u9019\u500b\u4f3a\u670d\u5668\u4e2d\uff0c\u4f60\u5c07\uff1a</p> <ol> <li>\u5be6\u4f8b\u5316\u4f60\u60f3\u5c0d\u5916\u63d0\u4f9b\u7684 ADK \u5de5\u5177\uff08\u4f8b\u5982 <code>FunctionTool(load_web_page)</code>\uff09\u3002</li> <li>\u5be6\u4f5c MCP \u4f3a\u670d\u5668\u7684 <code>@app.list_tools()</code> handler\uff0c\u4f86\u5ee3\u64ad\u9019\u4e9b ADK \u5de5\u5177\u3002\u9019\u6703\u7528\u5230 <code>google.adk.tools.mcp_tool.conversion_utils</code> \u7684 <code>adk_to_mcp_tool_type</code> \u5de5\u5177\uff0c\u5c07 ADK \u5de5\u5177\u5b9a\u7fa9\u8f49\u63db\u70ba MCP \u7684 schema\u3002</li> <li>\u5be6\u4f5c MCP \u4f3a\u670d\u5668\u7684 <code>@app.call_tool()</code> handler\u3002\u6b64 handler \u5c07\u6703\uff1a<ul> <li>\u63a5\u6536\u4f86\u81ea MCP \u7528\u6236\u7aef\u7684\u5de5\u5177\u547c\u53eb (tool calls) \u8acb\u6c42\u3002</li> <li>\u5224\u65b7\u8acb\u6c42\u662f\u5426\u91dd\u5c0d\u4f60\u5305\u88dd\u7684 ADK \u5de5\u5177\u3002</li> <li>\u57f7\u884c ADK \u5de5\u5177\u7684 <code>.run_async()</code> \u65b9\u6cd5\u3002</li> <li>\u5c07 ADK \u5de5\u5177\u7684\u7d50\u679c\u683c\u5f0f\u5316\u70ba\u7b26\u5408 MCP \u6a19\u6e96\u7684\u56de\u61c9\uff08\u4f8b\u5982 <code>mcp.types.TextContent</code>\uff09\u3002</li> </ul> </li> </ol>"},{"location":"tools/mcp-tools/#_3","title":"\u5148\u6c7a\u689d\u4ef6","text":"<p>\u8acb\u5728\u8207\u4f60\u7684 ADK \u5b89\u88dd\u76f8\u540c\u7684 Python \u74b0\u5883\u4e2d\u5b89\u88dd MCP \u4f3a\u670d\u5668\u51fd\u5f0f\u5eab\uff1a</p> <pre><code>pip install mcp\n</code></pre>"},{"location":"tools/mcp-tools/#1-mcp_1","title":"\u6b65\u9a5f 1\uff1a\u5efa\u7acb MCP \u4f3a\u670d\u5668\u8173\u672c","text":"<p>\u5efa\u7acb\u4e00\u500b\u65b0\u7684 Python \u6a94\u6848\u4f5c\u70ba\u4f60\u7684 MCP \u4f3a\u670d\u5668\uff0c\u4f8b\u5982 <code>my_adk_mcp_server.py</code>\u3002</p>"},{"location":"tools/mcp-tools/#2","title":"\u6b65\u9a5f 2\uff1a\u5be6\u4f5c\u4f3a\u670d\u5668\u908f\u8f2f","text":"<p>\u5c07\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u52a0\u5165 <code>my_adk_mcp_server.py</code>\u3002\u6b64\u8173\u672c\u6703\u5efa\u7acb\u4e00\u500b MCP \u4f3a\u670d\u5668\uff0c\u4e26\u5c0d\u5916\u63d0\u4f9b Agent Development Kit (ADK) <code>load_web_page</code> \u5de5\u5177\u3002</p> <pre><code># my_adk_mcp_server.py\nimport asyncio\nimport json\nimport os\nfrom dotenv import load_dotenv\n\n# MCP Server Imports\nfrom mcp import types as mcp_types # Use alias to avoid conflict\nfrom mcp.server.lowlevel import Server, NotificationOptions\nfrom mcp.server.models import InitializationOptions\nimport mcp.server.stdio # For running as a stdio server\n\n# ADK Tool Imports\nfrom google.adk.tools.function_tool import FunctionTool\nfrom google.adk.tools.load_web_page import load_web_page # Example ADK tool\n# ADK &lt;-&gt; MCP Conversion Utility\nfrom google.adk.tools.mcp_tool.conversion_utils import adk_to_mcp_tool_type\n\n# --- Load Environment Variables (If ADK tools need them, e.g., API keys) ---\nload_dotenv() # Create a .env file in the same directory if needed\n\n# --- Prepare the ADK Tool ---\n# Instantiate the ADK tool you want to expose.\n# This tool will be wrapped and called by the MCP server.\nprint(\"Initializing ADK load_web_page tool...\")\nadk_tool_to_expose = FunctionTool(load_web_page)\nprint(f\"ADK tool '{adk_tool_to_expose.name}' initialized and ready to be exposed via MCP.\")\n# --- End ADK Tool Prep ---\n\n# --- MCP Server Setup ---\nprint(\"Creating MCP Server instance...\")\n# Create a named MCP Server instance using the mcp.server library\napp = Server(\"adk-tool-exposing-mcp-server\")\n\n# Implement the MCP server's handler to list available tools\n@app.list_tools()\nasync def list_mcp_tools() -&gt; list[mcp_types.Tool]:\n    \"\"\"MCP handler to list tools this server exposes.\"\"\"\n    print(\"MCP Server: Received list_tools request.\")\n    # Convert the ADK tool's definition to the MCP Tool schema format\n    mcp_tool_schema = adk_to_mcp_tool_type(adk_tool_to_expose)\n    print(f\"MCP Server: Advertising tool: {mcp_tool_schema.name}\")\n    return [mcp_tool_schema]\n\n# Implement the MCP server's handler to execute a tool call\n@app.call_tool()\nasync def call_mcp_tool(\n    name: str, arguments: dict\n) -&gt; list[mcp_types.Content]: # MCP uses mcp_types.Content\n    \"\"\"MCP handler to execute a tool call requested by an MCP client.\"\"\"\n    print(f\"MCP Server: Received call_tool request for '{name}' with args: {arguments}\")\n\n    # Check if the requested tool name matches our wrapped ADK tool\n    if name == adk_tool_to_expose.name:\n        try:\n            # Execute the ADK tool's run_async method.\n            # Note: tool_context is None here because this MCP server is\n            # running the ADK tool outside of a full ADK Runner invocation.\n            # If the ADK tool requires ToolContext features (like state or auth),\n            # this direct invocation might need more sophisticated handling.\n            adk_tool_response = await adk_tool_to_expose.run_async(\n                args=arguments,\n                tool_context=None,\n            )\n            print(f\"MCP Server: ADK tool '{name}' executed. Response: {adk_tool_response}\")\n\n            # Format the ADK tool's response (often a dict) into an MCP-compliant format.\n            # Here, we serialize the response dictionary as a JSON string within TextContent.\n            # Adjust formatting based on the ADK tool's output and client needs.\n            response_text = json.dumps(adk_tool_response, indent=2)\n            # MCP expects a list of mcp_types.Content parts\n            return [mcp_types.TextContent(type=\"text\", text=response_text)]\n\n        except Exception as e:\n            print(f\"MCP Server: Error executing ADK tool '{name}': {e}\")\n            # Return an error message in MCP format\n            error_text = json.dumps({\"error\": f\"Failed to execute tool '{name}': {str(e)}\"})\n            return [mcp_types.TextContent(type=\"text\", text=error_text)]\n    else:\n        # Handle calls to unknown tools\n        print(f\"MCP Server: Tool '{name}' not found/exposed by this server.\")\n        error_text = json.dumps({\"error\": f\"Tool '{name}' not implemented by this server.\"})\n        return [mcp_types.TextContent(type=\"text\", text=error_text)]\n\n# --- MCP Server Runner ---\nasync def run_mcp_stdio_server():\n    \"\"\"Runs the MCP server, listening for connections over standard input/output.\"\"\"\n    # Use the stdio_server context manager from the mcp.server.stdio library\n    async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):\n        print(\"MCP Stdio Server: Starting handshake with client...\")\n        await app.run(\n            read_stream,\n            write_stream,\n            InitializationOptions(\n                server_name=app.name, # Use the server name defined above\n                server_version=\"0.1.0\",\n                capabilities=app.get_capabilities(\n                    # Define server capabilities - consult MCP docs for options\n                    notification_options=NotificationOptions(),\n                    experimental_capabilities={},\n                ),\n            ),\n        )\n        print(\"MCP Stdio Server: Run loop finished or client disconnected.\")\n\nif __name__ == \"__main__\":\n    print(\"Launching MCP Server to expose ADK tools via stdio...\")\n    try:\n        asyncio.run(run_mcp_stdio_server())\n    except KeyboardInterrupt:\n        print(\"\\nMCP Server (stdio) stopped by user.\")\n    except Exception as e:\n        print(f\"MCP Server (stdio) encountered an error: {e}\")\n    finally:\n        print(\"MCP Server (stdio) process exiting.\")\n# --- End MCP Server ---\n</code></pre>"},{"location":"tools/mcp-tools/#3-agent-development-kit-adk-agent-mcp","title":"\u6b65\u9a5f 3\uff1a\u4f7f\u7528 Agent Development Kit (ADK) agent \u6e2c\u8a66\u4f60\u7684\u81ea\u8a02 MCP \u4f3a\u670d\u5668","text":"<p>\u73fe\u5728\uff0c\u5efa\u7acb\u4e00\u500b Agent Development Kit (ADK) agent\uff0c\u4f5c\u70ba\u4f60\u525b\u525b\u5efa\u7f6e\u7684 MCP \u4f3a\u670d\u5668\u7684 client\u3002\u9019\u500b ADK agent \u6703\u4f7f\u7528 <code>MCPToolset</code> \u4f86\u9023\u63a5\u4f60\u7684 <code>my_adk_mcp_server.py</code> \u8173\u672c\u3002</p> <p>\u5efa\u7acb\u4e00\u500b <code>agent.py</code>\uff08\u4f8b\u5982\uff0c\u5728 <code>./adk_agent_samples/mcp_client_agent/agent.py</code> \u4e2d\uff09\uff1a</p> <pre><code># ./adk_agent_samples/mcp_client_agent/agent.py\nimport os\nfrom google.adk.agents import LlmAgent\nfrom google.adk.tools.mcp_tool.mcp_toolset import MCPToolset\nfrom google.adk.tools.mcp_tool.mcp_session_manager import StdioConnectionParams\nfrom mcp import StdioServerParameters\n\n# IMPORTANT: Replace this with the ABSOLUTE path to your my_adk_mcp_server.py script\nPATH_TO_YOUR_MCP_SERVER_SCRIPT = \"/path/to/your/my_adk_mcp_server.py\" # &lt;&lt;&lt; REPLACE\n\nif PATH_TO_YOUR_MCP_SERVER_SCRIPT == \"/path/to/your/my_adk_mcp_server.py\":\n    print(\"WARNING: PATH_TO_YOUR_MCP_SERVER_SCRIPT is not set. Please update it in agent.py.\")\n    # Optionally, raise an error if the path is critical\n\nroot_agent = LlmAgent(\n    model='gemini-2.0-flash',\n    name='web_reader_mcp_client_agent',\n    instruction=\"Use the 'load_web_page' tool to fetch content from a URL provided by the user.\",\n    tools=[\n        MCPToolset(\n            connection_params=StdioConnectionParams(\n                server_params = StdioServerParameters(\n                    command='python3', # Command to run your MCP server script\n                    args=[PATH_TO_YOUR_MCP_SERVER_SCRIPT], # Argument is the path to the script\n                )\n            )\n            # tool_filter=['load_web_page'] # Optional: ensure only specific tools are loaded\n        )\n    ],\n)\n</code></pre> <p>\u800c\u4e14\u5728\u540c\u4e00\u500b\u76ee\u9304\u4e0b\u6709\u4e00\u500b <code>__init__.py</code>\uff1a <pre><code># ./adk_agent_samples/mcp_client_agent/__init__.py\nfrom . import agent\n</code></pre></p> <p>\u57f7\u884c\u6e2c\u8a66\u6b65\u9a5f\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u555f\u52d5\u4f60\u7684\u81ea\u8a02 MCP \u4f3a\u670d\u5668\uff08\u53ef\u9078\uff0c\u65b9\u4fbf\u5206\u958b\u89c0\u5bdf\uff09\uff1a     \u4f60\u53ef\u4ee5\u5728\u4e00\u500b\u7d42\u7aef\u6a5f\u4e2d\u76f4\u63a5\u57f7\u884c <code>my_adk_mcp_server.py</code>\uff0c\u4ee5\u67e5\u770b\u5176\u65e5\u8a8c\uff1a     <pre><code>python3 /path/to/your/my_adk_mcp_server.py\n</code></pre>     \u5b83\u6703\u986f\u793a\u300cLaunching MCP Server...\u300d\u4e26\u9032\u5165\u7b49\u5f85\u72c0\u614b\u3002Agent Development Kit (ADK) agent\uff08\u900f\u904e <code>adk web</code> \u57f7\u884c\uff09\u4e4b\u5f8c\u6703\u9023\u7dda\u5230\u6b64\u7a0b\u5e8f\uff0c\u5982\u679c <code>StdioConnectionParams</code> \u4e2d\u7684 <code>command</code> \u5df2\u8a2d\u5b9a\u70ba\u57f7\u884c\u5b83\u3002     \uff08\u6216\u8005\uff0c<code>MCPToolset</code> \u5728 agent \u521d\u59cb\u5316\u6642\u6703\u81ea\u52d5\u4ee5\u5b50\u7a0b\u5e8f\u65b9\u5f0f\u555f\u52d5\u6b64\u4f3a\u670d\u5668\u8173\u672c\uff09\u3002</p> </li> <li> <p>\u70ba client agent \u57f7\u884c <code>adk web</code>\uff1a     \u8acb\u5207\u63db\u5230 <code>mcp_client_agent</code> \u7684\u4e0a\u5c64\u76ee\u9304\uff08\u4f8b\u5982 <code>adk_agent_samples</code>\uff09\uff0c\u7136\u5f8c\u57f7\u884c\uff1a     <pre><code>cd ./adk_agent_samples # Or your equivalent parent directory\nadk web\n</code></pre></p> </li> <li> <p>\u5728 Agent Development Kit (ADK) Web UI \u4e92\u52d5\uff1a</p> <ul> <li>\u9078\u64c7<code>web_reader_mcp_client_agent</code>\u3002</li> <li>\u5617\u8a66\u8f38\u5165\u63d0\u793a\u8a5e\uff0c\u4f8b\u5982\uff1a\u300c\u5f9e https://example.com\" \u8f09\u5165\u5167\u5bb9\u300d</li> </ul> </li> </ol> <p>ADK agent\uff08<code>web_reader_mcp_client_agent</code>\uff09\u5c07\u6703\u4f7f\u7528<code>MCPToolset</code>\u4f86\u555f\u52d5\u4e26\u9023\u63a5\u5230\u4f60\u7684<code>my_adk_mcp_server.py</code>\u3002\u4f60\u7684 MCP server \u6703\u6536\u5230<code>call_tool</code>\u8acb\u6c42\uff0c\u57f7\u884c ADK <code>load_web_page</code> tool\uff0c\u4e26\u56de\u50b3\u7d50\u679c\u3002ADK agent \u96a8\u5f8c\u6703\u8f49\u767c\u9019\u4e9b\u8cc7\u8a0a\u3002\u4f60\u61c9\u8a72\u80fd\u5728 ADK Web UI\uff08\u53ca\u5176\u7d42\u7aef\u6a5f\uff09\u4e2d\u770b\u5230\u65e5\u8a8c\uff0c\u82e5\u4f60\u662f\u5206\u958b\u57f7\u884c\uff0c\u4e5f\u6709\u53ef\u80fd\u6703\u5728<code>my_adk_mcp_server.py</code>\u7d42\u7aef\u6a5f\u4e2d\u770b\u5230\u65e5\u8a8c\u3002</p> <p>\u9019\u500b\u7bc4\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5c07 ADK tools \u5c01\u88dd\u5728 MCP server \u4e4b\u4e2d\uff0c\u8b93\u5b83\u5011\u80fd\u88ab\u66f4\u5ee3\u6cdb\u7684\u3001\u7b26\u5408 MCP \u6a19\u6e96\u7684 client \u5b58\u53d6\uff0c\u800c\u4e0d\u50c5\u50c5\u662f ADK agent\u3002</p> <p>\u8acb\u53c3\u8003\u6587\u4ef6\u8aaa\u660e\uff0c\u5617\u8a66\u642d\u914d Claude Desktop \u4f7f\u7528\u3002</p>"},{"location":"tools/mcp-tools/#agentadk-web-mcp-tools","title":"\u5728\u4f60\u81ea\u5df1\u7684 Agent\uff08\u975e<code>adk web</code>\uff09\u4e2d\u4f7f\u7528 MCP Tools","text":"<p>\u5982\u679c\u4f60\u7b26\u5408\u4ee5\u4e0b\u689d\u4ef6\uff0c\u672c\u7bc0\u5167\u5bb9\u9069\u7528\u65bc\u4f60\uff1a</p> <ul> <li>\u4f60\u6b63\u5728\u4f7f\u7528 ADK \u958b\u767c\u81ea\u5df1\u7684 agent</li> <li>\u800c\u4e14\uff0c\u4f60\u6c92\u6709\u4f7f\u7528<code>adk web</code>\uff0c</li> <li>\u4e26\u4e14\uff0c\u4f60\u662f\u900f\u904e\u81ea\u5df1\u7684 UI \u4f86\u5c0d\u5916\u63d0\u4f9b agent</li> </ul> <p>\u7531\u65bc MCP Tools \u7684\u898f\u683c\u662f\u4ee5\u975e\u540c\u6b65\u65b9\u5f0f\uff0c\u5f9e\u9060\u7aef\u6216\u5176\u4ed6\u7a0b\u5e8f\u904b\u884c\u7684 MCP Server \u53d6\u5f97\uff0c\u56e0\u6b64\u4f7f\u7528 MCP Tools \u7684\u8a2d\u5b9a\u65b9\u5f0f\u8207\u4e00\u822c tools \u4e0d\u540c\u3002</p> <p>\u4ee5\u4e0b\u7bc4\u4f8b\u662f\u5f9e\u4e0a\u65b9\u300c\u7bc4\u4f8b 1\uff1a\u6a94\u6848\u7cfb\u7d71 MCP Server\u300d\u4fee\u6539\u800c\u4f86\u3002\u4e3b\u8981\u5dee\u7570\u5982\u4e0b\uff1a</p> <ol> <li>\u4f60\u7684 tool \u548c agent \u9700\u8981\u4ee5\u975e\u540c\u6b65\u65b9\u5f0f\u5efa\u7acb</li> <li>\u4f60\u9700\u8981\u6b63\u78ba\u7ba1\u7406 exit stack\uff0c\u78ba\u4fdd\u7576\u8207 MCP Server \u7684\u9023\u7dda\u95dc\u9589\u6642\uff0cagent \u548c tools \u80fd\u5920\u6b63\u78ba\u92b7\u6bc0</li> </ol> <pre><code># agent.py (modify get_tools_async and other parts as needed)\n# ./adk_agent_samples/mcp_agent/agent.py\nimport os\nimport asyncio\nfrom dotenv import load_dotenv\nfrom google.genai import types\nfrom google.adk.agents.llm_agent import LlmAgent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.artifacts.in_memory_artifact_service import InMemoryArtifactService # Optional\nfrom google.adk.tools.mcp_tool.mcp_toolset import MCPToolset\nfrom google.adk.tools.mcp_tool.mcp_session_manager import StdioConnectionParams\nfrom mcp import StdioServerParameters\n\n# Load environment variables from .env file in the parent directory\n# Place this near the top, before using env vars like API keys\nload_dotenv('../.env')\n\n# Ensure TARGET_FOLDER_PATH is an absolute path for the MCP server.\nTARGET_FOLDER_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"/path/to/your/folder\")\n\n# --- Step 1: Agent Definition ---\nasync def get_agent_async():\n  \"\"\"Creates an ADK Agent equipped with tools from the MCP Server.\"\"\"\n  toolset = MCPToolset(\n      # Use StdioConnectionParams for local process communication\n      connection_params=StdioConnectionParams(\n          server_params = StdioServerParameters(\n            command='npx', # Command to run the server\n            args=[\"-y\",    # Arguments for the command\n                \"@modelcontextprotocol/server-filesystem\",\n                TARGET_FOLDER_PATH],\n          ),\n      ),\n      tool_filter=['read_file', 'list_directory'] # Optional: filter specific tools\n      # For remote servers, you would use SseConnectionParams instead:\n      # connection_params=SseConnectionParams(url=\"http://remote-server:port/path\", headers={...})\n  )\n\n  # Use in an agent\n  root_agent = LlmAgent(\n      model='gemini-2.0-flash', # Adjust model name if needed based on availability\n      name='enterprise_assistant',\n      instruction='Help user accessing their file systems',\n      tools=[toolset], # Provide the MCP tools to the ADK agent\n  )\n  return root_agent, toolset\n\n# --- Step 2: Main Execution Logic ---\nasync def async_main():\n  session_service = InMemorySessionService()\n  # Artifact service might not be needed for this example\n  artifacts_service = InMemoryArtifactService()\n\n  session = await session_service.create_session(\n      state={}, app_name='mcp_filesystem_app', user_id='user_fs'\n  )\n\n  # TODO: Change the query to be relevant to YOUR specified folder.\n  # e.g., \"list files in the 'documents' subfolder\" or \"read the file 'notes.txt'\"\n  query = \"list files in the tests folder\"\n  print(f\"User Query: '{query}'\")\n  content = types.Content(role='user', parts=[types.Part(text=query)])\n\n  root_agent, toolset = await get_agent_async()\n\n  runner = Runner(\n      app_name='mcp_filesystem_app',\n      agent=root_agent,\n      artifact_service=artifacts_service, # Optional\n      session_service=session_service,\n  )\n\n  print(\"Running agent...\")\n  events_async = runner.run_async(\n      session_id=session.id, user_id=session.user_id, new_message=content\n  )\n\n  async for event in events_async:\n    print(f\"Event received: {event}\")\n\n  # Cleanup is handled automatically by the agent framework\n  # But you can also manually close if needed:\n  print(\"Closing MCP server connection...\")\n  await toolset.close()\n  print(\"Cleanup complete.\")\n\nif __name__ == '__main__':\n  try:\n    asyncio.run(async_main())\n  except Exception as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"tools/mcp-tools/#_4","title":"\u4e3b\u8981\u6ce8\u610f\u4e8b\u9805","text":"<p>\u5728\u4f7f\u7528 MCP \u8207 Agent Development Kit (ADK) \u6642\uff0c\u8acb\u7559\u610f\u4ee5\u4e0b\u5e7e\u9ede\uff1a</p> <ul> <li> <p>\u5354\u5b9a vs. \u51fd\u5f0f\u5eab\uff1aMCP \u662f\u4e00\u7a2e\u5354\u5b9a\u898f\u7bc4\uff0c\u5b9a\u7fa9\u4e86\u901a\u8a0a\u898f\u5247\uff1bADK \u5247\u662f\u7528\u65bc\u69cb\u5efa agent \u7684 Python \u51fd\u5f0f\u5eab\uff0f\u6846\u67b6\u3002MCPToolset \u900f\u904e\u5728 ADK \u6846\u67b6\u5167\u5be6\u4f5c MCP \u5354\u5b9a\u7684 client \u7aef\uff0c\u5c07\u5169\u8005\u9023\u7d50\u8d77\u4f86\u3002\u76f8\u5c0d\u5730\uff0c\u82e5\u8981\u5728 Python \u4e2d\u5efa\u7acb MCP server\uff0c\u5247\u9700\u4f7f\u7528 model-context-protocol \u51fd\u5f0f\u5eab\u3002</p> </li> <li> <p>ADK \u5de5\u5177 vs. MCP \u5de5\u5177\uff1a</p> <ul> <li>ADK \u5de5\u5177\uff08\u5982 BaseTool\u3001FunctionTool\u3001AgentTool \u7b49\uff09\u662f\u8a2d\u8a08\u7d66 ADK \u7684 LlmAgent \u8207 Runner \u76f4\u63a5\u4f7f\u7528\u7684 Python \u7269\u4ef6\u3002</li> <li>MCP \u5de5\u5177\u5247\u662f MCP Server \u6839\u64da\u5354\u5b9a schema \u6240\u66b4\u9732\u7684\u80fd\u529b\u3002MCPToolset \u6703\u8b93\u9019\u4e9b\u80fd\u529b\u5728 LlmAgent \u770b\u8d77\u4f86\u50cf\u662f ADK \u5de5\u5177\u3002</li> <li>Langchain/CrewAI \u5de5\u5177\u5247\u662f\u5728\u9019\u4e9b\u51fd\u5f0f\u5eab\u4e2d\u7684\u7279\u5b9a\u5be6\u4f5c\uff0c\u901a\u5e38\u662f\u7c21\u55ae\u7684\u51fd\u5f0f\u6216\u985e\u5225\uff0c\u4e26\u4e0d\u5177\u5099 MCP \u7684 server\uff0f\u5354\u5b9a\u7d50\u69cb\u3002ADK \u63d0\u4f9b\u4e86\u5305\u88dd\u5668\uff08\u5982 LangchainTool\u3001CrewaiTool\uff09\u4ee5\u652f\u63f4\u90e8\u5206\u4e92\u901a\u3002</li> </ul> </li> <li> <p>\u975e\u540c\u6b65\u7279\u6027\uff1aADK \u8207 MCP \u7684 Python \u51fd\u5f0f\u5eab\u90fd\u5927\u91cf\u4f9d\u8cf4 asyncio Python \u51fd\u5f0f\u5eab\u3002\u5de5\u5177\u5be6\u4f5c\u8207 server handler \u901a\u5e38\u90fd\u61c9\u8a72\u662f async \u51fd\u5f0f\u3002</p> </li> <li> <p>\u6709\u72c0\u614b\u7684 session\uff08MCP\uff09\uff1aMCP \u5efa\u7acb\u4e86 client \u8207 server \u5be6\u4f8b\u4e4b\u9593\u6709\u72c0\u614b\u3001\u6301\u4e45\u7684\u9023\u7dda\u3002\u9019\u8207\u4e00\u822c\u7121\u72c0\u614b\u7684 REST API \u4e0d\u540c\u3002</p> <ul> <li>\u90e8\u7f72\uff1a\u9019\u7a2e\u6709\u72c0\u614b\u6027\u5728\u64f4\u5c55\u8207\u90e8\u7f72\u6642\u6703\u5e36\u4f86\u6311\u6230\uff0c\u7279\u5225\u662f\u7576\u9060\u7aef server \u9700\u8981\u8655\u7406\u5927\u91cf\u4f7f\u7528\u8005\u6642\u3002MCP \u7684\u539f\u59cb\u8a2d\u8a08\u901a\u5e38\u5047\u8a2d client \u8207 server \u4f4d\u65bc\u540c\u4e00\u5730\u9ede\u3002\u7ba1\u7406\u9019\u4e9b\u6301\u4e45\u9023\u7dda\u6642\uff0c\u57fa\u790e\u8a2d\u65bd\u9700\u7279\u5225\u8003\u91cf\uff08\u5982\u8ca0\u8f09\u5e73\u8861\u3001session affinity\uff09\u3002</li> <li>ADK MCPToolset\uff1a\u8ca0\u8cac\u7ba1\u7406\u9019\u4e9b\u9023\u7dda\u7684\u751f\u547d\u9031\u671f\u3002\u7bc4\u4f8b\u4e2d\u5c55\u793a\u7684 exit_stack \u6a21\u5f0f\u5c0d\u65bc\u78ba\u4fdd ADK agent \u7d50\u675f\u6642\u80fd\u6b63\u78ba\u7d42\u6b62\u9023\u7dda\uff08\u751a\u81f3 server process\uff09\u81f3\u95dc\u91cd\u8981\u3002</li> </ul> </li> </ul>"},{"location":"tools/mcp-tools/#mcp-agent","title":"\u4f7f\u7528 MCP \u5de5\u5177\u90e8\u7f72 Agent","text":"<p>\u7576\u4f60\u8981\u5c07\u4f7f\u7528 MCP \u5de5\u5177\u7684 ADK agent \u90e8\u7f72\u5230 Cloud Run\u3001GKE \u6216 Vertex AI Agent Engine \u7b49\u751f\u7522\u74b0\u5883\u6642\uff0c\u5fc5\u9808\u8003\u616e MCP \u9023\u7dda\u5728\u5bb9\u5668\u5316\u8207\u5206\u6563\u5f0f\u74b0\u5883\u4e2d\u7684\u904b\u4f5c\u65b9\u5f0f\u3002</p>"},{"location":"tools/mcp-tools/#agent","title":"\u95dc\u9375\u90e8\u7f72\u8981\u6c42\uff1a\u540c\u6b65\u5b9a\u7fa9 agent","text":"<p>\u26a0\ufe0f \u91cd\u8981\uff1a\u5728\u90e8\u7f72\u542b MCP \u5de5\u5177\u7684 agent \u6642\uff0c\u5fc5\u9808\u5728\u4f60\u7684 <code>agent.py</code> \u6a94\u6848\u4e2d\u540c\u6b65\u5b9a\u7fa9 agent \u8207\u5176 MCPToolset\u3002\u96d6\u7136 <code>adk web</code> \u652f\u63f4\u975e\u540c\u6b65\u5efa\u7acb agent\uff0c\u4f46\u5728\u90e8\u7f72\u74b0\u5883\u4e0b\u5fc5\u9808\u540c\u6b65\u521d\u59cb\u5316\u3002</p> <pre><code># \u2705 CORRECT: Synchronous agent definition for deployment\nimport os\nfrom google.adk.agents.llm_agent import LlmAgent\nfrom google.adk.tools.mcp_tool import StdioConnectionParams\nfrom google.adk.tools.mcp_tool.mcp_toolset import MCPToolset\nfrom mcp import StdioServerParameters\n\n_allowed_path = os.path.dirname(os.path.abspath(__file__))\n\nroot_agent = LlmAgent(\n    model='gemini-2.0-flash',\n    name='enterprise_assistant',\n    instruction=f'Help user accessing their file systems. Allowed directory: {_allowed_path}',\n    tools=[\n        MCPToolset(\n            connection_params=StdioConnectionParams(\n                server_params=StdioServerParameters(\n                    command='npx',\n                    args=['-y', '@modelcontextprotocol/server-filesystem', _allowed_path],\n                ),\n                timeout=5,  # Configure appropriate timeouts\n            ),\n            # Filter tools for security in production\n            tool_filter=[\n                'read_file', 'read_multiple_files', 'list_directory',\n                'directory_tree', 'search_files', 'get_file_info',\n                'list_allowed_directories',\n            ],\n        )\n    ],\n)\n</code></pre> <pre><code># \u274c WRONG: Asynchronous patterns don't work in deployment\nasync def get_agent():  # This won't work for deployment\n    toolset = await create_mcp_toolset_async()\n    return LlmAgent(tools=[toolset])\n</code></pre>"},{"location":"tools/mcp-tools/#_5","title":"\u5feb\u901f\u90e8\u7f72\u6307\u4ee4","text":""},{"location":"tools/mcp-tools/#vertex-ai-agent-engine","title":"Vertex AI Agent Engine","text":"<pre><code>uv run adk deploy agent_engine \\\n  --project=&lt;your-gcp-project-id&gt; \\\n  --region=&lt;your-gcp-region&gt; \\\n  --staging_bucket=\"gs://&lt;your-gcs-bucket&gt;\" \\\n  --display_name=\"My MCP Agent\" \\\n  ./path/to/your/agent_directory\n</code></pre>"},{"location":"tools/mcp-tools/#cloud-run","title":"Cloud Run","text":"<pre><code>uv run adk deploy cloud_run \\\n  --project=&lt;your-gcp-project-id&gt; \\\n  --region=&lt;your-gcp-region&gt; \\\n  --service_name=&lt;your-service-name&gt; \\\n  ./path/to/your/agent_directory\n</code></pre>"},{"location":"tools/mcp-tools/#_6","title":"\u90e8\u7f72\u6a21\u5f0f","text":""},{"location":"tools/mcp-tools/#1-stdio-mcp","title":"\u6a21\u5f0f 1\uff1a\u81ea\u5305\u542b Stdio MCP \u4f3a\u670d\u5668","text":"<p>\u5c0d\u65bc\u53ef\u4ee5\u88ab\u5c01\u88dd\u70ba npm \u5957\u4ef6\u6216 Python \u6a21\u7d44\u7684 MCP \u4f3a\u670d\u5668\uff08\u4f8b\u5982 <code>@modelcontextprotocol/server-filesystem</code>\uff09\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u5c07\u5b83\u5011\u5305\u542b\u5728\u4f60\u7684 agent \u5bb9\u5668\u4e2d\uff1a</p> <p>\u5bb9\u5668\u9700\u6c42\uff1a <pre><code># Example for npm-based MCP servers\nFROM python:3.13-slim\n\n# Install Node.js and npm for MCP servers\nRUN apt-get update &amp;&amp; apt-get install -y nodejs npm &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install your Python dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# Copy your agent code\nCOPY . .\n\n# Your agent can now use StdioConnectionParams with 'npx' commands\nCMD [\"python\", \"main.py\"]\n</code></pre></p> <p>Agent \u8a2d\u5b9a\uff1a <pre><code># This works in containers because npx and the MCP server run in the same environment\nMCPToolset(\n    connection_params=StdioConnectionParams(\n        server_params=StdioServerParameters(\n            command='npx',\n            args=[\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/app/data\"],\n        ),\n    ),\n)\n</code></pre></p>"},{"location":"tools/mcp-tools/#2-mcp-http","title":"\u6a21\u5f0f 2\uff1a\u9060\u7aef MCP \u4f3a\u670d\u5668\uff08\u53ef\u4e32\u6d41 HTTP\uff09","text":"<p>\u91dd\u5c0d\u9700\u8981\u64f4\u5c55\u6027\u7684\u6b63\u5f0f\u90e8\u7f72\uff0c\u5efa\u8b70\u5c07 MCP \u4f3a\u670d\u5668\u4f5c\u70ba\u7368\u7acb\u670d\u52d9\u90e8\u7f72\uff0c\u4e26\u900f\u904e\u53ef\u4e32\u6d41 HTTP \u9023\u63a5\uff1a</p> <p>MCP \u4f3a\u670d\u5668\u90e8\u7f72\uff08Cloud Run\uff09\uff1a <pre><code># deploy_mcp_server.py - Separate Cloud Run service using Streamable HTTP\nimport contextlib\nimport logging\nfrom collections.abc import AsyncIterator\nfrom typing import Any\n\nimport anyio\nimport click\nimport mcp.types as types\nfrom mcp.server.lowlevel import Server\nfrom mcp.server.streamable_http_manager import StreamableHTTPSessionManager\nfrom starlette.applications import Starlette\nfrom starlette.routing import Mount\nfrom starlette.types import Receive, Scope, Send\n\nlogger = logging.getLogger(__name__)\n\ndef create_mcp_server():\n    \"\"\"Create and configure the MCP server.\"\"\"\n    app = Server(\"adk-mcp-streamable-server\")\n\n    @app.call_tool()\n    async def call_tool(name: str, arguments: dict[str, Any]) -&gt; list[types.ContentBlock]:\n        \"\"\"Handle tool calls from MCP clients.\"\"\"\n        # Example tool implementation - replace with your actual ADK tools\n        if name == \"example_tool\":\n            result = arguments.get(\"input\", \"No input provided\")\n            return [\n                types.TextContent(\n                    type=\"text\",\n                    text=f\"Processed: {result}\"\n                )\n            ]\n        else:\n            raise ValueError(f\"Unknown tool: {name}\")\n\n    @app.list_tools()\n    async def list_tools() -&gt; list[types.Tool]:\n        \"\"\"List available tools.\"\"\"\n        return [\n            types.Tool(\n                name=\"example_tool\",\n                description=\"Example tool for demonstration\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"input\": {\n                            \"type\": \"string\",\n                            \"description\": \"Input text to process\"\n                        }\n                    },\n                    \"required\": [\"input\"]\n                }\n            )\n        ]\n\n    return app\n\ndef main(port: int = 8080, json_response: bool = False):\n    \"\"\"Main server function.\"\"\"\n    logging.basicConfig(level=logging.INFO)\n\n    app = create_mcp_server()\n\n    # Create session manager with stateless mode for scalability\n    session_manager = StreamableHTTPSessionManager(\n        app=app,\n        event_store=None,\n        json_response=json_response,\n        stateless=True,  # Important for Cloud Run scalability\n    )\n\n    async def handle_streamable_http(scope: Scope, receive: Receive, send: Send) -&gt; None:\n        await session_manager.handle_request(scope, receive, send)\n\n    @contextlib.asynccontextmanager\n    async def lifespan(app: Starlette) -&gt; AsyncIterator[None]:\n        \"\"\"Manage session manager lifecycle.\"\"\"\n        async with session_manager.run():\n            logger.info(\"MCP Streamable HTTP server started!\")\n            try:\n                yield\n            finally:\n                logger.info(\"MCP server shutting down...\")\n\n    # Create ASGI application\n    starlette_app = Starlette(\n        debug=False,  # Set to False for production\n        routes=[\n            Mount(\"/mcp\", app=handle_streamable_http),\n        ],\n        lifespan=lifespan,\n    )\n\n    import uvicorn\n    uvicorn.run(starlette_app, host=\"0.0.0.0\", port=port)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p> <p>\u9060\u7aef MCP \u7684 Agent \u8a2d\u5b9a\uff1a <pre><code># Your ADK agent connects to the remote MCP service via Streamable HTTP\nMCPToolset(\n    connection_params=StreamableHTTPConnectionParams(\n        url=\"https://your-mcp-server-url.run.app/mcp\",\n        headers={\"Authorization\": \"Bearer your-auth-token\"}\n    ),\n)\n</code></pre></p>"},{"location":"tools/mcp-tools/#pattern-3-sidecar-mcp-servers-gke","title":"Pattern 3: Sidecar MCP Servers (GKE)","text":"<p>\u5728 Kubernetes \u74b0\u5883\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5c07 MCP \u4f3a\u670d\u5668\u90e8\u7f72\u70ba sidecar container\uff08\u5074\u8eca\u5bb9\u5668\uff09\uff1a</p> <pre><code># deployment.yaml - GKE with MCP sidecar\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: adk-agent-with-mcp\nspec:\n  template:\n    spec:\n      containers:\n      # Main ADK agent container\n      - name: adk-agent\n        image: your-adk-agent:latest\n        ports:\n        - containerPort: 8080\n        env:\n        - name: MCP_SERVER_URL\n          value: \"http://localhost:8081\"\n\n      # MCP server sidecar\n      - name: mcp-server\n        image: your-mcp-server:latest\n        ports:\n        - containerPort: 8081\n</code></pre>"},{"location":"tools/mcp-tools/#_7","title":"\u9023\u7dda\u7ba1\u7406\u8003\u91cf","text":""},{"location":"tools/mcp-tools/#stdio","title":"Stdio \u9023\u7dda","text":"<ul> <li>\u512a\u9ede\uff1a \u8a2d\u5b9a\u7c21\u55ae\u3001\u7a0b\u5e8f\u9694\u96e2\u3001\u5728\u5bb9\u5668\u4e2d\u904b\u4f5c\u826f\u597d</li> <li>\u7f3a\u9ede\uff1a \u7a0b\u5e8f\u984d\u5916\u8ca0\u64d4\uff0c\u4e0d\u9069\u5408\u5927\u898f\u6a21\u90e8\u7f72</li> <li>\u9069\u7528\u65bc\uff1a \u958b\u767c\u968e\u6bb5\u3001\u55ae\u4e00\u79df\u6236\u90e8\u7f72\u3001\u7c21\u6613 MCP \u4f3a\u670d\u5668</li> </ul>"},{"location":"tools/mcp-tools/#ssehttp","title":"SSE/HTTP \u9023\u7dda","text":"<ul> <li>\u512a\u9ede\uff1a \u57fa\u65bc\u7db2\u8def\u3001\u53ef\u64f4\u5c55\u3001\u53ef\u540c\u6642\u8655\u7406\u591a\u500b\u7528\u6236\u7aef</li> <li>\u7f3a\u9ede\uff1a \u9700\u8981\u7db2\u8def\u57fa\u790e\u8a2d\u65bd\u3001\u8a8d\u8b49\u8f03\u70ba\u8907\u96dc</li> <li>\u9069\u7528\u65bc\uff1a \u751f\u7522\u74b0\u5883\u90e8\u7f72\u3001\u591a\u79df\u6236\u7cfb\u7d71\u3001\u5916\u90e8 MCP \u670d\u52d9</li> </ul>"},{"location":"tools/mcp-tools/#_8","title":"\u751f\u7522\u74b0\u5883\u90e8\u7f72\u6aa2\u67e5\u6e05\u55ae","text":"<p>\u7576\u4f7f\u7528 MCP \u5de5\u5177\u5c07 agent \u90e8\u7f72\u5230\u751f\u7522\u74b0\u5883\u6642\uff1a</p> <p>\u2705 \u9023\u7dda\u751f\u547d\u9031\u671f - \u4f7f\u7528 exit_stack \u6a21\u5f0f\u78ba\u4fdd MCP \u9023\u7dda\u80fd\u6b63\u78ba\u6e05\u7406 - \u70ba\u9023\u7dda\u5efa\u7acb\u8207\u8acb\u6c42\u8a2d\u5b9a\u9069\u7576\u7684\u903e\u6642\u6642\u9593 - \u5be6\u4f5c\u91cd\u8a66\u908f\u8f2f\u4ee5\u8655\u7406\u66ab\u6642\u6027\u9023\u7dda\u5931\u6557</p> <p>\u2705 \u8cc7\u6e90\u7ba1\u7406 - \u76e3\u63a7 stdio MCP \u4f3a\u670d\u5668\u7684\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf\uff08\u6bcf\u500b\u9023\u7dda\u90fd\u6703\u7522\u751f\u4e00\u500b\u7a0b\u5e8f\uff09 - \u70ba MCP \u4f3a\u670d\u5668\u7a0b\u5e8f\u8a2d\u5b9a\u9069\u7576\u7684 CPU/\u8a18\u61b6\u9ad4\u9650\u5236 - \u9060\u7aef MCP \u4f3a\u670d\u5668\u53ef\u8003\u616e\u4f7f\u7528\u9023\u7dda\u6c60</p> <p>\u2705 \u5b89\u5168\u6027 - \u9060\u7aef MCP \u9023\u7dda\u8acb\u4f7f\u7528\u8a8d\u8b49\u6a19\u982d\uff08authentication headers\uff09 - \u9650\u5236 Agent Development Kit (ADK) agent \u8207 MCP \u4f3a\u670d\u5668\u4e4b\u9593\u7684\u7db2\u8def\u5b58\u53d6 - \u4f7f\u7528 <code>tool_filter</code> \u904e\u6ffe MCP \u5de5\u5177\uff0c\u4ee5\u9650\u5236\u66b4\u9732\u7684\u529f\u80fd - \u9a57\u8b49 MCP \u5de5\u5177\u8f38\u5165\uff0c\u9632\u6b62\u6ce8\u5165\u653b\u64ca - \u70ba\u6a94\u6848\u7cfb\u7d71 MCP \u4f3a\u670d\u5668\u4f7f\u7528\u9650\u5236\u6027\u6a94\u6848\u8def\u5f91\uff08\u4f8b\u5982\uff1a<code>os.path.dirname(os.path.abspath(__file__))</code>\uff09 - \u751f\u7522\u74b0\u5883\u53ef\u8003\u616e\u50c5\u5141\u8a31\u552f\u8b80\u5de5\u5177\u904e\u6ffe\u5668</p> <p>\u2705 \u76e3\u63a7\u8207\u53ef\u89c0\u6e2c\u6027 - \u8a18\u9304 MCP \u9023\u7dda\u5efa\u7acb\u8207\u95dc\u9589\u4e8b\u4ef6 - \u76e3\u63a7 MCP \u5de5\u5177\u57f7\u884c\u6642\u9593\u8207\u6210\u529f\u7387 - \u70ba MCP \u9023\u7dda\u5931\u6557\u8a2d\u7f6e\u8b66\u5831</p> <p>\u2705 \u53ef\u64f4\u5c55\u6027 - \u5927\u91cf\u90e8\u7f72\u6642\uff0c\u5efa\u8b70\u512a\u5148\u4f7f\u7528\u9060\u7aef MCP \u4f3a\u670d\u5668\u800c\u975e stdio - \u82e5\u4f7f\u7528\u6709\u72c0\u614b\uff08stateful\uff09MCP \u4f3a\u670d\u5668\uff0c\u8acb\u8a2d\u5b9a session affinity - \u8003\u616e MCP \u4f3a\u670d\u5668\u7684\u9023\u7dda\u4e0a\u9650\u4e26\u5be6\u4f5c\u65b7\u8def\u5668\uff08circuit breaker\uff09</p>"},{"location":"tools/mcp-tools/#_9","title":"\u7279\u5b9a\u74b0\u5883\u8a2d\u5b9a","text":""},{"location":"tools/mcp-tools/#cloud-run_1","title":"Cloud Run","text":"<pre><code># Cloud Run environment variables for MCP configuration\nimport os\n\n# Detect Cloud Run environment\nif os.getenv('K_SERVICE'):\n    # Use remote MCP servers in Cloud Run\n    mcp_connection = SseConnectionParams(\n        url=os.getenv('MCP_SERVER_URL'),\n        headers={'Authorization': f\"Bearer {os.getenv('MCP_AUTH_TOKEN')}\"}\n    )\nelse:\n    # Use stdio for local development\n    mcp_connection = StdioConnectionParams(\n        server_params=StdioServerParameters(\n            command='npx',\n            args=[\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/tmp\"]\n        )\n    )\n\nMCPToolset(connection_params=mcp_connection)\n</code></pre>"},{"location":"tools/mcp-tools/#gke","title":"GKE","text":"<pre><code># GKE-specific MCP configuration\n# Use service discovery for MCP servers within the cluster\nMCPToolset(\n    connection_params=SseConnectionParams(\n        url=\"http://mcp-service.default.svc.cluster.local:8080/sse\"\n    ),\n)\n</code></pre>"},{"location":"tools/mcp-tools/#vertex-ai-agent-engine_1","title":"Vertex AI Agent Engine","text":"<pre><code># Agent Engine managed deployment\n# Prefer lightweight, self-contained MCP servers or external services\nMCPToolset(\n    connection_params=SseConnectionParams(\n        url=\"https://your-managed-mcp-service.googleapis.com/sse\",\n        headers={'Authorization': 'Bearer $(gcloud auth print-access-token)'}\n    ),\n)\n</code></pre>"},{"location":"tools/mcp-tools/#_10","title":"\u7591\u96e3\u6392\u89e3\u90e8\u7f72\u554f\u984c","text":"<p>\u5e38\u898b\u7684 MCP \u90e8\u7f72\u554f\u984c\uff1a</p> <ol> <li> <p>Stdio \u7a0b\u5e8f\u555f\u52d5\u5931\u6557 <pre><code># Debug stdio connection issues\nMCPToolset(\n    connection_params=StdioConnectionParams(\n        server_params=StdioServerParameters(\n            command='npx',\n            args=[\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/app/data\"],\n            # Add environment debugging\n            env={'DEBUG': '1'}\n        ),\n    ),\n)\n</code></pre></p> </li> <li> <p>\u7db2\u8def\u9023\u7dda\u554f\u984c <pre><code># Test remote MCP connectivity\nimport aiohttp\n\nasync def test_mcp_connection():\n    async with aiohttp.ClientSession() as session:\n        async with session.get('https://your-mcp-server.com/health') as resp:\n            print(f\"MCP Server Health: {resp.status}\")\n</code></pre></p> </li> <li> <p>\u8cc7\u6e90\u8017\u76e1</p> </li> <li>\u4f7f\u7528 stdio MCP \u4f3a\u670d\u5668\u6642\uff0c\u8acb\u76e3\u63a7 container \u8a18\u61b6\u9ad4\u4f7f\u7528\u72c0\u6cc1</li> <li>\u5728 Kubernetes \u90e8\u7f72\u4e2d\u8a2d\u5b9a\u9069\u7576\u7684\u9650\u5236</li> <li>\u5c0d\u65bc\u8cc7\u6e90\u5bc6\u96c6\u578b\u64cd\u4f5c\uff0c\u5efa\u8b70\u4f7f\u7528\u9060\u7aef MCP \u4f3a\u670d\u5668</li> </ol>"},{"location":"tools/mcp-tools/#_11","title":"\u9032\u4e00\u6b65\u8cc7\u6e90","text":"<ul> <li>Model Context Protocol \u6587\u4ef6\u8aaa\u660e</li> <li>MCP \u898f\u683c</li> <li>MCP Python SDK \u8207\u7bc4\u4f8b</li> </ul>"},{"location":"tools/openapi-tools.en/","title":"OpenAPI Integration","text":""},{"location":"tools/openapi-tools.en/#integrating-rest-apis-with-openapi","title":"Integrating REST APIs with OpenAPI","text":"<p>ADK simplifies interacting with external REST APIs by automatically generating callable tools directly from an OpenAPI Specification (v3.x). This eliminates the need to manually define individual function tools for each API endpoint.</p> <p>Core Benefit</p> <p>Use <code>OpenAPIToolset</code> to instantly create agent tools (<code>RestApiTool</code>) from your existing API documentation (OpenAPI spec), enabling agents to seamlessly call your web services.</p>"},{"location":"tools/openapi-tools.en/#key-components","title":"Key Components","text":"<ul> <li><code>OpenAPIToolset</code>: This is the primary class you'll use. You initialize it with your OpenAPI specification, and it handles the parsing and generation of tools.</li> <li><code>RestApiTool</code>: This class represents a single, callable API operation (like <code>GET /pets/{petId}</code> or <code>POST /pets</code>). <code>OpenAPIToolset</code> creates one <code>RestApiTool</code> instance for each operation defined in your spec.</li> </ul>"},{"location":"tools/openapi-tools.en/#how-it-works","title":"How it Works","text":"<p>The process involves these main steps when you use <code>OpenAPIToolset</code>:</p> <ol> <li> <p>Initialization &amp; Parsing:</p> <ul> <li>You provide the OpenAPI specification to <code>OpenAPIToolset</code> either as a Python dictionary, a JSON string, or a YAML string.</li> <li>The toolset internally parses the spec, resolving any internal references (<code>$ref</code>) to understand the complete API structure.</li> </ul> </li> <li> <p>Operation Discovery:</p> <ul> <li>It identifies all valid API operations (e.g., <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>) defined within the <code>paths</code> object of your specification.</li> </ul> </li> <li> <p>Tool Generation:</p> <ul> <li>For each discovered operation, <code>OpenAPIToolset</code> automatically creates a corresponding <code>RestApiTool</code> instance.</li> <li>Tool Name: Derived from the <code>operationId</code> in the spec (converted to <code>snake_case</code>, max 60 chars). If <code>operationId</code> is missing, a name is generated from the method and path.</li> <li>Tool Description: Uses the <code>summary</code> or <code>description</code> from the operation for the LLM.</li> <li>API Details: Stores the required HTTP method, path, server base URL, parameters (path, query, header, cookie), and request body schema internally.</li> </ul> </li> <li> <p><code>RestApiTool</code> Functionality: Each generated <code>RestApiTool</code>:</p> <ul> <li>Schema Generation: Dynamically creates a <code>FunctionDeclaration</code> based on the operation's parameters and request body. This schema tells the LLM how to call the tool (what arguments are expected).</li> <li>Execution: When called by the LLM, it constructs the correct HTTP request (URL, headers, query params, body) using the arguments provided by the LLM and the details from the OpenAPI spec. It handles authentication (if configured) and executes the API call using the <code>requests</code> library.</li> <li>Response Handling: Returns the API response (typically JSON) back to the agent flow.</li> </ul> </li> <li> <p>Authentication: You can configure global authentication (like API keys or OAuth - see Authentication for details) when initializing <code>OpenAPIToolset</code>. This authentication configuration is automatically applied to all generated <code>RestApiTool</code> instances.</p> </li> </ol>"},{"location":"tools/openapi-tools.en/#usage-workflow","title":"Usage Workflow","text":"<p>Follow these steps to integrate an OpenAPI spec into your agent:</p> <ol> <li>Obtain Spec: Get your OpenAPI specification document (e.g., load from a <code>.json</code> or <code>.yaml</code> file, fetch from a URL).</li> <li> <p>Instantiate Toolset: Create an <code>OpenAPIToolset</code> instance, passing the spec content and type (<code>spec_str</code>/<code>spec_dict</code>, <code>spec_str_type</code>). Provide authentication details (<code>auth_scheme</code>, <code>auth_credential</code>) if required by the API.</p> <pre><code>from google.adk.tools.openapi_tool.openapi_spec_parser.openapi_toolset import OpenAPIToolset\n\n# Example with a JSON string\nopenapi_spec_json = '...' # Your OpenAPI JSON string\ntoolset = OpenAPIToolset(spec_str=openapi_spec_json, spec_str_type=\"json\")\n\n# Example with a dictionary\n# openapi_spec_dict = {...} # Your OpenAPI spec as a dict\n# toolset = OpenAPIToolset(spec_dict=openapi_spec_dict)\n</code></pre> </li> <li> <p>Add to Agent: Include the retrieved tools in your <code>LlmAgent</code>'s <code>tools</code> list.</p> <pre><code>from google.adk.agents import LlmAgent\n\nmy_agent = LlmAgent(\n    name=\"api_interacting_agent\",\n    model=\"gemini-2.0-flash\", # Or your preferred model\n    tools=[toolset], # Pass the toolset\n    # ... other agent config ...\n)\n</code></pre> </li> <li> <p>Instruct Agent: Update your agent's instructions to inform it about the new API capabilities and the names of the tools it can use (e.g., <code>list_pets</code>, <code>create_pet</code>). The tool descriptions generated from the spec will also help the LLM.</p> </li> <li>Run Agent: Execute your agent using the <code>Runner</code>. When the LLM determines it needs to call one of the APIs, it will generate a function call targeting the appropriate <code>RestApiTool</code>, which will then handle the HTTP request automatically.</li> </ol>"},{"location":"tools/openapi-tools.en/#example","title":"Example","text":"<p>This example demonstrates generating tools from a simple Pet Store OpenAPI spec (using <code>httpbin.org</code> for mock responses) and interacting with them via an agent.</p> Code: Pet Store API openapi_example.py<pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport asyncio\nimport uuid # For unique session IDs\nfrom dotenv import load_dotenv\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.genai import types\n\n# --- OpenAPI Tool Imports ---\nfrom google.adk.tools.openapi_tool.openapi_spec_parser.openapi_toolset import OpenAPIToolset\n\n# --- Load Environment Variables (If ADK tools need them, e.g., API keys) ---\nload_dotenv() # Create a .env file in the same directory if needed\n\n# --- Constants ---\nAPP_NAME_OPENAPI = \"openapi_petstore_app\"\nUSER_ID_OPENAPI = \"user_openapi_1\"\nSESSION_ID_OPENAPI = f\"session_openapi_{uuid.uuid4()}\" # Unique session ID\nAGENT_NAME_OPENAPI = \"petstore_manager_agent\"\nGEMINI_MODEL = \"gemini-2.0-flash\"\n\n# --- Sample OpenAPI Specification (JSON String) ---\n# A basic Pet Store API example using httpbin.org as a mock server\nopenapi_spec_string = \"\"\"\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"Simple Pet Store API (Mock)\",\n    \"version\": \"1.0.1\",\n    \"description\": \"An API to manage pets in a store, using httpbin for responses.\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"https://httpbin.org\",\n      \"description\": \"Mock server (httpbin.org)\"\n    }\n  ],\n  \"paths\": {\n    \"/get\": {\n      \"get\": {\n        \"summary\": \"List all pets (Simulated)\",\n        \"operationId\": \"listPets\",\n        \"description\": \"Simulates returning a list of pets. Uses httpbin's /get endpoint which echoes query parameters.\",\n        \"parameters\": [\n          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"description\": \"Maximum number of pets to return\",\n            \"required\": false,\n            \"schema\": { \"type\": \"integer\", \"format\": \"int32\" }\n          },\n          {\n             \"name\": \"status\",\n             \"in\": \"query\",\n             \"description\": \"Filter pets by status\",\n             \"required\": false,\n             \"schema\": { \"type\": \"string\", \"enum\": [\"available\", \"pending\", \"sold\"] }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A list of pets (echoed query params).\",\n            \"content\": { \"application/json\": { \"schema\": { \"type\": \"object\" } } }\n          }\n        }\n      }\n    },\n    \"/post\": {\n      \"post\": {\n        \"summary\": \"Create a pet (Simulated)\",\n        \"operationId\": \"createPet\",\n        \"description\": \"Simulates adding a new pet. Uses httpbin's /post endpoint which echoes the request body.\",\n        \"requestBody\": {\n          \"description\": \"Pet object to add\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\"name\"],\n                \"properties\": {\n                  \"name\": {\"type\": \"string\", \"description\": \"Name of the pet\"},\n                  \"tag\": {\"type\": \"string\", \"description\": \"Optional tag for the pet\"}\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Pet created successfully (echoed request body).\",\n            \"content\": { \"application/json\": { \"schema\": { \"type\": \"object\" } } }\n          }\n        }\n      }\n    },\n    \"/get?petId={petId}\": {\n      \"get\": {\n        \"summary\": \"Info for a specific pet (Simulated)\",\n        \"operationId\": \"showPetById\",\n        \"description\": \"Simulates returning info for a pet ID. Uses httpbin's /get endpoint.\",\n        \"parameters\": [\n          {\n            \"name\": \"petId\",\n            \"in\": \"path\",\n            \"description\": \"This is actually passed as a query param to httpbin /get\",\n            \"required\": true,\n            \"schema\": { \"type\": \"integer\", \"format\": \"int64\" }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Information about the pet (echoed query params)\",\n            \"content\": { \"application/json\": { \"schema\": { \"type\": \"object\" } } }\n          },\n          \"404\": { \"description\": \"Pet not found (simulated)\" }\n        }\n      }\n    }\n  }\n}\n\"\"\"\n\n# --- Create OpenAPIToolset ---\npetstore_toolset = OpenAPIToolset(\n    spec_str=openapi_spec_string,\n    spec_str_type='json',\n    # No authentication needed for httpbin.org\n)\n\n# --- Agent Definition ---\nroot_agent = LlmAgent(\n    name=AGENT_NAME_OPENAPI,\n    model=GEMINI_MODEL,\n    tools=[petstore_toolset], # Pass the list of RestApiTool objects\n    instruction=\"\"\"You are a Pet Store assistant managing pets via an API.\n    Use the available tools to fulfill user requests.\n    When creating a pet, confirm the details echoed back by the API.\n    When listing pets, mention any filters used (like limit or status).\n    When showing a pet by ID, state the ID you requested.\n    \"\"\",\n    description=\"Manages a Pet Store using tools generated from an OpenAPI spec.\"\n)\n\n# --- Session and Runner Setup ---\nasync def setup_session_and_runner():\n    session_service_openapi = InMemorySessionService()\n    runner_openapi = Runner(\n        agent=root_agent,\n        app_name=APP_NAME_OPENAPI,\n        session_service=session_service_openapi,\n    )\n    await session_service_openapi.create_session(\n        app_name=APP_NAME_OPENAPI,\n        user_id=USER_ID_OPENAPI,\n        session_id=SESSION_ID_OPENAPI,\n    )\n    return runner_openapi\n\n# --- Agent Interaction Function ---\nasync def call_openapi_agent_async(query, runner_openapi):\n    print(\"\\n--- Running OpenAPI Pet Store Agent ---\")\n    print(f\"Query: {query}\")\n\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    final_response_text = \"Agent did not provide a final text response.\"\n    try:\n        async for event in runner_openapi.run_async(\n            user_id=USER_ID_OPENAPI, session_id=SESSION_ID_OPENAPI, new_message=content\n            ):\n            # Optional: Detailed event logging for debugging\n            # print(f\"  DEBUG Event: Author={event.author}, Type={'Final' if event.is_final_response() else 'Intermediate'}, Content={str(event.content)[:100]}...\")\n            if event.get_function_calls():\n                call = event.get_function_calls()[0]\n                print(f\"  Agent Action: Called function '{call.name}' with args {call.args}\")\n            elif event.get_function_responses():\n                response = event.get_function_responses()[0]\n                print(f\"  Agent Action: Received response for '{response.name}'\")\n                # print(f\"  Tool Response Snippet: {str(response.response)[:200]}...\") # Uncomment for response details\n            elif event.is_final_response() and event.content and event.content.parts:\n                # Capture the last final text response\n                final_response_text = event.content.parts[0].text.strip()\n\n        print(f\"Agent Final Response: {final_response_text}\")\n\n    except Exception as e:\n        print(f\"An error occurred during agent run: {e}\")\n        import traceback\n        traceback.print_exc() # Print full traceback for errors\n    print(\"-\" * 30)\n\n# --- Run Examples ---\nasync def run_openapi_example():\n    runner_openapi = await setup_session_and_runner()\n\n    # Trigger listPets\n    await call_openapi_agent_async(\"Show me the pets available.\", runner_openapi)\n    # Trigger createPet\n    await call_openapi_agent_async(\"Please add a new dog named 'Dukey'.\", runner_openapi)\n    # Trigger showPetById\n    await call_openapi_agent_async(\"Get info for pet with ID 123.\", runner_openapi)\n\n# --- Execute ---\nif __name__ == \"__main__\":\n    print(\"Executing OpenAPI example...\")\n    # Use asyncio.run() for top-level execution\n    try:\n        asyncio.run(run_openapi_example())\n    except RuntimeError as e:\n        if \"cannot be called from a running event loop\" in str(e):\n            print(\"Info: Cannot run asyncio.run from a running event loop (e.g., Jupyter/Colab).\")\n            # If in Jupyter/Colab, you might need to run like this:\n            # await run_openapi_example()\n        else:\n            raise e\n    print(\"OpenAPI example finished.\")\n</code></pre>"},{"location":"tools/openapi-tools/","title":"OpenAPI \u6574\u5408","text":""},{"location":"tools/openapi-tools/#openapi-rest-api","title":"\u4f7f\u7528 OpenAPI \u6574\u5408 REST API","text":"<p>Agent Development Kit (ADK) \u900f\u904e\u81ea\u52d5\u5f9e OpenAPI Specification (v3.x) \u7522\u751f\u53ef\u547c\u53eb\u7684\u5de5\u5177\uff08tools\uff09\uff0c\u5927\u5e45\u7c21\u5316\u8207\u5916\u90e8 REST API \u7684\u4e92\u52d5\u6d41\u7a0b\u3002\u9019\u8b93\u60a8\u7121\u9700\u70ba\u6bcf\u500b API \u7aef\u9ede\u624b\u52d5\u5b9a\u7fa9\u500b\u5225\u7684\u5de5\u5177\u51fd\u5f0f\u3002</p> <p>Core Benefit</p> <p>\u4f7f\u7528 <code>OpenAPIToolset</code> \u53ef\u6839\u64da\u4f60\u73fe\u6709\u7684 API \u6587\u4ef6\uff08OpenAPI \u898f\u683c\uff09\u5373\u6642\u5efa\u7acb agent \u5de5\u5177\uff08<code>RestApiTool</code>\uff09\uff0c\u8b93 agent \u80fd\u7121\u7e2b\u547c\u53eb\u4f60\u7684\u7db2\u8def\u670d\u52d9\u3002</p>"},{"location":"tools/openapi-tools/#_1","title":"\u4e3b\u8981\u5143\u4ef6","text":"<ul> <li><code>OpenAPIToolset</code>\uff1a\u9019\u662f\u4f60\u4e3b\u8981\u6703\u4f7f\u7528\u7684\u985e\u5225\u3002\u4f60\u9700\u8981\u4ee5 OpenAPI \u898f\u683c\u521d\u59cb\u5316\u5b83\uff0c\u4e26\u7531\u5b83\u8ca0\u8cac\u89e3\u6790\u8207\u7522\u751f\u5de5\u5177\u3002</li> <li><code>RestApiTool</code>\uff1a\u9019\u500b\u985e\u5225\u4ee3\u8868\u55ae\u4e00\u3001\u53ef\u547c\u53eb\u7684 API \u64cd\u4f5c\uff08\u4f8b\u5982 <code>GET /pets/{petId}</code> \u6216 <code>POST /pets</code>\uff09\u3002<code>OpenAPIToolset</code> \u6703\u91dd\u5c0d\u4f60\u898f\u683c\u4e2d\u5b9a\u7fa9\u7684\u6bcf\u500b\u64cd\u4f5c\u5efa\u7acb\u4e00\u500b <code>RestApiTool</code> \u5be6\u4f8b\u3002</li> </ul>"},{"location":"tools/openapi-tools/#_2","title":"\u904b\u4f5c\u65b9\u5f0f","text":"<p>\u7576\u4f60\u4f7f\u7528 <code>OpenAPIToolset</code> \u6642\uff0c\u4e3b\u8981\u6703\u7d93\u6b77\u4ee5\u4e0b\u6b65\u9a5f\uff1a</p> <ol> <li> <p>\u521d\u59cb\u5316\u8207\u89e3\u6790\uff1a</p> <ul> <li>\u4f60\u53ef\u4ee5\u5c07 OpenAPI \u898f\u683c\u4ee5 Python \u5b57\u5178\u3001JSON \u5b57\u4e32\u6216 YAML \u5b57\u4e32\u7684\u5f62\u5f0f\u63d0\u4f9b\u7d66 <code>OpenAPIToolset</code>\u3002</li> <li>\u5de5\u5177\u7d44\u6703\u5728\u5167\u90e8\u89e3\u6790\u898f\u683c\uff0c\u4e26\u89e3\u6790\u6240\u6709\u5167\u90e8\u53c3\u7167\uff08<code>$ref</code>\uff09\uff0c\u4ee5\u5b8c\u6574\u7406\u89e3 API \u7d50\u69cb\u3002</li> </ul> </li> <li> <p>\u64cd\u4f5c\u767c\u73fe\uff1a</p> <ul> <li>\u5de5\u5177\u6703\u627e\u51fa\u898f\u683c\u4e2d <code>paths</code> \u7269\u4ef6\u5167\u6240\u5b9a\u7fa9\u7684\u6240\u6709\u6709\u6548 API \u64cd\u4f5c\uff08\u4f8b\u5982 <code>GET</code>\u3001<code>POST</code>\u3001<code>PUT</code>\u3001<code>DELETE</code>\uff09\u3002</li> </ul> </li> <li> <p>\u5de5\u5177\u7522\u751f\uff1a</p> <ul> <li>\u5c0d\u65bc\u6bcf\u500b\u767c\u73fe\u7684\u64cd\u4f5c\uff0c<code>OpenAPIToolset</code> \u6703\u81ea\u52d5\u5efa\u7acb\u5c0d\u61c9\u7684 <code>RestApiTool</code> \u5be6\u4f8b\u3002</li> <li>\u5de5\u5177\u540d\u7a31\uff1a\u53d6\u81ea\u898f\u683c\u4e2d\u7684 <code>operationId</code>\uff08\u6703\u8f49\u63db\u70ba <code>snake_case</code>\uff0c\u6700\u591a 60 \u5b57\u5143\uff09\u3002\u82e5\u7f3a\u5c11 <code>operationId</code>\uff0c\u5247\u6703\u6839\u64da\u65b9\u6cd5\u8207\u8def\u5f91\u81ea\u52d5\u7522\u751f\u540d\u7a31\u3002</li> <li>\u5de5\u5177\u63cf\u8ff0\uff1a\u6703\u4f7f\u7528\u64cd\u4f5c\u4e2d\u7684 <code>summary</code> \u6216 <code>description</code> \u4f5c\u70ba\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7684\u63cf\u8ff0\u3002</li> <li>API \u8a73\u7d30\u8cc7\u8a0a\uff1a\u6703\u5728\u5167\u90e8\u5132\u5b58\u5fc5\u8981\u7684 HTTP \u65b9\u6cd5\u3001\u8def\u5f91\u3001\u4f3a\u670d\u5668\u57fa\u790e URL\u3001\u53c3\u6578\uff08\u8def\u5f91\u3001\u67e5\u8a62\u3001\u6a19\u982d\u3001Cookie\uff09\u4ee5\u53ca\u8acb\u6c42\u4e3b\u9ad4 schema\u3002</li> </ul> </li> <li> <p><code>RestApiTool</code> \u529f\u80fd\uff1a\u6bcf\u500b\u7522\u751f\u7684 <code>RestApiTool</code>\uff1a</p> <ul> <li>Schema \u7522\u751f\uff1a\u6839\u64da\u64cd\u4f5c\u7684\u53c3\u6578\u8207\u8acb\u6c42\u4e3b\u9ad4\u52d5\u614b\u5efa\u7acb <code>FunctionDeclaration</code>\u3002\u9019\u500b schema \u6703\u544a\u8a34\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5982\u4f55\u547c\u53eb\u8a72\u5de5\u5177\uff08\u9700\u8981\u54ea\u4e9b\u53c3\u6578\uff09\u3002</li> <li>\u57f7\u884c\uff1a\u7576 LLM \u547c\u53eb\u6642\uff0c\u6703\u6839\u64da LLM \u63d0\u4f9b\u7684\u53c3\u6578\u8207 OpenAPI \u898f\u683c\u4e2d\u7684\u7d30\u7bc0\uff0c\u7d44\u6210\u6b63\u78ba\u7684 HTTP \u8acb\u6c42\uff08URL\u3001\u6a19\u982d\u3001\u67e5\u8a62\u53c3\u6578\u3001\u4e3b\u9ad4\uff09\u3002\u540c\u6642\u6703\u8655\u7406\u9a57\u8b49\uff08\u82e5\u6709\u8a2d\u5b9a\uff09\uff0c\u4e26\u900f\u904e <code>requests</code> \u51fd\u5f0f\u5eab\u57f7\u884c API \u547c\u53eb\u3002</li> <li>\u56de\u61c9\u8655\u7406\uff1a\u5c07 API \u56de\u61c9\uff08\u901a\u5e38\u70ba JSON\uff09\u56de\u50b3\u7d66 agent \u6d41\u7a0b\u3002</li> </ul> </li> <li> <p>\u9a57\u8b49\u6a5f\u5236\uff1a\u4f60\u53ef\u4ee5\u5728\u521d\u59cb\u5316 <code>OpenAPIToolset</code> \u6642\u8a2d\u5b9a\u5168\u57df\u9a57\u8b49\uff08\u4f8b\u5982 API KEY \u6216 OAuth\uff0c\u8a73\u898b Authentication\uff09\u3002\u6b64\u9a57\u8b49\u8a2d\u5b9a\u6703\u81ea\u52d5\u5957\u7528\u81f3\u6240\u6709\u7522\u751f\u7684 <code>RestApiTool</code> \u5be6\u4f8b\u3002</p> </li> </ol>"},{"location":"tools/openapi-tools/#_3","title":"\u4f7f\u7528\u6d41\u7a0b","text":"<p>\u8acb\u4f9d\u7167\u4e0b\u5217\u6b65\u9a5f\uff0c\u5c07 OpenAPI \u898f\u683c\u6574\u5408\u9032\u4f60\u7684 agent\uff1a</p> <ol> <li>\u53d6\u5f97\u898f\u683c\uff1a\u53d6\u5f97\u4f60\u7684 OpenAPI \u898f\u683c\u6587\u4ef6\uff08\u4f8b\u5982\u5f9e <code>.json</code> \u6216 <code>.yaml</code> \u6a94\u6848\u8f09\u5165\uff0c\u6216\u5f9e URL \u53d6\u5f97\uff09\u3002</li> <li> <p>\u5efa\u7acb\u5de5\u5177\u7d44\u5be6\u4f8b\uff1a\u5efa\u7acb <code>OpenAPIToolset</code> \u5be6\u4f8b\uff0c\u50b3\u5165\u898f\u683c\u5167\u5bb9\u8207\u985e\u578b\uff08<code>spec_str</code>/<code>spec_dict</code>\u3001<code>spec_str_type</code>\uff09\u3002\u82e5 API \u9700\u8981\uff0c\u8acb\u4e00\u4f75\u63d0\u4f9b\u9a57\u8b49\u8cc7\u8a0a\uff08<code>auth_scheme</code>\u3001<code>auth_credential</code>\uff09\u3002</p> <pre><code>from google.adk.tools.openapi_tool.openapi_spec_parser.openapi_toolset import OpenAPIToolset\n\n# Example with a JSON string\nopenapi_spec_json = '...' # Your OpenAPI JSON string\ntoolset = OpenAPIToolset(spec_str=openapi_spec_json, spec_str_type=\"json\")\n\n# Example with a dictionary\n# openapi_spec_dict = {...} # Your OpenAPI spec as a dict\n# toolset = OpenAPIToolset(spec_dict=openapi_spec_dict)\n</code></pre> </li> <li> <p>\u65b0\u589e\u81f3 agent\uff1a\u5c07\u53d6\u5f97\u7684 tools \u52a0\u5165\u4f60\u7684 <code>LlmAgent</code> \u7684 <code>tools</code> \u6e05\u55ae\u4e2d\u3002</p> <pre><code>from google.adk.agents import LlmAgent\n\nmy_agent = LlmAgent(\n    name=\"api_interacting_agent\",\n    model=\"gemini-2.0-flash\", # Or your preferred model\n    tools=[toolset], # Pass the toolset\n    # ... other agent config ...\n)\n</code></pre> </li> <li> <p>\u6307\u793a agent\uff1a\u66f4\u65b0\u4f60\u7684 agent \u6307\u4ee4\uff0c\u8b93\u5176\u4e86\u89e3\u65b0\u7684 API \u529f\u80fd\uff0c\u4ee5\u53ca\u5b83\u53ef\u4ee5\u4f7f\u7528\u7684\u5de5\u5177\u540d\u7a31\uff08\u4f8b\u5982\uff1a<code>list_pets</code>\u3001<code>create_pet</code>\uff09\u3002\u6839\u64da OpenAPI \u898f\u683c\u81ea\u52d5\u7522\u751f\u7684\u5de5\u5177\u63cf\u8ff0\u4e5f\u6703\u5354\u52a9\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7406\u89e3\u5982\u4f55\u4f7f\u7528\u9019\u4e9b\u5de5\u5177\u3002</p> </li> <li>\u57f7\u884c agent\uff1a\u4f7f\u7528 <code>Runner</code> \u57f7\u884c\u4f60\u7684 agent\u3002\u7576\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5224\u65b7\u9700\u8981\u547c\u53eb\u67d0\u500b API \u6642\uff0c\u6703\u7522\u751f\u91dd\u5c0d\u9069\u7576 <code>RestApiTool</code> \u7684\u51fd\u5f0f\u547c\u53eb\uff0c\u8a72\u5de5\u5177\u6703\u81ea\u52d5\u8655\u7406 HTTP \u8acb\u6c42\u3002</li> </ol>"},{"location":"tools/openapi-tools/#_4","title":"\u7bc4\u4f8b","text":"<p>\u672c\u7bc4\u4f8b\u5c55\u793a\u5982\u4f55\u5f9e\u4e00\u500b\u7c21\u55ae\u7684 Pet Store API OpenAPI \u898f\u683c\u7522\u751f\u5de5\u5177\uff08\u4f7f\u7528 <code>httpbin.org</code> \u4f86\u56de\u50b3\u6a21\u64ec\u8cc7\u6599\uff09\uff0c\u4e26\u900f\u904e agent \u8207\u9019\u4e9b\u5de5\u5177\u4e92\u52d5\u3002</p> \u7a0b\u5f0f\u78bc\uff1aPet Store API openapi_example.py<pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport asyncio\nimport uuid # For unique session IDs\nfrom dotenv import load_dotenv\n\nfrom google.adk.agents import LlmAgent\nfrom google.adk.runners import Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.genai import types\n\n# --- OpenAPI Tool Imports ---\nfrom google.adk.tools.openapi_tool.openapi_spec_parser.openapi_toolset import OpenAPIToolset\n\n# --- Load Environment Variables (If ADK tools need them, e.g., API keys) ---\nload_dotenv() # Create a .env file in the same directory if needed\n\n# --- Constants ---\nAPP_NAME_OPENAPI = \"openapi_petstore_app\"\nUSER_ID_OPENAPI = \"user_openapi_1\"\nSESSION_ID_OPENAPI = f\"session_openapi_{uuid.uuid4()}\" # Unique session ID\nAGENT_NAME_OPENAPI = \"petstore_manager_agent\"\nGEMINI_MODEL = \"gemini-2.0-flash\"\n\n# --- Sample OpenAPI Specification (JSON String) ---\n# A basic Pet Store API example using httpbin.org as a mock server\nopenapi_spec_string = \"\"\"\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"Simple Pet Store API (Mock)\",\n    \"version\": \"1.0.1\",\n    \"description\": \"An API to manage pets in a store, using httpbin for responses.\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"https://httpbin.org\",\n      \"description\": \"Mock server (httpbin.org)\"\n    }\n  ],\n  \"paths\": {\n    \"/get\": {\n      \"get\": {\n        \"summary\": \"List all pets (Simulated)\",\n        \"operationId\": \"listPets\",\n        \"description\": \"Simulates returning a list of pets. Uses httpbin's /get endpoint which echoes query parameters.\",\n        \"parameters\": [\n          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"description\": \"Maximum number of pets to return\",\n            \"required\": false,\n            \"schema\": { \"type\": \"integer\", \"format\": \"int32\" }\n          },\n          {\n             \"name\": \"status\",\n             \"in\": \"query\",\n             \"description\": \"Filter pets by status\",\n             \"required\": false,\n             \"schema\": { \"type\": \"string\", \"enum\": [\"available\", \"pending\", \"sold\"] }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A list of pets (echoed query params).\",\n            \"content\": { \"application/json\": { \"schema\": { \"type\": \"object\" } } }\n          }\n        }\n      }\n    },\n    \"/post\": {\n      \"post\": {\n        \"summary\": \"Create a pet (Simulated)\",\n        \"operationId\": \"createPet\",\n        \"description\": \"Simulates adding a new pet. Uses httpbin's /post endpoint which echoes the request body.\",\n        \"requestBody\": {\n          \"description\": \"Pet object to add\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\"name\"],\n                \"properties\": {\n                  \"name\": {\"type\": \"string\", \"description\": \"Name of the pet\"},\n                  \"tag\": {\"type\": \"string\", \"description\": \"Optional tag for the pet\"}\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Pet created successfully (echoed request body).\",\n            \"content\": { \"application/json\": { \"schema\": { \"type\": \"object\" } } }\n          }\n        }\n      }\n    },\n    \"/get?petId={petId}\": {\n      \"get\": {\n        \"summary\": \"Info for a specific pet (Simulated)\",\n        \"operationId\": \"showPetById\",\n        \"description\": \"Simulates returning info for a pet ID. Uses httpbin's /get endpoint.\",\n        \"parameters\": [\n          {\n            \"name\": \"petId\",\n            \"in\": \"path\",\n            \"description\": \"This is actually passed as a query param to httpbin /get\",\n            \"required\": true,\n            \"schema\": { \"type\": \"integer\", \"format\": \"int64\" }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Information about the pet (echoed query params)\",\n            \"content\": { \"application/json\": { \"schema\": { \"type\": \"object\" } } }\n          },\n          \"404\": { \"description\": \"Pet not found (simulated)\" }\n        }\n      }\n    }\n  }\n}\n\"\"\"\n\n# --- Create OpenAPIToolset ---\npetstore_toolset = OpenAPIToolset(\n    spec_str=openapi_spec_string,\n    spec_str_type='json',\n    # No authentication needed for httpbin.org\n)\n\n# --- Agent Definition ---\nroot_agent = LlmAgent(\n    name=AGENT_NAME_OPENAPI,\n    model=GEMINI_MODEL,\n    tools=[petstore_toolset], # Pass the list of RestApiTool objects\n    instruction=\"\"\"You are a Pet Store assistant managing pets via an API.\n    Use the available tools to fulfill user requests.\n    When creating a pet, confirm the details echoed back by the API.\n    When listing pets, mention any filters used (like limit or status).\n    When showing a pet by ID, state the ID you requested.\n    \"\"\",\n    description=\"Manages a Pet Store using tools generated from an OpenAPI spec.\"\n)\n\n# --- Session and Runner Setup ---\nasync def setup_session_and_runner():\n    session_service_openapi = InMemorySessionService()\n    runner_openapi = Runner(\n        agent=root_agent,\n        app_name=APP_NAME_OPENAPI,\n        session_service=session_service_openapi,\n    )\n    await session_service_openapi.create_session(\n        app_name=APP_NAME_OPENAPI,\n        user_id=USER_ID_OPENAPI,\n        session_id=SESSION_ID_OPENAPI,\n    )\n    return runner_openapi\n\n# --- Agent Interaction Function ---\nasync def call_openapi_agent_async(query, runner_openapi):\n    print(\"\\n--- Running OpenAPI Pet Store Agent ---\")\n    print(f\"Query: {query}\")\n\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    final_response_text = \"Agent did not provide a final text response.\"\n    try:\n        async for event in runner_openapi.run_async(\n            user_id=USER_ID_OPENAPI, session_id=SESSION_ID_OPENAPI, new_message=content\n            ):\n            # Optional: Detailed event logging for debugging\n            # print(f\"  DEBUG Event: Author={event.author}, Type={'Final' if event.is_final_response() else 'Intermediate'}, Content={str(event.content)[:100]}...\")\n            if event.get_function_calls():\n                call = event.get_function_calls()[0]\n                print(f\"  Agent Action: Called function '{call.name}' with args {call.args}\")\n            elif event.get_function_responses():\n                response = event.get_function_responses()[0]\n                print(f\"  Agent Action: Received response for '{response.name}'\")\n                # print(f\"  Tool Response Snippet: {str(response.response)[:200]}...\") # Uncomment for response details\n            elif event.is_final_response() and event.content and event.content.parts:\n                # Capture the last final text response\n                final_response_text = event.content.parts[0].text.strip()\n\n        print(f\"Agent Final Response: {final_response_text}\")\n\n    except Exception as e:\n        print(f\"An error occurred during agent run: {e}\")\n        import traceback\n        traceback.print_exc() # Print full traceback for errors\n    print(\"-\" * 30)\n\n# --- Run Examples ---\nasync def run_openapi_example():\n    runner_openapi = await setup_session_and_runner()\n\n    # Trigger listPets\n    await call_openapi_agent_async(\"Show me the pets available.\", runner_openapi)\n    # Trigger createPet\n    await call_openapi_agent_async(\"Please add a new dog named 'Dukey'.\", runner_openapi)\n    # Trigger showPetById\n    await call_openapi_agent_async(\"Get info for pet with ID 123.\", runner_openapi)\n\n# --- Execute ---\nif __name__ == \"__main__\":\n    print(\"Executing OpenAPI example...\")\n    # Use asyncio.run() for top-level execution\n    try:\n        asyncio.run(run_openapi_example())\n    except RuntimeError as e:\n        if \"cannot be called from a running event loop\" in str(e):\n            print(\"Info: Cannot run asyncio.run from a running event loop (e.g., Jupyter/Colab).\")\n            # If in Jupyter/Colab, you might need to run like this:\n            # await run_openapi_example()\n        else:\n            raise e\n    print(\"OpenAPI example finished.\")\n</code></pre>"},{"location":"tools/performance.en/","title":"Increase tool performance with parallel execution","text":"<p>Starting with Agent Development Kit (ADK) version 1.10.0, the framework attempts to run any agent-requested  function tools  in parallel. This behavior can significantly improve the performance and responsiveness of your agents, particularly for agents that rely on multiple external APIs or long-running tasks. For example, if you have 3 tools that each take 2 seconds, by running them in parallel, the total execution time will be closer to 2 seconds, instead of 6 seconds. The ability to run tool functions parallel can improve the performance of your agents, particularly in the following scenarios:</p> <ul> <li>Research tasks: Where the agent collects information from multiple     sources before proceeding to the next stage of the workflow.</li> <li>API calls: Where the agent accesses several APIs independently, such     as searching for available flights using APIs from multiple airlines.</li> <li>Publishing and communication tasks: When the agent needs to publish     or communicate through multiple, independent channels or multiple recipients.</li> </ul> <p>However, your custom tools must be built with asynchronous execution support to enable this performance improvement. This guide explains how parallel tool execution works in the ADK and how to build your tools to take full advantage of this processing feature.</p> <p>Warning</p> <p>Any ADK Tools that use synchronous processing in a set of tool function calls will block other tools from executing in parallel, even if the other tools allow for parallel execution.</p>"},{"location":"tools/performance.en/#build-parallel-ready-tools","title":"Build parallel-ready tools","text":"<p>Enable parallel execution of your tool functions by defining them as asynchronous functions. In Python code, this means using <code>async def</code> and <code>await</code> syntax which allows the ADK to run them concurrently in an <code>asyncio</code> event loop. The following sections show examples of agent tools built for parallel processing and asynchronous operations.</p>"},{"location":"tools/performance.en/#example-of-http-web-call","title":"Example of http web call","text":"<p>The following code example show how to modify the <code>get_weather()</code> function to operate asynchronously and allow for parallel execution:</p> <pre><code> async def get_weather(city: str) -&gt; dict:\n      async with aiohttp.ClientSession() as session:\n          async with session.get(f\"http://api.weather.com/{city}\") as response:\n              return await response.json()\n</code></pre>"},{"location":"tools/performance.en/#example-of-database-call","title":"Example of database call","text":"<p>The following code example show how to write a database calling function to operate asynchronously:</p> <pre><code>async def query_database(query: str) -&gt; list:\n      async with asyncpg.connect(\"postgresql://...\") as conn:\n          return await conn.fetch(query)\n</code></pre>"},{"location":"tools/performance.en/#example-of-yielding-behavior-for-long-loops","title":"Example of yielding behavior for long loops","text":"<p>In cases where a tool is processing multiple requests or numerous long running requests, consider adding yielding code to allow other tools to execute, as shown in the following code sample:</p> <pre><code>async def process_data(data: list) -&gt; dict:\n      results = []\n      for i, item in enumerate(data):\n          processed = await process_item(item)  # Yield point\n          results.append(processed)\n\n          # Add periodic yield points for long loops\n          if i % 100 == 0:\n              await asyncio.sleep(0)  # Yield control\n      return {\"results\": results}\n</code></pre> <p>Important</p> <p>Use the <code>asyncio.sleep()</code> function for pauses to avoid blocking execution of other functions.</p>"},{"location":"tools/performance.en/#example-of-thread-pools-for-intensive-operations","title":"Example of thread pools for intensive operations","text":"<p>When performing processing-intensive functions, consider creating thread pools for better management of available computing resources, as shown in the following example:</p> <pre><code>async def cpu_intensive_tool(data: list) -&gt; dict:\n      loop = asyncio.get_event_loop()\n\n      # Use thread pool for CPU-bound work\n      with ThreadPoolExecutor() as executor:\n          result = await loop.run_in_executor(\n              executor,\n              expensive_computation,\n              data\n          )\n      return {\"result\": result}\n</code></pre>"},{"location":"tools/performance.en/#example-of-process-chunking","title":"Example of process chunking","text":"<p>When performing processes on long lists or large amounts of data, consider combining a thread pool technique with dividing up processing into chunks of data, and yielding processing time between the chunks, as shown in the following example:</p> <pre><code> async def process_large_dataset(dataset: list) -&gt; dict:\n      results = []\n      chunk_size = 1000\n\n      for i in range(0, len(dataset), chunk_size):\n          chunk = dataset[i:i + chunk_size]\n\n          # Process chunk in thread pool\n          loop = asyncio.get_event_loop()\n          with ThreadPoolExecutor() as executor:\n              chunk_result = await loop.run_in_executor(\n                  executor, process_chunk, chunk\n              )\n\n          results.extend(chunk_result)\n\n          # Yield control between chunks\n          await asyncio.sleep(0)\n\n      return {\"total_processed\": len(results), \"results\": results}\n</code></pre>"},{"location":"tools/performance.en/#write-parallel-ready-prompts-and-tool-descriptions","title":"Write parallel-ready prompts and tool descriptions","text":"<p>When building prompts for AI models, consider explicitly specifying or hinting that function calls be made in parallel. The following example of an AI prompt directs the model to use tools in parallel:</p> <pre><code>When users ask for multiple pieces of information, always call functions in\nparallel.\n\n  Examples:\n  - \"Get weather for London and currency rate USD to EUR\" \u2192 Call both functions\n    simultaneously\n  - \"Compare cities A and B\" \u2192 Call get_weather, get_population, get_distance in \n    parallel\n  - \"Analyze multiple stocks\" \u2192 Call get_stock_price for each stock in parallel\n\n  Always prefer multiple specific function calls over single complex calls.\n</code></pre> <p>The following example shows a tool function description that hints at more efficient use through parallel execution:</p> <pre><code> async def get_weather(city: str) -&gt; dict:\n      \"\"\"Get current weather for a single city.\n\n      This function is optimized for parallel execution - call multiple times for different cities.\n\n      Args:\n          city: Name of the city, for example: 'London', 'New York'\n\n      Returns:\n          Weather data including temperature, conditions, humidity\n      \"\"\"\n      await asyncio.sleep(2)  # Simulate API call\n      return {\"city\": city, \"temp\": 72, \"condition\": \"sunny\"}\n</code></pre>"},{"location":"tools/performance.en/#next-steps","title":"Next steps","text":"<p>For more information on building Tools for agents and function calling, see Function Tools. For more detailed examples of tools that take advantage of parallel processing, see the samples in the adk-python repository.</p>"},{"location":"tools/performance/","title":"\u900f\u904e\u5e73\u884c\u57f7\u884c\u63d0\u5347 tools \u6548\u80fd","text":"<p>\u81ea Agent Development Kit (ADK) 1.10.0 \u7248\u672c\u8d77\uff0c\u6846\u67b6\u6703\u5617\u8a66\u5c07\u6240\u6709 agent \u8acb\u6c42\u7684 function tools \u4ee5\u5e73\u884c\u65b9\u5f0f\u57f7\u884c\u3002\u9019\u9805\u884c\u70ba\u80fd\u986f\u8457\u63d0\u5347 agent \u7684\u6548\u80fd\u8207\u56de\u61c9\u901f\u5ea6\uff0c\u7279\u5225\u9069\u7528\u65bc\u4f9d\u8cf4\u591a\u500b\u5916\u90e8 API \u6216\u9700\u57f7\u884c\u9577\u6642\u9593\u4efb\u52d9\u7684 agent\u3002\u4f8b\u5982\uff0c\u82e5\u6709 3 \u500b tools \u5404\u9700 2 \u79d2\uff0c\u900f\u904e\u5e73\u884c\u57f7\u884c\uff0c\u7e3d\u57f7\u884c\u6642\u9593\u5c07\u63a5\u8fd1 2 \u79d2\uff0c\u800c\u975e 6 \u79d2\u3002\u8b93\u5de5\u5177\u51fd\u5f0f\uff08tool function\uff09\u80fd\u5920\u5e73\u884c\u57f7\u884c\uff0c\u80fd\u5728\u4ee5\u4e0b\u60c5\u5883\u4e0b\u5927\u5e45\u63d0\u5347 agent \u6548\u80fd\uff1a</p> <ul> <li>\u7814\u7a76\u4efb\u52d9\uff1a agent \u9700\u5f9e\u591a\u500b\u4f86\u6e90\u6536\u96c6\u8cc7\u8a0a\uff0c\u624d\u80fd\u9032\u5165\u4e0b\u4e00\u500b\u5de5\u4f5c\u6d41\u7a0b\u968e\u6bb5\u3002</li> <li>API \u547c\u53eb\uff1a agent \u9700\u7368\u7acb\u5b58\u53d6\u591a\u500b API\uff0c\u4f8b\u5982\u900f\u904e\u591a\u5bb6\u822a\u7a7a\u516c\u53f8\u7684 API \u641c\u5c0b\u53ef\u7528\u822a\u73ed\u3002</li> <li>\u767c\u5e03\u8207\u901a\u8a0a\u4efb\u52d9\uff1a agent \u9700\u540c\u6642\u900f\u904e\u591a\u500b\u7368\u7acb\u901a\u9053\u6216\u50b3\u9001\u7d66\u591a\u4f4d\u6536\u4ef6\u4eba\u9032\u884c\u767c\u5e03\u6216\u6e9d\u901a\u3002</li> </ul> <p>\u7136\u800c\uff0c\u60a8\u7684\u81ea\u8a02 tools \u5fc5\u9808\u652f\u63f4\u975e\u540c\u6b65\u57f7\u884c\uff0c\u624d\u80fd\u555f\u7528\u9019\u9805\u6548\u80fd\u63d0\u5347\u3002\u672c\u6307\u5357\u5c07\u8aaa\u660e ADK \u4e2d\u7684\u5e73\u884c\u5de5\u5177\u57f7\u884c\u539f\u7406\uff0c\u4ee5\u53ca\u5982\u4f55\u8a2d\u8a08\u60a8\u7684 tools \u4ee5\u5145\u5206\u767c\u63ee\u6b64\u8655\u7406\u7279\u6027\u3002</p> <p>Warning</p> <p>\u4efb\u4f55\u5728\u4e00\u7d44\u5de5\u5177\u51fd\u5f0f\u547c\u53eb\u4e2d\u4f7f\u7528\u540c\u6b65\u8655\u7406\u7684 Agent Development Kit (ADK) \u5de5\u5177\uff0c\u5c07\u6703\u963b\u585e\u5176\u4ed6\u5de5\u5177\u7684\u57f7\u884c\uff0c\u5373\u4f7f\u9019\u4e9b\u5176\u4ed6\u5de5\u5177\u672c\u8eab\u5141\u8a31\u5e73\u884c\u57f7\u884c\uff0c\u4e5f\u7121\u6cd5\u540c\u6642\u904b\u4f5c\u3002</p>"},{"location":"tools/performance/#_1","title":"\u5efa\u7acb\u53ef\u5e73\u884c\u57f7\u884c\u7684\u5de5\u5177","text":"<p>\u900f\u904e\u5c07\u5de5\u5177\u51fd\u5f0f\u5b9a\u7fa9\u70ba\u975e\u540c\u6b65\u51fd\u5f0f\uff0c\u53ef\u4ee5\u555f\u7528\u5de5\u5177\u51fd\u5f0f\u7684\u5e73\u884c\u57f7\u884c\u3002\u5728 Python \u7a0b\u5f0f\u78bc\u4e2d\uff0c\u9019\u8868\u793a\u8981\u4f7f\u7528 <code>async def</code> \u548c <code>await</code> \u8a9e\u6cd5\uff0c\u4f7f Agent Development Kit (ADK) \u80fd\u5920\u5728 <code>asyncio</code> \u4e8b\u4ef6\u8ff4\u5708\u4e2d\u540c\u6642\u57f7\u884c\u5b83\u5011\u3002\u4ee5\u4e0b\u7ae0\u7bc0\u5c07\u5c55\u793a\u70ba\u5e73\u884c\u8655\u7406\u8207\u975e\u540c\u6b65\u64cd\u4f5c\u6240\u8a2d\u8a08\u7684 agent \u5de5\u5177\u7bc4\u4f8b\u3002</p>"},{"location":"tools/performance/#http","title":"HTTP \u7db2\u8def\u547c\u53eb\u7bc4\u4f8b","text":"<p>\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\u5c55\u793a\u5982\u4f55\u5c07 <code>get_weather()</code> \u51fd\u5f0f\u4fee\u6539\u70ba\u975e\u540c\u6b65\u904b\u4f5c\uff0c\u4e26\u5141\u8a31\u5e73\u884c\u57f7\u884c\uff1a</p> <pre><code> async def get_weather(city: str) -&gt; dict:\n      async with aiohttp.ClientSession() as session:\n          async with session.get(f\"http://api.weather.com/{city}\") as response:\n              return await response.json()\n</code></pre>"},{"location":"tools/performance/#_2","title":"\u8cc7\u6599\u5eab\u547c\u53eb\u7bc4\u4f8b","text":"<p>\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\u8aaa\u660e\u5982\u4f55\u64b0\u5beb\u4e00\u500b\u8cc7\u6599\u5eab\u547c\u53eb\uff08database call\uff09\u51fd\u5f0f\uff0c\u4ee5\u975e\u540c\u6b65\uff08asynchronously\uff09\u65b9\u5f0f\u904b\u4f5c\uff1a</p> <pre><code>async def query_database(query: str) -&gt; list:\n      async with asyncpg.connect(\"postgresql://...\") as conn:\n          return await conn.fetch(query)\n</code></pre>"},{"location":"tools/performance/#yielding","title":"\u9577\u8ff4\u5708\u7684\u8b93\u6e21\uff08yielding\uff09\u884c\u70ba\u7bc4\u4f8b","text":"<p>\u7576\u5de5\u5177\u6b63\u5728\u8655\u7406\u591a\u500b\u8acb\u6c42\u6216\u5927\u91cf\u9577\u6642\u9593\u57f7\u884c\u7684\u8acb\u6c42\u6642\uff0c\u5efa\u8b70\u52a0\u5165\u8b93\u6e21\uff08yielding\uff09\u7a0b\u5f0f\u78bc\uff0c\u4ee5\u5141\u8a31\u5176\u4ed6\u5de5\u5177\u57f7\u884c\uff0c\u5982\u4e0b\u65b9\u7bc4\u4f8b\u7a0b\u5f0f\u78bc\u6240\u793a\uff1a</p> <pre><code>async def process_data(data: list) -&gt; dict:\n      results = []\n      for i, item in enumerate(data):\n          processed = await process_item(item)  # Yield point\n          results.append(processed)\n\n          # Add periodic yield points for long loops\n          if i % 100 == 0:\n              await asyncio.sleep(0)  # Yield control\n      return {\"results\": results}\n</code></pre> <p>Important</p> <p>\u4f7f\u7528 <code>asyncio.sleep()</code> \u51fd\u5f0f\u4f86\u66ab\u505c\uff0c\u4ee5\u907f\u514d\u963b\u585e\u5176\u4ed6\u51fd\u5f0f\u7684\u57f7\u884c\u3002</p>"},{"location":"tools/performance/#_3","title":"\u8655\u7406\u5bc6\u96c6\u904b\u7b97\u6642\u7684\u57f7\u884c\u7dd2\u6c60\u7bc4\u4f8b","text":"<p>\u7576\u57f7\u884c\u8655\u7406\u5bc6\u96c6\u578b\u51fd\u5f0f\u6642\uff0c\u5efa\u8b70\u5efa\u7acb\u57f7\u884c\u7dd2\u6c60\uff08thread pool\uff09\u4f86\u66f4\u6709\u6548\u7ba1\u7406\u53ef\u7528\u7684\u904b\u7b97\u8cc7\u6e90\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a</p> <pre><code>async def cpu_intensive_tool(data: list) -&gt; dict:\n      loop = asyncio.get_event_loop()\n\n      # Use thread pool for CPU-bound work\n      with ThreadPoolExecutor() as executor:\n          result = await loop.run_in_executor(\n              executor,\n              expensive_computation,\n              data\n          )\n      return {\"result\": result}\n</code></pre>"},{"location":"tools/performance/#process-chunking","title":"\u8655\u7406\u5206\u584a\uff08process chunking\uff09\u7bc4\u4f8b","text":"<p>\u7576\u4f60\u9700\u8981\u5c0d\u9577\u4e32\u6e05\u55ae\u6216\u5927\u91cf\u8cc7\u6599\u9032\u884c\u8655\u7406\u6642\uff0c\u5efa\u8b70\u5c07 thread pool \u6280\u8853\u8207\u5c07\u8655\u7406\u8cc7\u6599\u5206\u584a\uff08chunk\uff09\u7d50\u5408\uff0c\u4e26\u5728\u6bcf\u500b\u5206\u584a\u4e4b\u9593\u8b93\u6e21\uff08yielding\uff09\u8655\u7406\u6642\u9593\uff0c\u5982\u4e0b\u65b9\u7bc4\u4f8b\u6240\u793a\uff1a</p> <pre><code> async def process_large_dataset(dataset: list) -&gt; dict:\n      results = []\n      chunk_size = 1000\n\n      for i in range(0, len(dataset), chunk_size):\n          chunk = dataset[i:i + chunk_size]\n\n          # Process chunk in thread pool\n          loop = asyncio.get_event_loop()\n          with ThreadPoolExecutor() as executor:\n              chunk_result = await loop.run_in_executor(\n                  executor, process_chunk, chunk\n              )\n\n          results.extend(chunk_result)\n\n          # Yield control between chunks\n          await asyncio.sleep(0)\n\n      return {\"total_processed\": len(results), \"results\": results}\n</code></pre>"},{"location":"tools/performance/#_4","title":"\u64b0\u5beb\u53ef\u5e73\u884c\u57f7\u884c\u7684\u63d0\u793a\u8a5e\u8207\u5de5\u5177\u63cf\u8ff0","text":"<p>\u5728\u70ba AI \u6a21\u578b\u8a2d\u8a08\u63d0\u793a\u8a5e\uff08prompt\uff09\u6642\uff0c\u5efa\u8b70\u660e\u78ba\u6307\u5b9a\u6216\u63d0\u793a\u8981\u4ee5\u5e73\u884c\u65b9\u5f0f\u9032\u884c\u51fd\u5f0f\u547c\u53eb\u3002\u4ee5\u4e0b\u662f\u4e00\u500b AI \u63d0\u793a\u8a5e\u7684\u7bc4\u4f8b\uff0c\u6307\u793a\u6a21\u578b\u4ee5\u5e73\u884c\u65b9\u5f0f\u4f7f\u7528 tools\uff1a</p> <pre><code>When users ask for multiple pieces of information, always call functions in\nparallel.\n\n  Examples:\n  - \"Get weather for London and currency rate USD to EUR\" \u2192 Call both functions\n    simultaneously\n  - \"Compare cities A and B\" \u2192 Call get_weather, get_population, get_distance in \n    parallel\n  - \"Analyze multiple stocks\" \u2192 Call get_stock_price for each stock in parallel\n\n  Always prefer multiple specific function calls over single complex calls.\n</code></pre> <p>\u4ee5\u4e0b\u7bc4\u4f8b\u986f\u793a\u4e86\u4e00\u500b\u5de5\u5177\u51fd\u5f0f\uff08tool function\uff09\u63cf\u8ff0\uff0c\u6697\u793a\u53ef\u900f\u904e\u5e73\u884c\u57f7\u884c\uff08parallel execution\uff09\u4f86\u66f4\u6709\u6548\u7387\u5730\u4f7f\u7528\uff1a</p> <pre><code> async def get_weather(city: str) -&gt; dict:\n      \"\"\"Get current weather for a single city.\n\n      This function is optimized for parallel execution - call multiple times for different cities.\n\n      Args:\n          city: Name of the city, for example: 'London', 'New York'\n\n      Returns:\n          Weather data including temperature, conditions, humidity\n      \"\"\"\n      await asyncio.sleep(2)  # Simulate API call\n      return {\"city\": city, \"temp\": 72, \"condition\": \"sunny\"}\n</code></pre>"},{"location":"tools/performance/#_5","title":"\u4e0b\u4e00\u6b65","text":"<p>\u5982\u9700\u6709\u95dc\u70ba agent \u548c function calling \u5efa\u7acb tools \u7684\u66f4\u591a\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1 Function Tools\u3002 \u82e5\u9700\u66f4\u8a73\u7d30\u7684\u7bc4\u4f8b\uff0c\u8aaa\u660e\u5982\u4f55\u5229\u7528\u5e73\u884c\u8655\u7406\u4f86\u958b\u767c tools\uff0c\u8acb\u53c3\u8003 adk-python repository \u4e2d\u7684\u7bc4\u4f8b\u3002</p>"},{"location":"tools/third-party-tools.en/","title":"Third Party Tools","text":"<p>ADK is designed to be highly extensible, allowing you to seamlessly integrate tools from other AI Agent frameworks like CrewAI and LangChain. This interoperability is crucial because it allows for faster development time and allows you to reuse existing tools.</p>"},{"location":"tools/third-party-tools.en/#1-using-langchain-tools","title":"1. Using LangChain Tools","text":"<p>ADK provides the <code>LangchainTool</code> wrapper to integrate tools from the LangChain ecosystem into your agents.</p>"},{"location":"tools/third-party-tools.en/#example-web-search-using-langchains-tavily-tool","title":"Example: Web Search using LangChain's Tavily tool","text":"<p>Tavily provides a search API that returns answers derived from real-time search results, intended for use by applications like AI agents.</p> <ol> <li> <p>Follow ADK installation and setup guide.</p> </li> <li> <p>Install Dependencies: Ensure you have the necessary LangChain packages installed. For example, to use the Tavily search tool, install its specific dependencies:</p> <pre><code>pip install langchain_community tavily-python\n</code></pre> </li> <li> <p>Obtain a Tavily API KEY and export it as an environment variable.</p> <pre><code>export TAVILY_API_KEY=&lt;REPLACE_WITH_API_KEY&gt;\n</code></pre> </li> <li> <p>Import: Import the <code>LangchainTool</code> wrapper from ADK and the specific <code>LangChain</code> tool you wish to use (e.g, <code>TavilySearchResults</code>).</p> <pre><code>from google.adk.tools.langchain_tool import LangchainTool\nfrom langchain_community.tools import TavilySearchResults\n</code></pre> </li> <li> <p>Instantiate &amp; Wrap: Create an instance of your LangChain tool and pass it to the <code>LangchainTool</code> constructor.</p> <pre><code># Instantiate the LangChain tool\ntavily_tool_instance = TavilySearchResults(\n    max_results=5,\n    search_depth=\"advanced\",\n    include_answer=True,\n    include_raw_content=True,\n    include_images=True,\n)\n\n# Wrap it with LangchainTool for ADK\nadk_tavily_tool = LangchainTool(tool=tavily_tool_instance)\n</code></pre> </li> <li> <p>Add to Agent: Include the wrapped <code>LangchainTool</code> instance in your agent's <code>tools</code> list during definition.</p> <pre><code>from google.adk import Agent\n\n# Define the ADK agent, including the wrapped tool\nmy_agent = Agent(\n    name=\"langchain_tool_agent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Agent to answer questions using TavilySearch.\",\n    instruction=\"I can answer your questions by searching the internet. Just ask me anything!\",\n    tools=[adk_tavily_tool] # Add the wrapped tool here\n)\n</code></pre> </li> </ol>"},{"location":"tools/third-party-tools.en/#full-example-tavily-search","title":"Full Example: Tavily Search","text":"<p>Here's the full code combining the steps above to create and run an agent using the LangChain Tavily search tool.</p> <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nfrom google.adk import Agent, Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools.langchain_tool import LangchainTool\nfrom google.genai import types\nfrom langchain_community.tools import TavilySearchResults\n\n# Ensure TAVILY_API_KEY is set in your environment\nif not os.getenv(\"TAVILY_API_KEY\"):\n    print(\"Warning: TAVILY_API_KEY environment variable not set.\")\n\nAPP_NAME = \"news_app\"\nUSER_ID = \"1234\"\nSESSION_ID = \"session1234\"\n\n# Instantiate LangChain tool\ntavily_search = TavilySearchResults(\n    max_results=5,\n    search_depth=\"advanced\",\n    include_answer=True,\n    include_raw_content=True,\n    include_images=True,\n)\n\n# Wrap with LangchainTool\nadk_tavily_tool = LangchainTool(tool=tavily_search)\n\n# Define Agent with the wrapped tool\nmy_agent = Agent(\n    name=\"langchain_tool_agent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Agent to answer questions using TavilySearch.\",\n    instruction=\"I can answer your questions by searching the internet. Just ask me anything!\",\n    tools=[adk_tavily_tool] # Add the wrapped tool here\n)\n\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=my_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"stock price of GOOG\")\n</code></pre>"},{"location":"tools/third-party-tools.en/#2-using-crewai-tools","title":"2. Using CrewAI tools","text":"<p>ADK provides the <code>CrewaiTool</code> wrapper to integrate tools from the CrewAI library.</p>"},{"location":"tools/third-party-tools.en/#example-web-search-using-crewais-serper-api","title":"Example: Web Search using CrewAI's Serper API","text":"<p>Serper API provides access to Google Search results programmatically. It allows applications, like AI agents, to perform real-time Google searches (including news, images, etc.) and get structured data back without needing to scrape web pages directly.</p> <ol> <li> <p>Follow ADK installation and setup guide.</p> </li> <li> <p>Install Dependencies: Install the necessary CrewAI tools package. For example, to use the SerperDevTool:</p> <pre><code>pip install crewai-tools\n</code></pre> </li> <li> <p>Obtain a Serper API KEY and export it as an environment variable.</p> <pre><code>export SERPER_API_KEY=&lt;REPLACE_WITH_API_KEY&gt;\n</code></pre> </li> <li> <p>Import: Import <code>CrewaiTool</code> from ADK and the desired CrewAI tool (e.g, <code>SerperDevTool</code>).</p> <pre><code>from google.adk.tools.crewai_tool import CrewaiTool\nfrom crewai_tools import SerperDevTool\n</code></pre> </li> <li> <p>Instantiate &amp; Wrap: Create an instance of the CrewAI tool. Pass it to the <code>CrewaiTool</code> constructor. Crucially, you must provide a name and description to the ADK wrapper, as these are used by ADK's underlying model to understand when to use the tool.</p> <pre><code># Instantiate the CrewAI tool\nserper_tool_instance = SerperDevTool(\n    n_results=10,\n    save_file=False,\n    search_type=\"news\",\n)\n\n# Wrap it with CrewaiTool for ADK, providing name and description\nadk_serper_tool = CrewaiTool(\n    name=\"InternetNewsSearch\",\n    description=\"Searches the internet specifically for recent news articles using Serper.\",\n    tool=serper_tool_instance\n)\n</code></pre> </li> <li> <p>Add to Agent: Include the wrapped <code>CrewaiTool</code> instance in your agent's <code>tools</code> list.</p> <pre><code>from google.adk import Agent\n\n# Define the ADK agent\nmy_agent = Agent(\n    name=\"crewai_search_agent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Agent to find recent news using the Serper search tool.\",\n    instruction=\"I can find the latest news for you. What topic are you interested in?\",\n    tools=[adk_serper_tool] # Add the wrapped tool here\n)\n</code></pre> </li> </ol>"},{"location":"tools/third-party-tools.en/#full-example-serper-api","title":"Full Example: Serper API","text":"<p>Here's the full code combining the steps above to create and run an agent using the CrewAI Serper API search tool.</p> <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nfrom google.adk import Agent, Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools.crewai_tool import CrewaiTool\nfrom google.genai import types\nfrom crewai_tools import SerperDevTool\n\n\n# Constants\nAPP_NAME = \"news_app\"\nUSER_ID = \"user1234\"\nSESSION_ID = \"1234\"\n\n# Ensure SERPER_API_KEY is set in your environment\nif not os.getenv(\"SERPER_API_KEY\"):\n    print(\"Warning: SERPER_API_KEY environment variable not set.\")\n\nserper_tool_instance = SerperDevTool(\n    n_results=10,\n    save_file=False,\n    search_type=\"news\",\n)\n\nadk_serper_tool = CrewaiTool(\n    name=\"InternetNewsSearch\",\n    description=\"Searches the internet specifically for recent news articles using Serper.\",\n    tool=serper_tool_instance\n)\n\nserper_agent = Agent(\n    name=\"basic_search_agent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Agent to answer questions using Google Search.\",\n    instruction=\"I can answer your questions by searching the internet. Just ask me anything!\",\n    # Add the Serper tool\n    tools=[adk_serper_tool]\n)\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=serper_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"what's the latest news on AI Agents?\")\n</code></pre>"},{"location":"tools/third-party-tools/","title":"\u7b2c\u4e09\u65b9\u5de5\u5177","text":"<p>Agent Development Kit (ADK) \u8a2d\u8a08\u4e0a\u9ad8\u5ea6\u53ef\u64f4\u5145\uff0c\u8b93\u4f60\u80fd\u7121\u7e2b\u6574\u5408\u4f86\u81ea\u5176\u4ed6 AI Agent \u6846\u67b6\uff08\u5982 CrewAI \u548c LangChain\uff09\u7684\u5de5\u5177\u3002\u9019\u7a2e\u4e92\u901a\u6027\u975e\u5e38\u95dc\u9375\uff0c\u56e0\u70ba\u5b83\u80fd\u52a0\u901f\u958b\u767c\u6d41\u7a0b\uff0c\u4e26\u8b93\u4f60\u91cd\u8907\u5229\u7528\u73fe\u6709\u5de5\u5177\u3002</p>"},{"location":"tools/third-party-tools/#1-langchain","title":"1. \u4f7f\u7528 LangChain \u5de5\u5177","text":"<p>Agent Development Kit (ADK) \u63d0\u4f9b <code>LangchainTool</code> \u5305\u88dd\u5668\uff0c\u8b93\u4f60\u53ef\u4ee5\u5c07 LangChain \u751f\u614b\u7cfb\u7d71\u4e2d\u7684\u5de5\u5177\u6574\u5408\u5230\u4f60\u7684 agent \u4e2d\u3002</p>"},{"location":"tools/third-party-tools/#langchain-tavily","title":"\u7bc4\u4f8b\uff1a\u4f7f\u7528 LangChain \u7684 Tavily \u5de5\u5177\u9032\u884c\u7db2\u8def\u641c\u5c0b","text":"<p>Tavily \u63d0\u4f9b\u4e00\u500b\u641c\u5c0b API\uff0c\u80fd\u6839\u64da\u5373\u6642\u641c\u5c0b\u7d50\u679c\u56de\u50b3\u7b54\u6848\uff0c\u9069\u5408 AI agent \u7b49\u61c9\u7528\u7a0b\u5f0f\u4f7f\u7528\u3002</p> <ol> <li> <p>\u8acb\u4f9d\u7167 ADK \u5b89\u88dd\u8207\u8a2d\u5b9a \u6307\u5357\u64cd\u4f5c\u3002</p> </li> <li> <p>\u5b89\u88dd\u76f8\u4f9d\u5957\u4ef6\uff1a\u8acb\u78ba\u8a8d\u4f60\u5df2\u5b89\u88dd\u6240\u9700\u7684 LangChain \u5957\u4ef6\u3002\u4f8b\u5982\uff0c\u82e5\u8981\u4f7f\u7528 Tavily \u641c\u5c0b\u5de5\u5177\uff0c\u8acb\u5b89\u88dd\u5176\u5c08\u5c6c\u7684\u76f8\u4f9d\u5957\u4ef6\uff1a</p> <pre><code>pip install langchain_community tavily-python\n</code></pre> </li> <li> <p>\u53d6\u5f97 Tavily API KEY\uff0c\u4e26\u5c07\u5176\u532f\u51fa\u70ba\u74b0\u5883\u8b8a\u6578\u3002</p> <pre><code>export TAVILY_API_KEY=&lt;REPLACE_WITH_API_KEY&gt;\n</code></pre> </li> <li> <p>\u532f\u5165\uff1a \u5f9e Agent Development Kit (ADK) \u532f\u5165 <code>LangchainTool</code> \u5305\u88dd\u5668\uff0c\u4ee5\u53ca\u4f60\u60f3\u4f7f\u7528\u7684\u7279\u5b9a <code>LangChain</code> \u5de5\u5177\uff08\u4f8b\u5982 <code>TavilySearchResults</code>\uff09\u3002</p> <pre><code>from google.adk.tools.langchain_tool import LangchainTool\nfrom langchain_community.tools import TavilySearchResults\n</code></pre> </li> <li> <p>\u5be6\u4f8b\u5316\u8207\u5305\u88dd\uff1a \u5efa\u7acb\u4f60\u7684 LangChain \u5de5\u5177\u5be6\u4f8b\uff0c\u4e26\u5c07\u5176\u50b3\u905e\u7d66 <code>LangchainTool</code> \u7684\u5efa\u69cb\u5b50\u3002</p> <pre><code># Instantiate the LangChain tool\ntavily_tool_instance = TavilySearchResults(\n    max_results=5,\n    search_depth=\"advanced\",\n    include_answer=True,\n    include_raw_content=True,\n    include_images=True,\n)\n\n# Wrap it with LangchainTool for ADK\nadk_tavily_tool = LangchainTool(tool=tavily_tool_instance)\n</code></pre> </li> <li> <p>\u65b0\u589e\u81f3 agent\uff1a \u5728\u5b9a\u7fa9\u6642\uff0c\u5c07\u5305\u88dd\u904e\u7684 <code>LangchainTool</code> \u5be6\u4f8b\u52a0\u5165\u4f60\u7684 agent \u7684 <code>tools</code> \u6e05\u55ae\u4e2d\u3002</p> <pre><code>from google.adk import Agent\n\n# Define the ADK agent, including the wrapped tool\nmy_agent = Agent(\n    name=\"langchain_tool_agent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Agent to answer questions using TavilySearch.\",\n    instruction=\"I can answer your questions by searching the internet. Just ask me anything!\",\n    tools=[adk_tavily_tool] # Add the wrapped tool here\n)\n</code></pre> </li> </ol>"},{"location":"tools/third-party-tools/#tavily","title":"\u5b8c\u6574\u7bc4\u4f8b\uff1aTavily \u641c\u5c0b","text":"<p>\u4ee5\u4e0b\u662f\u7d50\u5408\u4e0a\u8ff0\u6b65\u9a5f\uff0c\u4f7f\u7528 LangChain Tavily \u641c\u5c0b\u5de5\u5177\u4f86\u5efa\u7acb\u4e26\u57f7\u884c agent \u7684\u5b8c\u6574\u7a0b\u5f0f\u78bc\u3002</p> <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nfrom google.adk import Agent, Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools.langchain_tool import LangchainTool\nfrom google.genai import types\nfrom langchain_community.tools import TavilySearchResults\n\n# Ensure TAVILY_API_KEY is set in your environment\nif not os.getenv(\"TAVILY_API_KEY\"):\n    print(\"Warning: TAVILY_API_KEY environment variable not set.\")\n\nAPP_NAME = \"news_app\"\nUSER_ID = \"1234\"\nSESSION_ID = \"session1234\"\n\n# Instantiate LangChain tool\ntavily_search = TavilySearchResults(\n    max_results=5,\n    search_depth=\"advanced\",\n    include_answer=True,\n    include_raw_content=True,\n    include_images=True,\n)\n\n# Wrap with LangchainTool\nadk_tavily_tool = LangchainTool(tool=tavily_search)\n\n# Define Agent with the wrapped tool\nmy_agent = Agent(\n    name=\"langchain_tool_agent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Agent to answer questions using TavilySearch.\",\n    instruction=\"I can answer your questions by searching the internet. Just ask me anything!\",\n    tools=[adk_tavily_tool] # Add the wrapped tool here\n)\n\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=my_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"stock price of GOOG\")\n</code></pre>"},{"location":"tools/third-party-tools/#2-crewai","title":"2. \u4f7f\u7528 CrewAI \u5de5\u5177","text":"<p>Agent Development Kit (ADK) \u63d0\u4f9b\u4e86 <code>CrewaiTool</code> \u5305\u88dd\u5668\uff0c\u53ef\u7528\u65bc\u6574\u5408 CrewAI \u51fd\u5f0f\u5eab\u4e2d\u7684 tools\u3002</p>"},{"location":"tools/third-party-tools/#crewai-serper-api","title":"\u7bc4\u4f8b\uff1a\u4f7f\u7528 CrewAI \u7684 Serper API \u9032\u884c\u7db2\u9801\u641c\u5c0b","text":"<p>Serper API \u63d0\u4f9b\u4ee5\u7a0b\u5f0f\u5316\u65b9\u5f0f\u5b58\u53d6 Google Search \u7d50\u679c\u7684\u80fd\u529b\u3002\u9019\u8b93\u61c9\u7528\u7a0b\u5f0f\uff08\u5982 AI agent\uff09\u80fd\u5373\u6642\u57f7\u884c Google Search\uff08\u5305\u542b\u65b0\u805e\u3001\u5716\u7247\u7b49\uff09\uff0c\u4e26\u53d6\u5f97\u7d50\u69cb\u5316\u8cc7\u6599\uff0c\u800c\u7121\u9700\u76f4\u63a5\u722c\u53d6\u7db2\u9801\u5167\u5bb9\u3002</p> <ol> <li> <p>\u8acb\u4f9d\u7167 ADK \u5b89\u88dd\u8207\u8a2d\u5b9a \u6307\u5357\u64cd\u4f5c\u3002</p> </li> <li> <p>\u5b89\u88dd\u76f8\u4f9d\u5957\u4ef6\uff1a \u5b89\u88dd\u6240\u9700\u7684 CrewAI tools \u5957\u4ef6\u3002\u4f8b\u5982\uff0c\u82e5\u8981\u4f7f\u7528 SerperDevTool\uff1a</p> <pre><code>pip install crewai-tools\n</code></pre> </li> <li> <p>\u53d6\u5f97 Serper API KEY\uff0c\u4e26\u5c07\u5176\u8a2d\u70ba\u74b0\u5883\u8b8a\u6578\u3002</p> <pre><code>export SERPER_API_KEY=&lt;REPLACE_WITH_API_KEY&gt;\n</code></pre> </li> <li> <p>\u532f\u5165\uff1a \u5f9e Agent Development Kit (ADK) \u532f\u5165 <code>CrewaiTool</code>\uff0c\u4ee5\u53ca\u6240\u9700\u7684 CrewAI \u5de5\u5177\uff08\u4f8b\u5982 <code>SerperDevTool</code>\uff09\u3002</p> <pre><code>from google.adk.tools.crewai_tool import CrewaiTool\nfrom crewai_tools import SerperDevTool\n</code></pre> </li> <li> <p>\u5be6\u4f8b\u5316\u8207\u5305\u88dd\uff1a \u5efa\u7acb CrewAI \u5de5\u5177\u7684\u5be6\u4f8b\uff0c\u4e26\u5c07\u5176\u50b3\u905e\u7d66 <code>CrewaiTool</code> \u5efa\u69cb\u5b50\u3002\u91cd\u9ede\u662f\uff0c\u60a8\u5fc5\u9808\u70ba ADK \u5305\u88dd\u5668\u63d0\u4f9b\u540d\u7a31\u8207\u63cf\u8ff0\uff0c\u56e0\u70ba\u9019\u4e9b\u8cc7\u8a0a\u6703\u88ab Agent Development Kit (ADK) \u7684\u5e95\u5c64\u6a21\u578b\u7528\u4f86\u5224\u65b7\u4f55\u6642\u61c9\u8a72\u4f7f\u7528\u8a72\u5de5\u5177\u3002</p> <pre><code># Instantiate the CrewAI tool\nserper_tool_instance = SerperDevTool(\n    n_results=10,\n    save_file=False,\n    search_type=\"news\",\n)\n\n# Wrap it with CrewaiTool for ADK, providing name and description\nadk_serper_tool = CrewaiTool(\n    name=\"InternetNewsSearch\",\n    description=\"Searches the internet specifically for recent news articles using Serper.\",\n    tool=serper_tool_instance\n)\n</code></pre> </li> <li> <p>\u52a0\u5165 Agent\uff1a \u5c07\u5305\u88dd\u904e\u7684 <code>CrewaiTool</code> \u5be6\u4f8b\u52a0\u5165\u4f60\u7684 Agent \u7684 <code>tools</code> \u6e05\u55ae\u4e2d\u3002</p> <pre><code>from google.adk import Agent\n\n# Define the ADK agent\nmy_agent = Agent(\n    name=\"crewai_search_agent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Agent to find recent news using the Serper search tool.\",\n    instruction=\"I can find the latest news for you. What topic are you interested in?\",\n    tools=[adk_serper_tool] # Add the wrapped tool here\n)\n</code></pre> </li> </ol>"},{"location":"tools/third-party-tools/#serper-api","title":"\u5b8c\u6574\u7bc4\u4f8b\uff1aSerper API","text":"<p>\u4ee5\u4e0b\u662f\u7d50\u5408\u4e0a\u8ff0\u6b65\u9a5f\uff0c\u4f7f\u7528 CrewAI Serper API \u641c\u5c0b\u5de5\u5177\u4f86\u5efa\u7acb\u4e26\u57f7\u884c agent \u7684\u5b8c\u6574\u7a0b\u5f0f\u78bc\u3002</p> <pre><code># Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nfrom google.adk import Agent, Runner\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.tools.crewai_tool import CrewaiTool\nfrom google.genai import types\nfrom crewai_tools import SerperDevTool\n\n\n# Constants\nAPP_NAME = \"news_app\"\nUSER_ID = \"user1234\"\nSESSION_ID = \"1234\"\n\n# Ensure SERPER_API_KEY is set in your environment\nif not os.getenv(\"SERPER_API_KEY\"):\n    print(\"Warning: SERPER_API_KEY environment variable not set.\")\n\nserper_tool_instance = SerperDevTool(\n    n_results=10,\n    save_file=False,\n    search_type=\"news\",\n)\n\nadk_serper_tool = CrewaiTool(\n    name=\"InternetNewsSearch\",\n    description=\"Searches the internet specifically for recent news articles using Serper.\",\n    tool=serper_tool_instance\n)\n\nserper_agent = Agent(\n    name=\"basic_search_agent\",\n    model=\"gemini-2.0-flash\",\n    description=\"Agent to answer questions using Google Search.\",\n    instruction=\"I can answer your questions by searching the internet. Just ask me anything!\",\n    # Add the Serper tool\n    tools=[adk_serper_tool]\n)\n\n# Session and Runner\nasync def setup_session_and_runner():\n    session_service = InMemorySessionService()\n    session = await session_service.create_session(app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID)\n    runner = Runner(agent=serper_agent, app_name=APP_NAME, session_service=session_service)\n    return session, runner\n\n\n# Agent Interaction\nasync def call_agent_async(query):\n    content = types.Content(role='user', parts=[types.Part(text=query)])\n    session, runner = await setup_session_and_runner()\n    events = runner.run_async(user_id=USER_ID, session_id=SESSION_ID, new_message=content)\n\n    async for event in events:\n        if event.is_final_response():\n            final_response = event.content.parts[0].text\n            print(\"Agent Response: \", final_response)\n\n# Note: In Colab, you can directly use 'await' at the top level.\n# If running this code as a standalone Python script, you'll need to use asyncio.run() or manage the event loop.\nawait call_agent_async(\"what's the latest news on AI Agents?\")\n</code></pre>"},{"location":"tutorials/","title":"ADK \u6559\u5b78\u6307\u5357\uff01","text":"<p>\u900f\u904e\u6211\u5011\u7cbe\u5fc3\u6574\u7406\u7684\u5be6\u7528\u6307\u5357\uff0c\u958b\u59cb\u9ad4\u9a57 Agent Development Kit (ADK) \u7684\u5f37\u5927\u529f\u80fd\u3002\u9019\u4e9b\u6559\u5b78\u4ee5\u7c21\u55ae\u3001\u5faa\u5e8f\u6f38\u9032\u7684\u65b9\u5f0f\u8a2d\u8a08\uff0c\u5c07\u5e36\u9818\u4f60\u4e00\u6b65\u6b65\u8a8d\u8b58\u5404\u7a2e ADK \u7684\u529f\u80fd\u8207\u7279\u6027\u3002</p> <p>\u9019\u7a2e\u5b78\u7fd2\u65b9\u5f0f\u8b93\u4f60\u80fd\u5920\u5faa\u5e8f\u6f38\u9032\u5730\u5b78\u7fd2\u8207\u5be6\u4f5c\u2014\u2014\u5f9e\u57fa\u790e\u6982\u5ff5\u51fa\u767c\uff0c\u9010\u6b65\u6311\u6230\u66f4\u9032\u968e\u7684 agent \u958b\u767c\u6280\u5de7\u3002\u4f60\u5c07\u63a2\u7d22\u5982\u4f55\u5728\u5404\u7a2e\u61c9\u7528\u60c5\u5883\u4e2d\u6709\u6548\u904b\u7528\u9019\u4e9b\u529f\u80fd\uff0c\u9032\u800c\u904b\u7528 ADK \u6253\u9020\u5c6c\u65bc\u4f60\u81ea\u5df1\u7684\u9ad8\u968e\u667a\u6167\u578b agent \u61c9\u7528\u3002\u6b61\u8fce\u700f\u89bd\u4e0b\u65b9\u6559\u5b78\u96c6\uff0c\u795d\u4f60\u958b\u767c\u9806\u5229\uff1a</p> <ul> <li> <p> Agent Team</p> <p>\u5b78\u7fd2\u5982\u4f55\u6253\u9020\u4e00\u500b\u667a\u6167\u578b\u591a agent \u5929\u6c23\u6a5f\u5668\u4eba\uff0c\u4e26\u638c\u63e1 Agent Development Kit (ADK) \u7684\u95dc\u9375\u529f\u80fd\uff1a\u5b9a\u7fa9 tools\u3001\u7d50\u5408\u591a\u500b\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\uff08\u5982 Gemini\u3001GPT\u3001Claude\uff09\u8207 LiteLLM\u3001\u5354\u8abf agent \u4e4b\u9593\u7684\u4efb\u52d9\u5206\u5de5\u3001\u900f\u904e session state \u52a0\u5165\u8a18\u61b6\u529f\u80fd\uff0c\u4ee5\u53ca\u900f\u904e Callbacks \u5f37\u5316\u5b89\u5168\u6027\u3002</p> <p> \u5f9e\u9019\u88e1\u958b\u59cb\u5b78\u7fd2</p> </li> </ul>"},{"location":"tutorials/agent-team.en/","title":"Build Your First Intelligent Agent Team: A Progressive Weather Bot with ADK","text":"Open in Colab Share to: <p>This tutorial extends from the Quickstart example for Agent Development Kit. Now, you're ready to dive deeper and construct a more sophisticated, multi-agent system.</p> <p>We'll embark on building a Weather Bot agent team, progressively layering advanced features onto a simple foundation. Starting with a single agent that can look up weather, we will incrementally add capabilities like:</p> <ul> <li>Leveraging different AI models (Gemini, GPT, Claude).</li> <li>Designing specialized sub-agents for distinct tasks (like greetings and farewells).</li> <li>Enabling intelligent delegation between agents.</li> <li>Giving agents memory using persistent session state.</li> <li>Implementing crucial safety guardrails using callbacks.</li> </ul> <p>Why a Weather Bot Team?</p> <p>This use case, while seemingly simple, provides a practical and relatable canvas to explore core ADK concepts essential for building complex, real-world agentic applications. You'll learn how to structure interactions, manage state, ensure safety, and orchestrate multiple AI \"brains\" working together.</p> <p>What is ADK Again?</p> <p>As a reminder, ADK is a Python framework designed to streamline the development of applications powered by Large Language Models (LLMs). It offers robust building blocks for creating agents that can reason, plan, utilize tools, interact dynamically with users, and collaborate effectively within a team.</p> <p>In this advanced tutorial, you will master:</p> <ul> <li>\u2705 Tool Definition &amp; Usage: Crafting Python functions (<code>tools</code>) that grant agents specific abilities (like fetching data) and instructing agents on how to use them effectively.</li> <li>\u2705 Multi-LLM Flexibility: Configuring agents to utilize various leading LLMs (Gemini, GPT-4o, Claude Sonnet) via LiteLLM integration, allowing you to choose the best model for each task.</li> <li>\u2705 Agent Delegation &amp; Collaboration: Designing specialized sub-agents and enabling automatic routing (<code>auto flow</code>) of user requests to the most appropriate agent within a team.</li> <li>\u2705 Session State for Memory: Utilizing <code>Session State</code> and <code>ToolContext</code> to enable agents to remember information across conversational turns, leading to more contextual interactions.</li> <li>\u2705 Safety Guardrails with Callbacks: Implementing <code>before_model_callback</code> and <code>before_tool_callback</code> to inspect, modify, or block requests/tool usage based on predefined rules, enhancing application safety and control.</li> </ul> <p>End State Expectation:</p> <p>By completing this tutorial, you will have built a functional multi-agent Weather Bot system. This system will not only provide weather information but also handle conversational niceties, remember the last city checked, and operate within defined safety boundaries, all orchestrated using ADK.</p> <p>Prerequisites:</p> <ul> <li>\u2705 Solid understanding of Python programming.</li> <li>\u2705 Familiarity with Large Language Models (LLMs), APIs, and the concept of agents.</li> <li>\u2757 Crucially: Completion of the ADK Quickstart tutorial(s) or equivalent foundational knowledge of ADK basics (Agent, Runner, SessionService, basic Tool usage). This tutorial builds directly upon those concepts.</li> <li>\u2705 API Keys for the LLMs you intend to use (e.g., Google AI Studio for Gemini, OpenAI Platform, Anthropic Console).</li> </ul> <p>Note on Execution Environment:</p> <p>This tutorial is structured for interactive notebook environments like Google Colab, Colab Enterprise, or Jupyter notebooks. Please keep the following in mind:</p> <ul> <li>Running Async Code: Notebook environments handle asynchronous code differently. You'll see examples using <code>await</code> (suitable when an event loop is already running, common in notebooks) or <code>asyncio.run()</code> (often needed when running as a standalone <code>.py</code> script or in specific notebook setups). The code blocks provide guidance for both scenarios.</li> <li>Manual Runner/Session Setup: The steps involve explicitly creating <code>Runner</code> and <code>SessionService</code> instances. This approach is shown because it gives you fine-grained control over the agent's execution lifecycle, session management, and state persistence.</li> </ul> <p>Alternative: Using ADK's Built-in Tools (Web UI / CLI / API Server)</p> <p>If you prefer a setup that handles the runner and session management automatically using ADK's standard tools, you can find the equivalent code structured for that purpose here. That version is designed to be run directly with commands like <code>adk web</code> (for a web UI), <code>adk run</code> (for CLI interaction), or <code>adk api_server</code> (to expose an API). Please follow the <code>README.md</code> instructions provided in that alternative resource.</p> <p>Ready to build your agent team? Let's dive in!</p> <p>Note: This tutorial works with adk version 1.0.0 and above</p> <pre><code># @title Step 0: Setup and Installation\n# Install ADK and LiteLLM for multi-model support\n\n!pip install google-adk -q\n!pip install litellm -q\n\nprint(\"Installation complete.\")\n</code></pre> <pre><code># @title Import necessary libraries\nimport os\nimport asyncio\nfrom google.adk.agents import Agent\nfrom google.adk.models.lite_llm import LiteLlm # For multi-model support\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.runners import Runner\nfrom google.genai import types # For creating message Content/Parts\n\nimport warnings\n# Ignore all warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport logging\nlogging.basicConfig(level=logging.ERROR)\n\nprint(\"Libraries imported.\")\n</code></pre> <pre><code># @title Configure API Keys (Replace with your actual keys!)\n\n# --- IMPORTANT: Replace placeholders with your real API keys ---\n\n# Gemini API Key (Get from Google AI Studio: https://aistudio.google.com/app/apikey)\nos.environ[\"GOOGLE_API_KEY\"] = \"YOUR_GOOGLE_API_KEY\" # &lt;--- REPLACE\n\n# [Optional]\n# OpenAI API Key (Get from OpenAI Platform: https://platform.openai.com/api-keys)\nos.environ['OPENAI_API_KEY'] = 'YOUR_OPENAI_API_KEY' # &lt;--- REPLACE\n\n# [Optional]\n# Anthropic API Key (Get from Anthropic Console: https://console.anthropic.com/settings/keys)\nos.environ['ANTHROPIC_API_KEY'] = 'YOUR_ANTHROPIC_API_KEY' # &lt;--- REPLACE\n\n# --- Verify Keys (Optional Check) ---\nprint(\"API Keys Set:\")\nprint(f\"Google API Key set: {'Yes' if os.environ.get('GOOGLE_API_KEY') and os.environ['GOOGLE_API_KEY'] != 'YOUR_GOOGLE_API_KEY' else 'No (REPLACE PLACEHOLDER!)'}\")\nprint(f\"OpenAI API Key set: {'Yes' if os.environ.get('OPENAI_API_KEY') and os.environ['OPENAI_API_KEY'] != 'YOUR_OPENAI_API_KEY' else 'No (REPLACE PLACEHOLDER!)'}\")\nprint(f\"Anthropic API Key set: {'Yes' if os.environ.get('ANTHROPIC_API_KEY') and os.environ['ANTHROPIC_API_KEY'] != 'YOUR_ANTHROPIC_API_KEY' else 'No (REPLACE PLACEHOLDER!)'}\")\n\n# Configure ADK to use API keys directly (not Vertex AI for this multi-model setup)\nos.environ[\"GOOGLE_GENAI_USE_VERTEXAI\"] = \"False\"\n\n\n# @markdown **Security Note:** It's best practice to manage API keys securely (e.g., using Colab Secrets or environment variables) rather than hardcoding them directly in the notebook. Replace the placeholder strings above.\n</code></pre> <pre><code># --- Define Model Constants for easier use ---\n\n# More supported models can be referenced here: https://ai.google.dev/gemini-api/docs/models#model-variations\nMODEL_GEMINI_2_0_FLASH = \"gemini-2.0-flash\"\n\n# More supported models can be referenced here: https://docs.litellm.ai/docs/providers/openai#openai-chat-completion-models\nMODEL_GPT_4O = \"openai/gpt-4.1\" # You can also try: gpt-4.1-mini, gpt-4o etc.\n\n# More supported models can be referenced here: https://docs.litellm.ai/docs/providers/anthropic\nMODEL_CLAUDE_SONNET = \"anthropic/claude-sonnet-4-20250514\" # You can also try: claude-opus-4-20250514 , claude-3-7-sonnet-20250219 etc\n\nprint(\"\\nEnvironment configured.\")\n</code></pre>"},{"location":"tutorials/agent-team.en/#step-1-your-first-agent-basic-weather-lookup","title":"Step 1: Your First Agent - Basic Weather Lookup","text":"<p>Let's begin by building the fundamental component of our Weather Bot: a single agent capable of performing a specific task \u2013 looking up weather information. This involves creating two core pieces:</p> <ol> <li>A Tool: A Python function that equips the agent with the ability to fetch weather data.  </li> <li>An Agent: The AI \"brain\" that understands the user's request, knows it has a weather tool, and decides when and how to use it.</li> </ol> <p>1. Define the Tool (<code>get_weather</code>)</p> <p>In ADK, Tools are the building blocks that give agents concrete capabilities beyond just text generation. They are typically regular Python functions that perform specific actions, like calling an API, querying a database, or performing calculations.</p> <p>Our first tool will provide a mock weather report. This allows us to focus on the agent structure without needing external API keys yet. Later, you could easily swap this mock function with one that calls a real weather service.</p> <p>Key Concept: Docstrings are Crucial! The agent's LLM relies heavily on the function's docstring to understand:</p> <ul> <li>What the tool does.  </li> <li>When to use it.  </li> <li>What arguments it requires (<code>city: str</code>).  </li> <li>What information it returns.</li> </ul> <p>Best Practice: Write clear, descriptive, and accurate docstrings for your tools. This is essential for the LLM to use the tool correctly.</p> <pre><code># @title Define the get_weather Tool\ndef get_weather(city: str) -&gt; dict:\n    \"\"\"Retrieves the current weather report for a specified city.\n\n    Args:\n        city (str): The name of the city (e.g., \"New York\", \"London\", \"Tokyo\").\n\n    Returns:\n        dict: A dictionary containing the weather information.\n              Includes a 'status' key ('success' or 'error').\n              If 'success', includes a 'report' key with weather details.\n              If 'error', includes an 'error_message' key.\n    \"\"\"\n    print(f\"--- Tool: get_weather called for city: {city} ---\") # Log tool execution\n    city_normalized = city.lower().replace(\" \", \"\") # Basic normalization\n\n    # Mock weather data\n    mock_weather_db = {\n        \"newyork\": {\"status\": \"success\", \"report\": \"The weather in New York is sunny with a temperature of 25\u00b0C.\"},\n        \"london\": {\"status\": \"success\", \"report\": \"It's cloudy in London with a temperature of 15\u00b0C.\"},\n        \"tokyo\": {\"status\": \"success\", \"report\": \"Tokyo is experiencing light rain and a temperature of 18\u00b0C.\"},\n    }\n\n    if city_normalized in mock_weather_db:\n        return mock_weather_db[city_normalized]\n    else:\n        return {\"status\": \"error\", \"error_message\": f\"Sorry, I don't have weather information for '{city}'.\"}\n\n# Example tool usage (optional test)\nprint(get_weather(\"New York\"))\nprint(get_weather(\"Paris\"))\n</code></pre> <p>2. Define the Agent (<code>weather_agent</code>)</p> <p>Now, let's create the Agent itself. An <code>Agent</code> in ADK orchestrates the interaction between the user, the LLM, and the available tools.</p> <p>We configure it with several key parameters:</p> <ul> <li><code>name</code>: A unique identifier for this agent (e.g., \"weather_agent_v1\").  </li> <li><code>model</code>: Specifies which LLM to use (e.g., <code>MODEL_GEMINI_2_0_FLASH</code>). We'll start with a specific Gemini model.  </li> <li><code>description</code>: A concise summary of the agent's overall purpose. This becomes crucial later when other agents need to decide whether to delegate tasks to this agent.  </li> <li><code>instruction</code>: Detailed guidance for the LLM on how to behave, its persona, its goals, and specifically how and when to utilize its assigned <code>tools</code>.  </li> <li><code>tools</code>: A list containing the actual Python tool functions the agent is allowed to use (e.g., <code>[get_weather]</code>).</li> </ul> <p>Best Practice: Provide clear and specific <code>instruction</code> prompts. The more detailed the instructions, the better the LLM can understand its role and how to use its tools effectively. Be explicit about error handling if needed.</p> <p>Best Practice: Choose descriptive <code>name</code> and <code>description</code> values. These are used internally by ADK and are vital for features like automatic delegation (covered later).</p> <pre><code># @title Define the Weather Agent\n# Use one of the model constants defined earlier\nAGENT_MODEL = MODEL_GEMINI_2_0_FLASH # Starting with Gemini\n\nweather_agent = Agent(\n    name=\"weather_agent_v1\",\n    model=AGENT_MODEL, # Can be a string for Gemini or a LiteLlm object\n    description=\"Provides weather information for specific cities.\",\n    instruction=\"You are a helpful weather assistant. \"\n                \"When the user asks for the weather in a specific city, \"\n                \"use the 'get_weather' tool to find the information. \"\n                \"If the tool returns an error, inform the user politely. \"\n                \"If the tool is successful, present the weather report clearly.\",\n    tools=[get_weather], # Pass the function directly\n)\n\nprint(f\"Agent '{weather_agent.name}' created using model '{AGENT_MODEL}'.\")\n</code></pre> <p>3. Setup Runner and Session Service</p> <p>To manage conversations and execute the agent, we need two more components:</p> <ul> <li><code>SessionService</code>: Responsible for managing conversation history and state for different users and sessions. The <code>InMemorySessionService</code> is a simple implementation that stores everything in memory, suitable for testing and simple applications. It keeps track of the messages exchanged. We'll explore state persistence more in Step 4.  </li> <li><code>Runner</code>: The engine that orchestrates the interaction flow. It takes user input, routes it to the appropriate agent, manages calls to the LLM and tools based on the agent's logic, handles session updates via the <code>SessionService</code>, and yields events representing the progress of the interaction.</li> </ul> <pre><code># @title Setup Session Service and Runner\n\n# --- Session Management ---\n# Key Concept: SessionService stores conversation history &amp; state.\n# InMemorySessionService is simple, non-persistent storage for this tutorial.\nsession_service = InMemorySessionService()\n\n# Define constants for identifying the interaction context\nAPP_NAME = \"weather_tutorial_app\"\nUSER_ID = \"user_1\"\nSESSION_ID = \"session_001\" # Using a fixed ID for simplicity\n\n# Create the specific session where the conversation will happen\nsession = await session_service.create_session(\n    app_name=APP_NAME,\n    user_id=USER_ID,\n    session_id=SESSION_ID\n)\nprint(f\"Session created: App='{APP_NAME}', User='{USER_ID}', Session='{SESSION_ID}'\")\n\n# --- Runner ---\n# Key Concept: Runner orchestrates the agent execution loop.\nrunner = Runner(\n    agent=weather_agent, # The agent we want to run\n    app_name=APP_NAME,   # Associates runs with our app\n    session_service=session_service # Uses our session manager\n)\nprint(f\"Runner created for agent '{runner.agent.name}'.\")\n</code></pre> <p>4. Interact with the Agent</p> <p>We need a way to send messages to our agent and receive its responses. Since LLM calls and tool executions can take time, ADK's <code>Runner</code> operates asynchronously.</p> <p>We'll define an <code>async</code> helper function (<code>call_agent_async</code>) that:</p> <ol> <li>Takes a user query string.  </li> <li>Packages it into the ADK <code>Content</code> format.  </li> <li>Calls <code>runner.run_async</code>, providing the user/session context and the new message.  </li> <li>Iterates through the Events yielded by the runner. Events represent steps in the agent's execution (e.g., tool call requested, tool result received, intermediate LLM thought, final response).  </li> <li>Identifies and prints the final response event using <code>event.is_final_response()</code>.</li> </ol> <p>Why <code>async</code>? Interactions with LLMs and potentially tools (like external APIs) are I/O-bound operations. Using <code>asyncio</code> allows the program to handle these operations efficiently without blocking execution.</p> <pre><code># @title Define Agent Interaction Function\n\nfrom google.genai import types # For creating message Content/Parts\n\nasync def call_agent_async(query: str, runner, user_id, session_id):\n  \"\"\"Sends a query to the agent and prints the final response.\"\"\"\n  print(f\"\\n&gt;&gt;&gt; User Query: {query}\")\n\n  # Prepare the user's message in ADK format\n  content = types.Content(role='user', parts=[types.Part(text=query)])\n\n  final_response_text = \"Agent did not produce a final response.\" # Default\n\n  # Key Concept: run_async executes the agent logic and yields Events.\n  # We iterate through events to find the final answer.\n  async for event in runner.run_async(user_id=user_id, session_id=session_id, new_message=content):\n      # You can uncomment the line below to see *all* events during execution\n      # print(f\"  [Event] Author: {event.author}, Type: {type(event).__name__}, Final: {event.is_final_response()}, Content: {event.content}\")\n\n      # Key Concept: is_final_response() marks the concluding message for the turn.\n      if event.is_final_response():\n          if event.content and event.content.parts:\n             # Assuming text response in the first part\n             final_response_text = event.content.parts[0].text\n          elif event.actions and event.actions.escalate: # Handle potential errors/escalations\n             final_response_text = f\"Agent escalated: {event.error_message or 'No specific message.'}\"\n          # Add more checks here if needed (e.g., specific error codes)\n          break # Stop processing events once the final response is found\n\n  print(f\"&lt;&lt;&lt; Agent Response: {final_response_text}\")\n</code></pre> <p>5. Run the Conversation</p> <p>Finally, let's test our setup by sending a few queries to the agent. We wrap our <code>async</code> calls in a main <code>async</code> function and run it using <code>await</code>.</p> <p>Watch the output:</p> <ul> <li>See the user queries.  </li> <li>Notice the <code>--- Tool: get_weather called... ---</code> logs when the agent uses the tool.  </li> <li>Observe the agent's final responses, including how it handles the case where weather data isn't available (for Paris).</li> </ul> <pre><code># @title Run the Initial Conversation\n\n# We need an async function to await our interaction helper\nasync def run_conversation():\n    await call_agent_async(\"What is the weather like in London?\",\n                                       runner=runner,\n                                       user_id=USER_ID,\n                                       session_id=SESSION_ID)\n\n    await call_agent_async(\"How about Paris?\",\n                                       runner=runner,\n                                       user_id=USER_ID,\n                                       session_id=SESSION_ID) # Expecting the tool's error message\n\n    await call_agent_async(\"Tell me the weather in New York\",\n                                       runner=runner,\n                                       user_id=USER_ID,\n                                       session_id=SESSION_ID)\n\n# Execute the conversation using await in an async context (like Colab/Jupyter)\nawait run_conversation()\n\n# --- OR ---\n\n# Uncomment the following lines if running as a standard Python script (.py file):\n# import asyncio\n# if __name__ == \"__main__\":\n#     try:\n#         asyncio.run(run_conversation())\n#     except Exception as e:\n#         print(f\"An error occurred: {e}\")\n</code></pre> <p>Congratulations! You've successfully built and interacted with your first ADK agent. It understands the user's request, uses a tool to find information, and responds appropriately based on the tool's result.</p> <p>In the next step, we'll explore how to easily switch the underlying Language Model powering this agent.</p>"},{"location":"tutorials/agent-team.en/#step-2-going-multi-model-with-litellm-optional","title":"Step 2: Going Multi-Model with LiteLLM [Optional]","text":"<p>In Step 1, we built a functional Weather Agent powered by a specific Gemini model. While effective, real-world applications often benefit from the flexibility to use different Large Language Models (LLMs). Why?</p> <ul> <li>Performance: Some models excel at specific tasks (e.g., coding, reasoning, creative writing).</li> <li>Cost: Different models have varying price points.</li> <li>Capabilities: Models offer diverse features, context window sizes, and fine-tuning options.</li> <li>Availability/Redundancy: Having alternatives ensures your application remains functional even if one provider experiences issues.</li> </ul> <p>ADK makes switching between models seamless through its integration with the LiteLLM library. LiteLLM acts as a consistent interface to over 100 different LLMs.</p> <p>In this step, we will:</p> <ol> <li>Learn how to configure an ADK <code>Agent</code> to use models from providers like OpenAI (GPT) and Anthropic (Claude) using the <code>LiteLlm</code> wrapper.</li> <li>Define, configure (with their own sessions and runners), and immediately test instances of our Weather Agent, each backed by a different LLM.</li> <li>Interact with these different agents to observe potential variations in their responses, even when using the same underlying tool.</li> </ol> <p>1. Import <code>LiteLlm</code></p> <p>We imported this during the initial setup (Step 0), but it's the key component for multi-model support:</p> <pre><code># @title 1. Import LiteLlm\nfrom google.adk.models.lite_llm import LiteLlm\n</code></pre> <p>2. Define and Test Multi-Model Agents</p> <p>Instead of passing only a model name string (which defaults to Google's Gemini models), we wrap the desired model identifier string within the <code>LiteLlm</code> class.</p> <ul> <li>Key Concept: <code>LiteLlm</code> Wrapper: The <code>LiteLlm(model=\"provider/model_name\")</code> syntax tells ADK to route requests for this agent through the LiteLLM library to the specified model provider.</li> </ul> <p>Make sure you have configured the necessary API keys for OpenAI and Anthropic in Step 0. We'll use the <code>call_agent_async</code> function (defined earlier, which now accepts <code>runner</code>, <code>user_id</code>, and <code>session_id</code>) to interact with each agent immediately after its setup.</p> <p>Each block below will:</p> <ul> <li>Define the agent using a specific LiteLLM model (<code>MODEL_GPT_4O</code> or <code>MODEL_CLAUDE_SONNET</code>).</li> <li>Create a new, separate <code>InMemorySessionService</code> and session specifically for that agent's test run. This keeps the conversation histories isolated for this demonstration.</li> <li>Create a <code>Runner</code> configured for the specific agent and its session service.</li> <li>Immediately call <code>call_agent_async</code> to send a query and test the agent.</li> </ul> <p>Best Practice: Use constants for model names (like <code>MODEL_GPT_4O</code>, <code>MODEL_CLAUDE_SONNET</code> defined in Step 0) to avoid typos and make code easier to manage.</p> <p>Error Handling: We wrap the agent definitions in <code>try...except</code> blocks. This prevents the entire code cell from failing if an API key for a specific provider is missing or invalid, allowing the tutorial to proceed with the models that are configured.</p> <p>First, let's create and test the agent using OpenAI's GPT-4o.</p> <pre><code># @title Define and Test GPT Agent\n\n# Make sure 'get_weather' function from Step 1 is defined in your environment.\n# Make sure 'call_agent_async' is defined from earlier.\n\n# --- Agent using GPT-4o ---\nweather_agent_gpt = None # Initialize to None\nrunner_gpt = None      # Initialize runner to None\n\ntry:\n    weather_agent_gpt = Agent(\n        name=\"weather_agent_gpt\",\n        # Key change: Wrap the LiteLLM model identifier\n        model=LiteLlm(model=MODEL_GPT_4O),\n        description=\"Provides weather information (using GPT-4o).\",\n        instruction=\"You are a helpful weather assistant powered by GPT-4o. \"\n                    \"Use the 'get_weather' tool for city weather requests. \"\n                    \"Clearly present successful reports or polite error messages based on the tool's output status.\",\n        tools=[get_weather], # Re-use the same tool\n    )\n    print(f\"Agent '{weather_agent_gpt.name}' created using model '{MODEL_GPT_4O}'.\")\n\n    # InMemorySessionService is simple, non-persistent storage for this tutorial.\n    session_service_gpt = InMemorySessionService() # Create a dedicated service\n\n    # Define constants for identifying the interaction context\n    APP_NAME_GPT = \"weather_tutorial_app_gpt\" # Unique app name for this test\n    USER_ID_GPT = \"user_1_gpt\"\n    SESSION_ID_GPT = \"session_001_gpt\" # Using a fixed ID for simplicity\n\n    # Create the specific session where the conversation will happen\n    session_gpt = await session_service_gpt.create_session(\n        app_name=APP_NAME_GPT,\n        user_id=USER_ID_GPT,\n        session_id=SESSION_ID_GPT\n    )\n    print(f\"Session created: App='{APP_NAME_GPT}', User='{USER_ID_GPT}', Session='{SESSION_ID_GPT}'\")\n\n    # Create a runner specific to this agent and its session service\n    runner_gpt = Runner(\n        agent=weather_agent_gpt,\n        app_name=APP_NAME_GPT,       # Use the specific app name\n        session_service=session_service_gpt # Use the specific session service\n        )\n    print(f\"Runner created for agent '{runner_gpt.agent.name}'.\")\n\n    # --- Test the GPT Agent ---\n    print(\"\\n--- Testing GPT Agent ---\")\n    # Ensure call_agent_async uses the correct runner, user_id, session_id\n    await call_agent_async(query = \"What's the weather in Tokyo?\",\n                           runner=runner_gpt,\n                           user_id=USER_ID_GPT,\n                           session_id=SESSION_ID_GPT)\n    # --- OR ---\n\n    # Uncomment the following lines if running as a standard Python script (.py file):\n    # import asyncio\n    # if __name__ == \"__main__\":\n    #     try:\n    #         asyncio.run(call_agent_async(query = \"What's the weather in Tokyo?\",\n    #                      runner=runner_gpt,\n    #                       user_id=USER_ID_GPT,\n    #                       session_id=SESSION_ID_GPT)\n    #     except Exception as e:\n    #         print(f\"An error occurred: {e}\")\n\nexcept Exception as e:\n    print(f\"\u274c Could not create or run GPT agent '{MODEL_GPT_4O}'. Check API Key and model name. Error: {e}\")\n</code></pre> <p>Next, we'll do the same for Anthropic's Claude Sonnet.</p> <pre><code># @title Define and Test Claude Agent\n\n# Make sure 'get_weather' function from Step 1 is defined in your environment.\n# Make sure 'call_agent_async' is defined from earlier.\n\n# --- Agent using Claude Sonnet ---\nweather_agent_claude = None # Initialize to None\nrunner_claude = None      # Initialize runner to None\n\ntry:\n    weather_agent_claude = Agent(\n        name=\"weather_agent_claude\",\n        # Key change: Wrap the LiteLLM model identifier\n        model=LiteLlm(model=MODEL_CLAUDE_SONNET),\n        description=\"Provides weather information (using Claude Sonnet).\",\n        instruction=\"You are a helpful weather assistant powered by Claude Sonnet. \"\n                    \"Use the 'get_weather' tool for city weather requests. \"\n                    \"Analyze the tool's dictionary output ('status', 'report'/'error_message'). \"\n                    \"Clearly present successful reports or polite error messages.\",\n        tools=[get_weather], # Re-use the same tool\n    )\n    print(f\"Agent '{weather_agent_claude.name}' created using model '{MODEL_CLAUDE_SONNET}'.\")\n\n    # InMemorySessionService is simple, non-persistent storage for this tutorial.\n    session_service_claude = InMemorySessionService() # Create a dedicated service\n\n    # Define constants for identifying the interaction context\n    APP_NAME_CLAUDE = \"weather_tutorial_app_claude\" # Unique app name\n    USER_ID_CLAUDE = \"user_1_claude\"\n    SESSION_ID_CLAUDE = \"session_001_claude\" # Using a fixed ID for simplicity\n\n    # Create the specific session where the conversation will happen\n    session_claude = await session_service_claude.create_session(\n        app_name=APP_NAME_CLAUDE,\n        user_id=USER_ID_CLAUDE,\n        session_id=SESSION_ID_CLAUDE\n    )\n    print(f\"Session created: App='{APP_NAME_CLAUDE}', User='{USER_ID_CLAUDE}', Session='{SESSION_ID_CLAUDE}'\")\n\n    # Create a runner specific to this agent and its session service\n    runner_claude = Runner(\n        agent=weather_agent_claude,\n        app_name=APP_NAME_CLAUDE,       # Use the specific app name\n        session_service=session_service_claude # Use the specific session service\n        )\n    print(f\"Runner created for agent '{runner_claude.agent.name}'.\")\n\n    # --- Test the Claude Agent ---\n    print(\"\\n--- Testing Claude Agent ---\")\n    # Ensure call_agent_async uses the correct runner, user_id, session_id\n    await call_agent_async(query = \"Weather in London please.\",\n                           runner=runner_claude,\n                           user_id=USER_ID_CLAUDE,\n                           session_id=SESSION_ID_CLAUDE)\n\n    # --- OR ---\n\n    # Uncomment the following lines if running as a standard Python script (.py file):\n    # import asyncio\n    # if __name__ == \"__main__\":\n    #     try:\n    #         asyncio.run(call_agent_async(query = \"Weather in London please.\",\n    #                      runner=runner_claude,\n    #                       user_id=USER_ID_CLAUDE,\n    #                       session_id=SESSION_ID_CLAUDE)\n    #     except Exception as e:\n    #         print(f\"An error occurred: {e}\")\n\n\nexcept Exception as e:\n    print(f\"\u274c Could not create or run Claude agent '{MODEL_CLAUDE_SONNET}'. Check API Key and model name. Error: {e}\")\n</code></pre> <p>Observe the output carefully from both code blocks. You should see:</p> <ol> <li>Each agent (<code>weather_agent_gpt</code>, <code>weather_agent_claude</code>) is created successfully (if API keys are valid).</li> <li>A dedicated session and runner are set up for each.</li> <li>Each agent correctly identifies the need to use the <code>get_weather</code> tool when processing the query (you'll see the <code>--- Tool: get_weather called... ---</code> log).</li> <li>The underlying tool logic remains identical, always returning our mock data.</li> <li>However, the final textual response generated by each agent might differ slightly in phrasing, tone, or formatting. This is because the instruction prompt is interpreted and executed by different LLMs (GPT-4o vs. Claude Sonnet).</li> </ol> <p>This step demonstrates the power and flexibility ADK + LiteLLM provide. You can easily experiment with and deploy agents using various LLMs while keeping your core application logic (tools, fundamental agent structure) consistent.</p> <p>In the next step, we'll move beyond a single agent and build a small team where agents can delegate tasks to each other!</p>"},{"location":"tutorials/agent-team.en/#step-3-building-an-agent-team-delegation-for-greetings-farewells","title":"Step 3: Building an Agent Team - Delegation for Greetings &amp; Farewells","text":"<p>In Steps 1 and 2, we built and experimented with a single agent focused solely on weather lookups. While effective for its specific task, real-world applications often involve handling a wider variety of user interactions. We could keep adding more tools and complex instructions to our single weather agent, but this can quickly become unmanageable and less efficient.</p> <p>A more robust approach is to build an Agent Team. This involves:</p> <ol> <li>Creating multiple, specialized agents, each designed for a specific capability (e.g., one for weather, one for greetings, one for calculations).  </li> <li>Designating a root agent (or orchestrator) that receives the initial user request.  </li> <li>Enabling the root agent to delegate the request to the most appropriate specialized sub-agent based on the user's intent.</li> </ol> <p>Why build an Agent Team?</p> <ul> <li>Modularity: Easier to develop, test, and maintain individual agents.  </li> <li>Specialization: Each agent can be fine-tuned (instructions, model choice) for its specific task.  </li> <li>Scalability: Simpler to add new capabilities by adding new agents.  </li> <li>Efficiency: Allows using potentially simpler/cheaper models for simpler tasks (like greetings).</li> </ul> <p>In this step, we will:</p> <ol> <li>Define simple tools for handling greetings (<code>say_hello</code>) and farewells (<code>say_goodbye</code>).  </li> <li>Create two new specialized sub-agents: <code>greeting_agent</code> and <code>farewell_agent</code>.  </li> <li>Update our main weather agent (<code>weather_agent_v2</code>) to act as the root agent.  </li> <li>Configure the root agent with its sub-agents, enabling automatic delegation.  </li> <li>Test the delegation flow by sending different types of requests to the root agent.</li> </ol> <p>1. Define Tools for Sub-Agents</p> <p>First, let's create the simple Python functions that will serve as tools for our new specialist agents. Remember, clear docstrings are vital for the agents that will use them.</p> <pre><code># @title Define Tools for Greeting and Farewell Agents\nfrom typing import Optional # Make sure to import Optional\n\n# Ensure 'get_weather' from Step 1 is available if running this step independently.\n# def get_weather(city: str) -&gt; dict: ... (from Step 1)\n\ndef say_hello(name: Optional[str] = None) -&gt; str:\n    \"\"\"Provides a simple greeting. If a name is provided, it will be used.\n\n    Args:\n        name (str, optional): The name of the person to greet. Defaults to a generic greeting if not provided.\n\n    Returns:\n        str: A friendly greeting message.\n    \"\"\"\n    if name:\n        greeting = f\"Hello, {name}!\"\n        print(f\"--- Tool: say_hello called with name: {name} ---\")\n    else:\n        greeting = \"Hello there!\" # Default greeting if name is None or not explicitly passed\n        print(f\"--- Tool: say_hello called without a specific name (name_arg_value: {name}) ---\")\n    return greeting\n\ndef say_goodbye() -&gt; str:\n    \"\"\"Provides a simple farewell message to conclude the conversation.\"\"\"\n    print(f\"--- Tool: say_goodbye called ---\")\n    return \"Goodbye! Have a great day.\"\n\nprint(\"Greeting and Farewell tools defined.\")\n\n# Optional self-test\nprint(say_hello(\"Alice\"))\nprint(say_hello()) # Test with no argument (should use default \"Hello there!\")\nprint(say_hello(name=None)) # Test with name explicitly as None (should use default \"Hello there!\")\n</code></pre> <p>2. Define the Sub-Agents (Greeting &amp; Farewell)</p> <p>Now, create the <code>Agent</code> instances for our specialists. Notice their highly focused <code>instruction</code> and, critically, their clear <code>description</code>. The <code>description</code> is the primary information the root agent uses to decide when to delegate to these sub-agents.</p> <p>Best Practice: Sub-agent <code>description</code> fields should accurately and concisely summarize their specific capability. This is crucial for effective automatic delegation.</p> <p>Best Practice: Sub-agent <code>instruction</code> fields should be tailored to their limited scope, telling them exactly what to do and what not to do (e.g., \"Your only task is...\").</p> <pre><code># @title Define Greeting and Farewell Sub-Agents\n\n# If you want to use models other than Gemini, Ensure LiteLlm is imported and API keys are set (from Step 0/2)\n# from google.adk.models.lite_llm import LiteLlm\n# MODEL_GPT_4O, MODEL_CLAUDE_SONNET etc. should be defined\n# Or else, continue to use: model = MODEL_GEMINI_2_0_FLASH\n\n# --- Greeting Agent ---\ngreeting_agent = None\ntry:\n    greeting_agent = Agent(\n        # Using a potentially different/cheaper model for a simple task\n        model = MODEL_GEMINI_2_0_FLASH,\n        # model=LiteLlm(model=MODEL_GPT_4O), # If you would like to experiment with other models\n        name=\"greeting_agent\",\n        instruction=\"You are the Greeting Agent. Your ONLY task is to provide a friendly greeting to the user. \"\n                    \"Use the 'say_hello' tool to generate the greeting. \"\n                    \"If the user provides their name, make sure to pass it to the tool. \"\n                    \"Do not engage in any other conversation or tasks.\",\n        description=\"Handles simple greetings and hellos using the 'say_hello' tool.\", # Crucial for delegation\n        tools=[say_hello],\n    )\n    print(f\"\u2705 Agent '{greeting_agent.name}' created using model '{greeting_agent.model}'.\")\nexcept Exception as e:\n    print(f\"\u274c Could not create Greeting agent. Check API Key ({greeting_agent.model}). Error: {e}\")\n\n# --- Farewell Agent ---\nfarewell_agent = None\ntry:\n    farewell_agent = Agent(\n        # Can use the same or a different model\n        model = MODEL_GEMINI_2_0_FLASH,\n        # model=LiteLlm(model=MODEL_GPT_4O), # If you would like to experiment with other models\n        name=\"farewell_agent\",\n        instruction=\"You are the Farewell Agent. Your ONLY task is to provide a polite goodbye message. \"\n                    \"Use the 'say_goodbye' tool when the user indicates they are leaving or ending the conversation \"\n                    \"(e.g., using words like 'bye', 'goodbye', 'thanks bye', 'see you'). \"\n                    \"Do not perform any other actions.\",\n        description=\"Handles simple farewells and goodbyes using the 'say_goodbye' tool.\", # Crucial for delegation\n        tools=[say_goodbye],\n    )\n    print(f\"\u2705 Agent '{farewell_agent.name}' created using model '{farewell_agent.model}'.\")\nexcept Exception as e:\n    print(f\"\u274c Could not create Farewell agent. Check API Key ({farewell_agent.model}). Error: {e}\")\n</code></pre> <p>3. Define the Root Agent (Weather Agent v2) with Sub-Agents</p> <p>Now, we upgrade our <code>weather_agent</code>. The key changes are:</p> <ul> <li>Adding the <code>sub_agents</code> parameter: We pass a list containing the <code>greeting_agent</code> and <code>farewell_agent</code> instances we just created.  </li> <li>Updating the <code>instruction</code>: We explicitly tell the root agent about its sub-agents and when it should delegate tasks to them.</li> </ul> <p>Key Concept: Automatic Delegation (Auto Flow) By providing the <code>sub_agents</code> list, ADK enables automatic delegation. When the root agent receives a user query, its LLM considers not only its own instructions and tools but also the <code>description</code> of each sub-agent. If the LLM determines that a query aligns better with a sub-agent's described capability (e.g., \"Handles simple greetings\"), it will automatically generate a special internal action to transfer control to that sub-agent for that turn. The sub-agent then processes the query using its own model, instructions, and tools.</p> <p>Best Practice: Ensure the root agent's instructions clearly guide its delegation decisions. Mention the sub-agents by name and describe the conditions under which delegation should occur.</p> <pre><code># @title Define the Root Agent with Sub-Agents\n\n# Ensure sub-agents were created successfully before defining the root agent.\n# Also ensure the original 'get_weather' tool is defined.\nroot_agent = None\nrunner_root = None # Initialize runner\n\nif greeting_agent and farewell_agent and 'get_weather' in globals():\n    # Let's use a capable Gemini model for the root agent to handle orchestration\n    root_agent_model = MODEL_GEMINI_2_0_FLASH\n\n    weather_agent_team = Agent(\n        name=\"weather_agent_v2\", # Give it a new version name\n        model=root_agent_model,\n        description=\"The main coordinator agent. Handles weather requests and delegates greetings/farewells to specialists.\",\n        instruction=\"You are the main Weather Agent coordinating a team. Your primary responsibility is to provide weather information. \"\n                    \"Use the 'get_weather' tool ONLY for specific weather requests (e.g., 'weather in London'). \"\n                    \"You have specialized sub-agents: \"\n                    \"1. 'greeting_agent': Handles simple greetings like 'Hi', 'Hello'. Delegate to it for these. \"\n                    \"2. 'farewell_agent': Handles simple farewells like 'Bye', 'See you'. Delegate to it for these. \"\n                    \"Analyze the user's query. If it's a greeting, delegate to 'greeting_agent'. If it's a farewell, delegate to 'farewell_agent'. \"\n                    \"If it's a weather request, handle it yourself using 'get_weather'. \"\n                    \"For anything else, respond appropriately or state you cannot handle it.\",\n        tools=[get_weather], # Root agent still needs the weather tool for its core task\n        # Key change: Link the sub-agents here!\n        sub_agents=[greeting_agent, farewell_agent]\n    )\n    print(f\"\u2705 Root Agent '{weather_agent_team.name}' created using model '{root_agent_model}' with sub-agents: {[sa.name for sa in weather_agent_team.sub_agents]}\")\n\nelse:\n    print(\"\u274c Cannot create root agent because one or more sub-agents failed to initialize or 'get_weather' tool is missing.\")\n    if not greeting_agent: print(\" - Greeting Agent is missing.\")\n    if not farewell_agent: print(\" - Farewell Agent is missing.\")\n    if 'get_weather' not in globals(): print(\" - get_weather function is missing.\")\n</code></pre> <p>4. Interact with the Agent Team</p> <p>Now that we've defined our root agent (<code>weather_agent_team</code> - Note: Ensure this variable name matches the one defined in the previous code block, likely <code># @title Define the Root Agent with Sub-Agents</code>, which might have named it <code>root_agent</code>) with its specialized sub-agents, let's test the delegation mechanism.</p> <p>The following code block will:</p> <ol> <li>Define an <code>async</code> function <code>run_team_conversation</code>.</li> <li>Inside this function, create a new, dedicated <code>InMemorySessionService</code> and a specific session (<code>session_001_agent_team</code>) just for this test run. This isolates the conversation history for testing the team dynamics.</li> <li>Create a <code>Runner</code> (<code>runner_agent_team</code>) configured to use our <code>weather_agent_team</code> (the root agent) and the dedicated session service.</li> <li>Use our updated <code>call_agent_async</code> function to send different types of queries (greeting, weather request, farewell) to the <code>runner_agent_team</code>. We explicitly pass the runner, user ID, and session ID for this specific test.</li> <li>Immediately execute the <code>run_team_conversation</code> function.</li> </ol> <p>We expect the following flow:</p> <ol> <li>The \"Hello there!\" query goes to <code>runner_agent_team</code>.</li> <li>The root agent (<code>weather_agent_team</code>) receives it and, based on its instructions and the <code>greeting_agent</code>'s description, delegates the task.</li> <li><code>greeting_agent</code> handles the query, calls its <code>say_hello</code> tool, and generates the response.</li> <li>The \"What is the weather in New York?\" query is not delegated and is handled directly by the root agent using its <code>get_weather</code> tool.</li> <li>The \"Thanks, bye!\" query is delegated to the <code>farewell_agent</code>, which uses its <code>say_goodbye</code> tool.</li> </ol> <pre><code># @title Interact with the Agent Team\nimport asyncio # Ensure asyncio is imported\n\n# Ensure the root agent (e.g., 'weather_agent_team' or 'root_agent' from the previous cell) is defined.\n# Ensure the call_agent_async function is defined.\n\n# Check if the root agent variable exists before defining the conversation function\nroot_agent_var_name = 'root_agent' # Default name from Step 3 guide\nif 'weather_agent_team' in globals(): # Check if user used this name instead\n    root_agent_var_name = 'weather_agent_team'\nelif 'root_agent' not in globals():\n    print(\"\u26a0\ufe0f Root agent ('root_agent' or 'weather_agent_team') not found. Cannot define run_team_conversation.\")\n    # Assign a dummy value to prevent NameError later if the code block runs anyway\n    root_agent = None # Or set a flag to prevent execution\n\n# Only define and run if the root agent exists\nif root_agent_var_name in globals() and globals()[root_agent_var_name]:\n    # Define the main async function for the conversation logic.\n    # The 'await' keywords INSIDE this function are necessary for async operations.\n    async def run_team_conversation():\n        print(\"\\n--- Testing Agent Team Delegation ---\")\n        session_service = InMemorySessionService()\n        APP_NAME = \"weather_tutorial_agent_team\"\n        USER_ID = \"user_1_agent_team\"\n        SESSION_ID = \"session_001_agent_team\"\n        session = await session_service.create_session(\n            app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID\n        )\n        print(f\"Session created: App='{APP_NAME}', User='{USER_ID}', Session='{SESSION_ID}'\")\n\n        actual_root_agent = globals()[root_agent_var_name]\n        runner_agent_team = Runner( # Or use InMemoryRunner\n            agent=actual_root_agent,\n            app_name=APP_NAME,\n            session_service=session_service\n        )\n        print(f\"Runner created for agent '{actual_root_agent.name}'.\")\n\n        # --- Interactions using await (correct within async def) ---\n        await call_agent_async(query = \"Hello there!\",\n                               runner=runner_agent_team,\n                               user_id=USER_ID,\n                               session_id=SESSION_ID)\n        await call_agent_async(query = \"What is the weather in New York?\",\n                               runner=runner_agent_team,\n                               user_id=USER_ID,\n                               session_id=SESSION_ID)\n        await call_agent_async(query = \"Thanks, bye!\",\n                               runner=runner_agent_team,\n                               user_id=USER_ID,\n                               session_id=SESSION_ID)\n\n    # --- Execute the `run_team_conversation` async function ---\n    # Choose ONE of the methods below based on your environment.\n    # Note: This may require API keys for the models used!\n\n    # METHOD 1: Direct await (Default for Notebooks/Async REPLs)\n    # If your environment supports top-level await (like Colab/Jupyter notebooks),\n    # it means an event loop is already running, so you can directly await the function.\n    print(\"Attempting execution using 'await' (default for notebooks)...\")\n    await run_team_conversation()\n\n    # METHOD 2: asyncio.run (For Standard Python Scripts [.py])\n    # If running this code as a standard Python script from your terminal,\n    # the script context is synchronous. `asyncio.run()` is needed to\n    # create and manage an event loop to execute your async function.\n    # To use this method:\n    # 1. Comment out the `await run_team_conversation()` line above.\n    # 2. Uncomment the following block:\n    \"\"\"\n    import asyncio\n    if __name__ == \"__main__\": # Ensures this runs only when script is executed directly\n        print(\"Executing using 'asyncio.run()' (for standard Python scripts)...\")\n        try:\n            # This creates an event loop, runs your async function, and closes the loop.\n            asyncio.run(run_team_conversation())\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n    \"\"\"\n\nelse:\n    # This message prints if the root agent variable wasn't found earlier\n    print(\"\\n\u26a0\ufe0f Skipping agent team conversation execution as the root agent was not successfully defined in a previous step.\")\n</code></pre> <p>Look closely at the output logs, especially the <code>--- Tool: ... called ---</code> messages. You should observe:</p> <ul> <li>For \"Hello there!\", the <code>say_hello</code> tool was called (indicating <code>greeting_agent</code> handled it).</li> <li>For \"What is the weather in New York?\", the <code>get_weather</code> tool was called (indicating the root agent handled it).</li> <li>For \"Thanks, bye!\", the <code>say_goodbye</code> tool was called (indicating <code>farewell_agent</code> handled it).</li> </ul> <p>This confirms successful automatic delegation! The root agent, guided by its instructions and the <code>description</code>s of its <code>sub_agents</code>, correctly routed user requests to the appropriate specialist agent within the team.</p> <p>You've now structured your application with multiple collaborating agents. This modular design is fundamental for building more complex and capable agent systems. In the next step, we'll give our agents the ability to remember information across turns using session state.</p>"},{"location":"tutorials/agent-team.en/#step-4-adding-memory-and-personalization-with-session-state","title":"Step 4: Adding Memory and Personalization with Session State","text":"<p>So far, our agent team can handle different tasks through delegation, but each interaction starts fresh \u2013 the agents have no memory of past conversations or user preferences within a session. To create more sophisticated and context-aware experiences, agents need memory. ADK provides this through Session State.</p> <p>What is Session State?</p> <ul> <li>It's a Python dictionary (<code>session.state</code>) tied to a specific user session (identified by <code>APP_NAME</code>, <code>USER_ID</code>, <code>SESSION_ID</code>).  </li> <li>It persists information across multiple conversational turns within that session.  </li> <li>Agents and Tools can read from and write to this state, allowing them to remember details, adapt behavior, and personalize responses.</li> </ul> <p>How Agents Interact with State:</p> <ol> <li><code>ToolContext</code> (Primary Method): Tools can accept a <code>ToolContext</code> object (automatically provided by ADK if declared as the last argument). This object gives direct access to the session state via <code>tool_context.state</code>, allowing tools to read preferences or save results during execution.  </li> <li><code>output_key</code> (Auto-Save Agent Response): An <code>Agent</code> can be configured with an <code>output_key=\"your_key\"</code>. ADK will then automatically save the agent's final textual response for a turn into <code>session.state[\"your_key\"]</code>.</li> </ol> <p>In this step, we will enhance our Weather Bot team by:</p> <ol> <li>Using a new <code>InMemorySessionService</code> to demonstrate state in isolation.  </li> <li>Initializing session state with a user preference for <code>temperature_unit</code>.  </li> <li>Creating a state-aware version of the weather tool (<code>get_weather_stateful</code>) that reads this preference via <code>ToolContext</code> and adjusts its output format (Celsius/Fahrenheit).  </li> <li>Updating the root agent to use this stateful tool and configuring it with an <code>output_key</code> to automatically save its final weather report to the session state.  </li> <li>Running a conversation to observe how the initial state affects the tool, how manual state changes alter subsequent behavior, and how <code>output_key</code> persists the agent's response.</li> </ol> <p>1. Initialize New Session Service and State</p> <p>To clearly demonstrate state management without interference from prior steps, we'll instantiate a new <code>InMemorySessionService</code>. We'll also create a session with an initial state defining the user's preferred temperature unit.</p> <pre><code># @title 1. Initialize New Session Service and State\n\n# Import necessary session components\nfrom google.adk.sessions import InMemorySessionService\n\n# Create a NEW session service instance for this state demonstration\nsession_service_stateful = InMemorySessionService()\nprint(\"\u2705 New InMemorySessionService created for state demonstration.\")\n\n# Define a NEW session ID for this part of the tutorial\nSESSION_ID_STATEFUL = \"session_state_demo_001\"\nUSER_ID_STATEFUL = \"user_state_demo\"\n\n# Define initial state data - user prefers Celsius initially\ninitial_state = {\n    \"user_preference_temperature_unit\": \"Celsius\"\n}\n\n# Create the session, providing the initial state\nsession_stateful = await session_service_stateful.create_session(\n    app_name=APP_NAME, # Use the consistent app name\n    user_id=USER_ID_STATEFUL,\n    session_id=SESSION_ID_STATEFUL,\n    state=initial_state # &lt;&lt;&lt; Initialize state during creation\n)\nprint(f\"\u2705 Session '{SESSION_ID_STATEFUL}' created for user '{USER_ID_STATEFUL}'.\")\n\n# Verify the initial state was set correctly\nretrieved_session = await session_service_stateful.get_session(app_name=APP_NAME,\n                                                         user_id=USER_ID_STATEFUL,\n                                                         session_id = SESSION_ID_STATEFUL)\nprint(\"\\n--- Initial Session State ---\")\nif retrieved_session:\n    print(retrieved_session.state)\nelse:\n    print(\"Error: Could not retrieve session.\")\n</code></pre> <p>2. Create State-Aware Weather Tool (<code>get_weather_stateful</code>)</p> <p>Now, we create a new version of the weather tool. Its key feature is accepting <code>tool_context: ToolContext</code> which allows it to access <code>tool_context.state</code>. It will read the <code>user_preference_temperature_unit</code> and format the temperature accordingly.</p> <ul> <li> <p>Key Concept: <code>ToolContext</code> This object is the bridge allowing your tool logic to interact with the session's context, including reading and writing state variables. ADK injects it automatically if defined as the last parameter of your tool function.</p> </li> <li> <p>Best Practice: When reading from state, use <code>dictionary.get('key', default_value)</code> to handle cases where the key might not exist yet, ensuring your tool doesn't crash.</p> </li> </ul> <pre><code>from google.adk.tools.tool_context import ToolContext\n\ndef get_weather_stateful(city: str, tool_context: ToolContext) -&gt; dict:\n    \"\"\"Retrieves weather, converts temp unit based on session state.\"\"\"\n    print(f\"--- Tool: get_weather_stateful called for {city} ---\")\n\n    # --- Read preference from state ---\n    preferred_unit = tool_context.state.get(\"user_preference_temperature_unit\", \"Celsius\") # Default to Celsius\n    print(f\"--- Tool: Reading state 'user_preference_temperature_unit': {preferred_unit} ---\")\n\n    city_normalized = city.lower().replace(\" \", \"\")\n\n    # Mock weather data (always stored in Celsius internally)\n    mock_weather_db = {\n        \"newyork\": {\"temp_c\": 25, \"condition\": \"sunny\"},\n        \"london\": {\"temp_c\": 15, \"condition\": \"cloudy\"},\n        \"tokyo\": {\"temp_c\": 18, \"condition\": \"light rain\"},\n    }\n\n    if city_normalized in mock_weather_db:\n        data = mock_weather_db[city_normalized]\n        temp_c = data[\"temp_c\"]\n        condition = data[\"condition\"]\n\n        # Format temperature based on state preference\n        if preferred_unit == \"Fahrenheit\":\n            temp_value = (temp_c * 9/5) + 32 # Calculate Fahrenheit\n            temp_unit = \"\u00b0F\"\n        else: # Default to Celsius\n            temp_value = temp_c\n            temp_unit = \"\u00b0C\"\n\n        report = f\"The weather in {city.capitalize()} is {condition} with a temperature of {temp_value:.0f}{temp_unit}.\"\n        result = {\"status\": \"success\", \"report\": report}\n        print(f\"--- Tool: Generated report in {preferred_unit}. Result: {result} ---\")\n\n        # Example of writing back to state (optional for this tool)\n        tool_context.state[\"last_city_checked_stateful\"] = city\n        print(f\"--- Tool: Updated state 'last_city_checked_stateful': {city} ---\")\n\n        return result\n    else:\n        # Handle city not found\n        error_msg = f\"Sorry, I don't have weather information for '{city}'.\"\n        print(f\"--- Tool: City '{city}' not found. ---\")\n        return {\"status\": \"error\", \"error_message\": error_msg}\n\nprint(\"\u2705 State-aware 'get_weather_stateful' tool defined.\")\n</code></pre> <p>3. Redefine Sub-Agents and Update Root Agent</p> <p>To ensure this step is self-contained and builds correctly, we first redefine the <code>greeting_agent</code> and <code>farewell_agent</code> exactly as they were in Step 3. Then, we define our new root agent (<code>weather_agent_v4_stateful</code>):</p> <ul> <li>It uses the new <code>get_weather_stateful</code> tool.  </li> <li>It includes the greeting and farewell sub-agents for delegation.  </li> <li>Crucially, it sets <code>output_key=\"last_weather_report\"</code> which automatically saves its final weather response to the session state.</li> </ul> <pre><code># @title 3. Redefine Sub-Agents and Update Root Agent with output_key\n\n# Ensure necessary imports: Agent, LiteLlm, Runner\nfrom google.adk.agents import Agent\nfrom google.adk.models.lite_llm import LiteLlm\nfrom google.adk.runners import Runner\n# Ensure tools 'say_hello', 'say_goodbye' are defined (from Step 3)\n# Ensure model constants MODEL_GPT_4O, MODEL_GEMINI_2_0_FLASH etc. are defined\n\n# --- Redefine Greeting Agent (from Step 3) ---\ngreeting_agent = None\ntry:\n    greeting_agent = Agent(\n        model=MODEL_GEMINI_2_0_FLASH,\n        name=\"greeting_agent\",\n        instruction=\"You are the Greeting Agent. Your ONLY task is to provide a friendly greeting using the 'say_hello' tool. Do nothing else.\",\n        description=\"Handles simple greetings and hellos using the 'say_hello' tool.\",\n        tools=[say_hello],\n    )\n    print(f\"\u2705 Agent '{greeting_agent.name}' redefined.\")\nexcept Exception as e:\n    print(f\"\u274c Could not redefine Greeting agent. Error: {e}\")\n\n# --- Redefine Farewell Agent (from Step 3) ---\nfarewell_agent = None\ntry:\n    farewell_agent = Agent(\n        model=MODEL_GEMINI_2_0_FLASH,\n        name=\"farewell_agent\",\n        instruction=\"You are the Farewell Agent. Your ONLY task is to provide a polite goodbye message using the 'say_goodbye' tool. Do not perform any other actions.\",\n        description=\"Handles simple farewells and goodbyes using the 'say_goodbye' tool.\",\n        tools=[say_goodbye],\n    )\n    print(f\"\u2705 Agent '{farewell_agent.name}' redefined.\")\nexcept Exception as e:\n    print(f\"\u274c Could not redefine Farewell agent. Error: {e}\")\n\n# --- Define the Updated Root Agent ---\nroot_agent_stateful = None\nrunner_root_stateful = None # Initialize runner\n\n# Check prerequisites before creating the root agent\nif greeting_agent and farewell_agent and 'get_weather_stateful' in globals():\n\n    root_agent_model = MODEL_GEMINI_2_0_FLASH # Choose orchestration model\n\n    root_agent_stateful = Agent(\n        name=\"weather_agent_v4_stateful\", # New version name\n        model=root_agent_model,\n        description=\"Main agent: Provides weather (state-aware unit), delegates greetings/farewells, saves report to state.\",\n        instruction=\"You are the main Weather Agent. Your job is to provide weather using 'get_weather_stateful'. \"\n                    \"The tool will format the temperature based on user preference stored in state. \"\n                    \"Delegate simple greetings to 'greeting_agent' and farewells to 'farewell_agent'. \"\n                    \"Handle only weather requests, greetings, and farewells.\",\n        tools=[get_weather_stateful], # Use the state-aware tool\n        sub_agents=[greeting_agent, farewell_agent], # Include sub-agents\n        output_key=\"last_weather_report\" # &lt;&lt;&lt; Auto-save agent's final weather response\n    )\n    print(f\"\u2705 Root Agent '{root_agent_stateful.name}' created using stateful tool and output_key.\")\n\n    # --- Create Runner for this Root Agent &amp; NEW Session Service ---\n    runner_root_stateful = Runner(\n        agent=root_agent_stateful,\n        app_name=APP_NAME,\n        session_service=session_service_stateful # Use the NEW stateful session service\n    )\n    print(f\"\u2705 Runner created for stateful root agent '{runner_root_stateful.agent.name}' using stateful session service.\")\n\nelse:\n    print(\"\u274c Cannot create stateful root agent. Prerequisites missing.\")\n    if not greeting_agent: print(\" - greeting_agent definition missing.\")\n    if not farewell_agent: print(\" - farewell_agent definition missing.\")\n    if 'get_weather_stateful' not in globals(): print(\" - get_weather_stateful tool missing.\")\n</code></pre> <p>4. Interact and Test State Flow</p> <p>Now, let's execute a conversation designed to test the state interactions using the <code>runner_root_stateful</code> (associated with our stateful agent and the <code>session_service_stateful</code>). We'll use the <code>call_agent_async</code> function defined earlier, ensuring we pass the correct runner, user ID (<code>USER_ID_STATEFUL</code>), and session ID (<code>SESSION_ID_STATEFUL</code>).</p> <p>The conversation flow will be:</p> <ol> <li>Check weather (London): The <code>get_weather_stateful</code> tool should read the initial \"Celsius\" preference from the session state initialized in Section 1. The root agent's final response (the weather report in Celsius) should get saved to <code>state['last_weather_report']</code> via the <code>output_key</code> configuration.</li> <li>Manually update state: We will directly modify the state stored within the <code>InMemorySessionService</code> instance (<code>session_service_stateful</code>).<ul> <li>Why direct modification? The <code>session_service.get_session()</code> method returns a copy of the session. Modifying that copy wouldn't affect the state used in subsequent agent runs. For this testing scenario with <code>InMemorySessionService</code>, we access the internal <code>sessions</code> dictionary to change the actual stored state value for <code>user_preference_temperature_unit</code> to \"Fahrenheit\". Note: In real applications, state changes are typically triggered by tools or agent logic returning <code>EventActions(state_delta=...)</code>, not direct manual updates.</li> </ul> </li> <li>Check weather again (New York): The <code>get_weather_stateful</code> tool should now read the updated \"Fahrenheit\" preference from the state and convert the temperature accordingly. The root agent's new response (weather in Fahrenheit) will overwrite the previous value in <code>state['last_weather_report']</code> due to the <code>output_key</code>.</li> <li>Greet the agent: Verify that delegation to the <code>greeting_agent</code> still works correctly alongside the stateful operations. This interaction will become the last response saved by <code>output_key</code> in this specific sequence.</li> <li>Inspect final state: After the conversation, we retrieve the session one last time (getting a copy) and print its state to confirm the <code>user_preference_temperature_unit</code> is indeed \"Fahrenheit\", observe the final value saved by <code>output_key</code> (which will be the greeting in this run), and see the <code>last_city_checked_stateful</code> value written by the tool.</li> </ol> <pre><code># @title 4. Interact to Test State Flow and output_key\nimport asyncio # Ensure asyncio is imported\n\n# Ensure the stateful runner (runner_root_stateful) is available from the previous cell\n# Ensure call_agent_async, USER_ID_STATEFUL, SESSION_ID_STATEFUL, APP_NAME are defined\n\nif 'runner_root_stateful' in globals() and runner_root_stateful:\n    # Define the main async function for the stateful conversation logic.\n    # The 'await' keywords INSIDE this function are necessary for async operations.\n    async def run_stateful_conversation():\n        print(\"\\n--- Testing State: Temp Unit Conversion &amp; output_key ---\")\n\n        # 1. Check weather (Uses initial state: Celsius)\n        print(\"--- Turn 1: Requesting weather in London (expect Celsius) ---\")\n        await call_agent_async(query= \"What's the weather in London?\",\n                               runner=runner_root_stateful,\n                               user_id=USER_ID_STATEFUL,\n                               session_id=SESSION_ID_STATEFUL\n                              )\n\n        # 2. Manually update state preference to Fahrenheit - DIRECTLY MODIFY STORAGE\n        print(\"\\n--- Manually Updating State: Setting unit to Fahrenheit ---\")\n        try:\n            # Access the internal storage directly - THIS IS SPECIFIC TO InMemorySessionService for testing\n            # NOTE: In production with persistent services (Database, VertexAI), you would\n            # typically update state via agent actions or specific service APIs if available,\n            # not by direct manipulation of internal storage.\n            stored_session = session_service_stateful.sessions[APP_NAME][USER_ID_STATEFUL][SESSION_ID_STATEFUL]\n            stored_session.state[\"user_preference_temperature_unit\"] = \"Fahrenheit\"\n            # Optional: You might want to update the timestamp as well if any logic depends on it\n            # import time\n            # stored_session.last_update_time = time.time()\n            print(f\"--- Stored session state updated. Current 'user_preference_temperature_unit': {stored_session.state.get('user_preference_temperature_unit', 'Not Set')} ---\") # Added .get for safety\n        except KeyError:\n            print(f\"--- Error: Could not retrieve session '{SESSION_ID_STATEFUL}' from internal storage for user '{USER_ID_STATEFUL}' in app '{APP_NAME}' to update state. Check IDs and if session was created. ---\")\n        except Exception as e:\n             print(f\"--- Error updating internal session state: {e} ---\")\n\n        # 3. Check weather again (Tool should now use Fahrenheit)\n        # This will also update 'last_weather_report' via output_key\n        print(\"\\n--- Turn 2: Requesting weather in New York (expect Fahrenheit) ---\")\n        await call_agent_async(query= \"Tell me the weather in New York.\",\n                               runner=runner_root_stateful,\n                               user_id=USER_ID_STATEFUL,\n                               session_id=SESSION_ID_STATEFUL\n                              )\n\n        # 4. Test basic delegation (should still work)\n        # This will update 'last_weather_report' again, overwriting the NY weather report\n        print(\"\\n--- Turn 3: Sending a greeting ---\")\n        await call_agent_async(query= \"Hi!\",\n                               runner=runner_root_stateful,\n                               user_id=USER_ID_STATEFUL,\n                               session_id=SESSION_ID_STATEFUL\n                              )\n\n    # --- Execute the `run_stateful_conversation` async function ---\n    # Choose ONE of the methods below based on your environment.\n\n    # METHOD 1: Direct await (Default for Notebooks/Async REPLs)\n    # If your environment supports top-level await (like Colab/Jupyter notebooks),\n    # it means an event loop is already running, so you can directly await the function.\n    print(\"Attempting execution using 'await' (default for notebooks)...\")\n    await run_stateful_conversation()\n\n    # METHOD 2: asyncio.run (For Standard Python Scripts [.py])\n    # If running this code as a standard Python script from your terminal,\n    # the script context is synchronous. `asyncio.run()` is needed to\n    # create and manage an event loop to execute your async function.\n    # To use this method:\n    # 1. Comment out the `await run_stateful_conversation()` line above.\n    # 2. Uncomment the following block:\n    \"\"\"\n    import asyncio\n    if __name__ == \"__main__\": # Ensures this runs only when script is executed directly\n        print(\"Executing using 'asyncio.run()' (for standard Python scripts)...\")\n        try:\n            # This creates an event loop, runs your async function, and closes the loop.\n            asyncio.run(run_stateful_conversation())\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n    \"\"\"\n\n    # --- Inspect final session state after the conversation ---\n    # This block runs after either execution method completes.\n    print(\"\\n--- Inspecting Final Session State ---\")\n    final_session = await session_service_stateful.get_session(app_name=APP_NAME,\n                                                         user_id= USER_ID_STATEFUL,\n                                                         session_id=SESSION_ID_STATEFUL)\n    if final_session:\n        # Use .get() for safer access to potentially missing keys\n        print(f\"Final Preference: {final_session.state.get('user_preference_temperature_unit', 'Not Set')}\")\n        print(f\"Final Last Weather Report (from output_key): {final_session.state.get('last_weather_report', 'Not Set')}\")\n        print(f\"Final Last City Checked (by tool): {final_session.state.get('last_city_checked_stateful', 'Not Set')}\")\n        # Print full state for detailed view\n        # print(f\"Full State Dict: {final_session.state}\") # For detailed view\n    else:\n        print(\"\\n\u274c Error: Could not retrieve final session state.\")\n\nelse:\n    print(\"\\n\u26a0\ufe0f Skipping state test conversation. Stateful root agent runner ('runner_root_stateful') is not available.\")\n</code></pre> <p>By reviewing the conversation flow and the final session state printout, you can confirm:</p> <ul> <li>State Read: The weather tool (<code>get_weather_stateful</code>) correctly read <code>user_preference_temperature_unit</code> from state, initially using \"Celsius\" for London.</li> <li>State Update: The direct modification successfully changed the stored preference to \"Fahrenheit\".</li> <li>State Read (Updated): The tool subsequently read \"Fahrenheit\" when asked for New York's weather and performed the conversion.</li> <li>Tool State Write: The tool successfully wrote the <code>last_city_checked_stateful</code> (\"New York\" after the second weather check) into the state via <code>tool_context.state</code>.</li> <li>Delegation: The delegation to the <code>greeting_agent</code> for \"Hi!\" functioned correctly even after state modifications.</li> <li><code>output_key</code>: The <code>output_key=\"last_weather_report\"</code> successfully saved the root agent's final response for each turn where the root agent was the one ultimately responding. In this sequence, the last response was the greeting (\"Hello, there!\"), so that overwrote the weather report in the state key.</li> <li>Final State: The final check confirms the preference persisted as \"Fahrenheit\".</li> </ul> <p>You've now successfully integrated session state to personalize agent behavior using <code>ToolContext</code>, manually manipulated state for testing <code>InMemorySessionService</code>, and observed how <code>output_key</code> provides a simple mechanism for saving the agent's last response to state. This foundational understanding of state management is key as we proceed to implement safety guardrails using callbacks in the next steps.</p>"},{"location":"tutorials/agent-team.en/#step-5-adding-safety-input-guardrail-with-before_model_callback","title":"Step 5: Adding Safety - Input Guardrail with <code>before_model_callback</code>","text":"<p>Our agent team is becoming more capable, remembering preferences and using tools effectively. However, in real-world scenarios, we often need safety mechanisms to control the agent's behavior before potentially problematic requests even reach the core Large Language Model (LLM).</p> <p>ADK provides Callbacks \u2013 functions that allow you to hook into specific points in the agent's execution lifecycle. The <code>before_model_callback</code> is particularly useful for input safety.</p> <p>What is <code>before_model_callback</code>?</p> <ul> <li>It's a Python function you define that ADK executes just before an agent sends its compiled request (including conversation history, instructions, and the latest user message) to the underlying LLM.  </li> <li>Purpose: Inspect the request, modify it if necessary, or block it entirely based on predefined rules.</li> </ul> <p>Common Use Cases:</p> <ul> <li>Input Validation/Filtering: Check if user input meets criteria or contains disallowed content (like PII or keywords).  </li> <li>Guardrails: Prevent harmful, off-topic, or policy-violating requests from being processed by the LLM.  </li> <li>Dynamic Prompt Modification: Add timely information (e.g., from session state) to the LLM request context just before sending.</li> </ul> <p>How it Works:</p> <ol> <li> <p>Define a function accepting <code>callback_context: CallbackContext</code> and <code>llm_request: LlmRequest</code>.  </p> <ul> <li><code>callback_context</code>: Provides access to agent info, session state (<code>callback_context.state</code>), etc.  </li> <li><code>llm_request</code>: Contains the full payload intended for the LLM (<code>contents</code>, <code>config</code>).  </li> </ul> </li> <li> <p>Inside the function: </p> <ul> <li>Inspect: Examine <code>llm_request.contents</code> (especially the last user message).  </li> <li>Modify (Use Caution): You can change parts of <code>llm_request</code>.  </li> <li>Block (Guardrail): Return an <code>LlmResponse</code> object. ADK will send this response back immediately, skipping the LLM call for that turn.  </li> <li>Allow: Return <code>None</code>. ADK proceeds to call the LLM with the (potentially modified) request.</li> </ul> </li> </ol> <p>In this step, we will:</p> <ol> <li>Define a <code>before_model_callback</code> function (<code>block_keyword_guardrail</code>) that checks the user's input for a specific keyword (\"BLOCK\").  </li> <li>Update our stateful root agent (<code>weather_agent_v4_stateful</code> from Step 4) to use this callback.  </li> <li>Create a new runner associated with this updated agent but using the same stateful session service to maintain state continuity.  </li> <li>Test the guardrail by sending both normal and keyword-containing requests.</li> </ol> <p>1. Define the Guardrail Callback Function</p> <p>This function will inspect the last user message within the <code>llm_request</code> content. If it finds \"BLOCK\" (case-insensitive), it constructs and returns an <code>LlmResponse</code> to block the flow; otherwise, it returns <code>None</code>.  </p> <pre><code># @title 1. Define the before_model_callback Guardrail\n\n# Ensure necessary imports are available\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.models.llm_request import LlmRequest\nfrom google.adk.models.llm_response import LlmResponse\nfrom google.genai import types # For creating response content\nfrom typing import Optional\n\ndef block_keyword_guardrail(\n    callback_context: CallbackContext, llm_request: LlmRequest\n) -&gt; Optional[LlmResponse]:\n    \"\"\"\n    Inspects the latest user message for 'BLOCK'. If found, blocks the LLM call\n    and returns a predefined LlmResponse. Otherwise, returns None to proceed.\n    \"\"\"\n    agent_name = callback_context.agent_name # Get the name of the agent whose model call is being intercepted\n    print(f\"--- Callback: block_keyword_guardrail running for agent: {agent_name} ---\")\n\n    # Extract the text from the latest user message in the request history\n    last_user_message_text = \"\"\n    if llm_request.contents:\n        # Find the most recent message with role 'user'\n        for content in reversed(llm_request.contents):\n            if content.role == 'user' and content.parts:\n                # Assuming text is in the first part for simplicity\n                if content.parts[0].text:\n                    last_user_message_text = content.parts[0].text\n                    break # Found the last user message text\n\n    print(f\"--- Callback: Inspecting last user message: '{last_user_message_text[:100]}...' ---\") # Log first 100 chars\n\n    # --- Guardrail Logic ---\n    keyword_to_block = \"BLOCK\"\n    if keyword_to_block in last_user_message_text.upper(): # Case-insensitive check\n        print(f\"--- Callback: Found '{keyword_to_block}'. Blocking LLM call! ---\")\n        # Optionally, set a flag in state to record the block event\n        callback_context.state[\"guardrail_block_keyword_triggered\"] = True\n        print(f\"--- Callback: Set state 'guardrail_block_keyword_triggered': True ---\")\n\n        # Construct and return an LlmResponse to stop the flow and send this back instead\n        return LlmResponse(\n            content=types.Content(\n                role=\"model\", # Mimic a response from the agent's perspective\n                parts=[types.Part(text=f\"I cannot process this request because it contains the blocked keyword '{keyword_to_block}'.\")],\n            )\n            # Note: You could also set an error_message field here if needed\n        )\n    else:\n        # Keyword not found, allow the request to proceed to the LLM\n        print(f\"--- Callback: Keyword not found. Allowing LLM call for {agent_name}. ---\")\n        return None # Returning None signals ADK to continue normally\n\nprint(\"\u2705 block_keyword_guardrail function defined.\")\n</code></pre> <p>2. Update Root Agent to Use the Callback</p> <p>We redefine the root agent, adding the <code>before_model_callback</code> parameter and pointing it to our new guardrail function. We'll give it a new version name for clarity.</p> <p>Important: We need to redefine the sub-agents (<code>greeting_agent</code>, <code>farewell_agent</code>) and the stateful tool (<code>get_weather_stateful</code>) within this context if they are not already available from previous steps, ensuring the root agent definition has access to all its components.</p> <pre><code># @title 2. Update Root Agent with before_model_callback\n\n\n# --- Redefine Sub-Agents (Ensures they exist in this context) ---\ngreeting_agent = None\ntry:\n    # Use a defined model constant\n    greeting_agent = Agent(\n        model=MODEL_GEMINI_2_0_FLASH,\n        name=\"greeting_agent\", # Keep original name for consistency\n        instruction=\"You are the Greeting Agent. Your ONLY task is to provide a friendly greeting using the 'say_hello' tool. Do nothing else.\",\n        description=\"Handles simple greetings and hellos using the 'say_hello' tool.\",\n        tools=[say_hello],\n    )\n    print(f\"\u2705 Sub-Agent '{greeting_agent.name}' redefined.\")\nexcept Exception as e:\n    print(f\"\u274c Could not redefine Greeting agent. Check Model/API Key ({greeting_agent.model}). Error: {e}\")\n\nfarewell_agent = None\ntry:\n    # Use a defined model constant\n    farewell_agent = Agent(\n        model=MODEL_GEMINI_2_0_FLASH,\n        name=\"farewell_agent\", # Keep original name\n        instruction=\"You are the Farewell Agent. Your ONLY task is to provide a polite goodbye message using the 'say_goodbye' tool. Do not perform any other actions.\",\n        description=\"Handles simple farewells and goodbyes using the 'say_goodbye' tool.\",\n        tools=[say_goodbye],\n    )\n    print(f\"\u2705 Sub-Agent '{farewell_agent.name}' redefined.\")\nexcept Exception as e:\n    print(f\"\u274c Could not redefine Farewell agent. Check Model/API Key ({farewell_agent.model}). Error: {e}\")\n\n\n# --- Define the Root Agent with the Callback ---\nroot_agent_model_guardrail = None\nrunner_root_model_guardrail = None\n\n# Check all components before proceeding\nif greeting_agent and farewell_agent and 'get_weather_stateful' in globals() and 'block_keyword_guardrail' in globals():\n\n    # Use a defined model constant\n    root_agent_model = MODEL_GEMINI_2_0_FLASH\n\n    root_agent_model_guardrail = Agent(\n        name=\"weather_agent_v5_model_guardrail\", # New version name for clarity\n        model=root_agent_model,\n        description=\"Main agent: Handles weather, delegates greetings/farewells, includes input keyword guardrail.\",\n        instruction=\"You are the main Weather Agent. Provide weather using 'get_weather_stateful'. \"\n                    \"Delegate simple greetings to 'greeting_agent' and farewells to 'farewell_agent'. \"\n                    \"Handle only weather requests, greetings, and farewells.\",\n        tools=[get_weather_stateful],\n        sub_agents=[greeting_agent, farewell_agent], # Reference the redefined sub-agents\n        output_key=\"last_weather_report\", # Keep output_key from Step 4\n        before_model_callback=block_keyword_guardrail # &lt;&lt;&lt; Assign the guardrail callback\n    )\n    print(f\"\u2705 Root Agent '{root_agent_model_guardrail.name}' created with before_model_callback.\")\n\n    # --- Create Runner for this Agent, Using SAME Stateful Session Service ---\n    # Ensure session_service_stateful exists from Step 4\n    if 'session_service_stateful' in globals():\n        runner_root_model_guardrail = Runner(\n            agent=root_agent_model_guardrail,\n            app_name=APP_NAME, # Use consistent APP_NAME\n            session_service=session_service_stateful # &lt;&lt;&lt; Use the service from Step 4\n        )\n        print(f\"\u2705 Runner created for guardrail agent '{runner_root_model_guardrail.agent.name}', using stateful session service.\")\n    else:\n        print(\"\u274c Cannot create runner. 'session_service_stateful' from Step 4 is missing.\")\n\nelse:\n    print(\"\u274c Cannot create root agent with model guardrail. One or more prerequisites are missing or failed initialization:\")\n    if not greeting_agent: print(\"   - Greeting Agent\")\n    if not farewell_agent: print(\"   - Farewell Agent\")\n    if 'get_weather_stateful' not in globals(): print(\"   - 'get_weather_stateful' tool\")\n    if 'block_keyword_guardrail' not in globals(): print(\"   - 'block_keyword_guardrail' callback\")\n</code></pre> <p>3. Interact to Test the Guardrail</p> <p>Let's test the guardrail's behavior. We'll use the same session (<code>SESSION_ID_STATEFUL</code>) as in Step 4 to show that state persists across these changes.</p> <ol> <li>Send a normal weather request (should pass the guardrail and execute).  </li> <li>Send a request containing \"BLOCK\" (should be intercepted by the callback).  </li> <li>Send a greeting (should pass the root agent's guardrail, be delegated, and execute normally).</li> </ol> <pre><code># @title 3. Interact to Test the Model Input Guardrail\nimport asyncio # Ensure asyncio is imported\n\n# Ensure the runner for the guardrail agent is available\nif 'runner_root_model_guardrail' in globals() and runner_root_model_guardrail:\n    # Define the main async function for the guardrail test conversation.\n    # The 'await' keywords INSIDE this function are necessary for async operations.\n    async def run_guardrail_test_conversation():\n        print(\"\\n--- Testing Model Input Guardrail ---\")\n\n        # Use the runner for the agent with the callback and the existing stateful session ID\n        # Define a helper lambda for cleaner interaction calls\n        interaction_func = lambda query: call_agent_async(query,\n                                                         runner_root_model_guardrail,\n                                                         USER_ID_STATEFUL, # Use existing user ID\n                                                         SESSION_ID_STATEFUL # Use existing session ID\n                                                        )\n        # 1. Normal request (Callback allows, should use Fahrenheit from previous state change)\n        print(\"--- Turn 1: Requesting weather in London (expect allowed, Fahrenheit) ---\")\n        await interaction_func(\"What is the weather in London?\")\n\n        # 2. Request containing the blocked keyword (Callback intercepts)\n        print(\"\\n--- Turn 2: Requesting with blocked keyword (expect blocked) ---\")\n        await interaction_func(\"BLOCK the request for weather in Tokyo\") # Callback should catch \"BLOCK\"\n\n        # 3. Normal greeting (Callback allows root agent, delegation happens)\n        print(\"\\n--- Turn 3: Sending a greeting (expect allowed) ---\")\n        await interaction_func(\"Hello again\")\n\n    # --- Execute the `run_guardrail_test_conversation` async function ---\n    # Choose ONE of the methods below based on your environment.\n\n    # METHOD 1: Direct await (Default for Notebooks/Async REPLs)\n    # If your environment supports top-level await (like Colab/Jupyter notebooks),\n    # it means an event loop is already running, so you can directly await the function.\n    print(\"Attempting execution using 'await' (default for notebooks)...\")\n    await run_guardrail_test_conversation()\n\n    # METHOD 2: asyncio.run (For Standard Python Scripts [.py])\n    # If running this code as a standard Python script from your terminal,\n    # the script context is synchronous. `asyncio.run()` is needed to\n    # create and manage an event loop to execute your async function.\n    # To use this method:\n    # 1. Comment out the `await run_guardrail_test_conversation()` line above.\n    # 2. Uncomment the following block:\n    \"\"\"\n    import asyncio\n    if __name__ == \"__main__\": # Ensures this runs only when script is executed directly\n        print(\"Executing using 'asyncio.run()' (for standard Python scripts)...\")\n        try:\n            # This creates an event loop, runs your async function, and closes the loop.\n            asyncio.run(run_guardrail_test_conversation())\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n    \"\"\"\n\n    # --- Inspect final session state after the conversation ---\n    # This block runs after either execution method completes.\n    # Optional: Check state for the trigger flag set by the callback\n    print(\"\\n--- Inspecting Final Session State (After Guardrail Test) ---\")\n    # Use the session service instance associated with this stateful session\n    final_session = await session_service_stateful.get_session(app_name=APP_NAME,\n                                                         user_id=USER_ID_STATEFUL,\n                                                         session_id=SESSION_ID_STATEFUL)\n    if final_session:\n        # Use .get() for safer access\n        print(f\"Guardrail Triggered Flag: {final_session.state.get('guardrail_block_keyword_triggered', 'Not Set (or False)')}\")\n        print(f\"Last Weather Report: {final_session.state.get('last_weather_report', 'Not Set')}\") # Should be London weather if successful\n        print(f\"Temperature Unit: {final_session.state.get('user_preference_temperature_unit', 'Not Set')}\") # Should be Fahrenheit\n        # print(f\"Full State Dict: {final_session.state}\") # For detailed view\n    else:\n        print(\"\\n\u274c Error: Could not retrieve final session state.\")\n\nelse:\n    print(\"\\n\u26a0\ufe0f Skipping model guardrail test. Runner ('runner_root_model_guardrail') is not available.\")\n</code></pre> <p>Observe the execution flow:</p> <ol> <li>London Weather: The callback runs for <code>weather_agent_v5_model_guardrail</code>, inspects the message, prints \"Keyword not found. Allowing LLM call.\", and returns <code>None</code>. The agent proceeds, calls the <code>get_weather_stateful</code> tool (which uses the \"Fahrenheit\" preference from Step 4's state change), and returns the weather. This response updates <code>last_weather_report</code> via <code>output_key</code>.  </li> <li>BLOCK Request: The callback runs again for <code>weather_agent_v5_model_guardrail</code>, inspects the message, finds \"BLOCK\", prints \"Blocking LLM call!\", sets the state flag, and returns the predefined <code>LlmResponse</code>. The agent's underlying LLM is never called for this turn. The user sees the callback's blocking message.  </li> <li>Hello Again: The callback runs for <code>weather_agent_v5_model_guardrail</code>, allows the request. The root agent then delegates to <code>greeting_agent</code>. Note: The <code>before_model_callback</code> defined on the root agent does NOT automatically apply to sub-agents. The <code>greeting_agent</code> proceeds normally, calls its <code>say_hello</code> tool, and returns the greeting.</li> </ol> <p>You have successfully implemented an input safety layer! The <code>before_model_callback</code> provides a powerful mechanism to enforce rules and control agent behavior before expensive or potentially risky LLM calls are made. Next, we'll apply a similar concept to add guardrails around tool usage itself.</p>"},{"location":"tutorials/agent-team.en/#step-6-adding-safety-tool-argument-guardrail-before_tool_callback","title":"Step 6: Adding Safety - Tool Argument Guardrail (<code>before_tool_callback</code>)","text":"<p>In Step 5, we added a guardrail to inspect and potentially block user input before it reached the LLM. Now, we'll add another layer of control after the LLM has decided to use a tool but before that tool actually executes. This is useful for validating the arguments the LLM wants to pass to the tool.</p> <p>ADK provides the <code>before_tool_callback</code> for this precise purpose.</p> <p>What is <code>before_tool_callback</code>?</p> <ul> <li>It's a Python function executed just before a specific tool function runs, after the LLM has requested its use and decided on the arguments.  </li> <li>Purpose: Validate tool arguments, prevent tool execution based on specific inputs, modify arguments dynamically, or enforce resource usage policies.</li> </ul> <p>Common Use Cases:</p> <ul> <li>Argument Validation: Check if arguments provided by the LLM are valid, within allowed ranges, or conform to expected formats.  </li> <li>Resource Protection: Prevent tools from being called with inputs that might be costly, access restricted data, or cause unwanted side effects (e.g., blocking API calls for certain parameters).  </li> <li>Dynamic Argument Modification: Adjust arguments based on session state or other contextual information before the tool runs.</li> </ul> <p>How it Works:</p> <ol> <li> <p>Define a function accepting <code>tool: BaseTool</code>, <code>args: Dict[str, Any]</code>, and <code>tool_context: ToolContext</code>.  </p> <ul> <li><code>tool</code>: The tool object about to be called (inspect <code>tool.name</code>).  </li> <li><code>args</code>: The dictionary of arguments the LLM generated for the tool.  </li> <li><code>tool_context</code>: Provides access to session state (<code>tool_context.state</code>), agent info, etc.  </li> </ul> </li> <li> <p>Inside the function:  </p> <ul> <li>Inspect: Examine the <code>tool.name</code> and the <code>args</code> dictionary.  </li> <li>Modify: Change values within the <code>args</code> dictionary directly. If you return <code>None</code>, the tool runs with these modified args.  </li> <li>Block/Override (Guardrail): Return a dictionary. ADK treats this dictionary as the result of the tool call, completely skipping the execution of the original tool function. The dictionary should ideally match the expected return format of the tool it's blocking.  </li> <li>Allow: Return <code>None</code>. ADK proceeds to execute the actual tool function with the (potentially modified) arguments.</li> </ul> </li> </ol> <p>In this step, we will:</p> <ol> <li>Define a <code>before_tool_callback</code> function (<code>block_paris_tool_guardrail</code>) that specifically checks if the <code>get_weather_stateful</code> tool is called with the city \"Paris\".  </li> <li>If \"Paris\" is detected, the callback will block the tool and return a custom error dictionary.  </li> <li>Update our root agent (<code>weather_agent_v6_tool_guardrail</code>) to include both the <code>before_model_callback</code> and this new <code>before_tool_callback</code>.  </li> <li>Create a new runner for this agent, using the same stateful session service.  </li> <li>Test the flow by requesting weather for allowed cities and the blocked city (\"Paris\").</li> </ol> <p>1. Define the Tool Guardrail Callback Function</p> <p>This function targets the <code>get_weather_stateful</code> tool. It checks the <code>city</code> argument. If it's \"Paris\", it returns an error dictionary that looks like the tool's own error response. Otherwise, it allows the tool to run by returning <code>None</code>.</p> <pre><code># @title 1. Define the before_tool_callback Guardrail\n\n# Ensure necessary imports are available\nfrom google.adk.tools.base_tool import BaseTool\nfrom google.adk.tools.tool_context import ToolContext\nfrom typing import Optional, Dict, Any # For type hints\n\ndef block_paris_tool_guardrail(\n    tool: BaseTool, args: Dict[str, Any], tool_context: ToolContext\n) -&gt; Optional[Dict]:\n    \"\"\"\n    Checks if 'get_weather_stateful' is called for 'Paris'.\n    If so, blocks the tool execution and returns a specific error dictionary.\n    Otherwise, allows the tool call to proceed by returning None.\n    \"\"\"\n    tool_name = tool.name\n    agent_name = tool_context.agent_name # Agent attempting the tool call\n    print(f\"--- Callback: block_paris_tool_guardrail running for tool '{tool_name}' in agent '{agent_name}' ---\")\n    print(f\"--- Callback: Inspecting args: {args} ---\")\n\n    # --- Guardrail Logic ---\n    target_tool_name = \"get_weather_stateful\" # Match the function name used by FunctionTool\n    blocked_city = \"paris\"\n\n    # Check if it's the correct tool and the city argument matches the blocked city\n    if tool_name == target_tool_name:\n        city_argument = args.get(\"city\", \"\") # Safely get the 'city' argument\n        if city_argument and city_argument.lower() == blocked_city:\n            print(f\"--- Callback: Detected blocked city '{city_argument}'. Blocking tool execution! ---\")\n            # Optionally update state\n            tool_context.state[\"guardrail_tool_block_triggered\"] = True\n            print(f\"--- Callback: Set state 'guardrail_tool_block_triggered': True ---\")\n\n            # Return a dictionary matching the tool's expected output format for errors\n            # This dictionary becomes the tool's result, skipping the actual tool run.\n            return {\n                \"status\": \"error\",\n                \"error_message\": f\"Policy restriction: Weather checks for '{city_argument.capitalize()}' are currently disabled by a tool guardrail.\"\n            }\n        else:\n             print(f\"--- Callback: City '{city_argument}' is allowed for tool '{tool_name}'. ---\")\n    else:\n        print(f\"--- Callback: Tool '{tool_name}' is not the target tool. Allowing. ---\")\n\n\n    # If the checks above didn't return a dictionary, allow the tool to execute\n    print(f\"--- Callback: Allowing tool '{tool_name}' to proceed. ---\")\n    return None # Returning None allows the actual tool function to run\n\nprint(\"\u2705 block_paris_tool_guardrail function defined.\")\n</code></pre> <p>2. Update Root Agent to Use Both Callbacks</p> <p>We redefine the root agent again (<code>weather_agent_v6_tool_guardrail</code>), this time adding the <code>before_tool_callback</code> parameter alongside the <code>before_model_callback</code> from Step 5.</p> <p>Self-Contained Execution Note: Similar to Step 5, ensure all prerequisites (sub-agents, tools, <code>before_model_callback</code>) are defined or available in the execution context before defining this agent.</p> <pre><code># @title 2. Update Root Agent with BOTH Callbacks (Self-Contained)\n\n# --- Ensure Prerequisites are Defined ---\n# (Include or ensure execution of definitions for: Agent, LiteLlm, Runner, ToolContext,\n#  MODEL constants, say_hello, say_goodbye, greeting_agent, farewell_agent,\n#  get_weather_stateful, block_keyword_guardrail, block_paris_tool_guardrail)\n\n# --- Redefine Sub-Agents (Ensures they exist in this context) ---\ngreeting_agent = None\ntry:\n    # Use a defined model constant\n    greeting_agent = Agent(\n        model=MODEL_GEMINI_2_0_FLASH,\n        name=\"greeting_agent\", # Keep original name for consistency\n        instruction=\"You are the Greeting Agent. Your ONLY task is to provide a friendly greeting using the 'say_hello' tool. Do nothing else.\",\n        description=\"Handles simple greetings and hellos using the 'say_hello' tool.\",\n        tools=[say_hello],\n    )\n    print(f\"\u2705 Sub-Agent '{greeting_agent.name}' redefined.\")\nexcept Exception as e:\n    print(f\"\u274c Could not redefine Greeting agent. Check Model/API Key ({greeting_agent.model}). Error: {e}\")\n\nfarewell_agent = None\ntry:\n    # Use a defined model constant\n    farewell_agent = Agent(\n        model=MODEL_GEMINI_2_0_FLASH,\n        name=\"farewell_agent\", # Keep original name\n        instruction=\"You are the Farewell Agent. Your ONLY task is to provide a polite goodbye message using the 'say_goodbye' tool. Do not perform any other actions.\",\n        description=\"Handles simple farewells and goodbyes using the 'say_goodbye' tool.\",\n        tools=[say_goodbye],\n    )\n    print(f\"\u2705 Sub-Agent '{farewell_agent.name}' redefined.\")\nexcept Exception as e:\n    print(f\"\u274c Could not redefine Farewell agent. Check Model/API Key ({farewell_agent.model}). Error: {e}\")\n\n# --- Define the Root Agent with Both Callbacks ---\nroot_agent_tool_guardrail = None\nrunner_root_tool_guardrail = None\n\nif ('greeting_agent' in globals() and greeting_agent and\n    'farewell_agent' in globals() and farewell_agent and\n    'get_weather_stateful' in globals() and\n    'block_keyword_guardrail' in globals() and\n    'block_paris_tool_guardrail' in globals()):\n\n    root_agent_model = MODEL_GEMINI_2_0_FLASH\n\n    root_agent_tool_guardrail = Agent(\n        name=\"weather_agent_v6_tool_guardrail\", # New version name\n        model=root_agent_model,\n        description=\"Main agent: Handles weather, delegates, includes input AND tool guardrails.\",\n        instruction=\"You are the main Weather Agent. Provide weather using 'get_weather_stateful'. \"\n                    \"Delegate greetings to 'greeting_agent' and farewells to 'farewell_agent'. \"\n                    \"Handle only weather, greetings, and farewells.\",\n        tools=[get_weather_stateful],\n        sub_agents=[greeting_agent, farewell_agent],\n        output_key=\"last_weather_report\",\n        before_model_callback=block_keyword_guardrail, # Keep model guardrail\n        before_tool_callback=block_paris_tool_guardrail # &lt;&lt;&lt; Add tool guardrail\n    )\n    print(f\"\u2705 Root Agent '{root_agent_tool_guardrail.name}' created with BOTH callbacks.\")\n\n    # --- Create Runner, Using SAME Stateful Session Service ---\n    if 'session_service_stateful' in globals():\n        runner_root_tool_guardrail = Runner(\n            agent=root_agent_tool_guardrail,\n            app_name=APP_NAME,\n            session_service=session_service_stateful # &lt;&lt;&lt; Use the service from Step 4/5\n        )\n        print(f\"\u2705 Runner created for tool guardrail agent '{runner_root_tool_guardrail.agent.name}', using stateful session service.\")\n    else:\n        print(\"\u274c Cannot create runner. 'session_service_stateful' from Step 4/5 is missing.\")\n\nelse:\n    print(\"\u274c Cannot create root agent with tool guardrail. Prerequisites missing.\")\n</code></pre> <p>3. Interact to Test the Tool Guardrail</p> <p>Let's test the interaction flow, again using the same stateful session (<code>SESSION_ID_STATEFUL</code>) from the previous steps.</p> <ol> <li>Request weather for \"New York\": Passes both callbacks, tool executes (using Fahrenheit preference from state).  </li> <li>Request weather for \"Paris\": Passes <code>before_model_callback</code>. LLM decides to call <code>get_weather_stateful(city='Paris')</code>. <code>before_tool_callback</code> intercepts, blocks the tool, and returns the error dictionary. Agent relays this error.  </li> <li>Request weather for \"London\": Passes both callbacks, tool executes normally.</li> </ol> <pre><code># @title 3. Interact to Test the Tool Argument Guardrail\nimport asyncio # Ensure asyncio is imported\n\n# Ensure the runner for the tool guardrail agent is available\nif 'runner_root_tool_guardrail' in globals() and runner_root_tool_guardrail:\n    # Define the main async function for the tool guardrail test conversation.\n    # The 'await' keywords INSIDE this function are necessary for async operations.\n    async def run_tool_guardrail_test():\n        print(\"\\n--- Testing Tool Argument Guardrail ('Paris' blocked) ---\")\n\n        # Use the runner for the agent with both callbacks and the existing stateful session\n        # Define a helper lambda for cleaner interaction calls\n        interaction_func = lambda query: call_agent_async(query,\n                                                         runner_root_tool_guardrail,\n                                                         USER_ID_STATEFUL, # Use existing user ID\n                                                         SESSION_ID_STATEFUL # Use existing session ID\n                                                        )\n        # 1. Allowed city (Should pass both callbacks, use Fahrenheit state)\n        print(\"--- Turn 1: Requesting weather in New York (expect allowed) ---\")\n        await interaction_func(\"What's the weather in New York?\")\n\n        # 2. Blocked city (Should pass model callback, but be blocked by tool callback)\n        print(\"\\n--- Turn 2: Requesting weather in Paris (expect blocked by tool guardrail) ---\")\n        await interaction_func(\"How about Paris?\") # Tool callback should intercept this\n\n        # 3. Another allowed city (Should work normally again)\n        print(\"\\n--- Turn 3: Requesting weather in London (expect allowed) ---\")\n        await interaction_func(\"Tell me the weather in London.\")\n\n    # --- Execute the `run_tool_guardrail_test` async function ---\n    # Choose ONE of the methods below based on your environment.\n\n    # METHOD 1: Direct await (Default for Notebooks/Async REPLs)\n    # If your environment supports top-level await (like Colab/Jupyter notebooks),\n    # it means an event loop is already running, so you can directly await the function.\n    print(\"Attempting execution using 'await' (default for notebooks)...\")\n    await run_tool_guardrail_test()\n\n    # METHOD 2: asyncio.run (For Standard Python Scripts [.py])\n    # If running this code as a standard Python script from your terminal,\n    # the script context is synchronous. `asyncio.run()` is needed to\n    # create and manage an event loop to execute your async function.\n    # To use this method:\n    # 1. Comment out the `await run_tool_guardrail_test()` line above.\n    # 2. Uncomment the following block:\n    \"\"\"\n    import asyncio\n    if __name__ == \"__main__\": # Ensures this runs only when script is executed directly\n        print(\"Executing using 'asyncio.run()' (for standard Python scripts)...\")\n        try:\n            # This creates an event loop, runs your async function, and closes the loop.\n            asyncio.run(run_tool_guardrail_test())\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n    \"\"\"\n\n    # --- Inspect final session state after the conversation ---\n    # This block runs after either execution method completes.\n    # Optional: Check state for the tool block trigger flag\n    print(\"\\n--- Inspecting Final Session State (After Tool Guardrail Test) ---\")\n    # Use the session service instance associated with this stateful session\n    final_session = await session_service_stateful.get_session(app_name=APP_NAME,\n                                                         user_id=USER_ID_STATEFUL,\n                                                         session_id= SESSION_ID_STATEFUL)\n    if final_session:\n        # Use .get() for safer access\n        print(f\"Tool Guardrail Triggered Flag: {final_session.state.get('guardrail_tool_block_triggered', 'Not Set (or False)')}\")\n        print(f\"Last Weather Report: {final_session.state.get('last_weather_report', 'Not Set')}\") # Should be London weather if successful\n        print(f\"Temperature Unit: {final_session.state.get('user_preference_temperature_unit', 'Not Set')}\") # Should be Fahrenheit\n        # print(f\"Full State Dict: {final_session.state}\") # For detailed view\n    else:\n        print(\"\\n\u274c Error: Could not retrieve final session state.\")\n\nelse:\n    print(\"\\n\u26a0\ufe0f Skipping tool guardrail test. Runner ('runner_root_tool_guardrail') is not available.\")\n</code></pre> <p>Analyze the output:</p> <ol> <li>New York: The <code>before_model_callback</code> allows the request. The LLM requests <code>get_weather_stateful</code>. The <code>before_tool_callback</code> runs, inspects the args (<code>{'city': 'New York'}</code>), sees it's not \"Paris\", prints \"Allowing tool...\" and returns <code>None</code>. The actual <code>get_weather_stateful</code> function executes, reads \"Fahrenheit\" from state, and returns the weather report. The agent relays this, and it gets saved via <code>output_key</code>.  </li> <li>Paris: The <code>before_model_callback</code> allows the request. The LLM requests <code>get_weather_stateful(city='Paris')</code>. The <code>before_tool_callback</code> runs, inspects the args, detects \"Paris\", prints \"Blocking tool execution!\", sets the state flag, and returns the error dictionary <code>{'status': 'error', 'error_message': 'Policy restriction...'}</code>. The actual <code>get_weather_stateful</code> function is never executed. The agent receives the error dictionary as if it were the tool's output and formulates a response based on that error message.  </li> <li>London: Behaves like New York, passing both callbacks and executing the tool successfully. The new London weather report overwrites the <code>last_weather_report</code> in the state.</li> </ol> <p>You've now added a crucial safety layer controlling not just what reaches the LLM, but also how the agent's tools can be used based on the specific arguments generated by the LLM. Callbacks like <code>before_model_callback</code> and <code>before_tool_callback</code> are essential for building robust, safe, and policy-compliant agent applications.</p>"},{"location":"tutorials/agent-team.en/#conclusion-your-agent-team-is-ready","title":"Conclusion: Your Agent Team is Ready!","text":"<p>Congratulations! You've successfully journeyed from building a single, basic weather agent to constructing a sophisticated, multi-agent team using the Agent Development Kit (ADK).</p> <p>Let's recap what you've accomplished:</p> <ul> <li>You started with a fundamental agent equipped with a single tool (<code>get_weather</code>).</li> <li>You explored ADK's multi-model flexibility using LiteLLM, running the same core logic with different LLMs like Gemini, GPT-4o, and Claude.</li> <li>You embraced modularity by creating specialized sub-agents (<code>greeting_agent</code>, <code>farewell_agent</code>) and enabling automatic delegation from a root agent.</li> <li>You gave your agents memory using Session State, allowing them to remember user preferences (<code>temperature_unit</code>) and past interactions (<code>output_key</code>).</li> <li>You implemented crucial safety guardrails using both <code>before_model_callback</code> (blocking specific input keywords) and <code>before_tool_callback</code> (blocking tool execution based on arguments like the city \"Paris\").</li> </ul> <p>Through building this progressive Weather Bot team, you've gained hands-on experience with core ADK concepts essential for developing complex, intelligent applications.</p> <p>Key Takeaways:</p> <ul> <li>Agents &amp; Tools: The fundamental building blocks for defining capabilities and reasoning. Clear instructions and docstrings are paramount.</li> <li>Runners &amp; Session Services: The engine and memory management system that orchestrate agent execution and maintain conversational context.</li> <li>Delegation: Designing multi-agent teams allows for specialization, modularity, and better management of complex tasks. Agent <code>description</code> is key for auto-flow.</li> <li>Session State (<code>ToolContext</code>, <code>output_key</code>): Essential for creating context-aware, personalized, and multi-turn conversational agents.</li> <li>Callbacks (<code>before_model</code>, <code>before_tool</code>): Powerful hooks for implementing safety, validation, policy enforcement, and dynamic modifications before critical operations (LLM calls or tool execution).</li> <li>Flexibility (<code>LiteLlm</code>): ADK empowers you to choose the best LLM for the job, balancing performance, cost, and features.</li> </ul> <p>Where to Go Next?</p> <p>Your Weather Bot team is a great starting point. Here are some ideas to further explore ADK and enhance your application:</p> <ol> <li>Real Weather API: Replace the <code>mock_weather_db</code> in your <code>get_weather</code> tool with a call to a real weather API (like OpenWeatherMap, WeatherAPI).</li> <li>More Complex State: Store more user preferences (e.g., preferred location, notification settings) or conversation summaries in the session state.</li> <li>Refine Delegation: Experiment with different root agent instructions or sub-agent descriptions to fine-tune the delegation logic. Could you add a \"forecast\" agent?</li> <li>Advanced Callbacks:<ul> <li>Use <code>after_model_callback</code> to potentially reformat or sanitize the LLM's response after it's generated.</li> <li>Use <code>after_tool_callback</code> to process or log the results returned by a tool.</li> <li>Implement <code>before_agent_callback</code> or <code>after_agent_callback</code> for agent-level entry/exit logic.</li> </ul> </li> <li>Error Handling: Improve how the agent handles tool errors or unexpected API responses. Maybe add retry logic within a tool.</li> <li>Persistent Session Storage: Explore alternatives to <code>InMemorySessionService</code> for storing session state persistently (e.g., using databases like Firestore or Cloud SQL \u2013 requires custom implementation or future ADK integrations).</li> <li>Streaming UI: Integrate your agent team with a web framework (like FastAPI, as shown in the ADK Streaming Quickstart) to create a real-time chat interface.</li> </ol> <p>The Agent Development Kit provides a robust foundation for building sophisticated LLM-powered applications. By mastering the concepts covered in this tutorial \u2013 tools, state, delegation, and callbacks \u2013 you are well-equipped to tackle increasingly complex agentic systems.</p> <p>Happy building!</p>"},{"location":"tutorials/agent-team/","title":"\u5efa\u7acb\u4f60\u7684\u7b2c\u4e00\u500b\u667a\u6167\u578b\u4ee3\u7406\u5718\u968a\uff1a\u4f7f\u7528 ADK \u6253\u9020\u6f38\u9032\u5f0f\u5929\u6c23\u6a5f\u5668\u4eba","text":"\u5728 Colab \u958b\u555f \u5206\u4eab\u81f3\uff1a <p>\u672c\u6559\u5b78\u5ef6\u4f38\u81ea \u5feb\u901f\u958b\u59cb\u7bc4\u4f8b\uff0c\u9069\u7528\u65bc Agent Development Kit (ADK)\u3002\u73fe\u5728\uff0c\u4f60\u5df2\u7d93\u6e96\u5099\u597d\u66f4\u6df1\u5165\u63a2\u7d22\uff0c\u4e26\u69cb\u5efa\u4e00\u500b\u66f4\u9032\u968e\u7684 \u591a agent \u7cfb\u7d71\u3002</p> <p>\u6211\u5011\u5c07\u8457\u624b\u6253\u9020\u4e00\u500b Weather Bot agent \u5718\u968a\uff0c\u5f9e\u7c21\u55ae\u57fa\u790e\u9010\u6b65\u52a0\u5165\u9032\u968e\u529f\u80fd\u3002\u8d77\u521d\u662f\u4e00\u500b\u80fd\u67e5\u8a62\u5929\u6c23\u7684\u55ae\u4e00 agent\uff0c\u63a5\u8457\u6703\u9010\u6b65\u65b0\u589e\u4ee5\u4e0b\u80fd\u529b\uff1a</p> <ul> <li>\u5229\u7528\u4e0d\u540c\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\uff08\u5982 Gemini\u3001GPT\u3001Claude\uff09\u3002</li> <li>\u70ba\u4e0d\u540c\u4efb\u52d9\uff08\u5982\u554f\u5019\u8207\u9053\u5225\uff09\u8a2d\u8a08\u5c08\u9580\u7684\u5b50 agent\u3002</li> <li>\u8b93 agent \u4e4b\u9593\u80fd\u5920\u667a\u6167\u5730\u5206\u5de5\u5354\u4f5c\u3002</li> <li>\u900f\u904e\u6301\u4e45\u5316 session state\uff0c\u8ce6\u4e88 agent \u8a18\u61b6\u80fd\u529b\u3002</li> <li>\u4f7f\u7528 Callbacks \u5be6\u4f5c\u95dc\u9375\u7684\u5b89\u5168\u9632\u8b77\u63aa\u65bd\u3002</li> </ul> <p>\u70ba\u4ec0\u9ebc\u9078\u64c7 Weather Bot \u5718\u968a\uff1f</p> <p>\u9019\u500b\u6848\u4f8b\u96d6\u7136\u770b\u4f3c\u7c21\u55ae\uff0c\u4f46\u5b83\u63d0\u4f9b\u4e86\u4e00\u500b\u5be6\u7528\u4e14\u6613\u65bc\u7406\u89e3\u7684\u5834\u666f\uff0c\u8b93\u4f60\u80fd\u6df1\u5165\u5b78\u7fd2\u69cb\u5efa\u8907\u96dc\u3001\u771f\u5be6\u4e16\u754c agent \u61c9\u7528\u6642\uff0c\u6240\u9700\u7684 ADK \u6838\u5fc3\u6982\u5ff5\u3002\u4f60\u5c07\u5b78\u6703\u5982\u4f55\u8a2d\u8a08\u4e92\u52d5\u6d41\u7a0b\u3001\u7ba1\u7406\u72c0\u614b\u3001\u78ba\u4fdd\u5b89\u5168\uff0c\u4ee5\u53ca\u5354\u8abf\u591a\u500b AI\u300c\u5927\u8166\u300d\u5171\u540c\u904b\u4f5c\u3002</p> <p>ADK \u662f\u4ec0\u9ebc\uff1f</p> <p>\u518d\u6b21\u63d0\u9192\uff0cAgent Development Kit (ADK) \u662f\u4e00\u5957\u5c08\u70ba\u7c21\u5316\u5927\u578b\u8a9e\u8a00\u6a21\u578b (Large Language Model, LLM) \u61c9\u7528\u958b\u767c\u800c\u8a2d\u8a08\u7684 Python \u6846\u67b6\u3002\u5b83\u63d0\u4f9b\u5f37\u5927\u7684\u57fa\u790e\u7d44\u4ef6\uff0c\u8b93\u4f60\u80fd\u5920\u5efa\u7acb\u5177\u5099\u63a8\u7406\u3001\u898f\u5283\u3001\u5de5\u5177\u904b\u7528\u3001\u52d5\u614b\u8207\u4f7f\u7528\u8005\u4e92\u52d5\uff0c\u4ee5\u53ca\u5718\u968a\u5354\u4f5c\u80fd\u529b\u7684 agent\u3002</p> <p>\u5728\u672c\u9032\u968e\u6559\u5b78\u4e2d\uff0c\u4f60\u5c07\u5b78\u6703\uff1a</p> <ul> <li>\u2705 \u5de5\u5177\u5b9a\u7fa9\u8207\u4f7f\u7528\uff1a \u7de8\u5beb Python \u51fd\u5f0f\uff08<code>tools</code>\uff09\uff0c\u8ce6\u4e88 agent \u7279\u5b9a\u80fd\u529b\uff08\u5982\u53d6\u5f97\u8cc7\u6599\uff09\uff0c\u4e26\u6559\u5c0e agent \u5982\u4f55\u6709\u6548\u904b\u7528\u9019\u4e9b\u5de5\u5177\u3002</li> <li>\u2705 \u591a LLM \u5f48\u6027\u5207\u63db\uff1a \u900f\u904e LiteLLM \u6574\u5408\uff0c\u8a2d\u5b9a agent \u4f7f\u7528\u591a\u7a2e\u4e3b\u6d41 LLM\uff08Gemini\u3001GPT-4o\u3001Claude Sonnet\uff09\uff0c\u8b93\u4f60\u80fd\u91dd\u5c0d\u4e0d\u540c\u4efb\u52d9\u9078\u64c7\u6700\u4f73\u6a21\u578b\u3002</li> <li>\u2705 agent \u5206\u5de5\u8207\u5354\u4f5c\uff1a \u8a2d\u8a08\u5c08\u696d\u5206\u5de5\u7684\u5b50 agent\uff0c\u4e26\u555f\u7528\u81ea\u52d5\u8def\u7531\uff08<code>auto flow</code>\uff09\uff0c\u5c07\u4f7f\u7528\u8005\u8acb\u6c42\u5206\u6d3e\u7d66\u5718\u968a\u4e2d\u6700\u5408\u9069\u7684 agent\u3002</li> <li>\u2705 Session State \u8a18\u61b6\u529f\u80fd\uff1a \u5229\u7528 <code>Session State</code> \u8207 <code>ToolContext</code>\uff0c\u8b93 agent \u80fd\u5920\u5728\u591a\u8f2a\u5c0d\u8a71\u4e2d\u8a18\u4f4f\u8cc7\u8a0a\uff0c\u5be6\u73fe\u66f4\u5177\u60c5\u5883\u611f\u7684\u4e92\u52d5\u3002</li> <li>\u2705 \u5b89\u5168\u9632\u8b77\uff08Guardrails\uff09\u8207 Callbacks\uff1a \u5be6\u4f5c <code>before_model_callback</code> \u8207 <code>before_tool_callback</code>\uff0c\u6839\u64da\u9810\u8a2d\u898f\u5247\u6aa2\u67e5\u3001\u4fee\u6539\u6216\u963b\u64cb\u8acb\u6c42\uff0f\u5de5\u5177\u4f7f\u7528\uff0c\u63d0\u5347\u61c9\u7528\u5b89\u5168\u6027\u8207\u53ef\u63a7\u6027\u3002</li> </ul> <p>\u6700\u7d42\u6210\u679c\u9810\u671f\uff1a</p> <p>\u5b8c\u6210\u672c\u6559\u5b78\u5f8c\uff0c\u4f60\u5c07\u6253\u9020\u51fa\u4e00\u500b\u529f\u80fd\u5b8c\u6574\u7684\u591a agent Weather Bot \u7cfb\u7d71\u3002\u9019\u500b\u7cfb\u7d71\u4e0d\u50c5\u80fd\u63d0\u4f9b\u5929\u6c23\u8cc7\u8a0a\uff0c\u9084\u80fd\u8655\u7406\u5c0d\u8a71\u79ae\u7bc0\u3001\u8a18\u4f4f\u6700\u5f8c\u67e5\u8a62\u7684\u57ce\u5e02\uff0c\u4e26\u5728\u660e\u78ba\u7684\u5b89\u5168\u754c\u9650\u5167\u904b\u4f5c\uff0c\u6240\u6709\u6d41\u7a0b\u7686\u7531 ADK \u5354\u8abf\u5be6\u73fe\u3002</p> <p>\u5148\u6c7a\u689d\u4ef6\uff1a</p> <ul> <li>\u2705 \u5177\u5099\u7d2e\u5be6\u7684 Python \u7a0b\u5f0f\u8a2d\u8a08\u57fa\u790e\u3002</li> <li>\u2705 \u719f\u6089\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\u3001API \u8207 agent \u6982\u5ff5\u3002</li> <li>\u2757 \u6700\u91cd\u8981\uff1a\u5df2\u5b8c\u6210 ADK \u5feb\u901f\u958b\u59cb\u6559\u5b78\uff0c\u6216\u5177\u5099\u7b49\u540c ADK \u57fa\u790e\u77e5\u8b58\uff08Agent\u3001Runner\u3001SessionService\u3001\u57fa\u672c\u5de5\u5177\u4f7f\u7528\uff09\u3002 \u672c\u6559\u5b78\u5c07\u76f4\u63a5\u5efa\u7acb\u5728\u9019\u4e9b\u6982\u5ff5\u4e4b\u4e0a\u3002</li> <li>\u2705 \u4f60\u9810\u8a08\u4f7f\u7528\u7684 LLM \u4e4b API KEY\uff08\u4f8b\u5982\uff1aGemini \u9700 Google AI Studio\u3001OpenAI Platform\u3001Anthropic Console\uff09\u3002</li> </ul> <p>\u57f7\u884c\u74b0\u5883\u8aaa\u660e\uff1a</p> <p>\u672c\u6559\u5b78\u8a2d\u8a08\u9069\u7528\u65bc Google Colab\u3001Colab Enterprise \u6216 Jupyter notebook \u7b49\u4e92\u52d5\u5f0f notebook \u74b0\u5883\u3002\u8acb\u6ce8\u610f\u4ee5\u4e0b\u4e8b\u9805\uff1a</p> <ul> <li>\u57f7\u884c\u975e\u540c\u6b65\u7a0b\u5f0f\u78bc\uff1a notebook \u74b0\u5883\u5c0d\u975e\u540c\u6b65\u7a0b\u5f0f\u78bc\u7684\u8655\u7406\u65b9\u5f0f\u6709\u6240\u4e0d\u540c\u3002\u4f60\u6703\u770b\u5230\u7bc4\u4f8b\u540c\u6642\u4f7f\u7528 <code>await</code>\uff08\u9069\u7528\u65bc\u5df2\u7d93\u6709 event loop \u7684 notebook \u74b0\u5883\uff09\u6216 <code>asyncio.run()</code>\uff08\u901a\u5e38\u7528\u65bc\u7368\u7acb <code>.py</code> \u8173\u672c\u6216\u7279\u5b9a notebook \u8a2d\u5b9a\uff09\u3002\u7a0b\u5f0f\u78bc\u5340\u584a\u6703\u91dd\u5c0d\u5169\u7a2e\u60c5\u5883\u63d0\u4f9b\u6307\u5f15\u3002</li> <li>\u624b\u52d5\u5efa\u7acb Runner\uff0fSession\uff1a \u6b65\u9a5f\u4e2d\u6703\u660e\u78ba\u5efa\u7acb <code>Runner</code> \u8207 <code>SessionService</code> \u5be6\u4f8b\u3002\u9019\u7a2e\u505a\u6cd5\u80fd\u8b93\u4f60\u7d30\u7dfb\u638c\u63a7 agent \u7684\u57f7\u884c\u751f\u547d\u9031\u671f\u3001session \u7ba1\u7406\u8207\u72c0\u614b\u6301\u4e45\u5316\u3002</li> </ul> <p>\u66ff\u4ee3\u65b9\u6848\uff1a\u4f7f\u7528 ADK \u5167\u5efa\u5de5\u5177\uff08Web UI\uff0fCLI\uff0fAPI Server\uff09</p> <p>\u5982\u679c\u4f60\u504f\u597d\u81ea\u52d5\u8655\u7406 runner \u8207 session \u7ba1\u7406\u7684\u6a19\u6e96\u5316\u6d41\u7a0b\uff0c\u53ef\u53c3\u8003 \u9019\u88e1 \u63d0\u4f9b\u7684\u7b49\u6548\u7a0b\u5f0f\u78bc\u3002\u8a72\u7248\u672c\u8a2d\u8a08\u53ef\u76f4\u63a5\u7528 <code>adk web</code>\uff08\u555f\u52d5\u7db2\u9801 UI\uff09\u3001<code>adk run</code>\uff08\u547d\u4ee4\u5217\u4e92\u52d5\uff09\u6216 <code>adk api_server</code>\uff08\u958b\u653e API\uff09\u7b49\u6307\u4ee4\u57f7\u884c\u3002\u8acb\u4f9d\u7167\u8a72\u8cc7\u6e90\u4e2d\u7684 <code>README.md</code> \u6307\u793a\u64cd\u4f5c\u3002</p> <p>\u6e96\u5099\u597d\u6253\u9020\u4f60\u7684 agent \u5718\u968a\u4e86\u55ce\uff1f\u8b93\u6211\u5011\u958b\u59cb\u5427\uff01</p> <p>\u6ce8\u610f\uff1a \u672c\u6559\u5b78\u9069\u7528\u65bc adk 1.0.0 \u4ee5\u4e0a\u7248\u672c</p> <pre><code># @title Step 0: Setup and Installation\n# Install ADK and LiteLLM for multi-model support\n\n!pip install google-adk -q\n!pip install litellm -q\n\nprint(\"Installation complete.\")\n</code></pre> <pre><code># @title Import necessary libraries\nimport os\nimport asyncio\nfrom google.adk.agents import Agent\nfrom google.adk.models.lite_llm import LiteLlm # For multi-model support\nfrom google.adk.sessions import InMemorySessionService\nfrom google.adk.runners import Runner\nfrom google.genai import types # For creating message Content/Parts\n\nimport warnings\n# Ignore all warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport logging\nlogging.basicConfig(level=logging.ERROR)\n\nprint(\"Libraries imported.\")\n</code></pre> <pre><code># @title Configure API Keys (Replace with your actual keys!)\n\n# --- IMPORTANT: Replace placeholders with your real API keys ---\n\n# Gemini API Key (Get from Google AI Studio: https://aistudio.google.com/app/apikey)\nos.environ[\"GOOGLE_API_KEY\"] = \"YOUR_GOOGLE_API_KEY\" # &lt;--- REPLACE\n\n# [Optional]\n# OpenAI API Key (Get from OpenAI Platform: https://platform.openai.com/api-keys)\nos.environ['OPENAI_API_KEY'] = 'YOUR_OPENAI_API_KEY' # &lt;--- REPLACE\n\n# [Optional]\n# Anthropic API Key (Get from Anthropic Console: https://console.anthropic.com/settings/keys)\nos.environ['ANTHROPIC_API_KEY'] = 'YOUR_ANTHROPIC_API_KEY' # &lt;--- REPLACE\n\n# --- Verify Keys (Optional Check) ---\nprint(\"API Keys Set:\")\nprint(f\"Google API Key set: {'Yes' if os.environ.get('GOOGLE_API_KEY') and os.environ['GOOGLE_API_KEY'] != 'YOUR_GOOGLE_API_KEY' else 'No (REPLACE PLACEHOLDER!)'}\")\nprint(f\"OpenAI API Key set: {'Yes' if os.environ.get('OPENAI_API_KEY') and os.environ['OPENAI_API_KEY'] != 'YOUR_OPENAI_API_KEY' else 'No (REPLACE PLACEHOLDER!)'}\")\nprint(f\"Anthropic API Key set: {'Yes' if os.environ.get('ANTHROPIC_API_KEY') and os.environ['ANTHROPIC_API_KEY'] != 'YOUR_ANTHROPIC_API_KEY' else 'No (REPLACE PLACEHOLDER!)'}\")\n\n# Configure ADK to use API keys directly (not Vertex AI for this multi-model setup)\nos.environ[\"GOOGLE_GENAI_USE_VERTEXAI\"] = \"False\"\n\n\n# @markdown **Security Note:** It's best practice to manage API keys securely (e.g., using Colab Secrets or environment variables) rather than hardcoding them directly in the notebook. Replace the placeholder strings above.\n</code></pre> <pre><code># --- Define Model Constants for easier use ---\n\n# More supported models can be referenced here: https://ai.google.dev/gemini-api/docs/models#model-variations\nMODEL_GEMINI_2_0_FLASH = \"gemini-2.0-flash\"\n\n# More supported models can be referenced here: https://docs.litellm.ai/docs/providers/openai#openai-chat-completion-models\nMODEL_GPT_4O = \"openai/gpt-4.1\" # You can also try: gpt-4.1-mini, gpt-4o etc.\n\n# More supported models can be referenced here: https://docs.litellm.ai/docs/providers/anthropic\nMODEL_CLAUDE_SONNET = \"anthropic/claude-sonnet-4-20250514\" # You can also try: claude-opus-4-20250514 , claude-3-7-sonnet-20250219 etc\n\nprint(\"\\nEnvironment configured.\")\n</code></pre>"},{"location":"tutorials/agent-team/#1-agent","title":"\u6b65\u9a5f 1\uff1a\u4f60\u7684\u7b2c\u4e00\u500b Agent \u2014\u2014 \u57fa\u672c\u5929\u6c23\u67e5\u8a62","text":"<p>\u6211\u5011\u5148\u5f9e\u5efa\u7acb Weather Bot \u7684\u57fa\u790e\u5143\u4ef6\u958b\u59cb\uff1a\u4e00\u500b\u80fd\u5920\u57f7\u884c\u7279\u5b9a\u4efb\u52d9\u7684 agent\u2014\u2014\u67e5\u8a62\u5929\u6c23\u8cc7\u8a0a\u3002\u9019\u5305\u542b\u5169\u500b\u6838\u5fc3\u90e8\u5206\uff1a</p> <ol> <li>\u5de5\u5177\uff08Tool\uff09\uff1a \u4e00\u500b Python \u51fd\u5f0f\uff0c\u8ce6\u4e88 agent \u53d6\u5f97\u5929\u6c23\u8cc7\u6599\u7684\u80fd\u529b\u3002  </li> <li>Agent\uff1a \u7406\u89e3\u4f7f\u7528\u8005\u9700\u6c42\u3001\u77e5\u9053\u81ea\u5df1\u64c1\u6709\u5929\u6c23\u5de5\u5177\uff0c\u4e26\u80fd\u6c7a\u5b9a\u4f55\u6642\u53ca\u5982\u4f55\u4f7f\u7528\u8a72\u5de5\u5177\u7684 AI\u300c\u5927\u8166\u300d\u3002</li> </ol> <p>1. \u5b9a\u7fa9\u5de5\u5177\uff08<code>get_weather</code>\uff09</p> <p>\u5728 Agent Development Kit (ADK) \u4e2d\uff0c\u5de5\u5177\uff08Tools\uff09 \u662f\u8b93 agent \u5177\u5099\u5177\u9ad4\u80fd\u529b\u7684\u57fa\u77f3\uff0c\u8d85\u8d8a\u55ae\u7d14\u7684\u6587\u5b57\u751f\u6210\u3002\u5de5\u5177\u901a\u5e38\u662f\u57f7\u884c\u7279\u5b9a\u52d5\u4f5c\u7684\u6a19\u6e96 Python \u51fd\u5f0f\uff0c\u4f8b\u5982\u547c\u53eb API\u3001\u67e5\u8a62\u8cc7\u6599\u5eab\u6216\u9032\u884c\u8a08\u7b97\u3002</p> <p>\u6211\u5011\u7684\u7b2c\u4e00\u500b\u5de5\u5177\u5c07\u63d0\u4f9b\u6a21\u64ec\u5929\u6c23\u5831\u544a\u3002\u9019\u8b93\u6211\u5011\u53ef\u4ee5\u5c08\u6ce8\u65bc agent \u7684\u67b6\u69cb\u8a2d\u8a08\uff0c\u800c\u66ab\u6642\u4e0d\u9700\u8981\u5916\u90e8 API \u91d1\u9470\u3002\u65e5\u5f8c\uff0c\u4f60\u53ef\u4ee5\u8f15\u9b06\u5c07\u9019\u500b\u6a21\u64ec\u51fd\u5f0f\u66ff\u63db\u70ba\u771f\u6b63\u547c\u53eb\u5929\u6c23\u670d\u52d9\u7684\u7248\u672c\u3002</p> <p>\u95dc\u9375\u6982\u5ff5\uff1aDocstring \u975e\u5e38\u91cd\u8981\uff01 agent \u6240\u7528\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6975\u5ea6\u4f9d\u8cf4\u51fd\u5f0f\u7684docstring\u4f86\u7406\u89e3\uff1a</p> <ul> <li>\u9019\u500b\u5de5\u5177\u505a\u4ec0\u9ebc\u3002  </li> <li>\u4ec0\u9ebc\u6642\u5019\u8a72\u4f7f\u7528\u5b83\u3002  </li> <li>\u5b83\u9700\u8981\u54ea\u4e9b\u53c3\u6578\uff08<code>city: str</code>\uff09\u3002  </li> <li>\u5b83\u6703\u56de\u50b3\u4ec0\u9ebc\u8cc7\u8a0a\u3002</li> </ul> <p>\u6700\u4f73\u5be6\u8e10\uff1a \u70ba\u4f60\u7684\u5de5\u5177\u64b0\u5beb\u6e05\u695a\u3001\u5177\u63cf\u8ff0\u6027\u4e14\u6e96\u78ba\u7684 docstring\u3002\u9019\u5c0d\u65bc LLM \u80fd\u5426\u6b63\u78ba\u4f7f\u7528\u8a72\u5de5\u5177\u81f3\u95dc\u91cd\u8981\u3002</p> <pre><code># @title Define the get_weather Tool\ndef get_weather(city: str) -&gt; dict:\n    \"\"\"Retrieves the current weather report for a specified city.\n\n    Args:\n        city (str): The name of the city (e.g., \"New York\", \"London\", \"Tokyo\").\n\n    Returns:\n        dict: A dictionary containing the weather information.\n              Includes a 'status' key ('success' or 'error').\n              If 'success', includes a 'report' key with weather details.\n              If 'error', includes an 'error_message' key.\n    \"\"\"\n    print(f\"--- Tool: get_weather called for city: {city} ---\") # Log tool execution\n    city_normalized = city.lower().replace(\" \", \"\") # Basic normalization\n\n    # Mock weather data\n    mock_weather_db = {\n        \"newyork\": {\"status\": \"success\", \"report\": \"The weather in New York is sunny with a temperature of 25\u00b0C.\"},\n        \"london\": {\"status\": \"success\", \"report\": \"It's cloudy in London with a temperature of 15\u00b0C.\"},\n        \"tokyo\": {\"status\": \"success\", \"report\": \"Tokyo is experiencing light rain and a temperature of 18\u00b0C.\"},\n    }\n\n    if city_normalized in mock_weather_db:\n        return mock_weather_db[city_normalized]\n    else:\n        return {\"status\": \"error\", \"error_message\": f\"Sorry, I don't have weather information for '{city}'.\"}\n\n# Example tool usage (optional test)\nprint(get_weather(\"New York\"))\nprint(get_weather(\"Paris\"))\n</code></pre> <p>2. \u5b9a\u7fa9 Agent\uff08<code>weather_agent</code>\uff09</p> <p>\u73fe\u5728\uff0c\u8b93\u6211\u5011\u4f86\u5efa\u7acb Agent \u672c\u8eab\u3002\u5728 Agent Development Kit (ADK) \u4e2d\uff0c<code>Agent</code> \u8ca0\u8cac\u5354\u8abf\u4f7f\u7528\u8005\u3001\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u4ee5\u53ca\u53ef\u7528\u5de5\u5177\uff08tools\uff09\u4e4b\u9593\u7684\u4e92\u52d5\u3002</p> <p>\u6211\u5011\u6703\u4ee5\u5e7e\u500b\u95dc\u9375\u53c3\u6578\u4f86\u8a2d\u5b9a\u5b83\uff1a</p> <ul> <li><code>name</code>\uff1a\u6b64 agent \u7684\u552f\u4e00\u8b58\u5225\u78bc\uff08\u4f8b\u5982\uff1a\"weather_agent_v1\"\uff09\u3002</li> <li><code>model</code>\uff1a\u6307\u5b9a\u8981\u4f7f\u7528\u54ea\u500b\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\uff08\u4f8b\u5982\uff1a<code>MODEL_GEMINI_2_0_FLASH</code>\uff09\u3002\u6211\u5011\u9019\u88e1\u6703\u4ee5\u7279\u5b9a\u7684 Gemini \u6a21\u578b\u4f5c\u70ba\u8d77\u9ede\u3002</li> <li><code>description</code>\uff1a\u7c21\u660e\u627c\u8981\u5730\u8aaa\u660e\u6b64 agent \u7684\u6574\u9ad4\u7528\u9014\u3002\u7576\u5176\u4ed6 agent \u9700\u8981\u5224\u65b7\u662f\u5426\u8981\u5c07\u4efb\u52d9\u59d4\u6d3e\u7d66\u9019\u500b agent \u6642\uff0c\u9019\u4e00\u9ede\u6703\u8b8a\u5f97\u975e\u5e38\u91cd\u8981\u3002</li> <li><code>instruction</code>\uff1a\u91dd\u5c0d\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7684\u8a73\u7d30\u6307\u5f15\uff0c\u5305\u542b\u5176\u884c\u70ba\u3001\u89d2\u8272\u8a2d\u5b9a\u3001\u76ee\u6a19\uff0c\u4ee5\u53ca\u5982\u4f55\u8207\u4f55\u6642\u4f7f\u7528\u5176\u6307\u6d3e\u7684<code>tools</code>\u3002</li> <li><code>tools</code>\uff1a\u4e00\u500b\u5217\u8868\uff0c\u5305\u542b\u6b64 agent \u88ab\u5141\u8a31\u4f7f\u7528\u7684\u5be6\u969b Python \u5de5\u5177\u51fd\u5f0f\uff08\u4f8b\u5982\uff1a<code>[get_weather]</code>\uff09\u3002</li> </ul> <p>\u6700\u4f73\u5be6\u8e10\uff1a \u8acb\u63d0\u4f9b\u660e\u78ba\u4e14\u5177\u9ad4\u7684 <code>instruction</code> \u63d0\u793a\u3002\u8aaa\u660e\u8d8a\u8a73\u7d30\uff0c\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u8d8a\u80fd\u7406\u89e3\u5176\u89d2\u8272\uff0c\u4ee5\u53ca\u5982\u4f55\u6709\u6548\u904b\u7528\u5176\u5de5\u5177\u3002\u82e5\u6709\u932f\u8aa4\u8655\u7406\u9700\u6c42\uff0c\u4e5f\u8acb\u660e\u78ba\u8aaa\u660e\u3002</p> <p>\u6700\u4f73\u5be6\u8e10\uff1a \u8acb\u9078\u64c7\u5177\u63cf\u8ff0\u6027\u7684 <code>name</code> \u8207 <code>description</code> \u503c\u3002\u9019\u4e9b\u503c\u6703\u5728 ADK \u5167\u90e8\u4f7f\u7528\uff0c\u4e26\u5c0d\u65bc\u81ea\u52d5\u59d4\u6d3e\u7b49\u529f\u80fd\uff08\u5f8c\u7e8c\u6703\u4ecb\u7d39\uff09\u975e\u5e38\u91cd\u8981\u3002</p> <pre><code># @title Define the Weather Agent\n# Use one of the model constants defined earlier\nAGENT_MODEL = MODEL_GEMINI_2_0_FLASH # Starting with Gemini\n\nweather_agent = Agent(\n    name=\"weather_agent_v1\",\n    model=AGENT_MODEL, # Can be a string for Gemini or a LiteLlm object\n    description=\"Provides weather information for specific cities.\",\n    instruction=\"You are a helpful weather assistant. \"\n                \"When the user asks for the weather in a specific city, \"\n                \"use the 'get_weather' tool to find the information. \"\n                \"If the tool returns an error, inform the user politely. \"\n                \"If the tool is successful, present the weather report clearly.\",\n    tools=[get_weather], # Pass the function directly\n)\n\nprint(f\"Agent '{weather_agent.name}' created using model '{AGENT_MODEL}'.\")\n</code></pre> <p>3. \u8a2d\u5b9a Runner \u8207 Session Service</p> <p>\u70ba\u4e86\u7ba1\u7406\u5c0d\u8a71\u4e26\u57f7\u884c agent\uff0c\u6211\u5011\u9084\u9700\u8981\u53e6\u5916\u5169\u500b\u5143\u4ef6\uff1a</p> <ul> <li><code>SessionService</code>\uff1a\u8ca0\u8cac\u7ba1\u7406\u4e0d\u540c\u4f7f\u7528\u8005\u8207 session \u7684\u5c0d\u8a71\u6b77\u53f2\u8207\u72c0\u614b\u3002<code>InMemorySessionService</code> \u662f\u4e00\u500b\u7c21\u55ae\u7684\u5be6\u4f5c\uff0c\u6703\u5c07\u6240\u6709\u8cc7\u6599\u5132\u5b58\u5728\u8a18\u61b6\u9ad4\u4e2d\uff0c\u9069\u5408\u7528\u65bc\u6e2c\u8a66\u8207\u7c21\u55ae\u61c9\u7528\u3002\u5b83\u6703\u8ffd\u8e64\u6240\u6709\u4ea4\u63db\u7684\u8a0a\u606f\u3002\u6211\u5011\u6703\u5728\u6b65\u9a5f 4 \u66f4\u6df1\u5165\u63a2\u8a0e\u72c0\u614b\u6301\u4e45\u5316\uff08state persistence\uff09\u3002</li> <li><code>Runner</code>\uff1a\u5354\u8abf\u4e92\u52d5\u6d41\u7a0b\u7684\u5f15\u64ce\u3002\u5b83\u63a5\u6536\u4f7f\u7528\u8005\u8f38\u5165\uff0c\u5c07\u5176\u8def\u7531\u5230\u9069\u7576\u7684 agent\uff0c\u4f9d\u64da agent \u7684\u908f\u8f2f\u7ba1\u7406\u5c0d\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u8207 tools \u7684\u547c\u53eb\uff0c\u900f\u904e <code>SessionService</code> \u8655\u7406 session \u66f4\u65b0\uff0c\u4e26\u7522\u751f\u4ee3\u8868\u4e92\u52d5\u9032\u5ea6\u7684\u4e8b\u4ef6\uff08events\uff09\u3002</li> </ul> <pre><code># @title Setup Session Service and Runner\n\n# --- Session Management ---\n# Key Concept: SessionService stores conversation history &amp; state.\n# InMemorySessionService is simple, non-persistent storage for this tutorial.\nsession_service = InMemorySessionService()\n\n# Define constants for identifying the interaction context\nAPP_NAME = \"weather_tutorial_app\"\nUSER_ID = \"user_1\"\nSESSION_ID = \"session_001\" # Using a fixed ID for simplicity\n\n# Create the specific session where the conversation will happen\nsession = await session_service.create_session(\n    app_name=APP_NAME,\n    user_id=USER_ID,\n    session_id=SESSION_ID\n)\nprint(f\"Session created: App='{APP_NAME}', User='{USER_ID}', Session='{SESSION_ID}'\")\n\n# --- Runner ---\n# Key Concept: Runner orchestrates the agent execution loop.\nrunner = Runner(\n    agent=weather_agent, # The agent we want to run\n    app_name=APP_NAME,   # Associates runs with our app\n    session_service=session_service # Uses our session manager\n)\nprint(f\"Runner created for agent '{runner.agent.name}'.\")\n</code></pre> <p>4. \u8207 agent \u4e92\u52d5</p> <p>\u6211\u5011\u9700\u8981\u4e00\u7a2e\u65b9\u5f0f\u4f86\u50b3\u9001\u8a0a\u606f\u7d66 agent \u4e26\u63a5\u6536\u5176\u56de\u61c9\u3002\u7531\u65bc\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb\u8207\u5de5\u5177\u57f7\u884c\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u6642\u9593\uff0cAgent Development Kit (ADK) \u7684 <code>Runner</code> \u662f\u4ee5\u975e\u540c\u6b65\u65b9\u5f0f\u904b\u4f5c\u7684\u3002</p> <p>\u6211\u5011\u5c07\u5b9a\u7fa9\u4e00\u500b <code>async</code> \u8f14\u52a9\u51fd\u5f0f\uff08<code>call_agent_async</code>\uff09\uff0c\u5176\u529f\u80fd\u5982\u4e0b\uff1a</p> <ol> <li>\u63a5\u6536\u4f7f\u7528\u8005\u67e5\u8a62\u5b57\u4e32\u3002</li> <li>\u5c07\u5176\u5305\u88dd\u6210 ADK \u7684 <code>Content</code> \u683c\u5f0f\u3002</li> <li>\u547c\u53eb <code>runner.run_async</code>\uff0c\u4e26\u63d0\u4f9b\u4f7f\u7528\u8005\uff0fsession context \u4ee5\u53ca\u65b0\u7684\u8a0a\u606f\u3002</li> <li>\u8fed\u4ee3 ADK runner \u6240\u7522\u751f\u7684 Events\u3002\u6bcf\u500b Event \u4ee3\u8868 agent \u57f7\u884c\u904e\u7a0b\u4e2d\u7684\u4e00\u500b\u6b65\u9a5f\uff08\u4f8b\u5982\uff1a\u5de5\u5177\u547c\u53eb (tool calls) \u8acb\u6c42\u3001\u6536\u5230\u5de5\u5177\u7d50\u679c\u3001\u4e2d\u9593 LLM \u601d\u8003\u3001\u6700\u7d42\u56de\u61c9\uff09\u3002</li> <li>\u4f7f\u7528 <code>event.is_final_response()</code> \u8fa8\u8b58\u4e26\u5370\u51fa \u6700\u7d42\u56de\u61c9 \u7684 event\u3002</li> </ol> <p>\u70ba\u4ec0\u9ebc\u8981\u7528 <code>async</code>\uff1f \u8207\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u53ca\u6f5b\u5728\u5de5\u5177\uff08\u5982\u5916\u90e8 API\uff09\u7684\u4e92\u52d5\u5c6c\u65bc I/O \u5bc6\u96c6\u64cd\u4f5c\u3002\u4f7f\u7528 <code>asyncio</code> \u53ef\u4ee5\u8b93\u7a0b\u5f0f\u6709\u6548\u7387\u5730\u8655\u7406\u9019\u4e9b\u64cd\u4f5c\uff0c\u800c\u4e0d\u6703\u963b\u585e\u57f7\u884c\u6d41\u7a0b\u3002</p> <pre><code># @title Define Agent Interaction Function\n\nfrom google.genai import types # For creating message Content/Parts\n\nasync def call_agent_async(query: str, runner, user_id, session_id):\n  \"\"\"Sends a query to the agent and prints the final response.\"\"\"\n  print(f\"\\n&gt;&gt;&gt; User Query: {query}\")\n\n  # Prepare the user's message in ADK format\n  content = types.Content(role='user', parts=[types.Part(text=query)])\n\n  final_response_text = \"Agent did not produce a final response.\" # Default\n\n  # Key Concept: run_async executes the agent logic and yields Events.\n  # We iterate through events to find the final answer.\n  async for event in runner.run_async(user_id=user_id, session_id=session_id, new_message=content):\n      # You can uncomment the line below to see *all* events during execution\n      # print(f\"  [Event] Author: {event.author}, Type: {type(event).__name__}, Final: {event.is_final_response()}, Content: {event.content}\")\n\n      # Key Concept: is_final_response() marks the concluding message for the turn.\n      if event.is_final_response():\n          if event.content and event.content.parts:\n             # Assuming text response in the first part\n             final_response_text = event.content.parts[0].text\n          elif event.actions and event.actions.escalate: # Handle potential errors/escalations\n             final_response_text = f\"Agent escalated: {event.error_message or 'No specific message.'}\"\n          # Add more checks here if needed (e.g., specific error codes)\n          break # Stop processing events once the final response is found\n\n  print(f\"&lt;&lt;&lt; Agent Response: {final_response_text}\")\n</code></pre> <p>5. \u57f7\u884c\u5c0d\u8a71</p> <p>\u6700\u5f8c\uff0c\u8b93\u6211\u5011\u900f\u904e\u5411 agent \u767c\u9001\u5e7e\u500b\u67e5\u8a62\u4f86\u6e2c\u8a66\u6211\u5011\u7684\u8a2d\u5b9a\u3002\u6211\u5011\u5c07 <code>async</code> \u547c\u53eb\u5305\u88dd\u5728\u4e3b\u8981\u7684 <code>async</code> \u51fd\u5f0f\u4e2d\uff0c\u4e26\u4f7f\u7528 <code>await</code> \u57f7\u884c\u5b83\u3002</p> <p>\u8acb\u89c0\u5bdf\u8f38\u51fa\u7d50\u679c\uff1a</p> <ul> <li>\u67e5\u770b\u4f7f\u7528\u8005\u67e5\u8a62\u3002  </li> <li>\u6ce8\u610f\u7576 agent \u4f7f\u7528\u5de5\u5177\u6642\u7684 <code>--- Tool: get_weather called... ---</code> \u65e5\u8a8c\u3002  </li> <li>\u89c0\u5bdf agent \u7684\u6700\u7d42\u56de\u61c9\uff0c\u5305\u62ec\u5b83\u5982\u4f55\u8655\u7406\u7121\u6cd5\u53d6\u5f97\u5929\u6c23\u8cc7\u6599\uff08\u5982\u5df4\u9ece\uff09\u7684\u60c5\u6cc1\u3002</li> </ul> <pre><code># @title Run the Initial Conversation\n\n# We need an async function to await our interaction helper\nasync def run_conversation():\n    await call_agent_async(\"What is the weather like in London?\",\n                                       runner=runner,\n                                       user_id=USER_ID,\n                                       session_id=SESSION_ID)\n\n    await call_agent_async(\"How about Paris?\",\n                                       runner=runner,\n                                       user_id=USER_ID,\n                                       session_id=SESSION_ID) # Expecting the tool's error message\n\n    await call_agent_async(\"Tell me the weather in New York\",\n                                       runner=runner,\n                                       user_id=USER_ID,\n                                       session_id=SESSION_ID)\n\n# Execute the conversation using await in an async context (like Colab/Jupyter)\nawait run_conversation()\n\n# --- OR ---\n\n# Uncomment the following lines if running as a standard Python script (.py file):\n# import asyncio\n# if __name__ == \"__main__\":\n#     try:\n#         asyncio.run(run_conversation())\n#     except Exception as e:\n#         print(f\"An error occurred: {e}\")\n</code></pre> <p>\u606d\u559c\u4f60\uff01\u4f60\u5df2\u6210\u529f\u5efa\u7acb\u4e26\u8207\u4f60\u7684\u7b2c\u4e00\u500b Agent Development Kit (ADK) agent \u4e92\u52d5\u3002\u5b83\u80fd\u7406\u89e3\u4f7f\u7528\u8005\u7684\u8acb\u6c42\uff0c\u4f7f\u7528\u5de5\u5177\u4f86\u67e5\u627e\u8cc7\u8a0a\uff0c\u4e26\u6839\u64da\u5de5\u5177\u7684\u7d50\u679c\u505a\u51fa\u9069\u7576\u56de\u61c9\u3002</p> <p>\u5728\u4e0b\u4e00\u6b65\u4e2d\uff0c\u6211\u5011\u5c07\u63a2\u7d22\u5982\u4f55\u8f15\u9b06\u5207\u63db\u9019\u500b agent \u80cc\u5f8c\u6240\u4f7f\u7528\u7684\u8a9e\u8a00\u6a21\u578b\uff08Language Model\uff09\u3002</p>"},{"location":"tutorials/agent-team/#2-litellm","title":"\u6b65\u9a5f 2\uff1a\u4f7f\u7528 LiteLLM \u5be6\u73fe\u591a\u6a21\u578b\u652f\u63f4\u3010\u9078\u7528\u3011","text":"<p>\u5728\u6b65\u9a5f 1 \u4e2d\uff0c\u6211\u5011\u5efa\u7acb\u4e86\u4e00\u500b\u7531\u7279\u5b9a Gemini \u6a21\u578b\u9a45\u52d5\u7684\u5929\u6c23 agent\u3002\u96d6\u7136\u9019\u6a23\u5df2\u7d93\u5f88\u6709\u6548\uff0c\u4f46\u5728\u5be6\u969b\u61c9\u7528\u4e2d\uff0c\u80fd\u5920\u9748\u6d3b\u4f7f\u7528\u4e0d\u540c\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b\uff08LLM\uff09\u901a\u5e38\u6703\u5e36\u4f86\u66f4\u591a\u597d\u8655\u3002\u70ba\u4ec0\u9ebc\u5462\uff1f</p> <ul> <li>\u6548\u80fd\uff1a \u67d0\u4e9b\u6a21\u578b\u5728\u7279\u5b9a\u4efb\u52d9\u4e0a\u8868\u73fe\u66f4\u4f73\uff08\u4f8b\u5982\uff1a\u7a0b\u5f0f\u8a2d\u8a08\u3001\u63a8\u7406\u3001\u5275\u610f\u5beb\u4f5c\uff09\u3002</li> <li>\u6210\u672c\uff1a \u4e0d\u540c\u6a21\u578b\u7684\u50f9\u683c\u5404\u4e0d\u76f8\u540c\u3002</li> <li>\u529f\u80fd\uff1a \u5404\u6a21\u578b\u63d0\u4f9b\u591a\u6a23\u7684\u529f\u80fd\u3001\u4e0a\u4e0b\u6587\u8996\u7a97\u5927\u5c0f\uff0c\u4ee5\u53ca\u5fae\u8abf\u9078\u9805\u3002</li> <li>\u53ef\u7528\u6027\uff0f\u5099\u63f4\uff1a \u64c1\u6709\u591a\u500b\u9078\u64c7\u53ef\u78ba\u4fdd\u4f60\u7684\u61c9\u7528\u7a0b\u5f0f\u5373\u4f7f\u67d0\u500b\u670d\u52d9\u4f9b\u61c9\u5546\u51fa\u73fe\u554f\u984c\u6642\u4ecd\u53ef\u904b\u4f5c\u3002</li> </ul> <p>ADK \u900f\u904e\u8207 LiteLLM \u51fd\u5f0f\u5eab\u7684\u6574\u5408\uff0c\u8b93\u6a21\u578b\u5207\u63db\u8b8a\u5f97\u7121\u7e2b\u3002LiteLLM \u4f5c\u70ba\u7d71\u4e00\u4ecb\u9762\uff0c\u652f\u63f4\u8d85\u904e 100 \u7a2e\u4e0d\u540c\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b\uff08LLM\uff09\u3002</p> <p>\u5728\u672c\u6b65\u9a5f\u4e2d\uff0c\u6211\u5011\u5c07\u6703\uff1a</p> <ol> <li>\u5b78\u7fd2\u5982\u4f55\u8a2d\u5b9a ADK <code>Agent</code>\uff0c\u5229\u7528 <code>LiteLlm</code> \u5305\u88dd\u5668\u4f86\u4f7f\u7528 OpenAI\uff08GPT\uff09\u3001Anthropic\uff08Claude\uff09\u7b49\u4f9b\u61c9\u5546\u7684\u6a21\u578b\u3002</li> <li>\u5b9a\u7fa9\u4e26\u5206\u5225\u8a2d\u5b9a\uff08\u5305\u542b\u5404\u81ea\u7684 session \u8207 runner\uff09\u591a\u500b Weather Agent \u5be6\u4f8b\uff0c\u4e26\u7acb\u5373\u6e2c\u8a66\uff0c\u6bcf\u500b\u5be6\u4f8b\u90fd\u7531\u4e0d\u540c\u7684 LLM \u652f\u63f4\u3002</li> <li>\u8207\u9019\u4e9b\u4e0d\u540c\u7684 agent \u4e92\u52d5\uff0c\u89c0\u5bdf\u5373\u4f7f\u4f7f\u7528\u76f8\u540c\u5de5\u5177\uff0c\u5176\u56de\u61c9\u53ef\u80fd\u51fa\u73fe\u7684\u5dee\u7570\u3002</li> </ol> <p>1. \u532f\u5165 <code>LiteLlm</code></p> <p>\u6211\u5011\u5728\u521d\u59cb\u8a2d\u5b9a\uff08\u6b65\u9a5f 0\uff09\u6642\u5df2\u7d93\u532f\u5165\u904e\u9019\u500b\u5143\u4ef6\uff0c\u4f46\u5b83\u662f\u652f\u63f4\u591a\u6a21\u578b\u529f\u80fd\u7684\u95dc\u9375\u7d44\u4ef6\uff1a</p> <pre><code># @title 1. Import LiteLlm\nfrom google.adk.models.lite_llm import LiteLlm\n</code></pre> <p>2. \u5b9a\u7fa9\u4e26\u6e2c\u8a66\u591a\u6a21\u578b agent</p> <p>\u8207\u5176\u53ea\u50b3\u905e\u6a21\u578b\u540d\u7a31\u5b57\u4e32\uff08\u9810\u8a2d\u70ba Google \u7684 Gemini \u6a21\u578b\uff09\uff0c\u6211\u5011\u6703\u5c07\u60f3\u8981\u7684\u6a21\u578b\u8b58\u5225\u5b57\u4e32\u5305\u88dd\u5728 <code>LiteLlm</code> \u985e\u5225\u4e2d\u3002</p> <ul> <li>\u91cd\u9ede\u6982\u5ff5\uff1a<code>LiteLlm</code> \u5305\u88dd\u5668\uff1a <code>LiteLlm(model=\"provider/model_name\")</code> \u8a9e\u6cd5\u6703\u544a\u8a34 Agent Development Kit (ADK) \u900f\u904e LiteLLM \u51fd\u5f0f\u5eab\uff0c\u5c07\u6b64 agent \u7684\u8acb\u6c42\u8def\u7531\u5230\u6307\u5b9a\u7684\u6a21\u578b\u63d0\u4f9b\u8005\u3002</li> </ul> <p>\u8acb\u78ba\u4fdd\u4f60\u5df2\u5728\u6b65\u9a5f 0 \u8a2d\u5b9a\u597d OpenAI \u548c Anthropic \u6240\u9700\u7684 API \u91d1\u9470\u3002\u6211\u5011\u5c07\u4f7f\u7528 <code>call_agent_async</code> \u51fd\u5f0f\uff08\u524d\u9762\u5df2\u5b9a\u7fa9\uff0c\u73fe\u5728\u53ef\u63a5\u53d7 <code>runner</code>\u3001<code>user_id</code> \u548c <code>session_id</code>\uff09\u4f86\u5728\u6bcf\u500b agent \u8a2d\u5b9a\u5b8c\u6210\u5f8c\u7acb\u5373\u8207\u5176\u4e92\u52d5\u3002</p> <p>\u4ee5\u4e0b\u6bcf\u500b\u5340\u584a\u90fd\u6703\uff1a</p> <ul> <li>\u4f7f\u7528\u7279\u5b9a\u7684 LiteLLM \u6a21\u578b\uff08<code>MODEL_GPT_4O</code> \u6216 <code>MODEL_CLAUDE_SONNET</code>\uff09\u5b9a\u7fa9 agent\u3002</li> <li>\u70ba\u8a72 agent \u7684\u6e2c\u8a66\u57f7\u884c\u500b\u5225\u5efa\u7acb\u5168\u65b0\u4e14\u7368\u7acb\u7684 <code>InMemorySessionService</code> \u548c session\u3002\u9019\u6a23\u53ef\u8b93\u5c0d\u8a71\u6b77\u53f2\u5728\u672c\u793a\u7bc4\u4e2d\u5f7c\u6b64\u9694\u96e2\u3002</li> <li>\u5efa\u7acb\u4e00\u500b\u91dd\u5c0d\u8a72 agent \u53ca\u5176 session \u670d\u52d9\u6240\u8a2d\u5b9a\u7684 <code>Runner</code>\u3002</li> <li>\u7acb\u5373\u547c\u53eb <code>call_agent_async</code>\uff0c\u50b3\u9001\u67e5\u8a62\u4e26\u6e2c\u8a66\u8a72 agent\u3002</li> </ul> <p>\u6700\u4f73\u5be6\u8e10\uff1a \u5efa\u8b70\u5c07\u6a21\u578b\u540d\u7a31\uff08\u5982\u6b65\u9a5f 0 \u5b9a\u7fa9\u7684 <code>MODEL_GPT_4O</code>\u3001<code>MODEL_CLAUDE_SONNET</code>\uff09\u8a2d\u70ba\u5e38\u6578\uff0c\u4ee5\u907f\u514d\u62fc\u5beb\u932f\u8aa4\u4e26\u65b9\u4fbf\u7a0b\u5f0f\u78bc\u7ba1\u7406\u3002</p> <p>\u932f\u8aa4\u8655\u7406\uff1a \u6211\u5011\u6703\u5c07 agent \u5b9a\u7fa9\u5305\u5728 <code>try...except</code> \u5340\u584a\u4e2d\u3002\u9019\u6a23\u5373\u4f7f\u67d0\u500b\u6a21\u578b\u63d0\u4f9b\u8005\u7684 API \u91d1\u9470\u907a\u5931\u6216\u7121\u6548\uff0c\u4e5f\u4e0d\u6703\u5c0e\u81f4\u6574\u500b\u7a0b\u5f0f\u78bc\u5340\u584a\u5931\u6557\uff0c\u8b93\u6559\u5b78\u80fd\u7e7c\u7e8c\u57f7\u884c\u5df2\u6b63\u78ba\u8a2d\u5b9a\u7684\u6a21\u578b\u3002</p> <p>\u9996\u5148\uff0c\u8b93\u6211\u5011\u4f7f\u7528 OpenAI \u7684 GPT-4o \u4f86\u5efa\u7acb\u4e26\u6e2c\u8a66 agent\u3002</p> <pre><code># @title Define and Test GPT Agent\n\n# Make sure 'get_weather' function from Step 1 is defined in your environment.\n# Make sure 'call_agent_async' is defined from earlier.\n\n# --- Agent using GPT-4o ---\nweather_agent_gpt = None # Initialize to None\nrunner_gpt = None      # Initialize runner to None\n\ntry:\n    weather_agent_gpt = Agent(\n        name=\"weather_agent_gpt\",\n        # Key change: Wrap the LiteLLM model identifier\n        model=LiteLlm(model=MODEL_GPT_4O),\n        description=\"Provides weather information (using GPT-4o).\",\n        instruction=\"You are a helpful weather assistant powered by GPT-4o. \"\n                    \"Use the 'get_weather' tool for city weather requests. \"\n                    \"Clearly present successful reports or polite error messages based on the tool's output status.\",\n        tools=[get_weather], # Re-use the same tool\n    )\n    print(f\"Agent '{weather_agent_gpt.name}' created using model '{MODEL_GPT_4O}'.\")\n\n    # InMemorySessionService is simple, non-persistent storage for this tutorial.\n    session_service_gpt = InMemorySessionService() # Create a dedicated service\n\n    # Define constants for identifying the interaction context\n    APP_NAME_GPT = \"weather_tutorial_app_gpt\" # Unique app name for this test\n    USER_ID_GPT = \"user_1_gpt\"\n    SESSION_ID_GPT = \"session_001_gpt\" # Using a fixed ID for simplicity\n\n    # Create the specific session where the conversation will happen\n    session_gpt = await session_service_gpt.create_session(\n        app_name=APP_NAME_GPT,\n        user_id=USER_ID_GPT,\n        session_id=SESSION_ID_GPT\n    )\n    print(f\"Session created: App='{APP_NAME_GPT}', User='{USER_ID_GPT}', Session='{SESSION_ID_GPT}'\")\n\n    # Create a runner specific to this agent and its session service\n    runner_gpt = Runner(\n        agent=weather_agent_gpt,\n        app_name=APP_NAME_GPT,       # Use the specific app name\n        session_service=session_service_gpt # Use the specific session service\n        )\n    print(f\"Runner created for agent '{runner_gpt.agent.name}'.\")\n\n    # --- Test the GPT Agent ---\n    print(\"\\n--- Testing GPT Agent ---\")\n    # Ensure call_agent_async uses the correct runner, user_id, session_id\n    await call_agent_async(query = \"What's the weather in Tokyo?\",\n                           runner=runner_gpt,\n                           user_id=USER_ID_GPT,\n                           session_id=SESSION_ID_GPT)\n    # --- OR ---\n\n    # Uncomment the following lines if running as a standard Python script (.py file):\n    # import asyncio\n    # if __name__ == \"__main__\":\n    #     try:\n    #         asyncio.run(call_agent_async(query = \"What's the weather in Tokyo?\",\n    #                      runner=runner_gpt,\n    #                       user_id=USER_ID_GPT,\n    #                       session_id=SESSION_ID_GPT)\n    #     except Exception as e:\n    #         print(f\"An error occurred: {e}\")\n\nexcept Exception as e:\n    print(f\"\u274c Could not create or run GPT agent '{MODEL_GPT_4O}'. Check API Key and model name. Error: {e}\")\n</code></pre> <p>\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u4e5f\u6703\u91dd\u5c0d Anthropic \u7684 Claude Sonnet \u57f7\u884c\u76f8\u540c\u7684\u64cd\u4f5c\u3002</p> <pre><code># @title Define and Test Claude Agent\n\n# Make sure 'get_weather' function from Step 1 is defined in your environment.\n# Make sure 'call_agent_async' is defined from earlier.\n\n# --- Agent using Claude Sonnet ---\nweather_agent_claude = None # Initialize to None\nrunner_claude = None      # Initialize runner to None\n\ntry:\n    weather_agent_claude = Agent(\n        name=\"weather_agent_claude\",\n        # Key change: Wrap the LiteLLM model identifier\n        model=LiteLlm(model=MODEL_CLAUDE_SONNET),\n        description=\"Provides weather information (using Claude Sonnet).\",\n        instruction=\"You are a helpful weather assistant powered by Claude Sonnet. \"\n                    \"Use the 'get_weather' tool for city weather requests. \"\n                    \"Analyze the tool's dictionary output ('status', 'report'/'error_message'). \"\n                    \"Clearly present successful reports or polite error messages.\",\n        tools=[get_weather], # Re-use the same tool\n    )\n    print(f\"Agent '{weather_agent_claude.name}' created using model '{MODEL_CLAUDE_SONNET}'.\")\n\n    # InMemorySessionService is simple, non-persistent storage for this tutorial.\n    session_service_claude = InMemorySessionService() # Create a dedicated service\n\n    # Define constants for identifying the interaction context\n    APP_NAME_CLAUDE = \"weather_tutorial_app_claude\" # Unique app name\n    USER_ID_CLAUDE = \"user_1_claude\"\n    SESSION_ID_CLAUDE = \"session_001_claude\" # Using a fixed ID for simplicity\n\n    # Create the specific session where the conversation will happen\n    session_claude = await session_service_claude.create_session(\n        app_name=APP_NAME_CLAUDE,\n        user_id=USER_ID_CLAUDE,\n        session_id=SESSION_ID_CLAUDE\n    )\n    print(f\"Session created: App='{APP_NAME_CLAUDE}', User='{USER_ID_CLAUDE}', Session='{SESSION_ID_CLAUDE}'\")\n\n    # Create a runner specific to this agent and its session service\n    runner_claude = Runner(\n        agent=weather_agent_claude,\n        app_name=APP_NAME_CLAUDE,       # Use the specific app name\n        session_service=session_service_claude # Use the specific session service\n        )\n    print(f\"Runner created for agent '{runner_claude.agent.name}'.\")\n\n    # --- Test the Claude Agent ---\n    print(\"\\n--- Testing Claude Agent ---\")\n    # Ensure call_agent_async uses the correct runner, user_id, session_id\n    await call_agent_async(query = \"Weather in London please.\",\n                           runner=runner_claude,\n                           user_id=USER_ID_CLAUDE,\n                           session_id=SESSION_ID_CLAUDE)\n\n    # --- OR ---\n\n    # Uncomment the following lines if running as a standard Python script (.py file):\n    # import asyncio\n    # if __name__ == \"__main__\":\n    #     try:\n    #         asyncio.run(call_agent_async(query = \"Weather in London please.\",\n    #                      runner=runner_claude,\n    #                       user_id=USER_ID_CLAUDE,\n    #                       session_id=SESSION_ID_CLAUDE)\n    #     except Exception as e:\n    #         print(f\"An error occurred: {e}\")\n\n\nexcept Exception as e:\n    print(f\"\u274c Could not create or run Claude agent '{MODEL_CLAUDE_SONNET}'. Check API Key and model name. Error: {e}\")\n</code></pre> <p>\u8acb\u4ed4\u7d30\u89c0\u5bdf\u9019\u5169\u500b\u7a0b\u5f0f\u78bc\u5340\u584a\u7684\u8f38\u51fa\u7d50\u679c\u3002\u4f60\u61c9\u8a72\u6703\u770b\u5230\uff1a</p> <ol> <li>\u6bcf\u500b agent\uff08<code>weather_agent_gpt</code>\u3001<code>weather_agent_claude</code>\uff09\u90fd\u6210\u529f\u5efa\u7acb\uff08\u82e5 API \u91d1\u9470\u6709\u6548\uff09\u3002</li> <li>\u6bcf\u500b agent \u90fd\u5206\u5225\u8a2d\u7f6e\u4e86\u5c08\u5c6c\u7684 session \u548c Runner\u3002</li> <li>\u6bcf\u500b agent \u5728\u8655\u7406\u67e5\u8a62\u6642\uff0c\u90fd\u80fd\u6b63\u78ba\u5224\u65b7\u9700\u8981\u4f7f\u7528 <code>get_weather</code> \u5de5\u5177\uff08\u4f60\u6703\u770b\u5230 <code>--- Tool: get_weather called... ---</code> \u7684\u65e5\u8a8c\uff09\u3002</li> <li>\u5e95\u5c64\u5de5\u5177\u908f\u8f2f \u5b8c\u5168\u76f8\u540c\uff0c\u59cb\u7d42\u56de\u50b3\u6211\u5011\u7684\u6a21\u64ec\u8cc7\u6599\u3002</li> <li>\u4f46\u6bcf\u500b agent \u6700\u7d42\u7522\u751f\u7684\u6587\u5b57\u56de\u61c9\u5728\u63aa\u8fad\u3001\u8a9e\u6c23\u6216\u683c\u5f0f\u4e0a\u53ef\u80fd\u7565\u6709\u4e0d\u540c\u3002\u9019\u662f\u56e0\u70ba\u6307\u4ee4\u63d0\u793a\u8a5e\u662f\u7531\u4e0d\u540c\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\uff08GPT-4o \u8207 Claude Sonnet\uff09\u4f86\u89e3\u8b80\u8207\u57f7\u884c\u3002</li> </ol> <p>\u9019\u500b\u6b65\u9a5f\u5c55\u793a\u4e86 Agent Development Kit (ADK) \u8207 LiteLLM \u6240\u5e36\u4f86\u7684\u5f37\u5927\u5f48\u6027\u3002\u4f60\u53ef\u4ee5\u8f15\u9b06\u5730\u7528\u4e0d\u540c\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5be6\u9a57\u53ca\u90e8\u7f72 agent\uff0c\u540c\u6642\u8b93\u4f60\u7684\u6838\u5fc3\u61c9\u7528\u908f\u8f2f\uff08\u5de5\u5177\u3001\u57fa\u672c agent \u7d50\u69cb\uff09\u4fdd\u6301\u4e00\u81f4\u3002</p> <p>\u5728\u4e0b\u4e00\u6b65\uff0c\u6211\u5011\u5c07\u5f9e\u55ae\u4e00 agent \u64f4\u5c55\uff0c\u6253\u9020\u4e00\u500b\u5c0f\u578b\u5718\u968a\uff0c\u8b93 agent \u4e4b\u9593\u80fd\u5920\u5f7c\u6b64\u59d4\u6d3e\u4efb\u52d9\uff01</p>"},{"location":"tutorials/agent-team/#3-agent-team","title":"\u6b65\u9a5f 3\uff1a\u6253\u9020 Agent Team \u2014\u2014 \u554f\u5019\u8207\u9053\u5225\u7684\u59d4\u6d3e","text":"<p>\u5728\u6b65\u9a5f 1 \u548c 2 \u4e2d\uff0c\u6211\u5011\u5efa\u7acb\u4e26\u6e2c\u8a66\u4e86\u4e00\u500b\u5c08\u6ce8\u65bc\u5929\u6c23\u67e5\u8a62\u7684\u55ae\u4e00 agent\u3002\u96d6\u7136\u9019\u5c0d\u65bc\u7279\u5b9a\u4efb\u52d9\u5f88\u6709\u6548\uff0c\u4f46\u5be6\u969b\u61c9\u7528\u4e2d\u5e38\u5e38\u9700\u8981\u8655\u7406\u66f4\u591a\u5143\u7684\u4f7f\u7528\u8005\u4e92\u52d5\u3002\u6211\u5011\u53ef\u4ee5\u4e0d\u65b7\u70ba\u55ae\u4e00\u5929\u6c23 agent \u589e\u52a0\u66f4\u591a\u5de5\u5177\u548c\u8907\u96dc\u6307\u4ee4\uff0c\u4f46\u9019\u5f88\u5feb\u5c31\u6703\u8b8a\u5f97\u96e3\u4ee5\u7dad\u8b77\u4e14\u6548\u7387\u4f4e\u843d\u3002</p> <p>\u66f4\u5065\u5168\u7684\u505a\u6cd5\u662f\u5efa\u7acb\u4e00\u500bAgent Team\u3002\u9019\u5305\u542b\uff1a</p> <ol> <li>\u5efa\u7acb\u591a\u500b\u5c08\u696d\u5316 agent\uff0c\u6bcf\u500b agent \u91dd\u5c0d\u7279\u5b9a\u80fd\u529b\u8a2d\u8a08\uff08\u4f8b\u5982\uff1a\u4e00\u500b\u8ca0\u8cac\u5929\u6c23\u3001\u4e00\u500b\u8ca0\u8cac\u554f\u5019\u3001\u4e00\u500b\u8ca0\u8cac\u8a08\u7b97\uff09\u3002</li> <li>\u6307\u5b9a\u4e00\u500broot agent\uff08\u6216\u5354\u8abf\u8005\uff09\uff0c\u8ca0\u8cac\u63a5\u6536\u4f7f\u7528\u8005\u7684\u521d\u59cb\u8acb\u6c42\u3002</li> <li>\u8b93 root agent \u80fd\u6839\u64da\u4f7f\u7528\u8005\u610f\u5716\uff0c\u81ea\u52d5\u59d4\u6d3e\u8acb\u6c42\u7d66\u6700\u5408\u9069\u7684\u5c08\u696d sub-agent\u3002</li> </ol> <p>\u70ba\u4ec0\u9ebc\u8981\u5efa\u7acb Agent Team\uff1f</p> <ul> <li>\u6a21\u7d44\u5316\uff1a \u66f4\u5bb9\u6613\u958b\u767c\u3001\u6e2c\u8a66\u8207\u7dad\u8b77\u5404\u500b agent\u3002</li> <li>\u5c08\u696d\u5316\uff1a \u6bcf\u500b agent \u53ef\u91dd\u5c0d\u5176\u4efb\u52d9\uff08\u6307\u4ee4\u3001\u6a21\u578b\u9078\u64c7\uff09\u9032\u884c\u6700\u4f73\u5316\u3002</li> <li>\u53ef\u64f4\u5c55\u6027\uff1a \u65b0\u589e\u529f\u80fd\u6642\uff0c\u53ea\u9700\u52a0\u5165\u65b0\u7684 agent \u5373\u53ef\u3002</li> <li>\u6548\u7387\uff1a \u5c0d\u65bc\u7c21\u55ae\u4efb\u52d9\uff08\u5982\u554f\u5019\uff09\uff0c\u53ef\u9078\u7528\u66f4\u7c21\u55ae\uff0f\u6210\u672c\u66f4\u4f4e\u7684\u6a21\u578b\u3002</li> </ul> <p>\u5728\u672c\u6b65\u9a5f\u4e2d\uff0c\u6211\u5011\u5c07\u6703\uff1a</p> <ol> <li>\u5b9a\u7fa9\u8655\u7406\u554f\u5019\uff08<code>say_hello</code>\uff09\u8207\u9053\u5225\uff08<code>say_goodbye</code>\uff09\u7684\u7c21\u55ae\u5de5\u5177\u3002</li> <li>\u5efa\u7acb\u5169\u500b\u65b0\u7684\u5c08\u696d sub-agent\uff1a<code>greeting_agent</code> \u548c <code>farewell_agent</code>\u3002</li> <li>\u5c07\u6211\u5011\u7684\u4e3b\u8981\u5929\u6c23 agent\uff08<code>weather_agent_v2</code>\uff09\u5347\u7d1a\u70baroot agent\u3002</li> <li>\u70ba root agent \u914d\u7f6e sub-agent\uff0c\u555f\u7528\u81ea\u52d5\u59d4\u6d3e\u529f\u80fd\u3002</li> <li>\u900f\u904e\u5411 root agent \u767c\u9001\u4e0d\u540c\u985e\u578b\u7684\u8acb\u6c42\uff0c\u6e2c\u8a66\u59d4\u6d3e\u6d41\u7a0b\u3002</li> </ol> <p>1. \u70ba Sub-Agent \u5b9a\u7fa9\u5de5\u5177</p> <p>\u9996\u5148\uff0c\u8b93\u6211\u5011\u5efa\u7acb\u5c07\u4f5c\u70ba\u65b0\u5c08\u696d agent \u5de5\u5177\u7684\u7c21\u55ae Python \u51fd\u5f0f\u3002\u8acb\u8a18\u5f97\uff0c\u6e05\u695a\u7684 docstring \u5c0d\u65bc agent \u4f7f\u7528\u9019\u4e9b\u5de5\u5177\u975e\u5e38\u91cd\u8981\u3002</p> <pre><code># @title Define Tools for Greeting and Farewell Agents\nfrom typing import Optional # Make sure to import Optional\n\n# Ensure 'get_weather' from Step 1 is available if running this step independently.\n# def get_weather(city: str) -&gt; dict: ... (from Step 1)\n\ndef say_hello(name: Optional[str] = None) -&gt; str:\n    \"\"\"Provides a simple greeting. If a name is provided, it will be used.\n\n    Args:\n        name (str, optional): The name of the person to greet. Defaults to a generic greeting if not provided.\n\n    Returns:\n        str: A friendly greeting message.\n    \"\"\"\n    if name:\n        greeting = f\"Hello, {name}!\"\n        print(f\"--- Tool: say_hello called with name: {name} ---\")\n    else:\n        greeting = \"Hello there!\" # Default greeting if name is None or not explicitly passed\n        print(f\"--- Tool: say_hello called without a specific name (name_arg_value: {name}) ---\")\n    return greeting\n\ndef say_goodbye() -&gt; str:\n    \"\"\"Provides a simple farewell message to conclude the conversation.\"\"\"\n    print(f\"--- Tool: say_goodbye called ---\")\n    return \"Goodbye! Have a great day.\"\n\nprint(\"Greeting and Farewell tools defined.\")\n\n# Optional self-test\nprint(say_hello(\"Alice\"))\nprint(say_hello()) # Test with no argument (should use default \"Hello there!\")\nprint(say_hello(name=None)) # Test with name explicitly as None (should use default \"Hello there!\")\n</code></pre> <p>2. \u5b9a\u7fa9\u5b50 agent\uff08Greeting &amp; Farewell\uff09</p> <p>\u73fe\u5728\uff0c\u70ba\u6211\u5011\u7684\u5c08\u5bb6\u5efa\u7acb <code>Agent</code> \u5be6\u4f8b\u3002\u8acb\u6ce8\u610f\u4ed6\u5011\u9ad8\u5ea6\u805a\u7126\u7684 <code>instruction</code>\uff0c\u4ee5\u53ca\u6700\u91cd\u8981\u7684\uff0c\u4ed6\u5011\u660e\u78ba\u7684 <code>description</code>\u3002<code>description</code> \u662f root agent \u7528\u4f86\u6c7a\u5b9a\u4f55\u6642\u5c07\u4efb\u52d9\u59d4\u6d3e\u7d66\u9019\u4e9b\u5b50 agent \u7684\u4e3b\u8981\u8cc7\u8a0a\u3002</p> <p>\u6700\u4f73\u5be6\u8e10\uff1a\u5b50 agent \u7684 <code>description</code> \u6b04\u4f4d\u61c9\u6e96\u78ba\u4e14\u7c21\u660e\u5730\u7e3d\u7d50\u5176\u7279\u5b9a\u80fd\u529b\u3002\u9019\u5c0d\u65bc\u81ea\u52d5\u6709\u6548\u59d4\u6d3e\u81f3\u95dc\u91cd\u8981\u3002</p> <p>\u6700\u4f73\u5be6\u8e10\uff1a\u5b50 agent \u7684 <code>instruction</code> \u6b04\u4f4d\u61c9\u91dd\u5c0d\u5176\u6709\u9650\u7bc4\u7587\u91cf\u8eab\u6253\u9020\uff0c\u660e\u78ba\u544a\u8a34\u4ed6\u5011\u8a72\u505a\u4ec0\u9ebc\uff0c\u4ee5\u53ca\u4e0d\u8a72\u505a\u4ec0\u9ebc\uff08\u4f8b\u5982\uff1a\u300c\u4f60\u7684\u552f\u4e00\u4efb\u52d9\u662f\u2026\u2026\u300d\uff09\u3002</p> <pre><code># @title Define Greeting and Farewell Sub-Agents\n\n# If you want to use models other than Gemini, Ensure LiteLlm is imported and API keys are set (from Step 0/2)\n# from google.adk.models.lite_llm import LiteLlm\n# MODEL_GPT_4O, MODEL_CLAUDE_SONNET etc. should be defined\n# Or else, continue to use: model = MODEL_GEMINI_2_0_FLASH\n\n# --- Greeting Agent ---\ngreeting_agent = None\ntry:\n    greeting_agent = Agent(\n        # Using a potentially different/cheaper model for a simple task\n        model = MODEL_GEMINI_2_0_FLASH,\n        # model=LiteLlm(model=MODEL_GPT_4O), # If you would like to experiment with other models\n        name=\"greeting_agent\",\n        instruction=\"You are the Greeting Agent. Your ONLY task is to provide a friendly greeting to the user. \"\n                    \"Use the 'say_hello' tool to generate the greeting. \"\n                    \"If the user provides their name, make sure to pass it to the tool. \"\n                    \"Do not engage in any other conversation or tasks.\",\n        description=\"Handles simple greetings and hellos using the 'say_hello' tool.\", # Crucial for delegation\n        tools=[say_hello],\n    )\n    print(f\"\u2705 Agent '{greeting_agent.name}' created using model '{greeting_agent.model}'.\")\nexcept Exception as e:\n    print(f\"\u274c Could not create Greeting agent. Check API Key ({greeting_agent.model}). Error: {e}\")\n\n# --- Farewell Agent ---\nfarewell_agent = None\ntry:\n    farewell_agent = Agent(\n        # Can use the same or a different model\n        model = MODEL_GEMINI_2_0_FLASH,\n        # model=LiteLlm(model=MODEL_GPT_4O), # If you would like to experiment with other models\n        name=\"farewell_agent\",\n        instruction=\"You are the Farewell Agent. Your ONLY task is to provide a polite goodbye message. \"\n                    \"Use the 'say_goodbye' tool when the user indicates they are leaving or ending the conversation \"\n                    \"(e.g., using words like 'bye', 'goodbye', 'thanks bye', 'see you'). \"\n                    \"Do not perform any other actions.\",\n        description=\"Handles simple farewells and goodbyes using the 'say_goodbye' tool.\", # Crucial for delegation\n        tools=[say_goodbye],\n    )\n    print(f\"\u2705 Agent '{farewell_agent.name}' created using model '{farewell_agent.model}'.\")\nexcept Exception as e:\n    print(f\"\u274c Could not create Farewell agent. Check API Key ({farewell_agent.model}). Error: {e}\")\n</code></pre> <p>3. \u5b9a\u7fa9 Root Agent\uff08Weather Agent v2\uff09\u53ca\u5176\u5b50\u4ee3\u7406</p> <p>\u73fe\u5728\uff0c\u6211\u5011\u8981\u5347\u7d1a<code>weather_agent</code>\u3002\u4e3b\u8981\u8b8a\u66f4\u5982\u4e0b\uff1a</p> <ul> <li>\u65b0\u589e<code>sub_agents</code>\u53c3\u6578\uff1a\u6211\u5011\u50b3\u5165\u4e00\u500b\u5305\u542b\u525b\u525b\u5efa\u7acb\u7684<code>greeting_agent</code>\u548c<code>farewell_agent</code>\u5be6\u4f8b\u7684\u6e05\u55ae\u3002</li> <li>\u66f4\u65b0<code>instruction</code>\uff1a\u6211\u5011\u660e\u78ba\u544a\u8a34 root agent \u95dc\u65bc\u5176\u5b50\u4ee3\u7406\u7684\u8cc7\u8a0a\uff0c\u4ee5\u53ca\u4f55\u6642\u61c9\u8a72\u5c07\u4efb\u52d9\u59d4\u6d3e\u7d66\u5b83\u5011\u3002</li> </ul> <p>\u95dc\u9375\u6982\u5ff5\uff1a\u81ea\u52d5\u59d4\u6d3e\uff08Auto Flow\uff09 \u900f\u904e\u63d0\u4f9b<code>sub_agents</code>\u6e05\u55ae\uff0cAgent Development Kit (ADK) \u80fd\u5920\u555f\u7528\u81ea\u52d5\u59d4\u6d3e\u3002\u7576 root agent \u6536\u5230\u4f7f\u7528\u8005\u67e5\u8a62\u6642\uff0c\u5176\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u4e0d\u50c5\u6703\u8003\u616e\u81ea\u8eab\u7684\u6307\u4ee4\u548c\u5de5\u5177\uff0c\u9084\u6703\u53c3\u8003\u6bcf\u500b\u5b50\u4ee3\u7406\u7684<code>description</code>\u3002\u5982\u679c LLM \u5224\u65b7\u67d0\u500b\u67e5\u8a62\u66f4\u7b26\u5408\u67d0\u500b\u5b50\u4ee3\u7406\u6240\u63cf\u8ff0\u7684\u80fd\u529b\uff08\u4f8b\u5982\uff1a\u300c\u8655\u7406\u7c21\u55ae\u554f\u5019\u8a9e\u300d\uff09\uff0c\u5b83\u6703\u81ea\u52d5\u7522\u751f\u4e00\u500b\u7279\u6b8a\u7684\u5167\u90e8\u52d5\u4f5c\uff0c\u5c07\u63a7\u5236\u6b0a\u8f49\u79fb\u7d66\u8a72\u5b50\u4ee3\u7406\u8655\u7406\u672c\u56de\u5408\u3002\u5b50\u4ee3\u7406\u6703\u4f7f\u7528\u81ea\u5df1\u7684\u6a21\u578b\u3001\u6307\u4ee4\u548c\u5de5\u5177\u4f86\u8655\u7406\u8a72\u67e5\u8a62\u3002</p> <p>\u6700\u4f73\u5be6\u8e10\uff1a \u8acb\u78ba\u4fdd root agent \u7684\u6307\u4ee4\u80fd\u660e\u78ba\u5f15\u5c0e\u5176\u59d4\u6d3e\u6c7a\u7b56\u3002\u8acb\u4ee5\u540d\u7a31\u63d0\u53ca\u5b50\u4ee3\u7406\uff0c\u4e26\u63cf\u8ff0\u61c9\u8a72\u5728\u4f55\u7a2e\u60c5\u6cc1\u4e0b\u9032\u884c\u59d4\u6d3e\u3002</p> <pre><code># @title Define the Root Agent with Sub-Agents\n\n# Ensure sub-agents were created successfully before defining the root agent.\n# Also ensure the original 'get_weather' tool is defined.\nroot_agent = None\nrunner_root = None # Initialize runner\n\nif greeting_agent and farewell_agent and 'get_weather' in globals():\n    # Let's use a capable Gemini model for the root agent to handle orchestration\n    root_agent_model = MODEL_GEMINI_2_0_FLASH\n\n    weather_agent_team = Agent(\n        name=\"weather_agent_v2\", # Give it a new version name\n        model=root_agent_model,\n        description=\"The main coordinator agent. Handles weather requests and delegates greetings/farewells to specialists.\",\n        instruction=\"You are the main Weather Agent coordinating a team. Your primary responsibility is to provide weather information. \"\n                    \"Use the 'get_weather' tool ONLY for specific weather requests (e.g., 'weather in London'). \"\n                    \"You have specialized sub-agents: \"\n                    \"1. 'greeting_agent': Handles simple greetings like 'Hi', 'Hello'. Delegate to it for these. \"\n                    \"2. 'farewell_agent': Handles simple farewells like 'Bye', 'See you'. Delegate to it for these. \"\n                    \"Analyze the user's query. If it's a greeting, delegate to 'greeting_agent'. If it's a farewell, delegate to 'farewell_agent'. \"\n                    \"If it's a weather request, handle it yourself using 'get_weather'. \"\n                    \"For anything else, respond appropriately or state you cannot handle it.\",\n        tools=[get_weather], # Root agent still needs the weather tool for its core task\n        # Key change: Link the sub-agents here!\n        sub_agents=[greeting_agent, farewell_agent]\n    )\n    print(f\"\u2705 Root Agent '{weather_agent_team.name}' created using model '{root_agent_model}' with sub-agents: {[sa.name for sa in weather_agent_team.sub_agents]}\")\n\nelse:\n    print(\"\u274c Cannot create root agent because one or more sub-agents failed to initialize or 'get_weather' tool is missing.\")\n    if not greeting_agent: print(\" - Greeting Agent is missing.\")\n    if not farewell_agent: print(\" - Farewell Agent is missing.\")\n    if 'get_weather' not in globals(): print(\" - get_weather function is missing.\")\n</code></pre> <p>4. \u8207 Agent Team \u4e92\u52d5</p> <p>\u73fe\u5728\u6211\u5011\u5df2\u7d93\u5b9a\u7fa9\u597d\u6839 agent\uff08<code>weather_agent_team</code> \u2014\u2014 \u6ce8\u610f\uff1a\u8acb\u78ba\u4fdd\u9019\u500b\u8b8a\u6578\u540d\u7a31\u8207\u524d\u4e00\u500b\u7a0b\u5f0f\u78bc\u5340\u584a\u4e2d\u5b9a\u7fa9\u7684\u540d\u7a31\u4e00\u81f4\uff0c\u5f88\u53ef\u80fd\u662f <code># @title Define the Root Agent with Sub-Agents</code>\uff0c\u4e5f\u8a31\u88ab\u547d\u540d\u70ba <code>root_agent</code>\uff09\uff0c\u4e26\u4e14\u5305\u542b\u4e86\u5176\u5c08\u9580\u7684\u5b50 agent\uff0c\u63a5\u4e0b\u4f86\u6211\u5011\u4f86\u6e2c\u8a66\u59d4\u6d3e\uff08delegation\uff09\u6a5f\u5236\u3002</p> <p>\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u5340\u584a\u5c07\u6703\uff1a</p> <ol> <li>\u5b9a\u7fa9\u4e00\u500b <code>async</code> \u51fd\u5f0f <code>run_team_conversation</code>\u3002</li> <li>\u5728\u9019\u500b\u51fd\u5f0f\u5167\uff0c\u5efa\u7acb\u4e00\u500b\u5168\u65b0\u4e14\u5c08\u7528\u7684 <code>InMemorySessionService</code> \u4ee5\u53ca\u4e00\u500b\u5c08\u5c6c\u7684 session\uff08<code>session_001_agent_team</code>\uff09\uff0c\u50c5\u7528\u65bc\u9019\u6b21\u6e2c\u8a66\u3002\u9019\u6a23\u53ef\u4ee5\u5c07\u5c0d\u8a71\u6b77\u53f2\u9694\u96e2\uff0c\u65b9\u4fbf\u6e2c\u8a66 Agent Team \u7684\u4e92\u52d5\u52d5\u614b\u3002</li> <li>\u5efa\u7acb\u4e00\u500b <code>Runner</code>\uff08<code>runner_agent_team</code>\uff09\uff0c\u4e26\u8a2d\u5b9a\u70ba\u4f7f\u7528\u6211\u5011\u7684 <code>weather_agent_team</code>\uff08\u6839 agent\uff09\u4ee5\u53ca\u5c08\u7528\u7684 session service\u3002</li> <li>\u4f7f\u7528\u6211\u5011\u66f4\u65b0\u904e\u7684 <code>call_agent_async</code> \u51fd\u5f0f\uff0c\u5411 <code>runner_agent_team</code> \u767c\u9001\u4e0d\u540c\u985e\u578b\u7684\u67e5\u8a62\uff08\u554f\u5019\u3001\u5929\u6c23\u67e5\u8a62\u3001\u9053\u5225\uff09\u3002\u6211\u5011\u6703\u660e\u78ba\u50b3\u5165 runner\u3001user ID \u548c session ID\uff0c\u4ee5\u4fbf\u91dd\u5c0d\u9019\u6b21\u6e2c\u8a66\u3002</li> <li>\u7acb\u5373\u57f7\u884c <code>run_team_conversation</code> \u51fd\u5f0f\u3002</li> </ol> <p>\u9810\u671f\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li>\u300cHello there!\u300d\u67e5\u8a62\u6703\u50b3\u9001\u5230 <code>runner_agent_team</code>\u3002</li> <li>\u6839 agent\uff08<code>weather_agent_team</code>\uff09\u6536\u5230\u67e5\u8a62\u5f8c\uff0c\u6839\u64da\u5176\u6307\u4ee4\u4ee5\u53ca <code>greeting_agent</code> \u7684\u63cf\u8ff0\uff0c\u5c07\u4efb\u52d9\u59d4\u6d3e\u51fa\u53bb\u3002</li> <li><code>greeting_agent</code> \u8655\u7406\u8a72\u67e5\u8a62\uff0c\u547c\u53eb\u5176 <code>say_hello</code> \u5de5\u5177\uff0c\u4e26\u7522\u751f\u56de\u61c9\u3002</li> <li>\u300cWhat is the weather in New York?\u300d\u67e5\u8a62\u4e0d\u6703\u88ab\u59d4\u6d3e\uff0c\u800c\u662f\u7531\u6839 agent \u76f4\u63a5\u4f7f\u7528\u5176 <code>get_weather</code> \u5de5\u5177\u8655\u7406\u3002</li> <li>\u300cThanks, bye!\u300d\u67e5\u8a62\u5247\u6703\u88ab\u59d4\u6d3e\u7d66 <code>farewell_agent</code>\uff0c\u4e26\u7531\u5176 <code>say_goodbye</code> \u5de5\u5177\u8655\u7406\u3002</li> </ol> <pre><code># @title Interact with the Agent Team\nimport asyncio # Ensure asyncio is imported\n\n# Ensure the root agent (e.g., 'weather_agent_team' or 'root_agent' from the previous cell) is defined.\n# Ensure the call_agent_async function is defined.\n\n# Check if the root agent variable exists before defining the conversation function\nroot_agent_var_name = 'root_agent' # Default name from Step 3 guide\nif 'weather_agent_team' in globals(): # Check if user used this name instead\n    root_agent_var_name = 'weather_agent_team'\nelif 'root_agent' not in globals():\n    print(\"\u26a0\ufe0f Root agent ('root_agent' or 'weather_agent_team') not found. Cannot define run_team_conversation.\")\n    # Assign a dummy value to prevent NameError later if the code block runs anyway\n    root_agent = None # Or set a flag to prevent execution\n\n# Only define and run if the root agent exists\nif root_agent_var_name in globals() and globals()[root_agent_var_name]:\n    # Define the main async function for the conversation logic.\n    # The 'await' keywords INSIDE this function are necessary for async operations.\n    async def run_team_conversation():\n        print(\"\\n--- Testing Agent Team Delegation ---\")\n        session_service = InMemorySessionService()\n        APP_NAME = \"weather_tutorial_agent_team\"\n        USER_ID = \"user_1_agent_team\"\n        SESSION_ID = \"session_001_agent_team\"\n        session = await session_service.create_session(\n            app_name=APP_NAME, user_id=USER_ID, session_id=SESSION_ID\n        )\n        print(f\"Session created: App='{APP_NAME}', User='{USER_ID}', Session='{SESSION_ID}'\")\n\n        actual_root_agent = globals()[root_agent_var_name]\n        runner_agent_team = Runner( # Or use InMemoryRunner\n            agent=actual_root_agent,\n            app_name=APP_NAME,\n            session_service=session_service\n        )\n        print(f\"Runner created for agent '{actual_root_agent.name}'.\")\n\n        # --- Interactions using await (correct within async def) ---\n        await call_agent_async(query = \"Hello there!\",\n                               runner=runner_agent_team,\n                               user_id=USER_ID,\n                               session_id=SESSION_ID)\n        await call_agent_async(query = \"What is the weather in New York?\",\n                               runner=runner_agent_team,\n                               user_id=USER_ID,\n                               session_id=SESSION_ID)\n        await call_agent_async(query = \"Thanks, bye!\",\n                               runner=runner_agent_team,\n                               user_id=USER_ID,\n                               session_id=SESSION_ID)\n\n    # --- Execute the `run_team_conversation` async function ---\n    # Choose ONE of the methods below based on your environment.\n    # Note: This may require API keys for the models used!\n\n    # METHOD 1: Direct await (Default for Notebooks/Async REPLs)\n    # If your environment supports top-level await (like Colab/Jupyter notebooks),\n    # it means an event loop is already running, so you can directly await the function.\n    print(\"Attempting execution using 'await' (default for notebooks)...\")\n    await run_team_conversation()\n\n    # METHOD 2: asyncio.run (For Standard Python Scripts [.py])\n    # If running this code as a standard Python script from your terminal,\n    # the script context is synchronous. `asyncio.run()` is needed to\n    # create and manage an event loop to execute your async function.\n    # To use this method:\n    # 1. Comment out the `await run_team_conversation()` line above.\n    # 2. Uncomment the following block:\n    \"\"\"\n    import asyncio\n    if __name__ == \"__main__\": # Ensures this runs only when script is executed directly\n        print(\"Executing using 'asyncio.run()' (for standard Python scripts)...\")\n        try:\n            # This creates an event loop, runs your async function, and closes the loop.\n            asyncio.run(run_team_conversation())\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n    \"\"\"\n\nelse:\n    # This message prints if the root agent variable wasn't found earlier\n    print(\"\\n\u26a0\ufe0f Skipping agent team conversation execution as the root agent was not successfully defined in a previous step.\")\n</code></pre> <p>\u8acb\u4ed4\u7d30\u89c0\u5bdf\u8f38\u51fa\u65e5\u8a8c\uff0c\u7279\u5225\u662f <code>--- Tool: ... called ---</code> \u8a0a\u606f\u3002\u4f60\u61c9\u8a72\u6703\u770b\u5230\uff1a</p> <ul> <li>\u5c0d\u65bc \"Hello there!\"\uff0c\u547c\u53eb\u4e86 <code>say_hello</code> \u5de5\u5177\uff08\u8868\u793a\u7531 <code>greeting_agent</code> \u8655\u7406\uff09\u3002</li> <li>\u5c0d\u65bc \"What is the weather in New York?\"\uff0c\u547c\u53eb\u4e86 <code>get_weather</code> \u5de5\u5177\uff08\u8868\u793a\u7531 root agent \u8655\u7406\uff09\u3002</li> <li>\u5c0d\u65bc \"Thanks, bye!\"\uff0c\u547c\u53eb\u4e86 <code>say_goodbye</code> \u5de5\u5177\uff08\u8868\u793a\u7531 <code>farewell_agent</code> \u8655\u7406\uff09\u3002</li> </ul> <p>\u9019\u8b49\u5be6\u4e86\u81ea\u52d5\u59d4\u6d3e\uff08automatic delegation\uff09\u5df2\u6210\u529f\u904b\u4f5c\uff01root agent \u5728\u5176\u6307\u4ee4\u8207\u5176 <code>sub_agents</code> \u7684 <code>description</code> \u6307\u5f15\u4e0b\uff0c\u80fd\u6b63\u78ba\u5730\u5c07\u4f7f\u7528\u8005\u8acb\u6c42\u8def\u7531\u7d66\u5718\u968a\u4e2d\u5408\u9069\u7684\u5c08\u5bb6 agent\u3002</p> <p>\u4f60\u73fe\u5728\u5df2\u7d93\u5c07\u61c9\u7528\u7a0b\u5f0f\u67b6\u69cb\u6210\u591a\u500b\u5354\u4f5c\u7684 agent\u3002\u9019\u7a2e\u6a21\u7d44\u5316\u8a2d\u8a08\u662f\u6253\u9020\u66f4\u8907\u96dc\u4e14\u66f4\u5f37\u5927 agent \u7cfb\u7d71\u7684\u57fa\u790e\u3002\u5728\u4e0b\u4e00\u6b65\u4e2d\uff0c\u6211\u5011\u5c07\u8b93 agent \u5177\u5099\u5728\u591a\u8f2a\u5c0d\u8a71\u9593\u8a18\u61b6\u8cc7\u8a0a\u7684\u80fd\u529b\uff0c\u900f\u904e session state \u5be6\u73fe\u3002</p>"},{"location":"tutorials/agent-team/#4-session-state","title":"\u6b65\u9a5f 4\uff1a\u4f7f\u7528 Session State \u589e\u52a0\u8a18\u61b6\u8207\u500b\u4eba\u5316","text":"<p>\u5230\u76ee\u524d\u70ba\u6b62\uff0c\u6211\u5011\u7684 agent \u5718\u968a\u53ef\u4ee5\u900f\u904e\u59d4\u6d3e\u8655\u7406\u4e0d\u540c\u4efb\u52d9\uff0c\u4f46\u6bcf\u6b21\u4e92\u52d5\u90fd\u6703\u5f9e\u982d\u958b\u59cb\u2014\u2014agent \u5728\u540c\u4e00\u500b session \u5167\u7121\u6cd5\u8a18\u4f4f\u904e\u53bb\u7684\u5c0d\u8a71\u6216\u4f7f\u7528\u8005\u504f\u597d\u3002\u82e5\u8981\u5275\u9020\u66f4\u7cbe\u7dfb\u4e14\u5177\u60c5\u5883\u611f\u77e5\u7684\u9ad4\u9a57\uff0cagent \u9700\u8981\u8a18\u61b6\u3002Agent Development Kit (ADK) \u900f\u904esession state\u4f86\u5be6\u73fe\u9019\u4e00\u9ede\u3002</p> <p>\u4ec0\u9ebc\u662f Session State\uff1f</p> <ul> <li>\u5b83\u662f\u4e00\u500b\u8207\u7279\u5b9a\u4f7f\u7528\u8005 session \u7d81\u5b9a\u7684 Python \u5b57\u5178\uff08<code>session.state</code>\uff09\uff08\u7531 <code>APP_NAME</code>\u3001<code>USER_ID</code>\u3001<code>SESSION_ID</code> \u8b58\u5225\uff09\u3002</li> <li>\u5b83\u80fd\u5728\u540c\u4e00 session \u5167\u8de8\u591a\u8f2a\u5c0d\u8a71\u6301\u7e8c\u4fdd\u5b58\u8cc7\u8a0a\u3002</li> <li>agent \u8207\u5de5\u5177\uff08tools\uff09\u90fd\u53ef\u4ee5\u8b80\u53d6\u8207\u5beb\u5165\u9019\u500b state\uff0c\u8b93\u4ed6\u5011\u80fd\u8a18\u4f4f\u7d30\u7bc0\u3001\u8abf\u6574\u884c\u70ba\u4e26\u500b\u4eba\u5316\u56de\u61c9\u3002</li> </ul> <p>agent \u5982\u4f55\u8207 state \u4e92\u52d5\uff1a</p> <ol> <li><code>ToolContext</code>\uff08\u4e3b\u8981\u65b9\u6cd5\uff09\uff1a \u5de5\u5177\u53ef\u4ee5\u63a5\u53d7\u4e00\u500b <code>ToolContext</code> \u7269\u4ef6\uff08\u5982\u679c\u5ba3\u544a\u70ba\u6700\u5f8c\u4e00\u500b\u53c3\u6578\uff0cADK \u6703\u81ea\u52d5\u63d0\u4f9b\uff09\u3002\u9019\u500b\u7269\u4ef6\u80fd\u900f\u904e <code>tool_context.state</code> \u76f4\u63a5\u5b58\u53d6 session state\uff0c\u8b93\u5de5\u5177\u5728\u57f7\u884c\u904e\u7a0b\u4e2d\u8b80\u53d6\u504f\u597d\u6216\u5132\u5b58\u7d50\u679c\u3002</li> <li><code>output_key</code>\uff08\u81ea\u52d5\u5132\u5b58 agent \u56de\u61c9\uff09\uff1a <code>Agent</code> \u53ef\u4ee5\u8a2d\u5b9a <code>output_key=\"your_key\"</code>\u3002\u6b64\u6642 ADK \u6703\u81ea\u52d5\u5c07\u8a72\u56de\u5408 agent \u7684\u6700\u7d42\u6587\u5b57\u56de\u61c9\u5132\u5b58\u5230 <code>session.state[\"your_key\"]</code>\u3002</li> </ol> <p>\u5728\u9019\u500b\u6b65\u9a5f\u4e2d\uff0c\u6211\u5011\u5c07\u900f\u904e\u4ee5\u4e0b\u65b9\u5f0f\u5f37\u5316 Weather Bot \u5718\u968a\uff1a</p> <ol> <li>\u4f7f\u7528\u65b0\u7684 <code>InMemorySessionService</code>\uff0c\u55ae\u7368\u5c55\u793a state \u7684\u904b\u4f5c\u3002</li> <li>\u4ee5\u4f7f\u7528\u8005\u7684 <code>temperature_unit</code> \u504f\u597d\u521d\u59cb\u5316 session state\u3002</li> <li>\u5efa\u7acb\u4e00\u500b\u5177\u5099 state \u611f\u77e5\u80fd\u529b\u7684 weather \u5de5\u5177\uff08<code>get_weather_stateful</code>\uff09\uff0c\u53ef\u900f\u904e <code>ToolContext</code> \u8b80\u53d6\u9019\u500b\u504f\u597d\uff0c\u4e26\u8abf\u6574\u5176\u8f38\u51fa\u683c\u5f0f\uff08\u651d\u6c0f\uff0f\u83ef\u6c0f\uff09\u3002</li> <li>\u66f4\u65b0 root agent\uff0c\u6539\u7528\u9019\u500b\u6709 state \u529f\u80fd\u7684\u5de5\u5177\uff0c\u4e26\u8a2d\u5b9a <code>output_key</code>\uff0c\u8b93\u6700\u7d42\u5929\u6c23\u5831\u544a\u81ea\u52d5\u5132\u5b58\u5230 session state\u3002</li> <li>\u57f7\u884c\u4e00\u6bb5\u5c0d\u8a71\uff0c\u89c0\u5bdf\u521d\u59cb state \u5982\u4f55\u5f71\u97ff\u5de5\u5177\u3001\u624b\u52d5\u8b8a\u66f4 state \u5982\u4f55\u6539\u8b8a\u5f8c\u7e8c\u884c\u70ba\uff0c\u4ee5\u53ca <code>output_key</code> \u5982\u4f55\u6301\u4e45\u5316 agent \u7684\u56de\u61c9\u3002</li> </ol> <p>1. \u521d\u59cb\u5316\u65b0\u7684 Session Service \u8207 State</p> <p>\u70ba\u4e86\u6e05\u695a\u5c55\u793a state \u7ba1\u7406\u4e14\u4e0d\u53d7\u524d\u9762\u6b65\u9a5f\u5f71\u97ff\uff0c\u6211\u5011\u5c07\u5be6\u4f8b\u5316\u4e00\u500b\u65b0\u7684 <code>InMemorySessionService</code>\u3002\u540c\u6642\uff0c\u5efa\u7acb\u4e00\u500b session\uff0c\u4e26\u4ee5\u4f7f\u7528\u8005\u504f\u597d\u7684\u6eab\u5ea6\u55ae\u4f4d\u521d\u59cb\u5316 state\u3002</p> <pre><code># @title 1. Initialize New Session Service and State\n\n# Import necessary session components\nfrom google.adk.sessions import InMemorySessionService\n\n# Create a NEW session service instance for this state demonstration\nsession_service_stateful = InMemorySessionService()\nprint(\"\u2705 New InMemorySessionService created for state demonstration.\")\n\n# Define a NEW session ID for this part of the tutorial\nSESSION_ID_STATEFUL = \"session_state_demo_001\"\nUSER_ID_STATEFUL = \"user_state_demo\"\n\n# Define initial state data - user prefers Celsius initially\ninitial_state = {\n    \"user_preference_temperature_unit\": \"Celsius\"\n}\n\n# Create the session, providing the initial state\nsession_stateful = await session_service_stateful.create_session(\n    app_name=APP_NAME, # Use the consistent app name\n    user_id=USER_ID_STATEFUL,\n    session_id=SESSION_ID_STATEFUL,\n    state=initial_state # &lt;&lt;&lt; Initialize state during creation\n)\nprint(f\"\u2705 Session '{SESSION_ID_STATEFUL}' created for user '{USER_ID_STATEFUL}'.\")\n\n# Verify the initial state was set correctly\nretrieved_session = await session_service_stateful.get_session(app_name=APP_NAME,\n                                                         user_id=USER_ID_STATEFUL,\n                                                         session_id = SESSION_ID_STATEFUL)\nprint(\"\\n--- Initial Session State ---\")\nif retrieved_session:\n    print(retrieved_session.state)\nelse:\n    print(\"Error: Could not retrieve session.\")\n</code></pre> <p>2. \u5efa\u7acb\u5177\u5099\u72c0\u614b\u611f\u77e5\u7684\u5929\u6c23\u5de5\u5177\uff08<code>get_weather_stateful</code>\uff09</p> <p>\u73fe\u5728\uff0c\u6211\u5011\u8981\u5efa\u7acb\u65b0\u7248\u7684\u5929\u6c23\u5de5\u5177\u3002\u5176\u4e3b\u8981\u7279\u8272\u662f\u63a5\u53d7<code>tool_context: ToolContext</code>\uff0c\u8b93\u5b83\u80fd\u5920\u5b58\u53d6<code>tool_context.state</code>\u3002\u5b83\u6703\u8b80\u53d6<code>user_preference_temperature_unit</code>\uff0c\u4e26\u4f9d\u64da\u5167\u5bb9\u683c\u5f0f\u5316\u6eab\u5ea6\u986f\u793a\u3002</p> <ul> <li> <p>\u95dc\u9375\u6982\u5ff5\uff1a<code>ToolContext</code> \u9019\u500b\u7269\u4ef6\u662f\u8b93\u4f60\u7684\u5de5\u5177\u908f\u8f2f\u80fd\u8207 session \u7684 context \u4e92\u52d5\u7684\u6a4b\u6a11\uff0c\u5305\u62ec\u8b80\u53d6\u8207\u5beb\u5165\u72c0\u614b\u8b8a\u6578\u3002\u5982\u679c\u4f60\u7684\u5de5\u5177\u51fd\u5f0f\u5c07\u5b83\u5b9a\u7fa9\u70ba\u6700\u5f8c\u4e00\u500b\u53c3\u6578\uff0cAgent Development Kit (ADK) \u6703\u81ea\u52d5\u6ce8\u5165\u5b83\u3002</p> </li> <li> <p>\u6700\u4f73\u5be6\u8e10\uff1a \u7576\u5f9e state \u8b80\u53d6\u8cc7\u6599\u6642\uff0c\u8acb\u4f7f\u7528<code>dictionary.get('key', default_value)</code>\u4f86\u8655\u7406 key \u5c1a\u672a\u5b58\u5728\u7684\u60c5\u6cc1\uff0c\u78ba\u4fdd\u4f60\u7684\u5de5\u5177\u4e0d\u6703\u56e0\u6b64\u7576\u6a5f\u3002</p> </li> </ul> <pre><code>from google.adk.tools.tool_context import ToolContext\n\ndef get_weather_stateful(city: str, tool_context: ToolContext) -&gt; dict:\n    \"\"\"Retrieves weather, converts temp unit based on session state.\"\"\"\n    print(f\"--- Tool: get_weather_stateful called for {city} ---\")\n\n    # --- Read preference from state ---\n    preferred_unit = tool_context.state.get(\"user_preference_temperature_unit\", \"Celsius\") # Default to Celsius\n    print(f\"--- Tool: Reading state 'user_preference_temperature_unit': {preferred_unit} ---\")\n\n    city_normalized = city.lower().replace(\" \", \"\")\n\n    # Mock weather data (always stored in Celsius internally)\n    mock_weather_db = {\n        \"newyork\": {\"temp_c\": 25, \"condition\": \"sunny\"},\n        \"london\": {\"temp_c\": 15, \"condition\": \"cloudy\"},\n        \"tokyo\": {\"temp_c\": 18, \"condition\": \"light rain\"},\n    }\n\n    if city_normalized in mock_weather_db:\n        data = mock_weather_db[city_normalized]\n        temp_c = data[\"temp_c\"]\n        condition = data[\"condition\"]\n\n        # Format temperature based on state preference\n        if preferred_unit == \"Fahrenheit\":\n            temp_value = (temp_c * 9/5) + 32 # Calculate Fahrenheit\n            temp_unit = \"\u00b0F\"\n        else: # Default to Celsius\n            temp_value = temp_c\n            temp_unit = \"\u00b0C\"\n\n        report = f\"The weather in {city.capitalize()} is {condition} with a temperature of {temp_value:.0f}{temp_unit}.\"\n        result = {\"status\": \"success\", \"report\": report}\n        print(f\"--- Tool: Generated report in {preferred_unit}. Result: {result} ---\")\n\n        # Example of writing back to state (optional for this tool)\n        tool_context.state[\"last_city_checked_stateful\"] = city\n        print(f\"--- Tool: Updated state 'last_city_checked_stateful': {city} ---\")\n\n        return result\n    else:\n        # Handle city not found\n        error_msg = f\"Sorry, I don't have weather information for '{city}'.\"\n        print(f\"--- Tool: City '{city}' not found. ---\")\n        return {\"status\": \"error\", \"error_message\": error_msg}\n\nprint(\"\u2705 State-aware 'get_weather_stateful' tool defined.\")\n</code></pre> <p>3. \u91cd\u65b0\u5b9a\u7fa9\u5b50 agent \u4e26\u66f4\u65b0 Root Agent</p> <p>\u70ba\u4e86\u78ba\u4fdd\u6b64\u6b65\u9a5f\u662f\u81ea\u6d3d\u4e14\u80fd\u6b63\u78ba\u5efa\u69cb\uff0c\u6211\u5011\u9996\u5148\u6703\u5c07 <code>greeting_agent</code> \u548c <code>farewell_agent</code> \u5b8c\u5168\u6309\u7167\u6b65\u9a5f 3 \u7684\u65b9\u5f0f\u91cd\u65b0\u5b9a\u7fa9\u3002\u63a5\u8457\uff0c\u6211\u5011\u6703\u5b9a\u7fa9\u65b0\u7684 root agent\uff08<code>weather_agent_v4_stateful</code>\uff09\uff1a</p> <ul> <li>\u5b83\u6703\u4f7f\u7528\u65b0\u7684 <code>get_weather_stateful</code> \u5de5\u5177\u3002  </li> <li>\u5b83\u5305\u542b greeting \u548c farewell \u5b50 agent \u4ee5\u4fbf\u59d4\u6d3e\u4efb\u52d9\u3002  </li> <li>\u6700\u91cd\u8981\u7684\u662f\uff0c\u5b83\u6703\u8a2d\u5b9a <code>output_key=\"last_weather_report\"</code>\uff0c\u81ea\u52d5\u5c07\u6700\u7d42\u7684\u5929\u6c23\u56de\u61c9\u5132\u5b58\u5230 session state \u4e2d\u3002</li> </ul> <pre><code># @title 3. Redefine Sub-Agents and Update Root Agent with output_key\n\n# Ensure necessary imports: Agent, LiteLlm, Runner\nfrom google.adk.agents import Agent\nfrom google.adk.models.lite_llm import LiteLlm\nfrom google.adk.runners import Runner\n# Ensure tools 'say_hello', 'say_goodbye' are defined (from Step 3)\n# Ensure model constants MODEL_GPT_4O, MODEL_GEMINI_2_0_FLASH etc. are defined\n\n# --- Redefine Greeting Agent (from Step 3) ---\ngreeting_agent = None\ntry:\n    greeting_agent = Agent(\n        model=MODEL_GEMINI_2_0_FLASH,\n        name=\"greeting_agent\",\n        instruction=\"You are the Greeting Agent. Your ONLY task is to provide a friendly greeting using the 'say_hello' tool. Do nothing else.\",\n        description=\"Handles simple greetings and hellos using the 'say_hello' tool.\",\n        tools=[say_hello],\n    )\n    print(f\"\u2705 Agent '{greeting_agent.name}' redefined.\")\nexcept Exception as e:\n    print(f\"\u274c Could not redefine Greeting agent. Error: {e}\")\n\n# --- Redefine Farewell Agent (from Step 3) ---\nfarewell_agent = None\ntry:\n    farewell_agent = Agent(\n        model=MODEL_GEMINI_2_0_FLASH,\n        name=\"farewell_agent\",\n        instruction=\"You are the Farewell Agent. Your ONLY task is to provide a polite goodbye message using the 'say_goodbye' tool. Do not perform any other actions.\",\n        description=\"Handles simple farewells and goodbyes using the 'say_goodbye' tool.\",\n        tools=[say_goodbye],\n    )\n    print(f\"\u2705 Agent '{farewell_agent.name}' redefined.\")\nexcept Exception as e:\n    print(f\"\u274c Could not redefine Farewell agent. Error: {e}\")\n\n# --- Define the Updated Root Agent ---\nroot_agent_stateful = None\nrunner_root_stateful = None # Initialize runner\n\n# Check prerequisites before creating the root agent\nif greeting_agent and farewell_agent and 'get_weather_stateful' in globals():\n\n    root_agent_model = MODEL_GEMINI_2_0_FLASH # Choose orchestration model\n\n    root_agent_stateful = Agent(\n        name=\"weather_agent_v4_stateful\", # New version name\n        model=root_agent_model,\n        description=\"Main agent: Provides weather (state-aware unit), delegates greetings/farewells, saves report to state.\",\n        instruction=\"You are the main Weather Agent. Your job is to provide weather using 'get_weather_stateful'. \"\n                    \"The tool will format the temperature based on user preference stored in state. \"\n                    \"Delegate simple greetings to 'greeting_agent' and farewells to 'farewell_agent'. \"\n                    \"Handle only weather requests, greetings, and farewells.\",\n        tools=[get_weather_stateful], # Use the state-aware tool\n        sub_agents=[greeting_agent, farewell_agent], # Include sub-agents\n        output_key=\"last_weather_report\" # &lt;&lt;&lt; Auto-save agent's final weather response\n    )\n    print(f\"\u2705 Root Agent '{root_agent_stateful.name}' created using stateful tool and output_key.\")\n\n    # --- Create Runner for this Root Agent &amp; NEW Session Service ---\n    runner_root_stateful = Runner(\n        agent=root_agent_stateful,\n        app_name=APP_NAME,\n        session_service=session_service_stateful # Use the NEW stateful session service\n    )\n    print(f\"\u2705 Runner created for stateful root agent '{runner_root_stateful.agent.name}' using stateful session service.\")\n\nelse:\n    print(\"\u274c Cannot create stateful root agent. Prerequisites missing.\")\n    if not greeting_agent: print(\" - greeting_agent definition missing.\")\n    if not farewell_agent: print(\" - farewell_agent definition missing.\")\n    if 'get_weather_stateful' not in globals(): print(\" - get_weather_stateful tool missing.\")\n</code></pre> <p>4. \u4e92\u52d5\u8207\u6e2c\u8a66 State \u6d41\u7a0b</p> <p>\u73fe\u5728\uff0c\u8b93\u6211\u5011\u57f7\u884c\u4e00\u6bb5\u5c0d\u8a71\uff0c\u4f86\u6e2c\u8a66 state \u4e92\u52d5\uff0c\u9019\u88e1\u6703\u4f7f\u7528 <code>runner_root_stateful</code>\uff08\u8207\u6211\u5011\u7684 stateful agent \u4ee5\u53ca <code>session_service_stateful</code> \u76f8\u95dc\u806f\uff09\u3002\u6211\u5011\u5c07\u4f7f\u7528\u524d\u9762\u5b9a\u7fa9\u7684 <code>call_agent_async</code> \u51fd\u5f0f\uff0c\u4e26\u78ba\u4fdd\u50b3\u5165\u6b63\u78ba\u7684 Runner\u3001\u4f7f\u7528\u8005 ID\uff08<code>USER_ID_STATEFUL</code>\uff09\u4ee5\u53ca session ID\uff08<code>SESSION_ID_STATEFUL</code>\uff09\u3002</p> <p>\u5c0d\u8a71\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li>\u67e5\u8a62\u5929\u6c23\uff08\u502b\u6566\uff09\uff1a <code>get_weather_stateful</code> \u5de5\u5177\u61c9\u8a72\u6703\u5f9e\u5728\u7b2c 1 \u7bc0\u521d\u59cb\u5316\u7684 session state \u8b80\u53d6\u521d\u59cb\u7684\u300cCelsius\u300d\u504f\u597d\u8a2d\u5b9a\u3002root agent \u7684\u6700\u7d42\u56de\u61c9\uff08\u651d\u6c0f\u5929\u6c23\u5831\u544a\uff09\u61c9\u8a72\u6703\u900f\u904e <code>output_key</code> \u8a2d\u5b9a\u5132\u5b58\u5230 <code>state['last_weather_report']</code>\u3002</li> <li>\u624b\u52d5\u66f4\u65b0 state\uff1a \u6211\u5011\u5c07\u76f4\u63a5\u4fee\u6539\u5132\u5b58\u5728 <code>InMemorySessionService</code> \u5be6\u4f8b\uff08<code>session_service_stateful</code>\uff09\u5167\u7684 state\u3002<ul> <li>\u70ba\u4ec0\u9ebc\u8981\u76f4\u63a5\u4fee\u6539\uff1f <code>session_service.get_session()</code> \u65b9\u6cd5\u6703\u56de\u50b3 session \u7684\u8907\u672c\u3002\u4fee\u6539\u8a72\u8907\u672c\u4e0d\u6703\u5f71\u97ff\u5f8c\u7e8c agent \u57f7\u884c\u6642\u6240\u4f7f\u7528\u7684 state\u3002\u91dd\u5c0d\u9019\u500b\u8207 <code>InMemorySessionService</code> \u76f8\u95dc\u7684\u6e2c\u8a66\u60c5\u5883\uff0c\u6211\u5011\u6703\u5b58\u53d6\u5167\u90e8\u7684 <code>sessions</code> \u5b57\u5178\uff0c\u5c07\u5be6\u969b\u5132\u5b58\u7684 <code>user_preference_temperature_unit</code> state \u503c\u8b8a\u66f4\u70ba\u300cFahrenheit\u300d\u3002\u6ce8\u610f\uff1a\u5728\u5be6\u969b\u61c9\u7528\u4e2d\uff0cstate \u7684\u8b8a\u66f4\u901a\u5e38\u662f\u7531\u5de5\u5177\u6216 agent \u908f\u8f2f\u56de\u50b3 <code>EventActions(state_delta=...)</code> \u4f86\u89f8\u767c\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u624b\u52d5\u66f4\u65b0\u3002</li> </ul> </li> <li>\u518d\u6b21\u67e5\u8a62\u5929\u6c23\uff08\u7d10\u7d04\uff09\uff1a <code>get_weather_stateful</code> \u5de5\u5177\u73fe\u5728\u61c9\u8a72\u6703\u5f9e state \u8b80\u53d6\u66f4\u65b0\u5f8c\u7684\u300cFahrenheit\u300d\u504f\u597d\u8a2d\u5b9a\uff0c\u4e26\u64da\u6b64\u8f49\u63db\u6eab\u5ea6\u3002root agent \u7684\u65b0\u56de\u61c9\uff08\u83ef\u6c0f\u5929\u6c23\u5831\u544a\uff09\u6703\u56e0 <code>output_key</code> \u800c\u8986\u84cb\u6389\u4e4b\u524d\u5132\u5b58\u5728 <code>state['last_weather_report']</code> \u7684\u503c\u3002</li> <li>\u5411 agent \u554f\u597d\uff1a \u9a57\u8b49\u59d4\u6d3e\u7d66 <code>greeting_agent</code> \u7684\u529f\u80fd\u5728\u9032\u884c stateful \u64cd\u4f5c\u6642\u4ecd\u80fd\u6b63\u78ba\u904b\u4f5c\u3002\u9019\u6b21\u4e92\u52d5\u5c07\u6703\u6210\u70ba\u672c\u6b21\u6d41\u7a0b\u4e2d\u7531 <code>output_key</code> \u5132\u5b58\u7684\u6700\u5f8c\u4e00\u500b\u56de\u61c9\u3002</li> <li>\u6aa2\u67e5\u6700\u7d42 state\uff1a \u5c0d\u8a71\u7d50\u675f\u5f8c\uff0c\u6211\u5011\u6703\u6700\u5f8c\u4e00\u6b21\u53d6\u5f97 session\uff08\u7372\u5f97\u4e00\u500b\u8907\u672c\uff09\uff0c\u4e26\u5217\u5370\u5176 state\uff0c\u4ee5\u78ba\u8a8d <code>user_preference_temperature_unit</code> \u7684\u503c\u78ba\u5be6\u662f\u300cFahrenheit\u300d\uff0c\u89c0\u5bdf\u7531 <code>output_key</code> \u5132\u5b58\u7684\u6700\u7d42\u503c\uff08\u9019\u6b21\u6703\u662f\u554f\u5019\u8a9e\uff09\uff0c\u4ee5\u53ca\u67e5\u770b\u5de5\u5177\u5beb\u5165\u7684 <code>last_city_checked_stateful</code> \u503c\u3002</li> </ol> <pre><code># @title 4. Interact to Test State Flow and output_key\nimport asyncio # Ensure asyncio is imported\n\n# Ensure the stateful runner (runner_root_stateful) is available from the previous cell\n# Ensure call_agent_async, USER_ID_STATEFUL, SESSION_ID_STATEFUL, APP_NAME are defined\n\nif 'runner_root_stateful' in globals() and runner_root_stateful:\n    # Define the main async function for the stateful conversation logic.\n    # The 'await' keywords INSIDE this function are necessary for async operations.\n    async def run_stateful_conversation():\n        print(\"\\n--- Testing State: Temp Unit Conversion &amp; output_key ---\")\n\n        # 1. Check weather (Uses initial state: Celsius)\n        print(\"--- Turn 1: Requesting weather in London (expect Celsius) ---\")\n        await call_agent_async(query= \"What's the weather in London?\",\n                               runner=runner_root_stateful,\n                               user_id=USER_ID_STATEFUL,\n                               session_id=SESSION_ID_STATEFUL\n                              )\n\n        # 2. Manually update state preference to Fahrenheit - DIRECTLY MODIFY STORAGE\n        print(\"\\n--- Manually Updating State: Setting unit to Fahrenheit ---\")\n        try:\n            # Access the internal storage directly - THIS IS SPECIFIC TO InMemorySessionService for testing\n            # NOTE: In production with persistent services (Database, VertexAI), you would\n            # typically update state via agent actions or specific service APIs if available,\n            # not by direct manipulation of internal storage.\n            stored_session = session_service_stateful.sessions[APP_NAME][USER_ID_STATEFUL][SESSION_ID_STATEFUL]\n            stored_session.state[\"user_preference_temperature_unit\"] = \"Fahrenheit\"\n            # Optional: You might want to update the timestamp as well if any logic depends on it\n            # import time\n            # stored_session.last_update_time = time.time()\n            print(f\"--- Stored session state updated. Current 'user_preference_temperature_unit': {stored_session.state.get('user_preference_temperature_unit', 'Not Set')} ---\") # Added .get for safety\n        except KeyError:\n            print(f\"--- Error: Could not retrieve session '{SESSION_ID_STATEFUL}' from internal storage for user '{USER_ID_STATEFUL}' in app '{APP_NAME}' to update state. Check IDs and if session was created. ---\")\n        except Exception as e:\n             print(f\"--- Error updating internal session state: {e} ---\")\n\n        # 3. Check weather again (Tool should now use Fahrenheit)\n        # This will also update 'last_weather_report' via output_key\n        print(\"\\n--- Turn 2: Requesting weather in New York (expect Fahrenheit) ---\")\n        await call_agent_async(query= \"Tell me the weather in New York.\",\n                               runner=runner_root_stateful,\n                               user_id=USER_ID_STATEFUL,\n                               session_id=SESSION_ID_STATEFUL\n                              )\n\n        # 4. Test basic delegation (should still work)\n        # This will update 'last_weather_report' again, overwriting the NY weather report\n        print(\"\\n--- Turn 3: Sending a greeting ---\")\n        await call_agent_async(query= \"Hi!\",\n                               runner=runner_root_stateful,\n                               user_id=USER_ID_STATEFUL,\n                               session_id=SESSION_ID_STATEFUL\n                              )\n\n    # --- Execute the `run_stateful_conversation` async function ---\n    # Choose ONE of the methods below based on your environment.\n\n    # METHOD 1: Direct await (Default for Notebooks/Async REPLs)\n    # If your environment supports top-level await (like Colab/Jupyter notebooks),\n    # it means an event loop is already running, so you can directly await the function.\n    print(\"Attempting execution using 'await' (default for notebooks)...\")\n    await run_stateful_conversation()\n\n    # METHOD 2: asyncio.run (For Standard Python Scripts [.py])\n    # If running this code as a standard Python script from your terminal,\n    # the script context is synchronous. `asyncio.run()` is needed to\n    # create and manage an event loop to execute your async function.\n    # To use this method:\n    # 1. Comment out the `await run_stateful_conversation()` line above.\n    # 2. Uncomment the following block:\n    \"\"\"\n    import asyncio\n    if __name__ == \"__main__\": # Ensures this runs only when script is executed directly\n        print(\"Executing using 'asyncio.run()' (for standard Python scripts)...\")\n        try:\n            # This creates an event loop, runs your async function, and closes the loop.\n            asyncio.run(run_stateful_conversation())\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n    \"\"\"\n\n    # --- Inspect final session state after the conversation ---\n    # This block runs after either execution method completes.\n    print(\"\\n--- Inspecting Final Session State ---\")\n    final_session = await session_service_stateful.get_session(app_name=APP_NAME,\n                                                         user_id= USER_ID_STATEFUL,\n                                                         session_id=SESSION_ID_STATEFUL)\n    if final_session:\n        # Use .get() for safer access to potentially missing keys\n        print(f\"Final Preference: {final_session.state.get('user_preference_temperature_unit', 'Not Set')}\")\n        print(f\"Final Last Weather Report (from output_key): {final_session.state.get('last_weather_report', 'Not Set')}\")\n        print(f\"Final Last City Checked (by tool): {final_session.state.get('last_city_checked_stateful', 'Not Set')}\")\n        # Print full state for detailed view\n        # print(f\"Full State Dict: {final_session.state}\") # For detailed view\n    else:\n        print(\"\\n\u274c Error: Could not retrieve final session state.\")\n\nelse:\n    print(\"\\n\u26a0\ufe0f Skipping state test conversation. Stateful root agent runner ('runner_root_stateful') is not available.\")\n</code></pre> <p>\u900f\u904e\u6aa2\u8996\u5c0d\u8a71\u6d41\u7a0b\u8207\u6700\u7d42 session state \u7684\u8f38\u51fa\uff0c\u4f60\u53ef\u4ee5\u78ba\u8a8d\u4ee5\u4e0b\u5e7e\u9ede\uff1a</p> <ul> <li>State Read\uff08\u72c0\u614b\u8b80\u53d6\uff09\uff1a weather \u5de5\u5177\uff08<code>get_weather_stateful</code>\uff09\u6b63\u78ba\u5730\u5f9e state \u8b80\u53d6\u4e86 <code>user_preference_temperature_unit</code>\uff0c\u4e00\u958b\u59cb\u5c0d London \u4f7f\u7528\u300cCelsius\u300d\u3002</li> <li>State Update\uff08\u72c0\u614b\u66f4\u65b0\uff09\uff1a \u76f4\u63a5\u4fee\u6539\u6210\u529f\u5730\u5c07\u5132\u5b58\u7684\u504f\u597d\u8a2d\u5b9a\u6539\u70ba\u300cFahrenheit\u300d\u3002</li> <li>State Read\uff08\u5df2\u66f4\u65b0\uff09\uff1a \u4e4b\u5f8c\u8a72\u5de5\u5177\u5728\u67e5\u8a62 New York \u5929\u6c23\u6642\u8b80\u53d6\u5230\u4e86\u300cFahrenheit\u300d\uff0c\u4e26\u9032\u884c\u4e86\u55ae\u4f4d\u8f49\u63db\u3002</li> <li>Tool State Write\uff08\u5de5\u5177\u72c0\u614b\u5beb\u5165\uff09\uff1a \u8a72\u5de5\u5177\u6210\u529f\u5730\u900f\u904e <code>tool_context.state</code> \u5c07 <code>last_city_checked_stateful</code>\uff08\u7b2c\u4e8c\u6b21\u67e5\u8a62\u5929\u6c23\u5f8c\u7684\u300cNew York\u300d\uff09\u5beb\u5165 state\u3002</li> <li>Delegation\uff08\u59d4\u6d3e\uff09\uff1a \u5373\u4f7f\u5728 state \u88ab\u4fee\u6539\u5f8c\uff0c\u5c0d <code>greeting_agent</code> \u7684\u300cHi!\u300d\u59d4\u6d3e\u4ecd\u7136\u6b63\u5e38\u904b\u4f5c\u3002</li> <li><code>output_key</code>\uff1a <code>output_key=\"last_weather_report\"</code> \u6210\u529f\u5730\u70ba\u6bcf\u4e00\u56de\u5408\u5132\u5b58\u4e86 root agent \u7684\u6700\u7d42\u56de\u61c9\uff0c\u53ea\u8981 root agent \u662f\u6700\u7d42\u56de\u61c9\u8005\u3002\u5728\u9019\u500b\u6d41\u7a0b\u4e2d\uff0c\u6700\u5f8c\u7684\u56de\u61c9\u662f\u554f\u5019\u8a9e\uff08\"Hello, there!\"\uff09\uff0c\u56e0\u6b64\u9019\u7b46\u8cc7\u6599\u8986\u84cb\u4e86 state key \u4e2d\u7684\u5929\u6c23\u56de\u5831\u3002</li> <li>Final State\uff08\u6700\u7d42\u72c0\u614b\uff09\uff1a \u6700\u5f8c\u78ba\u8a8d\u504f\u597d\u8a2d\u5b9a\u5df2\u6301\u7e8c\u70ba\u300cFahrenheit\u300d\u3002</li> </ul> <p>\u4f60\u73fe\u5728\u5df2\u7d93\u6210\u529f\u6574\u5408 session state \u4f86\u4f7f\u7528 <code>ToolContext</code> \u500b\u4eba\u5316 agent \u884c\u70ba\uff0c\u4e26\u900f\u904e\u624b\u52d5\u64cd\u4f5c state \u6e2c\u8a66\u4e86 <code>InMemorySessionService</code>\uff0c\u540c\u6642\u89c0\u5bdf\u5230 <code>output_key</code> \u5982\u4f55\u63d0\u4f9b\u4e00\u500b\u7c21\u55ae\u6a5f\u5236\uff0c\u5c07 agent \u7684\u6700\u5f8c\u56de\u61c9\u5132\u5b58\u5230 state\u3002\u9019\u4e9b\u5c0d\u65bc state \u7ba1\u7406\u7684\u57fa\u790e\u8a8d\u8b58\uff0c\u5c07\u6709\u52a9\u65bc\u6211\u5011\u5728\u4e0b\u4e00\u6b65\u5be6\u4f5c callback \u6a5f\u5236\u4f86\u5efa\u7acb\u5b89\u5168\u9632\u8b77\u63aa\u65bd\u3002</p>"},{"location":"tutorials/agent-team/#5-before_model_callback-input-guardrail","title":"\u6b65\u9a5f 5\uff1a\u52a0\u5165\u5b89\u5168\u9632\u8b77 - \u900f\u904e <code>before_model_callback</code> \u5be6\u4f5c\u8f38\u5165\u9632\u7dda\uff08Input Guardrail\uff09","text":"<p>\u6211\u5011\u7684 Agent Team \u6b63\u8b8a\u5f97\u8d8a\u4f86\u8d8a\u5f37\u5927\uff0c\u80fd\u8a18\u4f4f\u504f\u597d\u4e26\u6709\u6548\u904b\u7528\u5de5\u5177\u3002\u7136\u800c\uff0c\u5728\u771f\u5be6\u4e16\u754c\u60c5\u5883\u4e0b\uff0c\u6211\u5011\u7d93\u5e38\u9700\u8981\u5b89\u5168\u6a5f\u5236\u4f86\u5728\u6f5b\u5728\u6709\u554f\u984c\u7684\u8acb\u6c42\u9032\u5165\u6838\u5fc3\u5927\u578b\u8a9e\u8a00\u6a21\u578b\uff08LLM\uff09\u4e4b\u524d\uff0c\u5c31\u52a0\u4ee5\u63a7\u7ba1 agent \u7684\u884c\u70ba\u3002</p> <p>Agent Development Kit (ADK) \u63d0\u4f9b\u4e86 Callbacks \u2014\u2014 \u5141\u8a31\u4f60\u5728 agent \u57f7\u884c\u751f\u547d\u9031\u671f\u4e2d\u7279\u5b9a\u7bc0\u9ede\u639b\u9264\uff08hook\uff09\u7684\u51fd\u5f0f\u3002<code>before_model_callback</code> \u5c0d\u65bc\u8f38\u5165\u5b89\u5168\u7279\u5225\u6709\u7528\u3002</p> <p>\u4ec0\u9ebc\u662f <code>before_model_callback</code>\uff1f</p> <ul> <li>\u9019\u662f\u4e00\u500b\u4f60\u81ea\u884c\u5b9a\u7fa9\u7684 Python \u51fd\u5f0f\uff0cAgent Development Kit (ADK) \u6703\u5728 agent \u5c07\u5f59\u6574\u597d\u7684\u8acb\u6c42\uff08\u5305\u542b\u5c0d\u8a71\u6b77\u53f2\u3001\u6307\u4ee4\u8207\u6700\u65b0\u4f7f\u7528\u8005\u8a0a\u606f\uff09\u9001\u5f80\u5e95\u5c64 LLM \u4e4b\u524d \u57f7\u884c\u5b83\u3002  </li> <li>\u7528\u9014\uff1a \u6aa2\u67e5\u8acb\u6c42\u5167\u5bb9\uff0c\u5fc5\u8981\u6642\u52a0\u4ee5\u4fee\u6539\uff0c\u6216\u6839\u64da\u9810\u8a2d\u898f\u5247\u76f4\u63a5\u963b\u64cb\u8a72\u8acb\u6c42\u3002</li> </ul> <p>\u5e38\u898b\u61c9\u7528\u60c5\u5883\uff1a</p> <ul> <li>\u8f38\u5165\u9a57\u8b49\uff0f\u904e\u6ffe\uff1a \u6aa2\u67e5\u4f7f\u7528\u8005\u8f38\u5165\u662f\u5426\u7b26\u5408\u6a19\u6e96\uff0c\u6216\u662f\u5426\u5305\u542b\u4e0d\u5141\u8a31\u7684\u5167\u5bb9\uff08\u5982\u500b\u8cc7\u6216\u95dc\u9375\u5b57\uff09\u3002  </li> <li>\u5b89\u5168\u9632\u7dda\uff08Guardrails\uff09\uff1a \u9632\u6b62\u6709\u5bb3\u3001\u96e2\u984c\u6216\u9055\u53cd\u653f\u7b56\u7684\u8acb\u6c42\u88ab\u9001\u5f80 LLM \u8655\u7406\u3002  </li> <li>\u52d5\u614b\u63d0\u793a\u8a5e\u4fee\u6539\uff1a \u5728\u9001\u51fa LLM \u8acb\u6c42\u524d\uff0c\u5c07\u5373\u6642\u8cc7\u8a0a\uff08\u4f8b\u5982 session state \u4e2d\u7684\u5167\u5bb9\uff09\u52a0\u5165\u8acb\u6c42\u4e0a\u4e0b\u6587\u3002</li> </ul> <p>\u904b\u4f5c\u65b9\u5f0f\uff1a</p> <ol> <li> <p>\u5b9a\u7fa9\u4e00\u500b\u63a5\u6536 <code>callback_context: CallbackContext</code> \u8207 <code>llm_request: LlmRequest</code> \u7684\u51fd\u5f0f\u3002  </p> <ul> <li><code>callback_context</code>\uff1a\u53ef\u5b58\u53d6 agent \u8cc7\u8a0a\u3001session state\uff08<code>callback_context.state</code>\uff09\u7b49\u3002  </li> <li><code>llm_request</code>\uff1a\u5305\u542b\u9810\u8a08\u9001\u5f80 LLM \u7684\u5b8c\u6574 payload\uff08<code>contents</code>\u3001<code>config</code>\uff09\u3002  </li> </ul> </li> <li> <p>\u5728\u51fd\u5f0f\u5167\u90e8\uff1a</p> <ul> <li>\u6aa2\u67e5\uff08Inspect\uff09\uff1a \u6aa2\u8996 <code>llm_request.contents</code>\uff08\u7279\u5225\u662f\u6700\u5f8c\u4e00\u5247\u4f7f\u7528\u8005\u8a0a\u606f\uff09\u3002</li> <li>\u4fee\u6539\uff08\u8acb\u5c0f\u5fc3\uff09\uff1a \u4f60\u53ef\u4ee5\u8b8a\u66f4 <code>llm_request</code> \u7684\u90e8\u5206\u5167\u5bb9\u3002</li> <li>\u963b\u64cb\uff08\u5b89\u5168\u9632\u7dda\uff09\uff1a \u56de\u50b3 <code>LlmResponse</code> \u7269\u4ef6\u3002Agent Development Kit (ADK) \u6703\u7acb\u5373\u5c07\u9019\u500b\u56de\u61c9\u9001\u56de\uff0c\u8df3\u904e\u672c\u56de\u5408\u7684 LLM \u547c\u53eb\u3002</li> <li>\u5141\u8a31\uff1a \u56de\u50b3 <code>None</code>\u3002ADK \u5c07\u4ee5\uff08\u53ef\u80fd\u5df2\u4fee\u6539\u7684\uff09\u8acb\u6c42\u7e7c\u7e8c\u547c\u53eb LLM\u3002</li> </ul> </li> </ol> <p>\u672c\u6b65\u9a5f\u5c07\u6703\uff1a</p> <ol> <li>\u5b9a\u7fa9\u4e00\u500b <code>before_model_callback</code> \u51fd\u5f0f\uff08<code>block_keyword_guardrail</code>\uff09\uff0c\u6aa2\u67e5\u4f7f\u7528\u8005\u8f38\u5165\u662f\u5426\u5305\u542b\u7279\u5b9a\u95dc\u9375\u5b57\uff08\"BLOCK\"\uff09\u3002</li> <li>\u5c07\u9019\u500b callback \u52a0\u5165\u6211\u5011\u7684 stateful root agent\uff08\u6b65\u9a5f 4 \u7684 <code>weather_agent_v4_stateful</code>\uff09\u3002</li> <li>\u5efa\u7acb\u4e00\u500b\u65b0\u7684 runner\uff0c\u7d81\u5b9a\u9019\u500b\u5df2\u66f4\u65b0\u7684 agent\uff0c\u4f46\u5171\u7528\u540c\u4e00\u500b stateful session service\uff0c\u4ee5\u7dad\u6301\u72c0\u614b\u9023\u7e8c\u6027\u3002</li> <li>\u6e2c\u8a66\u6b64\u5b89\u5168\u9632\u7dda\uff0c\u5206\u5225\u50b3\u9001\u4e00\u822c\u8acb\u6c42\u8207\u5305\u542b\u95dc\u9375\u5b57\u7684\u8acb\u6c42\u3002</li> </ol> <p>1. \u5b9a\u7fa9 Guardrail Callback \u51fd\u5f0f</p> <p>\u9019\u500b\u51fd\u5f0f\u6703\u6aa2\u67e5 <code>llm_request</code> \u5167\u5bb9\u4e2d\u7684\u6700\u5f8c\u4e00\u5247\u4f7f\u7528\u8005\u8a0a\u606f\u3002\u5982\u679c\u767c\u73fe\u6709 \"BLOCK\"\uff08\u4e0d\u5206\u5927\u5c0f\u5beb\uff09\uff0c\u5247\u5efa\u7acb\u4e26\u56de\u50b3 <code>LlmResponse</code> \u4ee5\u963b\u64cb\u6d41\u7a0b\uff1b\u5426\u5247\u56de\u50b3 <code>None</code>\u3002  </p> <pre><code># @title 1. Define the before_model_callback Guardrail\n\n# Ensure necessary imports are available\nfrom google.adk.agents.callback_context import CallbackContext\nfrom google.adk.models.llm_request import LlmRequest\nfrom google.adk.models.llm_response import LlmResponse\nfrom google.genai import types # For creating response content\nfrom typing import Optional\n\ndef block_keyword_guardrail(\n    callback_context: CallbackContext, llm_request: LlmRequest\n) -&gt; Optional[LlmResponse]:\n    \"\"\"\n    Inspects the latest user message for 'BLOCK'. If found, blocks the LLM call\n    and returns a predefined LlmResponse. Otherwise, returns None to proceed.\n    \"\"\"\n    agent_name = callback_context.agent_name # Get the name of the agent whose model call is being intercepted\n    print(f\"--- Callback: block_keyword_guardrail running for agent: {agent_name} ---\")\n\n    # Extract the text from the latest user message in the request history\n    last_user_message_text = \"\"\n    if llm_request.contents:\n        # Find the most recent message with role 'user'\n        for content in reversed(llm_request.contents):\n            if content.role == 'user' and content.parts:\n                # Assuming text is in the first part for simplicity\n                if content.parts[0].text:\n                    last_user_message_text = content.parts[0].text\n                    break # Found the last user message text\n\n    print(f\"--- Callback: Inspecting last user message: '{last_user_message_text[:100]}...' ---\") # Log first 100 chars\n\n    # --- Guardrail Logic ---\n    keyword_to_block = \"BLOCK\"\n    if keyword_to_block in last_user_message_text.upper(): # Case-insensitive check\n        print(f\"--- Callback: Found '{keyword_to_block}'. Blocking LLM call! ---\")\n        # Optionally, set a flag in state to record the block event\n        callback_context.state[\"guardrail_block_keyword_triggered\"] = True\n        print(f\"--- Callback: Set state 'guardrail_block_keyword_triggered': True ---\")\n\n        # Construct and return an LlmResponse to stop the flow and send this back instead\n        return LlmResponse(\n            content=types.Content(\n                role=\"model\", # Mimic a response from the agent's perspective\n                parts=[types.Part(text=f\"I cannot process this request because it contains the blocked keyword '{keyword_to_block}'.\")],\n            )\n            # Note: You could also set an error_message field here if needed\n        )\n    else:\n        # Keyword not found, allow the request to proceed to the LLM\n        print(f\"--- Callback: Keyword not found. Allowing LLM call for {agent_name}. ---\")\n        return None # Returning None signals ADK to continue normally\n\nprint(\"\u2705 block_keyword_guardrail function defined.\")\n</code></pre> <p>2. \u66f4\u65b0 Root Agent \u4ee5\u4f7f\u7528 Callback</p> <p>\u6211\u5011\u91cd\u65b0\u5b9a\u7fa9 root agent\uff0c\u52a0\u5165 <code>before_model_callback</code> \u53c3\u6578\uff0c\u4e26\u5c07\u5176\u6307\u5411\u6211\u5011\u65b0\u5efa\u7acb\u7684 guardrail \u51fd\u5f0f\u3002\u70ba\u4e86\u6e05\u695a\u8fa8\u8b58\uff0c\u6211\u5011\u4e5f\u6703\u7d66\u5b83\u4e00\u500b\u65b0\u7684\u7248\u672c\u540d\u7a31\u3002</p> <p>\u91cd\u8981\u63d0\u793a\uff1a \u5982\u679c\u5728\u524d\u9762\u7684\u6b65\u9a5f\u4e2d\u5c1a\u672a\u5b9a\u7fa9\uff0c\u5247\u9700\u8981\u5728\u6b64 context \u5167\u91cd\u65b0\u5b9a\u7fa9\u5b50 agent\uff08<code>greeting_agent</code>\u3001<code>farewell_agent</code>\uff09\u4ee5\u53ca stateful tool\uff08<code>get_weather_stateful</code>\uff09\uff0c\u4ee5\u78ba\u4fdd root agent \u7684\u5b9a\u7fa9\u80fd\u5920\u5b58\u53d6\u5230\u6240\u6709\u5143\u4ef6\u3002</p> <pre><code># @title 2. Update Root Agent with before_model_callback\n\n\n# --- Redefine Sub-Agents (Ensures they exist in this context) ---\ngreeting_agent = None\ntry:\n    # Use a defined model constant\n    greeting_agent = Agent(\n        model=MODEL_GEMINI_2_0_FLASH,\n        name=\"greeting_agent\", # Keep original name for consistency\n        instruction=\"You are the Greeting Agent. Your ONLY task is to provide a friendly greeting using the 'say_hello' tool. Do nothing else.\",\n        description=\"Handles simple greetings and hellos using the 'say_hello' tool.\",\n        tools=[say_hello],\n    )\n    print(f\"\u2705 Sub-Agent '{greeting_agent.name}' redefined.\")\nexcept Exception as e:\n    print(f\"\u274c Could not redefine Greeting agent. Check Model/API Key ({greeting_agent.model}). Error: {e}\")\n\nfarewell_agent = None\ntry:\n    # Use a defined model constant\n    farewell_agent = Agent(\n        model=MODEL_GEMINI_2_0_FLASH,\n        name=\"farewell_agent\", # Keep original name\n        instruction=\"You are the Farewell Agent. Your ONLY task is to provide a polite goodbye message using the 'say_goodbye' tool. Do not perform any other actions.\",\n        description=\"Handles simple farewells and goodbyes using the 'say_goodbye' tool.\",\n        tools=[say_goodbye],\n    )\n    print(f\"\u2705 Sub-Agent '{farewell_agent.name}' redefined.\")\nexcept Exception as e:\n    print(f\"\u274c Could not redefine Farewell agent. Check Model/API Key ({farewell_agent.model}). Error: {e}\")\n\n\n# --- Define the Root Agent with the Callback ---\nroot_agent_model_guardrail = None\nrunner_root_model_guardrail = None\n\n# Check all components before proceeding\nif greeting_agent and farewell_agent and 'get_weather_stateful' in globals() and 'block_keyword_guardrail' in globals():\n\n    # Use a defined model constant\n    root_agent_model = MODEL_GEMINI_2_0_FLASH\n\n    root_agent_model_guardrail = Agent(\n        name=\"weather_agent_v5_model_guardrail\", # New version name for clarity\n        model=root_agent_model,\n        description=\"Main agent: Handles weather, delegates greetings/farewells, includes input keyword guardrail.\",\n        instruction=\"You are the main Weather Agent. Provide weather using 'get_weather_stateful'. \"\n                    \"Delegate simple greetings to 'greeting_agent' and farewells to 'farewell_agent'. \"\n                    \"Handle only weather requests, greetings, and farewells.\",\n        tools=[get_weather_stateful],\n        sub_agents=[greeting_agent, farewell_agent], # Reference the redefined sub-agents\n        output_key=\"last_weather_report\", # Keep output_key from Step 4\n        before_model_callback=block_keyword_guardrail # &lt;&lt;&lt; Assign the guardrail callback\n    )\n    print(f\"\u2705 Root Agent '{root_agent_model_guardrail.name}' created with before_model_callback.\")\n\n    # --- Create Runner for this Agent, Using SAME Stateful Session Service ---\n    # Ensure session_service_stateful exists from Step 4\n    if 'session_service_stateful' in globals():\n        runner_root_model_guardrail = Runner(\n            agent=root_agent_model_guardrail,\n            app_name=APP_NAME, # Use consistent APP_NAME\n            session_service=session_service_stateful # &lt;&lt;&lt; Use the service from Step 4\n        )\n        print(f\"\u2705 Runner created for guardrail agent '{runner_root_model_guardrail.agent.name}', using stateful session service.\")\n    else:\n        print(\"\u274c Cannot create runner. 'session_service_stateful' from Step 4 is missing.\")\n\nelse:\n    print(\"\u274c Cannot create root agent with model guardrail. One or more prerequisites are missing or failed initialization:\")\n    if not greeting_agent: print(\"   - Greeting Agent\")\n    if not farewell_agent: print(\"   - Farewell Agent\")\n    if 'get_weather_stateful' not in globals(): print(\"   - 'get_weather_stateful' tool\")\n    if 'block_keyword_guardrail' not in globals(): print(\"   - 'block_keyword_guardrail' callback\")\n</code></pre> <p>3. \u4e92\u52d5\u6e2c\u8a66 Guardrail</p> <p>\u8b93\u6211\u5011\u4f86\u6e2c\u8a66 guardrail \u7684\u884c\u70ba\u3002\u6211\u5011\u5c07\u4f7f\u7528\u76f8\u540c\u7684 session\uff08<code>SESSION_ID_STATEFUL</code>\uff09\uff0c\u5982\u6b65\u9a5f 4 \u4e2d\u6240\u793a\uff0c\u4ee5\u8b49\u660e session state \u5728\u9019\u4e9b\u8b8a\u66f4\u4e4b\u9593\u6703\u6301\u7e8c\u5b58\u5728\u3002</p> <ol> <li>\u767c\u9001\u4e00\u822c\u7684\u5929\u6c23\u67e5\u8a62\uff08\u61c9\u8a72\u901a\u904e guardrail \u4e26\u57f7\u884c\uff09\u3002</li> <li>\u767c\u9001\u5305\u542b \"BLOCK\" \u7684\u8acb\u6c42\uff08\u61c9\u8a72\u6703\u88ab callback \u6514\u622a\uff09\u3002</li> <li>\u767c\u9001\u554f\u5019\u8a9e\uff08\u61c9\u8a72\u901a\u904e root agent \u7684 guardrail\uff0c\u88ab\u59d4\u6d3e\u4e26\u6b63\u5e38\u57f7\u884c\uff09\u3002</li> </ol> <pre><code># @title 3. Interact to Test the Model Input Guardrail\nimport asyncio # Ensure asyncio is imported\n\n# Ensure the runner for the guardrail agent is available\nif 'runner_root_model_guardrail' in globals() and runner_root_model_guardrail:\n    # Define the main async function for the guardrail test conversation.\n    # The 'await' keywords INSIDE this function are necessary for async operations.\n    async def run_guardrail_test_conversation():\n        print(\"\\n--- Testing Model Input Guardrail ---\")\n\n        # Use the runner for the agent with the callback and the existing stateful session ID\n        # Define a helper lambda for cleaner interaction calls\n        interaction_func = lambda query: call_agent_async(query,\n                                                         runner_root_model_guardrail,\n                                                         USER_ID_STATEFUL, # Use existing user ID\n                                                         SESSION_ID_STATEFUL # Use existing session ID\n                                                        )\n        # 1. Normal request (Callback allows, should use Fahrenheit from previous state change)\n        print(\"--- Turn 1: Requesting weather in London (expect allowed, Fahrenheit) ---\")\n        await interaction_func(\"What is the weather in London?\")\n\n        # 2. Request containing the blocked keyword (Callback intercepts)\n        print(\"\\n--- Turn 2: Requesting with blocked keyword (expect blocked) ---\")\n        await interaction_func(\"BLOCK the request for weather in Tokyo\") # Callback should catch \"BLOCK\"\n\n        # 3. Normal greeting (Callback allows root agent, delegation happens)\n        print(\"\\n--- Turn 3: Sending a greeting (expect allowed) ---\")\n        await interaction_func(\"Hello again\")\n\n    # --- Execute the `run_guardrail_test_conversation` async function ---\n    # Choose ONE of the methods below based on your environment.\n\n    # METHOD 1: Direct await (Default for Notebooks/Async REPLs)\n    # If your environment supports top-level await (like Colab/Jupyter notebooks),\n    # it means an event loop is already running, so you can directly await the function.\n    print(\"Attempting execution using 'await' (default for notebooks)...\")\n    await run_guardrail_test_conversation()\n\n    # METHOD 2: asyncio.run (For Standard Python Scripts [.py])\n    # If running this code as a standard Python script from your terminal,\n    # the script context is synchronous. `asyncio.run()` is needed to\n    # create and manage an event loop to execute your async function.\n    # To use this method:\n    # 1. Comment out the `await run_guardrail_test_conversation()` line above.\n    # 2. Uncomment the following block:\n    \"\"\"\n    import asyncio\n    if __name__ == \"__main__\": # Ensures this runs only when script is executed directly\n        print(\"Executing using 'asyncio.run()' (for standard Python scripts)...\")\n        try:\n            # This creates an event loop, runs your async function, and closes the loop.\n            asyncio.run(run_guardrail_test_conversation())\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n    \"\"\"\n\n    # --- Inspect final session state after the conversation ---\n    # This block runs after either execution method completes.\n    # Optional: Check state for the trigger flag set by the callback\n    print(\"\\n--- Inspecting Final Session State (After Guardrail Test) ---\")\n    # Use the session service instance associated with this stateful session\n    final_session = await session_service_stateful.get_session(app_name=APP_NAME,\n                                                         user_id=USER_ID_STATEFUL,\n                                                         session_id=SESSION_ID_STATEFUL)\n    if final_session:\n        # Use .get() for safer access\n        print(f\"Guardrail Triggered Flag: {final_session.state.get('guardrail_block_keyword_triggered', 'Not Set (or False)')}\")\n        print(f\"Last Weather Report: {final_session.state.get('last_weather_report', 'Not Set')}\") # Should be London weather if successful\n        print(f\"Temperature Unit: {final_session.state.get('user_preference_temperature_unit', 'Not Set')}\") # Should be Fahrenheit\n        # print(f\"Full State Dict: {final_session.state}\") # For detailed view\n    else:\n        print(\"\\n\u274c Error: Could not retrieve final session state.\")\n\nelse:\n    print(\"\\n\u26a0\ufe0f Skipping model guardrail test. Runner ('runner_root_model_guardrail') is not available.\")\n</code></pre> <p>\u89c0\u5bdf\u57f7\u884c\u6d41\u7a0b\uff1a</p> <ol> <li>\u502b\u6566\u5929\u6c23\uff1a \u56de\u547c\u51fd\u5f0f\u91dd\u5c0d <code>weather_agent_v5_model_guardrail</code> \u57f7\u884c\uff0c\u6aa2\u67e5\u8a0a\u606f\u5167\u5bb9\uff0c\u5370\u51fa\u300c\u672a\u627e\u5230\u95dc\u9375\u5b57\uff0c\u5141\u8a31 LLM \u547c\u53eb\u3002\u300d\u4e26\u56de\u50b3 <code>None</code>\u3002agent \u7e7c\u7e8c\u57f7\u884c\uff0c\u547c\u53eb <code>get_weather_stateful</code> \u5de5\u5177\uff08\u6703\u4f7f\u7528\u6b65\u9a5f 4 \u72c0\u614b\u8b8a\u66f4\u5f8c\u7684\u300cFahrenheit\u300d\u504f\u597d\u8a2d\u5b9a\uff09\uff0c\u4e26\u56de\u50b3\u5929\u6c23\u8cc7\u8a0a\u3002\u6b64\u56de\u61c9\u6703\u900f\u904e <code>output_key</code> \u66f4\u65b0 <code>last_weather_report</code>\u3002  </li> <li>BLOCK \u8acb\u6c42\uff1a \u56de\u547c\u51fd\u5f0f\u518d\u6b21\u91dd\u5c0d <code>weather_agent_v5_model_guardrail</code> \u57f7\u884c\uff0c\u6aa2\u67e5\u8a0a\u606f\uff0c\u767c\u73fe\u300cBLOCK\u300d\uff0c\u5370\u51fa\u300c\u963b\u64cb LLM \u547c\u53eb\uff01\u300d\uff0c\u8a2d\u5b9a\u72c0\u614b\u65d7\u6a19\uff0c\u4e26\u56de\u50b3\u9810\u5148\u5b9a\u7fa9\u7684 <code>LlmResponse</code>\u3002\u8a72\u56de\u5408 agent \u5e95\u5c64\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5b8c\u5168\u4e0d\u6703\u88ab\u547c\u53eb\u3002\u4f7f\u7528\u8005\u6703\u770b\u5230\u56de\u547c\u51fd\u5f0f\u7684\u963b\u64cb\u8a0a\u606f\u3002  </li> <li>\u518d\u6b21\u6253\u62db\u547c\uff1a \u56de\u547c\u51fd\u5f0f\u91dd\u5c0d <code>weather_agent_v5_model_guardrail</code> \u57f7\u884c\uff0c\u5141\u8a31\u8acb\u6c42\u3002root agent \u63a5\u8457\u59d4\u6d3e\u7d66 <code>greeting_agent</code>\u3002\u6ce8\u610f\uff1aroot agent \u4e0a\u5b9a\u7fa9\u7684 <code>before_model_callback</code> \u4e0d\u6703\u81ea\u52d5\u5957\u7528\u5230\u5b50 agent\u3002 <code>greeting_agent</code> \u6703\u6b63\u5e38\u57f7\u884c\uff0c\u547c\u53eb\u5176 <code>say_hello</code> \u5de5\u5177\u4e26\u56de\u50b3\u554f\u5019\u8a9e\u3002</li> </ol> <p>\u4f60\u5df2\u6210\u529f\u5be6\u4f5c\u4e86\u4e00\u5c64\u8f38\u5165\u5b89\u5168\u9632\u8b77\uff01<code>before_model_callback</code> \u63d0\u4f9b\u4e86\u4e00\u500b\u5f37\u5927\u7684\u6a5f\u5236\uff0c\u80fd\u5728\u6602\u8cb4\u6216\u5177\u6f5b\u5728\u98a8\u96aa\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u547c\u53eb\u4e4b\u524d\uff0c\u5f37\u5236\u57f7\u884c\u898f\u5247\u4e26\u63a7\u5236 agent \u884c\u70ba\u3002\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u5c07\u61c9\u7528\u985e\u4f3c\u6982\u5ff5\uff0c\u70ba\u5de5\u5177\u672c\u8eab\u7684\u4f7f\u7528\u52a0\u4e0a\u9632\u8b77\u6b04\u3002</p>"},{"location":"tutorials/agent-team/#6-before_tool_callback","title":"\u6b65\u9a5f 6\uff1a\u65b0\u589e\u5b89\u5168\u6027 - \u5de5\u5177\u53c3\u6578\u9632\u8b77\u6b04\uff08<code>before_tool_callback</code>\uff09","text":"<p>\u5728\u6b65\u9a5f 5 \u4e2d\uff0c\u6211\u5011\u65b0\u589e\u4e86\u4e00\u500b\u9632\u8b77\u6b04\uff0c\u7528\u4f86\u5728\u4f7f\u7528\u8005\u8f38\u5165\u9032\u5165\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u524d\u9032\u884c\u6aa2\u67e5\u4e26\u53ef\u80fd\u963b\u64cb\u3002\u73fe\u5728\uff0c\u6211\u5011\u8981\u5728 LLM \u6c7a\u5b9a\u8981\u4f7f\u7528\u67d0\u500b\u5de5\u5177\u3001\u4f46\u5be6\u969b\u57f7\u884c\u8a72\u5de5\u5177\u4e4b\u524d\uff0c\u518d\u52a0\u4e0a\u4e00\u5c64\u63a7\u5236\u3002\u9019\u5c0d\u65bc\u9a57\u8b49 LLM \u60f3\u8981\u50b3\u905e\u7d66\u5de5\u5177\u7684\u53c3\u6578\u7279\u5225\u6709\u7528\u3002</p> <p>Agent Development Kit (ADK) \u63d0\u4f9b\u4e86 <code>before_tool_callback</code>\uff0c\u6b63\u662f\u70ba\u4e86\u9019\u500b\u76ee\u7684\u3002</p> <p>\u4ec0\u9ebc\u662f <code>before_tool_callback</code>\uff1f</p> <ul> <li>\u5b83\u662f\u4e00\u500b Python \u51fd\u5f0f\uff0c\u6703\u5728\u7279\u5b9a\u5de5\u5177\u51fd\u5f0f\u57f7\u884c\u4e4b\u524d\u88ab\u547c\u53eb\uff0c\u6642\u6a5f\u9ede\u662f\u5728 LLM \u5df2\u6c7a\u5b9a\u8981\u4f7f\u7528\u8a72\u5de5\u5177\u4e14\u5df2\u6c7a\u5b9a\u53c3\u6578\u4e4b\u5f8c\u3002  </li> <li>\u7528\u9014\uff1a \u9a57\u8b49\u5de5\u5177\u53c3\u6578\u3001\u6839\u64da\u7279\u5b9a\u8f38\u5165\u963b\u6b62\u5de5\u5177\u57f7\u884c\u3001\u52d5\u614b\u4fee\u6539\u53c3\u6578\uff0c\u6216\u5f37\u5236\u57f7\u884c\u8cc7\u6e90\u4f7f\u7528\u653f\u7b56\u3002</li> </ul> <p>\u5e38\u898b\u4f7f\u7528\u60c5\u5883\uff1a</p> <ul> <li>\u53c3\u6578\u9a57\u8b49\uff1a \u6aa2\u67e5 LLM \u63d0\u4f9b\u7684\u53c3\u6578\u662f\u5426\u6709\u6548\u3001\u662f\u5426\u5728\u5141\u8a31\u7bc4\u570d\u5167\uff0c\u6216\u662f\u5426\u7b26\u5408\u9810\u671f\u683c\u5f0f\u3002  </li> <li>\u8cc7\u6e90\u4fdd\u8b77\uff1a \u9632\u6b62\u5de5\u5177\u88ab\u50b3\u5165\u53ef\u80fd\u9020\u6210\u9ad8\u6210\u672c\u3001\u5b58\u53d6\u53d7\u9650\u8cc7\u6599\uff0c\u6216\u7522\u751f\u4e0d\u826f\u526f\u4f5c\u7528\u7684\u8f38\u5165\uff08\u4f8b\u5982\uff1a\u91dd\u5c0d\u7279\u5b9a\u53c3\u6578\u963b\u64cb API \u547c\u53eb\uff09\u3002  </li> <li>\u52d5\u614b\u53c3\u6578\u4fee\u6539\uff1a \u5728\u5de5\u5177\u57f7\u884c\u524d\uff0c\u6839\u64da session state \u6216\u5176\u4ed6\u60c5\u5883\u8cc7\u8a0a\u8abf\u6574\u53c3\u6578\u3002</li> </ul> <p>\u904b\u4f5c\u65b9\u5f0f\uff1a</p> <ol> <li> <p>\u5b9a\u7fa9\u4e00\u500b\u63a5\u53d7 <code>tool: BaseTool</code>\u3001<code>args: Dict[str, Any]</code> \u548c <code>tool_context: ToolContext</code> \u7684\u51fd\u5f0f\u3002  </p> <ul> <li><code>tool</code>\uff1a\u5373\u5c07\u88ab\u547c\u53eb\u7684\u5de5\u5177\u7269\u4ef6\uff08\u53ef\u6aa2\u67e5 <code>tool.name</code>\uff09\u3002  </li> <li><code>args</code>\uff1aLLM \u70ba\u8a72\u5de5\u5177\u7522\u751f\u7684\u53c3\u6578\u5b57\u5178\u3002  </li> <li><code>tool_context</code>\uff1a\u53ef\u5b58\u53d6 session state\uff08<code>tool_context.state</code>\uff09\u3001agent \u8cc7\u8a0a\u7b49\u3002  </li> </ul> </li> <li> <p>\u5728\u51fd\u5f0f\u5167\u90e8\uff1a  </p> <ul> <li>\u6aa2\u67e5\uff1a \u6aa2\u8996 <code>tool.name</code> \u53ca <code>args</code> \u53c3\u6578\u5b57\u5178\u3002  </li> <li>\u4fee\u6539\uff1a \u76f4\u63a5\u8b8a\u66f4 <code>args</code> \u5b57\u5178\u4e2d\u7684\u503c\u3002\u82e5\u56de\u50b3 <code>None</code>\uff0c\u5de5\u5177\u6703\u4ee5\u9019\u4e9b\u4fee\u6539\u5f8c\u7684\u53c3\u6578\u57f7\u884c\u3002  </li> <li>\u963b\u64cb\uff0f\u8986\u5beb\uff08\u9632\u8b77\u6b04\uff09\uff1a \u56de\u50b3\u4e00\u500b\u5b57\u5178\u3002Agent Development Kit (ADK) \u6703\u5c07\u6b64\u5b57\u5178\u8996\u70ba\u5de5\u5177\u547c\u53eb\u7684\u7d50\u679c\uff0c\u5b8c\u5168\u8df3\u904e\u539f\u672c\u7684\u5de5\u5177\u51fd\u5f0f\u57f7\u884c\u3002\u6b64\u5b57\u5178\u6700\u597d\u80fd\u7b26\u5408\u8a72\u5de5\u5177\u9810\u671f\u7684\u56de\u50b3\u683c\u5f0f\u3002  </li> <li>\u5141\u8a31\uff1a \u56de\u50b3 <code>None</code>\u3002ADK \u6703\u4ee5\uff08\u53ef\u80fd\u5df2\u4fee\u6539\u904e\u7684\uff09\u53c3\u6578\u57f7\u884c\u5be6\u969b\u7684\u5de5\u5177\u51fd\u5f0f\u3002</li> </ul> </li> </ol> <p>\u5728\u672c\u6b65\u9a5f\u4e2d\uff0c\u6211\u5011\u5c07\uff1a</p> <ol> <li>\u5b9a\u7fa9\u4e00\u500b <code>before_tool_callback</code> \u51fd\u5f0f\uff08<code>block_paris_tool_guardrail</code>\uff09\uff0c\u5c08\u9580\u6aa2\u67e5 <code>get_weather_stateful</code> \u5de5\u5177\u662f\u5426\u88ab\u547c\u53eb\u4e14\u57ce\u5e02\u70ba\u300cParis\u300d\u3002  </li> <li>\u82e5\u5075\u6e2c\u5230\u300cParis\u300d\uff0c\u8a72\u56de\u547c\u51fd\u5f0f\u6703\u963b\u64cb\u5de5\u5177\u4e26\u56de\u50b3\u81ea\u8a02\u932f\u8aa4\u5b57\u5178\u3002  </li> <li>\u66f4\u65b0\u6211\u5011\u7684 root agent\uff08<code>weather_agent_v6_tool_guardrail</code>\uff09\uff0c\u540c\u6642\u5305\u542b <code>before_model_callback</code> \u53ca\u9019\u500b\u65b0\u7684 <code>before_tool_callback</code>\u3002  </li> <li>\u70ba\u6b64 agent \u5efa\u7acb\u65b0\u7684 runner\uff0c\u4e26\u4f7f\u7528\u540c\u4e00\u500b\u5177\u72c0\u614b\u7684 session service\u3002  </li> <li>\u6e2c\u8a66\u6d41\u7a0b\uff0c\u8acb\u6c42\u5141\u8a31\u57ce\u5e02\u8207\u88ab\u963b\u64cb\u57ce\u5e02\uff08\u300cParis\u300d\uff09\u7684\u5929\u6c23\u3002</li> </ol> <p>1. \u5b9a\u7fa9\u5de5\u5177\u9632\u8b77\u6b04\u56de\u547c\u51fd\u5f0f</p> <p>\u6b64\u51fd\u5f0f\u91dd\u5c0d <code>get_weather_stateful</code> \u5de5\u5177\u3002\u5b83\u6703\u6aa2\u67e5 <code>city</code> \u53c3\u6578\u3002\u5982\u679c\u503c\u70ba\u300cParis\u300d\uff0c\u5247\u56de\u50b3\u4e00\u500b\u985e\u4f3c\u8a72\u5de5\u5177\u932f\u8aa4\u56de\u61c9\u7684\u932f\u8aa4\u5b57\u5178\u3002\u5426\u5247\uff0c\u56de\u50b3 <code>None</code> \u4ee5\u5141\u8a31\u5de5\u5177\u57f7\u884c\u3002</p> <pre><code># @title 1. Define the before_tool_callback Guardrail\n\n# Ensure necessary imports are available\nfrom google.adk.tools.base_tool import BaseTool\nfrom google.adk.tools.tool_context import ToolContext\nfrom typing import Optional, Dict, Any # For type hints\n\ndef block_paris_tool_guardrail(\n    tool: BaseTool, args: Dict[str, Any], tool_context: ToolContext\n) -&gt; Optional[Dict]:\n    \"\"\"\n    Checks if 'get_weather_stateful' is called for 'Paris'.\n    If so, blocks the tool execution and returns a specific error dictionary.\n    Otherwise, allows the tool call to proceed by returning None.\n    \"\"\"\n    tool_name = tool.name\n    agent_name = tool_context.agent_name # Agent attempting the tool call\n    print(f\"--- Callback: block_paris_tool_guardrail running for tool '{tool_name}' in agent '{agent_name}' ---\")\n    print(f\"--- Callback: Inspecting args: {args} ---\")\n\n    # --- Guardrail Logic ---\n    target_tool_name = \"get_weather_stateful\" # Match the function name used by FunctionTool\n    blocked_city = \"paris\"\n\n    # Check if it's the correct tool and the city argument matches the blocked city\n    if tool_name == target_tool_name:\n        city_argument = args.get(\"city\", \"\") # Safely get the 'city' argument\n        if city_argument and city_argument.lower() == blocked_city:\n            print(f\"--- Callback: Detected blocked city '{city_argument}'. Blocking tool execution! ---\")\n            # Optionally update state\n            tool_context.state[\"guardrail_tool_block_triggered\"] = True\n            print(f\"--- Callback: Set state 'guardrail_tool_block_triggered': True ---\")\n\n            # Return a dictionary matching the tool's expected output format for errors\n            # This dictionary becomes the tool's result, skipping the actual tool run.\n            return {\n                \"status\": \"error\",\n                \"error_message\": f\"Policy restriction: Weather checks for '{city_argument.capitalize()}' are currently disabled by a tool guardrail.\"\n            }\n        else:\n             print(f\"--- Callback: City '{city_argument}' is allowed for tool '{tool_name}'. ---\")\n    else:\n        print(f\"--- Callback: Tool '{tool_name}' is not the target tool. Allowing. ---\")\n\n\n    # If the checks above didn't return a dictionary, allow the tool to execute\n    print(f\"--- Callback: Allowing tool '{tool_name}' to proceed. ---\")\n    return None # Returning None allows the actual tool function to run\n\nprint(\"\u2705 block_paris_tool_guardrail function defined.\")\n</code></pre> <p>2. \u66f4\u65b0 Root Agent \u4ee5\u540c\u6642\u4f7f\u7528\u5169\u500b Callbacks</p> <p>\u6211\u5011\u518d\u6b21\u91cd\u65b0\u5b9a\u7fa9 root agent\uff08<code>weather_agent_v6_tool_guardrail</code>\uff09\uff0c\u9019\u6b21\u5728\u6b65\u9a5f 5 \u7684\u57fa\u790e\u4e0a\uff0c\u52a0\u5165\u4e86 <code>before_tool_callback</code> \u53c3\u6578\u4ee5\u53ca <code>before_model_callback</code>\u3002</p> <p>\u81ea\u6211\u5b8c\u5099\u57f7\u884c\u6ce8\u610f\u4e8b\u9805\uff1a \u8207\u6b65\u9a5f 5 \u985e\u4f3c\uff0c\u8acb\u78ba\u4fdd\u5728\u5b9a\u7fa9\u6b64 agent \u4e4b\u524d\uff0c\u6240\u6709\u5fc5\u8981\u7684\u524d\u7f6e\u9805\u76ee\uff08\u5b50 agent\u3001tools\u3001<code>before_model_callback</code>\uff09\u90fd\u5df2\u7d93\u5728\u57f7\u884c\u74b0\u5883\u4e2d\u5b9a\u7fa9\u6216\u53ef\u7528\u3002</p> <pre><code># @title 2. Update Root Agent with BOTH Callbacks (Self-Contained)\n\n# --- Ensure Prerequisites are Defined ---\n# (Include or ensure execution of definitions for: Agent, LiteLlm, Runner, ToolContext,\n#  MODEL constants, say_hello, say_goodbye, greeting_agent, farewell_agent,\n#  get_weather_stateful, block_keyword_guardrail, block_paris_tool_guardrail)\n\n# --- Redefine Sub-Agents (Ensures they exist in this context) ---\ngreeting_agent = None\ntry:\n    # Use a defined model constant\n    greeting_agent = Agent(\n        model=MODEL_GEMINI_2_0_FLASH,\n        name=\"greeting_agent\", # Keep original name for consistency\n        instruction=\"You are the Greeting Agent. Your ONLY task is to provide a friendly greeting using the 'say_hello' tool. Do nothing else.\",\n        description=\"Handles simple greetings and hellos using the 'say_hello' tool.\",\n        tools=[say_hello],\n    )\n    print(f\"\u2705 Sub-Agent '{greeting_agent.name}' redefined.\")\nexcept Exception as e:\n    print(f\"\u274c Could not redefine Greeting agent. Check Model/API Key ({greeting_agent.model}). Error: {e}\")\n\nfarewell_agent = None\ntry:\n    # Use a defined model constant\n    farewell_agent = Agent(\n        model=MODEL_GEMINI_2_0_FLASH,\n        name=\"farewell_agent\", # Keep original name\n        instruction=\"You are the Farewell Agent. Your ONLY task is to provide a polite goodbye message using the 'say_goodbye' tool. Do not perform any other actions.\",\n        description=\"Handles simple farewells and goodbyes using the 'say_goodbye' tool.\",\n        tools=[say_goodbye],\n    )\n    print(f\"\u2705 Sub-Agent '{farewell_agent.name}' redefined.\")\nexcept Exception as e:\n    print(f\"\u274c Could not redefine Farewell agent. Check Model/API Key ({farewell_agent.model}). Error: {e}\")\n\n# --- Define the Root Agent with Both Callbacks ---\nroot_agent_tool_guardrail = None\nrunner_root_tool_guardrail = None\n\nif ('greeting_agent' in globals() and greeting_agent and\n    'farewell_agent' in globals() and farewell_agent and\n    'get_weather_stateful' in globals() and\n    'block_keyword_guardrail' in globals() and\n    'block_paris_tool_guardrail' in globals()):\n\n    root_agent_model = MODEL_GEMINI_2_0_FLASH\n\n    root_agent_tool_guardrail = Agent(\n        name=\"weather_agent_v6_tool_guardrail\", # New version name\n        model=root_agent_model,\n        description=\"Main agent: Handles weather, delegates, includes input AND tool guardrails.\",\n        instruction=\"You are the main Weather Agent. Provide weather using 'get_weather_stateful'. \"\n                    \"Delegate greetings to 'greeting_agent' and farewells to 'farewell_agent'. \"\n                    \"Handle only weather, greetings, and farewells.\",\n        tools=[get_weather_stateful],\n        sub_agents=[greeting_agent, farewell_agent],\n        output_key=\"last_weather_report\",\n        before_model_callback=block_keyword_guardrail, # Keep model guardrail\n        before_tool_callback=block_paris_tool_guardrail # &lt;&lt;&lt; Add tool guardrail\n    )\n    print(f\"\u2705 Root Agent '{root_agent_tool_guardrail.name}' created with BOTH callbacks.\")\n\n    # --- Create Runner, Using SAME Stateful Session Service ---\n    if 'session_service_stateful' in globals():\n        runner_root_tool_guardrail = Runner(\n            agent=root_agent_tool_guardrail,\n            app_name=APP_NAME,\n            session_service=session_service_stateful # &lt;&lt;&lt; Use the service from Step 4/5\n        )\n        print(f\"\u2705 Runner created for tool guardrail agent '{runner_root_tool_guardrail.agent.name}', using stateful session service.\")\n    else:\n        print(\"\u274c Cannot create runner. 'session_service_stateful' from Step 4/5 is missing.\")\n\nelse:\n    print(\"\u274c Cannot create root agent with tool guardrail. Prerequisites missing.\")\n</code></pre> <p>3. \u4e92\u52d5\u6e2c\u8a66\u5de5\u5177\u9632\u8b77\u6b04\uff08Tool Guardrail\uff09</p> <p>\u8b93\u6211\u5011\u518d\u6b21\u4f7f\u7528\u524d\u8ff0\u6b65\u9a5f\u4e2d\u7684\u76f8\u540c\u6709\u72c0\u614b session\uff08<code>SESSION_ID_STATEFUL</code>\uff09\u4f86\u6e2c\u8a66\u4e92\u52d5\u6d41\u7a0b\u3002</p> <ol> <li>\u67e5\u8a62\u300cNew York\u300d\u7684\u5929\u6c23\uff1a\u901a\u904e\u5169\u500b callback\uff0c\u5de5\u5177\u6b63\u5e38\u57f7\u884c\uff08\u4f7f\u7528 session state \u4e2d\u504f\u597d\u7684\u83ef\u6c0f\u6eab\u5ea6\uff09\u3002</li> <li>\u67e5\u8a62\u300cParis\u300d\u7684\u5929\u6c23\uff1a\u901a\u904e <code>before_model_callback</code>\u3002\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u6c7a\u5b9a\u547c\u53eb <code>get_weather_stateful(city='Paris')</code>\u3002<code>before_tool_callback</code> \u9032\u884c\u6514\u622a\uff0c\u963b\u64cb\u8a72\u5de5\u5177\uff0c\u4e26\u56de\u50b3\u932f\u8aa4\u5b57\u5178\u3002agent \u6703\u8f49\u50b3\u6b64\u932f\u8aa4\u3002</li> <li>\u67e5\u8a62\u300cLondon\u300d\u7684\u5929\u6c23\uff1a\u901a\u904e\u5169\u500b callback\uff0c\u5de5\u5177\u6b63\u5e38\u57f7\u884c\u3002</li> </ol> <pre><code># @title 3. Interact to Test the Tool Argument Guardrail\nimport asyncio # Ensure asyncio is imported\n\n# Ensure the runner for the tool guardrail agent is available\nif 'runner_root_tool_guardrail' in globals() and runner_root_tool_guardrail:\n    # Define the main async function for the tool guardrail test conversation.\n    # The 'await' keywords INSIDE this function are necessary for async operations.\n    async def run_tool_guardrail_test():\n        print(\"\\n--- Testing Tool Argument Guardrail ('Paris' blocked) ---\")\n\n        # Use the runner for the agent with both callbacks and the existing stateful session\n        # Define a helper lambda for cleaner interaction calls\n        interaction_func = lambda query: call_agent_async(query,\n                                                         runner_root_tool_guardrail,\n                                                         USER_ID_STATEFUL, # Use existing user ID\n                                                         SESSION_ID_STATEFUL # Use existing session ID\n                                                        )\n        # 1. Allowed city (Should pass both callbacks, use Fahrenheit state)\n        print(\"--- Turn 1: Requesting weather in New York (expect allowed) ---\")\n        await interaction_func(\"What's the weather in New York?\")\n\n        # 2. Blocked city (Should pass model callback, but be blocked by tool callback)\n        print(\"\\n--- Turn 2: Requesting weather in Paris (expect blocked by tool guardrail) ---\")\n        await interaction_func(\"How about Paris?\") # Tool callback should intercept this\n\n        # 3. Another allowed city (Should work normally again)\n        print(\"\\n--- Turn 3: Requesting weather in London (expect allowed) ---\")\n        await interaction_func(\"Tell me the weather in London.\")\n\n    # --- Execute the `run_tool_guardrail_test` async function ---\n    # Choose ONE of the methods below based on your environment.\n\n    # METHOD 1: Direct await (Default for Notebooks/Async REPLs)\n    # If your environment supports top-level await (like Colab/Jupyter notebooks),\n    # it means an event loop is already running, so you can directly await the function.\n    print(\"Attempting execution using 'await' (default for notebooks)...\")\n    await run_tool_guardrail_test()\n\n    # METHOD 2: asyncio.run (For Standard Python Scripts [.py])\n    # If running this code as a standard Python script from your terminal,\n    # the script context is synchronous. `asyncio.run()` is needed to\n    # create and manage an event loop to execute your async function.\n    # To use this method:\n    # 1. Comment out the `await run_tool_guardrail_test()` line above.\n    # 2. Uncomment the following block:\n    \"\"\"\n    import asyncio\n    if __name__ == \"__main__\": # Ensures this runs only when script is executed directly\n        print(\"Executing using 'asyncio.run()' (for standard Python scripts)...\")\n        try:\n            # This creates an event loop, runs your async function, and closes the loop.\n            asyncio.run(run_tool_guardrail_test())\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n    \"\"\"\n\n    # --- Inspect final session state after the conversation ---\n    # This block runs after either execution method completes.\n    # Optional: Check state for the tool block trigger flag\n    print(\"\\n--- Inspecting Final Session State (After Tool Guardrail Test) ---\")\n    # Use the session service instance associated with this stateful session\n    final_session = await session_service_stateful.get_session(app_name=APP_NAME,\n                                                         user_id=USER_ID_STATEFUL,\n                                                         session_id= SESSION_ID_STATEFUL)\n    if final_session:\n        # Use .get() for safer access\n        print(f\"Tool Guardrail Triggered Flag: {final_session.state.get('guardrail_tool_block_triggered', 'Not Set (or False)')}\")\n        print(f\"Last Weather Report: {final_session.state.get('last_weather_report', 'Not Set')}\") # Should be London weather if successful\n        print(f\"Temperature Unit: {final_session.state.get('user_preference_temperature_unit', 'Not Set')}\") # Should be Fahrenheit\n        # print(f\"Full State Dict: {final_session.state}\") # For detailed view\n    else:\n        print(\"\\n\u274c Error: Could not retrieve final session state.\")\n\nelse:\n    print(\"\\n\u26a0\ufe0f Skipping tool guardrail test. Runner ('runner_root_tool_guardrail') is not available.\")\n</code></pre> <p>\u5206\u6790\u8f38\u51fa\u7d50\u679c\uff1a</p> <ol> <li>New York\uff1a <code>before_model_callback</code> \u5141\u8a31\u8acb\u6c42\u3002\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u8acb\u6c42 <code>get_weather_stateful</code>\u3002<code>before_tool_callback</code> \u57f7\u884c\uff0c\u6aa2\u67e5\u53c3\u6578\uff08<code>{'city': 'New York'}</code>\uff09\uff0c\u767c\u73fe\u4e0d\u662f \"Paris\"\uff0c\u5370\u51fa \"Allowing tool...\"\uff0c\u4e26\u56de\u50b3 <code>None</code>\u3002\u5be6\u969b\u7684 <code>get_weather_stateful</code> \u51fd\u5f0f\u57f7\u884c\uff0c\u5f9e state \u8b80\u53d6 \"Fahrenheit\"\uff0c\u4e26\u56de\u50b3\u5929\u6c23\u5831\u544a\u3002agent \u8f49\u767c\u9019\u500b\u7d50\u679c\uff0c\u4e26\u900f\u904e <code>output_key</code> \u5132\u5b58\u3002</li> <li>Paris\uff1a <code>before_model_callback</code> \u5141\u8a31\u8acb\u6c42\u3002\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u8acb\u6c42 <code>get_weather_stateful(city='Paris')</code>\u3002<code>before_tool_callback</code> \u57f7\u884c\uff0c\u6aa2\u67e5\u53c3\u6578\uff0c\u5075\u6e2c\u5230 \"Paris\"\uff0c\u5370\u51fa \"Blocking tool execution!\"\uff0c\u8a2d\u7f6e state \u6a19\u8a8c\uff0c\u4e26\u56de\u50b3\u932f\u8aa4\u5b57\u5178 <code>{'status': 'error', 'error_message': 'Policy restriction...'}</code>\u3002\u5be6\u969b\u7684 <code>get_weather_stateful</code> \u51fd\u5f0f\u5f9e\u672a\u88ab\u57f7\u884c\u3002agent \u6536\u5230\u932f\u8aa4\u5b57\u5178\uff08\u5c31\u50cf\u662f\u5de5\u5177\u7684\u8f38\u51fa\uff09\uff0c\u4e26\u6839\u64da\u8a72\u932f\u8aa4\u8a0a\u606f\u7d44\u6210\u56de\u61c9\u3002</li> <li>London\uff1a \u884c\u70ba\u8207 New York \u76f8\u540c\uff0c\u901a\u904e\u5169\u500b callback \u4e26\u6210\u529f\u57f7\u884c\u5de5\u5177\u3002\u65b0\u7684 London \u5929\u6c23\u5831\u544a\u6703\u8986\u84cb state \u4e2d\u7684 <code>last_weather_report</code>\u3002</li> </ol> <p>\u4f60\u73fe\u5728\u5df2\u7d93\u65b0\u589e\u4e86\u4e00\u5c64\u95dc\u9375\u7684\u5b89\u5168\u9632\u8b77\uff0c\u4e0d\u50c5\u63a7\u5236\u4ec0\u9ebc\u53ef\u4ee5\u50b3\u905e\u7d66\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\uff0c\u9084\u80fd\u6839\u64da LLM \u7522\u751f\u7684\u7279\u5b9a\u53c3\u6578\uff0c\u63a7\u5236 agent \u7684\u5de5\u5177\u5982\u4f55\u88ab\u4f7f\u7528\u3002\u50cf <code>before_model_callback</code> \u548c <code>before_tool_callback</code> \u9019\u6a23\u7684 Callback\uff0c\u5c0d\u65bc\u6253\u9020\u5065\u58ef\u3001\u5b89\u5168\u4e14\u7b26\u5408\u653f\u7b56\u898f\u7bc4\u7684 agent \u61c9\u7528\u81f3\u95dc\u91cd\u8981\u3002</p>"},{"location":"tutorials/agent-team/#agent-team","title":"\u7d50\u8ad6\uff1a\u4f60\u7684 Agent Team \u5df2\u7d93\u6e96\u5099\u5c31\u7dd2\uff01","text":"<p>\u606d\u559c\u4f60\uff01\u4f60\u5df2\u7d93\u6210\u529f\u5f9e\u5efa\u7acb\u55ae\u4e00\u3001\u57fa\u790e\u7684\u5929\u6c23 agent\uff0c\u9032\u968e\u5230\u5229\u7528 Agent Development Kit (ADK) \u5efa\u69cb\u4e00\u500b\u8907\u96dc\u7684\u591a agent \u5718\u968a\u3002</p> <p>\u8b93\u6211\u5011\u56de\u9867\u4e00\u4e0b\u4f60\u5b8c\u6210\u4e86\u54ea\u4e9b\u4e8b\u60c5\uff1a</p> <ul> <li>\u4f60\u5f9e\u4e00\u500b\u57fa\u790e agent\u958b\u59cb\uff0c\u914d\u5099\u55ae\u4e00\u5de5\u5177\uff08<code>get_weather</code>\uff09\u3002</li> <li>\u4f60\u5229\u7528 LiteLLM \u63a2\u7d22\u4e86 ADK \u7684\u591a\u6a21\u578b\u5f48\u6027\uff0c\u7528\u4e0d\u540c\u7684\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM)\uff08\u5982 Gemini\u3001GPT-4o \u548c Claude\uff09\u904b\u884c\u76f8\u540c\u6838\u5fc3\u908f\u8f2f\u3002</li> <li>\u4f60\u5be6\u8e10\u4e86\u6a21\u7d44\u5316\uff0c\u5efa\u7acb\u5c08\u9580\u7684\u5b50 agent\uff08<code>greeting_agent</code>\u3001<code>farewell_agent</code>\uff09\uff0c\u4e26\u8b93 root agent \u80fd\u81ea\u52d5\u59d4\u6d3e\u3002</li> <li>\u4f60\u8b93 agent \u5177\u5099\u8a18\u61b6\u529f\u80fd\uff0c\u900f\u904e session state \u8a18\u4f4f\u4f7f\u7528\u8005\u504f\u597d\uff08<code>temperature_unit</code>\uff09\u53ca\u904e\u5f80\u4e92\u52d5\uff08<code>output_key</code>\uff09\u3002</li> <li>\u4f60\u5be6\u4f5c\u4e86\u95dc\u9375\u7684\u5b89\u5168\u9632\u8b77\u63aa\u65bd\uff0c\u540c\u6642\u7528 <code>before_model_callback</code>\uff08\u963b\u64cb\u7279\u5b9a\u8f38\u5165\u95dc\u9375\u5b57\uff09\u53ca <code>before_tool_callback</code>\uff08\u6839\u64da\u53c3\u6578\u5982\u57ce\u5e02 \"Paris\" \u963b\u64cb\u5de5\u5177\u57f7\u884c\uff09\u3002</li> </ul> <p>\u900f\u904e\u6253\u9020\u9019\u500b\u5faa\u5e8f\u6f38\u9032\u7684 Weather Bot \u5718\u968a\uff0c\u4f60\u5df2\u7d93\u89aa\u8eab\u9ad4\u9a57\u4e86\u958b\u767c\u8907\u96dc\u667a\u6167\u61c9\u7528\u6240\u9700\u7684 ADK \u6838\u5fc3\u6982\u5ff5\u3002</p> <p>\u91cd\u9ede\u6574\u7406\uff1a</p> <ul> <li>Agents &amp; Tools\uff1a \u5b9a\u7fa9\u80fd\u529b\u8207\u63a8\u7406\u7684\u57fa\u672c\u7d44\u4ef6\u3002\u6e05\u695a\u7684\u6307\u4ee4\u8207 docstring \u6975\u70ba\u91cd\u8981\u3002</li> <li>Runners &amp; Session Services\uff1a \u8ca0\u8cac agent \u57f7\u884c\u8207\u7dad\u8b77\u5c0d\u8a71\u8108\u7d61\u7684\u5f15\u64ce\u8207\u8a18\u61b6\u7ba1\u7406\u7cfb\u7d71\u3002</li> <li>Delegation\uff08\u59d4\u6d3e\uff09\uff1a \u8a2d\u8a08\u591a agent \u5718\u968a\u80fd\u5e36\u4f86\u5c08\u696d\u5206\u5de5\u3001\u6a21\u7d44\u5316\uff0c\u4ee5\u53ca\u66f4\u4f73\u7684\u8907\u96dc\u4efb\u52d9\u7ba1\u7406\u3002Agent <code>description</code> \u662f\u81ea\u52d5\u6d41\u7a0b\u7684\u95dc\u9375\u3002</li> <li>Session State\uff08<code>ToolContext</code>\u3001<code>output_key</code>\uff09\uff1a \u6253\u9020\u5177\u8108\u7d61\u611f\u77e5\u3001\u500b\u4eba\u5316\u3001\u591a\u8f2a\u5c0d\u8a71 agent \u7684\u6838\u5fc3\u3002</li> <li>Callbacks\uff08<code>before_model</code>\u3001<code>before_tool</code>\uff09\uff1a \u5f37\u5927\u7684\u9264\u5b50\uff0c\u53ef\u5728\u95dc\u9375\u64cd\u4f5c\uff08LLM \u547c\u53eb\u6216\u5de5\u5177\u57f7\u884c\uff09\u4e4b\u524d\u5be6\u4f5c\u5b89\u5168\u3001\u9a57\u8b49\u3001\u653f\u7b56\u63a7\u7ba1\u8207\u52d5\u614b\u8abf\u6574\u3002</li> <li>\u5f48\u6027\uff08<code>LiteLlm</code>\uff09\uff1a ADK \u8b93\u4f60\u80fd\u4f9d\u4efb\u52d9\u9700\u6c42\u9078\u64c7\u6700\u4f73 LLM\uff0c\u517c\u9867\u6548\u80fd\u3001\u6210\u672c\u8207\u529f\u80fd\u3002</li> </ul> <p>\u63a5\u4e0b\u4f86\u53ef\u4ee5\u505a\u4ec0\u9ebc\uff1f</p> <p>\u4f60\u7684 Weather Bot \u5718\u968a\u662f\u4e00\u500b\u5f88\u68d2\u7684\u8d77\u9ede\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u9032\u4e00\u6b65\u63a2\u7d22 ADK \u4e26\u5f37\u5316\u61c9\u7528\u7684\u5efa\u8b70\uff1a</p> <ol> <li>\u4e32\u63a5\u771f\u5be6\u5929\u6c23 API\uff1a \u5c07 <code>get_weather</code> \u5de5\u5177\u4e2d\u7684 <code>mock_weather_db</code>\uff0c\u6539\u70ba\u547c\u53eb\u771f\u5be6\u7684\u5929\u6c23 API\uff08\u5982 OpenWeatherMap\u3001WeatherAPI\uff09\u3002</li> <li>\u66f4\u8907\u96dc\u7684 state\uff1a \u5728 session state \u5132\u5b58\u66f4\u591a\u4f7f\u7528\u8005\u504f\u597d\uff08\u4f8b\u5982\u9810\u8a2d\u5730\u9ede\u3001\u901a\u77e5\u8a2d\u5b9a\uff09\u6216\u5c0d\u8a71\u6458\u8981\u3002</li> <li>\u512a\u5316\u59d4\u6d3e\u908f\u8f2f\uff1a \u5617\u8a66\u4e0d\u540c\u7684 root agent \u6307\u4ee4\u6216\u5b50 agent \u63cf\u8ff0\uff0c\u5fae\u8abf\u59d4\u6d3e\u908f\u8f2f\u3002\u4f60\u80fd\u5426\u65b0\u589e\u4e00\u500b \"forecast\" agent\uff1f</li> <li>\u9032\u968e Callback\uff1a<ul> <li>\u4f7f\u7528 <code>after_model_callback</code>\uff0c\u5728 LLM \u7522\u751f\u56de\u61c9\u4e4b\u5f8c\uff0c\u9032\u884c\u683c\u5f0f\u5316\u6216\u6de8\u5316\u3002</li> <li>\u4f7f\u7528 <code>after_tool_callback</code>\uff0c\u8655\u7406\u6216\u8a18\u9304\u5de5\u5177\u56de\u50b3\u7684\u7d50\u679c\u3002</li> <li>\u5be6\u4f5c <code>before_agent_callback</code> \u6216 <code>after_agent_callback</code>\uff0c\u7528\u65bc agent \u5c64\u7d1a\u7684\u9032\u5165/\u96e2\u958b\u908f\u8f2f\u3002</li> </ul> </li> <li>\u932f\u8aa4\u8655\u7406\uff1a \u6539\u5584 agent \u8655\u7406\u5de5\u5177\u932f\u8aa4\u6216\u975e\u9810\u671f API \u56de\u61c9\u7684\u65b9\u5f0f\u3002\u4e5f\u8a31\u53ef\u4ee5\u5728\u5de5\u5177\u5167\u52a0\u5165\u91cd\u8a66\u908f\u8f2f\u3002</li> <li>\u6301\u4e45\u5316 session \u5132\u5b58\uff1a \u63a2\u7d22 <code>InMemorySessionService</code> \u4ee5\u5916\u7684\u6301\u4e45\u5316 session state \u65b9\u6848\uff08\u4f8b\u5982\u4f7f\u7528 Firestore \u6216 Cloud SQL \u8cc7\u6599\u5eab\u2014\u2014\u9700\u81ea\u8a02\u5be6\u4f5c\u6216\u7b49\u5f85\u672a\u4f86 ADK \u6574\u5408\uff09\u3002</li> <li>\u4e32\u6d41 UI\uff1a \u5c07 agent \u5718\u968a\u8207\u7db2\u9801\u6846\u67b6\uff08\u5982 ADK Streaming Quickstart \u5c55\u793a\u7684 FastAPI\uff09\u6574\u5408\uff0c\u6253\u9020\u5373\u6642\u804a\u5929\u4ecb\u9762\u3002</li> </ol> <p>Agent Development Kit (ADK) \u70ba\u5efa\u69cb\u5148\u9032 LLM \u61c9\u7528\u63d0\u4f9b\u4e86\u5805\u5be6\u57fa\u790e\u3002\u53ea\u8981\u638c\u63e1\u672c\u6559\u5b78\u6db5\u84cb\u7684\u5de5\u5177\u3001state\u3001\u59d4\u6d3e\u8207 Callback \u7b49\u6982\u5ff5\uff0c\u4f60\u5c31\u80fd\u99d5\u99ad\u65e5\u76ca\u8907\u96dc\u7684 agent \u7cfb\u7d71\u3002</p> <p>\u795d\u4f60\u958b\u767c\u9806\u5229\uff01</p>"},{"location":"tutorials/index.en/","title":"ADK Tutorials!","text":"<p>Get started with the Agent Development Kit (ADK) through our collection of practical guides. These tutorials are designed in a simple, progressive, step-by-step fashion, introducing you to different ADK features and capabilities.</p> <p>This approach allows you to learn and build incrementally \u2013 starting with foundational concepts and gradually tackling more advanced agent development techniques. You'll explore how to apply these features effectively across various use cases, equipping you to build your own sophisticated agentic applications with ADK. Explore our collection below and happy building:</p> <ul> <li> <p> Agent Team</p> <p>Learn to build an intelligent multi-agent weather bot and master key ADK features: defining Tools, using multiple LLMs (Gemini, GPT, Claude) with LiteLLM, orchestrating agent delegation, adding memory with session state, and ensuring safety via callbacks.</p> <p> Start learning here</p> </li> </ul>"}]}